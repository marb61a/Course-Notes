                    UIPath -> Enterprise Data Migration Bot
                    Project From the CompleteRPABootcamp

Resources will be in this folder
  - XLSX file, completed bot will be in the bots folder

Start a new Project
  - First start by registering with the future rpa site
    - https://project.futurerpa.com/
    - Site itself is built using the Bubble environment
    - Ensure that zoom is set to 100% to avoid responsiveness issues which may occur
    - Add all proper details as project comes with certificate so incorrect details will affect this
  - Start off by selecting New Process after starting up UIPath Studio
  - The purpose of the project is to show how the student would create an enterprise grade robot
  - Place the excel file in the same directory as the project file to avoid path issues
    - This is not best practice but robot design is the purpose of the course not file paths!!

Variable & Argument Notation
  - The customers data file is a .xlsx file which is a workbook in UIPath
  - Make sure that the activities tab is selected at the bottom of the activities panel
  - Then search for workbook and drag in Read Range
  - When the Read Range is bought in, it will be wrapped in a sequence which can be renamed to Main
    - This is a best practice as all activities should be renamed to fit into the project and are easily readable
    - Names should not be too long, spacing an capitalising the first letter of each word is a good idea but not compulsory
    - There is no standard scheme but having the first word being an action word eg Read will allow others to understand what is going on
  - To import the workbook simply click the folder icon on the activity and that will open a popup window
    - In some editions of UIPath this will be 3 dots
  - After import ensure that the correct sheet is named and the cell range to be used is stated
    - If not wanting to state a specific value simply leave 2 empty quotations
    - This reads all the data cells from a sheet in Excel
  - Then ouput a datatable which is in the properties panel
    - In the Output cell hit ctrl+k to set a variable, in this case CustomerData which is done using Pascal case
    - This should then appear in the variables panel (click variables tab)

Custom For Each Row
  - Looping through the customers in the excel file
  - There are 2 different options available, For Each Row and For Each
    - For Each Row is used to loop through each row in a data table
    - In the latest edition of UIPath (Aug 2021) For Each Row has been renamed to For Each Row in Data Table !!!
  - Use the CustomerData variable as the value for in and change value to row in ForEach
    - Again rename the For Each Row, this time to Process Each Customer
  - Then add a Write Line to the Body cell
    - We can select row and then choose .Item() and choose a column or columns.
    - There will be an error due to needing to convert from object to string so add .ToString method
  - After this then click Run
    - It is the play button or underneath debug file dropwown
    - The ouput can then be seen in the output panel which can be seen by clicking the output tab
    - Ensure that the spreadsheet is closed as being open will cause an error
    - Columns can be referenced by name or index, index starts at 0
    - If using numbers for index reference they do not need quotes
    - It is better to use the name as the index may change due to column insertion or deletion
 
 Logging In Process
  - Bring in a sequence above the read customer data
  - Make the assumption that the browser is always closed and add an Open Browser
    - Change to Open Project Website 
  - On the properties panel select Chrome from the BrowserType dropdown
  - Add the future rpa url in quotes to the url bar
  - Add a check to the new session box to ensure that the bot starts a new session 
  - Add a Maximize Window to ensure that the browser window is full size (Again best practice)
    - This should be done as soon as the browser is opened
  - Then we need to be able to login
    - We can do this by adding a click activity, in this case Mouse -> Click
    - This is added below the Maximize Window
    - Clicking the Indicate Element Inside Browser opens the browser and allows for selecting the element to be clicked
    - Again ensure that the correct browser and window is open to be able to add the right element
    - The click event can also be renamed, in this case to Click Login
    - After selecting the correct element you should check the selector from the properties panel Target -> Selector to ensure all is well
      - Check to make sure that the browser and url are correct for the project
    - Asterisks are used at the url beginning and end to avoid issues with things like http or https or trailing slashes
    - Ensure that you validate the selector, the browser and correct url will need to be open
  - To type in email and passwords add Keyboard -> Type Into below the click login
    - There is another Type Into available but this is for Computer Vision
      - Select the email field when the focus switches to the futurerpa url
        - Again validate this, then add a variable for the email eg MyLoginEmail and add a default value
        - The type into can then be renamed to something like Type Email Address
        - Simulate Type under options can be set to true to type in faster
        - Change Wait For Ready to Complete, this waits for the browser to fully load prior to typing
        - This is a slower option to choose but is a much safer option
    - Add another Type Into this time for the password
      - Again the element will have to be indicated and then validated
      - We can then assign the variable created for the password to the text field
    - Prior to adding the second Type Into at the top of the file add a Get Password
      - This should be the password that was used to register with the FutureRpa site
      - It should also be assigned to a variable
      - Selector can also be checked using right click -> edit selector
      - Change Type Into name to something like Type Password
      - Again set simulate type to true to enable faster typing
  - Add a click event and set it to click the login button, don't forget to rename
    - Press shift-F2 to disable element focus temporarily so that a window change can happen if on the wrong window
    - Default timeout is 30 secs, this may be good for debugging
    - Check to see if elements change if there are errors
  - Once the login works then there is no need to keep the sequence enabled
    - Click the double arrows to minimize the sequence
    - This can be disabled to avoid the need to constantly log in
    - Simply right click on the sequence that has been minimised and select disable activity or hit ctrl+d
 
 Error Handling in For Each
  - The activity for signing in works ok for simple signin but is not best practice
  - Ideally when building complex workflows, login functionality should be in a separate workflow
  - This could be done by right clicking on the sequence and choose extract as workflow
  - This would then generate a separate xaml file within the project
  - There would usually be 4 different xaml files within a project
    - The first would be to initialise a process, the second would be a workflow to get the data needed for the project
    - The third file would be where data processing functionality would be and the fourth file would be process ending functions eg logging out
  - The ReFramework framework follows this structure and will be covered in different robots
  - After disabling the login sequence, go back down to the Process Customer sequence
  - At present it is simply writing out the values from a column to a string
    - This will need to be changed as there are field in the futurerpa website that will need to have values added
  - Firstly add a Type Into type into the body sequence
  - There are further actions needed to follow best practice so delete the type into, the body and the existing writeline
    - At this point there should only be the Process Each Customer sequence
  - When using a ForEach, it is best practice to use a Try-Catch activity
    - This does not just apply to a ForEach, it applies to whenever a looping mechanism is being looped over
  -
