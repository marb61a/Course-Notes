                    Java SE 8 Programmer I Exam
                    Course Notes


                    Module 1: Before You Begin
1 - Why would I take the Oracle Certified Associate Java Programmer Exam
A brief introduction to the instructor
This was the associate exam in previous versions
Java certification exams are tough
The goal of the course is to not only know the material but fully understand them

2 - The path to certification
The course addresses the exam 1z0-808
  - This is level 1 or associate level under previous level designation
  - This exam is simple as there are no prerequisites
  - There is not a update path, this is only available on professional levels (Level II)
  - The professional level expects you to know all the material covered in Level I

3 - Preparation strategies
Some hints on how to study for the exam
  - Just watching the videos is not enough
  - Active learning is better for learning more material
  - There are many ways on taking an active part of learning eg coding

4 - Test Taking Strategies



                    Module 2: Java Basics
1 - Define the scope of variables
The scope of a variable is where in the source code you can actually see that variable
  - If you can use a variable by its name it is considered to be in scope
Example Syntax
  // In each of these cases the scope of the variables begins with their declaration and end with 
  // the closing braces of the block that encloses that declaration
  public void doStuff(){
    int i;
    
    // code block
    
    double d;
    {
      // Code blocks like this are legal in Java but uually not seen 
      float f;
      
    }-----> scope of float f ends here
  } -----> scope of int i & double d ends here
  
  // Some practical code
  public class Scope {
    private static int y = 99;
    
    public static void main(String[] args){
      int x = y;
      
      {
        int j = 100;
        System.out.println();
      }
      
      System.out.println();
    }
  }

2 - Define the structure of a Java class

3 - Create executable Java applications with a main method; run a Java program from the command line; including console output

4 - Import other Java packages to make them accessible in your code

5 - Compare and contrast the features and components of Java such as: platform independence, object orientation, encapsulation, etc.



                    Module 3: Working with Java Data Types
1 - Declare and initialize variables (including casting of primitive data types)

2 - Differentiate between object reference variables and primitive variables

3 - Know how to read or write to object fields

4 - Explain an Object's Lifecycle (creation, "dereference by reassignment" and garbage collection)

5 - Develop code that uses wrapper classes such as Boolean, Double, and Integer



                    Module 4: Using Operators and Decision Constructs
1 - Use Java operators; including parentheses to override operator precedence

2 - Test equality between Strings and other objects using == and equals ()

3 - Create if and if/else and ternary constructs

4 - Use a switch statement



                    Module 5: Creating and Using Arrays
1 - Declare, instantiate, initialize and use a one-dimensional array

2 - Declare, instantiate, initialize and use multi-dimensional array



                    Module 6: Using Loop Constructs
1 - Create and use while loops

2 - Create and use for loops including the enhanced for loop

3 - Create and use do/while loops

4 - Compare loop constructs

5 - Use break and continue



                    Module 7: Working with Methods and Encapsulation
1 - Create methods with arguments and return values including overloaded methods

2 - Apply the static keyword to methods and fields

3 - Create and overload constructors; including impact on default constructors

4 - Apply access modifiers

5 - Apply encapsulation principles to a class

6 - Determine the effect upon object references and primitive values when they are passed into methods that change the values



                    Module 8: Working with Inheritance
1 - Describe inheritance and its benefits

2 - Develop code that demonstrates the use of polymorphism

3 - Determine when casting is necessary

4 - Use super and this to access objects and constructors

5 - Use abstract classes and interfaces



                    Module 9: Handling Exceptions
1 - Differentiate among checked exceptions, RuntimeExceptions and Errors

2 - Create a try-catch block and determine how exceptions alter normal program flow

3 - Describe the advantages of Exception handling

4 - Create and invoke a method that throws an exception

5 - Recognize common exception classes and categories (such as NullPointerException, ArithmenticException, ArrayIndexOutOfBoundsException, ClassCastException)



                    Module 10: Working with Selected Classes from the Java API
1 - Understanding the common StringBuilder constructors

2 - Creating and manipulating Strings

3 - Create and manipulate calendar data using classes from java.time.LocalDateTime, java.time.LocalDate, java.time.LocalTime, java.time.format.DateTimeFormatter, java.time.Period

4 - Declare and use an ArrayList of a given type

5 - Write a simple Lambda expression that consumes a Lambda Predicate expression

