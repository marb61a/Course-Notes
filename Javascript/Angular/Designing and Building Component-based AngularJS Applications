                    Designing and Building Component-based AngularJS Applications
                    Course Notes


                    Section 1 - Course Overview
1 - Course Overview
Very quick, very high level overview of the course by the author


                    Section 2 - Course Introduction
1 - Overview
An overview of the reasons behind the course and a more indepth look at what will be covered
  - Not everyone can afford to move their applications to Angular
    - There can be a large learning curve
  - The Ecosystem can be difficult to setup
  - Angular forces you to use a component based mentality
  - The course will help you learn Angular
  - The course is platform agnostic other than the last chapter
    - That chapter uses Visual Studio and ASP.net

2 - The Lingo
AngularJS and Angular are different
  - Google had not helped ease the confusion
  - AngularJS refers to anything in the 1.x version family
    - It is the most popular version
    - It is the most straight forward to install
  - Angular refers to the version family 2.x and above
    - It is recommended to use Typescript rather than Javascript
    - The setup is a little more involved

3 - Course Agenda
A quick run through of what the course will cover

4 - Summary
A brief summary of the section


                    Section 3 - Shifting to a Component-based Design - Angular (2+) Thinking
1 - Overview
An overview of what is to come in the chapter

2 - What Are Components?
The dictionary definition of a component is that it is a part or element of a larger whole
  - This when translated into Software development is not that far off
In AngularJS components are completely contained widgets
  - They contain all the knowledge of how they look and act with the outside world
    - Covering appearance, behaviour and interface
  - They manifest themselves to the consumer as markup tags with or without some attributes
  - Example <main-navigator></main-navigator> <course course-id="123456" show-details="true"></course>
Component usage is forced on you in Angular2 and was added to AngularJs 1.5

3 - Difference from Directives
In some cases Directives can do more than componenents
  - The trade off though is htat they are more complicated to write
  - They can do more because they can be elements or attributes
  - Example <my-directive ng-model="boundValue" /> 
    <input type="text" ng-model="boundValue" ng-blur="doSomething()" />
  - Although there might be a temptation to use directives rather than components they each have use cases
    - Directives are more useful whe you need to perform DOM manipulation
    - Components help break an application down into smaller parts

4 - Disecting a Component
Components are simpler to write than directives
The 3 primary parts of a component are 
  - Template -- This is the markup that the component will render
  - Controller -- It contains functions etc that template elements will bind
  - Bindings -- These are thepredefined attributes that the component will expose so consumers can send & receive information
  - Some components may ony have a template or a template & controller  
The author has a preference for inlining all 3 of the above

5 - Component-based Design
Components are more suited for a hierarchial structure in application design
  - The author refers to this as component-based design throughout the course
Angular 2+ forces you to use a component based design pattern
  - You have to go out of your way not to use a component design pattern

6 - Other Hierarchical Application Platforms
Hierarchical based systems should be familiar to a lot of developers
  - The example uses xaml visual tree as the hierarchy of the page
  - HTML is also based on organisational design

7 - Comparing Component-based to Traditional Design 1
Templates And Controllers have always been at the heart of Angular.js apps
  - A template or view is usually larger as it represents an entire page
  - Controllers bind to the view
Angular Routing assigns a url to each template & controller combination
It is difficult to assign separate routes to areas within a view without additional route
  - It is customary to provide separate views and swap them in and out of the html pages using the ng-view placeholder
  - There is also a method to use ngIf & ngShow to accomplish some of this

8 - Comparing Component-based to Traditional Design 2
A component based application does not consider a view as a large monolith of markup
  - Instead it considers it as a container of several components
  - Components can have their own reserved area where child components can be displayed
  - The sample app from the course will use angular-ui-router so the directive will be ui-view
  - Event the main index.html page that was displayed will use ui-view
  - The anugular-ui-router allows for routes to be indentified in the component hierarchy
  - Using ng-view there is only 1 level of view swapping
  - Using ui-view there can be as many levels as is needed
  - This means that a route can change a small part of the view anywhere within the component hierarchy
    - It doesn't have to replace the entire view section as previously in ng-view

9 - Summary
A brief summary of the section



                    Section 4 - The Development Environment
1 - Overview
A very brief overview of what is ahead in the section

2 - Setting up the Front-end Stack
Visual Studio Code (free download) is the editor used in the course (not) compulsory
  - https://code.visualstudio.com
AngularJS v1.6 
Angular UI Router v0.4.2
Bootstrap 3.3.7
Live Server
The last 2 modules are MS Specific

3 - Demo Intro
A run through of what the demo will cover

4 - Folder Structure and Contents
The initial project will contain index.html and 2 folders
  - Scripts & Content
  - The scripts folder will contain Angular, JQuery etc
  - The content folder will contain Bootstrap, css

5 - VS Code and Index File
Example Syntax
  // Index.html file
  <!DOCTYPE html>
  <html>
    <head>
      <link rel="stylesheet" type="text/css" href="Content/bootstrap.css" />
      <link rel="stylesheet" type="text/css" href="Content/site.css" />
    </head>
    <body>
      ,<div>
        <h2>Welcome To</h2>
        <br /> <br />
        <h1>Designing &amp; Building Component-Based AngularJS Applications</h1>
        <style> </style>
        <base href='/'></base>
      </div>
      
      <script src="Scripts/jquery-3.1.1.js"></script>
      <script src="Scripts/angular.js"></script>
      <script src="Scripts/angular-ui-router.js"></script>
      <script src="Scripts/bootstrap.js"></script>
      <script src="Scripts/angular-web-api-security.js"></script>
      
    </body>
  </html>

6 - Live Server Installation
Using npm to install Live Server
  - If possible install globally
  - npm install -g live-server
  - https://github.com/tapio/live-server

7 - Running Live Server on-site
Ensure that you are in the root of the application folder structure
  - At the command line type live-server to start the live-server
  - This will start on 127.0.0.1:8080 by default
  - This will automatically startup a browser window

8 - Accessing the Back-end Services
The backend services are written using
  - ASP.Net Web API 2
  - They are included with the exercise files rather than code along

9 - Demo REST Services
Quick demonstration of the sample Azure application
  - Also a very quick run through of some of the REST urls available

10 - Demo API Documentation
Using the Web Api there is the opportunity to show the various API available

11 - Summary
A brief summary of the section



                    Section 5 - Writing a Component
1 - Overview
A very brief overview of what is ahead in the section

2 - Starting up Live Server
The instructor will be working from a specific folder for each module in the course
  - You should be in that folder when running live server
  - To run live server is simple -> At the prompt live-server 

3 - Creating the App Module
Create a new folder called App
  - Add an app.js file
Example Syntax
  // app.js
  // Start off by creating an angular module, enclosing the function limits scope and prevents issues in the app
  (function(){
    "use strict";
    
    var appModule = angular.module('app', ['ng-route']);
  })();

4 - Creating the Controller
Continuing with the app.js file from above
Example Syntax
  // app.js file
  (function(){
    "use strict";
    
    var appModule = angular.module('app', ['ng-route']);
    
    // When bound to a view controllers are essentially a view-model
    appModule.controller('simpleViewModel', function(){
      // vm as a view-model alias is used as opposed to $scope, this convention will be used throughout the course
      var vm = this;
      vm.name = {
        first: '',
        last: ''
      };
      vm.fullName = '';
      vm.submit = function(){
        vm.fullname = vm.name.first + ' ' + vm.name.last;
      }
    })
  })();

5 - Creating the View

6 - Add Standard Route

7 - Bootstrapping and Running

8 - Create Simple Component File and Shell

9 - Add Component Controller and Aliasing

10 - Add Component Template

11 - Bootstrap and Test Run



                    Section 6 - Laying out Your Component-based Application
1 - Overview
A very brief overview of what is ahead in the section

2 - The Application

3 - Designing a Component Tree - Home

4 - Designing a Component Tree - Courses

5 - Designing a Component Tree - Authors

6 - Creating Root Component and Test

7 - Adding First Two Child Components of the Root

8 - Add Home Component and Test

9 - Show Course List on Root Component

10 - Course and Author List Components

11 - Adding Course Component

12 - Adding Static Course-contained Components

13 - Adding Module, Description, and Discussion Components

14 - Hookup Components to Course and Test

15 - Component Border Trick



                    Section 7 - Routing
1 - Overview
A very brief overview of what is ahead in the section

2 - Routing and URLs as Part of Design

3 - Angular UI Router

4 - Comparison to Component Router

5 - The Angular UI Router State Machine

6 - Demo Intro

7 - Adding and Registering the First State

8 - Adding Courses and Authors States

9 - Modifying the Main Navigator Links

10 - Replacing Placeholder with ui-view

11 - Test in Browser



                    Section 8 - Building Out the Rest of the App Structure
1 - Overview
A very brief overview of what is ahead in the section

2 - States with URL Parameters

3 - Nested States and Components

4 - Demo Intro

5 - Setup Common Component Controller Pattern

6 - Activate the Link to a Sample Course

7 - Add Binding to Course Component

8 - Adding Course Routing State

9 - Show Course Info on Template and Test

10 - Initialize Course Object and Pass Down to Others

11 - Display in Course Heading and Test

12 - Activate Links in Course Navigator

13 - Add the Course-relative Routing States

14 - Add Binding Property to All Three Sub-components

15 - Review Routing Order of Operations

16 - Add ui-view and Test

17 - Rerouting to Default State and Retest



                    Section 9 - The Author List and Course List Components
1 - Overview
A very brief overview of what is ahead in the section

2 - Accessing Data

3 - The Two List Components

4 - Add API Host Address and Inject into Component

5 - Test API Calls in Browser

6 - Add API Call to Course-list Component

7 - Setup the Course-list HTML Template

8 - Finish the Course-list HTML Rendering

9 - Test the Course-list on the Browser

10 - Coding the Author-list Component in Full

11 - Test Author-list in Browser



                    Section 10 - Adding Services
1 - Overview
An overview of what is to come in the chapter

2 - AngularJS Controller Lifetime Scope

2 - Why Services?

4 - Demo Intro

5 - Create Course Service

6 - Add get-all-courses Function to Service

7 - Add API Call to Service Functions

8 - Change Course-list Controller to Call Service

9 - Test Service-based Course-list in Browser

10 - Create Author Service and Its Functions

11 - Modify Author-list Component to Use Service

12 - Test Service-based Author-list in Browser



                    Section 11 - Securing the Application
1 - Overview

2 - Security in AngularJS

3 - User Security

4 - Angular/WebAPI Security Library

5 - Demo Intro

6 - Ensure Security Library Is Loaded

7 - Show Security Library Contents

8 - Add User-panel and Test

9 - Add User Account Service

10 - Add Functions to User Account Service

11 - Inject Services into User-status Component

12 - Add Post-register Function to Controller

13 - Explain Callback and Order of Operation in Library

14 - Add Post-login and Helper Functions

15 - Add Initialization Function to Controller

16 - Wire Things up in User-status Component

17 - Show Function Bindings in Security Components

18 - Test Login and Register in Browser

19 - Discuss State Variables in Security Library



                    Section 12 - The Course Component and Its Internal Structure
1 - Overview

Course Component
1m 13s
Demo Intro
0m 19s
Retrieve Course Information
1m 14s
Course Passing and API Call Explanation
1m 17s
Course-modules Component HTML Template
1m 10s
Test in Browser
0m 50s
Add Time-formatting Functions
1m 27s
Testing in Browser
1m 7s
Course-description Component and Test
1m 23s
Fill in Course-heading Component
1m 26s
Course-discussion Component
0m 56s
Course Discussion Item Entry
0m 26s
Security Dependency
2m 8s
Demo Introduction
0m 21s
On-changes Hook in Course-discussion Component
1m 10s
Add Secure API Call to Course Service
1m 15s
Get the Discussion List
1m 5s
Course-discussion-list Component
1m
Course-discussion-list Component HTML Template
1m 15s
Display Course Discussion List and Test
1m 43s
Format Discussion Item Date
0m 39s
Create Discussion-item Component
0m 33s
Add Button and Item Component to Parent
1m 32s
Test in the Browser
0m 38s
Add Discussion Item to Service
0m 54s
Add Functions to Discussion Component
1m 35s
Add Visual Elements to Discussion-item Component
1m 20s
Raise Events from Discussion-item Component
1m 32s
Wiring up Events
1m 11s
Test Add-comment in Browser
1m 39s
Add Logged-in Property to Trigger Change
3m
Final Test
0m 53s
13
The Author & Sidebar Components
19m 49s
Overview
0m 30s
Author Component
0m 58s
Author Sidebar Component
1m 42s
Demo Intro
0m 38s
Show First Goals in Browser
0m 32s
Make Service Call to Get an Author
1m 3s
Author-heading Component and Test
1m 10s
Author-bio Component and Test
1m 47s
Setup the Author-courses Component
0m 51s
Make Service Call to Get Author Courses
0m 54s
Author-courses Template
1m 7s
Test Author Section in Full
1m 29s
Couple Author-sidebar to Course component
1m 19s
Add On-changes Hook to Sidebar Component
1m 38s
Calculate Course Length and Release Date
1m 7s
Start Sidebar Template and Explain Routing
0m 58s
Finish Sidebar Template
0m 48s
Final Test
1m 10s
14
Replacing the Home Component with Recent Courses
13m 27s
Overview
0m 31s
Recent Courses Component
1m 18s
Add Functions to Add Recently Viewed Courses
1m 33s
Get and Clear Functions in the Service
0m 50s
Update Recent List in Course Component
0m 32s
Create New Component
0m 32s
Retreive Recent Course List in Component
0m 55s
Setup Recent-courses Component Template
0m 57s
Fill in the Template Content
1m 14s
Show Component and Test
1m 15s
Add Security Dependency and Re-test
1m 27s
Add Clear List Call and Link
0m 33s
Final Test



                    Section 15 - What About ASP.NET?
1 - Overview
A very brief overview of what is ahead in the section

2 - Why ASP.NET?

3 - Tour of Skeletal Site and Layout Page

The App Folder and Its Contents
1m 30s
Adding All Course Viewer Files
0m 58s
Add CSHTML Shell View
1m 38s
Test Run
1m 9s
Scripts-section Contents
2m 15s
Bootsrapping the AngularJS Module
3m 1s
Setting up the Styles
1m 15s
Finish View by Showing Root Component
0m 47s
Full Test
3m 41s
Fixing Null-check Bug in Component
0m 57s
Full Routing Process Explanation
2m 54s
Summary and Farewell
0m 55s
