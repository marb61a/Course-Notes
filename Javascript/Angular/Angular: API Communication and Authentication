                    Angular: API Communication and Authentication
                    Course Notes
                    
                    
                    Section 1 - Welcome
1 - Welcome
Brief welcome to the course video
 
2 - What You Should Know
A list of prerequisites for the course, it assumes a basic level of knowledge of
  - Angular, Node, NPM & Git
You should have 
  - Git installed on your system
  - Node v6.10.0(minimum) & NPM version 3.10(minimum)
Postman will be used to setup and test API
  - https://www.getpostman.com
The instructor uses Visual Studio Code as the editor, again this is free and multi platform

                    
                    Section 2 - Getting Started
1 - Overview Of The Angular CLI
The course will be making use of the angular-cli tool which is available at
  - https://cli.angular.io
This tool is developed by the official Angular team, it makes it easy to
  - Setup a new project
  - Generate various components
  - This tool will need to installed globally on the system
    - You made need to run a terminal with elevated privileges in order to install some of the necessary packages
    - npm install -g @angular/cli
  - To create an application using angular-cli is very straightforward
    - ng new project-name

2 - Architecture Of A Node And Angular Application

3 - Database Setup Using mLab
The mLab site is located at the following address 
  - https://mlab.com
MLab is an online provide of database hosting and has a free tier
  - This makes it very appealing to developers

4 - Seeding A Database
Seeding a database with initial data is a fairly common task
  - The instructor has put together some sample data for seeding
If using Visual Studio Code it comes with its own built in terminal
To install the dependencies from the provided sample project
  - npm install
The next step is to add a new file .env  which will hold passwords as environmental variables
Example Syntax
  // The syntax for the .env file
  DB_CONN = mLab uri
  JWT_SECRET = web token
  
  // The seed-db.js file
  require('dotenv').config();
  
  // These are json files from the sample project
  const users = require('./users');
  const contacts = require('./contacts');

  const MongoClient = require('mongodb').MongoClient;
  const bcrypt = require('bcrypt');
  
  function seedCollection(collectionName, initialRecords){
    // Connect to the database
    
  }
  
                    
                    Section 3 - HTTP In Angular
1 - GET Route For The API
CRUD - Create, Read, Update, Delete
HTTP Verbs  - GET, POST, PUT, DELETE
  - They are used a lot in REST based API's
Example Syntax
  // index.js file
  const express = require('express');
  const app = express();
  
  const MongoClient = require('mongodb').MongoClient;
  require('dotenv').config();
  
  let database;
  
  MongoClient.connect(process.env.DB_CONN, (err, db) => {
    console.log('connnected to mongodb');
    
    app.listen(3000, () => {
      database = db;
      console.log('listening on Port 3000..');
    });
  })
  
  // Listen for Http GET requests on the contacts route
  app.get('/contact', (req, res) => {
    const contactsCollection = database.collection('contacts');
    
    // Gives accto the docs in the collection
    contactsCollection.find({}).toArray((err, docs) => {
      // Returns the collection in the response
      return res.json(docs);
    })
  })

2 - POST Route For The API


                    Section 4 - Creating An Angular Service For API Communication
1 - API Service With A Central Request Function
 
2 - Wrapper Functions For GET, POST, PUT And Delete
 
 
                    Section 5 - Adding JWT Authentication To The Node Express API
1 - JWT Overview             

2 - Using Express Router

3 - Using Login And Generating JWT's

4 - Authenticating Requests And Validating JWT's


                    Section 6 - UI Communication With The API And Authentication
1 - Auth Service For Local JWT Management

2 - Implementing A User Login

3 - Sending JWT's To API Requests

4 - Logging Out of The Application

5 - Preventing Route Access Without Authentication


                    Section 7 - Conclusion
1 - Next Steps
