                    Learning To Write Functional Javascript
                    Course Notes
                    
                    Section 1 - UNDERSTANDING FOUNDATIONS OF FUNCTIONAL PROGRAMMING
1 - The Course Overview
A quick introduction to the instructor
People with little or no experience of functional programm are the intended audience
A quick run through of the syllabus
Some prerequisites of the course are
  - Node is installed
  - NVM is installed for users on Linux\Mac
  - NPM is installed
  - YARN is an optional installation
  - Others are set up in the course project startup folder
    - This will need to be cloned from Github and installed

2 - The Unbreakable Function
Pure functions should not access values outside of themselves
Example Syntax
  // Impure Function
  // This example would break if the things array was removed from the program
  // The pure example would break but would be breaking outside the function whereas the
  // impure example breaks inside the function which is a programmer error and difficult to control
  const things = [
    {name: 'thing1', id: 1},
    {name: 'thing2', id: 2}
  ];
  
  function impureFunction(){
    const thing = things[0];
    return thing.id;
  }
  
  // A pure version of the above function
  // By supplying the value needed by the function instead of forcing it to reach outside
  // we can guarantee that the function will run as intended
  const things = [
    {name: 'thing1', id: 1},
    {name: 'thing2', id: 2}
  ];
  
  function pureFunction(thing){
    return thing.id;
  }
  
  pureFunction(things[0]);
  
Modifying resources is another big thing to avoid
  - Side effects from mutating can be very hard to trace and are unpredictable
Example Syntax
  let lives = 3;
  
  function playerLostImpure(){
    lives --;
  }
  
  const people = ['Robert', 'Arya', 'Catelyn', 'Tyrion'];
  
  function addPersonImpure(name){
    people.push(name);
  }
  
  Mutators in Javascript include
    - copyWithin, fill, pop, push, reverse, shift, unshift, splice, sort
  
  // To change the playerLostImpure function to a pure function
  let lives = 3;
  
  function playerLostImpure(lives){
    return lives - 1;
  }
  
  // Passes in lives rather than a value to increase referential transparency
  let playerLives = playerLostImpure(lives);

Primitive values in Javascript are immutable
Example Syntax
  // Wonderful mike is added to both arrays
  // This is a mutation of the array and can be very dangerous for your program to any
  // item pointing to the array
  const people = ['Robert', 'Arya', 'Catelyn', 'Tyrion'];
  const peopleCopy = people;
  
  function addPersonImpure(name){
    people.push(name);
  }
  
  addPersonImpure("Wonderful Mike");
  
  // A much more pure example of the above
  // All objects in arrays are passed by reference
  const people = ['Robert', 'Arya', 'Catelyn', 'Tyrion'];
  
  function addPersonImpure(list, ...name){
    // This is a much more flexible method than using array.push
    // Another alternative than push is to use concat
    return[...list, ...name];
  }
  
  const peopleCopy = addPersonImpure(people, "Wonderful Mike", "Sansa Stark");

  // I/O Input Output Side Effects
  const elem = document.querySelector('.impure-op');
  
  function impureAlways(){
    console.log('Impure... me? No way...!!!');
    elem.innerHTML = 'Impure on many fronts'
  }
There are no pure ways to write to the DOM
  - Each way has its dangers
  - The course will show better ways to write to the DOM

Referential Transparency
  - This means that there will be the same outputs returned when there are the same inputs always
Example Syntax
  // This is called a lambda function 
  const add = (a, b) => a + b;
  add(1, 2);                        -> 3
  add(2, 1);                        -> 3
  add(10, 10);                      -> 20
  add('Goodnight', 'Moon')          -> "Goodnight Moon"

3 - Thinking of Functions in Terms of Their Return Values
Lambda functions were introduced in ES6 
  - They use what are called fat arrow functions
Example Syntax
  // Getting the area of a cylinder
  const pi = math.PI;
  
  const multiply = (n, m) => n * m;
  const sum = (a, b) => a + b;
  const divide = (n, d) => n / d;
  const squared = n ** 2;
  const doubled = n * 2
  
  const height = 10;
  const diam = 20;
  
  function surfaceAreaCylinder(height, diameter){
    
  }
  
  const totalArea = surfaceAreaCylinder;

4 - How to Identify and Encapsulate Impurities within Our Programs



                    Section 2 - ABSTRACTING LANGUAGE CONSTRUCTS WITH HIGHER-ORDER FUNCTIONS
1 - Promoting Reusability with Higher-Order Functions

2 - Replacing Loops with Higher-Order Functions

3 - A Better Way to Map and Filter

4 - Reasoning with Reduce

5 - Rendering UI Components with Higher-Order Functions



                    Section 3 - PARTIAL APPLICATION AND CURRYING
1 - What Partial Application and Curry Mean?

2 - Improving Higher-Order Functions with Partial Application

3 - Writing a Utility to Curry Functions

4 - Combining Map, Filter, and Reduce with Curried Functions



                    Section 4 - WORKING WITH DATA AND STATELESS COMPONENTS
1 - Understanding Mutable and Immutable Data

2 - Simplifying Immutability Using Lenses

3 - Rendering Our Data into the DOM

4 - Using JSX and Virtual-DOM for Readability and Performance
