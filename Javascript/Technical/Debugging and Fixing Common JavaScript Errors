                    Debugging and Fixing Common JavaScript Errors
                    Course Notes
                    
                    
                    Section 1 - Debugging JavaScript
1 - Introduction
Introduction to the course and the instructor
  - Javascript can be difficult to work with due to many different factors
  - A quick run through of the agenda
  - Bugs will happen !!!

2 - Common JavaScript Quirks
A quiz for the students to see if they can guess the correct answers to JS questions on quirks of the language
Question 1 - What does 'poop emoji'.length return 
Answer 1 - 2, in JS the String.prototype.length returns the number of bytes rather than number of characters, unicode
           characters like emojis use 2 bytes

Question 2 - What will the following JavaScript return - 0.1 + 0.2
Answer 2 - It returns 0.3000000000004, this is because of a JavaScript issue with overflow rounding precision
           to avoid these issues it is necessary to use the toPrecision() function

Question 3 - What will the following JavaScript return new Date(2016, 5, 31)
Answer 3 - This returns July 1st 2016 because months are zero based in Date, this is only months

Question 4 - What will the following JavaScript return - new Array(0, 1, Array(2));
Answer 4 - [0, 1, [undefined, undefined]], this is because instantiating an array with multiple arguments creates an array
           from those values but a single argument only specifies the length.

Question 5 -  What will the following JavaScript return - [10, 5, 1].sort();
Answer 5 - This returns [1, 10, 5], this is because Array.Prototype.sort's default comparator assumes string operations, all
           values are coerced and compared as strings

3 - Debugging Cycle
How to fix bugs



                    Section 2 - Fixing Bugs
1 - The getRANTr Application

2 - Demo Application Review



                    Section 3 - First Bug
1 - Not Preventing the Default Behaviour

2 - Challenge 1: Cannot Read Property

3 - Challenge 1: Solution



                    Section 4 - Second Bug
1 - Challenge 2: Persisting Text

2 - Challenge 2: Solution



                    Section 5 - Third Bug
1 - Challenge 3: Server Reporting 400 Bad Request Errors

2 - Questions 1

3 - Challenge 3: Solution



                    Section 6 - Fourth Bug
1 - Challenge 4: One User, Many Errors

Challenge 4: Solution



                    Section 7 - JavaScript Quirks
1 - Common JavaScript Quirks 2



                    Section 8 - Fifth Bug
1 - Unexpected High Memory Usage

2 - Challenge 5: Memory Usage

3 - Challenge 5: Solution



                    Section 9 - Sixth Bug
1 - Slow Page Loads

2 - Challenge 6: Impacts of Load Performance

3 - Challenge 6: Solution



                    Section 10 - Seventh Bug
1 - Third Party Error

2 - Challenge 7: Uncontrolled Changes

3 - Challenge 7: Solution



                    Section 11 - Eighth Bug
1 - Network/Proxy Bug

2 - Challenge 8: jQuery Fails to Load

3 - Challenge 8: Solution



                    Section 12 - Design for Debuggability
1 - Questions 2

2 - Developing for a Hostile Environment

3 - Isolating Errors

4 - Resolving Bugs

5 - Preventing Bugs



                    Section 13 - Wrapping Up Debugging JavaScript
1 - Wrapping Up
Conclusion of the course and a quick run through of what was covered
