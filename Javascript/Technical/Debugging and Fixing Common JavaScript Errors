                    Debugging and Fixing Common JavaScript Errors
                    Course Notes
                    
                    
                    Section 1 - Debugging JavaScript
1 - Introduction
Introduction to the course and the instructor
  - Javascript can be difficult to work with due to many different factors
  - A quick run through of the agenda
  - Bugs will happen !!!

2 - Common JavaScript Quirks
A quiz for the students to see if they can guess the correct answers to JS questions on quirks of the language
Question 1 - What does 'poop emoji'.length return 
Answer 1   - 2, in JS the String.prototype.length returns the number of bytes rather than number of characters, unicode
             characters like emojis use 2 bytes

Question 2 - What will the following JavaScript return - 0.1 + 0.2
Answer 2   - It returns 0.3000000000004, this is because of a JavaScript issue with overflow rounding precision
             to avoid these issues it is necessary to use the toPrecision() function

Question 3 - What will the following JavaScript return new Date(2016, 5, 31)
Answer 3   - This returns July 1st 2016 because months are zero based in Date, this is only months

Question 4 - What will the following JavaScript return - new Array(0, 1, Array(2));
Answer 4   - [0, 1, [undefined, undefined]], this is because instantiating an array with multiple arguments creates an array
             from those values but a single argument only specifies the length.

Question 5 -  What will the following JavaScript return - [10, 5, 1].sort();
Answer 5   - This returns [1, 10, 5], it is because Array.Prototype.sort's default comparator assumes string operations, all
             values are coerced and compared as strings

3 - Debugging Cycle
How to fix bugs
  - The example will be a very generic example of a cycle
  - Bugs can identified at lots of different phases in the development cycle
    - Development, Testing, Monitoring, End User Reports
    - The earlier the bug it is cost the cheaper, the better and faster the fix is.
  - We isolate a bug in context
    - Browser eg IE or Chrome, Pages, User, Scripts
    - The timeline is also important to be understood
      - This is because the browser is a complex state machine
        - It uses API's, JS Apps, DOM, Browsers
    - Understanding the root cause
  - Resolving the bug has to be done correctly
    - You should understand the Risk, change and impact of fixing a bug in a certain way
  - Prevention
    - Use things like regression tests to check for the recurrence of a bug
    - Bugs can also be prevented by process changes
      - Manual changes eg policies
      - Automation eg Continuous Integration
    - Sometimes the right solution is to do nothing
      - Tests and processes have costs which are often non-trivial so may be out of reach



                    Section 2 - Fixing Bugs
1 - The getRANTr Application
The application that will be used for practical exercises in the course
  - It is similar to twitter but for single users
  - It is written in js using the track.js framework in part for finding bugs
    - https://trackjs.com
  - There is a github available and is semi open source

2 - Demo Application Review



                    Section 3 - First Bug
1 - Not Preventing the Default Behaviour
This will use the sample app to demonstrate a particular bug and the solution for fixing it
  - The first bug is that a user cannot delete a rant from their timeline
    - There is a delete button in the app
If possible, when debugging use real data and real users
  - Development data may not be useful
  - The sample app has some sample real user data available
Using the Chrome browser, open up the dev panel
  - When clicking on the button nothing happens in the console
  - The app is reloading each time that the delete button is clicked
    - Ensure that the preserve log option is ticked on as it will hold information about what was happening
  - The Chrome browser has blackboxing available
    - This allows for eliminating infrastructure scripts from blocking finding an error
  - The dev panel has an event listeners tab available which shows which pieces of JS are listening to a particular button
    - This also includes parent unless you use uncheck ancestors
    - Javascript uses event delegation which listens for an event at a higher level
    - It will be the click method in this case that interests us
  - When a button inside a HTML form is clicked by default the form is submitted
    - At the start of the section there is no prevention of this default behaviour 
  - Chrome allows for folders to be added to facilitate live editing
    - This is done through workspaces and can be navigated to
    - This will save navigating by hand
  - Using evt.preventDefault() will prevent this from happening
    - This is the first step of fixing this issue 

2 - Challenge 1: Cannot Read Property

3 - Challenge 1: Solution



                    Section 4 - Second Bug
1 - Challenge 2: Persisting Text

2 - Challenge 2: Solution



                    Section 5 - Third Bug
1 - Challenge 3: Server Reporting 400 Bad Request Errors

2 - Questions 1

3 - Challenge 3: Solution



                    Section 6 - Fourth Bug
1 - Challenge 4: One User, Many Errors

Challenge 4: Solution



                    Section 7 - JavaScript Quirks
1 - Common JavaScript Quirks 2



                    Section 8 - Fifth Bug
1 - Unexpected High Memory Usage

2 - Challenge 5: Memory Usage

3 - Challenge 5: Solution



                    Section 9 - Sixth Bug
1 - Slow Page Loads

2 - Challenge 6: Impacts of Load Performance

3 - Challenge 6: Solution



                    Section 10 - Seventh Bug
1 - Third Party Error

2 - Challenge 7: Uncontrolled Changes

3 - Challenge 7: Solution



                    Section 11 - Eighth Bug
1 - Network/Proxy Bug

2 - Challenge 8: jQuery Fails to Load

3 - Challenge 8: Solution



                    Section 12 - Design for Debuggability
1 - Questions 2

2 - Developing for a Hostile Environment

3 - Isolating Errors

4 - Resolving Bugs

5 - Preventing Bugs



                    Section 13 - Wrapping Up Debugging JavaScript
1 - Wrapping Up
Conclusion of the course and a quick run through of what was covered
