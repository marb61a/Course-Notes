                    Shell Scripting With Javascript
                    Course Notes
                    
                    
                    Section 1 - A First JS Shell Script
1 - Is This The Course For Me
The student should know some Javascript
  - The course aims to help eliminate and automate some mundane tasks
  - There are more people familiar with using Javascript than with shell scripting eg BASH or PowerShell
  - Leveraging this can be quicker and more effective than learning other scripting languages & environments
The course will use NodeJS
  - These scripts can work very well across platforms
  - There are a huge amount of packages to help in script development
  - There will be some testing examples for testing scripts

2 - About The Author
A quick introduction and bio of the author

3 - Shell Scripting Mac, Linux, Unix With BASH
A quick look at the bash shell on multiple *nix platforms
There is a command reference available at
  - https://ss64.com

4 - Shell Scripting Windows
Windows has 2 different shell approaches
  - The traditional command prompt
  - Powershell 
    - Powershell has had many *nix aliased to it so you are able to use *nix commands
    - Awk is not available on Windows
    - Powershell is object oriented

5 - Why NodeJs

6 - NodeJS Versions And Mac Tooling 

7 - Windows Tooling

8 - The NodeJS REPL As A Shell

9 - Benefit NPM Ecosystem Of PA

10 - Benefit Object Oriented

11 - Benefit Cross Platform Consistency

12 - How To Your Working Files
A quick guide on how to access the working files which come as part of the course

                    
                    Section 2 - Connecting Shell Concepts
1 - A First JS Script
Switching from the repl to external JS files
To install the moment package  
    - npm install moment
Example Syntax
  // generateBlogPost.js from a sample project
  var moment = require('moment');
  
  console.log(moment().format('YYYY-MM-DD-HH-mm'));

2 - NodeJS Globals

3 - Environment Variables

4 - Writing To Files

5 - STDOUT STDERR

6 - Exit Codes
When a program terminates unexpectedly there should be exit codes set to show what went wrong
  - This is in addition to console.warn which goes to STDERR
  - When everything goes OK on BASH the exit code is usually 0
  - The non zero exit codes can be up to the developer but a lot of applications use 1
Example Syntax
  // Adding exit code to generateBlogPost.js file
  

7 - MyPyramid Food Raw Data Example

8 - The Path Module

9 - Using In Paths

10 - Reading A File

11 - Piping Output

12 - Pretty Print XML

13 - Arguments

14 - Challenge: Word Count


                    
                    Section 3 - ShellJS
1 - ShellJS
ShellJS is a library which is built on top of NodeJS
  - It is an implementation of shell commands
  - It can simplify writing shell scripts in JS
  - http://documentup.com/shelljs/shelljs
  - To install (globally)  -> npm install -g shelljs

2 - ls And echo
ShellJS is installed locally
Example Syntax
  // thumbnails.js file, to run -> node thumbnails.js
  require("shelljs/global");
  
  var images = ls("images/*.JPG");              // Can be used instead of fs.readdirSync()
  echo(images);                                 // Console.log() can be used instead of echo 

3 - rm And mkdir
Continuing using the thumbnails.js example
Example Syntax
  require("shelljs/global");
  
  var images = ls("images/*.JPG");              
  echo(images);                                 
  
  // Remove an existing thumbs directory and then add a new thumbs directory
  // You will also need to us the -rf flag so the it does it recursively through any subdirectories
  rm("-rf", "thumbs");                          // same as how rm operates at the command line
  mkdir("thumbs");                              // The same as fs.mkdir/mkdirSync

4 - Thumbnail Conversion Part 1
Using the lwip package on Node
  - https://github.com/EyalAr/lwip
  - LWIP -- acronym for Light Weight Image Processor for Node
  - To install using npm -> npm install lwip
    - This package does not rely on any other software being installed to perform operations
  - There are many transformations available but the example will use the contain transformation
Example Syntax
  // Again continuing to use the thumbnails.js example
  require("shelljs/global");
  var lwip = require("lwip");
  
  var images = ls("images/*.JPG");              
  echo(images); 
  
  rm("-rf", "thumbs");
  mkdir("thumbs"); 

5 - Thumbnail Conversion Part 2

6 - exec

7 - find And filter

8 - Exit

9 - cat And to

10 - Env

11 - Prompting For Input

12 - Portability And lwIP On Windows

13 - Resources
                    
                    
                    Section 4 - Options With Commander
1 - Commander

2 - Arguments With Commander

3 - Automatic Help

4 - Required Argument

5 - Argument Defaults

6 - Spitting Out An Options Module

7 - Challenge


                    
                    Section 5 - Functional Pipelines
1 - Back To CSV's

2 - Average Closing Price

3 - Functional Sum

4 - Separation Of Concerns

5 - Sorting Prices

6 - Average Price By Week


                    
                    Section 6 - Reusing Shell Scripts
1 - Running The Script Anywhere
You may wish to run these scripts similar to an executable files
This is what this chapter will be covering using a 3 pronged approach
  - Setup an npm package
  - Install the package globally
  - Examine under the hood on both Windows and Mac systems
    - There are only slight differences

2 - Setting Up A Global NPM Package

3 - Global Packages On A Mac

4 - Global Packages On Windows

5 - Updaing Our Package

6 - Publishing The Script

                    
                    Section 7 - Testing Shell Scripts
1 - The Desire To Test
Rather than constantly running the scripts to ensure that they are working it may be better to have tests
The course will be using the Mocha test framework
There are a plethora of testing tools available if not Mocha
  - Also testing is not a compulsory exercise but is recommended where appropriate

2 - Setting Up Mocha

3 - Testing Weekly Averages 1

4 - Testing Weekly Averages 2

5 - Course Conclusion And Resources
