                    Regex In Javascript
                    Course Notes
                    
                    
1 - Introduction
A regular expression can be defined as a sequence of characters that defines a pattern that can be used to
match that pattern inside of another string
Example Syntax
  "use strict";
  
  var str = 'Is this This';
  
  // Javascript has 2 different ways to create a regular expression
  // The first one the instructor calls the constructor method
  // It is very important to understand that what is passed in to RegExp() is a pattern not a string
  var regex = new RegExp("is");
  
  // Rgeular expressions provide some methods to use to find a pattern
  // The test() function will always return true or false 
  console.log(regex.test(str));
  
  // The second method for creating a regular expression the instructor calls the literal regular expression
  // It is delimited by 2 forward slashes and the pattern is passed between them
  var str = 'Is this This';
  
  var regex = /is/;
  // Adding the g argument means global
  var regex = /is/g;
  // Adding the i flag is for ignoring case
  var regex = /is/gi;
  
  console.log(regex.test(str));
  
  // Running this twice shows the occurences of the pattern a second time (if it occurs a second time)
  // Test always retruns true or false but if exec has no pattern to return it will return a null
  // Regular Expressions are state aware
  console.log(regex.exec(str));
  console.log(regex.exec(str));
  console.log(regex.exec(str));
  
  // String works very well with regular expressions, the particular example will return
  // an array of the pattern matches
  console.log(str.match(regex));
  // String can also replace the pattern in a string with a desired value such as below
  console.log(str.replace(regex, str => 'XX'));
  // There is also a string method for searching a string for a pattern
  // The example below will return 0 where the first occurence of the pattern begins
  console.log(str.search(regex));

// The example will also use a custom built highlighter
Example Syntax
  // The syntax for the index.html file from the highighter
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title> Tester </title>
      <style>
        pre {
          line-height: 2;
        }
        span {
          background-color: #eee;
          padding: 1px;
          outline: 1px solid #999;
        }
      </style>
    </head>
    <body>
      <pre></pre>
      <script src=app.js><script>
    </body>
  </html>
  
  // app.js

2 - Find Plain Text Patterns

3 - Find Repeated Patterns 

4 - Find Sets Of Characters

5 - Use Shorthand to Find Sets Of Common Characters

6 - Find Groups Of Characters

7 - Find A String That Preceeds Another String

8 - Find The Start And End Of Whole Words

9 - Match The Same String Twice

10 - Match The Start And End Of A Line
