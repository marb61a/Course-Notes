                    Step-by-Step Async JavaScript with RxJS
                    Course Notes
                    
                    
1 - Starting a Stream with SwitchMap
Example Syntax
  // Index.html
    <button id="start">
      Start
    </button>
  
  // app.ts
    import {Observable} from 'rxjs/Rx';
    const startButton = document.querySelector('#start');

    // Will generate mouse events
    Observable.fromEvent(startButton, 'click')
      .subscribe((event) => console.log(event));
    
    // Setting up a timer
    Observable.interval(1000)
      .subscribe((x) => console.log(x));
Although the temptation to cut the timer function and paste it into the click event handler in order to combine
the functionality do not do this, do not nest multiple subscription blocks inside each other
  - You will not be able to reuse the stream , what comes out of a subscribe is a subscription not an observable
  - In the example when the button is clicked there should be a switch over to an interval observable
Example Syntax
      // The correct way of combining the two above examples
      Observable.fromEvent(startButton, 'click')
        .switchMap(() => Observable.interval(1000))
        // Using this will allow where the start button is clicked to determine the speed of the interval
        // Far left on the button is fast and far right is slow
        // .switchMap(() => Observable.interval(1000))
        .subscribe((x) => console.log(x));

      // There other way of doing the above example which works in the same way 
      import {Observable} from 'rxjs/Rx';
      const startButton = document.querySelector('#start');
      
      const start$ = Observable.fromEvent(startButton, 'click');
      const interval$ = Observable.interval(1000));
      const startInterval$ = start$
                          // You can also use switchMapTo which uses the Observable rather than a function which returns
                          // an Observable
                                .switchMap((event) => interval$);
      
      startInterval$
        .subscribe((x) => console.log(x));
      
2 - Stopping a Stream with TakeUntil
Example Syntax
  // index.html file
    <button id="stop">
      Stop
    </button>
  
  // app.ts
    import {Observable} from 'rxjs/Rx';
    
    const startButton = document.querySelector('#start');
    const stopButton = document.querySelector('#stop');
    
    const start$ = Observable.fromEvent(startButton, 'click');
    const interval$ = Observable.interval(1000));
    
    const startInterval$ = start$
                                .switchMapTo(interval$)
                                .subscribe((x) => console.log(x));
   
    const subscription = interval$
          .subscribe((x) => console.log(x));
    
    Observable,fromEvent(stopButton, 'click')
          .subscribe(() => {
            // Stops the timer when the button is clicked
            subscription.unsubscribe();
          })

3 - Updating Data with Scan


4 - Displaying Initial Data with StartWith


5 - Changing Behavior with MapTo


6 - Handling Multiple Streams with Merge


7 - Refactoring Composable Streams in RxJS


8 - Getting Input Text with Map


9 - Combining Streams with CombineLatest


10 - Adding Conditional Logic with Filter


11 - Completing a Stream with TakeWhile


12 - Handling a Complete Stream with Reduce


13 - Logging a Stream with Do


14 - Timer and Input Recap


15 - Refactoring CombineLatest to WithLatestFrom


16 - Resubscribing to a Stream with Repeat


17 - Basic DOM Rendering with Subscribe


18 - Sharing Streams with Share

