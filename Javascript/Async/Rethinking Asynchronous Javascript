                    Rethinking Asynchronous Javascript
                    
                    
                    
                    Section 1 - Parallel vs Async
1 - Course Introduction
Introduction to both the course and instructor
Course will be indepth
Instructor developed asynquence
  - https://github.com/getify/asynquence
Instructor prefers to learn the concepts of why rather than starting to use libraries etc without understanding why it works
Callbacks have some very serious deficiencies which will be discussed
New level of competency is an understanding of promises & generators and how they mix

2 - Single Threaded Javascript
Most people think that Async and Parallel are the same but they arent
An explanation of the differences is available 
  - https://www.quora.com/What-are-the-differences-between-parallel-concurrent-and-asynchronous-programming

3 - Concurrency
People think that concurrency means things occuring at the same time which the instructor partially agrees with
Instructor personally defines concurrency as 2 higher level tasks happening within the same timeframe
Demo of micro vs macro level tasks -- not official terminology
The operations have to happen on the same thread
Thread may suffer problems with contention 
Synchronous XHR has been deprecated and was a very bad idea
Synchronous XHR information available at
  - https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests
Interleaving operations give the impression of better performance and the ability for concurrency
Callbacks are insufficient for dealing with the complexity of modern Javascript



                    Section 2 - Callback
1 - Callback Hell
There is a website available with JS callback examples
  - http://callbackhell.com

2 - Exercise 1

3 - Exercise 1 Solution

4 - Callback Problems Inversion of Control

5 - Callback Problems Not Reasonable

6 - Non-Fixes


                    Section 3 - Thunks
1 - Synchronous and Asynchronous Thunks

2 - Exercise 2

3 - Exercise 2 Solution

4 - Thunks and Closure



                    Section 4 - Promises
1 - Native Promises

2 - Promise API

3 - Promise Flow Control

4 - Exercise 3

5 - Exercise 3 Solution

6 - Exercise 3 Solution Questions Part 1

7 - Exercise 3 Solution Questions Part 2

8 - Exercise 4 

9 - Exercise 4 Solution

10 - Abstractions

11 - Sequences and Gates

12 - Exercise 5

13 - Exercise 5 Solution

14 - Exercise 6



                    Section 5 - Generators
1 - Generator Example

2 - Messaging

3 - Messaging Questions

4 - Async Generator

5 - Promises Generator

6 - Exercise 7

7 - Exercise 7 Solution

8 - Quiz



                    Section 6 - Observables
1 - Events-Promises

2 - Observables

3 - Reactive Sequences

4 - Exercise 8

5 - Exercise 8 Solution Part 1

6 - Exercise 8 Solution Part 2



                    Section 7 - CSP (Communicating Sequential Processes)
1 - Concurrency Channels

2 - Blocking Chains

3 - Event Channels

4 - Exercise 9

5 - Exercise 9 Solution

6 - Recap

7 - Exercise 10

8 - Wrap Up
