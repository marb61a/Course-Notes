                    Rethinking Asynchronous Javascript
                    Course Notes
                    
                    
                    Section 1 - Parallel vs Async
1 - Course Introduction
Introduction to both the course and instructor
Course will be indepth
Instructor developed asynquence
  - https://github.com/getify/asynquence
Instructor prefers to learn the concepts of why rather than starting to use libraries etc without understanding why it works
Callbacks have some very serious deficiencies which will be discussed
New level of competency is an understanding of promises & generators and how they mix

2 - Single Threaded Javascript
Most people think that Async and Parallel are the same but they arent
An explanation of the differences is available 
  - https://www.quora.com/What-are-the-differences-between-parallel-concurrent-and-asynchronous-programming

3 - Concurrency
People think that concurrency means things occuring at the same time which the instructor partially agrees with
Instructor personally defines concurrency as 2 higher level tasks happening within the same timeframe
Demo of micro vs macro level tasks -- not official terminology
The operations have to happen on the same thread
Thread may suffer problems with contention 
Synchronous XHR has been deprecated and was a very bad idea
Synchronous XHR information available at
  - https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests
Interleaving operations give the impression of better performance and the ability for concurrency
Callbacks are insufficient for dealing with the complexity of modern Javascript



                    Section 2 - Callback
1 - Callback Hell
There is a website available with JS callback examples
  - http://callbackhell.com
Async Callback Example Syntax
  setTimeout(function(){
    console.log("callback");
  }, 1000);
The author call this example a continuation with 2 halves
  - 1st half is everything outside the timeout including the call itself
  - 2nd is everything inside the callback
Callbacks == Continuations
Callback Hell Example Syntax
  setTimeout(function(){
    console.log("one");
    setTimeout(function(){
      console.log("two");
      setTimeout(function(){
        console.log("three");
      }, 1000);
    }, 1000);
  }, 1000);
Sometimes referred to as the pyramid of doom
Not just about nesting or indentation
Example above in Continuation Passing Style Syntax
It suffers the same problems as above but the nesting is much more subtle
  function one(cb){
    console.log("one");
    setTimeout(cb, 1000);
  }
  function two(cb){
    console.log("two");
    setTimeout(cb, 1000);
  }
  function three(cb){
    console.log("three");
    setTimeout(cb, 1000);
  }
  one(function(){
    two(three);
  })

2 - Exercise 1
# Instructions
1. This exercise calls for you to write some async flow-control code. To start off with, you'll use callbacks only.
2. Expected behavior:
	- Request all 3 files at the same time (in "parallel").
	- Render them ASAP (don't just blindly wait for all to finish loading)
	- BUT, render them in proper (obvious) order: "file1", "file2", "file3".
	- After all 3 are done, output "Complete!".
Managing state through callbacks may seem simple but is difficult

3 - Exercise 1 Solution
There are many solutions possible but this is the official solution
Ordering callbacks will require sequential requesting
Paralell requesting will cause concurrency co-ordination complexity
The main point point of the exercise was to show how 3 callbacks would shared a closured state to co-ordinate
Solution Syntax
  function getFile(file){
    fakeAjax(file, function(text){
      fileReceived(file, text);
    });
  }

  function fileReceived(file,text) {
  // haven't received this text yet?
  if (!responses[file]) {
    responses[file] = text;
  }
  var files = ["file1","file2","file3"];
  // loop through responses in order for rendering
  for (var i=0; i<files.length; i++) {
    // response received?
    if (files[i] in responses) {
      // response needs to be rendered?
      if (responses[files[i]] !== true) {
        output(responses[files[i]]);
        responses[files[i]] = true;
      }
    }
    // can't render yet
    else {
      // not complete!
      return false;
    }
  }
  output("Complete!");
  }	

// hold responses in whatever order they come back
var responses = {};

4 - Callback Problems Inversion of Control
Inversion of Control
	- Loads of different definitions available
	- Here it means that there are portions of the code I am incharge of executing and parts I am not
	- This takes the code that executes now and the code executed in a callback and gives someone else control which is the 
  inversion
	- This is said to be one of two major problems with callbacks
	- Example Syntax
	trackCheckout(
		purchaseInfo,
		function finish(){
			chargeCreditCard(purchaseInfo);
			showThankYouPage();
		}
	)
	The example above trusts that it will not be called too many times or too few, below is a fix based on a boolean
	- Example Syntax
	var hasBeenCalled = false;
	trackCheckout(
		purchaseInfo,
		function finish(){
			if(!hasBeenCalled){
				hasBeenCalled = true;
				chargeCreditCard(purchaseInfo);
				showThankYouPage();
			}
		}
	)
	- Trust
	 - Not too early
	 - Not too late
	 - Not too many times
	 - Not too few times
	 - No lost context
	 - No swallowed errors
	What happens if the trust falls apart?
	If your program does not have fixes for all of the above issues then the program has a bug even if is not apparent
	
5 - Callback Problems Not Reasonable
Callbacks in the instructors view cannot be reasoned about.
The instructor reckons that bugs happen when the programmers natural inclination for sequential steps diverges from the
JS Engine
Pseudo Task Syntax
	- start task1:
		do some stuff
		pause
	- start task2:
		do some other stuff
		pause
	- resume task1:
		do more stuff
		pause
	- resume task2:
		finish stuff
	- resume task1:
		finish stuff
Refactored Pseudocode which has begun to resemble callbacks Syntax
	- start task1:
		do some stuff
		pause
			resume task1:
				do more stuff
				pause
					resume task1:
						finish stuff
	- start task2:
		do some other stuff
		pause
			resume task2:
				finish stuff
Temporal dependency is where an item depends on another item finishing before this item can proceed, this nesting is the
only way callbacks can handle temporal dependencies
No single developer will understand all flow paths of async code

6 - Non-Fixes
Some attempts at fixes have made issues worse
Split callbacks are an example of attempts to fix callbacks
	- This was is a situation where we have an error that we do not want to get swallowed just in case there is a problem with 
	  the main function, this then passes a seperate callback for errors
	- This doesn't work as it makes trust issues worse, what happens if neither function or both is called?
	-
Split callback Syntax
	function trySomething(ok, err){
		setTimeout(function(){
			var num = Math.random();
			if(num > 0.5) ok(num);
			else err(num);
		}, 1000);
	}
	trySomething(
		function(num){
			console.log('Success : ' + num);
		},
		function(num){
			console.log('Sorry : ' + num);
		}
	);

Error first Callbacks
	- used in Node.js
	- Dont fix the trust issues from split callbacks
	- Syntax
	function trySomething(cb){
		setTimeout(function(){
			var num = Math.random();
			if(num > 0.5) cb(null, num);
			else cb('Too Low');
		}, 1000);
	}
	trySomething(
		function(err, num){
			if(err){
				console.log(err);		
			}
			else {
				console.log('Number : ' + num);
			}
		}
	);

Nested Callback Syntax
	function getData(d, cb){
		setTimeout(function(){
			cb(d);
		}, 1000);	
	}
	getData(10, function(num1){
		var x = 1 + num1;
		getData(30, function(num2){
			var y = 1 + num2;
			getData(
				"Meaning of Life : " + (x + y),
				function(answer){
					console.log(answer);
				}
			);
		});
	});

                    Section 3 - Thunks
1 - Synchronous and Asynchronous Thunks
From a synchronous perspective a thunk is a function that has everything already that it needs to give you something back
you do not need to pass in anything, simply call it and it gives you back a value
Synchronous Thunk Example Syntax
	function add(x, y){
		return x + y;
	}
	
	var thunk = function(){
		return add(10,15);
	}
	
	thunk();
thunk has become a wrapper around that state as it is the same number and can be passed around the program like a token
This is the conceptual underpinning for what a promise is in JS
An asynchrounous thunk has many definitions, there are many different right answers, is can be defined as a function that
does not need any arguments passed to it tot do its job except you need to pass it a callback to get the value out
Asynchronous Thunk Example Syntax
	function addAsync(x, y, cb){
		setTimeout(function(){
			cb(x + y);
		}, 1000);
	};
	
	var thunk = function(cb){
		addAsync(10, 15, cb);
	};
	
	thunk(function(sum){
		sum();
	});
What makes this so powerful is that we do not know or care how long it will take to get that value
By wrapping the function around the state and allowing it to be asynchronous we have esentially normalised time out of the
equation
Time is the most complex factor of state in a program
Thunks do not offer any solutions to Inversion of Control, promises will offer solutions to IOC's
Nested Thunk Syntax
// This is a re-writing of the previous section example
// The first line does not perform an AJAX request, it merely creates a wrapper that will make the request when called
  var get10 = makeThunk(getData, 10);
  var get30 = makeThunk(getData, 30);
  
  get10(function(num1){
    var x = 1 + num1;
    get30(function(num2){
      var y = 1 + num2;
      // This thunk cannot be created earlier as it is temporally dependent on the other thunks
      var getAnswer = makeThunk(getData, 
        "Meaning of life is " + (x + Y)
      );
      getAnswer(function(answer){
        console.log(answer);
      });
    });
  })

2 - Exercise 2
The same as exercise 1 but this time it involves thunks instead

3 - Exercise 2 Solution
Solution Syntax
	var th1 = getFile("file1");
  var th3 = getFile("file2");
  var th3 = getFile("file3");
  
  th1(function ready(text1){
    output (text1);
    th2(function ready(text2){
      output (text2);
      th3(function ready(text3){
        output (text3);
        output ("Complete"):
      });
    });
  });
If the thunk above was lazy it would not make the AJAX request until th1 was finished
This is much better than exercise 1
  Get File Syntax
  function getFile(file){
    var resp;
    
    fakeAjax(file, function(text){
      if(!resp){
        resp = text;
      } else{
        resp(text);
      } 
    })
    
    return function th(cb){
      if(resp){
        cb(resp);
      } else {
        resp = cb;
      }
    }
  }
Promises are not a replacement for thunks
You do not always need a framework, using the tools you have better can be a better solution

4 - Thunks and Closure
Thunks are not really all that special
Thunks use closure to maintain state
Thunks do not solve all the issues of callbacks
Thunks do however solve a problem
  - By using the closure to maintain state you eliminate time as a complicating factor


                    Section 4 - Promises
1 - Native Promises
Promises have a multitude of ways that they are explained
It's important to understand the concepts first before understanding the API
  - Many courses take the opposite approach
Promises are not perfect and have gotchas which you will need to understand in order to fix problems
There is such thing as promises hell
A future value is a programming concept for a value that will be fulfilled sometime in the future
Promises are concepts that have come from the language E where they are called futures
This is related to functional programming
  - Promise mechanisms are very similar to monads

2 - Promise API
Example Syntax for Completion Event
  // This avoids inversion of control
  function finish(){
    chargeCreditCard(purchaseInfo);
    showThankYouPage();
  }
  
  function error(err){
    logStatsError(err);
    finish();
  }  
  var listener = trackCheckout(purchaseInfo);
  
  listener.on("completion", finish);
  listener.on("error", error);

Promises uninvert the inversion of control problem
Promises are like event listeners but the completion event in promises is called the "Then" event
Example Syntax
  function trackCheckout(info){
    return new Promise(
      function(resolve, reject){
        // Attempt to track the checkout
        // If successful call resolve otherwise call reject(error)
      }
    )
  }
  
  // Refactored version of completion event example
  function finish(){
    chargeCreditCard(purchaseInfo);
    showThankYouPage();
  }
  
  function error(err){
    logStatsError(err);
    finish();
  }
  var promise = trackCheckout(purchaseInfo);
  
  promise.then(finish, error);

Frameworks use inversion of control intentionally where things are called for you, this also separates 
a library from a framework.
The instructor does not recommend inversion of control in Async coding
Promises still use call backs but there has been trust installed into the design
Promise Trust
  - They are only resolved once
  - They are either success or error
  - Messages passed or kept
  - Exceptions become errors
  - Immutable once resolved

3 - Promise Flow Control
Using the API is where people normally start learning about promises
Very rare to have a single asychronous action in a modern Javascript programme
Managing how all steps in your programme occur is called Flow Control
Chaining Promises
  - If you have 2 promises the return of the first promise inside a handler should be the second promise   
Example Psedocode
  doFirstThing()
    .then(function(){
      return doSecondThing();
    })
    .then(function(){
      return doThirdThing();
    })
    .then(
      complete, 
      error
    );
The fact that the promises are using a vertical chain rather that being nested is the least important factor
Delay Example Syntax
  function delay(num){
    return new Promise(function(resolve, reject){
      setTimeOut(resolve,num);
    })
  }
  delay(100)
  .then(function(){
    return delay(50);
  })
  .then(function(){
    return delay(200);
  })
  .then(function(){
    console.log('All Done');
  })
Meaning of Life Example Syntax
  function getData(d){
    return new Promise(function(resolve, reject){
      setTimeOut(function(){
        resolve(d);
      }, 1000);
    })
  }
  var x;
  
  getData(10)
  .then(function(num1){
    x = 1 + num1;
    return getData(30);
  })
  .then(function(num2){
    var y = 1 + num2;
    return getData("The meaning of life : " + (x + y));
  })
  .then(function(answer){
    console.log(answer);
  })

4 - Exercise 3
This is similar to the previous exercise
- The challenge is to sequence promises

5 - Exercise 3 Solution
Solution Syntax (get file section only)
  function output(text){
    consle.log(text);
  }

  function getFile(file){
    return new Promise(function(resolve){
      fakeAjax(file, resolve);
    });
  }
  
  // Get files in parallel
  var file1 = getFile("file1");
  var file2 = getFile("file2");
  var file3 = getFile("file3");
  
  // This renders as each file finishes but only as the previous completes
  file1
    .then(output)
    .then(function(){
      return file2;
    })
    .then(output)
    .then(function(){
      return file3;
    })
    .then(output)
    .then(function(){
      return output("complete");
    });
  
6 - Exercise 3 Solution Questions Part 1
A series of Questions & Answers from students
The previous solution is better in the sense that the promise chain and the out put is kept separate
Functions should be as single purpose as purpose as possible
Promises resolved just once and it is immutable
All JS functions that have nothing passed in is the same as undefined
If you have two different then on the same promise is goes in the order
	- First registered - first executed 
  - You should not concern yourself with the implementation details here
Promise is built into ES6
If a promise fails then the whole flow fails
  - There is an implied rejection which propogates through the then's

7 - Exercise 3 Solution Questions Part 2
The Promise has to be called with the new keyword
There are two separate steps
  - Promise being resolved
  - How you respond to the resolution
  - This is an important separation of concerns
  - The message is to understand separately
There are promise libraries which should be read to understand
There is no hard rule on where you should register error handlers
If you wish to recover from an error somewhere in the promise chain then you shoul have an error handler
  - If you assume that an error is unrecoverable or fatal anywhere in the chain then put a catch at the end
You return a promise to get back to the main chain, nesting promises may cause promise hell

8 - Exercise 4 
Chaining promises together is very limiting as you will need to know in advance how many steps are in the process
  - There will be cases where this is not feasible
  - The challenge will to have steps for an arbitrary length
    - You will render each step as soon as the previous one has completed

9 - Exercise 4 Solution
Example Syntax
   function getFile(file){
    return new Promise(function(resolve){
      fakeAjax(file, resolve);
    });
  }

  ["file1", "file2", "file3"]
    .map(getFile)
    // reduce takes in to values, the first in an initialising value
    .reduce(function combine(chain, pr){
      return chain.then(function(){
        return pr;
      }).then(output);
    }, Promise.resolve())
    .then(function(){
      output("Complete");
    })

10 - Abstractions

11 - Sequences and Gates

12 - Exercise 5

13 - Exercise 5 Solution

14 - Exercise 6



                    Section 5 - Generators
1 - Generator Example
A generator is a new form of function introduced in ES6
	- At first is may not seem that is has anything to do with Async programming
All functions is Javascript have a run to completion semantic
  - This means that it will always run to the end of that function before another one comes in
  - This is very important as it allows us to reason about things in a single threaded fashion
Generators do not have a run to completion semantic
  - Generators are a syntactic form of declaring a state machine
  - Generators have a new keyword yield, it is similar to pause
  - They can be thought of as something akin to a pausable function
  - When paused everything on the inside of the function is completely blocked
    - This is only a localised blocking
Example Syntax
  // Function * tells the engine that it is a generator
  // You can add the star to the name instead
  function* gen(){
    console.log("Hello");
    // The generator decides when it wants to pause, there is no pre-emptive interupting
    // this is what is called co-operative concurrency
    yield;
    console.log(" World");
  }
  
  // Athough it looks like calling and running a function, calling a generator does not run any of its code
  // Instead it produces an iterator
  var it = gen();
  it.next();                                        // Hello
  it.next();                                        // World

2 - Messaging
Generators are very important for the future of Async JS programming
  - The instructor recommends reading and learning as much as possible on Generators
Example Syntax
  function *main(){
    yield 1;
    yield 2;
    yield 3;
  }
  
  var it = main();
  
  it.next();                                        // {value: 1, done: false}
  it.next();                                        // {value: 2, done: false}
  it.next();                                        // {value: 3, done: false}
  it.next();                                        // {value: undefined, done: true}
  
When you do a return from a generator it immediately completes the generator
  - Whatever you have returned is sent out as the value
  - When you use a yield you send out the value and a done false
  - forOf is included specifically for using with Generators and ES6
You can also pass messages into the generator
Example Syntax
  // A little helper for the instructor to save space on the slides
  // This basically wraps up a .next in something a little cleaner
  function coroutine(g){
    var it = g();
    return function(){
      return.it.next.apply(it, arguments);
    }
  }
	
	var run = coroutine(function*(){
		// The brackets around yield are gramatically required
		var x = 1 + (yield);
		var y = 1 + (yield);
		yield(x + y);
	})
	
	run();
	run(10);
	console.log("Meaning of Life: " + run(30).value);

3 - Messaging Questions
A series of questions from students
	- Generators do not ever have to completely finish
		- Some times never ending generators are part of part of app design
	- It is entirely ok to only partially consume a generator
	- You can't start a generator twice within single threaded Javascript

4 - Async Generator
Example Syntax
	function getData(d){
		setTimeout(function(){
			run(d);
		}, 1000)
	}
	
	var run = coroutine(function*(){
		var x = 1 + (yield getData(10));
		var y = 1 + (yield getData(30));
		var answer = (yield getData(
			"Meaning of Life: " + (x + y);
		));
		console.log(answer);
	})
	
	run();

5 - Promises Generator

6 - Exercise 7

7 - Exercise 7 Solution

8 - Quiz



                    Section 6 - Observables
1 - Events-Promises
Concurrency can be thought of as event + promises
  - A lot of Async is event related
Example Syntax
  // This promise has a problem beacuse promises can only fire once
  // You could move the promise inside the click event for inversion but that is not a solution either
  // this is because you will have conflated the events and promises and there would be complexity getting 
  // data out form this structure
  var p1 = new Promise(function(resolve, reject){
    $('#btn').click(function(evt){
      var className = evt.target.classname;
      if(/foobar/.test(className)){
        resolve(className);
      } else {
        reject();
      }
      
    })
  });
  
  p1.then(function(className){
    console.log(className);
  })
  
Promises will not model well in an event oriented world
Example Syntax
  // Refactoring the above code to use lists and arrays
  $("#btn").click(function(evt){
    [evt]
    .map(function mapper(evt){
      return evt.target.className;
    })
    .filter(function filterer(className){
      return /foobar/.test(className);
    })
    .forEach(function(className){
      console.log(className);
    })
  })

2 - Observables
Observables are part of userland libraries in JS
  - There is a proposal but no guarantee that they will become part of the language
The implementation of Obervables used in the example is from RxJS
  - This is a port of the Rx library in Javascript
Example Syntax
  // Sample code from RxJS
  // An observable created from an event takes a DOM element and an event name, it automatically hooks the DOM
  // element to the event name and when the event fires it pumps another piece of data through the chain (observable)
  // There are about a dozen or so ways to create an observable
  var obsv = Rx.Observable.fromEvent(btn, "click");
  
  obsv
    // map() in the async world is invoked each time so an event stream is very similar to an array but over time
    .map(
      function mapper(evt){
        return evt.target.className;
      }
    )
    .filter(
      function filterer(className){
      return /foobar/.test(className);
      }
    )
    // This is an exclusion, this is asyncronous, it allows an item through as distinct until changed
    .distinctUntilChanged()
    // This is normally at the end of the chain
    .subscribe(
      function(data){
        var className = data[1];
        console.log(className);
      }
    )
    
RxJS has about 250 different methods available so is a relatively large library
  - RX Marbles has graphical diagrams of Observables
    - http://rxmarbles.com
  - It is very highly recommended by the course instructor

3 - Reactive Sequences
Rx has a lot of stuff to learn and requires a lot of effort to learn
The author will use his own asynquence library which he added async to in order to demonstrate  Observables
  - This is to avoid becoming bogged down in learning RxJS
  - The functionality is very similar and going between the two should be transparent
  - Taking a Reactive Sequence and making an RX Observable should be fairly painless and vice versa
  - This takes the most common items from Rx and thus reduces the 200kb library to 3kb
Example Syntax
  function fromEvent(el, eventType){
    return ASQ.react(function(proceed){
      $(el).bind(eventType.proceed);
    });
  }
  
  // This is also know as an Observable
  var rsq = fromEvent(btn, "click");
  
  rsq
    .val(function(evt){
        return evt.target.className;
    })
    .then(function(done, className){
      if(/foobar/.test(className)){
        done(className);
      }
    })
    .val(function(className){
      console.log(className);
    })

4 - Exercise 8

5 - Exercise 8 Solution Part 1

6 - Exercise 8 Solution Part 2



                    Section 7 - CSP (Communicating Sequential Processes)
1 - Concurrency Channels
Exercise 10 will be a much more sophisticated exercise than others
CSP is about modelling concurrency and channels
	- A channel is similar to a stream or pipe
  - There is a difference as there is no buffer size and has the idea of back pressure built in
    - This active stream is similar to the hot and cold observables in rx
  - A channel offers something allows producer and consumer communication
  - There is no queueing of messages in channels it is 1 message  
This was invented back in the 60's
  - It bares some similarity to actor model design pattern
  - A key difference is with actors when you send a message its asynchronous
This is used extensively in the Go programming language
Example Syntax
  var ch = chan();
  
  // In Javascript generator functions use *, it can be attached to the the function keyword or name
  // There are more details on generators at the following address as well as above examples
  // https://github.com/marb61a/Course-Notes/blob/master/Javascript/ES6/ES6 The Complete Developer's Guide
  function *process1(){
    yield put(ch, "Hello");
    var msg = yield.take(ch);
    console.log(msg);
  }
  
  function *process2(){
    var greeting = yield.take(ch);
    yield put(ch, greeting + " World");
    console.log("done!");
  }
  
  // The above returns Hello World and done!
  

2 - Blocking Chains

3 - Event Channels

4 - Exercise 9

5 - Exercise 9 Solution

6 - Recap

7 - Exercise 10

8 - Wrap Up
