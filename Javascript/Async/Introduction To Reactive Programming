                    Introduction To Reactive Programming
                    Course Notes
                    
                    
1 - What is RXJS
The series is based on The introduction to Reactive Programming you've been missing
  - https://gist.github.com/staltz/868e7e9bc2a7b8c1f754
Series is based on core reactive topics and is to help you think about reactive programming
so that you can apply it in a practical sense.
Reactive is programming with Event Streams
  - Event Streams are sequences of events happening over time eg an aysnc array
Example Syntax
  // Array Example
  // Arrays exist in memory
  console.clear();
  
  var source = ['1', '1', 'foo', '2', '3', '5', 'bar', '8', '13']; 
  var result = source;
  
  console.log(result);
  
  // Using event streams on the above code
  console.clear();
  
  var source = Rx.Observable.interval(400).take(9)
    .map(i => ['1', '1', 'foo', '2', '3', '5', 'bar', '8', '13'], [i])
  var result = source;
  
  result.subscribe(x => console.log(x));
  
  // Adding numbers using the array example from above
  console.clear();
  
  var source = ['1', '1', 'foo', '2', '3', '5', 'bar', '8', '13']; 
  var result = source
    .map(x => parseInt(x))
    // Ignore non numbers
    .filter(x => !isNaN(x))
    // Takes 2 values and returns a number
    .reduce((x, y) => x + y)
  
    console.log(result);
  
  // Adding the numbers using the stream example
  console.clear();
  
  var source = Rx.Observable.interval(400).take(9)
    .map(i => ['1', '1', 'foo', '2', '3', '5', 'bar', '8', '13'], [i])
  
  var result = source
    // This does the same as the array example but over time rather tha immediately
    .map(x => parseInt(x))
    .filter(x => !isNaN(x))
    .reduce((x, y) => x + y)
  
  result.subscribe(x => console.log(x));
  
  console.log(result);

2 - Using An Event Stream Of Double Clicks
Example Syntax
  // The example is to find when there are double clicks on a button on the DOM
  // The DOM has a dblClick event but it will not be used in the example
  var button = document.querySelector('.button');
  var label = document.document.querySelector('h4');
  
  var clickStream = Rx.Observable.fromEvent(button, 'click');
  var doubleClickStream;
  
  doubleClickStream.subscribe(event => {
    label.textContent = 'double click';
  })
  
  doubleClickStream
    .throttle(1000)
    .subscribe(suggestion => {
      label.textContent = '-';
    })

3 - Why Choose RXJS


4 - Async Requests And Responses in RXJS


5 - Rendering On The DOM With RXJS


6 - New Requests From Refresh Clicks


7 - Clear Data While Loading With RXJS-Startwith


8 - Sharing Network Requests With RXJS-Merge


9 - Using Cached Network Data With RXJS 


10 - An Overview Of Reactive Concepts
