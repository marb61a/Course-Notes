                    Server Side Rendering with React and Redux
                    Course Notes


                    Section 1 - Getting Started
1 - A Few Notes
A quick welcome to the course
Some administration work prior to getting started on the technical part of the course

2 - Link to Github Repo
A link is provided to the course repo which contains
  - All the source code from the course
  - Slides and diagrams that are used in the course

3 - Why Server Side Rendering?
A quick discussion of what Server Side Rendering solves
Tradional React Apps are rendered on the client-side in the browser
There is a vanilla React app generated in order to demonstrate client-side rendering in React
The procedure for a client side rendered app is
  - Brower requests a page
  - Then the browser requests a js file
  - Finally there is some content visible on the page
  - Each step will  have a time period between them
  - These time periods can be hugely problematic
  - Longer periods have been proven to cost websites traffic and businesses money 

4 - SSR Overview
The previous example had a fairly sparse html file
  - Now the html has a fair amount of code in the file
  - The example also uses a free code formatterto make the html more legible
    - https://www.freeformatter.com/html-validator.html
  - Traditional react apps fetch a file with basically a script tag inside
  - SSR will however have a lot of content inside the html format
  - Sending a fully rendered html page can have effects
    - One major effect is the simplification of the process of rendering a page
    - Page load times are also much quicker
  - SSR is fundamentally about getting content on page quicker
  - The instructor uses a diagram to demonstrate SSR flow
    - In the browser
      - The user navigates.app.com
    - On the server
      - The request is received
      - The React app is loaded in memory
      - Any required data is fetched
      - Render the React app
      - Send the generated HTML to the user



                    Section 2 – Let's Get Coding!
1 - App Overview
Writing code will better teach concepts than just discussing concepts
The app is very simple but is 100% focused on SSR
  - The styling etc is not exciting but is not meant to be
  - It will however teach you about the important challenges in SSR
  - Loading data techniques are important in this course not app functionality

2 - Server Architecture Approach


3 - Starter Package.Json File
A text file with dependencies needed added
  - This can just be copied to the package.json file when npm is set up and installed

4 - Boilerplate Setup

5 - Express Setup

6 - The RenderToString Function

7 - JSX on the Server

8 - Server Side Webpack

9 - Breather and Review



                    Section 3 - Server Configuration
1 - Rebuilding and Restarting

2 - Server Side Rendering, Isomorphic Javascript, Universal Javascript

3 - Client Side JS

4 - Client Bundles

5 - The Public Directory

6 - Why Client.js?

7 - Client Bootup



                    Section 4 – Refactoring for Cleaner Code
1 - Merging Webpack Config

2 - Single Script Startup

3 - Ignoring Files with Webpack

4 - Renderer Helper



                    Section 5 – Adding Navigation
1 - Implementing React Router Support

2 - BrowserRouter vs StaticRouter

3 - Route Configuration

4 - HTML Mismatch

5 - More on Route Configuration

6 - Routing Tiers



                    Section 6 – Integrating Support for Redux
1 - The Users API

2 - Four Big Challenges

3 - Browser Store Creation

4 - Server Store Creation

5 - FetchUsers Action Creator

6 - The Users Reducer

7 - Reducer Imports

8 - UsersList Component

9 - Babel Polyfill



                    Section 7 – Server Side Data Loading
1 - Detecting Data Load Completion

2 - Solution #1 for Data Loading

3 - Solution #2 for Data Loading

4 - The React Router Config Library

5 - Updating Route Uses

6 - The MatchRoutes Function

7 - LoadData Functions

8 - Store Dispatch

9 - Waiting for Data Load Completion

10 - Breather and Review



                    Section 8 – Organization with Page Components
1 - The Page Approach

2 - Refactoring to Pages

3 - Refactoring Page Exports

4 - Client State Rehydration

5 - More on Client State Rehydration

6 - Dumping State to Templates

7 - Mitigating XSS Attacks



                    Section 9 – Authentication in a Server Side Rendering World
1 - Authentication Issues

2 - Authentication via Proxy

3 - Why Not JWT's?

4 - Proxy Setup

5 - Renderer to API Communication

6 - Axios Instances with Redux Thunk
04:52
Client Axios Instance
04:53
Server Axios Instance
08:14
The Header Component
03:16
Adding an App Component
07:40
Building the Header
02:32
Fetching Auth Status
06:12
Calling FetchCurrentUser
03:33
Connecting the Header
06:12
Header Customization
10:32
Header Styling
05:45
–
Error Handling
01:18:35
404 Not Found Pages
02:57
Implementing the NotFound Page
02:59
StaticRouter Context
08:58
The Admin Feature
02:09
Admins Action Creator and Reducer
03:30
Admins Route Component
04:32
Testing Admins Route
04:24
Promise.all Failures
06:19
Error Handling Solution #1
06:16
Error Handling Solution #2
06:31
Error Handling Solution #3
07:54
The Require Auth Component
04:01
Implementing Require Auth
08:57
Require Auth in Use
04:56
Handling Redirects
04:12
-
Adding Better SEO Support
36:47
Meta Tags
04:15
Setting Tags with Helmet
06:12
React Helmet in Practice
06:42
Dynamic Title Tags
05:30
RenderToString vs RenderToNodeStream
14:08
-
Wrapup
02:29
Next Steps and Wrapup
02:29
