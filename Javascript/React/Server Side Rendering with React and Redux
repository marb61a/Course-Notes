                    Server Side Rendering with React and Redux
                    Course Notes


                    Section 1 - Getting Started
1 - A Few Notes
A quick welcome to the course
Some administration work prior to getting started on the technical part of the course

2 - Link to Github Repo
A link is provided to the course repo which contains
  - All the source code from the course
  - Slides and diagrams that are used in the course

3 - Why Server Side Rendering?
A quick discussion of what Server Side Rendering solves
Tradional React Apps are rendered on the client-side in the browser
There is a vanilla React app generated in order to demonstrate client-side rendering in React
The procedure for a client side rendered app is
  - Brower requests a page
  - Then the browser requests a js file
  - Finally there is some content visible on the page
  - Each step will  have a time period between them
  - These time periods can be hugely problematic
  - Longer periods have been proven to cost websites traffic and businesses money 

4 - SSR Overview



                    Section 2 – Let's Get Coding!
1 - App Overview

2 - Server Architecture Approach

3 - Starter Package.Json File

4 - Boilerplate Setup

5 - Express Setup

6 - The RenderToString Function

7 - JSX on the Server

8 - Server Side Webpack

9 - Breather and Review



                    Section 3 - Server Configuration
1 - Rebuilding and Restarting
06:59
Server Side Rendering, Isomorphic Javascript, Universal Javascript
05:52
Client Side JS
04:35
Client Bundles
08:42
The Public Directory
05:31
Why Client.js?
06:52
Client Bootup
05:14
–
Refactoring for Cleaner Code
23:35
Merging Webpack Config
08:26
Single Script Startup
04:45
Ignoring Files with Webpack
06:20
Renderer Helper
04:04
–
Adding Navigation
25:54
Implementing React Router Support
03:04
BrowserRouter vs StaticRouter
05:08
Route Configuration
03:34
HTML Mismatch
04:54
More on Route Configuration
06:18
Routing Tiers
02:56
–
Integrating Support for Redux
42:53
The Users API
05:21
Four Big Challenges
08:28
Browser Store Creation
03:24
Server Store Creation
07:32
FetchUsers Action Creator
03:13
The Users Reducer
03:12
Reducer Imports
02:00
UsersList Component
06:02
Babel Polyfill
03:41
–
Server Side Data Loading
55:07
Detecting Data Load Completion
04:35
Solution #1 for Data Loading
07:05
Solution #2 for Data Loading
04:38
The React Router Config Library
05:57
Updating Route Uses
03:37
The MatchRoutes Function
03:26
LoadData Functions
10:48
Store Dispatch
06:52
Waiting for Data Load Completion
03:13
Breather and Review
04:56
–
Organization with Page Components
36:15
The Page Approach
02:54
Refactoring to Pages
02:08
Refactoring Page Exports
04:45
Client State Rehydration
04:43
More on Client State Rehydration
05:27
Dumping State to Templates
07:46
Mitigating XSS Attacks
08:32
–
Authentication in a Server Side Rendering World
01:30:44
Authentication Issues
05:04
Authentication via Proxy
04:52
Why Not JWT's?
05:37
Proxy Setup
06:24
Renderer to API Communication
05:06
Axios Instances with Redux Thunk
04:52
Client Axios Instance
04:53
Server Axios Instance
08:14
The Header Component
03:16
Adding an App Component
07:40
Building the Header
02:32
Fetching Auth Status
06:12
Calling FetchCurrentUser
03:33
Connecting the Header
06:12
Header Customization
10:32
Header Styling
05:45
–
Error Handling
01:18:35
404 Not Found Pages
02:57
Implementing the NotFound Page
02:59
StaticRouter Context
08:58
The Admin Feature
02:09
Admins Action Creator and Reducer
03:30
Admins Route Component
04:32
Testing Admins Route
04:24
Promise.all Failures
06:19
Error Handling Solution #1
06:16
Error Handling Solution #2
06:31
Error Handling Solution #3
07:54
The Require Auth Component
04:01
Implementing Require Auth
08:57
Require Auth in Use
04:56
Handling Redirects
04:12
-
Adding Better SEO Support
36:47
Meta Tags
04:15
Setting Tags with Helmet
06:12
React Helmet in Practice
06:42
Dynamic Title Tags
05:30
RenderToString vs RenderToNodeStream
14:08
-
Wrapup
02:29
Next Steps and Wrapup
02:29
