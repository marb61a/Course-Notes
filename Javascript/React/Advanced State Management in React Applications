                    Advanced State Management in React Applications (Redux, MobX, sagas, etc.)
                    Course Notes


1 - 
Introduction to the instructor
In order to understand state the course will take a tour of different approaches to managing state
In order to understand more the course will start right from the ground up
State management can become very complex very quickly
  - The React timer component that is usually the start of React training will be where understanding state will begin
There is also a quick overview of the syllabus
Redux will be taught seperately which the instructor recommends as the best approach
  - Redux is not tied to React in any way
  - React takes some of its ideas from the elm language
  - Redux-Saga will also be looked at
  - A thunk is a way to defer an action
Mobx which is a different approach than Redux for state management
  - Mobx has an approach which is similar to object oriented
State management is not a solved problem
Not too much focus on a given library will be give because
  - Libraries will come and go and may not be useful in 6 or 12 months time
The goal of the course is how to think conceptually about the patterns
  - Patterns and approaches tend to stick around longer than libraries
  - By the end you should be able to apply concepts to new frameworks
The course will cover 9 different sections
  - It is not necessarily only React based
  - The main goal of React is to take application state and turn it into DOM nodes
    - The React design team have their own thoughts on React and state management
      - One of the key ideas is DRY -- Don't Repeat Yourself
        - Figure out the absolute minimal implementation of state your app needs and then compute the rest on-demand
      - The example used is Full Name, if you have first and last name you do not want to have to set the full name 
        state manually
      - This approach will save a lot of bugs as the amount of mistakes made are more limited
      - The best way to become good at state management is to manage as little state as possible
   - React is all about one way data flow down the component hierarchy
    - It may not be immediately clear which component should own a state
      - This part can be very confusing for newcomers
What is State
  - Is it passed from parents as Props, if so it probably isnt state
  - Does it remain unchaged over time, if so it probably isn't state
  - Can you compute it based on any other state or props in your component, if so it probably isn't state
  

2 -

3 -

4 -

5 - 

6 -

7 -

8 -

9 - 

10 -

11 -

12 -

13 -

14 - 
