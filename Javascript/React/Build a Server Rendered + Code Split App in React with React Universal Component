                    Build a Server Rendered + Code Split App in React with React Universal Component
                    Course Notes
                    
                    
1 - Install the NPM Dependencies Needed for a Universal React App
There are some packages needed to get React Universal Component working
  - This example uses the yarn package manager
  - yarn add react-universal-component
    - This is the JS fronend library that exposes a high order component that can be used
  - yarn add webpack-flush-chunks
    - This will be used on server side to locate exact chunks to send on initial render
  - yarn add babel-plugin-universal-import
    - This is used to lessen the amount of boilerplate code being written
  - yarn add extract-css-chunks-webpack-plugin
    - This is the plugin which will chunk CSS by file
  - yarn add webpack-hot-server-middleware
    - This is used in development not production

2 - Configure Webpack to Work with React Universal Component

3 - Configure Express  React  Babel to Work with React Universal Component

4 - Configure hot module reloading to work with react-universal-component

5 - Code-Splitting Components with the Universal Higher-Order Component

6 - Dynamically Load a Code-Split Universal React Component via a Prop

7 - Configure a Custom Universal React Loading Component

8 - Animate a Universal React Loading Component using Delay Options and Component Hooks

9 - Set an Error Component in React Universal when a Component Fails to Load

10 - Preload a Universal Component On-Demand with the Preload Method

11 - Load a Universal React Named Exported Component with the Key Option

12 - Add Redux with Server-to-Client State Hydration to a React Universal Project

13 - Lazy Load Redux Reducers with Code-split Universal React Components using onLoad                    
