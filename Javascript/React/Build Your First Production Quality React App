                    Build Your First Production Quality React App
                    Course Notes
The Repo for the course app is available at
  - https://github.com/marb61a/react_todos

                    
1 - Bootstrap A React Application Through The CLI With Create React App
Start by installing the Create React App cli globally
  - npm install -g create-react-app
To create a react project
  - create-react-app .    // This will create an app in the directory you are in which you may not want
This creates a boilerplate app with some npm commands already installed
  - npm start             // Starts the server
  - npm run build         // Bundles the app into static files
  - npm test              // Starts the test runner
  - npm run eject         // Removes this tool, copies dependencies, config files and scripts into app directory. 
                          // This is permanent! so be very careful
The first run message will tell you to edit
  - src/App.js
  - You will also get a not optimised message
Changing the appintro class to say "Hello World"
  - This change is automatically rebuilt
    - This is good for pointing out mistakes as well as improving development time
The entry point for the app is index.js
Use a separate tab to run an initial npm test which will pass if the component is rendering properly
  - These too will reload and run tests added
A single command has set up an entire React Application!!!!

2 - Render A React UI with JSX
The instructor recommends mocking a static version of components you wish to use to make your app with
Remember to use className instead of class as that is a reserved key word is JS
  - Adding new form to accept adding new todos
    - Input type is text
  - Added another div element with unordered list
  - Added some basic css for the input, ul & li elements - App.css
    - You can remove  the bullet points form li elements with a CSS directive
        - list-style-type: none;

3 - Render A React UI Based on Initial State
At this moment the output being rendered is static
  - In order for todos to be rendered dynamically the components must be given state
  - We start by adding a constructor to the app component class
    - Constructors are added using constructor (){}
    - Added at the top of the class
    - Super is use to ensure that the constructor for the class being extended is called
  - Define state for the component
    - this.state = {}
    - The state object will contain whatever data structures our component needs to render properly
    - An array is added each will represent a todo
  - Saving at this stage will not make a visual change as there has be no updating of the render
  - Example uses React Devtools which is an add on for chrome browser and is available from the store
Updating the component to render based on the state rather than the static todos
  - Add this.state.todos to the render method
    - Use curly braces to separate the javascript from the surrounding JSX
  - Use the map() function to return todos
    - Extensive notes on map are available at the following
      - https://github.com/marb61a/Course-Notes/blob/master/Javascript/ES6/ES6 The Complete Developer's Guide
  - The app output will look pretty much the same but this time the output is coming from state
  - There will be warnings about each child in an array or iterator needing a key property
    - This will be fixed by adding a key property to the li and the value to todo.id
  - Adding checked={todo.isComplete} to the li to provide a state for the checkbox
    - This will cause an error as you will need an onChange() handler when using a checked property
    - The quick way of fixing is to change checked to defaultChecked

4 - Synchronize React UI And State With Controlled Components


5 - Create A Stateless Functional Component For An Input Form


6 - Refactor React Components To Be Stateless Functional Components


7 - Validate Component Input With Prop Types In React


8 - Add Data To A List Without Mutations


9 - Update React Application State From Form Input


10 - Prevent Empty Form Values With Conditional Submit Handlers


11 - Use ES2016 Property Initializer Syntax In ES6 Classes


12 - Update Data In A List Without Mutations


13 - Pass Data To Event Handlers With Partial Function Application


14. Create a Pipe Function to Enable Function Composition


15. Remove Items from a List without Mutations


16. Build a Link Component to Navigate to Routes in React


17. Use React Context to Manage Application State Through Routes


18. Filter Data on Property Values


19. Keep Application State in Sync with Browser History


20. Load Data From a Server with fetch


21. Save Data to the Server with fetch


22. Show Temporary Messages in a React Application


23. Update data on the Server with fetch


24 - Delete Data On The Server With fetch
