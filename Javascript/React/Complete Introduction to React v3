                    Complete Introduction to React v3
                    Course Notes


                    Section 1 - Introduction
1 - Introduction
Introduction to React course and the agenda. 
  - This is the third version of the course
  - Ensure that you are on the correct version of the course repo
  - There are differences from the first 2 courses covering things like linting and testing etc
A brief bio of the instructor and a quick overview of the syllabus
Mostly you will not use React by itself it will use tools which increase the complexity
  - These are not compulsory eg Using Flow instead of Typescript
Ensure that Node is installed, above 4 is recommended
To get started will need to clone the start repo of the course
  - https://github.com/btholt/complete-intro-to-react/tree/start
A quick run through of the cloned repo
The instructor uses Sublime but it is not compulsory
The dependencies are locked to certain versions to avoid compatability issues

2 - Yarn Dependency Manager
The yarn package manager will be used in the course
Npm has issues which is why Yarn is used
  - Yarn is an npm client
Npm is non-deterministic which can cause deployment issues

3 - Simple React Components
Create a new file in the project created from the cloned GitHub repo
React has 2 different parts to the library
  - Top-level which is the same across the different versions of React
    - It contains the lifecycle methods, create components
  - Between React and what is being rendered too is a glue layer
    - This translates React components to DOM nodes, Native UI elements etc
Example Syntax
  // index.html file
  // The course instructor recommends using Emmet which is a plugin to improve workflow
  // It is available here - https://emmet.io
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title>App name</title>
    </head>
    <body>
      <div id="app"></div>
      
      // This pulls in react pre-bundling
      <script src="node_modules/react/dist/react.js"></script>
      <script src="node_modules/react-dom/dist/react-dom.js"></script>
      <script>
        const MyTitle = function(){{
          return(
            React.createElement('div', null, 
              React.createElement('h1', null, "This is my second component")
            )
          )
        }      
      
        const MyFirstComponent = function(){
          return React.createElement('div', null
            React.createElement('h1', null, "This is my first component")
          )
        }
        
        ReactDOM.render(
          React.createElement(MyFirstComponent),
          // Tells where to render which is the div of id 'app'
          document.getElementById("app")
        )
      </script>
    </body>
  </html>

4 - React Paradigm
Being able to create components from components gives the opportunity for powerful patterns
This also allows for reusable components
This differs from Angular or Rails & Django on other languages
MVC may not make sense for interfaces
  - This is why they are put together for components
React component encapsulation helps with debugging
React can be more verbose than Angular but is easier to maintain

5 - Factories & Props
Again using the example code from above
  - It can be verbose writing createElement over and over again
  - There are a lot of React developers that do not know what createElement is
  - This is because they do not have to write it
  - JSX transpiles to createElement calls
  - You do not have to use JSX in apps
    - One example is to set the createElement as a const and use that
    - There are packages like createFactory and react-dom-helpers
Example Syntax
  <script>
    const ce = React.createElement();
    
    const MyTitle = function(props){
      return(
        ce('div', null,
          ce('h1', null, props.titls)
        )
      )
    }
    
    
    const MyFirstComponent = function(){
      return ce('div', { id: 'my-first-component '}, 
        ce(MyTitle, {title: 'Game Of Thrones', color: 'YellowGreen'});
        ce(MyTitle, {title: 'Stranger Things', color: 'GreenYellow'});
        ce(MyTitle, {title: 'Rick And Morty', color: 'LimeGreen'});
        ce(MyTitle, {title: 'Silicon Valley', color: 'peru'});
      ) 
    }
  </script>



                    Section 2 -Tools
1 - Prettier

2 - ESLint

3 - ESLint and SublimeText

4 - Webpack and Babel

5 - Configuring webpack

6 - Configuring Babel

7 - Setting Up webpack.config.js File

8 - Running webpack from npm



                    Section 3 - React
1 - JSX

2 - Starting a Web App

3 - Setting up devServer



                    Section 4 - Routing, Props, & State Management
1- React Router

2 - HashRouter

3 - BrowserRouter

4 - Loading JSON Data

5 - Making a ShowCard Component

6 - PropTypes

7 - Using the Spread Operator in JSX

8 - Key Prop

9 - styled-components

10 - One-Way Data Flow

11 - Q&A: Key and styled-components

12 - Managing State

13 - transform-class-properties

14 - Filtering

15 - Q&A: Nested Arrays, ES6, & More



                    Section 5 -Testing React
1 - Snapshot Testing with Jest

2 - Configuring & Running Jest

3 - Shallow Testing with Enzyme

4 - Testing the Number of ShowCards

5 - Testing the Search Field

6 - Thoughts on Testing

7 - Test Coverage with Istanbul



                    Section 6 - Hot Module Replacement
1 - Introducing Hot Module Replacement
Hot Module Replacement (HMR)
  - This technology works really well with React
  - The way React apps are constructed lends itself to this technology very well
  - Other technologies have problems with detangling to be able to do this
  - Is similar to CSS Live Reload but goes a step further
  - Webpack sees the graph of what is connected to what in an application
  - By understanding the dependency structure of the app, Webpack can replace modules while running

2 - Setting up HMR



                    Section 7 - Flow
1 - Introducing Flow

2 - Setting up Flow

3 - Applying Flow

4 - Defining flow-typed
07:34:30 - 07:44:20
Defining flow-typed
Since flow-typed does not have types for Webpack's API, Brian defines his needed types. In the flow-typed folder., Brian adds a file called types.js declares a global variable called module which is an object that has a method called accept. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-14
Fixing flow-typed Definitions
07:44:21 - 07:47:36
Fixing flow-typed Definitions
Brian shows how to install the needed definitions for styled-components. Due to the version conflicts with flow-typed, not all the definitions required for the demo application were present during installation. - https://github.com/btholt/complete-intro-to-react/tree/v3-14



                    Section 8 - Data in React
1 - URL Parameters

2 - Sharing State & Updating the Search Component
08:06:43 - 08:19:55
Sharing State & Updating the Search Component
The Details component is going to need access to the JSON data. Rather than make a duplicate request for the data, Brian moves the JSON data to the closest common ancestor component. This makes the sharing of state between components easier. Brian finishes some refactoring of the Search component now that it is managing its own state and no longer importing the JSON data. - https://github.com/btholt/complete-intro-to-react/tree/v3-15
Finishing the Details Component
08:19:56 - 08:27:56
Finishing the Details Component
Brian finishes the Details component by declaring the propTypes object. He then adds the rest of the user interface components which displays the title, year, poster image, description, and the trailer for the selected show. - https://github.com/btholt/complete-intro-to-react/tree/v3-16
Creating a Header Component
08:27:57 - 08:32:55
Creating a Header Component
The header of the application needs to be used across multiple components. Rather than having duplicate code, the header should be extracted out into its own component. Brian removes the header code from the Landing and Search, and Details components and creates a single Header component.
Conditional Display Logic Part 1
08:32:56 - 08:37:26
Conditional Display Logic Part 1
Now that the Header component is being used in multiple places, it will need some conditional logic to determine whether or not the search bar should be shown. Brian begins adding this functionality be creating a boolean propType property named showSearch.
Conditional Display Logic Part 2
08:37:27 - 08:46:04
Conditional Display Logic Part 2
Brian finishes the conditional display logic in the Header component by using the showSearch propType to determine if the search bar should be displayed. Once he has this code in place, Brian refactors the Search component to use the Header component. - https://github.com/btholt/complete-intro-to-react/tree/v3-17
React Lifecycle Methods
08:46:05 - 08:50:12
React Lifecycle Methods
Brian introduces the React Lifecycle Methods, which are methods called at different stages throughout a component’s life in an application. One of the most common uses for these methods is to request remote data as soon as a component is mounted. Brian spends a few minutes talking about these methods and to use them.
componentDidMount() & AJAX Requests
08:50:13 - 09:09:23
componentDidMount() & AJAX Requests
Brian adds the componentDidMount() lifecycle method into the Details component. He’ll be using this method to trigger an AJAX request to load data for the specified show. Brian is using the axios library to do the AJAX request. - - https://facebook.github.io/react/docs/react-component.html#componentdidmount - https://github.com/btholt/complete-intro-to-react/tree/v3-18
Showcard Link
09:09:24 - 09:18:52
Showcard Link
Spurred by a question from a student, Brian works on polishing the demo application to link from the main page to the details page.
Wrapper and Q&A
09:18:53 - 09:35:36
Wrapper and Q&A
Taking questions from students, Brian wraps up the main section about React. - https://github.com/btholt/complete-intro-to-react/tree/v3-19
React Development Tools
09:35:37 - 09:42:56
React Development Tools
Since React code is transpiled and bundled into a single file, debugging React code can be a challenge. Brian spends a few minutes demonstrating React Developer Tools browser plugin to illustrate how to debug React more easily by inspecting the component code. - https://github.com/facebook/react-devtools
React Performance Tools
09:42:57 - 09:58:41
React Performance Tools
Brian shows how to import the React perf tools that automatically hooks into React instance and track wasted renders. Since this approach is to profile React code only, the perf tools is temporary code that should not ship this in production. - https://facebook.github.io/react/docs/perf.html
Q&A: Defining Components, & More
09:58:42 - 10:05:45
Q&A: Defining Components, & More
Brian takes questions from students about when to define components; storing state with context; and more.
Redux

Introducing Redux
10:05:46 - 10:15:49
Introducing Redux
Brian introduces Redux, which is a predictable state container for JavaScript applications that runs both on the client and server. A single store is created to maintain the state for the entire application, and the state is accessed and modified through the use of reducers and actions.
Setting up Redux
10:15:50 - 10:32:35
Setting up Redux
Brian creates a rootReducer object for the application and explains how the state will be passed to and returned from the reducer. Then Brian creates the store for the application. The createStore method in Redux is passed the rootReducer to create the store. Brian creates the actions for the application. While the files do not need to be in separate files, Brian stores the action definition in an actions.js file and the implementation of the action in an actionCreators.js file. Actions trigger the reducer to carry out the modification of state.
Connect Redux to React
10:32:36 - 10:35:36
Connect Redux to React
To make landing interact with the store, Brian first connects Redux to React with the react-redux package.
Landing Interact with Store
10:35:37 - 10:44:09
Landing Interact with Store
To set up the Landing.jsx to read and write to Redux, Brian uses Connect function, which allows the component to tap into the Redux store's state. The mapStateToProps allows selects which pieces of state are passed into your component which helps keep thing clean.
Dispatching Actions to Redux
10:44:10 - 10:50:19
Dispatching Actions to Redux
Brian addresses the issue typed text in the input not being sent to Redux. To address this problem, Brian sets actions that are dispatched to Redux using the dispatch() method. With this in place, a component calls dispatch() on its props object and pass the executed action.
Redux Review
10:50:20 - 10:59:01
Redux Review
Brian spends a few minutes walking through the entire Redux integration in the application. After reviewing Redux, Brian refactors the Landing component to map the dispatching of actions to component properties. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-20
Search Submit Event
10:59:02 - 11:10:40
Search Submit Event
Since the search input field in the Landing Component is not navigating to the search page, Brian wraps the input in a Form component to utilize the onSubmit event. Brian takes questions from students.
Using Redux in the Search Component
11:10:41 - 11:16:04
Using Redux in the Search Component
Brian moves on to the Search component and refactors it to read state from Redux. Once Redux is added, the Search component no longer needs the getInitialState() or handleSearchTermChange() methods because that functionality now exists in Redux.
Using Redux in the Header Component
11:16:05 - 11:24:01
Using Redux in the Header Component
The last component to refactor is the Header component. Brian imports the connect object from react-redux as well as the setSearchTerm action creator. He then updates the Header component to read the state from Redux and dispatch the action when a new search term is entered.
Q&A: Objects and Props, Dispatch, & More
11:24:02 - 11:28:04
Q&A: Objects and Props, Dispatch, & More
Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-21
Q&A: Recap
11:28:05 - 11:30:54
Q&A: Recap
After taking questions from students before starting, Brian welcomes the class for Day 3 by reviewing past progress - https://github.com/btholt/complete-intro-to-react/tree/v3-21
Refactor Redux for Flow
11:30:55 - 11:38:53
Refactor Redux for Flow
Brian starts to integrate Flux into Redux by adding an ActionTypes, which are types that can only be that string. Brian sets an SET_SEARCH_TERM to an ActionType.
Refactor Reducers
11:38:54 - 11:47:49
Refactor Reducers
Brian shows how to use combineReducers to create the root reducer. Instead of writing our own root, each reducer separates into its own silo. With combineReducers, each reducer only gets the part that it's concerned about and nothing else.
Redux DevTools
11:47:50 - 11:55:48
Redux DevTools
Brian demonstrates the capabilities of the Redux developer tools. Similarly to React, Redux has a set of browser developer tools for viewing and debugging code in the browser. To get the developer tools to work, a small amount of code needs to be added.
Q&A: Coding Issue, State, & More
11:55:49 - 12:00:07
Q&A: Coding Issue, State, & More
Brian takes questions from students regarding Flow and State, coding issues, and more. - https://github.com/btholt/complete-intro-to-react/tree/v3-22
Async Redux

Middleware & Thunks
12:00:08 - 12:03:07
Middleware & Thunks
Brian introduces a thunk, which is a function wrapped around a value and illustrates importance in asynchronous operations.
Setting Up Middleware & Thunks in Redux
12:03:08 - 12:13:38
Setting Up Middleware & Thunks in Redux
Brian adds the redux-thunk library to the application. This middleware will facilitate the exchange between synchronous and asynchronous actions.
Async Functions
12:13:39 - 12:24:18
Async Functions
Brian creates the getAPIDetails function, which Redux calls to trigger the asynchronous axios AJAX call. The AJAX call results are then dispatched to the addAPIData action.
Adding Async Actions to the Details Component
12:24:19 - 12:34:39
Adding Async Actions to the Details Component
Brian completes the redux-thunk middleware integration by updating the Details component. The Details component calls the getAPIData() function, which triggers the asynchronous action. Since Redux is being used in the Details component, the application no longer reads the state from the local store.
Q&A: Async with Redux
12:34:40 - 12:38:59
Q&A: Async with Redux
Brian recaps async with Redux and takes questions from students.
Testing Redux

Updating Snapshot
12:39:00 - 12:45:19
Updating Snapshot
Demonstrating that with the introduction of Redux, Brian shows that most of the existing tests in the application fail because Redux is injected into the components. Brian explains how to use “unwrapped” components in the tests that are free of the Redux dependency. Then Brian updates the snapshot to include the new Header component implementation.
Dispatching Actions
12:45:20 - 12:55:27
Dispatching Actions
Next Brian updates the tests to utilize the Redux store and actions. He wraps the Search component in a Provider so it can have access to the store. He also updates the setting of the search term, so it dispatches a Redux action. - https://github.com/btholt/complete-intro-to-react/tree/fem-24
Testing Reducers
12:55:28 - 13:04:05
Testing Reducers
Brian creates a reducers.spec.js file for testing the reducers. Since the Redux developer tools can write the test for you, Brian demonstrates how easy it is to write a test for reducers by creating a couple of tests for the reducers using the Redux developer tools. Brian takes questions from students.
Testing actionCreators
13:04:06 - 13:10:59
Testing actionCreators
By first creating new spec called actionCreators.spec.js, Brian demonstrates how to test actionCreators with snapshots. - https://github.com/btholt/complete-intro-to-react/tree/v3-25
Testing Thunk
13:11:00 - 13:24:12
Testing Thunk
Since handling asynchronous behavior and mock out AJAX requests to test thunks is difficult, Brian introduces moxios, which is a helper for axios in testing. - https://github.com/btholt/complete-intro-to-react/tree/v3-26
Q&A: Tests and Databases
13:24:13 - 13:25:16
Q&A: Tests and Databases
Brian answers questions from students about tests and reading data from databases.
Universal Rendering

Why Use Universal Rendering?
13:25:17 - 13:30:41
Why Use Universal Rendering?
Since the application relies heavily on JavaScript for rendering, the site cannot be seen without JavaScript turned on to view the application. Brian discusses how Universal Rendering can solve this problem making the application more versatile and accessible.
Separating the Client and Server Code
13:30:42 - 13:34:01
Separating the Client and Server Code
For Universal Rendering to work, the application must run both on the server-side and client-side. Brian spends a few minutes separating the client and server aspects of the application with the core logic of the application now residing in an App.jsx file.
Implementing Server-Side Rendering
13:34:02 - 13:46:08
Implementing Server-Side Rendering
To compile the server-side code to CommonJS modules, Brian updates the .babelrc configuration file and then adds the server logic. Brian introduces Express and implements the server-side rendering of the application.
Running the Node Server
13:46:09 - 13:58:03
Running the Node Server
Brian starts the Node web server to run the application showing that the application can render without JavaScript enabled in the browser. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-27
Fixing HMR
13:58:04 - 14:05:56
Fixing HMR
With server-side rendering functional, Brian notes that the hot module reload is not working. To address this problem, Brian edits the webpack config to look for the webpack middleware instead of the dev server. Then to make the server work as well, Brian runs the NODE_ENV=server node server.js. Then Brian modifies the dev command in package.json to use the server instead of webpack-dev-server. - https://github.com/btholt/complete-intro-to-react/tree/v3-28
Webpack Code-Splitting and Async Routing

Code Splitting with Webpack
14:05:57 - 14:08:26
Code Splitting with Webpack
Brian introduces a feature of Webpack called code splitting, which gives developers the ability to separate application code into multiple bundles. As a user navigates the application, additional bundles are loaded on-demand.
Async Routing
14:08:27 - 14:17:44
Async Routing
Brian sets up an async route, which is a higher-order component that displays a loading state until a component is completely loaded. Once the targeted component is loaded, the AsyncRoute will remove the loading state and display the component.
Setting Up Import
14:17:45 - 14:19:35
Setting Up Import
To enable Babel, Webpack, and Node to all understand the import(…) syntax, Brian includes a few more plugins in babelrc: one plugin for Babel to understand import at all and a plugin to transform Webpack to know to split.
Creating a Landing Bundle
14:19:36 - 14:27:07
Creating a Landing Bundle
Brian demonstrates how the Landing bundle is only loaded when the user navigates to the Landing page.
Creating Search and Details Bundles
14:27:08 - 14:35:47
Creating Search and Details Bundles
Brian finishes creating the Search and Details code bundles. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-29
Building for Production
14:35:48 - 14:51:51
Building for Production
Brian demonstrates how to build the application for production by using the Webpack “-p” flag as well as the Webpack UglifyJs Plugin. To showcase the file savings, Brian compares the production files size with the original application size. - https://github.com/btholt/complete-intro-to-react/tree/v3-30
Preact
14:51:52 - 15:00:29
Preact
Brian introduces Preact, which is a near-drop-in replacement for React with a much smaller footprint. Preact can achieve this smaller size by eliminating some legacy browser support and turning over more work to the browser native APIs. Brian refactors the application to use Preact and compares the size of production to the version that used React. - https://github.com/btholt/complete-intro-to-react/tree/v3-31
Wrapping Up Introduction to React v3

Final Q&A and Wrapping Up
Final Q&A and Wrapping Up
