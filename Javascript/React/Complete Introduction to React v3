                    Complete Introduction to React v3
                    Course Notes


                    Section 1 - Introduction
1 - Introduction
Introduction to React course and the agenda. 
  - This is the third version of the course
  - Ensure that you are on the correct version of the course repo
  - There are differences from the first 2 courses covering things like linting and testing etc
A brief bio of the instructor and a quick overview of the syllabus
Mostly you will not use React by itself it will use tools which increase the complexity
  - These are not compulsory eg Using Flow instead of Typescript
Ensure that Node is installed, above 4 is recommended
To get started will need to clone the start repo of the course
  - https://github.com/btholt/complete-intro-to-react/tree/start
A quick run through of the cloned repo
The instructor uses Sublime but it is not compulsory
The dependencies are locked to certain versions to avoid compatability issues

2 - Yarn Dependency Manager
The yarn package manager will be used in the course
Npm has issues which is why Yarn is used
  - Yarn is an npm client
Npm is non-deterministic which can cause deployment issues

3 - Simple React Components

4 - React Paradigm

5 - Factories & Props



                    Section 2 -Tools
1 - Prettier

2 - ESLint

3 - ESLint and SublimeText

4 - Webpack and Babel

5 - Configuring webpack

6 - Configuring Babel

7 - Setting Up webpack.config.js File

8 - Running webpack from npm



                    Section 3 - React
1 - JSX

2 - Starting a Web App
02:27:15 - 02:41:57
Starting a Web App
With the setup complete, Brian starts to build out a demo application that provides basic Netflix experience, by focusing first on making the home page.
Setting up devServer
02:41:58 - 02:50:58
Setting up devServer
Brian sets up the preferences in webpack to set up the webpack dev server, speeds up development by letting you run a local server and serve all your content. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-3
Routing, Props, & State Management

React Router
02:50:59 - 02:59:06
React Router
Brian introduces the React Router that configures and manages the different pages in the application. Brian separates out the Landing component and sets up the initial routing for the application. - https://github.com/btholt/complete-intro-to-react/tree/v3-4
HashRouter
02:59:07 - 03:09:38
HashRouter
Brian shows the HashRouter for updating the URL. The HashRouter includes the current route after the “#” in the URL. When pattern-matches the requested route, the application then displays the specified component. Continuing with the demonstration with the HashRouter, Brian adds another route for a newly created search page.
BrowserRouter
03:09:39 - 03:23:03
BrowserRouter
Once this is working, Brian transitions from using the HashRouter to using the BrowserRouter. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-6
Loading JSON Data
03:23:04 - 03:33:38
Loading JSON Data
Using webpack, Brian loads JSON files into the demo application. Taking the data in the JSON file, Brian converts data into components. Brian takes questions from students.
Making a ShowCard Component
03:33:39 - 03:49:30
Making a ShowCard Component
With the JSON data in place, Brian adds the UI for displaying shows. Then Brian makes the ShowCard component and introducing how to pass properties into a component. Brian takes questions from students.
PropTypes
03:49:31 - 03:58:16
PropTypes
PropTypes are a more declarative way to specify properties that are passed to a component. Along with declaring individual properties, each property’s type is included as well. Brian adds the propTypes object to the ShowCard component and explains his use of the shape PropType. - https://github.com/btholt/complete-intro-to-react/tree/v3-7
Using the Spread Operator in JSX
03:58:17 - 04:02:35
Using the Spread Operator in JSX
Brian explains how to use the ES6 spread operator to pass properties into a component. The spread operator simplifies the syntax making it easier to add/remove properties in the propTypes object. The spread operator also removes the need to wrap the properties in a shape. Brian takes questions from students.
Key Prop
04:02:36 - 04:06:08
Key Prop
When components are generated from a list of data, React needs a method for keeping track of each individual component. The “key” property allows developers to specify a key value for each component. Typically the primary key or some other unique identifier from the data would be used for the key property.
styled-components
04:06:09 - 04:22:30
styled-components
While the demo application has been using traditional CSS being delivered by a style sheet, Brian introduces the concept of CSS-in-JS, which is to have CSS and JavaScript paired within a component. Brian uses a template literals to write CSS within JavaScript code. Brian takes questions from students. - - http://2ality.com/2016/11/computing-tag-functions.html - https://github.com/styled-components/styled-components
One-Way Data Flow
04:22:31 - 04:25:28
One-Way Data Flow
Brian introduces the concept of React's one-way data flow, which is also called "one-way binding," keeps everything modular and fast.
Q&A: Key and styled-components
04:25:29 - 04:37:12
Q&A: Key and styled-components
Brian takes questions from students about key and styled-components. - https://github.com/btholt/complete-intro-to-react/tree/v3-8
Managing State
04:37:13 - 04:53:24
Managing State
Brian introduces how the state is managed in a React application. As data is changed inside a component, React has a controlled process of getting, storing, and modifying the current state. The first instance of a mutable state will be in the Search component where Brian adds an input field for the search term.
transform-class-properties
04:53:25 - 05:08:17
transform-class-properties
Brian shows how to leverage a stage 2 JavaScript proposal to add properties onto ES6 classes. Brian takes questions from students. - - https://babeljs.io/docs/plugins/transform-class-properties/ - https://github.com/btholt/complete-intro-to-react/tree/v3-9
Filtering
05:08:18 - 05:21:28
Filtering
Implementing filtering, Brian uses the Array.filter() JavaScript method to add a filter to the shows object. Since the searchTerm property is part of the component’s state, the filter dynamically updates as that property is modified. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-10
Q&A: Nested Arrays, ES6, & More
05:21:29 - 05:34:50
Q&A: Nested Arrays, ES6, & More
Brian takes questions from students about route and search component; nested arrays and normalizer; ES6 and arrow functions;
Testing React

Snapshot Testing with Jest
05:34:51 - 05:42:31
Snapshot Testing with Jest
Brian introduces Jest that enables snapshot testing. A snapshot test saves the visual look of the code and alerts the developer if the code is modified. Brian begins creating the Search.spec.js file which will run the snapshot test. - https://github.com/btholt/complete-intro-to-react/tree/v3-10
Configuring & Running Jest
05:42:32 - 05:59:39
Configuring & Running Jest
Before running the snapshot test, Brian installs and configures Jest. Part of the configuration includes having Babel transpile the ES6 modules so they can be consumed by Jest. Babel will only transpile these modules when Node is running in a test environment. Brian takes questions from students. - - https://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/ - https://github.com/btholt/complete-intro-to-react/tree/v3-11
Shallow Testing with Enzyme
05:59:40 - 06:09:57
Shallow Testing with Enzyme
In the previous example, Brian modifies the ShowCard component which leads to a test failing in the Search component. Since these are separate components, the tests should not fail. To fix this testing approach, Brian adds Enzyme to his test running. Brian takes questions from students. - https://www.npmjs.com/package/jest-serializer-enzyme
Testing the Number of ShowCards
06:09:58 - 06:18:50
Testing the Number of ShowCards
To verify the number of ShowCard components matches the number of shows in the JSON data, Brian writes another unit test. After the test is written, Brian demonstrates how to break the test by including a default search term.
Testing the Search Field
06:18:51 - 06:29:04
Testing the Search Field
To verify the search field is working properly, Brian uses the test framework to simulate a search term being entered and compares the filtered results to the expected show count.
Thoughts on Testing
06:29:05 - 06:33:28
Thoughts on Testing
Brian offers his perspective on React testing's effectiveness. Brian takes questions from students.
Test Coverage with Istanbul
06:33:29 - 06:41:02
Test Coverage with Istanbul
Brian wraps up the section on testing React applications with a demonstration of test coverage. He’s using the Istanbul which creates a code coverage report indicating how much of the source code is covered by a test. Brian also shows the lcov-reports which better visualize the coverage and provide some interactivity. - https://github.com/btholt/complete-intro-to-react/tree/v3-12
Hot Module Replacement

Introducing Hot Module Replacement
06:41:03 - 06:43:50
Introducing Hot Module Replacement
Brian introduces a webpack feature called Hot Module Replacement (HMR) that helps replace old modules with the newer ones without stopping the rest of the code from running.
Setting up HMR
06:43:51 - 07:05:24
Setting up HMR
Brain setups HMR by setting up the babelrc and webpack.config.js. To give hot module reload the ability to split the root component away from what renders the component to the page, Brian then splits the App component out of ClientApp. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-13
Flow

Introducing Flow
07:05:25 - 07:08:52
Introducing Flow
Brain introduces Flow, a static type checker for JavaScript code.
Setting up Flow
07:08:53 - 07:17:45
Setting up Flow
Brain demonstrates how to set up Flow into the application. Since outside projects are likely to be used in applications might not be written with Flow, Brian installs flow-typed, which is a repository of third-party library interface definitions for use with Flow - https://github.com/flowtype/flow-typed
Applying Flow
07:17:46 - 07:34:29
Applying Flow
With Flow set up, Brian updates Search.jsx by adding a type for the incoming parameter, which is a synthetic (React) keyboard event. Then Brian gets Flow to be set up in ShowCard.jsx to be typed.
Defining flow-typed
07:34:30 - 07:44:20
Defining flow-typed
Since flow-typed does not have types for Webpack's API, Brian defines his needed types. In the flow-typed folder., Brian adds a file called types.js declares a global variable called module which is an object that has a method called accept. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-14
Fixing flow-typed Definitions
07:44:21 - 07:47:36
Fixing flow-typed Definitions
Brian shows how to install the needed definitions for styled-components. Due to the version conflicts with flow-typed, not all the definitions required for the demo application were present during installation. - https://github.com/btholt/complete-intro-to-react/tree/v3-14
Data in React

URL Parameters
07:47:37 - 08:06:42
URL Parameters
Brian creates the Details component which will show detailed information about a show. The details component will know which show to display based on data found in the URL. This leads Brian to introduce URL parameters and demonstrate how to specify the parameters in the React Router.
Sharing State & Updating the Search Component
08:06:43 - 08:19:55
Sharing State & Updating the Search Component
The Details component is going to need access to the JSON data. Rather than make a duplicate request for the data, Brian moves the JSON data to the closest common ancestor component. This makes the sharing of state between components easier. Brian finishes some refactoring of the Search component now that it is managing its own state and no longer importing the JSON data. - https://github.com/btholt/complete-intro-to-react/tree/v3-15
Finishing the Details Component
08:19:56 - 08:27:56
Finishing the Details Component
Brian finishes the Details component by declaring the propTypes object. He then adds the rest of the user interface components which displays the title, year, poster image, description, and the trailer for the selected show. - https://github.com/btholt/complete-intro-to-react/tree/v3-16
Creating a Header Component
08:27:57 - 08:32:55
Creating a Header Component
The header of the application needs to be used across multiple components. Rather than having duplicate code, the header should be extracted out into its own component. Brian removes the header code from the Landing and Search, and Details components and creates a single Header component.
Conditional Display Logic Part 1
08:32:56 - 08:37:26
Conditional Display Logic Part 1
Now that the Header component is being used in multiple places, it will need some conditional logic to determine whether or not the search bar should be shown. Brian begins adding this functionality be creating a boolean propType property named showSearch.
Conditional Display Logic Part 2
08:37:27 - 08:46:04
Conditional Display Logic Part 2
Brian finishes the conditional display logic in the Header component by using the showSearch propType to determine if the search bar should be displayed. Once he has this code in place, Brian refactors the Search component to use the Header component. - https://github.com/btholt/complete-intro-to-react/tree/v3-17
React Lifecycle Methods
08:46:05 - 08:50:12
React Lifecycle Methods
Brian introduces the React Lifecycle Methods, which are methods called at different stages throughout a component’s life in an application. One of the most common uses for these methods is to request remote data as soon as a component is mounted. Brian spends a few minutes talking about these methods and to use them.
componentDidMount() & AJAX Requests
08:50:13 - 09:09:23
componentDidMount() & AJAX Requests
Brian adds the componentDidMount() lifecycle method into the Details component. He’ll be using this method to trigger an AJAX request to load data for the specified show. Brian is using the axios library to do the AJAX request. - - https://facebook.github.io/react/docs/react-component.html#componentdidmount - https://github.com/btholt/complete-intro-to-react/tree/v3-18
Showcard Link
09:09:24 - 09:18:52
Showcard Link
Spurred by a question from a student, Brian works on polishing the demo application to link from the main page to the details page.
Wrapper and Q&A
09:18:53 - 09:35:36
Wrapper and Q&A
Taking questions from students, Brian wraps up the main section about React. - https://github.com/btholt/complete-intro-to-react/tree/v3-19
React Development Tools
09:35:37 - 09:42:56
React Development Tools
Since React code is transpiled and bundled into a single file, debugging React code can be a challenge. Brian spends a few minutes demonstrating React Developer Tools browser plugin to illustrate how to debug React more easily by inspecting the component code. - https://github.com/facebook/react-devtools
React Performance Tools
09:42:57 - 09:58:41
React Performance Tools
Brian shows how to import the React perf tools that automatically hooks into React instance and track wasted renders. Since this approach is to profile React code only, the perf tools is temporary code that should not ship this in production. - https://facebook.github.io/react/docs/perf.html
Q&A: Defining Components, & More
09:58:42 - 10:05:45
Q&A: Defining Components, & More
Brian takes questions from students about when to define components; storing state with context; and more.
Redux

Introducing Redux
10:05:46 - 10:15:49
Introducing Redux
Brian introduces Redux, which is a predictable state container for JavaScript applications that runs both on the client and server. A single store is created to maintain the state for the entire application, and the state is accessed and modified through the use of reducers and actions.
Setting up Redux
10:15:50 - 10:32:35
Setting up Redux
Brian creates a rootReducer object for the application and explains how the state will be passed to and returned from the reducer. Then Brian creates the store for the application. The createStore method in Redux is passed the rootReducer to create the store. Brian creates the actions for the application. While the files do not need to be in separate files, Brian stores the action definition in an actions.js file and the implementation of the action in an actionCreators.js file. Actions trigger the reducer to carry out the modification of state.
Connect Redux to React
10:32:36 - 10:35:36
Connect Redux to React
To make landing interact with the store, Brian first connects Redux to React with the react-redux package.
Landing Interact with Store
10:35:37 - 10:44:09
Landing Interact with Store
To set up the Landing.jsx to read and write to Redux, Brian uses Connect function, which allows the component to tap into the Redux store's state. The mapStateToProps allows selects which pieces of state are passed into your component which helps keep thing clean.
Dispatching Actions to Redux
10:44:10 - 10:50:19
Dispatching Actions to Redux
Brian addresses the issue typed text in the input not being sent to Redux. To address this problem, Brian sets actions that are dispatched to Redux using the dispatch() method. With this in place, a component calls dispatch() on its props object and pass the executed action.
Redux Review
10:50:20 - 10:59:01
Redux Review
Brian spends a few minutes walking through the entire Redux integration in the application. After reviewing Redux, Brian refactors the Landing component to map the dispatching of actions to component properties. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-20
Search Submit Event
10:59:02 - 11:10:40
Search Submit Event
Since the search input field in the Landing Component is not navigating to the search page, Brian wraps the input in a Form component to utilize the onSubmit event. Brian takes questions from students.
Using Redux in the Search Component
11:10:41 - 11:16:04
Using Redux in the Search Component
Brian moves on to the Search component and refactors it to read state from Redux. Once Redux is added, the Search component no longer needs the getInitialState() or handleSearchTermChange() methods because that functionality now exists in Redux.
Using Redux in the Header Component
11:16:05 - 11:24:01
Using Redux in the Header Component
The last component to refactor is the Header component. Brian imports the connect object from react-redux as well as the setSearchTerm action creator. He then updates the Header component to read the state from Redux and dispatch the action when a new search term is entered.
Q&A: Objects and Props, Dispatch, & More
11:24:02 - 11:28:04
Q&A: Objects and Props, Dispatch, & More
Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-21
Q&A: Recap
11:28:05 - 11:30:54
Q&A: Recap
After taking questions from students before starting, Brian welcomes the class for Day 3 by reviewing past progress - https://github.com/btholt/complete-intro-to-react/tree/v3-21
Refactor Redux for Flow
11:30:55 - 11:38:53
Refactor Redux for Flow
Brian starts to integrate Flux into Redux by adding an ActionTypes, which are types that can only be that string. Brian sets an SET_SEARCH_TERM to an ActionType.
Refactor Reducers
11:38:54 - 11:47:49
Refactor Reducers
Brian shows how to use combineReducers to create the root reducer. Instead of writing our own root, each reducer separates into its own silo. With combineReducers, each reducer only gets the part that it's concerned about and nothing else.
Redux DevTools
11:47:50 - 11:55:48
Redux DevTools
Brian demonstrates the capabilities of the Redux developer tools. Similarly to React, Redux has a set of browser developer tools for viewing and debugging code in the browser. To get the developer tools to work, a small amount of code needs to be added.
Q&A: Coding Issue, State, & More
11:55:49 - 12:00:07
Q&A: Coding Issue, State, & More
Brian takes questions from students regarding Flow and State, coding issues, and more. - https://github.com/btholt/complete-intro-to-react/tree/v3-22
Async Redux

Middleware & Thunks
12:00:08 - 12:03:07
Middleware & Thunks
Brian introduces a thunk, which is a function wrapped around a value and illustrates importance in asynchronous operations.
Setting Up Middleware & Thunks in Redux
12:03:08 - 12:13:38
Setting Up Middleware & Thunks in Redux
Brian adds the redux-thunk library to the application. This middleware will facilitate the exchange between synchronous and asynchronous actions.
Async Functions
12:13:39 - 12:24:18
Async Functions
Brian creates the getAPIDetails function, which Redux calls to trigger the asynchronous axios AJAX call. The AJAX call results are then dispatched to the addAPIData action.
Adding Async Actions to the Details Component
12:24:19 - 12:34:39
Adding Async Actions to the Details Component
Brian completes the redux-thunk middleware integration by updating the Details component. The Details component calls the getAPIData() function, which triggers the asynchronous action. Since Redux is being used in the Details component, the application no longer reads the state from the local store.
Q&A: Async with Redux
12:34:40 - 12:38:59
Q&A: Async with Redux
Brian recaps async with Redux and takes questions from students.
Testing Redux

Updating Snapshot
12:39:00 - 12:45:19
Updating Snapshot
Demonstrating that with the introduction of Redux, Brian shows that most of the existing tests in the application fail because Redux is injected into the components. Brian explains how to use “unwrapped” components in the tests that are free of the Redux dependency. Then Brian updates the snapshot to include the new Header component implementation.
Dispatching Actions
12:45:20 - 12:55:27
Dispatching Actions
Next Brian updates the tests to utilize the Redux store and actions. He wraps the Search component in a Provider so it can have access to the store. He also updates the setting of the search term, so it dispatches a Redux action. - https://github.com/btholt/complete-intro-to-react/tree/fem-24
Testing Reducers
12:55:28 - 13:04:05
Testing Reducers
Brian creates a reducers.spec.js file for testing the reducers. Since the Redux developer tools can write the test for you, Brian demonstrates how easy it is to write a test for reducers by creating a couple of tests for the reducers using the Redux developer tools. Brian takes questions from students.
Testing actionCreators
13:04:06 - 13:10:59
Testing actionCreators
By first creating new spec called actionCreators.spec.js, Brian demonstrates how to test actionCreators with snapshots. - https://github.com/btholt/complete-intro-to-react/tree/v3-25
Testing Thunk
13:11:00 - 13:24:12
Testing Thunk
Since handling asynchronous behavior and mock out AJAX requests to test thunks is difficult, Brian introduces moxios, which is a helper for axios in testing. - https://github.com/btholt/complete-intro-to-react/tree/v3-26
Q&A: Tests and Databases
13:24:13 - 13:25:16
Q&A: Tests and Databases
Brian answers questions from students about tests and reading data from databases.
Universal Rendering

Why Use Universal Rendering?
13:25:17 - 13:30:41
Why Use Universal Rendering?
Since the application relies heavily on JavaScript for rendering, the site cannot be seen without JavaScript turned on to view the application. Brian discusses how Universal Rendering can solve this problem making the application more versatile and accessible.
Separating the Client and Server Code
13:30:42 - 13:34:01
Separating the Client and Server Code
For Universal Rendering to work, the application must run both on the server-side and client-side. Brian spends a few minutes separating the client and server aspects of the application with the core logic of the application now residing in an App.jsx file.
Implementing Server-Side Rendering
13:34:02 - 13:46:08
Implementing Server-Side Rendering
To compile the server-side code to CommonJS modules, Brian updates the .babelrc configuration file and then adds the server logic. Brian introduces Express and implements the server-side rendering of the application.
Running the Node Server
13:46:09 - 13:58:03
Running the Node Server
Brian starts the Node web server to run the application showing that the application can render without JavaScript enabled in the browser. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-27
Fixing HMR
13:58:04 - 14:05:56
Fixing HMR
With server-side rendering functional, Brian notes that the hot module reload is not working. To address this problem, Brian edits the webpack config to look for the webpack middleware instead of the dev server. Then to make the server work as well, Brian runs the NODE_ENV=server node server.js. Then Brian modifies the dev command in package.json to use the server instead of webpack-dev-server. - https://github.com/btholt/complete-intro-to-react/tree/v3-28
Webpack Code-Splitting and Async Routing

Code Splitting with Webpack
14:05:57 - 14:08:26
Code Splitting with Webpack
Brian introduces a feature of Webpack called code splitting, which gives developers the ability to separate application code into multiple bundles. As a user navigates the application, additional bundles are loaded on-demand.
Async Routing
14:08:27 - 14:17:44
Async Routing
Brian sets up an async route, which is a higher-order component that displays a loading state until a component is completely loaded. Once the targeted component is loaded, the AsyncRoute will remove the loading state and display the component.
Setting Up Import
14:17:45 - 14:19:35
Setting Up Import
To enable Babel, Webpack, and Node to all understand the import(…) syntax, Brian includes a few more plugins in babelrc: one plugin for Babel to understand import at all and a plugin to transform Webpack to know to split.
Creating a Landing Bundle
14:19:36 - 14:27:07
Creating a Landing Bundle
Brian demonstrates how the Landing bundle is only loaded when the user navigates to the Landing page.
Creating Search and Details Bundles
14:27:08 - 14:35:47
Creating Search and Details Bundles
Brian finishes creating the Search and Details code bundles. Brian takes questions from students. - https://github.com/btholt/complete-intro-to-react/tree/v3-29
Building for Production
14:35:48 - 14:51:51
Building for Production
Brian demonstrates how to build the application for production by using the Webpack “-p” flag as well as the Webpack UglifyJs Plugin. To showcase the file savings, Brian compares the production files size with the original application size. - https://github.com/btholt/complete-intro-to-react/tree/v3-30
Preact
14:51:52 - 15:00:29
Preact
Brian introduces Preact, which is a near-drop-in replacement for React with a much smaller footprint. Preact can achieve this smaller size by eliminating some legacy browser support and turning over more work to the browser native APIs. Brian refactors the application to use Preact and compares the size of production to the version that used React. - https://github.com/btholt/complete-intro-to-react/tree/v3-31
Wrapping Up Introduction to React v3

Final Q&A and Wrapping Up
Final Q&A and Wrapping Up
