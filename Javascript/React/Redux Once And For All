                    Redux Once And For All
                    Course Notes

Part 1
The course leans heavily to hands on coding rather than theory
  - There will be brief theoretical explanations of subjects and then hands on
  - There will also be do it yourself exercises and the solutions explained subsequently
  - The instructor recommends using either pair or group coding

Redux
  - This is a state management library
  - It helps ease the complexity of managing state in the application
  - React managing state can be troublesome
    - This can be because of the chain of components which may need props passing multiple levels
  - At its core Redux is only a store
    - A store is similar to a model in the MVC architecture style
    - There is however only 1 store in redux which holds the application state
    - This is a Javascript object
  - Unidirectional data flow is where data flows from parent to child components
    - If any change is made to the state it flows down to the child components
  - Redux expands on this by having a single store which is accessible by all container components
  - Dont be confused by the academic terms used around Redux
  - Stores are immutable (read only)
    - The only part of the application that can change the store state is the store itself
    - It does this by providing a dispatch mechanism
      - Any component that has access to the store can send actions to the store
      - Dispatching actions is just a way of sending meassages
      - After receiving these messages the store can decide whether to change its internal state
      - The store also provides subscription mechanisms so that components can be notified of any changes
  - The store provides 3 API
    - A way for container components to get the state
    - A way for the components to subscribe to state changes
    - It can send messages on whether it will update its internal state or not
  - The example of interacting with your bank account is used to explain Redux
  - Reducer functions are where Redux gets its name
    - Reducer functions are difficult for beginners
    - It is just a way of creating a function that updates or summarises a value
    - It is the same as a reduce operator eg array.reduce
    - Reduce is the most powerful operator in the instructors opinion as it can do everything map etc can do 
    - Reducers like a reduce operator always has access to two values 

Create an Example App
  - Create a new react app using create-react-app
    - It must be installed -> npm install -g create-react-app
  - There are dozens of react bolierplate apps available
  - To create a new barebones example application
    - This works across all platforms
    - create a new folder
    - cd into the new directory
    - create-react-app redux-bank
      - This will create a sample app called redux-bank
    - cd into the redux bank folder and type npm start to start the sample application
      - There will be a default app running on port 3000
      - There will also be basic folders & files created 
      - The app.js file holds the logo etc of the barebones application
  - Because the course is a Redux focused course the components etc will not be handcoded in the course
The link for the sourcecode for the completed example app is available at
  - https://github.com/cassiozen/redux-o4a-bankapp
Example Syntax
  import React, { Component, PropTypes} from 'React';
  import logo from './logo.svg';
  import './App.css';
  
  class App extends Component{
    handleDeposit = () => {
      this.props.onDeposit(this.amount.value);
      this.amount.value = '';
    }
    
    handleWithdraw = (){
      his.props.onWithdraw(this.amount.value);
      this.amount.value = '';
    }
    
    render(){
      return(
        <div>
          <header className="header">
            <img src={logo} width="150" alt="Redux Bank" /><br /> Redux Bank
          </header>
          <br />
          <h1>
            Your balance is ${(this.props.balance).toFixed(2)}
          </h1>
          <div className="atm">
            <input type="text" placeholder="Enter Amount" ref={input => this.amount = input} />
            <br />
            <button onClick={this.handleWithdraw}>Withdraw</button>
            <button onClick={this.handleDeposit}>Deposit</button>
          </div>
          <div className="info">
            <strong>Additional Information</strong>
            <div className="info--visible">
              <p><strong>Your Account Manager</strong>C. F. Frost</p>
              <p><strong>Pre-Approved Credit Limit</strong>$500,000.00</p>
            </div>
          </div>
        </div>
      );
    }
  }
  
  App.propTypes = {
    balance: PropTypes.number,
    onDeposit: PropTypes.func,
    onWithdraw: PropTypes.func
  }



Part 2
Continuing using the example form the previous section
Example Syntax
  - npm install -s redux
    - This will install redux and add the save the entry to the package.json file
// Adding a BankReducer.js file in the src directory
// This application will have only 1 reducer file, larger react based apps will have more
// A reducer is a function that receives state and a dispatched action
  export default(state, action) ={
    // An action is a simple JS object, usually with a type key but could be something else eg name
    // It usually looks something like {type: 'create_account'}
    if(action.type === create_account){
      // This will be the new application state
      return {balance: 0}
    } else if(action.type === deposit){
      // This will use the previous state and update it
      return {balance: state.balance + action.amount}
    } else if (action.type === withdraw){
      return {balance: state.balance - action.amount}
    }    
  }
In larger Redux applications using multiple if else statements for actions may not be practical
  - Instead in that type of application switch is used instead
 // Switch version of the above 
 switch(action.type){
  case create_account:
    return {balance: 0}
  case deposit:
    // To ensure that amount returns a numerical value, it is wrapped in parseFloat
    return {balance: state.balance + parseFloat(action.amount)}
  case withdraw:
    return {balance: state.balance - parseFloat(action.amount)}
  default:
    return state;
 }

To create a store in React you will need to import createStore
Example Syntax
  // Creating a store (there can be more than one in an application)
  // Also the reducer function from  above wiil need to be imported as it is a parameter in the store
  const bankStore = createStore(bankReducer);

Its a good idea to separate Redux from presentational components
Example Syntax
  class AppContainer extends Component {
    // The lifecycle method ensures that the action is dispatched and the store initiated
    componentWillMount(){
    
    }
    
    render(){
      // This will interact with the store & getState is method provided by Redux
      const storeState = bankStore.getState();
      return(
        <App 
          balance={storeState.balance}
          onDeposit={}
          onWithdraw={}
        />
      )
    }
  }


Part 3



Part 4



Part 5
