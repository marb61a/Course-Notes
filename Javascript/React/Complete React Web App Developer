                    Course Notes from the Udemy Course
                    Complete React Web App Developer
                          By Andrew Mead
  *** This is a combined Project & Theory based course, completed projects urls will be listed in appropriate sections
  *** At this moment, I use Cloud9 IDE rather than a local machine install which will change some instructions.
  
                          
                    Section 1: Intro
1 - Why Should I Learn React?
The first lecture is the course author outlining his reasons for learning ReactJS which is commonly referred
to as a framework, over other framworks such as AngularJS. Some dispute the claim that React JS is a framework
and is instead library which can be used in conjunction with other frameworks.

2 - Frequently Asked Questions
Using specific library versions can be important as the project may not work with the latest versions
Why only ES5 - ES6 is covered as well as the ES6 syntax
  
                    Section 2: Getting Setup
1 - Installing Atom
Atom is an open source code which is used in the course in place of a more heavyweight IDE such as Visual Studio.
In this video the author shows how to install the Atom Editor.
  - https://atom.io

2 - Installing Git & Bash (Important For Windows Users)
Git is a version control system which is widely used by developers of all kinds. Git is used during the course
to ensure that project code is saved. Git itself is installed on the local machine however to ensure that there 
is no code loss, code is pushed to an online repository such as Github or Bitbucket which are both free.
BASH is a linux shell which has features that the standard windows command prompt lacks but that packages that
will be used during the course need, a windows version of the BASH shell has been made available and is highly 
recommended due to the power it brings users.
  - https://git-scm.com/downloads 

3 - Intro To Command Line
A basic intro to some often used commands which you will need during the course.
There is a comprehensive tutorial available at 
  - http://ryanstutorials.net/linuxtutorial/

4 - Installing Node.js
This video covers the installation of Node.js, this may change according to versions of both Node and also
changes to platform and versions 
For Windows - http://blog.teamtreehouse.com/install-node-js-npm-windows
For Linux - http://nodeguide.com/beginner.html
For OSX - http://blog.teamtreehouse.com/install-node-js-npm-mac


                    Section 3: Hello React
1 - Creating Your Web Server
Need to create a web server to be able to see files
  - mkdir HelloReact
  - cd HelloReact
  - npm init -- installs the npm package manager and creates package.json file
  - npm install express@4 --save - installs express version 4 & saves to disk and adds entry to package.json
  - npm install creates node_modules folder
  - server.js file created as entry point to the app

2 - Hello React!

3 - Atom Editor Plugins (Optional)
A quick discussion of some plugins available o people using the Atom text editor.

4 - Your First React Component

5 - Learning JSX

6 - Component Properties

7 - User Events & Callbacks

8 - Component State

9 - Nested Components: Part 1

10 - Nested Components: Part 2

11 - Aside: Props & State

12 - Section Challenge



                    Section 4: A Better React Project
1 - What is Webpack? (And Installing It)

2 - Generating Our Bundle

3 - The Webpack Config File

4 - Adding Babel & JSX Support

5 - Refactoring Your Components

6 - Webpack: Custom Package Names

7 - Boilerplate Project

8 - Bonus: Using Experimental JavaScript Features



                    Section 5: Routing & Our Weather App
1 - Front-end Routing

2 - Adding React-Router

3 - Creating Our Pages

4 - Why use <Link/>?

5 - Creating WeatherForm & WeatherMessage

6 - Exploring OpenWeatherMap.org
http://openweathermap.org is a website which provides current weather and also a free API for developers to use in
their applications.

7 - ES6 Promises

8 - Faking Our Call

9 - Making Our API Call

10 - Adding Loading Text

11 - Debugging & The React Developer Tools

12 - Advanced Debugging

13 - ES6 Aside: Arrow Functions

14 - Refactoring: Stateless Functional Components




                    Section 6: Deploying Your App To Production
1 - Intro: Tools You'll Use
Tools used are 
  - Git & Github
  - Heroku

2 - Installing Git
3 - Adding Git To Your App
4 - Joining GitHub & Generating SSH Keys
5 - Pushing To GitHub
Comprehensive sets of notes on using Git & Github available at
  - https://github.com/marb61a/Course-Notes/blob/master/DevOps/The%20definitive%2C%20step-by-step%20guide%20to%20Git

6 - Heroku Signup & Toolbelt
Heroku is a website for hosting web applications it has a free tier and is available at
  - https://www.heroku.com

7 - Deploying Your App

8 - Feature Workflow

9 - Fixing localhost



                    Section 7: Styling Your App With Foundation
1 - Intro: Foundation
    Foundation is a framework for front end design of websites. It is available here
    http://foundation.zurb.com
    It is similar to othe frameworks of this kind such as Bootstrap

2 - Installing Foundation

3 - Styling Navigation

4 - Styling Examples Page

5 - Styling About Page

6 - Styling Weather Page

7 - Adding A Modal For Errors (Part 1)

8 - Adding A Modal For Errors (Part 2)

9 - Adding Custom CSS

10 - Setting Up SCSS

11 - Linking To Location & Wiring Up Nav Form

12 - Fixing The Error Modal

13 - Updating Our Boilerplate



                    Section 8: Testing & Component Lifecycle
1 - Project Overview
    A quick run through of the app that is constructed in this section

2 - Component Breakdown
    The author makes the point that you should keep tools even a  pancil and paper so that you can skecth out
    rough ideas of both what the components are but also what they may look like.

3 - Adding The Navigation Bar

4 - Customizing The Navigation Bar

5 - Basics Of Testing

6 - Configuring Tests With Webpack & React

7 - Adding Routes & Container Components

8 - Clock Component

9 - Clock Component: Part 2

10 - Countdown Form

11 - Testing Our Form With Spies

12 - Starting The Count Down

13 - Testing That Counting Down Works

14 - Creating Our Controls

15 - Pausing, Starting, and Resetting

16 - Component Lifecycle

17 - Testing Pausing & Resetting

18 - Project Setup: Timer

19 - Project Solution: Timer (Part 1)

20 - Project Solution: Timer (Part 2)

21 - Foundation Settings & Karma Issues

22 - Final Boilerplate



                    Section 9: Building A Todo Application
1 - App Demo & Learning Goals
    A quick discussion of what the app for the section is, in this case it is a Todo App. The author also
    discusses what he hopes that students will take away from the course.

2 - Creating The Root Component (TodoApp)

3 - Rendering Lists In React (TodoList & Todo)

4 - Testing List Components

5 - Challenge: AddTodo Is On You!

6 - Setting Up The Filter Component

7 - Testing The Filter Component

8 - The Spread Operator

9 - Wiring Up AddTodo

10 - Toggling Todos

11 - Testing Toggling Todos

12 - Storing Todos In Local Storage

13 - Testing Our TodoAPI

14 - Wiring Up Search (Part 1)

15 - Wiring Up Search (Part 2)

16 - Dates With Moment

17 - Adding Created At & Completed At Timestamps

18 - Styling TodoApp, AddTodo, & TodoSearch

19 - Styling Todo




                    Section 10: Redux
1 - Why Redux?
The author gives a definition of Redux.
There is a quick explanation using the project App of the course to explain the reasoning behind switching
to Redux use in the prokject.
The author also ensure that the student knows that Redux is independent of React but that they work well together

2 - Installing Redux

3 - Pure Functions

4 - Creating A Reducer & Getting App State

5 - Dispatching & Handling Actions

6 - Subscribing To Changes & Debugging

7 - Redux Actions: Add To Arrays

8 - Redux Actions: Removing From Arrays

9 - Working With Multiple Reducers

10 - Creating Action Generators

11 - Asynchronous Actions

12 - Organizing Your Actions and Reducers

13 - Todo: Creating & Testing Actions

14 - Todo: SearchText & ShowCompleted Reducers

15 - Todo: Todos Reducer

16 - Todo: Setting Up The Redux Store

17 - React-Redux: Provider & Connect

18 - Testing Reduxed Components

19 - Testing Reduxed Components (Part 2)

20 - Refactoring AddTodo

21 - Refactoring TodoSearch

22 - Setting Up Local Storage With Redux




                    Section 11: Databases & Authentication With Firebase
1 - Setting Up Firebase

2 - Saving Data

3 - Updating Data

4 - Removing & Navigating Data

5 - Fetching Your Data

6 - Working With Arrays

7 - Async Actions (Adding Todos To Firebase)

8 - Testing Async Actions

9 - Saving Todo Updates

10 - Testing Todo Updates

11 - Fetch Todos From Firebase

12 - Testing startAddTodos()

13 - Webpack On Heroku

14 - Environment Variables & Separate Databases

15 - Heroku Environment Variables

16 - Adding Login Page & Logout Button

17 - Firebase Login & Logout

18 - Private Pages & Redirects

19 - Login Reducer & Actions

20 - Firebase Security Rules

21 - Testing With Authentication

22 - Clearing Todos on Logout



                    Section: 12 - ES6 Classes and React.Component - Just added!
1 - Section Intro
Quick introduction to the section

2 - Raw ES6 Classes: Part I

3 - Raw ES6 Classes: Part II

4 - Extending and Rendering

5 - Setting Initial State

6 - Prop types and default prop values

7 - Goodbye autobinding

8 - Higher Order Functions

9 - Higher Order Components

10 - Project Setup

11 - Project Solution
