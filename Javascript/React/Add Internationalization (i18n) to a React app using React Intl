                    Add Internationalization (i18n) to a React app using React Intl
                    Course Notes


1 - Install And Configure The Entry Point Of react-intl
Start by adding react-intl to a project
  - Using the yarn package manager -- yarn add react-intl
Example Syntax
  // This uses an existing example app
  // Creating a new messages.js file
  export default {
    // There will be keys added here which will correspond to the languages that will be supported
    'en-US': {},
    'es-ES': {},
    'fr-FR': {}
  }
  
  // The entry point of this app is the src/index.js file
  

2 - Convert A Hard Coded String Using react-intl FormattedMessage

3 - Render Content With Placeholders using react-intl FormattedMessage

4 - Render Content With Markup Using react-intl FormattedHTMLMessage

5 - Format Date And Time Using react-intl FormattedDate And FormattedTime

6 - Format A Date Relative To The Current Date Using react-intl FormattedRelative

7 - Format Numbers With Separators And Currency Symbols Using react-intl FormattedNumber

8 - Render Content Based On A Number Using react-intl FormattedMessage

9 - Use A react-intl Higher Order Component To Format Messages And Get Current Locale

10 - Write Tests For react-intl Output Using Enzyme And Jest

11 - Use Webpack To Conditionally Include An Intl Polyfill for Older Browsers

