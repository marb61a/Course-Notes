                              Notes from Udemy course by Stephen Grider
                              Modern React with Redux
                              
                    Section 1 - Intro to React
1 - Introduction and Github Links for Project Files
    The course starts off with an intro and links to prebuilt Github examples

2 - These are links to completed projects source code for comparison

3 - The instructor explains the rationale behind using boilerplate skeleton projects to facilitate learning
    React\Redux. Also explained is the structure of the boilerplate apps and the files and libraries that
    they use. ES6\2016 is used and it is also explained that at this stage not all browsers will support
    the use of this version of Javascript. The work around is to use tooling called transpiling using a set
    of tools called Babel & Webpack which will make a file compatable with browsers.
    
4 - This lecture is about how to setup the environment using the instructors premade git repository, upon
    cloning or copying the repository npm install will need to be run in order to install the dependencies
    that are needed.
    
5 - This video is about the project setup which is a video player built using React, there is a mockup used to
    explain how the video player will function, also there is no dummy data used instead the Youtube API is going
    to be used and the player itself is able to be deployed. The command npm start is used which will in turn create
    a local sever as well as running Webpack.
    
  * Running a cloud based IDE like cloud9 will have different methods of running webpack server, you may also
    need to install dependencies using the -g for global and --save flags to ensure that you do not have to keep
    changing into directories. On cloud9 the following command works
    webpack-dev-server --port $PORT --host $IP  --content-base build/
    
6 - A taste of JSX
    To run an NPM Server - Use the npm start command
  * On Cloud9 this will not work as it will give an Application Not Running message so you will need to run 
    webpack-dev-server --port $PORT --host $IP  --content-base build
    The first change to a file to illustrate what is happening is to app.js in the components folder and the 
    React Simple Server text is replaced by Hello There, by going to the running server page and refreshing
    you will see that the messages have changed.
    The src folder is deleted to avoid having pre-existing boilerplate code, this means that you can start totally
    from scratch, the first step is to make an src folder and within it an index.js file
    React code is normally written in components or views, these terms are used to mean the same thing. Components
    are snippets of code that produce html.
    ES6 Syntax is used eg const, it is similar to declaring a variable but it does not change hence the const keyword
    rather than var.
    JSX allows for what looks like HTML to be written in Javascript eg <div> </div>  is used inside of a function.

7 - More JSX
    JSX cannot be interpreted by the browser, that is done by tools like Babel.
    JSX is not compulsory to write but is recommended.
    JSX improves legibility of component code.

8 - ES6 Import Statements
    Instructor makes the point of ensuring that student understands how to interpret error messages.
    Import statements are used to make code modules available in files e.g import React from 'react'
    will allow the react library to be used in a file.

9 - ReactDOM vs React
    React is diverging into 2 libraries, the main react library works with components, ReactDom is now the library
    which handles rendering to the DOM. This means that you will also need to import ReactDOM to be able to render
    to the DOM in a file.
    The command also changes from React.render to ReactDOM.render

10 - Differences Between Component Instances and Component Classes
    There is a quick explanation of the difference between a class and an instance of that class. Also explained is
    the error from the sample code which is cause by using a class and not an instance. The solution is to instaniate
    the object.
    Whenever there is a JSX tag with nothing inside it can be made self closing.
    Replacing ReactDOM.render(App) with ReactDOM.render(<App />) will change from a class to an instance as using
    the tage will automatically be interpolated as createElement.

11 - Render Targets
    ReactDOM.render(<App />) causes and error due the target not being a DOM container. This is rectified by adding a 
    second argument to the rnder function which renders an existing DOM node, effectively it tells React where to put
    the component on the page. One example is where a html page has a div whose id is "container" by adding this 
    container to the render function enables React to render the component to the approriate section. In this case the
    .render function becomes ReactDOM.render(<App />, document.querySelector('.container')) and the error is resolved.
    ES6 syntax using fat arrow is introduced.

12 - Component Structure
    A component is a function or object that returns some Html.
    Nesting components inside one another is fine and quite common especially when rendering a list of components.
    There is a rule of one component per file no matter how small a component may be.
    Usually a folder called components holds the application components.

13 - Youtube Search API Signup
    The course uses the Youtube API to fetch and find videos and that must be signed up for by a developer.
    The API is free but will require an API key, this like others can be signed up for at developers.google dashboard.
    The video shows the process of signing up for an API key.
    As it is using ES6 the API key is declared using const as var is not used in ES6
    There is an NPM package Youtube-api-search that enables searching in an application

14 - Export Statements
    The first component in the app to be addressed is the search bar.
    Returning an <input /> will like discussed above generate an input box and again it does not need to be closed.
    export default "component" will make just the component code available to be imported by other files.
    For all self written files full and correct file references must be provided eg "./components/search_bar"
    File extensions need not be included in all cases.
    To render a component inside another is easy in the example is is the following
    	const App = () => { return (<div> <SearchBar /> </div>)} 
    Parentheses are used in multi line returns, if using single line ensure code is on the same line as return to avoid
    errors.

15 - Class-Based Components
    2 Types of component in React, Functional Component which is like the example and uses functions and Class Based
    Component. 
    Using Class Based Components gives the component the ability to do internal record keeping which enables it to 
    communicate what has happened to other parts of the app.
    Like in other OOP languages declaring a class is a matter of using the class keyword and using an instance is a 
    matter of using new "class name".
    Every Class Based Component must have a render method, it looks like this -  render(){}
    Instead of using extends React.component in the class declaration you can add it to the import statement like this
    import React, {Component} from "react" and the class declaration looks like the class "name" extends Component

16 - Handling User Events
    React has 2 steps for handling events
    1 - Declare an event handler
    2 - Pass the event handler to the component to be monitored
    A lot of developers us either onInputChange or handleInputChange to be able to easily tell what the method does.
    Passing it to the handler <input /> makes it become  <input onChange = {this.onIputChange}/>, where change is a 
    vanilla HTML event.
    **** Ensure JSX curly braces are in place.
    The event which occurs is passed as an argument to the event handler, a lot of times the name event is used for
    generic events.
    Using console.log(event.target.value) will pass the value of the event to the console for inspection
    The refactored code  looks like this at the end of the lesson 
		     class SearchBar extends Component {
			    render() {
			    return <input />;
			     return <input onChange={event => console.log(event.target.value)} />;
			    }
		     }
    This has eliminated the seperate onChange function which had existed but could be refactered, also as there is only
    a single argument being passed the parentheses are not necessary.

17 - Introduction to State
    State is defined as a plain JS object that is used to record and react to events.
    Each class based component has its own state object
    To initialize state, set the property state to a plain JS object in the constructor

18 - More on State
    Updating state is different from creating state and knowing the difference is important
    Only in the constructor is state changed like the following - this.state = {term : ''}
    Everywhere else a method called setState() is used

19 - Controlled Components
    A controlled field is a form element whose value is set by the state

20 - Breather and Review
    A quick review of the material covered in the chapter



                      Section 2 - Ajax Requests with React
1 - Youtube Search Response
    Return to the Youtube Search Application
    Downward Data flow is a React term which means that only the most Parent component should be responsible
    for fetching data no matter where from eg API.
    In the app Index is the most parent component so it should be there.
    To use Youtube search - import YTsearch from 'youtube-api-search'
    Similar to libraries like Jquery you use config options + callback function to search using the imported YTsearch

2 - Refactoring Functional Components to Class Components
    App component is refactored into a class based component in order to be able to use state
    Syntax errors can be caught using the npm start process which will display information to help find issue
    **** when extending anything it is extends not extend
    Constructor always gets called with props as a parameter
    In ES6 when key and value are the same name it can be condensed eg ({data : data}) will be ({ data })

3 - Props
    className is used instead of class for css as class is a keyword
    export default "component" allows for import in other files
    In order to allow a parent component to pass data to a child component in React it is necessary to define
    a property on the jsx tag, passing data in this manner is referred to as passing "props"
    The data being passed from Parent to Child is referred to as "prop"
    When using a functional component the props object will arrive as an argument to the function, this differs from
    a class based component where props is available anywhere in any method as "this.props"

4 - Building Lists with Map
    If possible avoid using For loops in JS
    Use built in iterators instead in this case use the map() function
    There are several tutorials on map available like the one at this address - 
    http://adripofjavascript.com/blog/drips/transforming-arrays-with-array-map.html

5 - List Item Keys
    React has built in functionality to render lists
    Adding keys to lists ensures a unique ID for each element in the list
    Etags are unique identifiers which consist of a long string of characters
    They can be added easily to a list eg videos.etag

6 - Video List Items
    Adding keys is not performance intensive
    ES6 allows you to use ({video}) as a method parameter instead of declaring it inside the method
    eg const video = props.video
    Bootstrap is used to style list
    Bootstrap tutorial is available at - http://www.tutorialrepublic.com/twitter-bootstrap-tutorial/
    URL of extra information eg title or src can be found in the Snippet object
    

7 - Detail Component and Template Strings
    When writing a new component ask does this component need to maintain some form of state
    Some components do not need state and a simple functional component will suffice in this
    situation.
    Youtube videos always have the same format which is the site address plus the video ID
    Using back ticks like this - ` allows for use of Template Strings which allow for injection
    of variables into a string instead of concatenation e.g. `url${variable}`

8 - Handling Null Props
    ** React wants to render instantly which may cause issues that will need to be handled. These issues occur because of
    child objects needing information faster than the parent objects can provide.
    To handle the issue there should be a checking mechanism in place such as an If statement which could run if there was
    no object present until there was an object present.

9 - Video Selection
    *** If using an AJAX spinner as a loading check not use everywhere in an app, best practice is to use in a high level component
    To allow for video selection, remove the hardcoded 1st video at this.state.videos[0] and replace with this.state.selectedVideo
    which will reflect the selected video set in the state object and the YTsearch function setState which causes rerendering.
    ES6 allows for multiple parameters to be passed in a function provided they are comma separated.
    Using onClick allows for items to be clicked and therefore selected
    It is normal practice for callbacks not to be more than 2 levels
    More than 2 jumps means that there will need to be refactoring.

10 - Styling with CSS
     Using some CSS style options on the example app

11 - Searching for Videos
     This section adds search capability to the sample app
     This is done by adding a callback function which takes a string for the search term.
     The YT search from previous example is moved into the new function and changed so that it takes the
     search term.
     In the searchbar component setting the state is moved to a new onInputChange function

12 - Throttling Search Term Input
     This adjusts the search term updating by throttling how often search is updated
     Throttling is done using lodash (functional JS library) and its dbounce functionality
     Lodash will havve to be installed
     When importing it is usually named import _(underscore rather than import lodash)
     The debounce allows for a version of a function to be passed which has a specific timing variable
     paseed in milliseconds eg the search function and the adjusted value is passed is and becomes a const
     in the example.
     Debounce effectively returns a version of the original function but only how often you have specified.

13 - React Wrapup
     A quick wrapup of the preceeding sections which dealt with the mechanics of React.
     The instructor draws attention to several parts that have been covered which are important.


                    Section 3 - Modelling Application State
1 - Foreword on Redux
    A quick forward on Redux, the official documentation is available at the following address
    http://redux.js.org/index.html

2 - What is Redux?
    The Redux homepage says that it is a predictable state container for JS Applications

3 - More on Redux
    In the example presented a sample application is shown as having 2 parts, the views part which represents
    React and the data part which represents Redux.
    In Redux all data is centralised inside a single object.
    This single object is referred to as State
    This is application level state as compared to component level state.

4 - Even More on Redux
    Designing state is a very important part of Redux
    Tinder is the application modelled to explain state for Redux
    


                    Section 4 - Managing App State with Redux
1 - Reducers
    To get started either clone Github repo or download and copy boilerplate project, then run npm install
    to install the necessary dependencies.
    A reducer is a function which returns a piece of the application state.
    There can be many Reducers as there can be many different pieces of state.
    Prepending file names with file type helps avoid confusion eg reducer_books.js

2 - Containers - Connecting Redux to React
    In the example a new booklist component is created in the appropriate directory.
    This follows a lot of the conventions used earlier in the course re-used
    Combining react views and redux state gives a usable application.
    React and Redux are not connected but will have to be using a library called ReactRedux
    In the example a component becomes a container, where a container is a React component that has a direct
    connection to the state managed by Redux
    Containers are also reffered to as Smart Components
    To avoid confusion as they look the same it is better practice to have a separate directory for containers.
    
3 - Containers Continued
    Deciding on what component to use as a container will have different factors
    As a general rule again the most parent component that cares about a state will become a container
    Also only the nost parent that cares about a piece of state needs to be connected to redux

4 - Implementation of a Container Class
    ReactRedux needs to be imported
    The connect function from ReactRedux is imported to allow connection to Redux
    Connect is used in export default with what specific function is to connect
    State change will be instantly rerendered

5 - Containers and Reducers Review
    Basic review of the material covered in the previous couple of videos.

6 - Actions and Action Creators
    Overview of Actions and Action Creators
    Actions and Action Creators are used for changing state
    An Action Creator is a function which returns an action creator
    

7 - Binding Action Creators
    **** Again it is important to remember that Action Creators are just functions
    The Action Creator will need to be wired up to reux.
    Importing bindActionCreators from Redux allow for wiring Action Creators to Redux
    bindActionCreators ensures that the Action generated by the Action Creator flows through all reducers in an app
    Action Creators wrapped in a dispatch call may be invoked directly.

8 - Creating an Action
    There is a click handler added to the sample app which also has selected book props to be added. This means
    that the action creator has been wired to the container.
    The action creator returns an action, this is an object and normally has 2 sections a type and payload, in this
    case the type is string
    The type is always upper case and types are usually pulled out to a file that holds all types in an app.
	
9 - Consuming Actions in Reducers
    A new active book reducer is added
    All reducers get 2 arguments - the current state and action, the current state in this is not the application state but
    the state that the reducer is responsible for
    If there is no interest in current state it is good practice to have a base case which can be passed
    Do not mutate, ensure clean objects

10 - Consuming Actions in Reducers Continued
    The active book component changes to a container due to the app needs.
    There is a new container added to cover book details
    Book Detail is added to the rendering component

11 - Conditional Rendering
    When first booting there is no application state assembled
    Behind the scenes Redux sends booting up actions through reducers
    To avoid returning the null state due to there being no book selected you can add a check to the render method
    which will return a value rather than null which may cause issues in Javascript
	
12 - Reducers and Actions Review
    A quick review of the matreial that the chapter has covered



                    Section 5 - Middleware
1 - App Overview and Planning
    A quick overview of the section to follow and a discussion of the planning of
    the app built in the section.
    The app for the section is similar to the Youtube app but built asing Redux, in this case it is a weather
    forecast data app.

2 - Component Setup
    A quick overview of the reasoning behind the app architecture
    First component to be setup is a searchbar,  this is a container as this particular component needs to talk to
    Redux to change state.
	
3 - Controlled Components and Binding Context
    The component in changed to a controlled field component using an event handler in the searchbar input.
    Controlled components are defined above.
    *** Remember this.setState is used outside a constructor
    In the example to avoid issues with 'this', the onInputChange is bound using 'bind'
    As a gereral rule of thumb in Javascript when passing callback functions around you will need to use bind
    in order to avoid context issues using 'this'
	
4 - Form Elements in React
    ** When pressing return on a form element, default browser behaviour is to try submit form
    To prevent default behaviour in the example, an onSubmitForm function is added this basically takes the
    event and uses preventDefault method. This is also added to the form prior to the form classname being defined.
    Forms have additional functionality inbuilt which saves having to build it out. 
	
5 - Working with API's
    API used in example is OpenWeathermap forecast API.
    Sign Up is mandatory to receive API key
    API key is saved as const
	
6 - Introduction to Middleware
    AJAX requests can be complex at first especially doing them properly
    Middlewares are functions that take an action that can allow the action pass through, stop, change them etc prior to reaching
    reducers. They act as gatekeepers for reducers
    Redux-Promise is the middleware package installed using npm.
	
7 - Ajax Requests with Axios
    Conventions are to use a single variable to hold an action type, this stops mistyping bugs occuring
    ES6 Template strings are used to put URL together with an API key. A full tutorial on template string is available at
    http://tc39wiki.calculist.org/es6/template-strings/.
    Axios is used to make AJAX requests instead of using JQuery and the source is available at -
    https://github.com/mzabriskie/axios
    Axios will need to be installed using NPM
	
8 - Redux-Promise in Practice
    Again bindActionCreators are used in conjunction with mapDispatchToProps to wire up Redux
    Null is the first argument in export because the mapDispatchToProps function is supposed to be the second argument passed in
    An empty string is used to clear user input after a city is searched for.
	
9 - Redux-Promise Continued
    New weather_reducer added to handle weather data
    Promise is returned as the payload
    Redux Promise is used on the payload property, if the payload is a promise it stops it entirely, it then dispatches
    a new action of the same type but with the promise resolved.
    Redux Promise means that coding can be simplified.
	
10 - Avoiding State Mutations in Reducers
    Initial state is changed from null to an empty array to store pieces of weather data
    A switch is used for the action types in the sample app
    Don't manipulate state directly in Redux, ensure you are returning a new instance of state
    Instead of using concat the new ES6 ... operator is used
	
11 - Building a List Container
    A new container for the sample weather list is added
    A table element will be used for displaying data
	
12 - Mapping Props to a Render Helper
    renderWeather function is added, cityData is first argument added
    A table is returned which will give each city its temperatue etc
    A key is needed to be added which in react is added to the top level element
    Key needs to be unique
	
13 - Adding Sparkline Charts
    React Sparklines is used in the sample app for charts
    Sparklines is available at - https://github.com/borisyankov/react-sparklines
    Installing Sparklines is done with NPM
	
14 - Making a Reusable Chart Component
    A rule of thumb is that if markup is repeated then it may be better practice to move the markup to a
    seperate component
    If you do not need to manage component state it can be a functional component
	
15 - Labeling of Units
    Additional charts for humidity and pressure is added
    A sparklines reference line for avg is used to give average values
    Lodash is used to provide functionality in calculating an average numeric value
    Units will need to be changed eg temperature is in kelvins
    Converting units maybe better done in variable definition
	
16 - Google Maps Integration
    The name of the city which is searched for is replaced by a Google Maps map of city location
    React has a library called react-google-maps which creates a react component which wraps Google maps
    Options for use of react-google-maps are on the github repository page
    Inline css works the same as when used on html elements
	
17 - Google Maps Integration Continued
    Map is kept as a component as it only needs to render a map and doesn't need to do anything eg resolve markers
    Different API use different names for the same thing so need to be watched eg Google uses lng for longtitude
    where the weather uses lon to represent longtitude
	
18 - Project Review
A quick review of the project that has just been built
Also a quick review of what should be key learning take aways


                    Section 6 - Redux Router & Redux Form
1 - App Overview and Goals
    A quick review of what has been learned thus far
    In this section the sample app will be a blogging to demonstrate both routing
    and forms in Redux
	
2 - Exploring the Posts Api
    There has been a sample API created for the section's sample app. The API is available at wwww.reduxblog.herokuapp.com
    Each of the routes will correspond to a page in the sample app
    The routes are in standard REST\Http verb format
    Postman is used with Chrome to test API
	
3 - Installing React Router
    React router is installed via npm to handle routes, there is a specific version used due to issues with versions
	
4 - React Router - What is It?
    React router is a routing library for react.
    The Github repo is available at https://github.com/ReactTraining/react-router
    Installing react router also installs a small package which watches url for changes, it is very rarely
    directly interacted with.
	
5 - Setting Up React Router
	
6 - Route Configuration
	
7 - Nesting Of Routes
	
8 - IndexRoutes with React Router
	
9 - Back To Redux - Index Action
	
10 - Catching Data with Posts Reducer
	
11 - Catching Data with Posts Reducer Continued
	
12 - Fetching Data with Lifecycle Methods
	
13 - Fetching Data with Lifecycle Methods Continued
	
14 - Creating New Posts
	
15 - Navigation with the Link Component
	
16 - Forms and Form Submission
	
17 - More on Forms and Form Submission
	
18 - Passing Control to Redux Form
	
19 - CreatePost Action Creator
	
20 - Form Validation
	
21 - Form Validation Continued
	
22 - Navigating on Submit
	
23 - Posts Index
	
24 - Dynamic Route Params
	
25 - Loading Data on Render
	
26 - Handling Null Props
	
27 - Delete Action Creator
	
28 - Navigate on Delete
	
29 - ReactRouter and ReduxForm Wrapup


			Section 7 Bonus - RallyCoding
1 - Basics of Redux Thunk

2 - Combining Redux and Firebase

3 - Dynamic Forms with Redux Form

4 - Logicless Components with Reselect

5 - Data Loading Methods with Redux

6 - Animation of React Components

7 - Four Most Common Errors with React and Redux

8 - Modals in React and Redux Apps

9 - The Best Way to Store Redux Data

10 - BrowserHistory in Production

11 - Introducing JSPlaygrounds for Rapid Prototyping

12 - Deployment of React/Webpack Apps

13 - React Integration with Third Party Libraries


