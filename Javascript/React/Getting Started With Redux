                    Getting Started With Redux
                    Course Notes
                    

1 - Redux: The Single Immutable State Tree
The main principle of Redux is that no matter the complexity of your applications you will
represent the state of your application in a single Javascript Object
The example uses a counter which may be added to or subtracted from
  - There is also an option for adding additional counters
Example Syntax
  // This represents the state object and each item added to the todos is added as an object in the empty array
  [object Object] {
    todos: [],
    visibilityFilter: 'SHOW_ALL'
  }
In Redux the state is also referred to as the state tree

2 - Describing State Changes with Actions
The second principle of Redux is that the state tree is read-only
  - Any time that you wish to change this tree you need to dispatch an action
  - An action is a plain JS object describing the change
  - The structure of the app is up to each developer
    - The only requirement is that you have a type property which is not undefined
    - The use of strings is recommended as they are serializable

3 - Pure And Impure Functions
It is important to understand the difference between pure and impure functions
  - Some functions is Redux have to be pure
Example Syntax
  // Pure functions
  // Functions are pure when their return values depend solely on their arguments
  function square(x){
    return x * x;
  }
  function squareAll(items){
    return items.map(square);
  }
  
  // Impure functions
  function square(x){
    updateXInDatabase(x);
    return x * x;
  }
  function squareAll(items){
    for(let i = 0; i < items.length; i++){
      items[i] = square(items[i]);
    }
  }

4 - The Reducer Function
The UI is most predicatable when described as a pure function of the application state
  - This approach originated with React but has spred to other frameworks
  - Redux adds on to this idea with the notion that state mutations in an app need to be described as a pure function
    - This takes the previous state and the action being disatched are returns the next state of your application
  - Inside any redux application there is one function that takes the whole application state and action being dispatched
  and returns the whole next state of the application
  - It is important that it does not modify the state given to it
  - It has to be pure so it has to return a new object
  - This is the third and final priciple of redux
  - This function is called the reducer function

5 - Writing a Counter Reducer with Tests
Example Syntax
  // This will be the reducer function for the counter example
  function counter(state, action){
    return state;
  }
  
  // Using the expect library for assertions
  expect(counter(0, { type: 'INCREMENT'})).toEqual(1);
  expect(counter(1, { type: 'INCREMENT'})).toEqual(2);
  expect(counter(2, { type: 'DECREMENT'})).toEqual(1);
  expect(counter(1, { type: 'DECREMENT'})).toEqual(0);
  
  console.log('Tests Passed');

6 - Store Methods: getState(), dispatch(), and subscribe()

7 - Implementing Store from Scratch

8 - React Counter Example

9 - Avoiding Array Mutations with concat(), slice(), and ...spread

10 - Avoiding Object Mutations with Object.assign() and ...spread

11 - Writing a Todo List Reducer (Adding a Todo)

12 - Writing a Todo List Reducer (Toggling a Todo)

13 - Reducer Composition with Arrays

14 - Reducer Composition with Objects

15 - Reducer Composition with combineReducers()

16 - Implementing combineReducers() from Scratch

17 - React Todo List Example (Adding a Todo)

18 - React Todo List Example (Toggling a Todo)

19 - React Todo List Example (Filtering Todos)

20 - Extracting Presentational Components (Todo, TodoList)

21 - Extracting Presentational Components (AddTodo, Footer, FilterLink)

22 - Extracting Container Components (FilterLink)

23 - Extracting Container Components (VisibleTodoList, AddTodo)

24 - Passing the Store Down Explicitly via Props

25 - Passing the Store Down Implicitly via Context

26 - Passing the Store Down with <Provider> from React Redux

27 - Generating Containers with connect() from React Redux (VisibleTodoList)

28 - Generating Containers with connect() from React Redux (AddTodo)

29 - Generating Containers with connect() from React Redux (FooterLink)

30 - Extracting Action Creators
