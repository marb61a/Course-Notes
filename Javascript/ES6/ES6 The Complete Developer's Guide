                    Notes from the ES6 Javascript: The Complete Developer's Guide
                    
                    

                    Section: 1 - Before We Get Started
1 - How to Take This Course
Quick instruction on how to take the course
Instructor has made playground available for coding
  - https://stephengrider.github.io/JSPlaygrounds/

Babel Repl
  - https://babeljs.io/repl/

JSBin
  - https://jsbin.com/?html,output

2 - ES6 vs ES2015
Discussion on the course
ECMAScript\ES 6 is a standard, Javascript is an implementation of that standard



                    Section: 2 - The 'forEach' Helper
1 - Array Helper Methods - The Easiest Way to Write Better Code
Some of the most valuable topics in the next couple of sections are Array helper methods
  - forEach, map, filter, find, every, some, reduce
Some of theses were implemeented in utility libraries
  - Lodash & Underscore
Initially added into ES 5.1 and codified in ES6
These helpers work similar to each other
Author highly recommends getting very familiar with array helper methods
You are supposed to avoid using for loops

2 - The forEach Helper
ES5 Example
var colors = ['red', 'blue', 'green'];
for (var i = 0; i < colors.length; i++){
  console.log(colors[i]);
}
Instructor recommends avoiding writing for loops

ES6 Syntax
colors.forEach(function(color){
  console.log(color);
});

forEach works the same as a for loop with a lot less code\logic on display

3 - forEach Continued
Task is to 
  - Create an array of numbers
  - Create a variable to hold the sum
  - Loop over the array, incrementing the sum
  - Print the sum
  
Syntax
  var number = [1, 2, 3, 4, 5];
  var sum = 0;

  numbers.forEach(function(number){ // function does not have to be anonymous
    sum += number;
  });
  sum;

Named function syntax
  var number = [1, 2, 3, 4, 5];
  var sum = 0;
  
  function adder(number){
    sum += number;  
  }  
  numbers.forEach(adder);
  sum;

4 - Why Use forEach?
forEach is the Swiss Army Knife of array helpers
Example using deleting an email as an example of a use case of forEach() 

5 - Exercise 1
Solution Syntax
  function handlePosts() {
    var posts = [
      { id: 23, title: 'Daily JS News' },
      { id: 52, title: 'Code Refactor City' },
      { id: 105, title: 'The Brightest Ruby' }
    ];
    
    posts.forEach(function(post){
        savePost(posts[i]);    
    });
    
    // for (var i = 0; i < posts.length; i++) {
    //   savePost(posts[i]);
    // }
}

6 - Exercise 2
Solution Syntax
  var images = [
    { height: 10, width: 30 },
    { height: 20, width: 90 },
    { height: 54, width: 32 }
  ];
  var areas = [];

  images.forEach(function(image){
      var area = image.height * image.width;
      areas.push(area);
  });



                    Section: 3 - The 'map' Helper
1 - The Map Helper
The most widely used helper
Syntax 
  var numbers = [1, 2, 3];
  var doubledNumbers = [];
  
  for( var i = 0; i < numbers.length; i++){
    doubledNumbers.push(numbers[i] * 2);
  }
  
  // This does the same as the for loop
  var doubled = numbers.map(function(number){
    // element is passed in to a new array and then returned 
    return number * 2;
  })
  
  doubled;
  doubledNumbers
The new empty array is created so as to avoid mutating or changing data, this is best practice in Javascript  

2 - Map Helper Continued
Example Syntax
  var cars = [
    {model : 'Buick', price : 'Cheap'},
    {model : 'Camaro', price : 'Expensive'}
  ];
  
  var prices = cars.map(function(car){
    return car.price;
  })
  
  prices;

3 - Where Map Is Used
Map is used a lot on frontend web development
A lot of webapps will be rendering lists of data eg Instagram, Reddit, Facebook etc

4 - Exercise 1
Solution Syntax
  var images = [
    { height: '34px', width: '39px' },
    { height: '54px', width: '19px' },
    { height: '83px', width: '75px' },
  ];

  var heights = images.map(function(image){
      return image.height;
  });

5 - Exercise 2
Solution Syntax
  var trips = [
    { distance: 34, time: 10 },
    { distance: 90, time: 50 },
    { distance: 59, time: 25 }
  ];

  var speeds = trips.map(function(trip){
      return trip.distance / trip.time;
  });

6 - Exercise 3
Solution Syntax
  function pluck(array, property) {
  // Remember using new arrays etc avoid mutating existing arrays etc
    var newArray = [];
    array.map(function(val){
        return newArray.push(val[property]);
    });
    
    return newArray;
  }



                    Section: 4 - The 'filter' Helper
1 - Selecting Needed Data with Filter
Filter can be tough but is very very useful
Example Syntax
  var products = [
    {
      name: 'cucumber', type: 'vegetable'
    },
    {
      name: 'banana', type: 'fruit'
    },
    {
      name: 'celery', type: 'vegetable'
    },
    {
      name: 'orange', type: 'fruit'
    }
  ];
  
  var filteredProducts = [];
  
  filteredProducts
  
  products.filter(function(product){
    return product.type === 'fruit';
  });

2 - More on Filtering
Example Syntax
  var products = [
    {
      name: 'cucumber', type: 'vegetable', quantity: 0, price: 1
    },
    {
      name: 'banana', type: 'fruit', quantity: 10, price: 15
    },
    {
      name: 'celery', type: 'vegetable', quantity: 30, price: 9
    },
    {
      name: 'orange', type: 'fruit', quantity: 3, price: 5
    }
  ];
  
  products.filter(function(product){
    return product.type === 'vegetable' && product.quantity > 0 && product.price< 10;
  })

3 - Choosing When to Filter
Using a sample schema for a blog app to demonstrate a use case for filter
  - For example return comments for a particular post
  - Example Syntax
  var post = {id: 4, title: 'New Post'};
  var comments = [
    {postId: 4, content: 'Great post'},
    {postId: 3, content: 'Bad post'},
    {postId: 4, content: 'It was an ok post'}
  ];
  
  function commentsForPost(post, comments){
    comments.filter(function(comment){
      comment.postId === post.id;
    });
  }
  
  commentsForPost(post, comments);

4 - Exercise 1
Solution Syntax
  var numbers = [15, 25, 35, 45, 55, 65, 75, 85, 95];

  var filteredNumbers = numbers.filter(function(number){
      return number > 50;
  });

5 - Exercise 2
Solution Syntax
  var users = [
   { id: 1, admin: true },  
   { id: 2, admin: false },
   { id: 3, admin: false },
   { id: 4, admin: false },
   { id: 5, admin: true },
  ];

  var filteredUsers = users.filter(function(user){
      return user.admin === true;
  });

6 - Exercise 3
Solution Syntax
  function reject(array, iteratorFunction) {
    return array.filter(function(element){
        return !iteratorFunction(element);
    });  
  }


                    Section: 5 - The 'find' Helper
1 - Querying For Records with Find
You would have used a for loop for this previously but will use find instead
Once the value wanted by find has been found it will immediately exit loop
  - This can be an issue if there is a second or third value as only the first is returned
Example Syntax
  var users = [
    {name: 'Jill'},
    {name: 'Alex'},
    {name: 'Bill'}
  ];

  users.find(function(user){
    return user.name === 'Alex';
  })

2 - Find Continued
Example Syntax
  function Car(model){
    this.model = model;
  }
  
  var cars = [
    new Car('Buick'),
    new Car('Camaro'),
    new Car('Focus')
  ];
  
  cars.find(function(car){
    return car.model === 'Focus';
  });
  
  // Second example
  var posts = [
    {id: 1, title: 'Old Post'},
    {id: 2, title: 'New Post'}
  ];
  var comment = {postId: 1, content: 'Great Post'};
  function postForComment(posts, comment){
    posts.find(function(post){
      return post.id === comment.postId;
    });
  }
  
  postForComment(posts, comment);

3 - Using Find to Search for Users

4 - Exercise 1
Solution Syntax
  var users = [
    { id: 1, admin: false },
    { id: 2, admin: false },
    { id: 3, admin: true }
  ];

  var admin = users.find((user) => {
      return user.admin === true;
  });

5 - Exercise 2
Solution Syntax
  var accounts = [
    { balance: -10 },
    { balance: 12 },
    { balance: 0 }
  ];

  var account = accounts.find(function(account){
      return account.balance === 12;
  });

6 - Exercise 3
Solution Syntax
  function findWhere(array, criteria) {
    return array.find((item) => {
       return item.height === criteria.height;
    });
  }


                    Section: 6 - The 'every' and 'some' Helper
1 - A Little Every and a Lot of Some

2 - More on Every and Some

3 - Every and Some Syntax

4 - Every and Some in Practice

5 - Exercise 1

6 - Exercise 2


                    Section: 7 - The 'reduce' Helper
1 - Condensing Lists with Reduce

2 - A Touch More of Reduce

3 - Ace Your Next Interview with Reduce

4 - Exercise 1

5 - Exercise 2

6 - Exercise 3



                    Section: 8 - Const/Let
1 - Variable Declarations with Const and Let

2 - What Const and Let Solve

3 - Exercise 1

4 - Exercise 2



                    Section: 9 - Template Strings
1 - Template Strings

2 - When to Reach for Template Strings

3 - Exercise 1

4 - Exercise 2 


                    Section: 10 - Arrow Functions
1 - Fat Arrow Functions

2 - Advanced Use of Arrow Functions

3 - When to Use Arrow Functions

4 - When to Use Arrow Functions Continued

5 - Exercise 1

6 - Exercise 2



                    Section: 11 - Enhanced Object Literals
1 - Enhanced Object Literals

2 - Wondering When to Use Enhanced Literals?

3 - Exercise 1

4 - Exercise 2

5 - Exercise 3

6 - Exercise 4



                    Section: 12 - Default Function Arguments
1 - Specifying Default Function Arguments

2 - Use Cases of Defaulting Arguments

3 - Exercise 1

4 - Exercise 2



                    Section: 13 - Rest and Spread Operator
1 - Capturing Arguments with Rest and Spread

2 - The Rest on Rest and Spread

3 - Look to Use Rest and Spread in This Case

4 - Exercise 1

5 - Exercise 2

6 - Exercise 3


                  Section: 14 - Destructuring
1 - Goldmine of ES6: Destructuring

2 - Destructuring Arguments Object

3 - Destructuring Arrays

4 - Destructuring Arrays and Objects *At the Same Time*

5 - So...When to Use Destructuring?

6 - More on When to Use Destructuring

7 - Exercise 1

8 - Exercise 2

9 - Exercise 3



                    Section: 15 - Classes
1 - Introduction to Classes

2 - Prototypal Inheritance

3 - Refactoring with Classes

4 - Extending Behavior of Classes

5 - When to Use Classes

6 - Exercise 1

7 - Exercise 2


                    Section: 16 - Generators
1 - One Quick Thing: For...Of Loops

2 - Introduction to Generators

3 - Generators With a Short Story

4 - Another Step in Our Generator Story

5 - The Big Reveal on ES6 Generators

6 - A Practical Use of ES6 Generators

7 - Delegation of Generators

8 - Delegation of Generators Continued

9 - Symbol.Iterator with Generators

10 - Complexities of Symbol.Iterator

11 - Generators with Recursion

12 - More on Generators and Recursion



                    Section: 17 - Promises and Fetch
1 - Code Execution in Javascript

2 - Terminology of Promises

3 - Creating Promises

4 - Then and Catch

5 - Async Code with Promises

6 - Ajax Requests with Fetch

7 - Shortcomings of Fetch

