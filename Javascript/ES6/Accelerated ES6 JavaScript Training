                    Accelerated ES6 JavaScript Training
                    Course Notes
*PDF Cheet sheets are available for download on each    
* Some of the material is already covered by the extensive notes in
  - https://github.com/marb61a/Course-Notes/blob/master/Javascript/ES6/ES6 The Complete Developer's Guide
                                        
                    
                    Section: 1 - Introduction
1 - Introduction

2 - JavaScript Languages - ES6 vs ES5

3 - Course Format

4 - JSBin & ES6
Pick "ES6 / Babel" from the Dropdown (initially it says "JavaScript") to prevent any warnings / errors from popping up.

5 - ES6 Compatibility with Browsers
ES6 isn't natively supported by all Browser yet, or at least not all Features are. It's important to know which Features may 
or may not be used. This compatibility chart should be helpful 
  - https://kangax.github.io/compat-table/es6/

6 - Using ES6 Today



                    Section: 2 - Syntax Changes & Additions
1 - Let & Block Scope
A quick introduction to the section
Let & Const new key words for ES6
Let Syntax -
  let name = 'Dave';
  console.log(name);
    - This will look the same as using var
    - let uses block scoping rather than var which if not defined within areas becomes global
    - The use case for `let` tends to be for loops or mathematical algorithms

2 - Constants with "const"
Const Syntax - 
  const name = 'Dave';
  console.log(name);
    - const means that the identifier cannot be reassigned
  Example Syntax - 
    const AGES = [15, 20, 25];
    console.log(AGES); -- will show the 3 values
    AGES.push(30);
    console.log(AGES); -- will show 4 values as AGES is a reference to an object and has not changed only the values it refers to have

3 - Hoisting in ES6
Full tutorial on hoisting available at
  - https://scotch.io/tutorials/understanding-hoisting-in-javascript
Javascript (old) Syntax for hoisting
   age = 27;
   console.log(age);
   var age; -- This works with old style Javascript but not ES6 such as let age it will cause an error
In ES6 you have to declare before making use of things eg variables etc
   
4 - (Fat) Arrow Functions
Functions used to be like this
  - function name() {
    console.log("Hello World");
  }
  name();
Fat Arrow function syntax looks like this
  var name() = () => {
    console.log("Hello World");  
  }
  name();
You can also remove the curly braces in the example has only 1 line of code

5 - (Fat) Arrow Functions and the "this" Keyword

6 - Functions and Default Parameters

7 - Object Literal Extensions

8 - The Rest Operator

9 - The Spread Operator

10 - The for-of Loop

11 - Template Literals

12 - Destructuring - Arrays

13 - Destructuring - Objects

14 - Destructuring - Summary

15 - Wrap Up
 
 
 
                    Section: 3 - Modules & Classes
1 - Introduction
Very brief introduction to the section

2 - Alternative Plunker Setup

3 - Modules Setup
Set up Plunker so that multiple files can be used, this may not work for everybody so there is a link provided for an alternative
setup

4 - Modules Basics

5 - Import & Export Syntax

6 - Modules - Strict Mode and Global Scope
There are two important Rules, which you need to understand if you're working with ES6 Modules
  - Modules are always in Strict Mode
  - Modules don't have a shared, global Scope. Instead each Module has its own Scope

7 - Class Basics

8 - Classes & Prototypes

9 - Inheritance

10 - Inheritance & Prototypes

11 - Static Methods

12 - Classes & Modules

13 - Getters & Setters

14 - Extending Built-in Objects

15 - Extendable Built-in Objects
Which built-in Objects may be extended there is an ES6 Compatibility Chart available scroll down to Subclassing
  - https://kangax.github.io/compat-table/es6/

38. Wrap Up
Brief wrap up of what was covered in the section




                    Section: 4 - Symbols
1 - Introduction
A quick introduction to the section
Symbols can be accounted to the metaprogramming in ES6, a tutorial is available here
  - https://www.keithcirkel.co.uk/metaprogramming-in-es6-symbols/
Symbols are basically a new primitive type and provide a unique identifier
You do not see the identifier only the symbol
With symbols you can add properties to objects
Symbols are not iterable

2 - Symbols Basics

3 - Shared Symbols

4 - Advantages of (unique) IDs / Symbols

5 - Well-Known Symbols



                    Section: 5 - Iterators & Generators
1 - Introduction

2 - Iterator Basics

3 - Iterators in Action

4 - Creating a Custom, Iterateable Object

5 - Generators Basics

6 - Generators in Action

7 - Controlling Iterators with throw and return




                    Section: 6 - Promises
1 - Introduction
Introduction to the section which will cover Promises
Promises are used by JQuery
Promises are helper that will work with Async tasks
Tutorial on Promises available at 
  - https://scotch.io/tutorials/javascript-promises-for-dummies
Promises help avoid what is called callback hell
- http://callbackhell.com

2 - Creating & Resolving Promises

3 - Rejecting Promises

4 - Chaining Promises

5 - Catching Errors

6 - Built-in Methods - All and Race

7 - Wrap Up



                    Section: 7 - Extensions of Built-in Objects
1 - Introduction

2 - The Object

3 - The Math Object

4 - Strings

5 - The Number Object

6 - Arrays (1/2)

7 - Arrays (2/2)

8 - Wrap Up



                    Section: 8 - Maps & Sets
1 - Introduction

2 - Maps - Creation & Adding Items

3 - Maps - Managing Items

5 - Maps - Looping through Maps

6 - Maps - Wrap Up

7 - The WeakMap

8 - Sets - Creation and Adding Items

9 - Sets - Managing Items

10 - Sets - Looping through Sets

11 - Sets - Wrap Up

12 - The WeakSet




                    Section: 9 - The Reflect API
1 - Introduction
The Reflect API is part of the metaprogramming section of JS
  - This means that is can be used to asses code during runtime
There are multiple built in methods in the Reflect API
  - Create objects, call functions etc
There are a couple of advantages to the reflects API
  - It bundles previously available features together
  - It also introduces some new features
  - Combines with the Proxy API very well

2 - Creating Objects with Reflect.construct()
More information on Reflect is available at
  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect
Example Syntax
  class Person{
    constructor(name){
      this.name = name;
    }
  }  
  function TopObj(){
    this.age = 27;
  }
  
  // You do not need to use the new keyword
  // The construct function takes up to 3 arguments, the first 2 are required
  // The third parameter overrides the prototype of person
  let person = Reflect.construct(Person, ['Joe'], TopObj)
  console.log(person);                                  // Shows that a new object has been created
  console.log(person instanceof Person);                // Returns true
  
  // After adding the third parameter
  console.log(person.__proto__ == Person.prototype);    // Returns false

3 - Calling Functions with Reflect.apply()

4 - Reflect and Prototypes

5 - Reflect.construct(), apply() and Prototypes Interaction

6 - Accessing Properties with Reflect

7 - Analyzing Objects with Reflect.ownKeys()

8 - Creating & Deleting Properties with Reflect

9 - Preventing Object Extensions & Wrap Up
 
 
 
                    Section: 10 - The Proxy API
1 - Basics

2 - Traps in Action

3 - Proxies and Reflect

4 - Using Proxies as Prototypes

5 - Proxies as Proxies

6 - Wrapping Functions

7 - Revocable Proxies

8 - Wrap Up



                    Section: 11 - Course Project
1 - Introduction

2 - Getting Started
Code.zip

3 - DOM Interaction / Selecting Elements

4 - Listening to User Events

5 - Fetching User Input

6 - Http & Promises

7 - Sending the Http Request

8 - The Weather Data Class together with Reflect & Proxies

9 - Fetching and Storing Weather Data

10 - Displaying Data & Wrap Up

12 - Project Code

13 - Using ES6 Today & Local Setup
ES6 currently isn't supported by all Browser. And nowhere close to all Features are implemented. But you can still use it today, 
if you're using a Transpiler (transpiles ES6 to ES5) and Module Loader (loads your ES6 Modules).
Popular Transpilers are Babel and Traceur
  - Babel -- https://babeljs.io/
  - Traceur -- https://github.com/google/traceur-compiler



                    Section: 12 - Course Wrap Up
1 - Wrap Up
Quick wrap up and outro lecture to end the course
