                    Building ArcGIS Cross-Platform Applications with JavaScript
                    Course Notes


                    Section 2 – Your First Custom Application
1 - The Course Overview 
A very brief introduction to the course instructor
  - Quick introduction to the syllabus of the course

2 - The Basics Of A Custom App 
The API from ArcGIS for Javascript developers is available at
  - https://developers.arcgis.com/javascript/
You can use ArcGIS via a CDN in script tags
  - This includes both the CSS and the Javascript
Example Syntax
  <!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="initial-scale=1, maximum-scale=1", user-scaleable="no">
      <title>
        Intro to ArcGIS API for Javascript
      </title>
      <style>
        html,
        body,
        #viewDiv {
          padding: 0;
          margin: 0;
          height: 100%;
          width: 100%;
        }
      </style>
      <link rel="stylesheet" href="https://js.arcgis.com/4.3/esri/css/main.css">
      <script src="https://js.arcgis.com/4.3/"></script>
      <script src="main.js"></script>
    </head>
    <body>
      <div id="viewDiv"></div>
    </body>
  </html>
  
  // main.js file
  require(["esri/Map", "esri/views/MapView"], function(Map, MapView){
    var map = new Map({
      // Will show a road like map
      basemap = "streets";
      // This will show a topographic map
      basemap = "topo";      
    });
    
    var view = new MapView({
      container: "viewDiv",
      map: map,
      zoom: 10,
      center: [-118, 34],
      rotation: 30                                  // Will rotate map by 30 degrees
      });
  })

3 - Using A WebMap 
A webmap can be thought of as a container of data, it will hold information such as
  - What layers are part of the map
  - How the map will be drawn
  - What the extent is eg city level

4 - Introduction To Widgets And UI 
Covers built in Widgets, these out of the box widgets include
  - Expand, Attribution, Layout, Home, Search, Compass and many more 
  - The track and locate widgets use the HTML5 Geolocation API
    - This API only works via HTTPS protocols
  - When clicking on the different widgets after adding them to an application they turn blue to indicate active
    - This is for accesibility purposes

5 - Introducing SceneView 



                    Section 2 – ArcGIS API for JavaScript Core
1 - Accessor 
Introduction to the section
There are a handful of JS core classes which will be covered in the section
Accessors will greatly simplify how the API will be used
  - Instead of listening for an event to happen you can simply watch for property changes
Example Syntax
  // The example is for when the center of the map changes
  // view is an accessor
  view.watch("center", (value) => {
    // This will log out to the console when the center property is changed
    console.log(value.x, value.y);
  });
You can update the center which will change the center without a method call
// This works for multiple properties as well as being available to many methods
  view.center = [-112, 36];
  
When using watch it creates a watch handler
Example Syntax
  let handle = view.watch("center", (value) =. {
    console.log(value);
  })

2 - Collections 

3 - Promises 

4 - Loadables 



                    Section 3 – Maps and Views
1 - Map and View Architecture 

2 - WebMaps 

3 - WebScenes 

4 - Layers and LayerViews 

5 - Portal API 



                    Section 4 – Widgets and Accessor
1 - Widgets 

2 - Popups 

3 - Extending Accessor 

4 - TypeScript Integration 



                    Section 5 – Custom Widget Development
1 - Decorators 

2 - Custom Widget 

3 - Custom ViewModel 

