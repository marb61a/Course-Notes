                    TypeScript Fundamentals - Course Notes



                    Section 1 - Getting Started with TypeScript
1 - Course Introduction
A basic intro to the course & authors

2 - Introduction
Introduction to the material covered in the module

3 - Why use TypeScript? 
Javascript can feel messy and you will need to use patterns to keep it maintainable
Maintainable code should be the goal
The instructor recommends Typescript on larger projects as he feels it will be more maintainable
Javascript should be encapsulated properly
Javascript has a dynamic type system which has good and bad points
  Good
    Variables can hold any object
    Types determined on the fly
    Implicit type coercion
  Bad
    Difficult to ensure proper types are passed without tests
    Not all developers use ===
    Enterprise apps can have thousands of lines of code to maintain
 Migrating from server-side applications to client-side applications can be challenging
 TypeScript is a superset of Javascript

4 - TypeScript Features
Typescript has several features that will appeal to JS developers
The typescript site is at
  - https://www.typescriptlang.org
Typesctipr has a ts file extension
Typescript is not a completely separate language ad you can paste JS in 
Typescript is very flexible
  - It works on any browser
  - It will also work on any host
  - It is Open Source
  - Works on any Operating System
  - It has excellent tools support
Some of the key features of Typescript are
  - It supports standard JS code
  - It provides static typing
  - There is encapsulation through classes and modules
  - There is support for functions, properties and constructors
  - There is also support for interfaces
  - There is support for arrow functions
  - Depending on IDE there is intellisense available
Typescript Compiler
  - TSC typescript compiler which you run you Typescript code through
  - Visual Studio automatically generates a js file from the ts file when you save

5 - TypeScript Syntax, Keywords, and Code Hierarchy 
Typescript should be fairly easy to pick up syntax wise
Because it is a superset of Javascript the same rules will still apply
  - Brackets still define code blocks
  - Semi-colons still end expressions
  - JS Keywords -- If, for etc
Typscript keywords include
  - class
  - constructor
  - exports/imports
  - implements
  - extends
  - interface
  - module/namespace
  - ... (the rest operator syntax)
  - => arrow functions
  - <Typename> used to cast and convert types
  - : sperator between variable name and type
Code Hierarchy
  - Very defined hierarchy
  - From the top Modules  -> Classes -> fields such as functions, constructors etc
  - Classes will also implement interfaces

6 - Tooling and Framework Options
Typescript excels in its support for tooling and frameworks
NodeJS is fully supported by Typescript
Different Editors supported include
  - EMacs
  - Sublime
  - Vi
  - Visual Studio
  - Typescript Playground
    - https://www.typescriptlang.org/play/

7 - Tooling and Framework Options - TypeScript Playground 

8 - Tooling and Framework Options - Visual Studio

9 - Tooling and Framework Options - Web Essentials

10 - Tooling and Framework Options - Sublime Text

11 - Tooling and Framework Options - TypeScript Compiler 

12 - Tooling and Framework Options - NodeJS 
Demo using Typescript within NodeJS
Install Typescript using the node package manager
  - npm install -g typescript
  - tsc file.ts     // For compiling Typescript files
Example also uses Visual Studio with Node

13 - Hello World Example 
An  intro to the example that will follow in the next chapter

14 - Hello World Example - Creating a Class
Again using the Visual Studio 2012 for the example
  - Each editor will have a different setup method
Example

15 - Summary 
Summary of the material covered in the course thus far



                    Section 2 - Typing, Variables, and Functions
1 - Overview
Overview of the material that will be covered in this section of the course

2 - Grammar, Declarations, and Annotations
Example Syntax
  // The same as is Javascript
  // It uses type inference to assume that this is a number
  var num = 2;
  // Again it assumes that num is a type of number
  var num4 = num3 + 100;
  
  // Type annotation to explicity specify type
  // Number is built in to Typescript
  var num: number = 2;
  
  // You can use annotation to set the type without initialising the variable
  var num: number;
  
  // This could be any type
  // In Typescript there is a type called any which is the base for all types
  var any1;
  
  // This will work and concatenate the number and the string and convert it to be a string
  var str1 = num1 + 'some string';
  
  // This will not work
  var nothappy : number = num1 + 'some string'; 
  
3 - Type Inference
Example Syntax (Using Visual Studio)
  // Type annotation is not valid Javascript
  var lastName: string 'Papa';
  // This becomes in Javascript
  var lastName = 'Papa';

4 - Grammar 
Statically typed language makes it easier to find problems before the code is ran
f12 button opens the debugging console in most browsers
Example Syntax
  // Using a namespace rather than a module
  namespace demo_02_02{
    // Basics properties
    timerId: number = -1,
    interval: number = 25,
    ms: number = 0,
    seconds: number = 0,
    minutes: number = 0,
    
    // Starts the timer with an interval
    startTimer = function(){
      if(timerId === -1){
        timerId = window.setInterval('demo_02_02.turnTimerOn()', interval);
      }
    }
    
    // Updates the screen with the data from the timer
    displayTimer = function(){
      document.getElementById('milliseconds').innerHTML = ms.toString();
      document.getElementById('seconds').innerHTML = seconds.toString();
      document.getElementById('minutes').innerHTML = minutes.toString();
    }
    
    // Pauses the timer
    pauseTimer = function(){
      window.clearInterval(timerId);
      timerId = -1;
    }
    
    // Resets the timer back to 0
    clearTimer = function(){
      pauseTimer();
      ms = 0;
      seconds = 0;
      minutes = 0;
      displayTimer();
    }
    
    // Init function
    init: (s: string, p: string, c: string) => void
      = function(startButton, pauseButton, clearButton){
        document.getElementById(startButton).addEventListener("click", startTimer, false);
        document.getElementById(pauseButton).addEventListener("click", pauseTimer, false);
        document.getElementById(clearButton).addEventListener("click", clearTimer, false);
        displayTimer();
      }
      
    // Starts the counting
    export function turnTimerOn(){
      ms += interval;
      if(ms >= 1000){
        ms = 0;
        seconds += 1;
      }
      if(seconds >= 60){
        ms = 0;
        seconds = 0;
        minutes += 1;
      }
      displayTimer();
    }
    
    window.onload = function(){
      init('startButton', 'pauseButton', 'clearButton');
    }
  }

5 - Static and Dynamic Typing

6 - Compile Time or Run Time

7 - Ambient Declarations and Type Definition Files

8 - The Any Type and Primatives

9 - Applying Types

10 - Objects

11 - Functions 

12 - Arrow Functions and Debugging 

13 - Functions and Interfaces 

14 - Static Typing Recap 



                    Section 3 - Classes and Interfaces
1 - Introduction

2 - Defining Classes 

3 - Demo: Defining Classes

4 - Demo: Property Limitations

5 - Casting and Type Definition Files

6 - Demo: Casting and Type Definition Files

7 - Extending Types

8 - Demo: Extending Types

9 - Using Interfaces

10 - Demo: Using Interfaces

11 - Extending an Interface

12 - Demo: Extending an Interface 

13 - Summary



                    Section 4 - Modules
1 - Overview

2 - Identifying a Module

3 - Creating an Internal Module 

4 - Internal Module Accessibility and IIFE

5 - Named Modules

6 - Extending Modules and Importing Shortcuts

7 - Organizing Internal Modules 

8 - Separating Internal Modules

9 - External Modules and Dependency Resolution

10 - Module Dependencies 

11 - Importing External Modules Using AMD 

12 - Importing 3rd Party Libraries Using AMD 

13 - Modules Recap 
