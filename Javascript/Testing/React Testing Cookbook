                    React Testing Cookbook
                    Course Notes
                    
                    
1 - Setting Up Dependencies
The following are installed
  - Mocha for running tests
    - This is used for the example but there are many other test tools
  - Expect for assertions
  - React-addons-test-utils

2 - Running Tests
To setup so that you can run tests in the project you will have to edit the projects package.json
Example Syntax
  // Package.json file
  // Again double braces are needed
  // Babel is used to transpile React Code\ES6 
    "scripts": {
    // Telling where to look for the files needed
      "test": "mocha './src/**/*.spec.js' --compilers js:babel-core/register"
    }

  // Example spec file
  import expect from 'expect';
  
  describe('empty test', () => {
    it('should work', () => {
      expect(true).toEqual(true);
    })
  })
  
3 - Utility Modules
This uses an example app which allows you to add your favourite quotes to a collection
  - The tests will be to ensure that each quote added will have a unique id
Example Syntax
  // CreateId function inside the addQuote component, this is then removed in to a separate component and exported
  // This will allow the module to be tested separately, it will have to be imported for use in the addQuote component
  // The id created consists of a unique number and the start of the quote combined in a string
  export default function(uniqueNumber, description){
    const shortKebabDescription = description;
      .toLowerCase()
      .split(' ')
      .slice(0, 2)
      .join('-');
    return `${uniqueNumber}-${shortKebabDescription}`;  
  }
  
  // Test File 
  import expect from 'expect';
  // import the newly created separate createId module
  import createId from './createId';
  
  describe('createId', () => {
    it('should convert a description into a unique id', () = {
      const actual = createId(123, 'Cool example description');
      const expected = '123-cool-example';
      expect(actual).toEqual(expected);
    })
  })
Best practice in React is to move unrelated functions from components to separate modules

4 - Intro To Shallow Rendering
Example Syntax
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  
  const CoolComponent = ({greeting}) => (
    <div>
      <h1>Greeting</h1>
      <div>{greeting}</div>
    </div>
  )
  
  // Test & Describe block for shallow render demo
  describe('CoolComponent', () => {
    it('should', () => {
      // We need a place to store the shallow renderer
      // A shallow renderer only renders 1 layer deep so you don't need a DOM
      // You just need the oobject structure you can assert things about
      const renderer = TestUtils.createRenderer();
      // This works the same way that ReactDOM works
      renderer.render(<CoolComponent greeting='Hello World' />);
      const output = renderer.getRenderOutput();
      console.log(output);
    })
  });

Shallow rendering makes writing unittests easier as you only worry about the componentn not the environment

5 - JSX Error Diffs
Example Syntax
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  import expectJSX from 'expect-jsx';
  expect.extend(expectJSX);
  
  const CoolComponent = ({greeting}) => (
    <div>
      <h1>Greeting</h1>
      <div>{greeting}</div>
    </div>
  )
  
  describe('CoolComponent', () => {
    it('should render the greeting', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<CoolComponent greeting='Hello World' />);
      const actual = renderer.getRenderOutput();
      const expected = <div>Hello World</div>;
      expect(actual).toIncludeJSX(expected);
    })
  })
In order to make test error diffs there are some libraries available
  - These will extend the assertion library to provide support for JSX
  - As we are using expect then -- npm install expect-jsx
  - ExpectJSX available from -- https://github.com/algolia/expect-jsx

6 - Element Types With Shallow Rendering
The example will use a sample app that allows for quotes and authors to be added to a list
  - You are able to like and unlike the quotes
Example Syntax
  // The test wil be written to ensure that the component that toggles the like count
  // is a link, this will assert the element type of your components
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  import LikeCounter from './LikeCounter';
  
  describe('LikeCounter', () => {
    it('should be a link', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<LikeCounter count={5} />);
      const renderer = TestUtils.createRenderer();
      // Because we are testing for a link or anchor tag we can use .type 
      const actual = renderer.getRenderOutput().type;
      const expected = 'a';
      expect(actual).toEqual(expected);
    });
  });

7 - Classname With Shallow Rendering
The same sample app as previously will be used but this time we will be looking at the icons on the screen.
  - The tests will be written to ensure that the icons are rendering corrrectly
Example Syntax
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  import Icon from './Icon';
  
  describe('Icon', () => {
    it('should render the icon', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<Icon name='Facebook'/>);
      // The includes method returns a boolean 
      const actual = renderer.getRenderOutput().props.className.includes('facebook');
      expect(actual).toEqual(expected);
    });
  });

8 - Conditional Classname With Shallow Rendering
Testing to ensure that className is correct based on likes
Example Syntax
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  import LikeCounter from './LikeCounter';
  
  describe('LikeCounter', () => {
    it('should show the like count as active', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<LikeCounter count={5} isActive={true} />);
      const actual = renderer.getRenderOutput().props.className.includes('LikeCounter--active');
      const expected = true;
      expect(actual).toEqual(expected);
    });
    
    it('should show the like count as inactive', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<LikeCounter count={5} isActive={false} />);
      const actual = renderer.getRenderOutput().props.className.includes('LikeCounter--active');
      const expected = false;
      expect(actual).toEqual(expected);
    });
  });

9 - Reusing Test Boilerplate
Example Syntax
  // The previous example has a lot of code duplication which can be cleaned up
  // The main principle is to pull out duplicated code so thet it can be refactored into 
  // reusable components
  describe("isActive", () => {
    // A factory function where the duplicate code can be reused
    function renderLikeCounter(isActive){
      const renderer = TestUtils.createRenderer();
      renderer.render(<LikeCounter count={5} isActive={isActive} />);
      return renderer.getRenderOutput().props.className.includes('LikeCounter--active');
    }
    
    it('should show the like count as active', () => {
      expect(renderLikeCounter(true)).toEqual(true);
    })
    
    it('should show the like count as inactive', () => {
      expect(renderLikeCounter(false)).toEqual(false);
    })
  })

10 - Children With Shallow Rendering
Example Syntax
  // Example will be based on an app which allow adding favourite quotes to a collection and like/unlike them
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  // These libraries are to help when testing elements of the object structure rather than the whole structure 
  import expectJSX from 'expect-jsx';
  expect.extend(expectJSX);
  import LikeCounter from './LikeCounter';
  
  describe('LikeCounter', () => {
    it('should render like counts', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<LikeCounter count={5} />);
      const actual = renderer.getRenderOutput();
      const expected = '5 likes';
      expect(actual).toIncludeJSX(expected);
    })
  })

11 - The Redux Store Multiple Actions

12 - The Redux Store Initial State

13 - Redux Reducers
