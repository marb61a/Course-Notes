                    Test-Driven Development for React/Redux in an Isomorphic Application
                    Course Notes


                    Section 1 - Introduction 
1 - Introduction
An introduction to the course instructor
The landscape in software developement changes very rapidly
An overview of the course syllabus
  - The course itself will make use of a real example search application
  - There will be demos and code samples
  - There will also be hands on testing and development


                    Section 2 - Isomorphic Applications 
1 - Isomorphic applications overview 
Isomorphic Applications are Javascript applications that run on both server and client side
  - They are sometimes referred to as universal applications
As the above definition is not really all that help there is examples used to illustrate differences from the past
  - Full Page refresh applications
    - Due to limited browser functionality these applications have 
      - Thin Clients handling DOM manipulation, form validation, Animations etc
        - This meant limited code on the client side
      - Rich Servers using languages like Ruby, Java, PHP etc handling routing, views, app logic etc
  - Rich Internet applications with AJAX round trips
    - Browsers had gotten more performant and dynamic
    - Rich Clients handling DOM manipulation, form validation, animations as well as routing, views, logic etc
    - Thin Servers handling initial bootstrap and providing API
  - Single Page Isomorphic applications
    - Thin Clients handling DOM manipulation, form validation, Animations etc
    - Shared Code such as Routing, Views & Logic, this cna be either client or server side depending on the context
    - Servers which handle API requests etc

2 - Benefits Of Isomorphic Applications

3 - Challenges Of Isomorphic Applications 

4 - When To Build Isomorphic Applications 
There are certain use cases for developing Isomorphic Applications
  - There is a mature and pragmatic engineering team in place
  - Performance is a key feature or differentiator
  - Need to have content availabilty without authentication or authorisation
  - The app must be SEO friendly



                    Section 3 - React/Redux Overview 
1 - Paradigm Shift In Front-end Development 
When React came in it was a Paradigm changin event
  - This is the opinion of the course instructor

2 - Design Motivation 

3 - Design Principles 

4 - Uni-directional Flow 



                    Section 3 - TDD with React/Redux - Simple Components 
1 - TDD Overview 

2 - Testing Pyramid: unit tests, mock integrations, contract tests, and E2E tests 

3 - Testing frameworks: Mocha, Mochawesome, Enzyme, Sinon, Istanbul 

4 - Testing simple components: display logic and behavior 

5 - Testing simple components: refactoring 



                    Section 4 - TDD with React/Redux - Async Operations 
1 - Async operations with Redux Sagas 

2 - Testing frameworks: Nock, Mountebank 

3 - Testing async operations with component integration 

4 - Testing failure modes
