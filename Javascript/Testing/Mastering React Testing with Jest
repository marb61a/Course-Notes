                    Mastering React Testing with Jest
                    Course Notes


                    Section 1 - Course Overview
1 - Course Overview
A very brief introduction to the course at a high level from the instructor
  - The course aims to give you knowledge to use Jest at a high level in real world situations


                    Section 2 - Introduction to Testing React Applications with Jest
1 - About the Author
A brief introduction to the author

2 - Before Beginning
You will need some things before beginning the course
  - You will need some knowledge of how to build apps with React
  - You will need to understand Stores, Dispatchers, Components and Helpers
  - You should ideally be comfortable working in a NodeJS environment using Express and Gulp

3 - What Is Jest? (Part 1)
Uses a Shakespeare quote from King Lear about Jest revealing truth
  - Using Jest to test and mock applications will reveal truths about the application being developed
Jest 
  - https://facebook.github.io/jest/
  - Is a Jasmine based testing framework
    - Jasmine is the most popular(according to the instructor) testing framework
  - It is designed to test React applications and more

4 - What Is Jest? (Part 2)

5 - Technologies Covered in this Course / What You'll Need

6 - Understanding Automatic Mocking

7 - What Is Mocking?
Mocking is the process of replacing a module with a generic and mostly empty object
  - This object is called a mock
  - The function of a mock is usually defined within the test
  - Stubs are not mocks, they are similar but mocks have more features
Many frameworks support mocks
  - Most testing frameworks require that you manually define mocks
  - Some do not support mocks at all
  - Jest however mocks all the modules in an application by default
  
8 - Advantages of Mocking
There are several advantages to mocking
  - It isolates your code from its dependencies
  - Write tests with no knowledge of dependencies
  - There is no need to change tests after a dependency change
  - It reduces the number of false positives in tests
  - Tests are less fragile
  - It is easier for developers to understand
  


                    Section 3 - An In-depth Look at the Jest API
1 - Understanding the Jest API
A basic overview of the Jest API
  - Most Jest API methods relate to automatic mocking
    - It has added this ability to the Jasmine framework
  - The course will talk mostly about mocking
  - dontMock is the most common method and important method
  - Because it is based on Jasmine most tests still the Jasmine interface
  - Generally Jest API allows users to create, modify and analyze mocks

2 - Disabling Mocking for a Single Module (Part 1: Modules)
Jest will automatically mock all modules
  - Disabling mocking for a single module is probably going to be needed
  - When a test pulls in a dependency Jest will automatically convert that to a mock
  - This means that functionality will not be available but that may be a good thing
  - You only want test functionality of the module being tested
  - If you call don't mock on the file it will replace with the actual module
  - When file require many other files it can introduce chaos into tests

3 - Disabling Mocking for a Single Module (Part 2: Libraries)
What happens when you have libraries eg JQuery in tests
  - Libraries are not usually mocked
  - Most libraries already have a large amount of tests so you can usually assume they will work properly
  - You may want to replace asynchronous functionality to avoid slowdown in tests
  - Libraries for which mocking is disabled is usually added in the package.json file
  - Try to avoid using dontMock with libraries as it does not always work with libraries

4 - Toggling Automatic Mocking
Jest mocks eveything automatically which is not something you may want always
To disable auto mocking
  - jest.autoMockOff()
  - This is the same as calling dontMock on every dependency
  - This can make sense for implementation details modules
To enable auto mocking
  - ject.autoMockOn()

5 - Specifying Manual Mocks

6 - Defining a Preprocessor

7 - Defining Tests

8 - Mock Functions

9 - Capabilities of Mocks



                    Section 4 - Scaffolding the App
1 - Introduction / App Overview
Introduction to the example app which will be used in the course
  - It is a shopping cart app

2 - A Look at the Finished Module
A quick demonstration of the complete shopping cart app

3 - Inside the App / Before We Begin

4 - Implementing the Scaffold

5 - Adding React Components

6 - Adding React Helpers

7 - Adding React Stores

8 - Implementing an Express Server



                    Section 5 - Implementing Basic Tests for a React Application with Jest
1 - Introduction 
Introduction to the chapter and what to expect in it

2 - Scaffold Folders and Package

3 - Scaffold Tests Explanation

4 - Scaffold Tests (Part 2: Demo)

5 - Disable Mocking (Part 1: Explanation)

6 - Disable Mocking Demo (Part 2: Demo)

7 - Unmocked Module Path Patterns (Part 1: Explanation)

8 - Unmocked Module Path Patterns (Part 2: Demo)

9 - Test Utils (Part 1: Explanation)

10 - Test Utils (Part 2: Demo)

11 - Chapter Overview
A brief overview of what the chapter covered



                    Section 6 - Advanced React Testing with Jest
1 - Leveraging Advanced Mock Functionality - Explanation

Leveraging Advanced Mock Functionality - Demo Part I
3m 29s
Leveraging Advanced Mock Functionality - Demo Part II
4m 30s
Mock Implementations - Explanation
1m 29s
Mock Implementations - Demo
2m
Asynchronous Testing - Explanation
1m 42s
0507 Asynchronous Testing - Demo
3m 49s
Sending HTTP Requests - Explanation
2m 23s
Sending HTTP Requests - Demo
2m 58s
HTTP Responses Explanation
1m 42s
HTTP Responses - Demo
3m 41s
Chapter Overview
3m 41s
7
Conclusion to React Testing with Jest
6m 48s
Reviewing Tests and the App
1m 56s
More Uses for Tests and Jest
2m 3s
Jest Review
0m 54s
Closing Thoughts Continued Learning
1m 53s
