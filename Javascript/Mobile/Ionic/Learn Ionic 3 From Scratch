                      Learn Ionic 3 From Scratch
                      Course Notes


                      Section 1 – Introduction
1 - Introduction
Introduction to the instructor and course

2 - Course Overview
A run through of the syllabus of the course

3 - Prerequisites
The course itself has some prerequisites
  - Typescript and Angular knowledge is needed

4 - Q&A
How to use the question and answer section on Udemy

5 - Environment Setup - Windows
How to setup the needed tools on the Windows OS

6 - Environment Setup - Mac
How to setup the needed tools on the Mac OS

7 - Ionic and Cordova Setup

8 - Editors
A list of some the different editors that can be used during the course

9 - VSCode Plugins

10 - Recap
A very quick run through of the material covered in the section


                    Section 2 – Angular 4 Primer
There are extensive Angular based tutorials at the following address
  - https://github.com/marb61a/Course-Notes/tree/master/Javascript/Angular
  
1 - Angular Anatomy
2 - Introduction to the Angular CLI
3 - Creating our First Angular Application
4 - Angular Folder Structure and Testing
5 - NgModule
6 - Components
7 - CLI Basics
8 - Data Binding
9 - Events
10 - NgModel
11 - *ngIf Directive
12 - *ngIf Else
13 - *ngFor Directive
14 - Component Communication
15 - Pipes
16 - Recap


                    Section 3 – Ionic 3 CLI
1 - Installing the Ionic 3 CLI
If you have the ionic cli already installed and want to check theck the version 
  - ionic info
To install version 3 of the cli
  - npm install ionic@latest -g

2 - Creating a New Project with the Ionic 3 CLI
To generate a new project
  - ionic start project-name
  - There are a variety of blank templates available
    - The example uses sidemenu
  - This make take a couple of minutes to install
  - It also installs cli plugins such as the angular-cli

3 - Listing Project Templates

4 - Running our Project in the Browser and on a Device
There are a variety of ways to run our project
To run the project in the browser
  - ionic serve
To run on a particular platform
  - ionic cordova run android                               // Will run on android but need the sdk installed
  - ionic cordova platform add android                      // You may need to add the appropriate platform before running

5 - Using Live Reload on a Device
You are able to add the livereload feature when using a real device
  - This gives the capabilities that we get when running ionic serve
To use live reload
  - ionic cordova run ionic -l

6 - Generating Project Components with the Ionic CLI
When doing Ionic based project there maybe a need for a quickly generating components
  - These can include pages, providers etc
For this purpose the ionic generate command can be used
  - When used with no options there is a list of possible options generated
  - These include component, page, directive, pipe

7 - Getting Environment Information with Ionic Info

8 - Accessing the Ionic Documentation

9 - Creating an Ionic.io Account

10 - Authenticating to Ionic.io Within the CLI

11 - Creating an Application on the Ionic.io Platform

12 - Using Ionic View to Run Your Application on a Device

13 - Generating Splash Screen and Icon With the CLI



                    Section 4 – Getting Started with Ionic 3
1 - Installing Dependencies
You need to ensure that Node.js is installed
  - The instructor uses Homebrew package manager on mac but this is not available on other platforms
The next item to be installed is Ionic, this can be thought of as the UI layer of the application
Cordova is what builds the actual application, it build to each platform package eg APK for andorid
  - It also makes available things like Camera etc
To install both globally -- npm instal ionic cordova -g

2 - Creating Our First Project
Again generating a new project is very simple
  - ionic start project_name

3 - Run Your Application in a Browser

4 - Folder Structure

5 - Config.XML and Application Name

6 - Package.json

7 - Adding Content to Our Application

8 - Recap
A brief recap of the material covered in the section



                    Section 5 – Navigation
1 - Creating a New Page
To generate a new page using the ionic cli
  - ionic g page page-name
There maybe a bug with auto generated pages
  - In the generated pages imports should be from IonicPageModule not IonicModule

2 - Navigating to Another Page

3 - Lazy Loading Navigation

4 - Lazy Loading Components - Feature/Shared Modules

5 - Navigation Parameters

6 - Lifecycle Hooks

7 - Back Navigation

8 - Root Navigation and Stack Overview



                    Section 6 – Theming
1 - Introduction - Colour Selection

2 - Custom Colours

3 - Text Alignment

4 - Text Transformation

5 - Padding

6 - Margin

7 - Changing Colour Contrast



                    Section 7 – Project: Greeting Application
1 - Introduction
The project in this section is a simple greeting project
  - The user will type in their name
  - Click the greeting button
  - A toast greeting the user will appear at the end of the screen

2 - Project Initiation

3 - Run the Project in the Browser

4 - Creating the HomePage Template

5 - Capturing the Greeting Name

6 - Displaying a Greeting Toast

7 - Recap
A brief recap of the material covered in the section

8 - Source Code
The source code for the application in the section



                    Section 8 – Project: GitHub Profile Searcher
The project source is available at
  - https://github.com/marb61a/ionic-github-findr

1 - Creating the 'GitHub Profile Searcher' Project
Using the GitHub API to search for users and their associated repositories
  // Depending on the cli version it may be necessary to use 
  - ionic start GitHub blank --v2

2 - Creating the Profile Search Page
Using ionic-lab to check what the app looks like on different OS
  - This is still within the browser
  - Remove the pages folder and generate a new page
  - ionic generate page ProfileSearchPage
    - This will generate a folder with 4 pages, css, scss, html and .ts each the same name
  - Next is changing the ProfileSearchPage to being the root
    - We have to remove the home age import as it has been deleted from the application
    - In the app.component.ts file remoove the home page import
    - Change rootPage:type to string from any & change to 'ProfileSearchPage'
    - The reason for using string is that it is lazy loaded namely only loaded when the user asks
  - The home import will also need to be removed from the app.module.ts file
    - It will also need to be removed from the declarations array & entry components array
  - Importing the MyApp component is necessary as it is the root component

3 - Profile Search View and Model
profile-search-page.html is the view for the profile search page
At the top of the page is the ion-header element
  - Inside this is the ion-navbar element
  - Change the title to profile search
  - Add colour to the navbar by adding inline stylt to the element -- color="dark"
To show items below the navbar they must be in the ion-content section
  - Add an item using ion-item
  - Then a label using ion-label
    - The floating attribute is added to ensure that the label floats above the input box
  - Then an input box is added using ion-input
  - The username value will be used as a placeholder in the input box until it is clicked on
  - The default input type is text but it is better to explicitly set
  - The ngModel attribute is set to capture the text input into the textbox
  - The attribute is set as being equal to the username variable
    - The variable is set in the profile-search-page.ts file
    - It is of type string and can be either set or not
  - To ensure that input works correctly we can bind to username below the item
    - {{username}}
    - By changing the name is the username field the string is changed accordingly
    - This item can be removed is desired
  - Next up is a Floating Action Button (Floating Action Button)
    - Create a fab button using ion-fab
    - It can be placed at a certain places on the screen, in this case bottom-right
    - A button is the created and the ion-fab attribute added to the button
    - Inside the button an ion-icon is added, this icons come with ionic
    - There are many icons but this is named search

4 - Navigation and Parameters
Using the cli generate a new page
  - ionic generate page ProfileResultsSearchPage
Then add a click event to the fab button
  - (click)="getUserInformation()"
Next is delete the ionViewDidLoad() method in the profile-search.ts file
  - This will be replaced by the getUserInformation() method
  - This will have a void return type as it returns nothing
  - this.navCtrl.push() wil push a new page onto the navigation stack
  - In this case it will be the ProfileSearchResultsPage 
  - Change the navCtrl and navParams from public to private
  - Change the search results page to say just Results & add a color dark to the navbar
  - Add a parameter to the navCtrl.push() which will be an object
  - This will take a username: this.username
  - Remove the previously hardcoded username string
  - To capture the username on the results page change the didLoad to will load on the results page
    - this.username = this.navParams.get('username');
  - To ensure information is passed use a console.log for this.username

5 - Mocking User Data
Add a models directory inside the src directory 
  - Then in the models directory add a user.interface.ts file
  - Export a user interface
  - This interface will contain a number of fields and associated types
    - name, company adddress etc
    - string, number etc
  - Add a mocks folder and a user.mocks.ts file inside it
    - import form the user interface just created
    - Then make an array of type user
    - Add some sample data that corresponds with the model fields
    - Export the const user list
    - Const field in ES6 are usually in uppercase
    - This means that the user list can be imported into other components

6 - Search Results Implementation
Next up is adding a service which will call the test data and retrieve it within the page
  - In this case the ionic cli can be used to generate a provider
  - ionic generate provider GithubService
  - Rename the file to conform to the naming style guide
    - this changes from github-service to github.service
  - Import the user interface into the provider generated
  - Also import the USER_LIST from the mocks file
  - There are a couple of imports that are needed from the rxjs library
    - Observable
      - Observables allow for subscribing to a data stream
      - They are similar to Promises but a Promise might only fire once
      - Observables all for subscribing to a stream no matter how many values pass down the stream
    - Of
      - This allows for the creation of an observable of values
      - This means than an observable of the USER_LIST array can be created
  - Add a function called mockGetUserInformation
    - This takes an observable of <User>
    - It returns an observable.of(USER_LIST.filter())
    - The function paramater is a username of type string
  - The service must be imported into the app.module.ts file
  - Ensure that it is added to the list of providers
  - Import the service into the search results page
  - To use the service on the search results page it must be injected into the constructor
  - Add a getUserInformation function which again has a void return type
  - This uses the mockGetUserInformation function which takes a username and subscribes to the observable it creates
  - After logging data to the console for testing purpose then getUserInformation is passed to ionViewWillLoad
  - If http error is encountered its because the http import needs to commented out temporarily

7 - Displaying Search Results on Screen

8 - Mocking Repository Data

9 - Displaying Repositories in Search Results

10 - Mid Section Recap

11 - Retrieving User Data

12 - Retrieving User Repositories

13 - @IonicPage() Decorator and Deep Linking

14 - Final Thoughts

15 - Source Code
The source code for the application in the section



                    Section 9 – Project 2: Shopping List - Ionic & Firebase CRUD
1 - Project Introduction

2 - Creating the Project

3 - Installing Dependencies

4 - Creating a Firebase Account

5 - Firebase Credentials and Project Setup

6 - Creating the Shopping List Page

7 - Creating the Add Shopping Page & Styling

8 - Navigating the Add Shopping Page

9 - Add Shopping Page View Scaffold

10 - Template Forms

11 - Adding Shopping to Firebase

12 - Displaying Shopping List Data

13 - Removing Shopping Items

14 - Creating an EditShoppingItemPage and Passing NavParams

15 - Edit Shopping Item

16 - Recap
A brief recap of the material covered in the section

17 - Source Code
The source code for the application in the section



                    Section 10 – UX Driven Design: Designing the 'Beep' Application
1 - Preface

2 - Scaffolding our Application Design

3 - Splash Screen

4 - Login and Navigation

5 - Register

6 - Inbox

7 - Channel List

8 - Profile

9 - Selecting a User

10 - Chatroom

11 - One on One Chat

12 - Edit Profile

13 - Reviewing Requirements

14 - Searching for Users

15 - Recap
The source code for the application in the section
  - 'Beep' Design Prototype



                    Section 11 - Work in Progress: Beep: Create a Chat Application with Ionic 3 and Firebase
1 - Preface

2 - Creating our 'Beep' Application

3 - Creating the 'Login' Page

4 - Login Form and Styling

5 - Register

6 - Theming

7 - Page Creation and Navigation

8 - Tabs

9 - Tab Icons

10 - Lazy Loading

11 - Theming the Inbox Page

12 - Mocking Data

13 - Showing Messages On Screen

14 - Adding Components and Refactoring

15 - Creating User Accounts with Firebase and AngularFire2

16 - Authenticating Users with Firebase and AngularFire2

17 - Component Communication with EventEmitters

18 - Abstract Authentication to a Service

19 - Refactoring Register Form Component to use EventEmitters

20 - Creating an Edit Profile Form

21 - Saving Authenticated User Profile Data to Firebase

22 - Login Form/Flow Improvements

23 - Login/Register Form Validation

24 - Displaying User Profile

25 - Searching Users and Configuring Firebase Rules

26 - Edit Profile as an Authenticated User

27 - Temporary Automatic User Authentication

28 - Trimming Search Queries

29 - Creating the Message Page

30 - Removing Tabs from Sub Pages

31 - Adding a Send Message Box

32 - Displaying Chat Messages

33 - Adding a Signout Button

34 - Combining Observables with mergeMap

35 - Adding Chat Channels

36 - Displaying Channel List

37 - Sending Messages to Channels

38 - Showing Online Users

39 - Firebase Hosting Deployment

40 - Chat Message Structure

41 - User Messages with Firebase Cloud Functions

42 - Preparing Chat Messages Component

43 - Sending One on One Chat Messages

44 - Displaying One on One Messages

45 - Generate Last Messages with Cloud Functions

46 - Displaying Last Message List and Starting Conversations



                    Section 12 - Ionic 3 Components
1 - Preface

2 - Badges

3 - Chips

4 - FAB List

5 - Modal

6 - Toast

7 - Tooltips

8 - Popover and onDismiss()

9 - Events

10 - Using @IonicPage() for Deep Linking



                    Section 13 - Ionic Native Plugins
1 - Introduction

2 - Call Number

3 - Cordova

4 - Application Version

5 - AdMobPro

6 - Brightness

7 - Fingerprint AIO

8 - Flashlight

9 - SQLite

10 - Speech to Text

11 - Network Detection

12 - Notification Badges

13 - Vibration

14 - Video Player



                    Section 14 - Misc
1 - Performance Improvements with WebViews (Crosswalk, UIWebView, WKWebView)

2 - Platform Aware UI

3 - Using 'Async' and 'Await'

4 - Using Ionic View to Test Our Application

