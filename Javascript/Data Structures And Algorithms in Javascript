                    Data Structures And Algorithms in Javascript 
                    Course Notes
                    
                    
                    Section 1 - Object Oriented JavaScript
1 - Introduction
Course instructor uses the cooking metapthor for describing what way the course will proceed
You will need to do practical examples so to understand implementation rather than the theory
This is a very complex topic so will need regular practice
An introduction to the course author

2 - Agenda and Scope
A run through of the agenda that the course will cover
The first section will be very valuable for people with out extensive experience in recursion
The Class is
  - A practical introduction to data structures and algorithms in JS
  - It uses carefully curated topics based on univeristy level CS classes and common technical interview topics
  - A good start for anybody who wishes to improve their skills by mastering the fundamentals
  - It will be useless if practical exercises are not finished
The Class is not
  - Every data structure and algorithm ever invented
  - The only inplementation or best solution to every cases
  - A math heavy or theory based course on the analysis of algorithms
  - The end all study tool for interview preparation
  - A smooth friendly journey, there is a lot of content so it will be challenging

3 - How to Succeed
A run through of some false assumption to help you succeed
Most technical interviews are not good measurements of technical ability
How to succeed
  - Don't participate in the false assumptions
  - Pair with someone else doing the course
  - Do the exercises without looking at the solutions
  - Be OK with failing and don't give up
  - Ask Questions
A Guide To Pair Programming
  - This can be tough at first but helps a lot for interview prep
  - Communicate deliberately and be specific
  - One person gets to be the driver and the other navigates
  - The driver types, the navigator talks through the code
  - Use codeshare.io for remote viewing
  - Be courteous

4 - Pseudoclassical JavaScript
JS is an Object-Oriented language
It does not have a formal way of creating class constructors like most languages, this is why the term pseudoclasses is used
This is not true of ES6 as it does have a class keyword

5 - Defining a Class
A class can be thought of in 3 terms
  - What is it
  - What does it have
  - What does it do
The foundation of OO is based on whats vs actions in functional programming
Demo of creating a class
Demo Syntax
  function Building(floors){
    this.what = "Building";
    this.floors = floors;
  }
  var myHouse = new Building(3);
There is a quick discussion using prototype in JS

6 - Using a Class
Basic demonstration of calling the class using various means
Things to note
  - There are several methods of creating classes in JS
  - Pseudoclassical is industry standard and is expected knowledge at an interview
  - You may see elements of this style in JS framework

7 - Exercise: Creating a Constructor

8 - Creating a Constructor Solution


                    Section 2 - Stacks & Queues
1 - Stacks
Stacks and Queues are used everywhere

2 - Stacks Interface

3 - Implementing a Stack

4 - Queues

5 - Exercise: Creating Stacks and Queues
  - https://github.com/kuychaco/algoClass/blob/master/data-structures/stack.js, 
  - https://github.com/kuychaco/algoClass/blob/master/data-structures/queue.js

6 - Creating Stacks and Queues Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/stack.js
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/queue.js



                    Section 3 - Recursion
1 - Why Recursion?

2 - Tracing Recursive Execution

3 - Template for a Recursive Function

4 - Looping

5 - Factorial with Loop

6 - Factorial with Recursion

7 - Exercise: Recursion Interview Questions
  - https://github.com/kuychaco/algoClass/blob/master/recursion/recursionIntro.js

8 - Recursive Reverse Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/recursion/recursionIntro.js

9 - Recursive Multiplier Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/recursion/recursionIntro.js

10 - MinStack Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/stack.js

11 - Implementing a Queue with Two Stacks Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/queue.js



                    Section 4 - Time Complexity
1 - Space vs. Time Complexity

2 - Calculating Time Complexity

3 - Understanding Big-O

4 - Calculating Big-O of JS Operations

5 - Calculating Big-O of Loops

6 - Exercise: Calculating Time Complexity
  - http://slides.com/bgando/sorting#/0/20

7 - Calculating Time Complexity Solution



                    Section 5 - Elementary Sorting
1 - Bubble Sort
  - https://www.youtube.com/watch?v=lyZQPjUT5B4

2 - Stability and Adaptability

3 - Selection & Insertion Sort

4 - Exercise: Bubble, Insertion, and Selection Sort
  - https://github.com/kuychaco/algoClass/tree/master/sorting-algorithms

5 - Bubble, Insertion, and Selection Sort Solution
  - https://github.com/kuychaco/algoClass/tree/solutions/sorting-algorithms



                    Section 6 - Sorting Algorithms
1 - Merge Sort

2 - Pseudocoding the Merge Routine

3 - Pseudocoding Merge Sort

4 - Time Complexity for Merge Sort

5 - Quick Sort Overview

6 - Understanding the Quick Sort Partition

7 - Pseudocoding Quick Sort Part 1

8 - Pseudocoding Quick Sort Part 2

9 - Reviewing the Pseudocode

10 - Debugging the Quick Sort Algorithm

11 - Quick Sort Review Part 1

12 - Quick Sort Review Part 2



                    Section 7 - Trees & Searching
1 - Trees

2 - Linked Lists

3 - Pseudocoding a Linked List

4 - Exercise: Implement a Linked List
  - https://github.com/kuychaco/algoClass/blob/master/data-structures/linkedList.js

5 - Implement a Linked List Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/linkedList.js

6 - Implementing a Tree



                    Section 8 - Reviewing Core Concepts
1 - Review: Time Complexity

2 - Review: Elementary Sorting

3 - Review: Recursion

4 - Review: Merge Sort

5 - Review: Quick Sort Part 1

6 - Review: Quick Sort Part 2

7 - Review: Stacks & Queues

8 - Review: Linked Lists

9 - Review: Trees Part 1

10 - Review: Trees Part 2



                    Section 9 - Binary Trees
1 - Binary Search Tree Overview

2 - Exercise: Binary Search Trees
  - https://github.com/kuychaco/algoClass/blob/master/data-structures/binarySearchTree.js

3 - Pseudocoding a Binary Search Tree

4 - BST Search Procedure

5 - BST Review & Scoping Discussion

6 - Pseudocoding the BST contains() Method

7 - Binary Search Tree Exercise Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/binarySearchTree.js

8 - In-Order Traversal

9 - Pseudocoding In-Order Traversal Part 1

10 - Pseudocoding In-Order Traversal Part 2

11 - Pre-Order Traversal

12 - Post-Order Traversal

13 - Initial Time Complexity for a BST

14 - Deleting Min/Max Nodes

15 - BST Review

16 - Pseudocoding Min/Max Deletion

17 - Reviewing the Min/Max Pseudocode Part 1

18 - Reviewing the Min/Max Pseudocode Part 2

19 - Exercise: Deleting Single-Child Nodes
  - https://github.com/kuychaco/algoClass/blob/master/data-structures/binarySearchTree.js

20 - Deleting BST Nodes Solution Part 1

21 - Deleting BST Nodes Solution Part 2

22 - Exercise: Deleting Two Children

23 - Deleting Two Children Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/binarySearchTree.js

24 - Analysis of Time Complexity



                    Section 10 - Graphs & Paths
1 - Graph Vocabulary & Representations

2 - Pseudocoding the Matrix Constructor

3 - Pseudocoding the addNode() Method

4 - Pseudocoding the addEdges() Method

5 - Exercise: Adding Nodes and Edges

6 - Adding Nodes and Edges Solution

7 - Adjacency List

8 - Pseudocoding an Adjacency List

9 - Exercise: Implement a Graph
  - https://github.com/kuychaco/algoClass/blob/master/data-structures/graph.js

10 - Implement a Graph Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/graph.js


                    Secion 11 - Depth & Breadth-First Search
1 - Graph Traversing & Depth-First Search

2 - Pseudocoding DFS Part 1

3 - Pseudocoding DFS Part 2

4 - Breadth-FIrst Search

5 - Pseudocoding BFS

6 - Breadth-First Search with a Graph Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/graph.js

7 - BFS Graph Stack Trace Part 1

8 - BFS Graph Stack Trace Part 2

9 - Depth-First Search with a Tree Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/tree.js

10 - Breadth-First Search Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/graph.js

11 - Breadth-First Search Stack Trace



                    Section 12 - Hash Tables
1 - Hash Tables

2 - Pseudocoding a Hashing Function

3 - Key Components Of A Hash table

4 - Pseudcoding set(), get() & remove()

5 - Handling Collisions

6 - Exercise Implementing A Hash Table

7 - Implementing A Hash Table Solution


                    Section 13 - Next Steps
1 - Next Steps

                    
                    
