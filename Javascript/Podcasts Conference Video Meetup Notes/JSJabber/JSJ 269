                Reusable React and JavaScript Components with Cory House

There are a lot of libraries available for using Web Components
Web Components were built to allow people using different frameworks to share code
Web Components have reached standards
  Most people still use libraries
The standard is available but there is still a cross browser issue
   This means that people are using polyfills eg Polymer
   Using polyfills means that the platform is not sufficient for your needs
Using JS libraries is easier in a lot of cases than using the standard (web component)
  - A lot of time this means using pollyfille to add features cross browser
  - Using the js libraries allows lazy loading, intelligent code splitting
  - In Angular or React, you put your data in your curly braces but not in standardized web components. 
Using Web Components can be a lot more difficult
  - Adding data or pulling data out needs be done with DOM selectors
  - This could be seen as a backward step in development ergonomics
Polymer has some very good features 
  - These are added on top of web components
  - One of the things you add is an easier way of binding data
  - You don't have to do DOM querying as it will be a lot more Angular like with curly braces wwhen binding data
  - Polymer adds some syntactic sugar to the Web Components standard
  - It used to come with its own polyfill for cross browsers but that is in a separate package now
The shadow dom is an encapsulation of style to prevent leakage across the application
  - This happens when CSS selectors are a bit too general
  - You can utilise CSS styles much more specifically similar to encapsulation
CSS Modules are a pattern of working with Webpack
  - You can tell Webpack the you would like to automatically namespace the syles at compile time
  - This is very useful because you can configure the bundler and reference the necessary styles at the top of the file
    and those styles are automatically encapsulated for that one file where they are imported
  - This has had the effect of JS build tools delivering the same power as the shadow DOM
    - This has also eliminated cross browser concerns as it is doing it at build time
  - Even today encasulating the shadow dom will not work cross browser
