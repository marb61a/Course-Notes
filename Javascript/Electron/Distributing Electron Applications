                    Distributing Electron Applications 
                    Course Notes
                    
                    
                    Section 1 - HOW ELECTRON APPLICATIONS ARE PACKAGED
1 - The Course Overview
A very quick introduction to the instructor
A quick run through of what the course will covered
Students will need to understand the Electron framework
Distributing applications maybe more time consuming than development
The course will cover the 3 main platforms 
  - Windows, Linux & MAC OS
  - Some require both registering as developers and purchasing code signing certificates
  - You should also have access to the platforms that you plan on deploying to 

2 - Basics Of Packaging
A run through of what the rest of the section covers
Each OS has a different package architecture
  - Each though contains a resources directory
ASAR Archives
  - https://github.com/electron/asar
  - This is similar to the tar archive but with indexing support
  - Asar archives are not compressed
  - There are workarounds for Windows maximum file path limitation
  - Electron patches various Node.js functions to work with Asar archives
  - Distributing final code inside an Asar archive is a recommended approach
  - There is a cli available for adding or extracting from Asar archives
    - npm install -g asar
  - To add a file to an Asar archive
    - asar pack oldfile newfile.asar

3 - Where To Publish?
There are different OS stores that applications can be publish to using them has advantages and disadvantages
  - Stores include Windows Store, App Store (Mac), Ubuntu App Store
Advantages
  - A wider audience to reach
  - Users are quicker to trust
Disadvantages
  - Store owners take a percentage of sales
  - Releases are slower due to review phases
  - Some stores may place limits on app functionality
The course instructor recommends allowing downloads both from within but also outside app stores
There are some alternatives available to App stores
  - GitHub releases
    - This is a free platform
    - It is well integrated with the GitHub platform
    - Packages are available from the Releases pane of the GiHub repo
    - The analytics provided however are not very good
  - Bintray
    - This is free for open source projects
    - There is support for deb/rpm repositories
    - It can be expensive for non open source projects
Once you understand and decide where to deploy the next question is how to deploy
  - Manual Deployment
    - Go to each supported OS and build and upload the app
  - Automated Deployment
    - This uses Continuous Integration (CI) services such as Travis for *nix & Appveyor CI for Windows
    - This allows for build and deploy with a single command

4 - Managing Electron Native Modules

5 - Introduction To electron-builder



                    Section 2 - GNU/LINUX
1 - Building Debian Packages
A brief introduction to the material covered in the section
Debian Packages
  - These are for Debian, Ubuntu Linux Mint and Zorin OS families of OS
  - They use a *.deb extension
  - They can be distributed in APT repositories

2 - Building RPM Packages

3 - Building AppImages

4 - Building Snap Packages

5 - Configure GNU/Linux Builds on Travis CI



                    Section 3 - MACOS
1 - Building DMG Archives

2 - Building PKG Packages

3 - Code Signing

4 - Building Mac App Store Packages

5 - Configure macOS Builds on Travis CI



                    Section 4 - WINDOWS
1 - Building NSIS Installers

2 - Building Portable Packages

3 - Code Signing

4 - Building AppX Packages

5 - Configure Windows Builds On Appveyor CI



                    Section 5 - AUTO UPDATES
1 - Setup Auto Updates For macOS

2 - Setup Auto Updates For Windows

3 - Setup Auto Updates For AppImages



                    Section 6 - TIPS AND TRICKS
1 - Compressing Binaries/Libraries With UPX

2 - Reproducible Builds With NPM Shrinkwrap

3 - Minify And Concatenate JavaScript

4 - Packaging Web Applications In A Desktop Shell
