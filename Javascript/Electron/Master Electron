                    Master Electron: Desktop Apps using HTML, JavaScript & CSS
                    Course Notes
                    
                    
                    Section 1 – Overview
1 - Introduction 
Introduction to the instructor & the course
Electron allows web developers to develop apps for Windows, Mac, Linux
  - This allows for large code reuse as one set of code can be compiled for use on each platform
  - It also means that frameworks that are known to the developer can be utilised for writing these apps

2 - Lesson Structure 
An indepth discussion on the course curriculum & setup
Each lesson will start from the same sample project
Electon and the get started setup can be found at
  - https://electron.atom.io
To get started with the course you will need to clone the get started app
  - git clone https://github.com/electron/electron-quick-start
  - Change into the directory and install everything
The instuctor uses the Atom text editor
  - This is built by the Github team using Electron
The entry point for the generated app is main.js
  - It also uses ES6 syntax but only a small part of the features
  - Using ES6 is not compulsory when writing apps


                    Section 2 – Developing with Electron
1 - Install & Run 
There are a couple of different ways to compile and run electron projects
The first method involves installing the electron module (globally)
  - sudo npm install -g electron
    - There are issues with installing electron on some platforms
    - This appears to be related to using the global flag while installing
To see help information from electron
  - electron --help
  

2 - App Structure 

3 - Electron-Reload 

4 - Using Native Node Modules on Mac 

5 - Using Native Node Modules on Windows 

6 - Debugging with Devtron 
Devtron is an add on to Chrome dev-tools
  - It adds Electron specific feature to dev-tools



                    Section 3 – Main Process API
1 - App 
The next 3 sections of the course will look at aspects of the Electron API
  - They will demonstrate mostly concepts rather than real world use cases
app or electon.app
  - This controls the application lifecycle
  - app.ready is used to see if the application has launched successfully
Example Syntax
  // Using the quick start app example code and refactoring some code 
  app.on('ready', function(){
    console.log('App is now ready');
    
    // This creates the browser window
    mainWindow = new BrowserWindow({width: 800, height: 600});
    
    //  Load the index.html file of the app
    mainWindow.loadURL(`file://${__dirname}/index.html`);
    
    // This is emitted when the window is closed
    mainWindow.on('closed', function(){
      // This dereferences the window object
      mainWindow = null;
    })
  })

2 - BrowserWindow: Getting Started 

3 - BrowserWindow: Parent & Child Windows 

4 - BrowserWindow: Frameless Window 

5 - BrowserWindow: Properties, Events & Methods 

6 - BrowserWindow: Managing window state 

7 - BrowserWindow: webContents 

8 - Session: Getting Started 

9 - Session: Cookies 

10 - Session: DownloadItem 

11 - Dialog 

12 - Accelerator & globalShortcut 

13 - Menu & MenuItem 

14 - Menu: Context Menu 

15 - Tray 

16 - PowerMonitor 


                    Section 5 - IPC Communication
1 - ipcMain & ipcRenderer 



                    Section 6 – Renderer Process API
1 - Remote 

2 - BrowserWindowProxy 

3 - WebFrame 

4 - Webview Tag 



                    Section 7 – Shared API
1 - Process 

2 - Screen

3 - Shell 

4 - NativeImage 



                    Section 8 – Features & Techniques
1 - Clipboard 

2 - Offscreen Rendering 

3 - Network Detection 

4 - Battery Status 


                    Section 9 – Project
1 - Project Overview 

2 - Submitting New Items 

3 - Retrieving Item Details 

4 - Showing & Persisting Items 

5 - Selecting Items for Opening 

6 - Opening Items in Reader 

7 - Deleting Items 

8 - Application Menu 

9 - Packaging for Distribution 

10 - Outro

