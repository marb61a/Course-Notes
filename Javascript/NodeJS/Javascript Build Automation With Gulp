                    Javascript Build Automation With Gulp.js
                    Course Notes
                    
                    
                    Section 1 - Course Introduction
1 - Welcome
A brief welcome by the instructor to the course

2 - What To Expect
During the course you will learn to 
  - Use test automation
  - Find issues\bugs & fix them quicker
  - Become more productive
There are things that need to be done other than coding
  - Minification & Concatentation
  - Less to CSS Compilation
  - Optimising 3rd party and custom code
  - Inject files into HTML
  - File revisions and Versioning
  - Testing And Code Analysis
  - All of this can be done and made easier usng Gulp

3 - A Glimpse Of What You Will Learn To Do

4 - Environment And Pre-Requisites

5 - Future
There is a good path to future versions of Gulp
  - It is important to remember that core concepts remain the same



                    Section 2 - The Value Of Gulp As A Javascript Task Runner
1 - The Value Of A Task Runner
Before using a task runner it is important that you understand your motivations for doing so
  - Gulp is another tool for use in a development toolbox
  - Gulp helps us eliminate and automate processes that we will repeat
    - Preparing Javascript\HTML\CSS for production has lots of little tasks that need doing
      - 2 of the most common are minifying and concatenating code
  - There are lots of tools that do parts of what 

2 - Using Gulp As A Task Runner
Demo of a simple pre-created gulpfile

3 - What's In It For You
Gulp allows us to automate tasks simply, this covers 3 main categories
  - Code Quality - Ensure that you have code quality in place
  - Tests - All tests run and pass
  - Code Pipeline - Ensure that tasks needing to be done are done so code is ready for the environment
Gulp ensures that we have quality improvement, faster delivery and repeatable and consistent pipelines
Coding does not end at development, there are other large tasks that need doing, code analysis, testing 
and deployment being among them.

4 - Choosing Between Grunt And Gulp

5 - Gulp Streams In Action

6 - Streamline Your Tasks Using Gulp



                    Section 3 - 4 Things You Need To Know About Gulp
1 - Overview Of Gulp API's

2 - Gulp Task

3 - Gulp Src

4 - Gulp Dest

5 - Gulp Watch 

6 - Fitting Together The 4 Gulp API's



                    Section 4 - Getting Started With Gulp
1 - Getting the starter code
Instructions on getting the sample code from github
  - https://github.com/johnpapa/pluralsight-gulp.git
As usual there are a couple of ways of doing this but cloning the repo is the recommended method
  - git clone https://github.com/johnpapa/pluralsight-gulp.git

2 - Getting Node.js
Node need to be installed - The section is optional
There are instructions for OSX & Windows
Recommended reading to eliminate using sudo with commands
  - https://johnpapa.net/how-to-use-npm-global-without-sudo-on-osx/

3 - Installing Chocolatey & Homebrew
Chocolatey is a package manager for Windows
  - https://chocolatey.org
Homebrew is a package manager for OSX
  - https://brew.sh
Linux has several different package managers 
  - Apt for Debian\Ubuntu systems

4 - Installing The Gulp Cli
Gulp will be installed using the NPM package manager
  - It needs to be installed globally
  - npm install -g gulp
  - To check the version -- gulp -v

5 - Installing Gulp Bower Globally
The course will be using a couple of different package managers
  - npm for the serverside packages
  - bower for the clientside packages
    - bower is also installed globally
      - npm install -g bower
      - To check the version -- bower -v

6 - Creating A Local Package for A Project
Installing packages locally using npm
  - npm install gulp --save-dev                           // --save-dev will add to dev-dependencies section to package.json
There are differences between Dependencies and devDependencies
  - Dependencies
    - Needed at run time
    - Examples include Angular & Bootstrap
    - npm install --save
  - devDependencies
    - Needed during development
    - Examples include JSint, Uglify
    - npm install --save-dev

7 - Creating A Gulpfile.js
A Gulpfile is a manifest of all the tasks, tests etc for our application
Example Syntax
  // gulpfile.js
  var gulp = require('gulp');
  
  gulp.task('hello-world', function(){
    console.log('Our first hello world gulp task');
  })
  
  // At the cli type in gulp hello-world to run gulp
    - Always ensure that the task on the cli is the exact same spelling as the file task

8 - Recap
A brief run through on the material of the chapter



                    Section 5 - Code Analysis With JSHint And JSCS
1 - Code Analysis With JSHint And JSCS
JSHint is a tool for improving and maintaining code quality
  - http://jshint.com
  - You can configure rules which help prevent errors
  - .jshintrc                                               // A JSON rule file for JSHint
JSCS is a stylechecker for JS code
  - http://jscs.info                                        // It has now merged with the eslint tool
  - .jscsrc                                                 // A JSON rule file for JSCS

2 - JSHint And JSCS In Brackets
How to use JSHint & JSCS in the Brackets editor
  - You can have various rules added to the jshintrc and jscsrc file

3 - Installing JSHint And JSCS For Gulp

4 - Coding The JSHint And JSCS Task

5 - Reusable Functions

6 - Failing The Task

7 - Conditionally Displaying The Source Files

8 - Lazy Loading Gulp Plugins

9 - Reusable Configuration Module

10 - Recap
A brief run through on the material of the chapter



                    Section 6 - CSS Compilation
1 - Compiling To CSS And Error Handling

2 - CSS Precompilers And Vendor Prefixes

3 - Creating A Less And AutoPrefixer Gulp Task

4 - Deleting Files In A Dependency Task

5 - Creating A Watch Task To Compile CSS

6 - Handling Error And Using A Gulp Plumber

7 - Recap 
A brief run through on the material of the chapter

                    
                    Section 7 - HTML Injection
1 - 


                    Section 8 - Serving Your Dev Build
1 - Serving Your Development Build

2 - Using Nodemon In A Gulp Task


3 - Prepare Serve And Restart The Code

4 - Run Tasks On Node Restart

5 - Recap
A brief run through on the material of the chapter


                    Section 9 - 
1 -

2 -


                    Section 10 -
1 -

2 - 

                    Section 11 - 
1 - Caching HTML Templates

2 - Angulars Template Cache

3 - Cleaning The Built Code Folder

4 - Minifying HTML And Putting In templateCache

5 - Recap 
A brief run through on the material of the chapter


                    Section 12 -
                    
                    Section 13 -
                    
                    Section 14 - Angular Dependency Injections
1 -  

2 -

3 -

4 - Adding Hints

5 - Recap
                    
                    
                    Section 15 - Static Asset Revisions And Version Bumping 
1 - Revisions And Versions

2 - Exploring File Revisions

3 - Adding Static Asset Revisions and Replacements

4 - Generating A Revision Manifest

5 - Bumping Versions With Server

6 - Recap 

                    
                    Section 16 - Testing
1 - Testing

2 - Karma And Single Run vs Watching

3 - Creating The First Test Task

4 - Karma Configuration

5 - Installing Pakages And Running The Tests

6 - Making The Tests Run Before Other Tasks

7 - Continuously Running Tests During Development

8 - Next Steps
        
                    
                    Section 17 - Integration Testing And HTML Test Runners
1 - Intro

2 - Node Child Processes

3 - Running Tests That Require A Node Server

4 - Setting Up An HTML Test Runner

5 - Injecting The HTML 

6 - Browsersync And The Test Runner

7 - Launching The HTML Test Runner

8 - Running Server Tests In the HTML Test Runner

9 - Recap



                    Section 18 - Migrating To Gulp 4
1 - Gulp 4

2 - Tasks And Changes

3 - Migrating

4 - Running The Refactored Tasks

5 - Installing The Latest Gulp 

6 - Recap
