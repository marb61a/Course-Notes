                           Notes From Frontend Masters Course
                          API Design with Node.Js using Express
                        
                    Section 1 - Node.Js     
1 - The first video of the first section is a very basic node refresher. Also in the video
the instructor points to the github repo from the course. Also there is a basic overview
of what the curriculum will be for the course (3 days for the live version)
REPL - Read Evaluate Print Loop - This is an environment similar to a command line console.
Node uses CommonJS as its module loader, using require('module') gives access to modules both built in and third
party.
Modules downloaded will be placed in the node modules directory.

2 - The second video of the section is a discussion of CommonJS
Using the exports object on a module allows it to be exposed so that it can be required later. 
To execute node run - node path_to_file.

3 -

4 - 

5 - Using Express 

6 - Exercise 1

7 - Exercise 1 Solution



                    Section 2 - REST API's
1 - Getting Restful
REST - Not a framework
Also there is no REST standard
REST is used a lot on the modern web
It should be stateless, use HTTP verbs explicitly
Expose a directory like URL pattern for routes
Tranfers JSON and XML
Lots of tools available to help with REST API design

2 -
A sample API about lions is presented, it is modelled using JSON
Data should be modelled first before building an app.
After data is modelled you should design the routes that are needed to access the resource
again these verbs are PUT POST GET DELETE
These routes should again be modelled in JSON

3 - Exercise 2
Express has built in middleware
  - express.static which takes in directory path and any request to that directory will be automatically served as a static asset
  - express.static knows what MIME typr to set it to based on file extension
  - Will also assume thet there is an index.html file in directory root and will also serve it on a get request which will save
    setting up a route
app.use() will allow you to pass in middleware function and will be executed in the order in which it is registered
By default express does not know how to handle JSON, body-parse is a package which will allow it to do so
Exercise is to make the REST routes to perform CRUD operations for lions
Nodemon is used to monitor for changes
Lions will be stored in an empty array created in the file
  
4 - Exercise 2 Solution
Lodash is a Javascript library which is similar to Underscore
  - https://lodash.com
  - usually initilaised using an underscore character  eg var _ = require("lodash");
app.use is a way to register middleware on an application level
Added var i = 0 so that there would be would be auto incrementation using i++
_.find is a  built in lodash method
Example in video is to find a lion by id
  - app.get('lions/:id', function(){
      var lion = _.find(lions, {id: req.params.id});
      res.json(lion || {});
    });
  params is an object on the request
No auto parsing in lodash to number
In example lion.id = id = ''; will take the number\integer id and coerce it to a string
Example uses window.fetch() polyfill which is being used to replace XHR requests
.fetch() uses AJAX and has a promise API
fetch won't send or receive any cookies from the server by default
Its important to send back the resources created on post to avoid having to make another request

5 - Exercise 2 Solution cntd
Put is similar to Post but updates
_.findIndex - Another built in Lodash method to find the index
app.delete('lions/:id' function(){}) will be the path to delete and works on each verb 
You can only respond once per request



                    Section 3 - Middleware
1 - What is Middleware?
Middleware is the backbackbone of ExpressJS framework.
Express is at its heart just a routing and middleware framework
Middleware is a function with access to the request and response objects. When next is called it will go to the
next middleware
Middleware has the ability to run any code, change the request response objects and end the req-res cycle.
If next is not called or middleware does not end a cycle then the server will hang.
5 types of middleware in Express (Version 4)

2 - Types of Middleware
3rd Party Middleware - Body Parser
Router-Level - 
Application-Level - app.use is an example
Error-Handling - Error has to be the first parameter passed to the function
  Syntax used is
  - app.use(function(err, req, res, next){
      console.log(err);
    });
  Error handling should go at the end of the file
  The 4 arguments are a must in the error handling middleware
Built-In - express.static is an example

3 - Middleware Examples

4 - Exercise 3

5 - Exercise 3 Solution

6 - Routers

7 - Exercise 4

8 - Exercise 4 Solution

9 - Error Handling

10 - Audience Q & A

11 - Audience Q & A Cntd



                    Section 4 - Testing
1 - Testing in Node

2 - Node Environmental Variables

3 - Exercise 5

4 - Exercise 5 Solution

5 - Testing Q&A



                    Section 5 - Organisation & Configuration 
1 - Application Organization

2 - Configuration

3 - Exercise 6

4 - Exercise 6 Solution



                    Section 6 - Mongo
1 - Mongo Introduction

2 - Using the Mongo with Node

3 - Exercise 7

4 - Exercise 7 Solution


                    Section 7 - Data Modeling
1 - Schemas


2 - Schema Types

3 - ObjectId

4 - Blog Schema Representation 

5 - Exercise 8

6 - Exercise 8 Solution



                    Section 8 - Querying
1 - Querying Data With Mongoose

2 - Populations

3 - Exercise 9

4 - Exercise 9 Solution

5 - Exercise 9 Solution Continued

6 - Creating Promises

7 - Consuming Promises

8 - Nested Promises



                    Section 9 - Authentication
1 - JSON Web Tokens

2 - Using JWT

3 - Usernames and Passwords

4 - Authenication With Middleware

5 - Exercise 10 

6 - Exercise 10 Solution

7 - Executing CRUD Operations

8 - Authentication Configuration

9 - Exercise 11

10 - Exercise 11 Solution

11 - Testing The Authentication



                    Section 10 - Securing Routes
1 - Identifying Sensitive Routes

2 - Understanding CORS

3 - Testing The UI

4 - Exercise 12

5 - Exercise 12 Solution

6 - Exercise 12 Solution Continued



                    Section 11 - Deployment
1 - Deployment Overview

2 - Deploying to Heroku

3 - Configuring the deployment



                    Section 12 - Q & A
1 - Q & A Part 1

2 - Q & A Part 2

3 - Q & A Part 3


  
