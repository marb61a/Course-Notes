                                  Course notes from the awesome Udemy course
                                     Learn and Understand NodeJS by
                                            Anthony Alicea
                                            

                    Section 1 - Introduction and setup
1 - Introduction and course goal
Basic introduction to the course and what the goal of the course is.

2 - Big Words and NodeJS
Learning NodeJS can be intimadting due to some of the terminology involved, the instructor has devised an
excellent strategy for handling this issue which is to specifically address these terms using "Big Word Alerts"
these are then broken down into to simple explanations.

3 - Watching the course
There are different video resolutions available and where possible it should be viewed in the highest 
resolution possible in order to fully observe what the instructor is doing.

4 - Command Line Interface
A basic guide to using the command line, there are huge amounts of indepth tutorials on using the cli
and it is highly recommended to do some learning as these skill are very transferable.

5 - Command Line References
Not necessary for the course to know CLI but if you want to learn
 - http://cli.learncodethehardway.org/book/



                    Section 2 - V8: The Javascript Engine
1 - Conceptual Aside: Processors, Machine Language, and C++
Processors 

2 - Javascript Aside: Javascript Engines and The ECMAScript Specification
Javascript is a trade name
ECMAScript - The standard on which Javascript is based
ECMA is a standards agency - https://www.ecma-international.org
Javascript engines should match ECMA standard
An engine is something that converts JS into machine code

3 - V8 Under the Hood
The v8 engine is an open source JavaScript engine

4 - Adding Features to Javascript



                    Section 3: The Node Core
1 - Conceptual Aside: Servers and Clients
A quick, very high level overview of client - server architecture.
There are explanations of the various architectures used including client - server at
http://tutorials.jenkov.com/software-architecture/client-server-architecture.html

2 - What Does Javascript Need to Manage a Server?

3 - The C++ Core
Lecture begins by looking at the NodeJS source code using Github
There is a quick overview of some of the folders within the NodeJS source code.
There is a lot of C++ code in the src folder

4 - The Javascript Core
Another quick look at the folder structure in the NodeJS souce code but this time looking at the
Javascript end as oppposed to the previous example.

5 - Downloading Lecture Source Code (Article)
Instructions on how to download the source code used in examples

6 - Let's Install and Run Some Javascript in Node




                    Section 4: Modules, Exports, and Require
1 - Conceptual Aside: Modules
Modules are nothing more than blocks of code to be reused, this is a new addition to the
Javascript language. Modules do not affect other code accidently.
CommonJS is basically a set of standards covering how modules should be built.

2 - Javascript Aside: First-Class Functions and Function Expressions

3 - Let's Build a Module

4 - Javascript Aside: Objects and Object Literals

5 - Javascript Aside: Prototypal Inheritance and Function Constructors

6 - Javascript Aside: By Reference and By Value

7 - Javascript Aside: Immediately Invoked Function Expressions (IIFEs)

8 - How Do Node Modules Really Work?: module.exports and require

9 - Javascript Aside: JSON
JSON is an acronym which stands for JavaScript Object Notation
JSON is a syntax for storing and exchanging data.
JSON is text, written with JavaScript object notation.
When exchanging data between a browser and a server, the data can only be text. JSON is text, and we can convert any 
JavaScript object into JSON, and send JSON to the server. We can also convert any JSON received from the server into JavaScript 
objects. This way we can work with the data as JavaScript objects, with no complicated parsing and translations.

10 - More on require

11 - Module Patterns

12 - exports vs module.exports

13 - Requiring Native (Core) Modules

14 - Modules and ES6
Node JS added the feature of modules to JS as you need modular structure for large scale software
ES6 has now added the concept of modules to JS
ES6 has new syntax eg export or import

15 -Web Server Checklist



                    Section 5: Events and the Event Emitter
1 - Conceptual Aside: Events
Events in Node JS are when somethaing has happened in an app that can be responded to.
Many areas of software use the concept of events
In node there are actually 2 types of events
 - System Events -- C++ core libuv
 - Custom Events -- JS Core Event Emitter
Javascript events are faked using the node event emitter
Most core modules are built on top of this

2 - Javascript Aside: Object Properties, First Class Functions, and Arrays
Properties are the most important part of any JavaScript object
Object properties are the values associated with the object
Arrays are collections of values, it is a variable that can hold more than one value at a time
To add a value to an array is to push the values
In JS a function is a block of code designed to perform a particular task
It runs when something calls\invokes it
In JavaScript, functions are first-class objects, because they can have properties and methods just like any other object
Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.

3 - The Node Event Emitter - Part 1

4 - The Node Event Emitter - Part 2

5 - Javascript Aside: Object.create and Prototypes

6 - Inheriting From the Event Emitter

7 - Javascript Aside: Node, ES6, and Template Literals

8 - Javascript Aside: .call and .apply

9 - Inheriting From the Event Emitter - Part 2

10 - Javascript Aside: ES6 Classes

11 - Inheriting From the Event Emitter - Part 3



                    Section 6: Asynchronous Code, libuv, The Event Loop, Streams, Files, and moreâ€¦
1 - Javascript Aside: Javascript is Synchronous
Asynchronous means that more than 1 process is running simultaneously
Node does things asynchronously, V8 does not
Synchronous means one thing running at a time
JS is synchronous

2 - Conceptual Aside: Callbacks
Callbacks are functions passed to another function which we assume will be invoked at some time

3 - libuv, The Event Loop, and Non-Blocking Asynchronous Execution
Libuv is C++ System Events
Libuv handles OS events
Callbacks similar in concept to event listeners
Non-blocking in this case means that you can do things without stopping your program running
Non-blocking is made possible by Node doing things Asynchronously
Node has eased difficulties in running code asynchronously
Libuv - https://libuv.org

4 - Conceptual Aside: Streams and Buffers
Buffer - A buffer is a temporary holding spot for moving data from one location to another, it is intentionally
limited in its size
Stream  - A stream is a sequence of data made available over time, usually pieces of data that combine into a
whole.
Streams and buffers work in combination a lot of the time

5 - Conceptual Aside: Binary Data, Character Sets, and Encodings

6 - Buffers

7 - ES6 Typed Arrays

8 - Javascript Aside: Callbacks

9 - Files and fs

10 - Streams

11 - Conceptual Aside: Pipes

12 - Pipes

13 - Web Server Checklist



                    Section 7: HTTP and being a Web Server
1 - Conceptual Aside: TCP/IP
A quick overview of TCP\IP, there is a much more indepth tutorial available at the following address
http://www.w3schools.com/website/web_tcpip.asp

2 - Conceptual Aside: Addresses and Ports
A quick overview of IP Addresses and Ports which handle the various protocols. There are 2 different types of IP addresses
there are tutorials much more indepth at the following locations
http://www.tutorialspoint.com/ipv4/index.htm
http://www.tutorialspoint.com/ipv6/index.htm

3 - Conceptual Aside: HTTP
Another quick review, this time of the basics of the HTTP protocol. There is an indepth tutorial available at
http://www.tutorialspoint.com/http/index.htm

4 - http_parser

5 - Let's Build a Web Server in Node

6 - Outputting HTML and Templates

7 - Streams and Performance

8 - Conceptual Aside: APIs and Endpoints

9 - Outputting JSON

10 - Routing

11 - Web Server Checklist



                    Section 8: NPM: the Node Package Manager
1 - Conceptual Aside: Packages and Package Managers

2 - Conceptual Aside: Semantic Versioning (semver)
Versioning - Specifying the version of a set of code
Semantic - Implies that there is something conveys meaning
Looking at a version number should convey a meaning
In Node version numbers should go Major.Minor.Patch eg 1.7.10 
 - Small patches eg bugfixes would become 1.7.11
 - Minor feature additions 1.8.11
 - Big changes 2.0.0 (will probably cause breakages)
Semantic Versioning - http://semver.org

3 - npm and the npm registry: Other People's Code
NPM - Node Package Manager
Install -- npm install
Check version installed -- npm -v
https://www.npmjs.com - Package repositories
Be very careful about packages you install

4 - init, nodemon, and package.json

5 - npm Global Installation (Article)

6 - init, nodemon, and package.json - Part 2

7 - Using Other People's Code



                    Section 9: Express
1 - Installing Express and Making it Easier to Build a Web Server

2 - Routes

3 - Static Files and Middleware

4 - Templates and Template Engines

5 - Querystring and Post Parameters

6 - RESTful APIs and JSON

7 - Structuring an App



                    Section 10: Javascript, JSON, and Databases
1 - Conceptual Aside: Relational Databases and SQL

2 - Node and MySQL

3 - Conceptual Aside: NoSQL and Documents

4 - MongoDB and Mongoose

5 - Web Server Checklist



                  Section 11: The MEAN stack
1 - MongoDB, Express, AngularJS, and NodeJS

2 - AngularJS: Managing the Client

3 - AngularJS: Managing the Client (Part 2)

4 - AngularJS: Managing the Client (Part 3)

5 - Conceptual Aside: Angular 1, Angular 2, React, and moreâ€¦

6 - Working with The Full Stack (and being a Full Stack Developer) - Part 1



                    Section 12: Let's Build an App! (in record time)
A very basic app is built to demonstrate the concepts from the course

1 - NodeTodo: Software Requirements
A basic run through of what the project will require

2 - Initial Setup
3 - Setting up Mongo and Mongoose
4 - Adding Seed Data
5 - Creating our API
6 - Testing our API
7 - Future Lectures  (Article)
