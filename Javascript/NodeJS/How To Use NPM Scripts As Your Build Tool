                    How To Use NPM Scripts As Your Build Tool
                    Course Notes
                    
                    
1 - Create A Basic Package.json File
To automatically create a package.json file
  - npm init
  - npm init --force                                      // Will generate package.json file with default answers
  - npm init --yes                                        // Will be the same as above
  - npm test                                              // Will run tests and add a tests entry to package.json
  - npm t                                                 // A shorthand version of above
Most of the questions asked have a default answer provided  
  - As the example app is not published the version is set to 0.1.0
  - The default index.js entry point is left
  - The MIT Licence is recommendid due to its few restrictions and permissiveness

2 - Run The Basic NPM Scripts
Example Syntax
  // Replacing the test scripts that npm test command generated
  // Always use the double quotes as it is a JSON file not a JS file
  "scripts": {
    // Babel is required to compile tests as the example uses ES6
    "test": "mocha spec/ --require babel-register",
    // Another script that npm recognises natively
    "start": "node index.js"
  }
  
3 - Create A Custom NPM Script
Example Syntax
  // Creating a custom ESLint script
  "scripts": {
    "test": "mocha spec/ --require babel-register",
    "start": "node index.js",
    // The cache flag is passed to avoid relinting things that have not altered
    // The fix flag will autofix certain items that have simple solutions
    // Many developers do not like to have a globally installed version of eslint and use either paths to 
    // local installtions or use environmental variables
    "eslint": "eslint --cache --fix ./"
  }
  - npm run env                                             // Will list environmental variables
  - npm run eslint                                          // This command runs the eslint script

4 - Run NPM Scripts In Series
Prior to running any tests is is a good idea to run linting on JS and styles
Example Syntax
  "scripts": {
    "start": "node index.js",
    // The double ampersand runs multiple scripts in series
    // If any of the linting fails the rest of the command is aborted
    "test": "npm run eslint && npm run stylelint && mocha spec/ --require babel-register",
    "eslint": "eslint --cache --fix ./",
    "stylelint": "stylelint '***/*.scss' --syntax scss"
  }

5 - Run NPM Scripts In Parallel
Example Syntax
  // Instead of chaining scripts it may be necessary to run them in parallel
  // This is an easy task as it only involves changing double ampersands to single ones
  // Using wait gives the ability to terminate with ctrl + c
   "scripts": {
    "start": "node index.js",
    "test": "npm run eslint  & mocha spec/ --require babel-register --watch & npm run stylelint & wait",
    "eslint": "eslint --cache --fix ./",
    "stylelint": "stylelint '***/*.scss' --syntax scss"
    "stylelint:fix": "stylefmt -R src/"
  }
Be careful that although you may cancel a Mocha test at the cli it may still be running in the background

6 - Use A Shorthand Syntax For Running Multiple NPM Scripts With npm run all
To install the npm run all package
  - npm -i npm-run-all -D
Example Syntax
  // You dont need the ampersands to run the scripts in series
  // Adding the parallel directive enables parallel running of the scripts
"scripts": {
    "start": "node index.js",
    "test": "npm-run-all --parallel eslint mocha stylelint",
    "eslint": "eslint --cache --fix ./",
    "stylelint": "stylelint '***/*.scss' --syntax scss"
    "stylelint:fix": "stylefmt -R src/"
    "mocha": "mocha spec/ --require babel-register"
  }

7 - Run A Set Of Similar Scripts With A Wildcard
npm-run-all has a grouping feature
  - This comes in very useful when there are scripts of a similar theme
  - It also supports the :** block which matches both subscripts and sub-subscripts
  - In certain situations it maybe helpful to have a separate linting script
Example Syntax
  // In the example stylefmt will need to be installed as a dev dependency 
  //  -npm -i stylefmt -D
  "scripts": {
    "start": "node index.js",
    "test": "lint mocha ",
    "mocha": "mocha spec/ --require babel-register",
    "lint": "npm-run-all lint:**"
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylermt -R src/"
  }

8 - Use Pre And Post NPM Script Lifecycle Hooks
Npm scripts support the concept of pre and post scripts
  - Just by prepending the script with pre tells npm to run the script before
  - In the example cover will be for test coverage and nyc will generate a report when tests are run
    - postcover will run after the coverage script, it will clean up the nyc generated coverage files
    - The cover:open script will open the coverage report in a browser
      - npm run cover:open will open the report in the browser
Example Syntax
  "scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylermt -R src/"
  }

9 - Passing Arguments To NPM Scripts
Example Syntax
  // Creating a watch script for tests
  // Don't be tempted to copy thes test directives and rename to test:wtach and add a watch directive to the end
  // this would be brittle and would have problems if test scripts were changed
  "scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    // npm recognises the -- option as a way of supplying additional directives
    "test:watch": "npm-test -- --watch",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/"
  }

10 - Pipe Data From One NPM Script To Another
Example Syntax
  // Adding scripts to build a site
  // Pug is a templating engine                           // https://pugjs.org/api/getting-started.html
  // npm install pug-cli -D                               // Install the pug-cli and making it a devdependency
  // Adding various css scripts Sass
  "scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "test:watch": "npm-test -- --watch",
    // Used to build all the build subscripts
    "build": "npm-run-all build:*",
    Using a prebuild script to remove the public folder before building assets
    "prebuild": "rm -rf public/",
    // index.pug is the template, data.json in the input, it has filesize info for all React versions
    // public is the output directory, to run the build npm run build:html
    "build:html": "pug --obj data.json src/index.pug --out public/",
    // For the CSS dependencies the installations will be Sass, PostCSS & Cssmin
    // npm -i node-sass postcss-cli cssmin _D
    // The | character will be used to pipe from one file into another
    // The -c is used to pass in a config file which tells postcss to run autoprefixer which adds any vendor prefixes
    // Then the file is passed to cssmin which minifies the css, that is then sent out to a file using > 
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/index.min.css",
    // Using mustache & uglify.js -> npm install mustache uglify-js -D
    // Uglify will minimise the js sent from the index file
    // Again the output is sent to a file using the > option
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/index.min.js"
  }

11 - Run NPM Scripts When Files Change With onChange
Example Syntax
ESLint does not support the watch flag
  - Instead the example with use the onChange utility
  - npm -i onchange -D
"scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    // A generic watch test to watch all the sub watches
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    // Used instead of the watch flag
    // It tells what to run should any of the files change, by default it ignores the onchange folder 
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    "prebuild": "rm -rf public/",
    "build:html": "pug --obj data.json src/index.pug --out public/",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/index.min.js"
  }

12 - Use package.json Variables In NPM Scripts
NPM has package level variables that can be used in scripts such as name, version etc
To see NPM variables
  - npm run env | grep "npm_package" | less
Example Syntax
  "scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    // The $ signifies a variable
    "prebuild": "rm -rf public/$npm_package_version",
    "build:html": "pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"
  }

13 - Use Custom Config Settings In Your NPM Scripts
NPM supports custom configuration parameters
  - You can either sign in the package.json or at the command line
  - You can override the config parameters set in the package.json file below
    // This will change the port set in the file from 1337 to 1138
    - npm config set app-name:port 1138
Example Syntax
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    // Configures a port key, using the npm run env | grep config shows this port is now an environmental variable
    "port": "1337"
  }
  "scripts": {
    "start": "node index.js",
    "poststart": "npm run build && npm run server",
    "server": "npm-run-all --parallel server:*",
    // http-server will need to be installed using npm i http-server
    "server:create": "http-server public/$npm_package_version -p $npm_package_config_port",
    "server:launch": "open http://localhost:$npm_package_config_port",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    // The $ signifies a variable
    "prebuild": "rm -rf public/$npm_package_version",
    "build:html": "pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"
  }


14 - Run NPM Scripts With Git Hooks
To help enforce code quality it is good to run validation
There is an NPM package avilable to add Git hooks which aren't available out of the box
  - npm install husky -D
  - This can be useful if there are linting errors which may need to be bypassed to commit to Git
Example Syntax
  "scripts": {
    "start": "node index.js",
    "prepush": "npm run lint",
    "poststart": "npm run build && npm run server",
    "server": "npm-run-all --parallel server:*",
    "server:create": "http-server public/$npm_package_version -p $npm_package_config_port",
    "server:launch": "open http://localhost:$npm_package_config_port",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    "prebuild": "rm -rf public/$npm_package_version",
    "build:html": "pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"
  }

15 - Change The Level Of Console Output When Running NPM Scripts
When running npm script there are a range of flags that can be passed to change the level of log output
  -- loglevel silent or  --silent or -s will reduce log output considerable 
  -q for quiet
  -d for info
  -dd for verbose
  -ddd for hugely verbose

16 - Make NPM Scripts Cross Environment Friendly
If you want your scripts to run run on multiple OS then there are several considerations
There is an npm package available for helping with this problem
  - npm i cross-env -D
To delete across different platform there is an npm package available
  - npm i rimraf -D
The open/coverage command doesn't work on windows so there is an npm package needed
  - npm i opn-cli -D
The $ for signifying variables does not work on Windows so an npm package is needed
  - npm i cross-var -D
Example Syntax
  // Making scripts cross platform friendly
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    // Configures a port key, using the npm run env | grep config shows this port is now an environmental variable
    "port": "1337"
  }
  "scripts": {
    "start": "node index.js",
    "poststart": "npm run build && npm run server",
    "pretest": "npm run lint",
    // This will work on *nix machines but not Windows, by adding the cross-env variable it
    // sets the environment variables needed for each platform
    "test": "cross-env set BABEL_ENV=test mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    // Some versions of windows do not understand rm commands so change to using the rimraf command
    "postcover": "rimraf .nyc_output",
    // Again this is of use on *nix platforms, replace open with opn to make it multi platform usable
    "cover:open": "opn coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    // Although *nix systems are fine with singel quotes it does not work on Windows systems, use
    // escapes and change the single quotes to double
    "lint:css": "stylelint \"***/*.scss\" --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange \"**/*.js\'" \"**/*.scss\" -- npm run lint",
    "build": "npm-run-all build:*",
    // The $ signifies a variable, the % is used on Windows and goes before and after the variable
    // adding the cross-var will allow the changing to any variable to suit the environment
    "prebuild": "cross-var rimraf public/$npm_package_version",
    "build:html": "cross-var pug --obj data.json src/index.pug --out public/$npm_package_version",
    // cross-var will not work where the variable is part of a pipe so the entire command has to be passed as a string 
    "build:css": " cross-var "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css"",
    "build:js": "cross-var "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"",
    "server": "npm-run-all --parallel server:*",
    "server:create": "cross-var "http-server public/$npm_package_version -p $npm_package_config_port"",
    "server:launch": "cross-var "open http://localhost:$npm_package_config_port"",
    "prepush": "npm run lint"
  }  

17 - List Available NPM Scripts And Support Tab Completion
As the scripts section gets large it becomes easy to forget what scripts are available
Some of the ways that this can be avoided are
  - npm run | less
  // Add tab completion 
  - npm completion >> ~/.bashrc or ~/.zshrc
  // Stands for npm task list, use ntl at the command prompt and it will list scripts
  - npm install ntl -g

18 - Add Comments To Your NPM Scripts
As the amount of scripts increases it may become necessary for doumentation
  - Because the file is in json format it may be limiting
  - There are a couple of ways to get around this
  - These methods are for providing comments inside a package.json file
Example Syntax
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    "port": "1337"
  }
  "scripts": {
  // Running as is and piping through less will only print out the last comment as they share the same key
  // Another way is to use a shell comment character #
    "//": "run build and serve"
    // using a sample sheel comment character
    "start": "# run, build and serve \n\t node index.js",
    "poststart": "npm run build && npm run server",
    "pretest": "npm run lint",
    "//": "Run our mocha unit tests",
    "test": "cross-env set BABEL_ENV=test mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rimraf .nyc_output",
    "cover:open": "opn coverage/index.html",
    "//": "lint the Javascript and SASS"
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint \"***/*.scss\" --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange \"**/*.js\'" \"**/*.scss\" -- npm run lint",
    "build": "npm-run-all build:*",
    "prebuild": "cross-var rimraf public/$npm_package_version",
    "build:html": "cross-var pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": " cross-var "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css"",
    "build:js": "cross-var "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"",
    "server": "npm-run-all --parallel server:*",
    "server:create": "cross-var "http-server public/$npm_package_version -p $npm_package_config_port"",
    "server:launch": "cross-var "open http://localhost:$npm_package_config_port"",
    "prepush": "npm run lint"
  }  

19 - Pull Out NPM Script Into Another File With PS
As the amount of npm scripts increases it maybe necessary to look at alternative ways to amnage them
There is an npm package available to help call package scripts
  - npm i p-s -D
Using the following command will remove the npm scripts and put them into a new JS file
  - node_modules/.bin/nps init
  - The new file is called package-scripts.js
  - Because of moving the npm scripts running npm run will no longer show a list of available scripts
    - npm -- --help 
      - The first flag is to be passed on to npm script not npm itself
Example Syntax
  // package.json file
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    "port": "1337"
  }
  // After running the nps init command only scripts are left in place
  "scripts": {
    "start": "nps",
    "test": "nps test"
  }  
  
  // package-scripts.js file
  module.exports = {
    scripts: {
      default: 'node index.js',
      poststart: 'npm run build && npm run server',
      pretest: 'npm run lint',
      test: {
        script: 'BABEL_ENV=test mocha spec/ --require babel-register',
        description: 'Run our mocha tests'
      },
      cover: {
        default: 'nyc npm t',
        open: 'open coverage/index.html'
      },
      postcover: 'rm -rf .nyc_output',
      lint: {
        // In this case npm-run-all is not supported, a list of scripts to be linted must be passed
        default: 'nps lint.js,lint.css,lint.css.fix',
        js: 'eslint --cache --fix ./',
        css: {
          default: 'stylelint \'**/*.scss\' --syntax scss',
          fix: 'stylefmt -R /src'
        }
      },
      watch: {
        default: 'npm-run-all --parallel watch:*',
        test: 'npm t -- --watch',
        lint: 'onchange \'**/*.js\' \'**/*.scss\' -- npm run lint'
      },
      build: {
      
      }
    }
  }


20 - Create A Bash Script To Replace A Complex NPM Script 

21 - Create A Node Script To Replace A Complex NPM Script 
