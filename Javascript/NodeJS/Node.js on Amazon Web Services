                    Zero to Production Node.js on Amazon Web Services
                    Course Notes
                    
                    
                    Section 1 - The Web Server
1 - Introduction
Introduction to the course instructor
A quick overview of the agenda
Course will cover a lot of material
The goals for the workshop are
  - End the course with a productive code viewpoint
    - Is productive in development
    - Your apps wont fall over under modest loads
  - Have a broader knowledge 
  - Exposure to ES2015 and the tools need to use it today
  - Take the appropriate time writing code

2 - The Sample Application
The sample application that the instructor has put together
  - It is a todo list application
    - It is an MVC application and persists lists to an express based API layer
  - What the application does is not important
  - It mirrors techniques that you will really use
  - It does not do everything that you might do in a production environment
  - It uses the Google style guide to structure the code
    - You should use a style guide and there are several available
  - It comibines a set of rechnologies that are proven to work well together
  - You are free to modify

3 - Exercise 0: Setting up Shop
The github repository for the sample application
The readme has been modified to show you the complete method for getting app up and running
  - https://github.com/kwhinnery/todomvc-plusplus
There is a website which provides PostgreSQL as a service for anyone with trouble running on the local system
  - https://www.elephantsql.com
  - There is a free tier available for testing
  - You will need to do database migrations
    - sequelize db:migrate is what the instructor uses to update db configuration
    - npm install -g sequelize-cli
The taskrunner for the application is Grunt
  - running grunt at the command line should work
  - You will need to run grunt collect_static if style sheets are not loading
The config directory is loosely based around the way Django is configured

4 - Serving HTTP Requests with Express
Express is a core component of Node, stylistically speaking it is similar to frameworks
  - Sinatra from the Ruby language
  - Nancy from the C# language
Express is the most popular Node module for routing 
If you want Express to do anything extra you will need to install middleware
  - This reduces bloating as you only add what you required
  - There are no proper standards

5 - The Web Server Code Demo
Demonstration of express 
More information on Node, express & internals
  - https://github.com/marb61a/Course-Notes/blob/master/Javascript/NodeJS/Learn%20and%20Understand%20NodeJS

6 - Alternatives to Express
The alternatives to express are
  - Hapi
  - Sails
  - Koa

7 - Exercise 1: Hacking on Express
The challenge is to resolve issues that the official repository has 
Official Repository
  - https://github.com/kwhinnery/todomvc-plusplus/issues?utf8=%E2%9C%93&q=is%3Aclosed%20label%3Aexercise1

8 - Exercise 1 Solution
To write the dependencu you are installing to the package.json file
  - npm install --save
The installation package needed to resolve an issue is morgan
Example Syntax
  - The instructor is from Twilio and the tradition there is to include a no-shenanigans header with every
  - http repsponse which one of the challenges needs to do on the /todos path
  // In the app.js file
  app.use('/todos', (request, response, next) => {
    response.set('X-Shenanigans', 'None');
    next();
  })
  
  // In the /src/server/webapp.js file
  // To remove the powered by express message
  app.set('x-powered-by', false);


                    Section 2 - Build Tools
1 - NPM Scripts & Grunt
There are different choices for build tools
A lot of times the choice will boil down to preference
  - NPM Scripts
    - No additional tools or installation is needed
    - There are local binary commands on $PATH
    - This is the conventional approach
  - Grunt Tasks
    - There is a mature plugin ecosystem
    - It is good at synchronous orchestration
    - It is a framework for tasks that work together

2 - NPM Scripts & Elastic Beanstalk
NPM scripts will be used during the deployment lifecycle in the course
There are 3 scripts that Elastic Beanstalk cares about
  - start -- create Node process for the instance
  - prestart -- run prior to the start command
  - poststart -- run after the start command

3 - Build Tools Code Demo
Creating scripts that run in both of these environments
Example Syntax
  // The node environment is set to test & tests are done using mocha
  // https://mochajs.org
  // Grunt is the task manager that is used in the application
  // Grunt creates a Gruntfile.js file as it base
    // Also watch is installed which will watch when changes to files are made and run browserify
  // Nodemon is installed its syntax
    nodemon: {
      dev: {
        script: 'bin/server.js',
        options: {
          // Contains files to ignore as changes are not important
          ignore: ['node_modules/*', 'public', 'src/browser']
        }
      }
    }
  // Nodemon and watch should run concurrently which need to be installed
  concurrent: {
    dev: {
      tasks: ['watch', 'nodemon'],
      options: {
        logConcurrentOutput: true
      }
    }
  }
  The gruntfile.js uses loadNpmTasks to load each of the tasks
  There is a custom init_static.js file in the bin/tasks folder
  var path = require('path');
  var fs = require('fs-extra');
  
  module.exports = function(grunt){
    let log = (str) => {
      grunt.log.write(`[init_static]: ${str}`);
    }
    
    grunt.registerTask(
      'init_static',
      'Initialise static asset directory with unprocessed assets',
      function(environment){
        var publicPath = path.resolve(__dirname, '..', '..', 'public');
        var staticPath = path.resolve(__dirname, '..', '..', 'browser', 'static');
        fs.removeSync(publicPath);
        fs.mkdirSync(publicPath);
        fs.copySync(staticPath, publicpath);
        log(`Static asset directory initialised at ${publicPath}`);
      }
    )
  }

4 - Alternatives & Friends of Grunt

5 - Exercise 2: Enhancing our Build Tools
  - https://github.com/kwhinnery/todomvc-plusplus/issues?utf8=%E2%9C%93&q=label%3Aexercise2

6 - Exercise 2 Solution



                    Section 3 - The Database
1 - Sequelize & PostgreSQL

2 - The Database Code Demo

3 - Alternative Databases

4 - Exercise 3: Enhancing our Data Model
  - https://github.com/kwhinnery/todomvc-plusplus/issues?utf8=%E2%9C%93&q=label%3Aexercise3

5 - Exercise 3 Solution Part 1

6 - Exercise 3 Solution Part 2



                    Section 4 - Production Environment
1 - Elastic Beanstalk & RDS

2 - Provisioning an Environment

3 - Production Environment Demo Part 1

4 - Production Environment Demo Part 2

5 - Production Environment Demo Part 3

6 - Production Environment Demo Part 4

7 - Alternative Production Environments

8 - Exercise 4: Deploying the Application Part 1

9 - Exercise 4: Deploying the Application Part 2

10 - Exercise 4: Deploying the Application Part 3



                    Section 5 - Front End Toolchain
1 - Day Two Agenda

2 - Browserify

3 - SASS & SASS Alternatives

4 - Browserify Code Demo

5 - SASS Code Demo

6 - Exercise 5: Building on Frontend Tools
  - https://github.com/kwhinnery/todomvc-plusplus/issues?utf8=%E2%9C%93&q=label%3Aexercise5

7 - Exercise 5 Solution



                    Section 6 - Vue.js
1 - Building with Vue.js

2 - Vue.js Code Demo
  - http://jsfiddle.net/yyx990803/okv0rgrk/

3 - Exercise 6: Building a Rich Client
  - https://github.com/kwhinnery/todomvc-plusplus/issues?utf8=%E2%9C%93&q=label%3Aexercise6

4 - Exercise 6 Solution Part 1

5 - Exercise 6 Solution Part 2



                    Section 7 - Real Time User Interfaces
1 - Using Socket.io

2 - Chat Application Code Demo Part 1

3 - Chat Application Code Demo Part 2

4 - Exercise 7: Real Time Features
  - https://github.com/kwhinnery/todomvc-plusplus/issues?utf8=%E2%9C%93&q=label%3Aexercise7

5 - Exercise 7 Solution



                    Section 8 - Production Monitoring
1 - Locust & Rollbar

2 - Load Testing Code Demo

3 - Exercise 8: Production Monitoring with Rollbar
  - https://github.com/kwhinnery/todomvc-plusplus/issues?utf8=%E2%9C%93&q=label%3Aexercise8

4 - Exercise 8 Solution



                    Section 9 - Web Analytics
1 - Google Universal Analytics

2 - Google Analytics: Overview & Custom Reports

3 - Google Analytics: Goals

4 - Universal Analytics in Node

5 - Exercise 9: Implement Google Analytics
  - https://github.com/kwhinnery/todomvc-plusplus/issues?utf8=%E2%9C%93&q=label%3Aexercise9

6 - Exercise 9 Solution

7 - Wrap-Up
