                    Build Node-js API's With OpenAPI Spec Swagger
                    Course Notes
                    
1 -  Create An API With Swagger
Swagger is a framework of API developer tools
  - http://swagger.io
To get started with Swagger you will need to install it
  - npm install -g swagger
To create a  new Swagger project
  - swagger project create project-name
It supports multiple frameworks 
  - Express, Hapi, Sails, Restify
  - Accepting one with generate an appropriate skeleton project
To start the generated project
  - Change into the generatd project directory
  - swagger project start project-name
Swagger has a built in editor 
  -swagger project edit
  - This automatically opens a browser window on localhost and a port it has chosen
  - There is a split pane view, on the right in the Name of the app and a list of the paths, on the left is source code
  
2 - Create An API Definition Schema Using Swagger
Designing a schema definition
Example Syntax for the sample todo application
  definitions:
    Todo:
      type: "object",
      properties: 
        todo_id:
          type: "integer",
          description: "ID for the todo"
        todo:
          type: "string",
          description: "The todo item",
        datecreated:
          type: "string",
          // The format is given because the data is serialised before being sent down the wire
          // and there is no date time type so the format will be checked after
          format: "date-time",
          description: "Timestamp when the todo was created, this is set by the server"
        author:
          type: "string",
          description: "Creator or author of the todo"
        duedate:
          type: "string",
          format: "date-time",
          description: "When the todo is due"
        completed:
          type: "boolean",
          description: "Indicates if the todo is completed or not"

3 - Define A HTTP GET Endpoint For A NodeJS API Server With Swagger
Updating the title of the app
  - Under the info: section
  - The UI on the right pane will update as you make changes
Define root path
Example Syntax
  routes:
    /:
      get:
        description: "This endpoint returns all the todos available in the database"
          // This is the function that will be called to fullfil the request
          operationId: "GetAllTodos"
          parameters: []
          responses:
            200:
              description: "An array of todos"
              schema:
                type: "array"
                items: 
                  $ref: "#/definitions/Todo"

4 - Define A HTTP POST Endpoint For A NodeJS Server With Swagger
There will also be a POST message supported on the root endpoint
Example Syntax
  post: 
    description: "Add a new Todo"
      operationId: "AddTodo"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "todo"
        desctiption: "The todo to be added"
        required: true
          schema:
            $ref: "#/definitions/Todo"
      responses:
        200:
          description: "Successful todo added"
      x-swagger-router-controller: "AddTodo"
    
5 - Define A HTTP GET Endpoint With URL Parameters For A Node.js Server With Swagger
We want to access a todo by its ID so a todo endpoint with a /id will be put in place
Example Syntax
  /todo/{id}:
    description: "Retrieve a single todo by its id"
    operationId: "FindTodoById"
    produces:
      - "application/json"
    parameters:
      - name: "id"
        in: "path"
        description: "id of the todo to get"
        required: true
        type: "integer"
        format: "int64"
    responses:
      200: 
        description: "todo response"
        schema: 
          $ref: "#/definitions/Todo"
    x-swagger-router-controller: "FindTodoById"

6 - Define A HTTP DELETE Endpoint For A Node.js API Server With Swagger
There will also need to be adelete method on this endpoint
Example Syntax
  delete:
    description: "Delete a todo by ID"
    operationId: "DeleteTodoById"
    parameters:
      - name: "id"
        in: "path"
        description: "id of the todo to delete"
        required: true
        type: "integer"
        format: "int64"
    responses:
      204: 
        description: "todo deleted"
    x-swagger-router-controller: "DeleteTodoById" 

7 - Define an HTTP PUT Endpoint For A Node.js API Server With Swagger

8 - Mock API Responses With Swagger

9 - Create A Node.js Function For A HTTP GET Request For A Swagger API

10 - Create A Node.js function For A HTTP POST request For A Swagger API

11 - Create A Node.js Function For A HTTP GET Request with URL parameters

12 - Create A Node.js function for an HTTP DELETE request for a Swagger API

13 - Create A Node.js function for an HTTP PUT Request For A Swagger API

14 - Connect An Existing React Application To An API Server Created With Swagger

15 - Build Monitoring Into Your API Server

16 - Perform Load Tests On An API Server Using-apache-jmeter
