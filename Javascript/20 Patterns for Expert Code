                    20 Patterns for Expert Code
                    Course Notes
                    
                    
                    Section 1 - My First Design Patterns
1 - The Course Overview 
Quick overview of the material to be covered by the course
Introduction to the author
The aim of the course is to
  - Understand the various design patterns
  - Understand when best to apply each of the patterns
The course makes some assumptions
  - You have readonable levels of JS knowledge
  - You also have an understanding of object oriented programming
The first section will provide a foundation for the rest of the sections

2 - The Problem with the Global Scope 
In this section there is going to be a demo chat application
  - Initially it will use global scope too freely
Source code for the course accompanies it
  - The first files looked at are index.html and script.js
  Script.js Syntax 
    var leadself = 'Me:',
        leadcomputer = "PC:",
        aSaid = ["This is a cyber chat"],
        msgYes = "yes, that's a great idea.",
        msgNo = "No, that must be a mistake",
        aSasiStuff = [
          "Like mould on books, grow myths on history",
          "She moved like a poem and smiled like a sphynx",
          "As long as we don't die this is going to be one hell of a story",
          "She laughed, and the desert sang",
          "You've got about as much charm as a dead slug"
        ];
  
    function talk(msg){
      echo(leadself + msg);
    } 
    
    function replayYesNo(){
      var msg = Math.random()>.5 ? msgYes : magNo;
      echo(leadcomputer + no);
    }
    
    function saySassyStuff(){
      var msg = aSassyStuff[Math.floor(Math.random()*aSassyStuff.length)];
      echo(leadcomputer + msg);
    }
    
    function echo(msg){
      aSaid.push("div" + msg + "div");
      
      var aSaidLength = aSaid.length,
          start = Math.max(aSaidLength - 6, 0),
          out = "";
      
      for(var i = start; i < aSaid.length; i++){
        out += aSaid[i];
      }
      
      $('.advert').html(out);
      $('#talk span').text(msg);
    }
  
3 - Moving to One Object and Namespace 
The Object Literal Pattern is the simplest pattern to use
Pattern Syntax using the code from the previous section
  var o = {
    var leadself: 'Me:',
        leadcomputer: "PC:",
        aSaid: ["This is a cyber chat"],
        msgYes: "yes, that's a great idea.",
        msgNo: "No, that must be a mistake",
        aSasiStuff: [
          "Like mould on books, grow myths on history",
          "She moved like a poem and smiled like a sphynx",
          "As long as we don't die this is going to be one hell of a story",
          "She laughed, and the desert sang",
          "You've got about as much charm as a dead slug"
        ];
  
    talk: function(msg){
      this.echo(this.leadself + msg);
    },
    
    replayYesNo: function(){
      var msg = Math.random()>.5 ? this.msgYes : this.msgNo;
      this.echo(this.leadcomputer + no);
    }, 
    
    saySassyStuff: function(){
      var msg = aSassyStuff[Math.floor(Math.random()*aSassyStuff.length)];
      this.echo(this.leadcomputer + msg);
    },
    
    echo: function(msg){
      this.aSaid.push("div" + msg + "div");
      
      var aSaidLength = this.aSaid.length,
          start = Math.max(aSaidLength - 6, 0),
          out = "";
      
      for(var i = start; i < aSaid.length; i++){
        out += this.aSaid[i];
      }
      
      $('.advert').html(out);
      $('#talk span').text(msg);
    }
  
  }

4 - The Module Design Pattern 

5 - The Module Reveal Pattern 

6 - Controlling the Global Access Completely 



                    Section 2 – Creational Design Patterns
1 - The Singleton Design Pattern 

2 - The Factory Design Pattern 

3 - The Abstract Factory Design Pattern 

4 - The Builder Design Pattern 

5 - The Builder Design Pattern Continued 

6 - The Prototype Design Pattern 



                    Section 3 – Structural Design Patterns - Part 1
1 - Abstracting Our Singleton 

2 - The Adapter Design Pattern 

3 - The Composite Design Pattern 

4 - The Decorator Design Pattern 



                    Section 4 – Structural Design Patterns - Part 2
1 - The Fly Weight Design Pattern 

2 - The Façade Design Pattern 

3 - Getting Things Working Again 

4 - The Bridge Design Pattern 

5 - The Proxy Design Pattern 



                    Section 5 – Behavioral Design Patterns
1 - The Chain of Responsibility – Part 1 

2 - The Chain of Responsibility – Part 2 

3 - The Observer Design Pattern – Adding and Dispatching Events 

4 - The Observer Design Pattern – Removing Events 

5- The State Design Pattern 
