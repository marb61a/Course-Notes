                    Secure Authentication for Web Apps & APIs Using JWTs
                    Course Notes


                    Section 1 - JSON Web Tokens
1 - Getting Started
Quick run through of the agenda
Course has made demo application available in angular 1 & 2 and also React
Course will use Angular 2 code samples
  - https://github.com/chenkie/angular2-user-authentication
  - https://github.com/chenkie/angular1-user-authentication
  - https://github.com/chenkie/react-user-authentication
    - ** if using the React version you may need to create an env file at the root of the project
API that course will be using, it requires having MongoDB installed
  - https://github.com/chenkie/user-authentication-api
Live version of the API is being served at this link
  - https://user-authentication-api-ocokqryugz.now.sh/api/

2 - Application & API Demonstration
Quick demonstration of the example application
The different frameworks are pretty much the same apart from a couple of lines
The Demo API
  - Is a simple REST APi that allows users to sign up and log in
  - When a user has been authenticated a JSON Web Token is returned in the response
  - The API has a resource called instructors which returns a list of instructors
A quick demonstration of what a JSON Web Token looks like under the bonnet
  - Response has the key token and long string
  - Postman is used as part of the demo and is a chrome based add on
    - https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en

3 - Challenge: Run the Finished Application
  - https://github.com/chenkie/user-authentication-api  
  - https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop

4 - JSON Web Token Basics

5 - Challenge: Inspecting a JWT
  - https://jwt.io/



                    Section 2 - JSON Web Tokens & Single Page Applications
1 - Traditional Authentication

2 - JWT Authentication

3 - Securing the Payload

4 - Implementing Authentication with JWT

5 - Challenge: Creating the Login & Signup
  - https://github.com/chenkie/angular2-user-authentication/tree/01-implementing-auth-starter

6 - Creating the Login & Signup Solution
  - https://github.com/chenkie/angular2-user-authentication/tree/01-implementing-auth-solution
  
  
                    Section 3 - Client Side Sessions
1 - Server-Side vs. Client-Side Sessions

2 - Q&A: JWT’s and Security

3 - Challenge: Expire Time
  - https://github.com/chenkie/angular2-user-authentication/tree/02-client-sessions-starter

4 - Expire Time Solution
  - https://github.com/chenkie/angular2-user-authentication/tree/02-client-sessions-solution



                    Section 4 - User Information in the Payload
1 - Decoding a JWT

2 - Payload Best Practices

3 - Challenge: Reading the Payload
  - https://github.com/chenkie/angular2-user-authentication/tree/03-user-profile-starter

4 - Reading the Payload Solution
  - https://github.com/chenkie/angular2-user-authentication/tree/03-user-profile-solution
  
  
  
                    Section 5 - Protecting Resources
1 - How JWT’s Protect Resources

2 - Exploring JWT Middleware

3 - Making Authenticated Requests

4 - Challenge: Protecting Resources
  - https://github.com/chenkie/angular2-user-authentication/tree/04-protecting-resources-starter

5 - Protecting Resources Challenge Solution
  - https://github.com/chenkie/angular2-user-authentication/tree/04-protecting-resources-solution
  
  
  
                    Section 6 - Protecting Routes
1 - Client-Side Considerations

2 - How Client-Side Routes are Protected

3 - Challenge: Protecting Routes
  - https://github.com/chenkie/angular2-user-authentication/tree/05-protecting-routes-starter

4 - Protecting Routes Solution
  - https://github.com/chenkie/angular2-user-authentication/tree/05-protecting-routes-solution

5 - Further Reading & Wrap-Up
