                    Cyber Security Source Code Defender
                    Course Notes
                    
                    
                    Section: 1 - Security Code Review Overview
1 - Security Code Review - Overview
Introduction to the course and the instructor
Agenda will cover 4 main areas
  - Security Code Review
  - Compliance
  - Guidelines
  - Challenges
SDLC - Software Development Lifecycle
There is a tutorial available at the following address
  - https://www.tutorialspoint.com/sdlc/sdlc_overview.htm
The SDLC has issues
  - No security controls considered
  - Functionality is the only consideration
  - No threat analysis
  - Vulnerable functions used across the application
  - What were the consequences eg breaches
Microsoft has the Security Development Life (SDL)
  - https://www.microsoft.com/en-us/sdl/
Microsoft SDL Framework
  - Security reviews are added through the SDLC
  - Worldwide Standard
  - Empowers Software Developers
  - Threat Modeling
The earlier that a bug is caught the cheaper it is to fix
SDL Phases
  - Requirements
    - Establish Security Requirements
    - Create Quality Gates
    - Security & Privacy Risk Assessment
  - Design
    - Establish Design Requirements
    - Analyse attack surface
    - Threat Modeling
  - Implementation
    - Use Approved Tools
    - Deprecate unsafe functions
    - Static Analysis
  - Verification 
    - Dynamic Analysis
    - Fuzz Testing
    - Attack Surface review
  - Release
    - Incident Response Plan
    - Final Security Review
    - Release Archive
  - Response
    - Execute incident response plan

2 - Compliance, Guidelines, And Challenges
Compliance -
Enforcing Security Code Review
  - Payment Card Industry (PCI) Standard
    - Manadatory if you store, process or transmit credit card data
    - Banks, Financial Institutions, Merchants
  - ISO27001
    - Highest standard in the industry
    - Demonstrates quality of process to customers
  - Sarbannes-Oxley (SOX) JSOX Japanese SOX
    - US Federal Law
    - Certification of Financial Information
    - Applicable to all public companies
  - HIPAA -- Health Insurance Portability and Accountability Act 
    - Mandatory standard
    - Intended to protect confidentiality of medical records

Guidelines-
  - OWASP -- Open Web Application Security Project
    - https://www.owasp.org/index.php/Main_Page
    - Web based vulnerabilities only
    - Very well documented
  - CERT
    - Secure Coding Standards
    - http://www.cert.org/secure-coding/
  - NIST
    - Security considerations in the SDLC
    - https://www.nist.gov/publications/security-considerations-system-development-life-cycle
    
Challenges
  - Lack of threat modeling
  - Bug Verification
  - Technical and Business reports
  - Countermeasures Implementation
  - Tools Limitations
  - Absence of tools
    


                    Section: 2 - Threat Modeling
1 - Threat Modeling - Overview
Very important step in Code Review
Section Agenda
  - Threat Modeling Introduction
  - Decompose the application
  - Determine and Rank Threats
  - Mitigation Strategy
What is threat modeling
  - Identify threats trying to exploit the application
  - Identify, measure and mitigate thhe risks associated with those threats
  - Developed and used initially by Microsoft
  - Requires a mature security team to be implemented
Why Threat Modelling
  - Help understand the application functionality in detail
  - Helps to scope the Security Code Review process
  - Helpd to identify and fix bugs before moving to production
  - Very useful for security code reviewers
How Does It Work
  - Decompose the application
    - Full understanding of the application and its interaction with external entities
    - Fully understand the context eg Credit Card Payments vs Search Engine
  - Determine and Rank threats
    - Categorise threats by type and rank the risk level
  - Determine the Countermeasures and mitigation

It is very important that you know the application context before starting a code review!!!!!!

2 - Decompose The Application
Remember that Scope is important
  - Full understanding of the application and its interaction with external entities
Threat Moeling Example used located at
  - https://www.owasp.org/index.php/Application_Threat_Modeling
External Dependencies
  - In this case its not related to the source code
  - The threat lies in the execution environment eg OS
Entry Points
  - Any input received by the application that can be influenced by a person
Threat Targets
  - Includes Physical and Abstract Assets
Trust Levels\Authorisation
  - Cross referenced with Entry Points and Assets
The result of the above is a Data Flow Diagram
  - Data Flow Diagram definition is found at -- https://en.wikipedia.org/wiki/Data_flow_diagram
  - It will show you a visual representation of your application

3 - Determine And Rank Threats
There are multiple agorithms available for ranking and determining threats
STRIDE - This is an acronym whose categorisation is based on attacker goals
  - Spoofing -- A threat action aimed at illegally accessing and using another persons credentials eg username and password
  - Tampering -- A threat action aimed at maliciously changing/modifying persistent data suach as database data of information that
                  is in transit across a network such as the internet.
  - Repudiation -- This is a threat action aimed at performing operations that maybe illegal in a system that lacks the ability
                   to perform a trace of the operations
  - Information Disclosure -- Threat action to read a file that it was not granted access to
  - Denial of Service -- This is a threat to deny access to valid users such as making a webserver unavailable
  - Escalation of Privilege -- This is a threat aimed at gaining privileged access to resources for gaining unauthorised access
                              to information or compromise a system
STRIDE is recommended by Microsoft
Threat analysis
  - Can be colour coded for better clarity 
    - Orange for vulnerability
    - Green for Scurity Control
Abuse cases are used to assess how controls maybe bypassed by attackers
Qualititative ranking can be used to assess threats
  - Likelyhood of exploitation vs Impact
  - Rank -- High, Medium or Low

4 - Mitigation Strategy
  - STRIDE
  - Spoofing
    - Appropriate Authentication
    - Protect secret data
    - Don't store secrets
  - Tampering
    - Appropriate Authorisation
    - Hashes
    - MAC's
    - Digital Signatures
    - Tamper Resistant Protocols
  - Repudiation
    - Digital Signatures
    - Timestamps
    - Audit Trails
  - Information Disclosure
    - Authorisation
    - Privacy-enhanced protocols
    - Encryption
    - Protect Secrets
    - Don't store secrets
  - Denial of Service
  - Escalation of Privilege

Checklist
  - Authentication
    - Prevent SQL Injection
    - Ensure that credentials are encrypted at rest and in transit
  - Authorisation
    - Access Matrix defined
    - Need-to-Know and Least privilege principles implemented
  - Non-Repudiation
    - Proper logging when processing sensitive actions
  - Integrity
    - Controls to prevent man-in-the-middle attacks in the network

The best practices use the standards that were defined previously
Mitigration Strategy List
  - Do Nothing -- When implementation vs cost not doable
  - Inform about the risk -- Warning end users only
  - Mitigate the risk -- Implement the security controls
  - Accept the risk -- Based on the business impact analysis


                    Section: 3 - CSCD - Buffer Overflow
1 - Buffer Overflow - Overview
This section will cover how to find and exploit buffer overflow vulnerabilities
Agenda covers
  - Buffer Overflows Overview
  - Types of Buffer Overflow
  - Security Code Review
  - Lab Demonstrations
  - Mitigation Strategies
Buffer Overflow techniques are around a long time but are still useful
Buffer Overflows are based on the idea of putting more things in a container than it can hold
Buffer Overflow mitigation will be about input size validation!!!!
There are 3 main types of overflows
  - Integer Overflows -- During Arithmetic Operations
    - Can also be underflows
  - Stack Overflows -- Using local variables
  - Heap Overflows -- When using variables allocated in memory dynamically

2 - Integer Overflow - Overview

3 - Integer Overflow- Finding The Bug Lab

4 - Integer Overflow- Verifying The Bug Lab

5 - Integer Overflow- Mitigation Techniques Lab

6 - Stack Overflow - Overview

7 - Stack Overflow- Finding The Bug Lab

8 - Stack Overflow- Verifying The Bug Lab

9 - Stack Overflow- Mitigation Techniques Lab

10 - Heap Overflow- Overview Part 1

11 - Heap Overflow- Overview Part 2

12 - Heap Overflow- Finding The Bug Lab

13 - Heap Overflow- Verifying The Bug Lab Part 1

14 - Heap Overflow- Verifying The Bug Lab Part 2

15 - Heap Overflow- Mitigation Techniques Lab



                    Section: 4 - CSCD - Web-Based Vulnerabilities
1 - Web-Based Vulnerabilities - Overview

2 - SQL Injection

3 - SQL Injection- Finding The Bug Lab

4 - Injection- Verifying The Bug Lab

5 - SQL Injection- Mitigation Techniques Lab

6 - Cross-Site Scripting

7 - Cross-Site Scripting- Find The Bug Lab

8 - Cross-Site Scripting- Verifying The Bug Lab

9 - Cross-Site Scripting- Mitigation Technique Lab

10 - File Inclusion

11 - File Inclusion- Find The Bug Lab

12 - File Inclusion- Verifying The Bug Lab

13 - File Inclusion- Mitigation Techniques Lab

14 - Directory Traversal



                    Section: 5 - CSCD - Source Code Fuzzing with AFL
1 - Source Code Fuzzing Lab- Running AFL Fuzzer

2 - Source Code Fuzzing Lab- Crash Analysis

3 - Source Code Fuzzing Lab- Verifying The Bug

4 - Automated Analysis Overview

5 - Automated Analysis Techniques

