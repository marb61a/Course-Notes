                    Certified Secure Web Application Engineer (CSWAE) 
                    Career Academy Notes
                    
                    

                    Course 01 - Web Application SecurityAccess 
Core Objectives of the course
  - Provide you with knowledge needed to design and develop secure web applications
  - Provide you with knowledge to test web apps for vulnerabilities

Things must be defined first
  - Define Web App Security
  - Understand web app challenges
  - Understand the most commnon threats
  - Review Common defence mechanisms used
                    
                    
                    Course 02 - Secure SDLC  
Web Application security should be considered right the way through the development process
Security touch points may require additional budgeting and should be built into the project plan
It is much more cost effective to include security in the beginning than finding vulnerabilities in production

SDLC - Software Development Life Cycle
Following an SDLC approach to systems development results in
  - Higher Quality
  - More alignment with user needs
  - Consistency
  - Better Security

A Secure Software Development Life Cycle is a structured approach to developing secure Web Applications
Essentially it is the integration of Security into the development lifecycle
It is also known as the S-SDLC

Reduce Cost
  - Building security in is much more cost effective than the cost of releasing patches and maintenance
  - The ide is to identify and manage rick earlier in the development of systems rather than towards the end of the process

Why Change
  - Customers expect a secure reliable service
  - Media coverage will bring security to the forefront and any problems may lead to a loss of reputation
  - There is a responsibility on the enterprise to protect customer data
    - Businesses are being held more accountable for security related incidents
      - Fines and Penalties are being imposed
      - This means that there a much greater acceptance of responsibility is needed for data protection

Companies
  - Need to
    - Recognize their responsibilities
    - Build in processes to protect information assets
  - Many either
    - Have not admitted that they have security problems
    - Have only commited to protecting the network through hardware implementations 
    
    
                    
                    Course 03 - OWASP TOP 10   
                    
                    
                    Course 04 - Risk Management 
Risk is at the very centre of security activities because it justifies what controls are necessary on the system
Security should be focused on known risks and vulnerabilities not with a scattershot approach
Risk Management is defined as
  - The process of identifying and analysing risk to ensure that adequate controls are in place to control the risk.
Risk Managements is an important tool used to determine which risks must be accepted or which must be mitigated
Risk must be properly cost effective as it makes little sense to spend more protecting something than it is worth
Every Organisation should be able to identify and track security risks and vulnerabilities to the web application on a consistent basis
As a security professional you must be able to translate security vulnerabilities into being understood by the business
  - You must be able to identify impact 
      - It is not enough to identify risk you must relate it to loss
      - How do you justify the cost of mitigation controls
Risk Assessment is the process of identifying
  - Assets
  - Vulnerabilities
  - Likelihood of damage
  - Estimates on the recovery costs
  - Summary of defensive measures available and their costs
  - Estimated possible savings from better protections
Risk Mitigation is the implementation of controls needed to to reduce or remove risks to protected assets
  - The goal in risk mitigation is to reduce risk to an acceptable level
  - The total removal of risk is impossible
  - Some organisations embrace higher risks becuse it maybe advantageos to them eg Higher Profits
Risk Management should begin during project initiation
  - During the requirements phase of a project risks should be identified and tracked until project completion
  - Ongoing reviews should be scheduled during the life of the application
Idenifying these risks early allows the system to be designed and developed to protect against these risks

                    
                    
                    Course 05 - Threat Modeling 
An important part of good system design is to understant the environment that it will operate in.
This is where Threat Modeling is important so as to undersatnd Threat Agents and Threat Sources
Threat Modeling - A structured process of viewing an application as an attacker would is order to see vulnerabilities and risks
at the design level
Design flaws are best found at architecture level rather than at the code level, this can cause issues for developers who are used
to digging into source code and do not see the big picture. Understanding design flaws is understanding single points of failure, it
is understanding choke points or weak points.
The steps involved in performing Threat Modeling are
  - Identify Security Objectives
    - The security objectives should be driven by a number of factors including
      - Data Classification
        - The risk tolerance that the enterprise is willing to accept is related to the sensitivity of the data being processed.
          It will also drive the level controls that should be implemented for a given vulnerability
      - Regulatory & Legal
        - Many industry and government standards require that application security controls be implemented to safeguard user information
      - SLA & Third Party Agreements
        - Upstream and downstream parties may have requirements for uptime and other standards that will require your application
          to deploy application security controls
      - Reputation
        - A customer must have trust in the company that they are doing as much as possible to protect their information. Security
          breaches can have significant consequences to the reputation of the company
  - Application Architecture Review -- The following should be reviewed
    - Components
    - Data Stores
    - Trusted Paths
    - Processes
    - Data Flow
  - Application Decomposition -- Each of the items identified during the architecture review should be broken down further to identify
    - Data Flows
    - Trust Boundaries
    - Subsystems and Processes
    - Systems Of Records (SOR's)
  - Identify Threats -- What are the threats to the application
    - Potential Threats could be
      - Internal Employees
      - External Users
      - Hackers
      - Connections to 2 parties
    - Threats do not have malicious in intent
  - Indentify Vulnerabilities
  - Determined Countermeasures

Threat Modeling
  - Outsourcing or Offshoring companies and processes should also be included
  - Do offshore resources have access to internal systems remotely
    - Do they do background checks
    - Have they been vetted to ensure that their processes include security
  - It is a best practice to have security items outlined in requirements for vendors and signed off on

There are differnt Threat Modeling methodologies, one of the most propular pin previous times was STRIDE
STRIDE is an acronym which stands for
  - Spoofing Identity
    - Sending credentials in the clear via basic HTTP Athentication
    - Storing credentials in cookies or tokens
    - DNS Spoofing
  - Tampering with data
    - SQL Injection
    - Modifying cookies and form data
    - Unauthorized access to data stores
  - Repudiation
    - SQL Injection
    - Modifying cookies and form data
    - Unauthorized access to data stores
  - Information Disclosure
    - Error messages that reveal system details
    - Sniffing unencrypted traffic in transit
    - Access to unsecured pages
  - Denial of Service
    - DoS Attacks
    - Applications that react poorly to errors or exceptions
    - Poorly Written Queries
  - Escalation of privilige
    - Weak authorization components
    - Impersonation attacks
    - Not validating users properly
    - Defaulting services with admin rights

Rank the threats - DREAD
Once threats have been identified there needs to be a method of ranking threats so that proper controls can be put in place
  - Damage Potential
    - How much damage is caused if thevulnerability is exploited
  - Reproducibility
    - How easy is it to reproduce the attack
  - Exploitability
    - How easy is it to exploit the vulnerability
  - Affected Users
    - Number or percentage of users affected
  - Discoverability
    - How easy is it to discover the vulnerability

                    
                    Course 06 - Authentication and Authorization Attacks
                    
                    
                    Course 07 - Session Management
                    
                    
                    Course 08 - Security Architecture 
One of the areas found lacking in organisations today
Design Considerations
  - What are the security requirements of the system
    - Who will have access to the system
      - Internal Users
      - External Users
      - Vendors
  - What are the functional requirements of the system
    - What processes will be exposed
      - Online balance transfer
      - Password Maintenance
      - Bill Pay
  - Will external services be used for internal functionality
    - Credit History Verification
    - Online Product reviews
    - 3rd party account servicing
  - Sometime business requirements can conflict with security best practices
    - For example in some cases users should be able to use their email address as their user ID
  - 3rd Party vendors
    - Do the 3rd party vendors have security processes
    - How will you communicate with vendors
    - Do SLA's have security provisions
    - How can you verify
  - How much traffic will be anticipated
    - Must design for the availability of the system
    - What is the acceptable downtime
    - Built in redundancy

                    
                    Course 09 - Input Validation and Data Sanitization  
                    
                    
                    Course 10 - AJAX Security  
                    
                    
                    Course 11 - Insecurity Code Discovery and Mitigation  
                    
                    
                    Course 12 - Application Mapping  
                    
                    
                    Course 13 - Cryptography 
                    
                    
                    Course 14 - Testing Methodologies
Each testing engineer will have an individual style but there will be formal methodologies too
While a methodology is provided the direction of the testing will be guided by what you need to find out about the application
You may also need to adjust test depending on findings
Tesing an application
  - Map the application involves identifying
    - Linked Content
      - Use a web application proxy to parse the content passively
      - Configure your browser to use a plugn to watch HTTP traffic
      - Passively browse the application, click on every link and button
      - Create new logins for all levels of users
      - Monitor both requests and responses using a web proxy
    - Access Methods
      - Look for instances where variables are passed to function calls
      - Observe the application when passing invalid data to function calls
      - Map application content and functions based on user roles
    - Public Resources
      - Use search engines to determin if there is any cached or indexed content for the application
      - Search email, blogs etc any source that can provide information about the application
      - Search for published WDSL's to gather a list of function names and variables used by the application
    - Other Content
  - Analyze the application
  - Access Handling
    - Test Authentication
    - Test Session Management
    - Test Access Control
  - Input Handling
    - Test All Parameters
    - Test Functionality
  - Application Logic
    - Test Client Side Controls
    - Test Business Logic
  - Information Leakage
    - Test for detailed error messages
  
