                    Web Application Pentesting - Course Notes
                    
                    
1 - Course Introduction
There will be material for begginer, intermediate and advanced topics
Course will cover
  - HTTP\HTTPS protocol basics
  - Understanding Web Application Architectures
  - Lab setup and tools of the trade
  - Converting your browser into an attack platform
  - Traffic interception and modification using proxies
  - Cross Site Scripting
    - Types
      - Reflected
      - Persistent
      - DOM Based
    - Filtering XSS
    - Evading XSS Filters
    - Cookie Stealing and Session Hijacking
    - Self-XSS
    - BeeF
  - SQL Injection
    - Error Based
    - Blind
    - Second Order Injections
  - Broken Authentication and session management
    - Session ID Analysis
    - Custom Authentication
  - Security Misconfigurations
  - Cross Site Request Forgery
  - Insecure Cryptographic Storage
  - Clickjacking
  - And more....

2 - HTTP Basics
Hypertext Transfer Protocol (HTTP)
  - It is a Client-Server based architecture
  - It uses a Request-Response model to serve resources
  - Resources are identified by a Uniform Resource Identifier (URI)\Uniform Resource Locator (URL)
  - The main versions in use are HTTP1.0 & 1.1
    - 1.1	can reuse connection for multiple	URIs	  
  - A quick demonstration to show how HTTP process works by using curl
    - Curl is a command line tool for transferring data with URL's
    - It works with many protocols such as HTTP, HTTP/2, FTP among others
    - https://curl.haxx.se
    - curl -v url -- This will show verbose mode
      - This will show the HTML structure of the page div's etc
  - Example requires that curl, netcat and Wireshark be installed
    - Netcat (often abbreviated to nc) is a computer networking utility for reading from and writing to network connections
      - http://nc110.sourceforge.net
    - There is a cheet sheet for commands available at the following address
      - https://www.sans.org/security-resources/sec560/netcat_cheat_sheet_v1.pdf
    - Wireshark is a network protocol analyser for both Windows and *nix based machines
      -https://www.wireshark.org
      - This means that you can examine network traffic at the packet level
      - 99% of websites use HTTP over TCP rather than UDP
  
  
3 - Netcat Lab
Full demonstration on using Netcat
Netcat is a replacement for Telnet
Syntax for connection to a site
  - nc www.google.com 80 -- This will connect to the google site on port 80 ()
    - Not advisable to do this with Google but the domain you are testing instead
Issue a HTTP request
  - GET /HTTP/1.0
  - Host www.google.com
You will get the HTML content of the page, the server will usually disconnect after completion
Using HTTP 1.1 will not disconnect
Using the Connection: close option will close the server connection


4 - HTTP Verb Tampering
HTTP Request methods are operations that can be run on resources on the server
  -  GET	
   – Parameters in URL	
  - POST	
   – Form	submissions, data	in message body	
  - OPTIONS	
   – List	of methods supported for URL	
  - HEAD	
   – Response	for	GET	but	no message	body	
  - TRACE	
   – Echo client request back	for	diagnosis	
  - PUT	
   – Store in URI	
  - DELETE	
   – Delete	resource	

5 - Verb Tampering with NMap
Metasploit has a module called Options, in order to use it at the Metasploic prompt type
  - use auxilliary/scanner/http/options
  - show options      -- This will show the HTTP options available
    - You will need to fill in RHOSTS IP Address
    - You can also set the port on RPORT
  - run               -- This will run the scanner
  - Options is use to enumerate the HTTP options available on a remote system
  - Sample scan shows POST, Options, GET and HEAD methos allowed

Using Options for Verb Tampering
  - use auxilliary/scanner/http/verb_auth_bypass
  - show options      -- This will show the HTTP tampering options available
  - run               -- This will run the scanner
 
Using NMap
  - Using Nmap nse scripts
  - Documentation available at -- https://nmap.org/nsedoc/scripts/http-methods.html
  - The script being used is called http-methods.nse
  - nmap --script=http-methods.nse 192.x.x.x -n -p 80
    - This gives Port, State and Service
  -  Retests may not be safe if there are DELTE methods

Using NMAp for Verb Tampering
  - The script being used is called http-method-tamper.nse
  - nmap --script=http-method-tamper.nse 192.x.x.x -n -p 80


6 - HTTP Verb Tampering Demo
Most web servers are no longer vulnerable to this attack
  - You may have to look at legacy systems or misconfigurations of software
There is a custom built site for demo purposes
The demo has a misconfigured .htaccess Apache server file
  Syntax
  AuthType Basic
  AuthName "Restricted Files"
  AuthUserFile "/etc/apache2/passwords"
  
  // Request method limitations means the verb tamper attacks can become applicable
  // Limitations in Apache .htaccess files are done with Limit tags
  // The below says to limit access to this resource via post only for valid users
  // This means that any other request method would be valid and would not require authentication
  // This misconfiguration is what leads to HTTP verb tamperiing
  <Limit POST>
    Require valid-user
  </limit>
Making a request via curl
  // Using POST instead of GET will cause an authentication error
  curl -v -X  GET http://192.168.1.11/secret
  
  
7 - Verb Tampering Lab Exercise
The solution is similar to the previous section
The demonstration system uses Tiny Core Linux

8 - HTTP Basic Authentication
A full list of HTTP Response Codes is available at
   - https://github.com/marb61a/Course-Notes/blob/master/Security/http%20status%20codes

At the protocol level there are only 2 types of authentication support
  - Basic Authentication
    - An indepth look at the Basic Authentication process is available at
      - https://docs.oracle.com/cd/E24191_01/common/tutorials/authn_http_basic.html
      - https://docs.oracle.com/cd/E39820_01/doc.11121/gateway_docs/content/authn_http_basic.html
  - Digest Authentication
Other authentication schemes such as Open ID are not part of the HTTP standard

There is a challenge application demo using Wireshark

9 - Attacking-Basic-Auth-Metasploit-Nmap
Demonstation an attack agains HTTP Basic Authentication using
  - Nmap and Metasploit
  

10 - HTML DOM
DOM - Stands for Document Object Model
The DOM is an API for manipulating HTML or XML documents
  - It provides a structural representation of the document
    - This allows for modification both visual and content by languages such as Javascript
There are indepth code and notes available on using Javascript to attack the DOM at
  - https://github.com/marb61a/Course-Notes/blob/master/Security/Development/Javascript%20For%20Pentesters


11 - Event Handlers
Once the page is loaded in the browser and the user is interacting with the page there are many different events that
can take place including
  - Clicks
  - Mouseovers etc
These events can be reacted to properly by using event handlers
Again the notes on Javascript for Pentesters will cover event handlers indepth
  - https://github.com/marb61a/Course-Notes/blob/master/Security/Development/Javascript%20For%20Pentesters
A list of event handlers in JAvascript is available at 
  - https://www.quackit.com/javascript/javascript_event_handlers.cfm


12 - HTTP Digest 2069
Looking at the HTTP Digest Authentication from the RFC 2069 perspective
Basic Athentication
  - User sends a username & password in plaintext
  - It is usually Base64 encoded but encoding is not encryption
  - Very insecure as public networks are often used
Digest Authentication
  - A hash of the password is sent
  - More information on Digest Authentication is available at
    - https://en.wikipedia.org/wiki/Digest_access_authentication
  - Digest auth is discussed in 2 RFC 2069 & 2617
In HTTP1.1 the digest uses 3 field values in the header
  - In the www-authenticate: digest field
    - Realm
    - Nonce
    - Opaque

13 - Cookies
Cookies are very important when hijacking sessions
  - https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie
Example Syntaxalert(document.cookie);
  // You will neb to have server running to test the examples
  // There are a multitude available for diifferent languages
  // Python for example python -m SimpleHTTPServer <port> where the port is an optional specification
  <html>
    <head>
    
    </head>
    <body>
      <h1 id="temp">Hello JS For pentesters</h1>
      <script>
        document.cookie = " sessionsid=1323";
          
        document.cookie = "userid=999";
        
        cookies = document.cookie.split(':');
        
        for(i = 0; i < cookies.length; i++){
          alert(cookies[i]);
        }
      </script>
    </body>
  </html>

14 - HTTP Digest RFC Authentication 2617

15 - Stealing Cookies 

16 - Exception

17 - HTTPStatelessness Cookie

18 - Advanced Form Manipulation

19 - HTTPSetCookie with HTTP Cookie

20 - SessionID

21 - SSL Transport Layer Protection

22 - SSL MITM Using Proxies

23 - File Extraction HTTP Traffic

24 - HTML Injection Basics

25 - HTML Injection In Tag Attributes

26 - A-XHR Basics

27 - HTML Injection 3rd Party Sources
