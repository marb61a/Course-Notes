                    PHP Web Application Security
                    Course Notes


                    Section 1 - Course Overview
1 - Course Overview
Brief intro to the author
9 out of 10 web applications have security issues
By the end of the course students will be able to defend against many threats
Students should be familiar with PHP heading into the course

2 - Introduction
PHP will be looked at because although the risk are technology agnostic solutions are specific
  - PHP has its own methods of dealing with risks and problems
This is not a hacking course
  - Vulnerable code will be examined to demonstrate risk
  - Attacks will be examined to demonstrate how problems are caused and resolved

3 - Is PHP Insecure?
There seems to be some evidence of PHP being insecure
There is a demonstration using the Mitre CVE 
  - CVE is an acronym standing for Common Vulnerabilities and Exposure
  - https://cve.mitre.org
  - There are a fair amount of entries for PHP and PHP based software
The instructor disagrees with the assessment and some of the perception is down to other factors
  - PHP is too widespread and is the number 1 web server technology
  - PHP is very easy to learn which facilitates mistakes
    - This was particularly true with older versions of the language

4 - Security Principles
There are several valid security principles
  - This section will explain 2 as they are used in a lot of differene applications
  - The first principle is Defense in depth
    - This basically means that several layers of security are used
    - There should be an expectancy that each layer wil fail eventually
  - The second principle is the Minimum Information Principle
    - This means that as little information as possible is provided but the task is completed
    - There will probably need to be a discussion with UX teams as they may want more information passsed on

5 - OWASP

6 - Summary
A brief summary of the material covered in the chapter



                    Section 2 - Input Validation
1 - Introduction
A brief overview of what the module is going to cover

2 - Online Shop
There is a sample application which is used dor demonstration during the course
  - The demo itself is an online shop
    - It comes with all the usual functionality of an online shop
  - It does have flaws built in
  - Code samples will have nothing to do with the sample shop but are secure code

3 - What Is Input?
What is input in the context of PHP
  - How can we access it, this we need to know so that we know where in the application input validation is needed
  - The example uses the LiveHTTPHeaders tool, this is a browser addon available for several browsers
    - This tool allows us to see HTTP requests
    - Everything that is returned can be manipulated
There are Super-Global arrays in PHP
  - This means that they are both global and directly accessible in functions
  - $_GET -- Arguably the most important as it contains URL data
  - $_POST -- The second most widely used, this allow PHP to access HTTP body data
  - This is where you need to validate information
  - There are others which are rarer in use
    - $_FILES -- This deals with file uploads
    - $_COOKIES -- This deals with files sent using the cookie HTTP request header
    - $_SERVER -- This mostly handles HTTP request data
There are further input sources
  - $_REQUEST -- A Super Global array that contains information from $_GET, $_POST and others
    - This can be configured eg what order these items are put into the $_REQUEST array
    - The course instructor recommends against using $_REQUEST at all
  - $_ENV -- This allows for accessing Environmental Variables
  - $HTTP_*_VARS -- These could be GET or POST vars and have been deprecated so should not be used
  - $_SESSION -- This contains session information, by default in PHP these are done with cookies
  
4 - Hacking the Shop
In the sample shop application
  - Most of the input is not validated at all
  - There are 2 aspects of the shop where this causes problems that will be examined in this section
  - The shop can be used to send spam and also get deep discounts
    - There is a contact tab in the sample application that will allow us to contact sellers we purchase from
    - When looking at the url the email address of the seller can be seen
      - This can be changed in the url and is passed on to the page
      - For example seller@example.com can be changed to evilmail@example.com
    - The email recipient address would need to be validated on the server
    - This can help prevent spam being sent by validating purchases by the sender from the seller
  - On the second part of the issue, basically wishing to change listed price
    - This example uses Firebu

5 - Validating Mandatory Input

6 - More Validation With PHP

7 - The ctype Extension

8 - The filter Extension

9 - PHP 7+ Typing

10 - Summary
A brief summary of the material covered in the chapter



                    Section 3 - Cross-site Scripting (XSS)
1 - Introduction
A brief overview of what the module is going to cover

2 - Cracking the Shop

3 - Anatomy of XSS

4 - Same-origin Policy

5 - Consequences of XSS

6 - Types of XSS

7 - Filtering Input

8 - Escaping Output

9 - Preventing XSS in JSON

10 - Cross-site Script Inclusion (XSSI)

11 - Browser XSS Protection

12 - Understanding Content Security Policy (CSP)

13 - Using Content Security Policy

14 - Allowing Inline Code in CSP

15 - Testing a Content Security Policy

16 - Summary
A brief summary of the material covered in the chapter



                    Section 4 - SQL Injection
1 - Introduction
A brief overview of what the module is going to cover

2 - Cracking the Shop

3 - Famous SQL Injection Incidents

4 - How SQL Injection Works

5 - Vulnerable Code Patterns

6 - Finding SQL Injection

7 - Preventing SQL Injection

8 - PHP Database Escaping Functions

9 - Prepared Statements with PDO

10 - Prepared Statements with MySQL

11 - Prepared Statements with PostgreSQL

12 - Prepared Statements with SQLite

13 - Prepared Statements with Oracle

14 - Prepared Statements with Microsoft SQL Server

15 - Summary
A brief summary of the material covered in the chapter



                    Section 5 - State Management
1 - Introduction
A brief overview of what the module is going to cover

2 - Cracking the Shop

3 - Cookies Explained

4 - Securing Cookies

5 - Sessions with PHP

6 - Session Attacks and Countermeasures

7 - Securing PHP Sessions

8 - HTTP Strict Transport Security (HSTS)

9 - Summary
A brief summary of the material covered in the chapter



                    Section 6 - Cross-site Request Forgery (CSRF)
1 - Introduction
A brief overview of what the module is going to cover

2 - Cracking the Shop

3 - Cross-site Request Forgery Explained

4 - CSRF Countermeasures

5 - Token Creation with PHP

6 - Clickjacking

7 - Preventing Framing

8 - Summary
A brief summary of the material covered in the chapter



                    Section 7 - Storing Passwords24m 51s
1 - Introduction
A brief overview of what the module is going to cover

2 - Hashing or Encryption?

3 - Hashing Algorithms

4 - Cracking MD5

5 - PHP Hashing Algorithms

6 - PHP Password Hashing API

7 - More Hashing

8 - Summary
A brief summary of the material covered in the chapter



                    Section 8 - Error Handling
1 - Introduction
A brief overview of what the module is going to cover

2 - Hacking the Shop

3 - PHP Error Levels

4 - PHP Error Configuration Settings

5 - Custom Error Handling

6 - Disabling Revealing Information

7 - Summary
A brief summary of the material covered in the chapter



                    Section 9 - Conclusion
1 - Introduction
A brief overview of what the module is going to cover

2 - OWASP Top Ten 1-5

3 - OWASP Top Ten 6-10

4 - Summary
