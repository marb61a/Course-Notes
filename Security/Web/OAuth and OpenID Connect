                    OAuth and OpenID Connect
                    Course Notes 


                    Section 1 - Introduction 
1 - Welcome 
A quick introduction to the course and the instructor

2 - What you should know before watching this course 
There are not too many prerequisites
  - When talking about OAuth it is OAuth2 that is being referred to
  - Understanding how HTTP redirects work
  - Securely storing information in the browser
  - Recommended to have Postman along with the Postman Interceptor installed
  - An OAuth server, there are Open Source ones available
  - An alternative is the Google OAuth Playground
    - https://developers.google.com/oauthplayground/
  - There is also the OpenID Connect playground
    - https://openidconnect.net
  - JSON web token inspector
    - https://www.jsonwebtoken.io

3 - Exercise files 
A quick guide to using the exercise files that accompany the course



                    Section 2 - What Is OAuth? 
1 - What is OAuth 2.0, and why does it matter? 
A lot of people think that they understand OAuth but they don't
  - It is not a password sharing mechanism or protocol
  - A lot of the misunderstanding comes from authorization (AuthZ) v authentication (AuthN)
  - OAuth is a framework for AuthZ only by design
  - The OAuth specification does not address Authentication at all
  - There are multipls plugins available that extend functionality
  - OAuth is for AuthZ without sharing AuthN
  - This is useful for things like using a Facebook account to register on another site without them having a password

2 - How does OAuth 2.0 work, and what problems does it solve? 
OAuth can be complicated
  - It boils down to the Oauth clients and the flows that are provided
OAuth is better than passwords
  - You will never have to share your password
  - Access can be revoked at any time if needed
  - A third party website can only do what it has been granted permission to do
  - Training users to put passwords and usernames into third party websites is a silly thing to do
OAuth Vocabulary
  - An exchange between sites is called a flow or grant type and there are different types
  - The permissions are called scopes and vary from site to site
  - Access is granted via a token
OAuth solves a major problem on the internet
  - Access can be granted to third parties without giving up control over passwords 
There are some challenges in OAuth
  - OAuth is a framework and as such it does not solve every issue
  - Solutions to these come through extensions
  - Extensions vary from vendor to vendor
  - Many of these are intepretations but there is a drive towards standardisation
  - Do you support OAuth is a dangerously simple question as the vendor may not support particular extensions

3 - How does it compare and contrast with other technologies? 
Comparing OAuth with other technologies
  - SAML -- Which comes from around 2002-03, it mainly an enterprise technology and it used for single sign on (SSO)
    - There is an extension for OAuth for SSO purposes
    - SAML is XML based so can generate heavy payloads
      - This can be a problem on mobile devices with slower internet connections
    - It is also not good for delegated access (an application acting on our behalf)
    - It is also a fairly old technology and was designed previous to modern API considerations
There are 3 main approaches for AuthZ & AuthN for API
  - API Keys which are often appended to the URL as a parameter
    - It is sometimes used as a HTTP header
    - This is the simplest and most common approach but has drawbacks
      - These keys are global for the account so get reused in a lot of places
      - The is little fine grained Auth information as they are generally all or nothing access
      - Compromised keys are invalidated very quickly which may cause problems for production apps unable to update quickly
  - Account Identifier & Secret 
    - This is effectively a username and password
    - This at its heart is a similar approach to the one used by API keys
  - OAuth
    - Easy to delegate selective access on behalf of a user
    - Revoking access if needed is relatively easy
    - This is a common approach and it supported in most stacks
    - The big drawback to using is that it is not well understood and is difficult to implement correctly

4 - What is OpenID Connect, and how is it different from OAuth? 



                    Section 3 - Core Terminology 
1 - Understanding the OAuth endpoints 

2 - OAuth tokens and their usage: Access, ID, and refresh 

3 - JWT token management: Security, validation, and revocation 

4 - The purpose of scopes and claims 



                    Section 4 - Client Credential: Authorization for Microservices 
1- Authorization in microservices 

2 - Lab: Build an example with the command line and Postman 

3 - Common security considerations 



                    Section 5 - Implicit or Hybrid: Authorization for Mobile Devices 
1 - Authorization for mobile apps and SPA 

2 - Lab: Build an example with JavaScript 

3 - Common security considerations 



                    Section 6 - Grant Type: Authorization Code 
1 - Authorization code for web applications 

2 - Lab: Build an example with Postman 

3 - Common Security Considerations 



                    Section 7 - Grant Type: Resource Owner Password Flow 
1 - Authorization in legacy applications 

2 - Lab: Build an example in curl 

3 - Common security considerations 



                    Section 8 - Server-Side Implementations 
1 - Lab: Configuring an OAuth server in PHP 

2 - Lab: Configuring an OAuth server in Node 

3 - OAuth 2.0 as a service using Okta 



                    Section 9 - Conclusion 
1 - Next steps 
A brief video giving the student some resources to continue studies and a quick thank you from the instructor
