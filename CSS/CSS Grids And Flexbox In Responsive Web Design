                    CSS Grids And Flexbox In Responsive Web Design
                    Course Notes


1 - 
Intro to the course and the instructor
The main focus will be using Flexbox on Day 1
A quick run through of what the course will try to cover
There is a GitHub repo available for the course which covers both days
Responsive Design has 3 characteristics 
  - Media Queries
    - The browser will report screen resolution
    - Based on current width serve an appropriate stylesheet
    - There is no Javascript involved
  - Image Resizing
    - Images should change depending on screen resolution
    - There are solutions on both server and client
    - There is a new HTML 5.1 picture tag
  - Grid based Layout
    - Consists of columns and rows

Floats
  - Were originally intended to float images
  - They are a hack right from the start
  - They feature row and cells
  - Rows are responsible for clearing the cells
  - Source ordering determines display
    - Some minor rearrangement is possible
  - One of the major disadvantages is equal column heights
Example Syntax
  // Row example
  <div class="row">
    <div class="col-1"></div>
    <div class="col-1"></div>
    <div class="col-1"></div>
    <div class="col-1"></div>
  </div>

  // A mechanism for row clearing example
  .row::after {
    content: "";
    display: table;
    clear: both;
  }
  
  // Styling
  .col-1 {
    float: left;
    margin-left: 4%;
    width: 20%;
  }
  
  // Wrap for a media query
  @media only screen and (min-width: 480px) and (max-width: 767px){
    .col-1{
      width: 44%;
    }
  } 
  
  // Wrap for mobile where items stack on one another
  @media only screen and (max-width: 479px){
    .col-1{
      width: 98%;
      margin: 1%;
      float: none;
    }
  } 

There can be layout problems with float
  - These can normally be resolved with a column equaliser script
There are exercises with each section from the github repo
  - These have html which must be restyled
  - These have different size columns which must be set

Example Syntax
  // Box-border model
  // border-box is not an inherited property in CSS
  // This is recommended to use as it will make things easier to get done is css
  html{
    box-sizing: border-box;
  }
  
  *,
  *:before,
  *:after{
    box-sizing: inherit;
  }



2 -
The chapter begins will demonstrating the exercise from the end of the previous chapter
  - There are some hints given
  - Border-box should with the mathematics involved
  - When clearing its the row that clears!!!!!



3 -
Most people do not fully understand how a float based grid system works
  - You should understand floats in order to understand why go to grid
Example Syntax
  // This example will use the same css file that was used previously
  // 
  // The grid system css
  // The double colon was introduced in CSS3 to differentiate the pseudo element from 
  // the pseudo class which has a single class
  .row::after{
    content: "";
    display: table;
    clear: both;
  }
  
  // This will ensure that the class works across all devices including mobile
  [class*='col-']{
    width: 92%;
    margin-right: 4%;
    margin-left: 4%;
    min-height: 1px;
  }
  
  .col-1-2,
  .col-1-4 {
    background-color: #ffc;
  }
  
  .col-2 {
    background-color: #fcf;
  }
  
  .col-3 {
    background-color: #cff;
  }
  
  .col-4 {
    background-color: #ccf;
  }
  
  // Desktop screens
  @media only screen(min-width: 768px){
    .col-1-2,
    .col-1-4 {
      width: 20%;
    }

    .col-2 {
      width: 44%;
    }

    .col-3 {
      width: 68%;
    }

    .col-4 {
      width: 92%;
    }
  }
  
There is also similar CSS for screens of 480px

Flexbox
These were the first layout elements
  - But not designed to layout whole web pages
It features flex-containers(rows) and flex-items(cells)
  - Both of these are required to work
  - The parent is the flex-container and the child is the flex-item
It excels at vertical centering and equal heights
It is very easy to reorder boxes
There are some disadvantages however
  - It was not designed to be locked down for layouts as it works in 1 dimension only
    - 1 dimension in this case is 1 continuous row
    - It can also be though of as a column
      - The flex container can also be set to row
  - The browser support and the syntax is challenging
  - Its in Bootstrap 4 so will need to be known

There are 3 versions of Flexbox available
  - 2009 -- Using display: box;
  - 2011 -- Using display: flexbox;
    - This is referred to as tweener syntax
    - Only works with IE10
  - 2016 -- Using display: flex;
    - This is the standards compliant syntax
    - The class will use standards compliant code
      - Prefixing may still be required depending on browser support that is required
Example Syntax
  // Using prefixing
  ul {
    display: -webkit-flex;                // Targets Chrome & Firefox
    display: -ms-flexbox;                 // Targets IE10
    display: flex;                        //
  }
Current Support
  - <= IE9                                // Not supported
  - IE10                                  // Tweener syntax supported
  - IE11 & EDGE                           // Full support but maybe buggy
  - Safari 7 & 8 + iOS Safari 7 & 8       // These require the webkit prefix
  - Others (including Opera)              // These support current syntax

4 -

5 -

6 -

7 -

8 -

9 -

10 -

11 -

12 -
