                    Create Native Mobile Apps with NativeScript for Angular
                    Course Notes


1 - Set up a native mobile app using the NativeScript CLI
Start off by installing the Nativescript package globally
  - npm i -g nativescript
This will install the TNS utilities needed to bootstrap a new application
  - tng create ng-native --ng
    - This creates a NativeScript project called ng-native

2 - Preview NativeScript apps in the iOS Simulator
To emulate the app on the iOS platform
  - tns emulate ios
To see what options are available on the iOS simulator
  - xcrun simctrl list
  - This gives a list of devices that can be previewed 

3 - Preview NativeScript Apps in the GenyMotion Android emulator 
Using the GenyMotion application for previewing apps for Android devices
  - https://www.genymotion.com
  - You can add prebuilt sample devices to test
  - Ensure Android SDK is intalled properly
To test the app on an Android device (emulator)
  - tns run android
  - GenyMotion should already be running a device when you run this command

4 - Create native mobile views using NativeScript XML
The fundamental building block for a NativeScript view is the StackLayout element
  - These are something similar to div elements

Example Syntax
  // app.component.html
  <ActionBar title="My App" icon="" class="action-bar">
  </ActionBar>
  
  // StackLayout elements stack items on top of one another
  <StackLayout class="p-20">
    // To change stacking to side by side
    <StackLayout orientation="horizontal">
      <Label text="NativeScript" textWrap="true"></Label>
      <Label text="Angular" textWrap="true"></Label>
    </StackLayout>
    
    // Another type of layout element is a grid layout where columns and rows can be specified
    // The width of columns can be specified too
    <GridLayout rows="auto" columns="auto auto">
      // Which column or row these elements belong to must be set, colums are zero indexed
      <Label text="NativeScript" textWrap="true" row="0" column="0"></Label>
      <Label text="Angular" textWrap="true" row="0" column="1"></Label>    
    </GridLayout>
    
    <Label text="Tap The Button" class="h1 text-center"></Label>
    <button text="TAP" (tap)="onTap()" class="btn btn-primary btn-active"></button>
    <Label [text]="message" class="h2 text-center" textWrap="true"></Label>
  </StackLayout>

5 - Style NativeScript views using CSS 

6 - Style NativeScript views using the default core theme

7 - Edit with live reloading using NativeScript livesync

8 - Add native mobile page navigation using Angular Router

9 - Add styles to active routes using nsRouterLinkActive

10 - Create a page title using ActionBar 

11 - Handle back navigation when using page-router-outlet

12 - Open an Angular component in a native iOS and Android popup modal 

13 - Display lists using NativeScript_s ListView component 

14 - Bind data to NativeScript Angular components using RxJS Observables

15 - Integrate a custom NativeScript UI component plugin via npm and registerElement

16 - Create a custom app theme using SASS for NativeScript 

17 - Modify status bar colors on iOS and Android with NativeScript


