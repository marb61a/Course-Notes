-- Question 1
--CREATE DATABASE Bonus_Pay

--USE Bonus_Pay

-- Question2
--CREATE TABLE Teams(
--	TeamID INT NOT NULL PRIMARY KEY,
--	Person_Name VARCHAR(64) NOT NULL
--)

-- Question 3
--CREATE TABLE Players(
--	PlayerID INT NOT NULL PRIMARY KEY,
--	Player_First VARCHAR(32),
--	Player_Last VARCHAR(32),
--	TeamID INT NOT NULL,
--	Player_Number INT NOT NULL
--)


-- Question 4
--INSERT INTO Teams VALUES (1, 'String Music'), (2, 'Hackers'), 
--(3, 'Sharp Shooters'), (4, 'Hammer Time')

--SELECT * FROM Teams


-- Question 5
--INSERT INTO Players VALUES
--(1, 'John', 'Smith', 1, 12), (2, 'Billy', 'Bobbit', 1, 2), 
--(3, 'Wil', 'Hurta', 2, 32), (4, 'Tim', 'Ouchy', 2, 22),
--(5, 'Eric', 'Byrd', 3, 6), (6, 'Ryan', 'Jordan', 3, 23), 
--(7, 'Wally', 'Hammer', 4, 21), (8, 'Ron', 'Hammer', 4, 44),
--(11, 'Al', 'Knotgood', 0, 0)

--SELECT * FROM Players


-- Question 6
--USE EmployeeDatabase

--SELECT * FROM employee WHERE Last_Name = 'Holman'


-- Question 7 
--SELECT * FROM Employee_his WHERE Hire_date < '2010/08/01'


-- Question 8
--SELECT * FROM Employee_his WHERE New_Salary > 50000


-- Question 9
--SELECT * FROM employee

--SELECT ROUND(SUM(Monthly_Salary), 2) FROM Employee_his


-- Question 10
--USE Bonus_Pay

--ALTER TABLE Players
--ADD Ranking VARCHAR(16)


--UPDATE Players
--SET Ranking = 'Ranked'
--WHERE PlayerID BETWEEN 1 AND 8
--UPDATE Players
--SET Ranking = 'Not Ranked'
--WHERE PlayerID = 11

--SELECT * FROM Players

-- Question 11
--USE Bonus_Pay

--CREATE OR ALTER VIEW VwPlayer AS
--SELECT * FROM Players

--SELECT * FROM VwPlayer


-- Question 12
--USE EmployeeDatabase

--CREATE VIEW VwHistory AS
--SELECT * FROM Employee_his
--WHERE New_Salary < 50000

--SELECT * FROM VwHistory

-- Question 13
--CREATE OR ALTER VIEW VwHistory AS
--SELECT * FROM Employee_his
--WHERE DepartmentID in (40, 60)

--SELECT * FROM VwHistory

-- Question 14
--DROP VIEW VwPlayer


-- Question 15 
--USE EmployeeDatabase

--SELECT * FROM employee
--DELETE FROM employee 
--WHERE EmployeeID IN (1, 100)

-- Question 16
--Implicit conversions are done automatically, 
--explicit has to be done manually using CAST or CONVERT
--This is used to force a conversion where implicit is not done

-- Question 17 
--76 bytes in this example


-- Question 18
--USE EmployeeDatabase

--CREATE PROCEDURE usp_employee_salary AS
--SELECT * FROM Employee_his
--WHERE New_Salary < 15000

--EXEC dbo.usp_employee_salary


-- Question 19
--SET NOCOUNT OFF

--SELECT * FROM employee
--WHERE OccupationID = 'CR_CR'

-- Question 20
--SELECT First_Name, Last_Name FROM employee
--WHERE OccupationID NOT IN ('CS_CS', 'HR_HRA', 'ACC_MAN')


-- Question 21
--SELECT First_Name, Last_Name FROM employee
--WHERE OccupationID IN ('QA_ST', 'COM_PROG')

-- Another method
--SELECT First_Name, Last_Name FROM employee
--WHERE OccupationID = 'QA_ST' OR 
--OccupationID = 'COM_PROG'

-- Question 22
--SELECT EmployeeID, DepartmentID FROM employee
--WHERE Last_Name = 'Holman' 
--UNION
--SELECT EmployeeID, DepartmentID FROM Employee_his
--WHERE New_Salary > 20000 OR DepartmentID = 120

-- Question 23
--SELECT EmployeeID, DepartmentID FROM employee
--WHERE Last_Name = 'Holman' 
--INTERSECT
--SELECT EmployeeID, DepartmentID FROM Employee_his
--WHERE New_Salary > 20000 OR DepartmentID = 120

-- Question 24
--SELECT * FROM employee
--SELECT * FROM Employee_his

--SELECT EmployeeID, DepartmentID FROM employee
--WHERE Last_Name = 'Holman' 
--EXCEPT
--SELECT EmployeeID, DepartmentID FROM Employee_his 
--WHERE New_Salary > 20000 OR DepartmentID = 120

-- Question 25
--SELECT * FROM employee
--SELECT * FROM department

--SELECT employee.EmployeeID, employee.First_Name
--FROM employee
--LEFT JOIN department ON
--employee.EmployeeID = department.EmployeeID


-- Question 26
--SELECT employee.First_Name, employee.EmployeeID
--FROM employee
--RIGHT JOIN department ON
--employee.EmployeeID = department.EmployeeID


-- Question 27 
--Another name for a cross join is a Cartesian Product as all 
--combinations will be returned


-- Question 28
--100 rows would be returned


-- Question 29
--SELECT employee.First_Name, employee.EmployeeID
--FROM employee
--FULL OUTER JOIN department ON
--employee.EmployeeID = department.EmployeeID

-- Question 30
-- You can use it when comparing rows in the same table

-- Question 31
--USE EmployeeDatabase
--SET DATEFORMAT DMY

--SELECT * FROM employee
--SELECT * FROM Employee_his

--SELECT employee.Last_Name, employee.DepartmentID, Employee_his.New_Salary,
--Employee_his.Hire_date
--FROM employee
--INNER JOIN Employee_his ON
--employee.EmployeeID = Employee_his.employeeID
--WHERE Hire_date BETWEEN '01/01/2008' AND '01/01/2010'

--ORDER BY DepartmentID ASC, Last_Name DESC

-- Question 32
--An intersect can be used when 2 or more select statements
--are operating and the result set needs to be common to both 


-- Question 33
-- A union will allow for the joining of results of multiple queries

-- Question 34
--One to many is where for example
--a person may purchase many products,
--a single student may have many classes, the
--opposite is many to one eg many goods may have the same
--maker. One record in table a has many records in table b

-- Question 35
--In 2NF transitive dependenices are allowed
--Foreign Keys are used, it builds upon 1NF as
--duplicate data is agressively removed, primary
--key must be fully depended on by attributes


-- Question 36
--There are techniques for denormalizing a db but
--it has to be normalized first


-- Question 37
--PPS Number

-- Question 38
--Clustered is stored on a b-tree so as to make it quicker to fetch information
--as it is sorted to be able to fetch something directly, non clustered
--is stored on a heap, by default if there is no indexing a primary key can
--be used

-- Question 39
--DDL -- CREATE, DELETE, ALTER, USE, DROP, TRUNCATE, RENAME

-- Question 40
--DML -- SELECT, UPDATE, DELETE, INSERT, MERGE


-- Question 41
--Server level security means having security implemented 
--from the server rather than the app level or db level, this would
--mean creating a login and role on the server

-- Question 42
--Server Roles, Database, User, 
--Object Permissions
--Login

-- Question 43
-- Serveradmin

-- Question 44
--CREATE LOGIN login_name WITH PASSWORD = 'password',
--DEFAULT_DATABASE = Master,
--DEFAULT_LANGUAGE = British

-- Question 45
--SELECT, INSERT, UPDATE, DELETE, DRI, EXECUTE
