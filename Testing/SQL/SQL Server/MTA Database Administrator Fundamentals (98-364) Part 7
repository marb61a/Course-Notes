                    MTA Database Administrator Fundamentals (98-364) Part 7
                    Course Notes


Primary, Foreign, and Composite Keys
Primary Keys 
  - This will serve as a review of previous sections
  - Every row must have a value
    - All values must be unique
  - PK's can be one or more columns
  - You should avoid using natural keys
  - Candidate keys are keys which guarantee uniqueness
  - Keys with no meaning are best
  - Integers are good for keys
Foreign Keys
  - Entities may be related
    - One to many is a type of relationship they may have
Composite Keys
  - Where more than 1 column is required to make the column unique
  - SQL Server can enforce uniqueness with PK's
  - Add a Primary Key attribute to a particular column definition
  
  
Clustered Indexes
Overview
  - Indexing will store values from tables in a separate structure
  - This will mean using additional disk space
  - However they can be beneifical
  - Indexes can improve some SELECT statements performance considerably
  - This true also of DELETE and UPDATE statements
  - Indexes enforce uniqueness
  - There is additional overhead for all INSERT and DELETE statements
  - There is additional overhead for some UPDATE statements
  - Indexes affect data access, some things are faster others slower
  - Data storage is affected as copies of existing keys are stored in a different way
  - Indexes will require maintenance
Table Scans
  - Indexes will improve Table scans
  - Without indexes every SELECT would have to scan every row
  - With a clustered index rows are stored in sorted order
  - This can be especially use when using BETWEEN operators
Seek
  - When an index supports a query a SEEK rather than a scan is performed
  - This can take much less resources than a scan
  - This is because a scan searches every page in a table
  - Whereas a SEEK uses an index to search for needed pages only
Benefits
  - Time needed to fetch information is greatly reduced
  - This is by around 90% in some cases
Data Storage
  - A table with no clustered index is called a heap table
  - On heap tables there is no particular order to record storage
  - A doubly linked list allows users to move between pages
  - A clustered index table has one clustered index
Clustered Index on heap tables
  - Creating a clustered index takes about 1.2 times the table size for working space
  - The .2 is for the additional disk space that the index needs
  - A heap table is usually used for heavily modified tables that are very small
  - Heaps tables are very useful where data is mostly written but rarely read
  - Others uses are for when there are duplicate keys and you need to find the duplicate value not the rare value
  - A clustered index is great for when there are lots of duplicate records
  - It is also great for rare values and range searches


Non Clustered Indexes
  - There can be upto 249 non clustered indexes per table
  - Any undeclared indexes will default to non-clustered
  - The row locator and cluster index key values will be kept in the leaf level
  - Non-Clustered is similar to Clustered with a few key differences
  - No actual data is kept at the leaf level
  - Only the key value and the row id (rid) are kept in the leaf level
  - The RID is always one of two things, the clutered index key or the physical locator key
  - 
  
