                    MTA Database Administrator Fundamentals (98-364) Part 4
Filtering Data using Lists and Ranges
Ranges Of Values
  - When restricting the range of values to be returned use WHERE column_name BETWEEN
  - This is then provided with a low value and a high value
  - Endpoints are included
  - Low value needs to be included first
  - BETWEEN is a great shortcut to using for selecting values
  - IN is another shortcut to avoid typing multiple columns when getting information from a list
  - IN is also a shortcut to avoid typing multiple OR values
  
Filtering Data Using Pattern Matching
String Pattern Matching
  - This uses the LIKE keyword
  - It is used on character strings Char, Varchar, NChar, NVarchar
String Comparison Operators
  - % -- Any string of zero or more characters
  - _ -- Any single character
  - [] -- Any single character within the set
  - [^] -- And single character not within the set
Using Like Operators
  - Example WHERE fruit LIKE 'Orange'
  - Example WHERE fruit LIKE 'Ap%'
    - Stings can also be used '%Apple%'
    - Spaces DO matter!! '%Apple%' differs from '% Apple %'
  - Example WHERE fruit LIKE '%p%'
  - Wildcards are not a requiremeent for using LIKE
  - Example WHERE fruit LIKE '_pp%'
    - The underscore is for a single character
    - The sceond and third characters have to be pp
  - Example WHERE fruit LIKE '[AB]%'
    - The first character has to be either an A or a B
    - You can also use a range '[0-9],[A-Z]'
  
Filtering Data with NULLS
NULLs Defined
  - Sometimes columns do not have values, this the basis for NULL handling
  - NULLs represent an unknown value
  - It does not mean 0 or an empty string or NULL which should not be quoted as that is a string
  - NULL times NULL is always NULL
  - String concatenation with NULL also returns NULL
  - In SSMS there is a special colour in NULL columns
NULL Handling
  - Finding NULL uses IS NULL, NOT NULL
  - There is likely to be a question on the exam concerning this topic

Selecting Data using Functions
Aggregate Function Types
  - You will often need to use functions when getting data form a db
  - The most common is the aggregate functions
  - There are many different types of aggregate functions
  - Scalar -- These operate on and return a single values
  - Ranking -- These functions return a ranking value for each row
  - Aggregate -- They operate on a collection but return a single value
  - Rowset -- These return an object used like a table
  - User Defined -- The user defines their own functions
  - Questions on the exam are a practical certainty

Sorting Data
Sorting Data with ORDER BY
  - Order in a SELECT statement is not important as you can set the order yourself using the ORDER BY
  - This specifies the order in which rows return
  - You can sort by Column Names, Computed Values, Expressions
  - The column name you are sorting by does not have to be in the column list
Ordinal Column Position
  - The Ordinal Column Position is the column number that the results are returned in
  - An example is SELECT First_Name, Last_Name, First_Name is number 1 in the Ordinal Position
  - To order by ascending or descending use ASC and DESC respectively
  - ASC is the default if none is mentioned

Working with duplicates
Eliminate Duplicates
  - When talking about the DISTINCT keyword it is normally at row level
  - It eliminates duplicates from the rowset
  - When using ORDER BY and DISTINCT columns must be in the column list
  - You can use the TOP IN to get a certain amount of results
  
Joining Data
Introduction to Joins
  - In real life information usually comes from multiple tables
  - You can join up to 256 tables together
  - The JOIN keyword specifies the tables
  - The ON keyword specifies how the records are matched
  - Generally Primary Key / Foreign Reltionships will be used
JOIN Process
  - Step 1 -- Choose the colums for the column list
  - Step 2 -- Determine which tables they come from
  - Step 3 -- Follow the relationship lines on an ERD
INNER JOIN
  - This is the default join type
  - Using INNER JOIN you get get 1 row for each row that is related in both tables (using 2 tables as an example)
  - WHERE, ORDER BY and other clauses are still available
  - INNER JOIN can be used in conjunction with clauses to restrict information returned
  - NULL values do not join to anything
  - INNER JOIN returns values only when there is a match between tables
  
