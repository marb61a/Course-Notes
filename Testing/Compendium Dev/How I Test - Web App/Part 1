                    How I Test - Web App
                    Course Notes Part 1


Introduction
How I Test - Web App Case Study - Introduction
  - This course is a case study
  - It is equivalent to about a day of testing
  - This will be a practical course rather than extensive theory
  - This is because with each application we will only ever use subsets of our knowledge
  - The aim of the course is to take specific lessons from 1 app
    - And then see how they could be reused is other tests on other applications

Debrief Intro
  - A short, 'live' intro to the course and the testing approach.
  - In order to work as an actual practical course
    - The instructor is going to think through testing a web app from start to finish.

Choosing the Right Person for the Job
 - Choose which application to test should be based on my technical knowledge
 - So choosing the right application for yourself in the real world
  - This translates into choosing the right person for the job. 
  - The example app chosen in the course is Tracks 
    - This is the instructor because has some familiarity with it
    - There’s a lot of scope for testing. 
    - Tracks is an open source To Do management system where you create actions, next actions
      - Then you put them into context i.e, Where are you going to do them?
      - You can create projects for them and you can set reminders 
        - It is a ToDo app based on Getting Things Done methodology by Dave Allen. 
        - It is a very useful open source app 
  - Eevery time we approach a different app, an application, we will learn something different. 
  - Most of the time we don’t get to choose what we test because we work in companies,
  - In companies there will be a manager who will choose what we work on. 
  - Some of our skills and experience and domain knowledge will not translate into some applications.
    - This means we will not be suitable people to test that without additional training 
      - Or without offering a risk essentially to the project. 
        - Because we may not know what we are doing.
  - We have to combine the right people at the right time to have the right team mix. 
    - This can be hard when you are in management. 
    - For example someone that you need on a project may not be available
  - We have to have some slack in our teams, or we as managers have to have the ability to support people 
    - Or alternatively know that they will be supported on the team. 
  - Sometimes we allocate people to teams because of their soft skills
    - Their personality and how they will fit into that team. 
    - This is a key lesson, we have to choose the right people for the right technology
      - for the right job, otherwise there’s a risk. 
    - Else there is a process that means we have to manage it to make sure that they understand what they were doing. 
    - So that is a tiny, tiny lesson, but it is massive. 
  - What is test management. 
    - Choosing the right person for the job. 
  - What is our career management? 
    - Making sure we have the skills we need for the job. 
    - This is absolutely key to what we do, but at a micro level is choosing a particular application to test.

Choosing an Environment
  - Chose the environment based on anticipated needs for testing, and based on experience. 
    - If managing enviroments is not possible and if it restricts our testing, then that is a risk.
  - Environments are a big concept in terms of this model, its planning and the environment install
    - And set up and getting everything working. 
  - For the Tracks app it is possible use Docker. 
    - There are a lot of Docker images out there for Tracks. 
    - It is fairly easy to install a Docker image once you know what you’re doing
    - It is also possible to do a local install, 
      - Tracks is a Ruby on Rails application. 
      - This can be a bit hard to install locally, so some try to avoid that.
      - But if someone was familiar with Ruby on Rails, 
        - And had the environment setup, a local install might be best for them. 
I tend to use a virtual machine which is
prebuilt, may not be the most up to date version, which could be a risk and the
same virtual machine can also be cloud hosted.
So I have a lot of options in the environment that I choose. Now from a testing
perspective, I have requirements from that environment, to support my testing.
I’m pretty sure I’m going to want to proxy traffic so it needs to be somewhere
that I can proxy traffic. So it doesn’t really matter what environment that is. I
should be able to do that. But some corporate environments make that really
hard and difficult. I may want to view the database which would limit me so
that I don’t use Docker. Because I don’t know Docker well enough to know how
to configure a Docker image or running Docker container to allow me to access
the database. I don’t know how to do that. I’d have to do research that might
take more time and I’m trying to not necessarily learn how Docker and other
environments work, as this exercise.
I’m trying to learn how my testing works so I didn’t want to impose those extra
constraints. I wanted a low impact on my machine, which ruled out a local
install and the knowledge that we have will limit the effectiveness that we have
when we’re working with an environment. That’s why we have to work in teams.
That’s why it’s really important that we don’t just get an environment given to
us that we don’t have the permissions to erase. The environment really, really
impacts testing. The amount of times I have I’ve gone on site and I’ve worked
on projects where we do not have permissions to access the environments. We
don’t have permissions to SSH into the box to see the logs. That means we can’t
track the memory usage. There’s a whole bunch of things we can do if we don’t
have permissions. Sometimes we have too many, not necessarily permissions,
but responsibility. Because we’re responsible for releasing the application into
Live. It’s the same as if I had to instal Tracks on my local machine. That would
be an issue.
I may not know how to do that and I may not have support if I do it myself.
Hopefully on teams we have support, but very often we don’t. We’re left to
gone with. It can take months sometimes to set up environments for certain
test teams. I’ve seen projects where they have literally spent months setting
it up to get in the right state and they can’t change it once it’s there, because
they don’t know how to do backups. It’s a completely different install process
than Live. Which itself is essentially a risk for the project because if you’re
deploying something in the different environments. How do you know that your
deployment process hasn’t changed things? We really want the same deployment
process as Live. We really want the same version management, we really want
the same level of observation tracking, monitoring on these testing environments.
We want the same process for doing upgrades, downgrades, making sure the
database is okay, making sure the same version of the database software is being
used on the different environments.
