                    Web Security 
                    Course Notes Part 8


5 - Challenge 7: Defend Against Clickjacking
  - Add both modern and legacy browser defences for clickjacking
  - Verify that attacks used perviously no longer work
  - The CSP may need altering if any inline scripts are used
  - This will be done in the topmost layout file -> main-layout.ejs (legacy)
  - Modern solution will need a header adder to server/index.js
  - Simply add the app.use and a function which contains a response with .setHeader
    - This request response should handle xframe-options

6 - Challenge 7: Solution
  - Defending against a clickjacking attack
  - This will give safety in both older and newer browsers
  - Example Syntax (Legacy Browsers)
    // Grab the previously used code for legacy browsers
    // This will go into the main-layout.ejs file
    // The script part will need to be put in script tags and added to the body of the layout file
    <script>
      if(self === top){
        var cj = document.getElementByID("clickjack");
        cj.parentNode.removeChild(clickjack);
      } else {
        top.location = self.location
      }
    </script>
    
    // The style tag element will be added to the head of the layout file
    <style id="clickjack">
      body{
        display: none !important
      }
    </style>
    
  - Example syntax (Modern Browsers)
    // In the index.js file
    // If there is no next present there will be an error
    app.use(function(req, res, next) {
      res.setHeader('X-Frame-Options', 'DENY')
      next();
    })
    
  - Example syntax 
    // The above code will create an error in the console the sha present will need to 
    // added in to the CSP in order to work, this will mitigate the risk of clickjacking
    app.use({
      // Specify directives as normal
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: ["'self'", "'sha256-<sha_value>'"]
      }
    })
    


                    Section 5 - Third Party Assets
1 - Introducing Third Party Assets
Items that fall under third party assets include
  - Non hosted scripts
  - Version dependency for use in development eg "express": "^4.15.2"
    - This is fuzzy as there as multiple possible versions as the ^ signifies from this version up
  - Tracking code eg Google Analytics
    - This maybe the worst of the three
    - The example code is used to generate its own script tag which then pulls in the real code it uses

2 - Challenge 8: Subresource Integrity
  - Add SubResource Integrity (SRI) attributes to the script and some style tags for the material design library
    - This is locally hosted and not from a remote CDN
    - If assets were deployed on a CDN they are at risk of tampering
  - Add some trivial code to either file
  - Observe how the browser will now refuse to fully load the resources

3 - Challenge 8: Solution
  - The file being added to is the main-layout ejs file
  - Adding an integrity field which is set to nothing to to the link and style tags will cause a browser complaint
    - This may not work in some cases, there maybe a need to add a fake integrity attribute eg sha256-xxxxx
    - The console errors should show the hashes that should be used and they can be added to the integrity field
  - The crossorigin attribute is set to anonymous
    - This basically says to send no cookies or authentication credantials in the request just make the request
  - With reject hash fields there will be no CSS or JS



                    Section 6 - Man-in-the-Middle
1 - Introducing Man-in-the-Middle Attacks
  - The scenario is a user connecting over a public wifi hotspot
    - The attacks will take advantage of a couple of things
      - Laptops etc remember what networks they have been connected to unless cleared
      - When the laptop sees a network of the smae name it will attempt to rejoin it
      - This is because these networks will be trusted by default
  - A pineapple is a wifi device used in pen testing
  - Wifi devices broadcast what they are looking for
  - When joining a public wifi network the router is trusted as the first DNS server in-line
    - DNS translates IP addresses into names
  - Some companies that offer Wifi utilise DNS poisoning
    - This is to drive users to pages where terms and conditions are agreed in order to use the service

