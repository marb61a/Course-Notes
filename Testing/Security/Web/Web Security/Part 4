                    Web Security 
                    Course Notes Part 4


9 - Sanitizing User Data
XSS Defenses - If you unescape then sanitize data first
  - These are some cheats for different libraries so you will know when you are in a danger zone
    - Ember & Vue -- {{{ "unescaped" }}}
      - This string will be treated as Html 
    - React -- return <div dangerouslySetInnerHTML={createMarkup()}/>;
    - Ejs -- <%- "Unescaped" %>
      - The course example app has a couple of examples of this issue which will need to be fixed
      - In this case the minus sign needs to be changed to an equals
    - Angular -- <div [innerHTML]="unescaped"></div>
    - Jade -- ! This is #{"<b>unescaped</b>"}!
Escape before putting user data in attributes
  - <div class="<%= 'UserValue' %>"></div>
  - Be especially careful of this when templating Javascript
    - <script>alert("Hello <%- userValue %>")</script>
  - Recommended to use https://github.com/ESAPI/node-esapi
    - This will check your app for issues, it is highly recommended by the instructor
  - User input should be treated as values not code

10 - Content Security Policy (CSP)
XSS Defenses Content Security Policy
  - Browsers cannot tell the difference between scripts downloaded from you origin vs another
    - This is called a single execution context
  - CSP allows modern browsers to be told which sources they should trust and for what type of resources
  - This information comes from a HTTP response header or meta tag
      - Content-Security_Policy: script-src 'self' https://example.example
                                 ---------         -----------------------
                                   name             sources
                                |--------------- directive ----------------|
                                
    - Multiple directives are allowed and are separated by semi-colon
    - Redefining a driective with the same name has no effect
    - By default directives are permissive
      - Content-Security-Policy: script-src: 'self' https://example.example;
                                 font-src: https://fonts.googleapis.com
  - There are some useful CSP directives
    - child-src -- Child execution contexts eg frames, workers
    - connect-src -- What you can connect to such as fetch, WebSocket, EventSource
    - form-action -- Where you can <form> submit to
    - img-src, media-src, object-src -- Where you can get images, media etc from
    - style-src -- Where external stylesheets can come from
    - upgrade-insecure-requests - Upgrades HTTP requests to HTTPS
    - default-src -- A fallback for when a specific directive is not provided
  - There are also some keywords which can be used alongside sources which are typically origins
    - none -- No sources allowed
    - self -- Current origin
    - unsafe-inline -- Allows inline JS and CSS
    - unsafe-eval -- Allows eval()
      - This is used by templating frameworks where a string is sent and evaluated juust in time
      - This improves the performance of webpages
 There are a few ways the unsafe-inline can be made a little safer
  - Script tags embedded in HTML is the most common form of XSS and banning it mitigates risk considerably
  - There are times however where JavaScript is needed and there are solutions
  - Cryptographic nonces must be generated per page load and must change unpredictably
Example Syntax
  // Cryptographic nonce example
  <script nonce=A9h3pdfn3f03nce8DnMIOErd7Gb>
    alert('This example is done inlne');
  </script>
  
  Content-Security-Policy: script-src 'nonce-A9h3pdfn3f03nce8DnMIOErd7Gb'
  
  Another way to do this is to add a checksum to the security policy 
    - Content-Security-Policy: script-src 'sha256-absd182.....='
    - The easiest way to define this is to use the browser itself
    - Use the error generated and move that into the CSP

