                    Web Security 
                    Course Notes Part 7


                    Section 4 - Clickjacking
1 - Introducing Clickjacking
A quick demo of the clickjacking process
  - Often there is a domain/subdomain very similar to a legitimate one used
  - The illegitimate domain is then placed into an iFrame
  - Its opacity is set to 0 and users therefore think that they are clicking on a legitimate page
  - One of the most famous attacks is the Adobe Global Flash Security Settings Page
  - This falls in the UI redress attack category
  - It can also be used for capturing keystrokes
  - Some of the more sophisticated versions are very difficult to detect

2 - Challenge 6: Clickjacking
The challenge here is
  - 

3 - Challenge 6: Solution
  -

4 - Stopping Clickjacking
  - Defending against clickjacking in modern browsers
  - X-Frame-Options -> This is a HTTP response header
    - This informs the browser what it is allowed to do to a document, it will not know until it downloads the specific document
    - This can not be put inside another page, it must be the top level frame inside a browser tab
    - X-Frame-Options: DENY
    - X-Frame-Options: SAMEORIGIN
    - X-Frame-Options: ALLOW-FROM https://abc.com
  - Chrome & Safari do not respect ALLOW-FROM
    - In this case the Frame-ancestors CSP directive will have to be used instead
  - 

5 - Challenge 7: Defend Against Clickjacking

6 - Challenge 7: Solution



                    Section 5 - Third Party Assets
1 - Introducing Third Party Assets
Items that fall under third party assets include
  - Non hosted scripts
  - Version dependency for use in development eg "express": "^4.15.2"
    - This is fuzzy as there as multiple possible versions as the ^ signifies from this version up
  - Tracking code eg Google Analytics
    - This maybe the worst of the three
    - The example code is used togenerate its own script tag which then pulls in the real code it uses

2 - Challenge 8: Subresource Integrity
  - 

3 - Challenge 8: Solution
  -



                    Section 6 - Man-in-the-Middle
1 - Introducing Man-in-the-Middle Attacks

2 - Hardware

3 - Encrypting Data



                    Section 7 - HTTPS
1 - Introducing HTTPS
  - The percentage of the web using using HTTPS has increased steadly
  - A brief run through of the path to HTTPS 

2 - HTTPS & Cryptography
  - In order to communicate securely there are 2 types of encryption to be dealt with
  - Symmetric Encryption and Public Key Encryption
    - Symmetric Encryption is very fast much faster than Public Key
    - There is also no practical limit on content size
      - This is probably what most people who have locked a file with a password have used
  - If an encryption key was generated on a per-connection basis this would be almost perfect except for a catch on how to shear keys safely
    - Reusing keys is not good in cryptography as randomness is good
  - This is where Public Key cryptography comes in
    - There are 2 different types of keys Public and Private
    - The public key is used to create messages that are encrypted, the private kay decrypts them
    - The algoritms involved are very complex
  - Public Key Encryption, The key Exchange
    - This can be slow but is necessary for a system that is getting encrypted messages without divulging how to send them
    - The server sends it public key and certificate to the client
    - The client and server compare cipher suites
      - Cypher suites are essentially the methodologies used for the faster symmetric encryption used later
    - Finally a seesion key is generated be the client
      - This is encrypted with the servers public key so that only the server can read it
    - The session key is what is used for encrypted data exchange
  -
  -

3 - TLS Handshake

4 - OpenSSL

5 - Challenge 9: Defend Against Man-in-the-Middle Attack

6 - Challenge 9: Solution


