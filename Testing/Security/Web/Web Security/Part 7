                    Web Security 
                    Course Notes Part 7


6 - Cross-Origin Resource Sharing (CORS) (Cont)
  - The preflight request has no body just headers
  - All of the request happen internally and is not something that an app has control over

7 - Challenge: 5: Defend Against CSRF
  - Add a CSRF token to the sample application
  - The csurf package is already installed
    - Csurf is middleware for protecting againt CSRF attacks
      - https://github.com/expressjs/csurf
  - Most of the work will be done in 2 files /routes/transfers.js /views/transfers.ejs
  - If IE 9 is set up on the machine then experiment with that
  - You will add csurf as a request handler
    - The function in each route is also a handler and csurf should come between Router.verb and function
  - Router.all covers all HTTP verbs and should be changed to Router.post

8 - Challenge 5: Solution
  - Using the csurf library which is made by the express team
  - Firstly import the library 
    - var csurf = require('csurf');
  - Then there will need to be the proper middleware setup
    - const csrfProtection = csrf({cookie: true})
  - This const can then be added to both routes being used in the example
    - '/' and '/perform'
    - Simply add to the route eg router.get('/', csrfProtection, function(req, res){})
  - At this point you should be able to get a value from the request object
    - ie csrfToken: req.csrfToken()
    - This should be added to the render of the response ie res.render
  - The csrf token should be available in the template via a hidden input
    - <input type="hidden" name="_csrf" value="<% csrfToken %>"
    - In this example the syntax is correct for ejs
  - There should be an extra field on the transfers page now
    - It should contain the non-reuseable token
  - There may be routes eg process that only allow entry when a csrf token is present
  - Trying to edit or change a token will cause an error when trying to perform an action
  - There should be a 403 error and the csrf attack will no longer work
    - It might be a good idea not to shock a stack trace on error
    - This will give attackers an idea of system internals
    - Redirecting users to an error page is probably the best approach
  


                    Section 4 - Clickjacking
1 - Introducing Clickjacking
A quick demo of the clickjacking process
  - Often there is a domain/subdomain very similar to a legitimate one used
  - The illegitimate domain is then placed into an iFrame
  - Its opacity is set to 0 and users therefore think that they are clicking on a legitimate page
  - One of the most famous attacks is the Adobe Global Flash Security Settings Page
  - This falls in the UI redress attack category
  - It can also be used for capturing keystrokes
  - Some of the more sophisticated versions are very difficult to detect

2 - Challenge 6: Clickjacking
The challenge here is
  - To pre-populate the form using queryParams -> url?formAccount=16&accountTo=21 etc
  - Again use JSBin to create a landing page that uses the clickjacking technique
    - The aim is to trick the user into unintentionally performing an action
  - This when combined with XSS could be very powerful

3 - Challenge 6: Solution
  -

4 - Stopping Clickjacking
  - Defending against clickjacking in modern browsers
  - X-Frame-Options -> This is a HTTP response header
    - This informs the browser what it is allowed to do to a document, it will not know until it downloads the specific document
    - This can not be put inside another page, it must be the top level frame inside a browser tab
    - X-Frame-Options: DENY
    - X-Frame-Options: SAMEORIGIN
    - X-Frame-Options: ALLOW-FROM https://abc.com
  - Chrome & Safari do not respect ALLOW-FROM
    - In this case the Frame-ancestors CSP directive will have to be used instead
  - 

5 - Challenge 7: Defend Against Clickjacking
  -

6 - Challenge 7: Solution
  -
