                    Web Security 
                    Course Notes Part 6


                    Section 3 - Cross-Site Request Forgery (CSRF)
1 - Introducing Cross-Site Request Forgery (CSRF)
CSRF - Cross Site Request Forgery
  - This is the second most prevalent attack
  - This type of attack takes advantage of the fact that cookies for basic authentication are passed along with requests
  - This is one reason to align with REST conventions (GET, POST, DELETE etc)
    - There should be no GET requests that mutate data
    - Just allowing PUT and POST will not solve the issue
  - Example Syntax
    - This form which is hidden will be able to make a request
    - The request itself will not be seen which is called an Opaque request
    - The result will show whether the request was successful or not
    <form name="badform" method="post" action="https://equihax.com/api/transfer">
      <input type="hidden" name="destination" value="2"/>
      <input type="hidden" name="amount" value="8500"/>
    </form>
    <script type="text/javascript">
      document.badform.submit()
    </script>

2 - Challenge 4: CSRF
  - See if you can make a page on JSBin
    - JSBin is recommended instead of other similar sites like CodePen as you can create plain HTTP landing pages
    - The other sites use HTTPS which wil cause a mixed content warning
  -

3 - Challenge 4: Solution

4 - CSRF Tokens

5 - Request Origin

6 - Cross-Origin Resource Sharing (CORS)

7 - Challenge: 5: Defend Against CSRF



                    Section 4 - Clickjacking
1 - Introducing Clickjacking
A quick demo of the clickjacking process
  - Often there is a domain/subdomain very similar to a legitimate one used
  - The illegitimate domain is then placed into an iFrame
  - Its opacity is set to 0 and users therefore think that they are clicking on a legitimate page
  - One of the most famous attacks is the Adobe Global Flash Security Settings Page
  - This falls in the UI redress attack category
  - It can also be used for capturing keystrokes
  - Some of the more sophisticated versions are very difficult to detect

2 - Challenge 6: Clickjacking
The challenge here is
  - 

3 - Challenge 6: Solution

4 - Stopping Clickjacking

5 - Challenge 7: Defend Against Clickjacking

6 - Challenge 7: Solution



                    Section 5 - Third Party Assets
1 - Introducing Third Party Assets
Items that fall under third party assets include
  - Non hosted scripts
  - Version dependency for use in development eg "express": "^4.15.2"
    - This is fuzzy as there as multiple possible versions as the ^ signifies from this version up
  - Tracking code eg Google Analytics
    - This maybe the worst of the three
    - The example code is used togenerate its own script tag which then pulls in the real code it uses

2 - Challenge 8: Subresource Integrity

3 - Challenge 8: Solution


