                    The Ultimate XSS Training Course
                    Course Notes Part 1

Hacking Websites With CrossSite Scripting
  - XSS is the most popular way to attack a website
  - The course is for educational purposes only
  - XSS or Cross Site Scripting is a vulnerability in Web Apps
  - This allows for attackers to inject code into a web app
    - This can allow intruders to steal passwords etc
  - The ingredients for this particular recipe are
    - HTML tags, JavaScript Functions, Numbers and Strings
  - The first step in an XSS attack is to inject a script into a web page
  - In the example there is an input box
    - When there is something typed in it is then rendered on the page
  - Script Injection
    - Using the paragraph element <p></p>
    - Although this is simple if you can inject a script element you can control what happens in the browser
  - This is the point where JavaScript becomes involved
    - Javascript is like any other language but has some quirks, there are notes on JS at
      - https://github.com/marb61a/Course-Notes/tree/master/Development/Web Development/Javascript
    - JavaScript handles function calls like other languages
      - Example uses alert function call inside script tags -- <script>alert()</alert>
      - If the alert pops up this means that script injection was successful
  - Alerts are the most commonly used function by both attackers and researchers
  - The example showing how dangerous allowing scripts to be injected is by removing the html from the page
    - This is done by setting the innerhtml for the pager to an empty string
    - document.documentElement.innerHTML=''
  - An alert is a great tool for testing and is often all that is needed

XSS Attacks From HTML Attributes
  - Script tags may not work
  - HTML Attributes show many things eg where to find images
  - Using hover example and developer tools in the browser
    - 2 different attributes are class and title
    - Attributes are set using name="value"
      - This can be double or single quoted as well as not quoted as long as there are no space characters
      - This is so that the browser knows where things begin and end
    - All of this is important because an attacker can break out of an atribute using single or double quotes or spaces depending on how the attribute is set
  - The payload from the first lesson will not work unless there is a break out
    - "><script>alert()</alert>
    - This will work whether injecting into the content or attributes
  - Textareas are used to allow multiline input
  - Textareas handle content differently than other elements
  - A textarea will not allow entering the payload and executing
    - You will need to close the textarea element
      - </textarea><script>alert()</script>

XSS Attacks From URLs
  - Examining bad URL's for XSS purposes
  - Escaping HTML input will mean previous payloads do not work.
  - 

XSS Filter Evasion
  -

How To Use Event Handlers For XSS Exploits
  -

XSS Attacks Inside JavaScript
  -
