                    The Ultimate XSS Training Course
                    Course Notes Part 1

Hacking Websites With CrossSite Scripting
  - XSS is the most popular way to attack a website
  - The course is for educational purposes only
  - XSS or Cross Site Scripting is a vulnerability in Web Apps
  - This allows for attackers to inject code into a web app
    - This can allow intruders to steal passwords etc
  - The ingredients for this particular recipe are
    - HTML tags, JavaScript Functions, Numbers and Strings
  - The first step in an XSS attack is to inject a script into a web page
  - In the example there is an input box
    - When there is something typed in it is then rendered on the page
  - Script Injection
    - Using the paragraph element <p></p>
    - Although this is simple if you can inject a script element you can control what happens in the browser
  - This is the point where JavaScript becomes involved
    - Javascript is like any other language but has some quirks, there are notes on JS at
      - https://github.com/marb61a/Course-Notes/tree/master/Development/Web Development/Javascript
    - JavaScript handles function calls like other languages
      - Example uses alert function call inside script tags -- <script>alert()</alert>
      - If the alert pops up this means that script injection was successful
  - Alerts are the most commonly used function by both attackers and researchers
  - The example showing how dangerous allowing scripts to be injected is by removing the html from the page
    - This is done by setting the innerhtml for the pager to an empty string
    - document.documentElement.innerHTML=''
  - An alert is a great tool for testing and is often all that is needed

XSS Attacks From HTML Attributes
  - Script tags may not work
  - HTML Attributes show many things eg where to find images
  - Using hover example and developer tools in the browser
    - 2 different attributes are class and title
    - Attributes are set using name="value"
      - This can be double or single quoted as well as not quoted as long as there are no space characters
      - This is so that the browser knows where things begin and end
    - All of this is important because an attacker can break out of an atribute using single or double quotes or spaces depending on how the attribute is set
  - The payload from the first lesson will not work unless there is a break out
    - "><script>alert()</alert>
    - This will work whether injecting into the content or attributes
  - Textareas are used to allow multiline input
  - Textareas handle content differently than other elements
  - A textarea will not allow entering the payload and executing
    - You will need to close the textarea element
      - </textarea><script>alert()</script>

XSS Attacks From URLs
  - Examining bad URL's for XSS purposes
  - Escaping HTML input will mean previous payloads do not work.
  - This section will continue to focus on HTML attributes
  - Some attributes are specifically designed for URL's
    - Hrefs and anchor tags take in URL's to create links -- <a href="{{url}}">Link</a>
    - Sources and Iframes take in URL's to embed webpages -- <iframe src="{{url}}"></iframe>
  - Using the previous payload will not work as it is being escaped which means that the HTML is not treated as code
    - The browser will instead treat this as ordinary text
  - Instead of injecting a script the URL will have to be directly attacked
  - Normally HTTPS and HTTP are the used schemes but this will not help in this case
    - Javascript schemes can be used in this case and can be used in many things
      - Redirects -- location = 'javascript:alert()'
      - Source attributes -- <iframe src=javascript:alert()></iframe> 
      - Embeded attributes -- <embed src=javascript:alert()></embed>  (firefox only)
      - Href attributes -- <a href=javascript:alert()>Link</a>
  - Third Party scripts can be dangerous to use
    - Even using trusted sources for scripts are not totally safe as breaches do happen
  - The data scheme -- data:text/html,<script>alert()</script>
    - This can also be sometimes encoded in Base64
    - Modern browsers have stopped XSS attacks from data schemes
      - Scripts ran from data schemes are not XSS as it is completely isolated and not ran in the context of the web page
      - Older browsers which may be used are vulnerable

XSS Filter Evasion
  - XSS filters look at values, they then decide on whether to remove, block or allow
    - This will be on the basis whether something seems dangerous
  - Using the Attribute Breakout With Escaping example
    - The URL will contain the value #beautiful
  - Inspecting the 3 hearts element on the page
    - This is a h1 class called title beautiful
  - Clicking the toggle theme button will change the hearts and the URL
    - The URL will now contain #disgusting and the h1 class is now called title disgusting
  - URLs can be cntrolled as well as inputs
    - A part of a URL can be changed and the link then sent to a potential victim
    - Add a payload to a URL with breakout -- https://url"><script>alert()</script>
    - This will break the example page and will need to be inspected
    - In the h1 element the class attribute has not been broken out of
    - The inspector will always show attributes in double quotes even when that is not the case
    - Use a single quote instead of the double quote to see if that will breakout
    - There is another issue which is the less than and greater than characters are being escaped
      - The word script is also being filtered and replaced
    - Scripts may be impossible to use so maybe href=javascript:alert() or src=javascript:alert() instead
      - This may seem like it will work but will not as h1 elements will not pull content from a different webpage
    - You will instead need to use Event Handlers
    - 
  - 

How To Use Event Handlers For XSS Exploits
  -

XSS Attacks Inside JavaScript
  -
