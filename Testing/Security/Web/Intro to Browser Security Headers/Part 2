                    Introduction to Browser Security Headers
                    Course Notes Part 2


3 - Understanding HSTS7
The Strict Transport Security Header looks something like this
Example Syntax
  Strict-Transport-Security:
  max-age=31536000; includeSubdomains; preload

4 - The max-age Directive
Example Syntax
  Strict-Transport-Security:
  max-age=31536000; includeSubdomains; preload
  - The max-age directive defines the period during which insecure requests cannot be maded
  - The units above are in seconds which covers approximately a year
    - This means that once there HSTS header is in place the browser cannot make a HTTP request for 1 year for that site
    - This is reset on every receipt of the response header
    - This usually means that the site will have to have no visitors for a year to be able to make an insecure request again
  - This rule applies to all resources on the domain
    - Be careful that you do not wish to serve things over the HTTP protocol
    - This is not always the case but it maybe better to move resources needing HTTP to a separate domain
    - It is very similar to a Denial Of Service attack if you are trying to server HTTP resources with only HTTPS allowed

5 - The includeSubdomains Keyword
This resuses the Strict-Transport-Security header from above
  - max-age=31536000; includeSubdomains; preload
  - The scope of HSTS can be extended to include all sub-domains
  - This has the effect of protecting both current and future assets
  - This is a prerequisite for using preload 

6 - The preload Keyword
TOFU - Trust On First Use
  - This is not full proof
The Strict Transport Security header can only be set over a secure request
  - This means that HTTP cannot be used as it cannot be trusted
Because of TOFU there is still a chance of a Man In The Middle Attack (MITM)
Pre-loading HSTS will hard code it into the browser
  - The browser will ship with a list of sites that can only be loaded securely
  - This will solve the TOFU risk
The Chromium team maintains the HSTSPreload site
  - https://hstspreload.org
  - This allows you to add a site to the browser manufacturers list
  - This will add the site to all browsers as they all use the same master list

7 - Browser Compatibility
Using the caniuse web site to check compatability
  - https://caniuse.com

8 - Summary
A brief summary of what the chapter covered



                    Section 3 - HTTP Public Key Pinning (HPKP)
1 - Overview
A quick view of the material to come in the chapter
  - HPKP is a progession beyond HSTS
  - This is because in addition to demanding material be served securely it now expects a certain certificate
  - This is not just a valid certificate but one which conforms to certain criteria
Encryption solves a lot of problems but not all
  - Certificates can be from rogue CA's or compromised CA's
  - Public Key Pinning allows for trusted certificates to be whitelisted
  - This instructs the browser how to behave in the future

2 - Understanding the Problem that HPKP Solves

3 - Understanding HPKP

4 - The pin-sha256 Directive

5 - The max-age Directive

6 - The report-uri Directive

7 - The includeSubdomains Keyword

8 - Reporting Only

9 - Browser Compatibility

10 - Summary
A brief summary of what the chapter covered



                    Section 4 - Content Security Policy (CSP)
1 - Overview
A quick view of the material to come in the chapter

2 - Understanding the Problem that CSP Solves
Common Cross Site Scripting (XSS) attack vectors
  -

3 - Understanding CSP
Understanding the Content Security Policy (CSP) header
Example Syntax
  Content-Security-Policy
  script-src'self' 'unsafe-inline' 'unsafe-eval' [uris]; style-src'self'
  'unsafe-inline'[uris]; img-src'self'[uris]; frame-src[uris]; font-src'self'[uris];
  report-uri[report]

  - It declares approved sources of content that can be run on that page

4 - Declaring Content Sources

5 - Content Source Policy Directives

6 - The Unsafe Inline and Unsafe Eval Keywords

7 - Using Hashes and Nonces to Whitelist Unsafe Inline Content

8 - The frame-ancestors

9 - The report-uri Directive

10 - Reporting Only

11 - Browser Compatibility

12 - Summary
A brief summary of what the chapter covered



                    Section 5 - Tools for Working with Browser Headers
1 - Overview
A quick view of the material to come in the chapter

2 - SecurityHeaders.io
There is a free tool available for scanning security headers
  - https://securityheaders.io
  - It is easy to use as you just need to enter the domain and scan
  - After scanning there is a report generated which will list headers
  - It is highly recommended by the course instructor
  - There is an API available 

3 - Report URI for Analyzing a CSP

4 - Creating a Policy with Report URIâ€™s CSP Builder

5 - The CSP Fiddler Extension

6 - NWebsec for ASP.NET

7 - Logging CSP Violations with Report URI

8 - Summary
A brief summary of what the chapter covered

