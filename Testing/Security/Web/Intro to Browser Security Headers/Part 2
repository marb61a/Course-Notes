                    Introduction to Browser Security Headers
                    Course Notes Part 2


3 - Understanding HSTS
The Strict Transport Security Header looks something like this
Example Syntax
  Strict-Transport-Security:
  max-age=31536000; includeSubdomains; preload

4 - The max-age Directive
Example Syntax
  Strict-Transport-Security:
  max-age=31536000; includeSubdomains; preload
  - The max-age directive defines the period during which insecure requests cannot be made
  - The units above are in seconds which covers approximately a year
    - This means that once there HSTS header is in place the browser cannot make a HTTP request for 1 year for that site
    - This is reset on every receipt of the response header
    - This usually means that the site will have to have no visitors for a year to be able to make an insecure request again
  - This rule applies to all resources on the domain
    - Be careful that you do not wish to serve things over the HTTP protocol
    - This is not always the case but it maybe better to move resources needing HTTP to a separate domain
    - It is very similar to a Denial Of Service attack if you are trying to server HTTP resources with only HTTPS allowed

5 - The includeSubdomains Keyword
This resuses the Strict-Transport-Security header from above
  - max-age=31536000; includeSubdomains; preload
  - The scope of HSTS can be extended to include all sub-domains
  - This has the effect of protecting both current and future assets
  - This is a prerequisite for using preload 

6 - The preload Keyword
TOFU - Trust On First Use
  - This is not full proof
The Strict Transport Security header can only be set over a secure request
  - This means that HTTP cannot be used as it cannot be trusted
Because of TOFU there is still a chance of a Man In The Middle Attack (MITM)
Pre-loading HSTS will hard code it into the browser
  - The browser will ship with a list of sites that can only be loaded securely
  - This will solve the TOFU risk
The Chromium team maintains the HSTSPreload site
  - https://hstspreload.org
  - This allows you to add a site to the browser manufacturers list
  - This will add the site to all browsers as they all use the same master list

7 - Browser Compatibility
Using the caniuse web site to check compatability
  - https://caniuse.com

8 - Summary
A brief summary of what the chapter covered



                    Section 3 - HTTP Public Key Pinning (HPKP)
1 - Overview
A quick view of the material to come in the chapter
  - HPKP is a progession beyond HSTS
  - This is because in addition to demanding material be served securely it now expects a certain certificate
  - This is not just a valid certificate but one which conforms to certain criteria
Encryption solves a lot of problems but not all
  - Certificates can be from rogue CA's or compromised CA's
  - Public Key Pinning allows for trusted certificates to be whitelisted
  - This instructs the browser how to behave in the future

2 - Understanding the Problem that HPKP Solves
  - Using the https://haveibeenpwned.com/ site
    - This site can only be loaded over HTTPS
  - In order to serve HTTPS there must be a valid certificate
    - To check the cert click on the lock in the address bar and select connection
  - CA stands for Certificate Authority which issues the certifcate that the site presents to visitors
  - A quick demo for adjusting the site by changing the certificate
    - This could be what happens in a Man In The Middle attack
    - End users are not going to know what a rogue cert is
  - You should be able to say that this is the certificate to be expected
    - If the browser sees a different certificate then the connection should be rejected
    - This mechanism is called HPKP

3 - Understanding HPKP
  - The Public Key Pins Response Header
    Public-Key-Pins:
    pin-sha256=[pin1];pin-sha256=[pin2];
    max-age=2592000; report-uri=[uri]; includeSubdomains
  - This will project from fraudulently issued but correct certs being used
  - This whitelists what is allowed for the domain in terms of certificates
    - There are multiple ways of doing the whitelisting which will be discussed
  - Having a whitelist in place protect against the use of fraudulent certificates
  - They rely on Trust In First Use (TOFU)
    - This is so as to be able to reject fraudulent certs in the future
  - IE does not support Public Key Pinning
  - Chrome will whitelist a certificate after loading as it is pinned 
    - Chrome will reject connecting to the site using a different certificate (EG Attackers)
      - This will tell users that it has an expected cert and that has been changed
    - IE will load the page with a different cert without issue
    - There will be a very obvious warning from Chrome about what is going on
      - There will be an NET:ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN message
      - There will also be notification that a site uses certificate pinning

