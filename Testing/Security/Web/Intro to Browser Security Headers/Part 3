                    Introduction to Browser Security Headers
                    Course Notes Part 3
 
 
 4 - The pin-sha256 Directive
  - Public-Key-Pins:
    pin-sha256=[pin1];pin-sha256=[pin2];
    max-age=2592000; report-uri=[uri]; includeSubdomains
  - The above contains 2 pins not 1
  - When key-pins are used there must be at least 2
    - More specifically there must be at least 2 hashes of the certificate thumbprint
    - The reason for 2 is to ensure that there is a backup
  - The thumbprint can come from any certificate in the cert chain

5 - The max-age Directive
  - This declares the period for which a pinned certificate must be served
  - This is similar in value proposition to HSTS
  - This tells the browser how long to go before accepting a certificate that is not in the whitelist
  - Public-Key-Pins:
    pin-sha256=[pin1];pin-sha256=[pin2];
    max-age=2592000; report-uri=[uri]; includeSubdomains
  - The units are in seconds -> 2592000 is approximately a month (30 days)
    - If this response header was received it would take about a month before they could load anyother cert not listed
  - This is a lot shorter than the HSTS period, this is because of a higher probability of going wrong
  - Also similar to HSTS this duration is reset on every receipt of the response header
  - To see the HSTS page (In the Chrome browser) type in the URL bar
    - chrome://net-internals/#hsts
    - The HPKP example will use the same layout and the HaveIBeenPwned 
  - If the correct hashes are not loaded in for a site then the browser will never set them
    - For example if there was a thumbprint of a different certificate taken
    - This is not the certificate that the site was running
    - This could then be added to the HPKP response header and send it to the browser
    - If the browser does not validate that one of the pins is correct for the certificate that was served
    - It will never save it which makes this a sanity check

6 - The report-uri Directive
  -

7 - The includeSubdomains Keyword
  -

8 - Reporting Only
  - Content-Security-Policy-Report-Only
  - This is very similar to HPKP-Report-Only
  - This works as current browsers will submit policy violations
  - Using this implementation gives confidence that your site will not be broken
    - There will be a notification if there is a policy violation
  - Zero-Risk CSP Setup
    - Content-Security_Policy-Report-Only so that nothing is actually blocked
    - Start with only default-src 'self' and build up the CSP based on console errors
      - Start with no trust then change to trust as required
      - This should be repeated until console errors are eliminated
    - Build the CSP to support the site as it is today 
    - Configure the report-uri Directive and monitor until the CSP is accurate

9 - Browser Compatibility
  - Using the caniuse site to check compatability in each browser
    - https://caniuse.com/
  - This will change with each browser version

10 - Summary
A brief summary of what the chapter covered



                    Section 4 - Content Security Policy (CSP)
1 - Overview
A quick view of the material to come in the chapter

2 - Understanding the Problem that CSP Solves
  - XSS is one of the most common attacks that CSP tries to prevent
  - A video by Brenno de Winter to demonstrate XSS
    - The attack on banks causes elements to jump around the page
    - A JS eval statment can be seen in the URL and it is an example of a reflect XSS attack
  - It is recommended to learn more about session hijacking and XSS
  - Common Cross Site Scripting (XSS) attack vectors
    - Embedding external rources in the page
    - Writing script to the page source
    - A persistent XSS attack gets a script to a db
    - Directly modifying the Document Object Model
  - Exploiting a site that does not have a CSP
    - There is a script provided that will reproduce the above attack (Harlem Shake) on most sites
    - This modifies the DOM on the client
