                    Secure Authentication for Web Apps & APIs Using JWTs
                    Course Notes Part 5


                    Section 4 - User Information in the Payload
1 - Decoding a JWT
Finding user information in the payload
Example Syntax Profile Component
// You probably won't have that much information in the token about the user
  export class profileComponent implements OnInit{
    profile: Profile,
    payload: Object;
    
    constructor(private auth: AuthService){}
    
    ngOnInit(){
      this.profile = jwtDecode(this.auth.getToken());
      this.payload = jwtDecode(this.auth.getToken());
      this.profile.gravatar = `${this.profile.gravater}?s=200`;
    }
  }

2 - Payload Best Practices
Although tempting do not put the whole profile object in the payload
Important to keep the JWT small as it is sent over the network on all requests
Keep sensitive information out as JWT is decodable
Consider a separate endpoint which retrieves a user profile object if a lot of profile data is needed

3 - Challenge: Reading the Payload
The challenges for this section are
  - Checkout branch 03-user-profile-starter, available at
    - https://github.com/chenkie/angular2-user-authentication/tree/03-user-profile-starter
  - Read the user's profile from the JWT payload
    - There are libraries available
  - Display the user's details in a profile view question asked by a student about stale data
    - What happens if data becomes stale, eg user has elevated permissions during session, would user have to 
      log out and back in.
  - The solution once again is situation dependent and you may want to make use of a token blacklisting mechanism
    - There could also be a data checking mechanism introduced on the backend
  - You can use tokens as similar to API keys as they have the same granular control
    - You can fine tune what resources user has access to and what type of access eg read & write

4 - Reading the Payload Solution
Example Syntax
  // Use the jwtdecode library
  ngOnInit(){
    this.profile = jwtDecode(this.auth.getToken());
    this.payload = jwtDecode(this.auth.getToken());
    this.profile.gravatar = `${this.profile.gravater}?s=200`;
    
  }
The code from the Angular 2 example that is complete is available here
  - https://github.com/chenkie/angular2-user-authentication/tree/03-user-profile-solution
  
  
  
                    Section 5 - Protecting Resources
1 - How JWTâ€™s Protect Resources
Protecting resources is a very important part of JWT
  - The main point of adding authentication to an application is to restrict resource access to thoes who have
    proven that they are allowed access to those resources
  - There are different levels of access
    - Publically Accessible which means that resources are open to everyone
    - Limited to Authenticated Users which means the data is open to anyone that is logged in
    - Limited to only on e authenticated user which means data is open to only the user logged in
    - Limited to a subset of Authenticated Users which means that access is open to anyone of a particular privilege level
How do JWT's help us protect resources
  - We can create endpoints for our resources that require an authentication check
  - To pass the check a valid JWT must be present
  - When making HTTP requests we can send the JWT as an authentication header
  - The header is then read at the API and if valid then the resource becomes valid

2 - Exploring JWT Middleware
Exploring API Verification Code in the example server.js file
Example Syntax
  // This example uses hapi.js rather than express.js
  server.register(require('hapi-auth-jwt'), (err) => {
    // The name of the strategy in the example is jwt
    server.auth.strategy('jwt', 'jwt', 'required', {
      key: process.env.SECRET_KEY,
      verifyOptions: {
        algorithms: ['HS256']
      }
    })
  })

3 - Making Authenticated Requests
Sending authentication requests requires retrieving the JWT from storage and attaching it as an Authorization header
Some of the common implementations are
  - Explicitly on a per-request basis
  - Globally on all requests
  - Only requests of a certain kind
Storing the JWT in a cookie means that it will go to the server on every request
Example Syntax
  let headers = new Headers();
  // The Bearer is used as a authorisation scheme in oauth others include Digest and Basic
  headers.append('Authorization', 'Bearer' + token);
  this.http.get(API_URL, { headers })
    . map(res => res.json())
    .subscribe(data => console.log(data));
  
provideAuth Syntax using Angular 2 syntax
  @NgModule({
    declarations: [],
    imports: [],
    providers: [
      AuthService,
      AuthGuard,
      RoleGuard,
      provideAuth({
        tokenGetter : () => {return localStorage.getItem('token')}  
      }),
      instructorService
    ],
    bootstrap: [AppComponent]
  })
  export class AppModule
