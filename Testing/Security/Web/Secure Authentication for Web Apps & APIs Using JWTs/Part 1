                    Secure Authentication for Web Apps & APIs Using JWTs
                    Course Notes Part 1


                    Section 1 - JSON Web Tokens
1 - Getting Started
Quick run through of the agenda
Course has made demo application available in angular 1 & 2 and also React
Course will use Angular 2 code samples
  - https://github.com/chenkie/angular2-user-authentication
  - https://github.com/chenkie/angular1-user-authentication
  - https://github.com/chenkie/react-user-authentication
    - ** if using the React version you may need to create an env file at the root of the project
API that course will be using, it requires having MongoDB installed
  - https://github.com/chenkie/user-authentication-api
Live version of the API is being served at this link
  - https://user-authentication-api-ocokqryugz.now.sh/api/


2 - Application & API Demonstration
Quick demonstration of the example application
The different frameworks are pretty much the same apart from a couple of lines
The Demo API
  - Is a simple REST APi that allows users to sign up and log in
  - When a user has been authenticated a JSON Web Token is returned in the response
  - The API has a resource called instructors which returns a list of instructors
A quick demonstration of what a JSON Web Token looks like under the bonnet
  - Response has the key token and long string
  - Postman is used as part of the demo and is a chrome based add on
    - https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en


3 - Challenge: Run the Finished Application
The challenge is to to run the finished app in any of the frameworks available
You will need to access the API and view the documentation for its endpoints
You can also clone and run the API locally
There is also the option of creating a user for yourself at the /api/users endpoint in Postman
  - https://github.com/chenkie/user-authentication-api  
  - https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop


4 - JSON Web Token Basics
There may be a bug in the react version login.js file
  - The onSignupSubmit should say this.props.auth.signup instead of this.props.auth.login
Also if Postman is causing payload errors set as form-data for the type
A JSON Web Token
  - It is an Open Standard RFC 7519
  - It is a method for transferring claims(assertions) between two parties securely through a JSON payload
  - A digitally signed and compact, self-contained package
  - It is also a great mechanism for stateless authentication
A JWT has 3 main sections
  - A header
    - JSON object that describes the token
    - Includes token type and signing algorithm
    - Signing algorithm is necessary for token verification
    - Commonly tokens are signed with HS256 or RS256
  - Payload 
    - JSON object that contains any claims abouth the entity for which it was issued
    - The JWT standard has a set of reserved claims
      - iss, sub, aud, exp, nbf, iat, jti
    - It can also contain arbitrary claims defined at will
  - Signature
    - A JSON object produced by Base64URL encoding the header and payload and then running through a hashing algorithm
    with a secret key
    - The signature is used as a means to digitally sign a token so that its validity can be verified later
    - If anything in the header or payload is modified the token will be invalidated
  

5 - Challenge: Inspecting a JWT
  - https://jwt.io/
  - JWT are often pronounced jot
  - The site allows you to decode, verify and generate JWT



                    Section 2 - JSON Web Tokens & Single Page Applications
1 - Traditional Authentication
Traditional client - server interactions were straightforware
  request <----> response
Modern interactions have become much more complex
Traditional authentication process
  - The user submits their credentials which are checked against a database
  - If everything checks out a session is created for them on the server and a cookie with session_id is sent back to the 
    browser
  - The cookie is sent back to the server on all subsequent requests and is verified against the session

There are some downside to this approach to authentication
  - Since a Single Page App does not refresh  how does it know that a user is logged in
    - Traditional apps construct views on the backend  which is where the authentication is checked
  - How do Single Page Apps receive their data, normally its a REST api through a XHR
    - REST api should be stateless and traditional authentication is stateful
  - Modern architecture relies on micro services and downstrem servers but cookies do not flow downstream
    - Communication between multiple servers with traditional auth is not easy
  - Access control will require database queries
    - This introduces a lot of general chattiness on the backend
  - This type of authentiaction does not scale well and can become very memory intensive
  - In traditional authentication the server does the heavy lifting
