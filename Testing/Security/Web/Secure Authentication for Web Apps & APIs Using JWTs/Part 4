                    Secure Authentication for Web Apps & APIs Using JWTs
                    Course Notes Part 4


                    Section 3 - Client Side Sessions
1 - Server-Side vs. Client-Side Sessions
The previous example left log in and log out buttons which is not good practice or practical.
The material will cover usignclient sessions to set up the UI
Sessions
  - In the most general of term sessions are a means to preserve a desired state
    - In the example it will be to check to see if the user has been authenticated
Server-Side Sessions
  - This is a piece stored in memory or the database on the server that tracks information
  - For authentication purposes this generally means an identifier for the user
  - Ultimately it is used to make a determination about the users authentication status
  - Keeping server-side sessions this way is stateful
Client-Side Sessions
  - SPA's require a way to know if the user is authenticated or not
  - This cannot be done in the traditional way because the SPA is decoupled from the backend
  - JWT is a stateless mechanism which means that no user session exists on the server anyway
Client Sessions
  - How can we have clients sessions using a stateless authentication mechanism
    - The best indication that we can go by is whether or not the user's JWT has expired or not
    - The rationale for this is that if the JWT is expired it cannot be used to access protected resources
    - Because the authenication in this scenario is concerned with protecting resources it can be used
      as an idication of authenticator state
  - The flow in a client session shouold look something like
    - When a user logs in provide an application wide flag to indicate that user is logged in
    - At any point in the application lifecycle the token's exp can be checked against the current time
    - If the token expires then change the flag to indicate that the user is logged out
    - The check is commonly done when a route change occurs
      - If the token is expired redirect the user to the login route
      - Toggle appropriate markup for the user being logged out

Example Syntax
  export class AuthService{
    constructor(private http: HTTP, private router: Router){}
  }
  
  isAuthenticated(): boolean{
    return tokenNotExpired('token');
  }

Use *ngIf in the HTML templates so that he user will have different view depending on their login status

Example Syntax for different roles
  // Using Typescript as it is Angular 2 
  export class AuthService{
    constructor(private http: HTTP, private router: Router){}
    
    isAdmin(): boolean{
      return jwtdecode(this.gettoken()).scope === 'admin';
    }
    
    getUseRole(): string{
      return jwtdecode(this.gettoken()).scope();
    }
    
    getToken(): string{
      return localStorage.getItem('token');
    }
  }

2 - Q&A: JWTâ€™s and Security
A series of questions and answers from students
Checking if a token is authenticated is a fairly thin layer of security but is useful to have as it
may prevent some access to resources.
Expiry time may not enable you to see if token is still valid
Deeper checks on token validtiy are possibe but come with a cost
Short expire time helps defend against token theft but you can also use token blacklisting but that maybe complex to setup
Change to expiry time is not valid as it will change the token
When developing an application firstly check if the solution is good enough and then look at the edge cases
  - EG expiry time should not be too short to affect user experience
Storing a token in a cookie may be more secure but it also my increase attack surface for XSS
You may need to ensure that your site is fortified against XSS
Do not put very sensitive information into a token
Token retrieval maybe possible after browser has closed but not with conventional tools or methods
Service Workers are an API for offline working in the browser

3 - Challenge: Expire Time
The challenges this time are
  - Checkout the 02-client-sessions-starter branch
  - Implement a function which uses the expiry time of the JWT to check whether or not a used is authenticated
    - The are libraries which may help with this
  - Conditionally show elements based on the authentication state
  - Users of Angular 1.x will have the easiest time
  - https://github.com/chenkie/angular2-user-authentication/tree/02-client-sessions-starter

4 - Expire Time Solution
Some Q & A from students
- Token refresh will be covered later
- Token deletion can occur usually using blacklisting
  - You will need an identifier for a specific token
    - You may use JTI claims to add identifiers to tokens
  - Using blacklisting may negate some of the JWT benefits
- https://github.com/chenkie/angular2-user-authentication/tree/02-client-sessions-solution
Example Syntax
  // Added to the auth service file, again Typescript will be used
  // In the authservice file there is a tokenNotExpired import from angular2-jwt
  isAuthenticated(): boolean{
    return tokenNotExpired('token');
  }
  
  // app.component.html Syntax
  // The same will be applied to the buttons in the home.component.html file
  // Will show if user is not authenticated
  <li *ngIf="!auth.isAuthenticated()"><a routerLink="/login">Log In</a></li>
  // Will show if user is authenticated
  <li *ngIf="auth.isAuthenticated()"><a routerLink="/home" (click)="auth.logout()">Log Out</a></li>
  
  
