                    Secure Authentication for Web Apps & APIs Using JWTs
                    Course Notes Part 3


Auth Service Syntax
  @Injectable
  export class AuthService{
    constructor(private http: Http, private router: Router){}
    
    login(credentials): Observable<Response>{
      return this.http.post(`${API_URL}/users/authenticate`, credentials);
    }
    
    signup(credentials): Observable<Response>{
      return this.http.post('${API_URL}/users', credentials);
    }
    
    finishAuthentication(token): void{
      localStorage.setItem('token', token);
      this.router.navigate(['profile']);
    }
    
    logout(): void{
      localStorage.removeItem('token');
    }
  }


5 - Challenge: Creating the Login & Signup
The challenges for the section are
  - Checkout branch 01-implmenting-auth-starter
  - Create a screen for login and signup
  - Make a POST request with the user's credentials
  - Store the JWT that comes back in local storage
  - Create a logout method that removes the token from local storage
  - Provide buttons for Log In and Log Out in home view and toolbar
  
  // The Angular 2 version is available at
  - https://github.com/chenkie/angular2-user-authentication/tree/01-implementing-auth-starter

6 - Creating the Login & Signup Solution
Solution to Login and Signup Exercise - Uses the Angular 2 solution
App runs on port 4200 by default
Solution Syntax
  export class LoginComponent{
    errorMessage: string;
    constructor(private auth: AuthService){};
    
    onLoginSubmit(credentials){
      this.auth.login(credentials)
      .map(res => res.json())
      .subscribe(
        response => this.auth.finishAuthentication(response.token),
        error => this.errorMessage = error.josn().message;
      )
    }
    
    onSignupSubmit(credentials){
      this.auth.signup(credentials)
      .map(res => res.json())
      .subscribe(
        response => this.auth.finishAuthentication(response.token),
        error => this.errorMessage = error.josn().message;
      )
    }
  }
  
  @Injectable
  export class AuthService{
    constructor(private http: Http, private router: Router){}
    
    login(credentials): Observable<Response>{
      return this.http.post(`${API_URL}/users/authenticate`, credentials);
    }
    
    signup(credentials): Observable<Response>{
      return this.http.post('${API_URL}/users', credentials);
    }
    
    finishAuthentication(token): void{
      localStorage.setItem('token', token);
      this.router.navigate(['profile']);
    }
    
    logout(): void{
      localStorage.removeItem('token');
    }    
  }
  
  HTML Syntax
  <button class="btn btn-primary" routerLink="/login">
    Log In
  </button>
  // Auth is used because auth is injected in the component
  <button class="btn btn-primary" (click)="auth.logout" routerLink="/home">
    Log Out
  </button>

Token will be stored in local stotage
Official Repository is at
  - https://github.com/chenkie/angular2-user-authentication/tree/01-implementing-auth-solution
  
  
