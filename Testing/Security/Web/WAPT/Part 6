                    Web Application Penetration Testing
                    Course Notes Part 6


Module 2 : Introduction to Web Applications (Cont)
Cookies (Cont)
  - A server can set a cookie via the Set-Cookie HTTP header field in a response message
  -  A cookie has a predefined format and has several fields
    - Domain -- A website only sets a cookie for its domain
      - google.com sets a cookie for the domain: google.com  or .google.com
      - The browser will install a cookie in the cookie jar and will send subsequent requests to the domain
        - This will include google.com, www.google.com, maps.google.com 
      - The scope of this cookie will be *.google.com 
      - Domain A cannot set a cookie for Domain B
        - The browser will sends A's cookie in accordance with the above domain scope 
        - This is to A and all of its subdomains including the path and the expiration date
      - There are a couple of important items to consider about the Domain field
        - A leading . if it is present will be ignored
        - If the server does not specify the domain attribute then the browser will automatically set the domain as the server domain and the cookie host-only flag
          - This means that the cookie will be sent only to that precise hostname 
    - Expires -- gives the cookie a time constraint
      - The cookie will only be sent to the server if it is not expired
      - Session cookies expire when the session exits
    - Path whose field specifies for which requests, within that domain, the browser needs to send the cookie
      - Example For cookies with path =/downloads, all subsequent requests to the following will include this cookie
        - /downloads , /downloads/foo, /downloads/foo/bar
        - There will not be cookies for /members or /blog etc
    - Content
      - A cookie can carry a number of values at once
      -  A server can set multiple values with a single Set-Cookie header by specifying multiple KEY=Value pairs
        - Example -- Username="Jack"; Authenticated="1"
    - HttpOnly flag which is used to force the browser to send the cookie only through HTTP
      - This flag prevents the cookie from being read via JavaScript, Flash, Java and any other non-HTML technology
        - This is a mechanism to protect against cookie stealing via XSS
    - Secure Flag which forces the browser to send the cookie only through HTTPS 
      - This prevents the cookie from being sent in the clear
  - The domain attribute represents the domain value for which the cookie is valid
    - Along with the path, secure and expires attributes, it is useful during the process in determining if a cookie must be submitted along with a new HTTP request
    - RFC6265 distinguishes cookies set with a specified domain value from cookies without a specified domain value
    - An important difference in the previous RFC is the leading dot at the start of the domain value string
      - As opposed to the previous RFC the leading dot has no significance and the browser does not care about it
  - Specified Cookie Domain
    - A cookie with a domain value specified will be sent by the browser when certain conditions occur
      - The cookie domain value = the target domain
        - If the cookie domain value is abc.site.com and the target domain requested by the browser is the same
          - If a request for https://abc.site.com/index.php then the cookie will be sent
      - The cookie domain value differs from the target domain and the cookie domain value is a suffix of the target domain
        - If the cookie domain value is site.com and the target domain requested by the browser is abc.site.com
          - If a request for https://abc.site.com/index.php is sent then the cookie will be sent beacuse site.com is a suffix of abc.site.com
      - There are some security implications
        - A page on the *.site.com target domain can set a cookie with the domain value site.com
          - The reverse though is not true, a page on the site.com target domain can set a cookie with the domain value *.site.com
        - This means that lower-level subdomains can set cookies for higher domains
          - On the reverse side, higher domains cannot set cookies for lower-level subdomains
  - Unspecified cookie domain
    - When a cookie does not contain a domain value, it is assumed that the host-only-flag is set to true
    - A cookie with the host-only-flag value will be sent only to the target domain that set it
      - A brief aside is that the RFC uses the term host instead of domain
    - If a page on the target domain site.com sets a cookie without the domain value
      - The browser will send this cookie only in HTTP requests that exactly match the following URLs
      - http[s]://site.com/*. 
  - Internet Explorer exception 
    - Internet Explorer does not distinguish between cookies with a specified domain value from ones with unspecified values
    - Cookies with unspecified domain values will be interpreted by the browser as if they had a domain value corresponding to the target domain set in it
    - A page on the target domain site.com sets a cookie without a domain value
      - IE is different from other browsers and will consider sending this cookie as if its domain value was set to site.com
      - It will send this cookie in HTTP requests that match the following URLs
        - http[s]://site.com/* 
        - http[s]://www.site.com/* 
        - http[s]://www.lab.site.com/*
        - http[s]://*.site.com/* 
  - Inspecting the Cookie Protocol
    - Depicting the process of cookie installation within a web browser
    - A login page is a great place for a session to begin and also a good point at which a cookie is installed in your browser
    - The web site will respond with a Set-Cookie response header
      -  This header contains the cookie to be installed in the browser and to be included in all subsequent requests to the example site
    - For every subsequent request, the browser will consider: Domain scope, Path, Expiration, Flag
    - If all the above checks pass, a cookie header that contains the cookie will be inserted into the Request header
  
Session 
  - Sometimes the web developer prefers to store information on the server side instead of the client side
  - This happens in order to hide the application logic or just to avoid the back and forth data transmission
  - HTTP sessions are a simple mechanism that allows websites to store variables specific for a given visit on the server side
  - The main difference between cookies and session variables is that cookies are stored on the client whereas session variables are on the server
    - In addition session variables expire with the session and sessions usually expire sooner than cookies do
  - The session mechanism works through the use of a session token 
    - This is also known as a Session ID
    - The session ID is assigned to the client by the webserver
    - The client will present this ID for each subsequent request in order to be recognised
  - The session ID provided by the client will let the server retrieve both the state of the client and all of its associated variables
    - A session ID can be thought of as similar to a primary key in a relational database where clientsâ€™ variables are stored
  - Session IDs can be stored within text files, databases or memory on the server
  - Session cookies just contain a single parameter formatted in a key value pair
    - An example is SESSION=0wvCtOBWHQ7r
    - Websites running PHP, typically install session cookies by using the "PHPSESSID" parameter name
    - JSP websites typically use "JSESSIONID"
    -  Each development language has its own default session parameter name 
      - They also usually allow developers to customise functionality eg change parameter names
  - If it is necessary some servers install session cookies after a browser performs some type of activity
    - This can include Logging In, Opening a specific page etc
    - Then the browser uses the cookie in subsequent requests
    - A session could contain many variables, so sending a small cookie keeps the bandwidth usage low
