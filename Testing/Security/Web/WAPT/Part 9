                    Web Application Penetration Testing
                    Course Notes Part 9


Module 3 : Information Gathering (Cont)
Infrastructure (Cont)
  - Cookies are also an interesting resource that may reveal useful information in this phase
    - Each technology has its default cookies names therefore, we can potentially guess it by inspecting the cookie header
      -  PHP -> PHPSESSID=XXXXX 
      - .NET -> ASPSSESSIONIDYYYY=XXXXX 
      - JAVA -> JSESSION=XXXXX 
  - There may be many different result outputs depending on the service running on the machine, the version, Operating System etc
  - Another tool that may prove to be useful is WhatWeb
    - This is a command line tool that can be used to recognize website technologies
    - Pentesting distributions such as Kali Linux already have it installed by default
    - To start using the too simply type the following in the terminal -> whatweb -h 
    - It can be added to an environment by cloning the Github repo using
      - git clone https://github.com/urbanadventurer/WhatWeb.git
    - The tool itself is very easy to use
      - You just need to type the name of the tool followed by the address (IP or URL) of our target and hit enter
      - You can specify multiple targets in the command or even IP ranges
      - There are  options that allow us to specify different user agents, HTTP basic authentication credentials, cookies, proxy and more
      - Also worth noting is that the tool automatically follows redirections
      - If you desire a more readable output, just use the -v option
  - Another very useful tool that can be used directly from our web browser is called wappalyzer 
    - It is a Web Browser plugin based tool that works both on Firefox and Chrome
    - Then you just have to navigate your target website: you will see some icons in your address bar
    - Each icon gives you information about the Web Server, such as the Operating System, The Web Server, JavaScript frameworks etc
    - In order to inspect the information found, just click on an icon and a pop up will appear on your right, listing all the information gathered
  - Similar to how we fingerprinted the web server version, we can find fingerprints of what modules are installed and in use on the server
    - Modules we are looking for are ISAPI modules (for IIS) or Apache modules that may interfere with or alter our test results
    - More and more websites use search engine and human-friendly URLs (SEF URL's)
    - Ugly URLs are the ones that carry query string parameters and values that are meaningful to the web server 
    - EG www.example.com/read_doc.php?id=100 tells the server to query the database to fetch the document with id=100.
    - A search engine-friendly version would be www.example.com/read/Buffer_Overflow.html
    - The two are related
      - When a user requests read_doc.php?id=100
      - The server side module in charge of translating the URL will use regular expressions to match a Rewrite rule 
      - This will translate the URL according to the rules specified by the administrator
    - URL rewriting is done on Apache with the mod_rewrite module or .htaccess
    - On IIS it is handled by Ionic Isapi Rewrite or Helicon Isapi Rewrite
  - The presence of URL-rewriting is easy to recognise and should be kept in mind during the testing phase when attempting input validation attack
  - 

Fingerprinting Frameworks and Applications 
  - Once a list of subdomains has been obtained then the appropriate techniques can be applied
    - Essentially we start looking at the webpages running on each of the subdomains that were found
  - Common applications are those pieces of software that are available online for anyone to use 
    - There is an acronym to describe these COTS - Common off the shelf
  - They can be either open source or commercial
    - Access to the source code is what makes them interesting for analysis
  - There may be an opportunity to read both the application logic and the security controls implemented
    - This gives a big advantage over custom in-house applications where the logic needs to be guessed to certain degree
  -

Fingerprinting Custom Applications 
  - When not in front of a commonly available application, you have to go through an initial overview of the application logic
    - This example has an in-house application customised for the organisation being tested
    - The inner logic is unknown to us but can be reverse engineered with a careful analysis of its behavior
  - 

Enumerating Resources 
  -

Relevant Information Through Misconfigurations
  - Sometimes the best way to retrieve relevant information about our web applications is to look for potential mistakes in web server configuration
  - A quick and very common way to gather information, files, source code and misconfigurations is by looking for open directory listings
    - These directories have been configured to show a list of the files and subdirectories in paths that we can access directly
    - 99% of the time, these directories have not been deliberately configured to show their content
      - They are just the result of a misconfiguration
    - Looking for directory listings is a task that anyone with a basic experience in scripting languages like Perl, Python etc can automate in few minutes
  - 

Google Hacking 
  -

Shodan HQ 
  -
