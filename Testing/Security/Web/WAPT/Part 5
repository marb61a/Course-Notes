                    Web Application Penetration Testing
                    Course Notes Part 5


Module 2 : Introduction to Web Applications (Cont)
Encoding (Cont)
  - Character References                  Rule                                        Encode Character
    - Named Entity                      &+named character references+;                &lt;
    - Numeric Decimal                   &+#+D+; D = a decimal number                  &#60;
    - Numeric Hexadecimal               &+#x+H+; H = A case insensitve hex number     &#x3c; &#X3C;
  - Although the primary purpose of HTML entities is not really to be a security feature however, its use can limit most client side attacks 
  - RFC 3986 states that URLs sent over the Internet must contain characters in the range of the US-ASCII code character set
    - If the URL contains unsafe characters they must be encoded
    - This encoding is important because it limits the characters to be used in a URL to a subset of specific characters
      - Unreserved Characters -- [a-zA-z] [0-9]  [- . _ ~] 
      - Reserved characters that have a special purpose -- â€¢ : / ? # [ ] @ ! $ & " ( )  * + , ;  =  % 
  - Other characters are encoded by the use of a percent char (%) plus two hexadecimal digits
    - Reserved chars must be encoded when they have no special role inside the URL, below is a list of common characters
    - Character         Purpose in URI                    Encoding
      #                 Separate Anchors                  %23
      ?                 Separate query string             %3F
      &                 Separate query elements           %24
      +                 Indicates a space                 %2B
  - When you visit a site, URL-encoding is performed automatically by your browser
  - Although it appears to be a security feature, URL-encoding is not
    - It is only a method used to send data across the Internet but, it can lower the attack surface in some instances and increase it in others
    - Usually, web browsers or other client-side components perform encoding and server-side script engine will do the decoding
  - Base64 is a binary-to-text encoding schema used to convert binary files and send them over Internet
    - HTML allows for including some resources using Base64 encoding
    - One example is including an image that has had its binary converted to Base64
    - The Base64 encoding scheme is composed of [0-9][a-zA-Z] and the + and / characters to give it 64
    - Different implementations however, may use other values for the latest two characters and the one used for padding (=)
  - This is not all encoding schemes, remember that any web designer or developer could easily create their own encoding schema

Same Origin 
  - One of the most important and critical points of web application security is same origin policy
    - This policy prevents a script or a document from getting or setting properties of another document that comes from a different origin
  - CSS stylesheets, images and scripts are loaded by the browser without consulting the policy
  - Same Origin Policy (SOP) is consulted when cross-site HTTP requests are initiated from within client side scripts
    - Or when an AJAX request is ran
  - The origin is defined by the values of three fields
    - The protocol, the host and the port
    - HTTPS is different from HTTP so https://abc.com is different from http://abc.com because the protocol is different
    - https://abc.com is different from https://new.abc.com because the host is different
  - The hierarchy of domains descends from the right to the left
    - https://www.abc.com:80
    - com is the top-level domain (TLD) 
    - abc is the second-level domain (SLD) 
    - www is the third level domain 
    - When not specified the default port is always 80
    - Content from about:blank, javascript: and data: inherits the origin
  - Internet Explorer works a bit differently from other browsers, there are 2 exceptions
    - Port: it does not consider the port as a Same Origin component
    - Trust Zone: the Same Origin is not applied to domains that are in highly trusted zone 
  - The primary purpose of SOP is to isolate requests coming from different origins. 
    - Without SOP it would not be possible to surf the internet
  - The main rule of SOP is that a document can access (through JavaScript) the properties of another document only if they have the same origin
    - This means that the browser always performs the request successfully but it returns the response to the user only if the SOP is respected
  - There are several different items that could be referred to when using the term document
    - It can be an HTML page, an iframe included in the main page, or a response to an Ajax request
    - Images, CSS and JS files are always accessible regardless their origin
      - The browser loads these without consulting the SOP
  - There are several exceptions to SOP restriction
    - Window.location -- A document can always write the location property of another document
      - The window.location object can be used to  get the current page address (URL) and to  redirect the browser to a new page
      - A document can always update the location property of another document, if they have some relationship
        - There are some typical relationships which include
          - A document which is embedded within another via an iframe element, one document is opened by the other via the window.open DOM API
    - Document.domain -- This property describes the domain  portion of the origin of the current document. 
      - A document with the URL --  http://subdomain.domain.com/index.html  has the document.domain property set to  -- subdomain.domain.com 
      - This property can be changed
        - A document can update its own document.domain to a higher level in the domain hierarchy, except for the top level
        - The second-level domain (e.g. domain.com) can be specified but it cannot be changed 
        - By changing the document.domain property, a document partially changes its own origin. 
      - Example -- a document with the following URL
        - http://a.abc.com/index.html
      - This includes via an IFrame another document belonging to a different origin
        - http://b.abc.com/index.html
      - Due to SOP the JS code running from the context of the main document cannot access
        - Via JS the iframe content because the two documents come from different origins
      - This can be circuvented though
        - By using the JS code document.domain="abc.com" on both documents
    - There is a new HTML5 feature known as Cross Window Messaging 
      - This permits different documents (iframes, popups, current window) to communicate with each other regardless of the SOP
        - This is done by using a simple synchronous mechanism
  - Cross origin resource sharing is a set of specs built to allow a browser to access a few resources by bypassing the same origin policy
    - CORS architecture uses custom HTTP response headers 
    - It relies upon server-side components or server-side scripting languages

Cookies 
  - HTTP is a stateless protocol
  - This means that a website cannot retain the state of your visit between different HTTP requests without mechanisms 
    - This includes items such as sessions or cookies
    - Each visit without a session or a cookie looks like a new user to a server and a browser
  - In 1994 netscape invented cookies to make HTTP stateful
  - Cookies are just textual information installed by a website into the "cookie jar" of the web browse
    - The cookie jar is the storage space where a web browser stores the cookies
    - They are fragments of text containing variables in the form of name=value
  
