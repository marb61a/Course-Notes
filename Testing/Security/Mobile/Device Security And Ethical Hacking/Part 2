                    Mobile Device Security And Ethical Hacking
                    Course Notes Part 2


4 - What You Need To Know Android
The most popular platform in the world
  - Much more popular than iOS
  - It is developed by the Open Handset Alliance led by Google
There are many hardware manufacturers who use the Android OS
  - There is a lot of competition
  - There are a lot of superior features compared to iOS because of the competition
  - This also leads to a reduced price for entry compared to iOS/Apple devices
  - Support can be difficult due to the large amount of devices and software features
Android is much more flexible on the hardware side
  - iOS uses only only ARM CPU, Android can have ARM, Intel etc
  - Android kernel architecture uses Linux
  - The Yaffs filesystem is deprecated
Android Fragmentation problem  
  - Because of the multiple versions of the OS users and developers may not be able to use all feature
  - The N version of Android is used by only 1.2% of users
  - New releases of Android which happen on an annual basis have a lead time of around 18 months
    - This means that there is around 18 months until meaningful usage by users of that new version
    - Majority use is about 3 months behind releases
  - This is big security headache
    - There may not be updates available for these users of older systems
Android OS Security Model
  - There is a great deal of flexibility and options are available
  - Handset manufacturers can decide to implement measures or not
    - Many implement locked bootloaders in order to both
      - Prevent loading alternative OS and accidental bricking of devices
Android Apps
  - These 'native' apps are written in Java or a variation eg Kotlin
  - This is as a language but not as a runtime
  - Java apps are bytecode compiled into a platform independent DEX format
  - Bytecode compiled apps are interpreted by the Android Dalvik process virtual machine
  - On newer systems there is the Android Run Time
Dalvik
  - The newer Android Runtime takes the DEX executable and turns it into an ELF file
    - https://en.wikipedia.org/wiki/Android_Runtime
  - Dalvik is not a Java vm though it leverages the Java language
  - It was designed for increased performance on embedded systems
  - The Dalvik vm reads the .dex files and translates the bytecode to machine instructions using a Just In Time compiler
  - This provides isolation among processes while running multiple simultaneous vm instances
  - It does not however provide sandboxing or chroot environment to isolate a process from file system access
    - This responsibility falls to the OS and the file system privilige control
Android Runtime (ART)
  - This is the development replacement for Dalvik
  - At app installation ART compiles bytecode to native machine code
    - This is an Ahead Of Time (AOT) compiler vs Just In Time (JIT) for Dalvik
    - When an app is launched there is no need for interpretation for execution to happen
  - There are some benefits to this including improved system responsiveness and better battery performance
  - There are also some drawbacks including longer install times and greater storage necessary
  - This also does not thwart Reverse Engineering
Android Account Isolation
  - Android does not use Sandboxing
  - Each application receives a unique UID and GID at installation
    - This give limited permissions within a designated application directory
    - These UID and GID are allocated as follows
      - OS Use 0 - 999, Device Permissions 1000 - 9999, Application UID's 10000 - 65535
  - It interacts with other apps using Android components
Application Privileges
  - Each user account is assigned group privileges based on the app-declared privilege requirements
    - These required privileges are listed in the AndroidManifest.xml file in the app
  - Installer app generally prompt the user to validate the requested permissions
    - There is no option to selectively grant permissions and it is an all or nothing case for the app
  - Users are not subsequently prompted when apps make use of approved privileges
  - There are many app which request privileges where the functionality of these is unclear to the user
    - Most install anyway out of, or despite uncertainty
Android Permission Definition
  - The legacy way of getting permissions is from the AndroidManifest.xml file which is part of the app
    - Some permissions are 
      - WRITE_EXTERNAL_STORAGE which allows the app write to an external device such as an SDCard
      - INTERNET which allows the app internet access
      - READ_PHONE_STATE which allows the apps access to the IMEI
Android Runtime Permissions
  - This is a change introduced from API 23 and beyond
  - There are 2 permission groups Normal and Dangerous
    - The user will then be prompted for permissions when invoking an app
  - This gives the permissions a more iOS feel
Android Normal Permissions
  - There a several normal permissions granted automatically from Android 6 on
    - Users are not prompted and permissions are not displayed at installation
    - These include Set Alarm, Start At Boot, Set Wallpaper, Disable Keyguard & Use Fingerprint
  - These permissions are desiganted are PROTECTION_NORMAL
Android Dangerous Permissions
  - They are classifed in 9 permission groups
    - Calendar, Contacts, Camera, Location, Microphone, Phone, Sensors, SMS & Storage
  - These must be individually declared in the AndroidManifest.xml file
    - Users will be prompted to permit or deny by group rather then individual permissions
  - Granting Phone permission also gives several other permissions
    - READ_PHONE_STATE, CALL_PHONE, READ_CALL_LOG, WRITE_CALL_LOG
    
 
