                    Mobile Device Security And Ethical Hacking
                    Course Notes Part 5


2 - Reverse Engineering Obfuscated Applications
Reversing 3rd party app platforms
  - Xamarin
  - PhoneGap
Reverse Engineering Obfuscated Applications
  - Reverse-Engineering Android applications using Jadx is straightforward enough
    - It can be time consuming but easy enough to get to Java source code
  - Developers try to make using reverse-engineering tools on Android much more difficult
    - They use techniques such as defensive coding and app obfuscation
  - iOS is much more difficult to reverse engineer 
Reverse Engineering of non-native platforms changes
  - Behavioural analysis however stays the same
There will be a lot of code looked at in this module
  - There is a warning given to students to prepare them for this
  - There is no assumption of coding skills of students
  - Most professional developers use Stack Overflow to find answers too
    - Very rarely code is written without looking material up eg API documentation
  - Understanding coding techniques can be a very valuable skill to learn for security specialists
    - This will make you a better security analyst
Unity Framework
  - There is a need to understand 3rd party platforms and Unity is a very popular one
  - It is used to develop 2d and 3d games
    - This can be extended to develop utility apps
  - https://unity3d.com
  - Developers using Unity can code in JavaScript, C# and BOO
    - The unity engine on iOS and Android converts instructions at runtime to native
ProGuard
  - This is a very popular tool among Android developers
  - https://www.guardsquare.com/en/proguard
  - It is an open source bytecode optimiser for Java
  - It is included by default with the Android Studio IDE 
    - It needs to be turned on as default if turned off
Unity
  - Unity applications can be examined
  - Typically this will be the Android version of the application if on Andoid systems
    - Some files when unpacking an apk are
      - AndroidManifest.xml -- Android App delarations
      - classes.dex -- Minimal Android app to launch the Unity engine
      - lib/* -- Natively compiled libraries for the Unity engine
      - assets/bin/Data/* -- Shaders, textures and other Unity objects
      - assets/bin/Data/Managed/Assembly*.dll -- Unity app binaries
  - The iOS version will also be looked at in the same way but files will be fairly similar
  - There are code obfuscation methods available in Unity
Unity Code
  - Much of the interesting Unity code is in assets/bin/Data/Managed/Assembly as DLL files
    - For app analysis only managed DLL files are of interest 
    - Exploit developers however may find the Unity runtime environment interesting
  - Unity Code is distributed in Common Intermediate Language (CIL) format
    - Like a jar file this is non-native bytecode
Obfuscation Scope
  - This refers to what can and cannot be obfuscated
  - No Android app can be 100% obfuscated
    - Non obfuscated code can be used to infer details about obfusacated code
  - What can be obfuscated
    - Anything that the developer creates eg classes, methods etc
  - What cannot be obfuscated
    - Any third party libraries distributed as binaries
    - Any SDK API functionality
  

3 - App Report Cards
This is an important topic for both Enterprise defenders and Application analysts
  - There are many steps needed to analyse apps and this can be a daunting task
App Report Cards
  - A small resource from the instructor of the course
  - There is a need for a resource to analyse, record and then report on concerns
  - Both Android & iOS applications should be reviewed
  - App Report Cards make this analysis and reporting consistent
  - This is fundamentally a spreadsheet but with a weighted scoring system
The first sample app to be examined is the ooVoo app
  - https://play.google.com/store/apps/details?id=com.oovoo&hl=en
  - It is similar to and a possible competitor of Skype
  - This means that it is a hi-quality video chat app
  App Binary Tests
    - Ensure that the app is configured to use PIE
      - PIE (Position Independent Executable) (ASLR)
    - Ensure that Stack Canary protection is used
    - Also ensure that the application uses ARC memory management
      - ARC(Automatic Resource Counter) or does the developer take responsibility for memory management
    - To check if these have been turned on use otool
      - otool -hv ooVoo | grep PIE
      - otool -I -v ooVoo | stack chk
      - otool -I -v ooVoo | grep objc_release
      - The needle utility could be used 
    - Identify URL handlers
      - Examine the Info.plist file & CFBundleUrlSchemes array
      - 
