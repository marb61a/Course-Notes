                    Learn Unit Testing with NUnit and C#
                    Course Notes Part 1


Getting Started
Outline
  - Quick intro to the course and what the section will cover

What is a Unit Test 
  - A Unit Test is a function which calls another function, it then checks the outcome of the called function for correctness
    - If the outcome is not correct then the test fails
  - SUT is an acronym standing for System Under Test
    - It is an object instance which are going to be tested
  - Integration Testing is testing a unit of work without having control over it
    - This will use some of the real dependencies such as database, threads etc
  
Unit Testing Frameworks
  - There are several different unit testing frameworks available
  - MSTest
    - This is a framework already integrated into Visual Studio by default
    - It is however missing some features out of the box
  - NUnit
    - Is one of the oldest .net testing frameworks
    - It has the complete feature set required from a good unit testing framework
    - It is easy to use and integrates well with other tools
  - xUnit.NET
    - This is not recommended as there is poor documentation and a poor API
  - There is very little difference between the frameworks
  
Your First Unit Test
  - Example App, code located at
    - https://github.com/marb61a/Course-Notes/blob/master/Testing/CSharp(C#)/Learn Unit Testing with NUnit and C#/Snippets/PortParserEx
  - You should add a new project for tests
  - This should be the same name as the project being tested but with tests appended eg Business and BusinessTests
  
Naming Conventions
  - Testing on the .net platform ahs certain naming convertions to follow
  - Testing projects are always named after the project that they are testing
    - BusinessProject in testing becomes BusinessProject.Tests
  - Testing classes follow a similar naming path with the class being tested added to tests
    - Car.cs becomes CarTests.cs
  - There are 3 different styles for naming method tests
    - Should AddTwoNumbers -- Describes the overall purpose of the test
    - Sum_ShouldAddTwoNumbers -- Adds the unit test name to the unit under test
  - The third is the most complex and follows the following schema
    - UnitUnderTest_Scenario_ExpectedOutcome
    - This was the schema followed in the port checking example
    - There are also 3 ways of naming the outcome depending on the unit under test
      - ReturnsValue -- eg ReturnsString
      - ChangesState or SetState -- eg SetNumberToZero
      - CallsDependency -- eg CallsProcessingGateway

Running and Debugging Unit Tests
  - Editing the example code located at
    - https://github.com/marb61a/Course-Notes/blob/master/Testing/CSharp(C#)/Learn Unit Testing with NUnit and C#/Snippets/PortParserEx
    - This has been editied to add another unit test
  - This is to demonstrate using Visual Studio for unit testing
  - Demonstrating features of Visual Studio
    - It is a good idea to pin the Test Explorer window when running tests
    - Clicking the run all option will trigger the building of the whole app in case it has not
      - After this then it runs all discovered tests
    - Selecting the run option gives a much more granular control over which tests are run
      - You can run only failed tests, passed tests, not run tests as well as analysing code coverage of tests
    - The last option available is the playlist option
      - This allows for custom playlists of tests to be run, these playlists can be saved for further use
    - To add a test to a playlist, right click on the test to be added
      - Select add to playlist, if there is no playlist or you wish to add a new one the wizard will allow you to create one
    - Using the context menu you can runn tests separately
      - Simply right click on the test and select run test
      - You can also use this menu to debug tests using breakpoints
    - There is also a small icon which allows for grouping of tests of different types
