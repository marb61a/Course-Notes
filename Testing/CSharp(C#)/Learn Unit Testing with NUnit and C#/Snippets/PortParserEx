SerialPortParseEx.cs

using System;

namespace SerialPortParseEx
{
    public class SerialPortParser
    {
        public static int ParsePort(string port)
        {
            if(!port.StartsWith("COM"))
            {
                throw new FormatException("Port is not in the correct format");
            }
            else
            {
                const int lastIndexOfPrefix = 3;
                string portNumber = port.Substring(lastIndexOfPrefix);
                return int.Parse(portNumber);
            }
        }
    }
}


SerialPortParseEx.Tests.cs

using NUnit.Framework;
using System;

namespace SerialPortParseEx.Tests
{
    // Classes need to be marked with a test fixture attribute if they 
    // are to been seen by the test explorer
    [TestFixture]
    public class SerialPortParserTests
    {
        // Methods need to be marked with a test attribute if they 
        // are to been seen by the test explorer
        [Test]
        public void ParsePort_COM_Returns1()
        {
            int result = SerialPortParser.ParsePort("COM1");
            Assert.That(result, Is.EqualTo(1));

            // The older style of NUnit asserts are
            // Assert.AreEqual(result, 1)l
        }
        
        // Checks to see if the function under test throws a format exception
        // if the serial port string has an invalid format
        [Test]
        public void ParsePort_InvalidFormat_ThrowsInvalidFormatException()
        {
            TestDelegate <action> = () => SerialPortParser.ParsePort("1");
            Assert.Throws<FormatException>(action)
        }
        
    }
}
