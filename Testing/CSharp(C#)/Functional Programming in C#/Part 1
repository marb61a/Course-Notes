                    Software Architecture: Functional Programming in C#
                    Course Notes Part 2


Introduction to Functional Programming
Outline
  - Quick outline of the course and section

Programming Paradigms
  - A lot of developers are not familiar with Functional Programming
  - There are several different programming paradigms
    - Imperative Programming
    - Procedural Programming which is derived from Imperative
    - Declarative Programming
    - Functional Programming
    - Object Oriented Programming
    - Event driven Programming
    - Automata based Programming
  - Functional Programming is not an exotic new trend
    - It is in fact the oldest paradigm at over 60 years old
  - Many programmers use Functional Principles daily without realizing
  - Most languages cater for multiple different paradigms
  - Functional Programming was bought into C# in version 3 with LINQ and method extensions
  - Functional Programming enforces immutability of types and operations
  - C# is imperative, void methods have side effects!!
  - In C# OOP is the primary style FP is of secondary importance

Defining Functional Programming
  - Functional Programming is a programming paradigm that treats computation as the evaluation of mathematical functions
  - It also avoids changeable-state and mutable data
  - It is a declarative paradigm which means that coding is done with expressions or declarations rather than statements
  - Example y = F(x)
    - This always produces the same result for the same input
    - Example y = x ^ 2 
      - 4 = 2 ^ 2 and 8 = 2 ^ 3
  - Classical functions in FP are true mathematical functions
  - Programs written using Functional Programming are
    - More predicatable, easier to test, easier to maintain

Functions Are Everywhere
  - In OOP the core concept is Object
  - In FP functions are the 'first class citizens in codebases'
  - The best practices of implementing functions in OOP languages are aligned with how functions are written in FP languages
    - Keep functions small
    - Do not repeat yourself (There should be only one source of authoritative knowledge)
    - Functions must only do one thing
  - 

Why Functional Programming
  -


