                    TDD in C# From A to Z
                    Course Notes Part 1


Introduction to TDD
Outline
  - Quick intro to the course and what the section will cover

Why we need TDD
  - There are 100s of traps within code\apps that has been written
  - Often problems will not be discovered until the customer has taken delivery of the software
  - There is an example canonicalizing app used
    - The code for the example is located at
    - The app will capitalise letters and will arrange the words alphabetically
  - This application in initial form will accept null (in the form of an empty string)
    - This will then throw a ArgumentNullException
    - Although this is the format used, an empty string is not a null, it is an empty string!!!
    - Instead of looking for an input exception check explicitly for null
  - The application will also not render properly strings with white space
  - There will also be problems with a string with white space which will cause an error
    - This is rectified by adding an initial seed value to the aggregate function
  - Unit testing means having a suite of tests which can be run and verified
  - If 100% of the codebase is covered by tests then they can be run anytime
  - Tests should be run prior to adding functionality
  
What is TDD 
  -
  
Red Green Refactor
  - 
  
Three Laws of TDD
Changing Requirements and the Safety Net
F.I.R.S.T
Code Coverage
Different Types of Tests
Testing Frameworks and Tools 
When TDD Fails
Conclusion 



