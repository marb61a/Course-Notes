                    TDD in C# From A to Z
                    Course Notes Part 1


Introduction to TDD
Outline
  - Quick intro to the course and what the section will cover

Why we need TDD
  - There are 100s of traps within code\apps that has been written
  - Often problems will not be discovered until the customer has taken delivery of the software
  - There is an example canonicalizing app used
    - The code for the example is located at
    - The app will capitalise letters and will arrange the words alphabetically
  - This application in initial form will accept null (in the form of an empty string)
    - This will then throw a ArgumentNullException
    - Although this is the format used, an empty string is not a null, it is an empty string!!!
    - Instead of looking for an input exception check explicitly for null
  - The application will also not render properly strings with white space
  - There will also be problems with a string with white space which will cause an error
    - This is rectified by adding an initial seed value to the aggregate function
  - Unit testing means having a suite of tests which can be run and verified
  - If 100% of the codebase is covered by tests then they can be run anytime
  - Tests should be run prior to adding functionality
  
What is TDD 
  - Test Driven Development is also called Test First Development
  - This approach involes writing tests ahead of production code
  - These tests will drive production code which is the opposite of the standard approach
  - The goal is to keep the application design modular to enable easy writing of unit tests
    - This has led to Test Driven Development being called Test Driven Design
  - Prior to TDD unit tests were not written until after the application was written and then the pieces were being connected
  - Functional code is not good for unit tests
  - TDD makes thinking about making production code testable
  - Following this practice will make developers more efficient
  - By using TDD there is automatically a 70% code coverage for tests
  - There is a misconception that TDD is the cuse of doubling of efforts
    - This is not true as unit tests will have to be written and TDD reduces production bugs by 40% - 80%
  - Another popular misconception is that you cannot write code until you know the design
    - Also attached to this is that you cannot know the design until you implement the code
    - This can lead to rushed development as developing without a plan is invariably a poor choice
  - Yet another popular misconception is the notion that you have to write all tests prior to development
    - This is a complete myth in all disciplines of engineering
    - An initial design is an exploratory document
    - Instead the process to follow is 
      - Write a test, watch it fail, implement the production code, ensure the test passes and then repeat

  
Red Green Refactor
  - The main technique of TDD is called Red-Green refactoring
  - These are 3 short names for repeatable steps
  - The example code for the calculator app is available at
    -
  -
  
Three Laws of TDD
  - 

Changing Requirements and the Safety Net
  - 

F.I.R.S.T
Code Coverage
Different Types of Tests
Testing Frameworks and Tools 
When TDD Fails
Conclusion 



