using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exercise3Q4
{
    class Exercise3Q4
    {
        static void Main(string[] args)
        {
            // Before making the base class abstract you will be able to see 4 of AccessorTest variables
            // AccessorTest at = new AccessorTest();

            //Console.WriteLine($"Internal int is {at.internalInt = 4}");
            //Console.WriteLine($"Private int is {at.PrivateInt = 4}");
            //Console.WriteLine($"Protected Internal int is {at.protectedInternalInt = 4}");
            //Console.WriteLine($"Public Int is {at.publicInt = 4}");

            AccessorTestDerived adt = new AccessorTestDerived();
            Console.WriteLine($"Internal int is {adt.internalInt = 4}");
            Console.WriteLine($"Private int is {adt.PrivateInt = 4}");
            Console.WriteLine($"Protected Internal int is {adt.protectedInternalInt = 4}");
            Console.WriteLine($"Public Int is {adt.publicInt = 4}");

            Console.ReadKey();
        }
    }
    
    abstract class AccessorTest
    {
        public int publicInt;
        internal int internalInt;
        protected int protectedInt;
        protected internal int protectedInternalInt;

        // Will not be seen so a property of the same name but with an uppercase first character
        private int privateInt;

        public int PrivateInt
        {
            get
            {
                return privateInt;
            }
            set
            {
                privateInt = value;
            }
        }

        // Needs to be above C Sharp 7.2 to work
        // private protected int privateprotextedVarable;
    }

    class AccessorTestDerived : AccessorTest
    {
        public void variablesMethod()
        {
            publicInt = 5;
            internalInt = 5;
            protectedInt = 5;
            protectedInternalInt = 5;
            PrivateInt = 5;
        }
    }
}
