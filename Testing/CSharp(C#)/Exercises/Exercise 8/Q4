using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exercise8
{
    class MainEx
    {
        static void Main(string[] args)
        {
            Rectangle rect = new Rectangle(0,0);
            double area = rect.getArea(10.0, 15.0);
            WriteLine("The area of the rectangle is {0} ", area);

            ReadKey();
        }
    }
}



using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exercise8
{
    abstract class Shape
    {
        public double Length { get; set; }
        public double Width { get; set; }

        // An Abstract method is a method without a body. 
        // The implementation of an abstract method is done by a derived class.
        public abstract double getArea(double Length, double Width);

        public virtual void Info()
        {
            WriteLine("I am an undefined shape");
        }
    }
}



using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exercise8
{
    class Rectangle : Shape
    {
        public Rectangle(double length, double width)
        {
            Length = Length;
            Width = width;
        }

        public override double getArea(double Length, double Width)
        {
            return Width * Length;
        }

        public override void Info()
        {
            WriteLine("I am a Rectangular shape");
        }
    }
}
