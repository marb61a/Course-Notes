using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exercise8
{
    public abstract class Shape
    {
        protected double length;
        protected double width;

        public double Length
        {
            get
            {
                return length;
            }
            set
            {
                if (value > 0)
                {
                    length = value;
                }
            }
        }

        public double Width
        {
            get
            {
                return width;
            }
            set
            {
                if (value > 0)
                {
                    width = value;
                }
            }
        }

        // An Abstract method is a method without a body. 
        // The implementation of an abstract method is done by a derived class.
        public abstract double GetArea();

        public virtual void Info()
        {
            WriteLine("I am an undefined shape");
            ReadKey();
        }
    }
       
}


using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Exercise8
{
    class Rectangle : Shape, IComparable
    {
        // Default no-args constructor
        public Rectangle()
        {
            this.length = 0;
            this.width = 0;
        }

        public override double GetArea()
        {
            return this.width * this.length;
        }

        public override void Info()
        {
            WriteLine("I am a Rectangular shape");
        }

        public int CompareTo(object obj)
        {
            if (obj == null)
                return 1;
            if (!(obj is Rectangle))
                throw new ArgumentException();

            Rectangle target = (Rectangle)obj;
            double diff = this.GetArea() - target.GetArea();

            if (diff == 0)
                return 0;
            else if (diff > 0)
                return 1;
            else
                return -1;

        }

    }
}
