using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StackSortingEx
{
    class Program
    {
        public static void StackSorter()
        {
            // Create an instance of the stack
            Stack<int> firstStack = new Stack<int>();
            Stack<int> tempSecondStack = new Stack<int>();

            // Add values into the stack
            firstStack.Push(15);
            firstStack.Push(200);
            firstStack.Push(1);
            firstStack.Push(75);
            firstStack.Push(-456);
            firstStack.Push(-15);
            firstStack.Push(999);
            firstStack.Push(700);
            firstStack.Push(413);
            firstStack.Push(324);

            // Passes the stacks into the sorting method
            // SortStackDescOrder(firstStack, tempSecondStack);
            SortStackAscOrder(firstStack, tempSecondStack);

            // Passes the temporary second stack to be printed as it has been sorted
            Printstack(tempSecondStack);
        }

        // Sort the stack in descending order using the tempStack
        // It takes the 2 stacks as method parameters
        public static void SortStackDescOrder(Stack<int> firstStack, Stack<int> tempSecondStack)
        {
            // Does while there are values on the stack
            while(firstStack.Count != 0)
            {
                // Assigns a variable to the number popped off of the stack
                int numElement = firstStack.Pop();

                // While the second temporary stack is not equal to zero and the variable
                // assigned is larger than the first number which can be seen by peeking
                while(tempSecondStack.Count != 0 && numElement > tempSecondStack.Peek())
                {
                    // Pushes from the first array into the temporary holding array
                    firstStack.Push(tempSecondStack.Pop());
                }
                tempSecondStack.Push(numElement);
            }
        }

        // Simply reverses the operations from the descending order, the element must be less than
        // the temporary stack peek
        public static void SortStackAscOrder(Stack<int> firstStack, Stack<int> tempSecondStack)
        {
            // Does while there are values on the stack
            while (firstStack.Count != 0)
            {
                // Assigns a variable to the number popped off of the stack
                int numElement = firstStack.Pop();

                // While the second temporary stack is not equal to zero and the variable
                // assigned is larger than the first number which can be seen by peeking
                while (tempSecondStack.Count != 0 && numElement < tempSecondStack.Peek())
                {
                    // Pushes from the first array into the temporary holding array
                    firstStack.Push(tempSecondStack.Pop());
                }
                tempSecondStack.Push(numElement);
            }
        }

        // This method prints the results of the stack as they are popped out
        public static void Printstack(Stack<int> a)
        {
            // It the stack is empty then the if will simple return
            if (a.Count == 0)
            {
                return;
            }

            WriteLine("This is the results in ascending order {0} ", a.Pop());
            Printstack(a);
        }

        static void Main(string[] args)
        {
            StackSorter();
            ReadKey();
        }
    }
}
