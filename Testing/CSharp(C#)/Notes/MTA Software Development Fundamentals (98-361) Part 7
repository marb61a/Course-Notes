                      General Software Development
                      Course Notes
                      MTA Software Development Fundamentals (98-361) Part 7
                      
Methods
  - A method is a block of code designed to perform some task
  - Every method has a signature
  - The signature of a method describes its parts
  - The first part is the visibility modifier
    - Helper methods for example are private 
  - Unlike constructors methods will have a return type
    - Even void which returns nothing is a return type
    - If an integer is returned the return type is an int
  - Each parameter passed in must have a data type

Methods And Parameters
  - There are 2 ways of passing data
    - Pass by reference
      - Changes made on the copy are reflected in the original parameters
      - This does not work on primitive data types
      - Primitive values are converted to objects using wrapper classes
    - Pass by value
      - This is used with any parameter that is a primitive data type
      - The value is copied into the variable name that is listed in the parentheses
      - Changes are only made on the copy not the original values of the parameters in the program
  - Using the wrong type would cause a logic error
 
 Mathod Overloading
  - 2 methods cannot have the same signature
  - In overloading the signature is the same but the parameters are different
    - Either the data type is different or the number of parameters differs
  - The compiler is smart enough to know which method to use
  
Support Methods
  - These are usually declared as private methods
  - They are usually found in the class definition
  - They allow external access to data defined by the class
    - This is not direct access
  - The program protects the instance data by using support methods such as getters and setters  
  - These methods ensure that data is not corrupted

Visibility Modifiers
  - Private
    - These enforce encapsulation within an application on variables
    - On methods they provide support for other methods not accessible by a calling program
  - Public
    - Public modifiers violate encapsulation principles on variables
      - Variables should not be public when creating classes most of the time 
    - Public modifiers on methods provide services to a calling program
    
  
