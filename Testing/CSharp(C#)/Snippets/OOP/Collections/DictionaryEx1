using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DictionaryEx1
{
    class Program
    {
        public static void DictionaryEx()
        {
            // Create a new dictionary of strings with string keys
            Dictionary<string, string> openWith = new Dictionary<string, string>();

            // Adding elements to the dictionary, there are no duplicate keys but some duplicate values
            openWith.Add("key1", "notepad.exe");
            openWith.Add("key2", "paint.exe");
            openWith.Add("key3", "paint.exe");
            openWith.Add("key4", "wordpad.exe");

            // Adding a new key will throw an exception
            try
            {
                openWith.Add("key1", "winword.exe");
            }
            catch(ArgumentException)
            {
                WriteLine("An element with Key = \"key1\" already exists");
            }

            // The ContainsKey method can test keys prior to insertion
            if (!openWith.ContainsKey("key5"))
            {
                openWith.Add("key5", "hyperterm.exe");
                WriteLine("Value added for \"key5\" : {0}", openWith["key5"]);
            }

            // The item property is a synonym for the indexer
            WriteLine("For key = \"key1\" value = {0}." , openWith["key1"]);

            // Using the indexer to change the value asssociated with a key
            openWith["key2"] = "winword.exe";
            WriteLine("For key = \"key2\" value = {0}.", openWith["key2"]);

            // If the key does not exist, setting the indexer will generate a new key/value pair
            openWith["key"] = "winword.exe";

            string value = "";
            if(openWith.TryGetValue("key7", out value))
            {
                WriteLine("For key = \"key7\" value = {0}.", openWith["key7"]);
            }
            else
            {
                WriteLine("Key = \"key7\" is not found");
            }

            foreach(KeyValuePair<string, string> kvp in openWith)
            {
                WriteLine("Key = {0}, Value = {1}", kvp.Key, kvp.Value);
            }
        }

        static void Main(string[] args)
        {
            DictionaryEx();
            ReadKey();
        }
    }
}

