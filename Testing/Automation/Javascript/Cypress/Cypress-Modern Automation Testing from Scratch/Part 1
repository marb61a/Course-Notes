                    Cypress-Modern Automation Testing from Scratch + Framework 
                    Course Notes Part 1


Introduction to Cypress
 What is Cypress? And why it is future of Automation
  - Cypress is a next generation front end Automation testing tool built for the modern web applications
  - Cypress autmatically waits for commands or assertions
    - This saves going through the issues known as async hell
  - It has the ability to test Edge Testcases by Mocking the server response
  - Cypress will take snapshots as test are run
    - Hovering over the commands in the command log will whow exactly what happend during each command
  - It has the ability to edge testcases by mocking server responses
  - Cypress delivers more reliable, faster and consistent tests than other tools
    - This is because of its internal architecture
  - Videos of tests being executed are available from the dashboard
  - It is built on NodeJS and comes in an npm module
    - It uses JavaScript for writing tests but 90% of coding can be done using Cypress commands
    - You should use the NPM website for downloading the package
  - It comes bundled with JQuery and inherits many of that frameworks methods for UI component identification

Understand Cypress Architecture and its benefits
  - Tools like Selenium operate outside of the browser
    - This then sends remote commands across the network
  - The Cypress engine operates within the browser
    - This allows Cypress to listen and modify behaviour at run time
    - It manipulates the DOM and alters network requests and responses on the fly
  - Cypress opens the doors to a new kind of testing
  - The browsers supported are Chrome, Firefox, Electron and under construction IE
  - The 2 tools looked at in the course are Test Runner and Dashboard Service

Course syllabus walkthrough
  - The expected course outcomes are
    - Students will be able to automate any web app using Cypress
    - Understanding how Cypress is unique and able to build stable tests using JQuery
    - Ability to mock network requests and responses with Cypress
    - Designing a Cypress framework from scratch meeting all testing standards
    - Integrating Cypress with Jenkins fro Continuous Improvement \ Continuous Deployment
  - The prerequisites for the course
    - Around 90% of the lectures do not require and preexisting knowledge
    - Some familiarity of dealing with API's for dealing with API mocking would be useful
    - JavaScript concepts will be taught in parallel with other course material



Cypress Installation & project Setup
Install Node and Visual Studio Code
  - You will need to install NodeJS -- https://nodejs.org/en/
    - Some recommend using nvm for working with multiple Node versions
    - https://itnext.io/nvm-the-easiest-way-to-switch-node-js-environments-on-your-machine-in-a-flash-17babb7d5f1b
  - Visual Studio Code is the editor of choice for the course
    - https://code.visualstudio.com/

Generate package.json file and get Gypress Dependencies
  - Firstly create a base Cypress working folder
  - Node is the platform on which packages are built
  - Using npm which is the Node Package Manager will allow users to install necessary packages
  - To set up npm in a project, firstly make sure you are in the correct location (Cypress working folder)
    - At the command prompt use npm init
      - This automatically generates a package.json file
      - There are several questions to answer, to avoid use -y in the command to accept defaults
      - To install Cypress use npm install cypress
        - Using the --save-dev option will add an entry for cypress to the dev dependencies section of package.json

