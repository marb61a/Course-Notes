                    Testing JavaScript
                    Course Notes Part 2


4 - Support Async Tests with JavaScripts Promises through async await

5 - Provide Testing Helper Functions as Globals in JavaScript

6 - Verify Custom JavaScript Tests with Jest

7 - Lint JavaScript by configuring and running ESLint

8 - Install and run Prettier

9 - Configure Prettier

10 - Use eslint-config-prettier to disable unnecessary ESLint stylistic rules

11 - Validate all files are formatted when linting

12 - Install, run and configure Flow

13 - Run the validate script in a pre-commit git hook with husky

14 - Auto-format all files and validate relevant files in a precommit script with lint-staged

15 - Override Object Properties to Mock with Monkey-patching in JavaScript

16 - Ensure Functions are Called Correctly with JavaScript Mocks

17 - Restore the Original Implementation of a Mocked JavaScript Function with jest.spyOn

18 - Mock a JavaScript module in a test

19 - Make a shared JavaScript mock module

20 - Install and run Jest

21 - Transpile Modules with Babel in Jest Tests

22 - Configure Jest’s test environment for testing node or browser code

23 - Support importing CSS files with Jest’s moduleNameMapper

24 - Support using webpack CSS modules with Jest

25 - Generate a Serializable Value with Jest Snapshots

26 - Test an Emotion Styled UI with Custom Jest Snapshot Serializers

27 - Handle Dynamic Imports using Babel with Jest

28 - Setup an afterEach Test Hook for all tests with Jest setupTestFrameworkScriptFile

29 - Support custom module resolution with Jest moduleDirectories

30 - Support a test utilities file with Jest moduleDirectories

31 - Step through Code in Jest using the Node.js Debugger and Chrome DevTools

32 - Configure Jest to report code coverage on project files

33 - Analyze Jest Code Coverage Reports

34 - Set a code coverage threshold in Jest to maintain code coverage levels

35 - Report Jest Test Coverage to Codecov through TavisCI

36 - Use Jest Watch Mode to speed up development

37 - Run Jest Watch Mode by default locally with is-ci-cli

38 - Filter which Tests are Run with Typeahead Support in Jest Watch Mode

39 - Run tests with a different configuration using Jest’s --config flag and testMatch option

40 - Support Running Multiple Configurations with Jest’s Projects Feature

41 - Test specific projects in Jest Watch Mode with jest-watch-select-projects

42 - Run ESLint with Jest using jest-runner-eslint

43 - Run only relevant Jest tests on git commit to avoid breakages

44 - Install and run Cypress

45 - Write the first Cypress Test

46 - Configure Cypress in cypress.json

47 - Installing cypress-testing-library

48 - Scripting Cypress for local development and Continuous Integration

49 - Debug a test with Cypress

50 - Use Cypress to test user registration

51 - Cypress Driven Development

52 - Simulate HTTP Errors in Cypress Tests

53 - Test user login with Cypress

54 - Create a user with cy.request from Cypress

55 - eep tests isolated and focused with custom Cypress commands

56 - Use custom Cypress command for reusable assertions

57 - Run tests as an authenticated user with Cypress

58 - Use cy.request from Cypress to authenticate as a new user

59 - Use a custom Cypress command to login as a user

60 - Combine custom Cypress commands into a single custom command

61 - Install React DevTools with Cypress

62 - Render a React component for testing

63 - Use jest-dom for improved assertions

64 - Use dom-testing-library to write more maintainable React tests

65 - Use react-testing-library to render and test React Components

66 - Avoid Memory leaks using react-testing-library’s cleanup function

67 - Debug the DOM state during tests using react-testing-library’s debug function

68 - Test React Component Event Handlers with fireEvent from react-testing-library

69 - Assert rendered text with react-testing-library

70 - Test prop updates with react-testing-library

71 - Assert that something is NOT rendered with react-testing-library

72 - Test accessibility of rendered React Components with jest-axe

73 - Mock HTTP Requests with jest.mock in React Component Tests

74 - Mock HTTP Requests with Dependency Injection in React Component Tests

75 - Mock react-transition-group in React Component Tests with jest.mock

76 - Test componentDidCatch handler error boundaries with react-testing-library

77 - Test drive the development of a React Form with react-testing-library

78 - Test drive the submission of a React Form with react-testing-library

79 - Test drive the API call of a React Form with react-testing-library

80 - Test drive mocking react-router’s Redirect component on a form submission

81 - Test drive assertions with dates in React

82 - Use generated data in tests with tests-data-bot to improve test maintainability

83 - Test drive error state with react-testing-library

84 - Write a custom render function to share code between tests and simplify tests

85 - Test React components that use the react-router Router Provider with createMemoryHistory

86 - Initialize the `history` object with a bad entry to test the react-router no-match route

87 - Create a custom render function to simplify tests of react-router components

88 - Test a redux connected React Component

89 - Test a redux connected React Component with initialized state

90 - Create a custom render function to simplify tests of redux components

91 - Test a render prop component using a Jest mock function

92 - Test React portals with react-testing-library

93 - Test Unmounting a React Component with react-testing-library

94 - Use dom-testing-library with React

95 - Use dom-testing-library with Preact

96 - Use dom-testing-library with jQuery

97 - Use dom-testing-library with Dojo

98 - Use dom-testing-library with HyperApp

99 - Use dom-testing-library with AngularJS

100 - Use dom-testing-library with Angular

101 - Use dom-testing-library with VueJS

102 - Use dom-testing-library with Mithril

103 - Use dom-testing-library with Svelte

104 - Use dom-testing-library with from-html
