                    Testing JavaScript
                    Course Notes Part 1


1 - Throw an Error with a Simple Test in JavaScript
Example Syntax
  // There is a bug in the sum function
  // If this is change to a + then the test will pass
  // This is the most basic fundamental form of a test
  // The job of testing frameworks is to make the failure messages useful so errors can be fixed quickly
  const sum = (a, b) => a - b
  
  const subtract = (a, b) => a - b
  
  // An automated test to ensure that the bug in sum never gets through
  // This is code that throws an error when there are unexpected occurences
  let result = (3, 7);
  let expected = 10;
  
  if(result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }
  
  // For subtracting
  let result = (7, 3);
  expected = 4;
  
  if(result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }
  
2 - Abstract Test Assertions into a JavaScript Assertion Library
Example Syntax
  // Reusing code from the previous example
  // This time there will be an import from a sample math file
  // This is a very imperative style of code and can be improved with better abstraction
  const {sum, expected} = require("../math");
  
  let result, expected;
  
  result = (7, 3);
  expected = 4;
  
  result = (3, 7);
  expected = 10;
  
  if(result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }
  
  if(result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }
  
  // A more abstract version of the above
  result = (7, 3);
  expected = 4;
  expect(result).toBe(expected);
  
  result = (3, 7);
  expected = 10;
  expect(result).toBe(expected);
  
  function expect(actual){
    return {
      toBe(expected){
        if(actual !== expected) {
          throw new Error(`${actual} is not equal to ${expected}`)
        }
      }
    }
  }

3 - Encapsulate and Isolate Tests by building a JavaScript Testing Framework

