                    React Testing Cookbook
                    Course Notes Part 1
                    
                    
1 - Setting Up Dependencies
The following are installed
  - Mocha for running tests
    - This is used for the example but there are many other test tools
  - Expect for assertions
  - React-addons-test-utils

2 - Running Tests
To setup so that you can run tests in the project you will have to edit the projects package.json
Example Syntax
  // Package.json file
  // Again double braces are needed
  // Babel is used to transpile React Code\ES6 
    "scripts": {
    // Telling where to look for the files needed
      "test": "mocha './src/**/*.spec.js' --compilers js:babel-core/register"
    }

  // Example spec file
  import expect from 'expect';
  
  describe('empty test', () => {
    it('should work', () => {
      expect(true).toEqual(true);
    })
  })
  
3 - Utility Modules
This uses an example app which allows you to add your favourite quotes to a collection
  - The tests will be to ensure that each quote added will have a unique id
Example Syntax
  // CreateId function inside the addQuote component, this is then removed in to a separate component and exported
  // This will allow the module to be tested separately, it will have to be imported for use in the addQuote component
  // The id created consists of a unique number and the start of the quote combined in a string
  export default function(uniqueNumber, description){
    const shortKebabDescription = description;
      .toLowerCase()
      .split(' ')
      .slice(0, 2)
      .join('-');
    return `${uniqueNumber}-${shortKebabDescription}`;  
  }
  
  // Test File 
  import expect from 'expect';
  // import the newly created separate createId module
  import createId from './createId';
  
  describe('createId', () => {
    it('should convert a description into a unique id', () = {
      const actual = createId(123, 'Cool example description');
      const expected = '123-cool-example';
      expect(actual).toEqual(expected);
    })
  })
Best practice in React is to move unrelated functions from components to separate modules

4 - Intro To Shallow Rendering
Example Syntax
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  
  const CoolComponent = ({greeting}) => (
    <div>
      <h1>Greeting</h1>
      <div>{greeting}</div>
    </div>
  )
  
  // Test & Describe block for shallow render demo
  describe('CoolComponent', () => {
    it('should', () => {
      // We need a place to store the shallow renderer
      // A shallow renderer only renders 1 layer deep so you don't need a DOM
      // You just need the oobject structure you can assert things about
      const renderer = TestUtils.createRenderer();
      // This works the same way that ReactDOM works
      renderer.render(<CoolComponent greeting='Hello World' />);
      const output = renderer.getRenderOutput();
      console.log(output);
    })
  });

Shallow rendering makes writing unittests easier as you only worry about the components and not the environment
