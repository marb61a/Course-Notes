                    React Testing Cookbook
                    Course Notes Part 2


5 - JSX Error Diffs
Example Syntax
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  import expectJSX from 'expect-jsx';
  expect.extend(expectJSX);
  
  const CoolComponent = ({greeting}) => (
    <div>
      <h1>Greeting</h1>
      <div>{greeting}</div>
    </div>
  )
  
  describe('CoolComponent', () => {
    it('should render the greeting', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<CoolComponent greeting='Hello World' />);
      const actual = renderer.getRenderOutput();
      const expected = <div>Hello World</div>;
      expect(actual).toIncludeJSX(expected);
    })
  })
In order to make test error diffs there are some libraries available
  - These will extend the assertion library to provide support for JSX
  - As we are using expect then -- npm install expect-jsx
  - ExpectJSX available from -- https://github.com/algolia/expect-jsx

6 - Element Types With Shallow Rendering
The example will use a sample app that allows for quotes and authors to be added to a list
  - You are able to like and unlike the quotes
Example Syntax
  // The test wil be written to ensure that the component that toggles the like count
  // is a link, this will assert the element type of your components
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  import LikeCounter from './LikeCounter';
  
  describe('LikeCounter', () => {
    it('should be a link', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<LikeCounter count={5} />);
      const renderer = TestUtils.createRenderer();
      // Because we are testing for a link or anchor tag we can use .type 
      const actual = renderer.getRenderOutput().type;
      const expected = 'a';
      expect(actual).toEqual(expected);
    });
  });

7 - Classname With Shallow Rendering
The same sample app as previously will be used but this time we will be looking at the icons on the screen.
  - The tests will be written to ensure that the icons are rendering corrrectly
Example Syntax
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  import Icon from './Icon';
  
  describe('Icon', () => {
    it('should render the icon', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<Icon name='Facebook'/>);
      // The includes method returns a boolean 
      const actual = renderer.getRenderOutput().props.className.includes('facebook');
      expect(actual).toEqual(expected);
    });
  });

8 - Conditional Classname With Shallow Rendering
Testing to ensure that className is correct based on likes
Example Syntax
  import React from 'react';
  import TestUtils from 'react-addons-test-utils';
  import expect from 'expect';
  import LikeCounter from './LikeCounter';
  
  describe('LikeCounter', () => {
    it('should show the like count as active', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<LikeCounter count={5} isActive={true} />);
      const actual = renderer.getRenderOutput().props.className.includes('LikeCounter--active');
      const expected = true;
      expect(actual).toEqual(expected);
    });
    
    it('should show the like count as inactive', () => {
      const renderer = TestUtils.createRenderer();
      renderer.render(<LikeCounter count={5} isActive={false} />);
      const actual = renderer.getRenderOutput().props.className.includes('LikeCounter--active');
      const expected = false;
      expect(actual).toEqual(expected);
    });
  });
