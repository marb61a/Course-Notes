package org.automation.testng;

import org.testng.IInvokedMethod;
import org.testng.IInvokedMethodListener;
import org.testng.ISuite;
import org.testng.ISuiteListener;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestNGMethod;
import org.testng.ITestResult;
import org.testng.Reporter;

public class Listener implements ITestListener, ISuiteListener, IInvokedMethodListener {
	// Belongs to the ISuiteListener and will execute prior to suite start
	@Override
	public void onStart(ISuite arg0) {
		Reporter.log("About to begin executing the suite" + arg0.getName(), true);
	}
	
	// Belongs to the ISuiteListener and will execute when the suite is finished
	@Override
	public void onFinish(ISuite arg0) {
		Reporter.log("About to finish executing the suite" + arg0.getName(), true);
	}
	
	// Belongs to ITestListener and will execute before starting of Test set/batch 
	public void onStart(ITestContext arg0) {
		Reporter.log("About to begin executing the test" + arg0.getName(), true);
	}
	
	// Belongs to ITestListener and will execute after finishing Test set/batch
	public void onFinish(ITestContext arg0) {
		Reporter.log("Completed executing the test(s)" + arg0.getName(), true);
	}
	
	// Belongs to ITestListener and will execute only when the test has passed
	public void onTestSuccess(ITestResult arg0) {
		 // This calls the printTestResults method
		 printTestResults(arg0);
	}
	
	// Belongs to ITestListener and will execute only when the test has failed
	public void onTestFailure(ITestResult arg0) {
		 
		 printTestResults(arg0);
	}
	
	// Belongs to ITestListener and will execute before the main test starts (@Test)
	public void onTestStart(ITestResult arg0) {
		System.out.println("The execution of the main test starts now");
	}
	
	// Belongs to ITestListener and will execute only if any of the main test(@Test) gets skipped
	public void onTestSkipped(ITestResult arg0) {
		printTestResults(arg0);
	}
	
	// Prints test results
	public void printTestResults(ITestResult result) {
		Reporter.log("Test Method resides in " + result.getTestClass().getName(), true);
		
		if(result.getParameters().length != 0) {
			String params = null;
			for (Object parameter : result.getParameters()) {
				params += parameter.toString() + ",";
			}
				 
			Reporter.log("Test Method had the following parameters : " + params, true);
		}
		
		String status = null;
		
		switch(result.getStatus()) {
		case ITestResult.SUCCESS:	 
			 status = "Pass";
			 break;	 
		case ITestResult.FAILURE:
			 status = "Failed";
			 break;
		case ITestResult.SKIP:	 
			 status = "Skipped";
		}
		
		Reporter.log("Test Status: " + status, true);
	}
	
	// Belongs to IInvokedMethodListener and will execute before every method including @Before @After @Test
	public void beforeInvocation(IInvokedMethod arg0, ITestResult arg1) {
		String textMsg = "Completed executing the following method :" + returnMethodName(arg0.getTestMethod());
		
		Reporter.log(textMsg, true);
	}
	
	// Returns method names to the calling function
	private String returnMethodName(ITestNGMethod method) {
		return method.getRealClass().getSimpleName() + "." + method.getMethodName();
	}
}
