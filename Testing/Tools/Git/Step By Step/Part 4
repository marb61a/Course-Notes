                    The definitive, step-by-step guide to Git
                    Course Notes Part 4


                    Section 6 - Visual Merge/Diff Tool Installation
1 - Visual Merge / Diff Tool Installation Overview
The next few sections will focus on merging, comparing and branching
Author recommends P4Merge

2 - P4Merge Install on Windows
Installation guide for install a free tool called P4Merge
https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools
Ensure that you download the correct version for your Operating system
Install only the visual merge tool
You will need to add path variable to environmental variables in Windows

3 - P4Merge for Windows Git Configuration
Setting up P4Merge - Ensure that the path is set up
Configuring P4Merge as diff tool
  - git config --global diff.tool p4merge
  - git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
Disable prompt
  - git config --global difftool.prompt false
Configuring P4Merge as merge tool  
  - git config --global merge.tool p4merge 
  - git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
Disable prompt
  - git config --global mergetool.prompt false

Your .gitconfig file should look like
[merge]    
  tool = p4merge 
[mergetool "p4merge"]    
  path = C:/Program Files/Perforce/p4merge.exe 
[diff]    
  tool = p4merge 
[difftool "p4merge"]   
  path = C:/Program Files/Perforce/p4merge.exe 
[difftool]    
  prompt = false 
[mergetool]    
  prompt = false

4 - P4Merge for Mac Installation
5 - P4Merge for Mac Git Configuration 
Similar to the commands used on configuring the Windows section

6 - Visual Merge / Diff Tool Resources
PDF of commands etc used in the section



                    Section 7 - Comparisons
1 - Git Repository Setup (for comparing examples)
Setting up a GIT repo to demonstrate several different scenarios

2 - Comparing Working Directory and the Staging Area
  - git status will show the files that have been modified but not the modifications
You will need to use the diff command to see the differences
  - git diff      // With no arguments will compare working directory with staging area
  - git diff tool   // This works if you have the visual tool installed

3 - Comparing Working Directory and Git Repository (Last Commit)
When comparing the working directory and the last commit
  - git diff HEAD
Again the command is similar for using the visual tool
  - git difftool HEAD

4 - Comparing between the Staging Area and the Git Repository (Last Commit)
The syntax for comapring the staging are to the last commit is
  - git diff --staged HEAD
Again the command is similar for using the visual tool
  - git difftool --staged HEAD

5 - Limiting Comparsons to one File (or path)
Sometimes you may need to limit diffing to 1 file
  - git diff -- path_to_file_you_want_to_diff
The same works for the visual diff tool  
  - git difftool -- path_to_file_you_want_to_diff

6 - Comparing Between Commits
Comparing an Arbitrary commit versus the most recent on
You can use git diff to compare any 2 arbitrary commits
  - git diff ae6f872 HEAD         // This compares the commit with the id ae6f872 to the latest commit
To compare the latest with the previous
  - git diff HEAD HEAD^
  - dit difftool HEAD HEAD^       // A more visual representation
    - Visual difftool will compare one file at a time

7 - Comparing Between Local and Remote Master Branches
You will use left side - right side comparison
To compare the local master branch and the remote master branch
  - git diff master origin/master
To see a more visual representation you will use
  - git difftool master origin/master

8 - Comparison Section Cleanup and Push back to GitHub
Clearing up the files that have been created and used in the section as examples

