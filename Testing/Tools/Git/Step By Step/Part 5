                    The definitive, step-by-step guide to Git
                    Course Notes Part 5


                    Section 8 - Branching and Merging
1 - Branching Basics
Using master for all commits is not best practice
Using properly named branch is the recommended practice
Branches can then be merged back into the master once stable
To list branches
   - git branch -a
To create a branch
  - git branch branch name
To change branch
  - git checkout branch name
HEAD and origin/HEAD are pointers to latest commmits local and remote
To return to master
  - git checkout master
To rename branch
  - git branch -m oldname newname
To delete branch
  - git branch -d branch
You cannot delete the branch you are currently on

2 - Happy Path / Fast Forward Merges
Using the example repository from previous
To create branch before checking it out
  - git checkout -b branchname
  - git status will show what branch you are on
To move back to master
  - git checkout master
To show difference between branches
  - git diff branch1 branch2
To show the diiferences visually 
  - git difftool branch1 branch2 
  - This should oper p4merge to visually show the differences in the branches
To merge in changes for example into master
  - Ensure that you are on master branch
  - git merge branchname
Fast forwarding is only possible when target branch has no changes
  - For example if after switching to a new branch you switch back to master which has not been changed then fast 
  forward is ok
To delete branch
  - git branch -d branchname

3 - Happy Path / Disable Fast Forward Merges
Creating another branch
To disable the Fast Forwarding feature
  - git merge branch name --no--ff
  - This results in a merge-commit

4 - Automatic Merges
Creating an automatic merge-commit
Example uses
  - New branch called simple changes
  - Exising files edited
  - Changes saved and committed
  - Switch back to master branch
  - File on master branch edited & saved + committed
  - git merger branch name -m "commit message"
  - git branch -d branch name is used to deleted unneeded changes

5 - Conflicting Merges and Resolution
Resolving merge conflicts
Git maybe able to resolve conflicts automatically but not 100% of the time
Procedure used to demonstrate
  - Create new branch -- git checkout -b branch name
  - Switch to the new branch
  - Edit file on the new branch
  - Commit the changed file
  - Switch back to the master branch
  - Edit the same file on the master branch which will be conflicting
  - Add the file and commit
  - Using the diff tools is recommended in this situation
  - Use merge will cause conflict
  - Causes a state of merging
  - P4Merge is used to resolve the conflict in the example
  - Ctrl-q to exit P4merge
  - *.orig is added to the .gitignore file

6 - Section Cleanup and Push back to GitHub
Clearing up the files that have been created and used in the section as examples

