                    The definitive, step-by-step guide to Git
                    Course Notes Part 5


                    Section 8 - Branching and Merging
1 - Branching Basics
Using master for all commits is not best practice
Using properly named branch is the recommended practice
Branches can then be merged back into the master once stable
To list branches
   - git branch -a
To create a branch
  - git branch branch name
To change branch
  - git checkout branch name
HEAD and origin/HEAD are pointers to latest commmits local and remote
To return to master
  - git checkout master
To rename branch
  - git branch -m oldname newname
To delete branch
  - git branch -d branch
You cannot delete the branch you are currently on

2 - Happy Path / Fast Forward Merges
Using the example repository from previous
To create branch before checking it out
  - git checkout -b branchname
  - git status will show what branch you are on
To move back to master
  - git checkout master
To show difference between branches
  - git diff branch1 branch2
To show the diiferences visually 
  - git difftool branch1 branch2 
  - This should oper p4merge to visually show the differences in the branches
To merge in changes for example into master
  - Ensure that you are on master branch
  - git merge branchname
Fast forwarding is only possible when target branch has no changes
  - For example if after switching to a new branch you switch back to master which has not been changed then fast 
  forward is ok
To delete branch
  - git branch -d branchname

3 - Happy Path / Disable Fast Forward Merges
Creating another branch
To disable the Fast Forwarding feature
  - git merge branch name --no--ff
  - This results in a merge-commit

4 - Automatic Merges
Creating an automatic merge-commit
Example uses
  - New branch called simple changes
  - Exising files edited
  - Changes saved and committed
  - Switch back to master branch
  - File on master branch edited & saved + committed
  - git merger branch name -m "commit message"
  - git branch -d branch name is used to deleted unneeded changes

5 - Conflicting Merges and Resolution
Resolving merge conflicts
Git maybe able to resolve conflicts automatically but not 100% of the time
Procedure used to demonstrate
  - Create new branch -- git checkout -b branch name
  - Switch to the new branch
  - Edit file on the new branch
  - Commit the changed file
  - Switch back to the master branch
  - Edit the same file on the master branch which will be conflicting
  - Add the file and commit
  - Using the diff tools is recommended in this situation
  - Use merge will cause conflict
  - Causes a state of merging
  - P4Merge is used to resolve the conflict in the example
  - Ctrl-q to exit P4merge
  - *.orig is added to the .gitignore file

6 - Section Cleanup and Push back to GitHub
Clearing up the files that have been created and used in the section as examples



                    Section 9 - Rebasing
1 - Simple Rebase Example
Still using the same sample repository as used in previous sections
Procedure used
  - Create new branch - git checkout -b branch
  - Switch to created branch
  - Modify file
  - Commit modified file - git commit -am  for express commit
  - Switch back to master
  - Edit files on master branch
  - Again do an express commit on the master branch
  - To view changes  git log --oneline --decorate -- all --graph
  - In the rebasing scenarion the new branch is still being used but the changes to master are wanted
  - Return to new branch git checkout branch name
  - To rebase and on the branch that you want to rebase into
    - git rebase source branch eg git rebase master
  - This allows for flattening of history and fast forward merging

2 - Setup for rebasing conflict
Procedure for demonstrating rebasing conflict
  - Set up new branch using git checkout
  - Switch to new branch
  - Edit file on the new branch
  - Commit edited file
  - Switch back to master branch
  - Make changes in the same file
  - Commit those changes
  - To view changes  git log --oneline --decorate -- all -- This shows commits for the smae file on 2 branches which are 
  now diverged

3 - Abort a Rebase
Picking up from the previouschapter where 2 branches had diverged
Using difftool to show visual differences between branches
Using git rebase master on the new branch will cause an issue
To abort git rebasing
  - git rebase --abort

4 - Rebase Conflict and Resolution
Resuming from the previous section
Using the visual merge tool to resolve the conflicts
You may need to add the modified file before committing the file
Using the git log --oneline --decorate -- all command to show that conflict has been resolved
The resolution of the conflict will allow for a fast forward commit

5 - Pull with Rebase (GitHub)
Synchronising with github before proceeding with the example
Showing how to rebase any changes coming from github, proceedure is
  - Edit file
  - Express commit - git commit -am "commit message"
  - Modifying a file on the github site
  - git fetch origin master  this is a non-destructive command that updates references
  - git status will show that the local and remote repositories have diverged by a commit
  - git pull --rebase origin master     this will cause a rebase rather than a normal merge

6 - Section Cleanup and push to GitHub
Clearing up the files that have been created and used in the section as examples



                    Section 10 - Stashing
1 - Simple Stash Example
  - Modify files as beginning the chapter with a clean working directory
  - git status shows modified
  - use the stash command to stash away work in progress
  - The command for stashing is
    - git stash     -- This automatically stashes away in progress work
  - The working directory will be clean and any changes reversed
  - You can commit files with the stashed ones being unaffected
  - To get back the changes that have been stashed they need to be applied
    - git stash apply     
  - To list stashes
    - git stash list
  - You will need to drop unneeded stashes
    - git stash drop

2 - Stashing Untracked Files and Using Pop
By default the stash command will only stash tracked files
New files that have not been tracked will not be stashed and there are a couple of options available
  - You can add the new untracked file to the staging are and it will automatically be added to stashed files
  - You may not be sure that you want to add a file but you do want to stash it
    - git stash -u          -- will add the untracked file to the stash
  - To avoid having to use both git stash apply and git stash and drop
    - git stash pop       -- Similar to popping the stack in programming

3 - Managing Multiple Stashes
Setting up files for multiple stash
  - git stash save "message"    -- similar to commit message but to differentiate stashes
To see all the stashes
  - git stash list
  - stashes will be in reverse order so last stash will be at index {0}
To see a specific stash
  - git stash show stash@{1}     -- This uses reflog syntax to select a particular stash
To apply a specific stash
  - git stash apply stash@{1}    -- Again using reflog for a particular stash reference
To drop a specific stash
  - git stash drop stash@{1}   
To get rid of all stashes
  - git stash clear

4 - Stashing into a Branch
.md is a Markdown file
Using un-committed changes and a new file to demonstrate using stash to move to a new branch
  - git stash -u
To use stash with a branch
  - git stash branch branchname
    - This causes a new branch to be created and we are switched into it
    -  Stash is applied and then at the end dropped

5 - Section Cleanup and push to GitHub
Clearing up the files that have been created and used in the section as examples



                    Section 11 - Tagging
1 - Simple Tag Example / Lightweight Tags
How to use tagging in git
Git has tagging suport which can be used to mark significant milestones in the repository
Tags themselves are nothing more than labels which can be applied at any commit
  - git tag tagname
  - This creates a tag which is a lightweight tag
  - Its simply a marker on a particular commit
To see the list of tags
  - git tag --list
To see the commit at a particular tag
  - git show tagname
To delete a tag
  - git tag --delete tagname

2 - Annotated Tags
An annotated is similar to a lightweight tag but has a little extra information
  - This is similar to a commit message but for tags
To setup an annotated tag
  - git tag -a tagname
  - This can be used for things live versions and release notes
Using git show tagname on an annotated tag will give a slightly different output to lightweight tags

3 - Comparing Tags
Tags are applied to the current commit
To amend the commit message
  - git commit --amend
  - Just amend the message as desired
To apply a new tage to the amended message you can use a different syntax
  - git tag v.1.2 -m "message"          // Will generate a version 1.2 tag with a message
To see the differences in the tags use the diff command
  - git diff v1.0 v1.2                  // Will show the differences between the versions 1.0 and 1.2
You can also use the visual diff tool if you have that configured

4 - Tagging a Specific Commit
You are able to tag a specific commit which can be good if you inadvertently miss a major milestone
  - git tag -a v0.9 commit_id     // This will generate a version 0.9 at the commit id eg 973be24

5 - Updating Tags
Updating an existing tag
There are a couple of approaches
  - Delete the existing tag and then make a new one
  - Force the update
    - git tag -a v0.9 -f commit_id    // The -f forces the tag to the correct commit id

6 - Using Tags with GitHub
Github tracks tags under the releases tab
  - There is the same commit id
To push all local tags to GitHub at the same time
  - git push origin master --tags

7 - Tagging Section Resources
PDF with commands used etc



                    Section 12 - Bonus: Office Hour Sessions
A set of troubleshooting sessions based on the material covered in the course by the author

1 - Reset and Reflog (Office Hours, Session 1)
2 - Compare Branches via GitHub (Office Hours, Session 1)
3 - Compare Branches via Command Line (Office Hours, Session 1)

4 - Stash vs Branch (Office Hours, Session 1)
There are a couple of resons why you should use a branch or a stash
This may come down to the fact that some platforms enforce a clean directory state
  - If it is then you will use stash otherwise you have more flexibility
  - It may boil down to personal preference as you may be able to use either way

5 - Gitting Help (Office Hours, Session 1)
  - git help    // Use the help documentation
  - On Windows systems it will open the help in a browser window, in the other *nix systems it will display
    like it is a man page
  
6 - Cherry Pick (Office Hours, Session 1)
The instructor uses an example of when you could use cherry picking
If you have 2 branches and there is a hot fix that you need to apply immediately
If you wanted to apply it to a specific commit you could cherry pick the commit
  - This is an advanced topic
  - It may cause a merge conflict
Cherry Pick Syntax
- git cherry-pick commit_id


                    Section 13 - Updates and Errata
1 - Git Mac OS X Updates
Updates for broken git systems after OSX updates



                    Section 14 - Bonus: Resources and Special Offers
1 - Bonus: Exclusive Student Discounts
Discounts to other courses offered by the author

