                    The definitive, step-by-step guide to Git
                    Course Notes Part 6


                    Section 9 - Rebasing
1 - Simple Rebase Example
Still using the same sample repository as used in previous sections
Procedure used
  - Create new branch - git checkout -b branch
  - Switch to created branch
  - Modify file
  - Commit modified file - git commit -am  for express commit
  - Switch back to master
  - Edit files on master branch
  - Again do an express commit on the master branch
  - To view changes  git log --oneline --decorate -- all --graph
  - In the rebasing scenarion the new branch is still being used but the changes to master are wanted
  - Return to new branch git checkout branch name
  - To rebase and on the branch that you want to rebase into
    - git rebase source branch eg git rebase master
  - This allows for flattening of history and fast forward merging

2 - Setup for rebasing conflict
Procedure for demonstrating rebasing conflict
  - Set up new branch using git checkout
  - Switch to new branch
  - Edit file on the new branch
  - Commit edited file
  - Switch back to master branch
  - Make changes in the same file
  - Commit those changes
  - To view changes  git log --oneline --decorate -- all -- This shows commits for the smae file on 2 branches which are 
  now diverged

3 - Abort a Rebase
Picking up from the previouschapter where 2 branches had diverged
Using difftool to show visual differences between branches
Using git rebase master on the new branch will cause an issue
To abort git rebasing
  - git rebase --abort

4 - Rebase Conflict and Resolution
Resuming from the previous section
Using the visual merge tool to resolve the conflicts
You may need to add the modified file before committing the file
Using the git log --oneline --decorate -- all command to show that conflict has been resolved
The resolution of the conflict will allow for a fast forward commit

5 - Pull with Rebase (GitHub)
Synchronising with github before proceeding with the example
Showing how to rebase any changes coming from github, proceedure is
  - Edit file
  - Express commit - git commit -am "commit message"
  - Modifying a file on the github site
  - git fetch origin master  this is a non-destructive command that updates references
  - git status will show that the local and remote repositories have diverged by a commit
  - git pull --rebase origin master     this will cause a rebase rather than a normal merge

6 - Section Cleanup and push to GitHub
Clearing up the files that have been created and used in the section as examples



                    Section 10 - Stashing
1 - Simple Stash Example
  - Modify files as beginning the chapter with a clean working directory
  - git status shows modified
  - use the stash command to stash away work in progress
  - The command for stashing is
    - git stash     -- This automatically stashes away in progress work
  - The working directory will be clean and any changes reversed
  - You can commit files with the stashed ones being unaffected
  - To get back the changes that have been stashed they need to be applied
    - git stash apply     
  - To list stashes
    - git stash list
  - You will need to drop unneeded stashes
    - git stash drop

2 - Stashing Untracked Files and Using Pop
By default the stash command will only stash tracked files
New files that have not been tracked will not be stashed and there are a couple of options available
  - You can add the new untracked file to the staging are and it will automatically be added to stashed files
  - You may not be sure that you want to add a file but you do want to stash it
    - git stash -u          -- will add the untracked file to the stash
  - To avoid having to use both git stash apply and git stash and drop
    - git stash pop       -- Similar to popping the stack in programming

3 - Managing Multiple Stashes
Setting up files for multiple stash
  - git stash save "message"    -- similar to commit message but to differentiate stashes
To see all the stashes
  - git stash list
  - stashes will be in reverse order so last stash will be at index {0}
To see a specific stash
  - git stash show stash@{1}     -- This uses reflog syntax to select a particular stash
To apply a specific stash
  - git stash apply stash@{1}    -- Again using reflog for a particular stash reference
To drop a specific stash
  - git stash drop stash@{1}   
To get rid of all stashes
  - git stash clear

4 - Stashing into a Branch
.md is a Markdown file
Using un-committed changes and a new file to demonstrate using stash to move to a new branch
  - git stash -u
To use stash with a branch
  - git stash branch branchname
    - This causes a new branch to be created and we are switched into it
    -  Stash is applied and then at the end dropped

5 - Section Cleanup and push to GitHub
Clearing up the files that have been created and used in the section as examples
