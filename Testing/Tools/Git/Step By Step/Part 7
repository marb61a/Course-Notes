                    The definitive, step-by-step guide to Git
                    Course Notes Part 7


                    Section 11 - Tagging
1 - Simple Tag Example / Lightweight Tags
How to use tagging in git
Git has tagging suport which can be used to mark significant milestones in the repository
Tags themselves are nothing more than labels which can be applied at any commit
  - git tag tagname
  - This creates a tag which is a lightweight tag
  - Its simply a marker on a particular commit
To see the list of tags
  - git tag --list
To see the commit at a particular tag
  - git show tagname
To delete a tag
  - git tag --delete tagname

2 - Annotated Tags
An annotated is similar to a lightweight tag but has a little extra information
  - This is similar to a commit message but for tags
To setup an annotated tag
  - git tag -a tagname
  - This can be used for things live versions and release notes
Using git show tagname on an annotated tag will give a slightly different output to lightweight tags

3 - Comparing Tags
Tags are applied to the current commit
To amend the commit message
  - git commit --amend
  - Just amend the message as desired
To apply a new tage to the amended message you can use a different syntax
  - git tag v.1.2 -m "message"          // Will generate a version 1.2 tag with a message
To see the differences in the tags use the diff command
  - git diff v1.0 v1.2                  // Will show the differences between the versions 1.0 and 1.2
You can also use the visual diff tool if you have that configured

4 - Tagging a Specific Commit
You are able to tag a specific commit which can be good if you inadvertently miss a major milestone
  - git tag -a v0.9 commit_id     // This will generate a version 0.9 at the commit id eg 973be24

5 - Updating Tags
Updating an existing tag
There are a couple of approaches
  - Delete the existing tag and then make a new one
  - Force the update
    - git tag -a v0.9 -f commit_id    // The -f forces the tag to the correct commit id

6 - Using Tags with GitHub
Github tracks tags under the releases tab
  - There is the same commit id
To push all local tags to GitHub at the same time
  - git push origin master --tags

7 - Tagging Section Resources
PDF with commands used etc



                    Section 12 - Bonus: Office Hour Sessions
A set of troubleshooting sessions based on the material covered in the course by the author

1 - Reset and Reflog (Office Hours, Session 1)
2 - Compare Branches via GitHub (Office Hours, Session 1)
3 - Compare Branches via Command Line (Office Hours, Session 1)

4 - Stash vs Branch (Office Hours, Session 1)
There are a couple of resons why you should use a branch or a stash
This may come down to the fact that some platforms enforce a clean directory state
  - If it is then you will use stash otherwise you have more flexibility
  - It may boil down to personal preference as you may be able to use either way

5 - Gitting Help (Office Hours, Session 1)
  - git help    // Use the help documentation
  - On Windows systems it will open the help in a browser window, in the other *nix systems it will display
    like it is a man page
  
6 - Cherry Pick (Office Hours, Session 1)
The instructor uses an example of when you could use cherry picking
If you have 2 branches and there is a hot fix that you need to apply immediately
If you wanted to apply it to a specific commit you could cherry pick the commit
  - This is an advanced topic
  - It may cause a merge conflict
Cherry Pick Syntax
- git cherry-pick commit_id

