                    Using GitFlow
                    Course Notes


                    Section 1 - Introduction
1 - Introduction
Quick introduction to the course
A high level overview of the course
There is also a very quick intro to the instructor
Students should also be very familiar with Git
There are other models for Git branching than Gitflow
  - Centalized which keeps everything on a centralized server
    - This uses a centralized repository 
    - End users clone the repository
    - Changes are pulled from the central repository to the local
    - This is very similar to SVN version control
    - This is a very simple model suitable for very small teams
  - Feature Branch where each developer creates their own branch for their current work
    - Again this is a very simple workflow
    - It also keeps any changes isolated until they are ready to be merged
  - There are several others including Git's own model

2 - What Is GitFlow
This is more complicated than the feature branch workflow
There are tools which help manage the complexity
GitFlow gives a great deal of flexibility
In Gitflow
  - There are 2 branches that record the project history
  - These branches are usually called Master and Develop
  - All features and hotfixes reside in their own branch
  - Release branches branch off of the develop branch
There is a quick demo of the GitFlow model
  - There is a commit on the master branch
  - From this we create the develop branch
  - From the develop branch any feature branches are branched off
  - All work should really go on the feature branch apart from occasional minor changes
  - If somebody discovers a bug
  - From master a hotfix branch is created
  - The fix for the bug in master can be done within this branch
  - The fix is checked into both master and develop
  - The feature branch is continued and is eventually checked back into develop
  - At some point we decide to do a release
  - From the develop branch there is a release branch
  - We can fix bugs etc on the release branch
  - Once the release goes live the release is checked into both the master and develop branch
  - This can become a fairly complex workflow 

3 - Installing GitFlow
Gitflow is a set of scripts that extend git
  - You can still use the standard git commands but the scripts make it easier
  - It would be difficult to learn all the commands needed to do the equivalent of Gitflow
  - It is much better then to install Gitflow
Gitflow has to be installed seperately to Git
  - There are notes available on Github on how to do this
  - https://github.com/nvie/gitflow
  - There are notes availablle for installation on all the main Operating Systems
  - There is a quick demonstration of setting up Gitflow on Windows using MSysGit
    - There are various dll's that need to be added to Windows
    - Linux already has the equivalent installed

4 - Setting up a Repository to use GitFlow
In order to use Gitflow firstly we need to setup a Git repository the usual way
  - git init
Then Gitflow has to be added
  - git flow init
  - Typing just git flow will show a list of available commands
  - Using git flow init will generate a couple of branches 
    - Master and develop
    - It will ask some questions about naming other branches

5 - What Comes Next in the Course?
A quick look at what is to come in the course



                    Section 2 - Creating and Using Feature Branches
1 - Introduction
Introduction to what the section will cover
What is a feature branch
  - It is a place where work for a specific feature is done
    - This means that there will be ease of access to code during the development process
  - In most cases all work should not be done on the main branch
    - Putting all work on a single branch causes big problems
      - Work and features can be difficult to track
      - Code merges become difficult to manage
      - It is also difficult to backout work which may not be suitable for the project
      - It also makes experimentation almost impossible eg a trial feature to see if it works
There is also another demo of feature branching workflow
  - Work will continue on other branches, features etc at the same time
  - Central Repository
          0 - 0 - 0 - 0 - 0 \      
                              \ Feature Branch - 0 - 0
The syntax for creating a feature branch using Gitflow
  - git flow feature start feature-name
When a feature is finished the syntax
  - git flow feature finish feature-name

2 - Creating a Feature Branch
A demonstration of creating a feature branch
The people involved with the project are
  - The architect who creates the initial project
  - A developer who works on features, hot-fixes
  - A reviewer who reviews code
  - The build manager who manages the build server
  - In the exercise files there are folders for each of these
  - There is also an accompanyint GitHub repo
    - https://github.com/kevinrjones/PSGitFlow
    - There are 2 branches at this point called master and develop
This is the point at which the first feature is created
  - The developer's folder is empty so the repo will need to be cloned
  - To avoid cloning into a subdirectory add a period on to the clone command
    - git@github.com:kevinrjones/PSGitFlow.git .
    - This will be the master branch by default
    - There will need to be a new branch for the feature
      - git flow feature start 2-UsersCanAccessSingleEntries
        - This should be named properly around the feature
        - One good practice is name is so it can be used to refer back to issues around the feature
          - The isseus is created on the GitHub site and the last part of the name reflects the issue number and name
        - The github repo also needs to be initialised to use Git Flow
          - On the local repo -> git flow init
            - Accept all the defaults
            - At this point the new branch can be created
  - The changes will need to be added using the standard git process

3 - Publishing and Tracking a Feature Branch

4 - Finishing a Feature Branch

5 - What's Next in the Course?
A quick look at what is to come in the course



                    Section 3 - Creating a Release Branch
1 - Introduction
Introduction to what the section will cover

2 - Creating a Release Branch

3 - Finishing the Release Branch

4 - What's Next in the Course?
A quick look at what is to come in the course



                    Section 4 - Creating a Hotfix
1 - Introduction
Introduction to what the section will cover

2 - Creating a Hotfix Branch

3 - What's Next in the Course?
A quick look at what is to come in the course



                    Section 5 - Creating a Build
1 - Introduction
Introduction to what the section will cover

2 - Using TeamCity to Build a Master Branch
TeamCity is a Java-based build management and continuous integration server
  - https://www.jetbrains.com/teamcity/

3 - Setting up TeamCity to Build all Branches

4 - Summary and Thanks
A brief summary of what the course has covered
There are also some brief final remarks from the course instructor

