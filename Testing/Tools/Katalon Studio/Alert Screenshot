using System;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Data;
using System.Drawing;
using OpenQA.Selenium;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using AventStack.ExtentReports;
using AventStack.ExtentReports.Reporter;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ScreenshotAlert
{
    [TestClass]
    public class UnitTest1
    {
        private IWebDriver driver;
        private string baseURL;
        private bool acceptNextAlert = true;
        string path = @"C:\Users\stester13\source\repos\ScreenshotAlert\ScreenshotAlert\Reports\";
        static ExtentReports testReports;
        static ExtentHtmlReporter htmlReport;

        [TestInitialize]
        public void SetupTest()
        {
            baseURL = "https://www.the-internet.herokuapp.com";

            // Generating reports
            if (testReports == null)
            {
                testReports = new ExtentReports();
                htmlReport = new ExtentHtmlReporter(path);
            }

            testReports.AttachReporter(htmlReport);
            driver = null;
        }

        [TestCleanup]
        public void Cleanup()
        {
            testReports.Flush();
        }

        [TestMethod]
        public void TestMethod1()
        {
            driver = new FirefoxDriver();

            driver.Navigate().GoToUrl("https://the-internet.herokuapp.com/");
            Thread.Sleep(1000);

            driver.FindElement(By.LinkText("JavaScript Alerts")).Click();
            Thread.Sleep(1000);

            driver.FindElement(By.XPath("//button[@onclick='jsAlert()']")).Click();
            Thread.Sleep(1000);

            Assert.AreEqual("I am a JS Alert", CloseAlertAndGetItsText());

            Thread.Sleep(2000);

            driver.Quit();
        }



        private string CloseAlertAndGetItsText()
        {
            try
            {
                IAlert alert = driver.SwitchTo().Alert();
                string alertText = alert.Text;
                DateTime now = DateTime.Now;
                string asNow = now.ToString("dd-mmm-yyy hh-mm-ss");
                ExtentTest test1;
                test1 = testReports.CreateTest("AlertTest").Info("Test Started");

                if (acceptNextAlert)
                {
                    ITakesScreenshot camera = (ITakesScreenshot)driver;
                    Screenshot screenshot = camera.GetScreenshot();
                    screenshot.SaveAsFile(path + "Picture" + asNow + ".png",
                    ScreenshotImageFormat.Png);
                    test1.AddScreenCaptureFromPath(path + "Picture" + asNow + ".png");

                    Thread.Sleep(2000);
                    alert.Accept();
                }
                else
                {
                    alert.Dismiss();
                }

                return alertText;
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.ToString());
                return ex.ToString();
            }
            finally
            {
                acceptNextAlert = true;
            }
        }
    }
}
