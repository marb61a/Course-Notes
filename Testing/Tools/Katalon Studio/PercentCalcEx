using System;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Data;
using System.Drawing;
using System.Globalization;
using OpenQA.Selenium;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using AventStack.ExtentReports;
using AventStack.ExtentReports.Reporter;
using Microsoft.VisualStudio.TestTools.UnitTesting;

// Needed to run tests in parallel
// [assembly: Parallelize(Workers = 0, Scope = ExecutionScope.MethodLevel)]
namespace AutoloanExProject
{
    [TestClass]
    public class UnitTest1
    {
        private IWebDriver driver;
        static ExtentReports testReports;
        static ExtentHtmlReporter htmlReport;
        string path = @"C:\Users\stester13\source\repos\AutoloanExProject\AutoloanExProject\Reports\";
        public TestContext TestContext { get; set; }
        char charsToTrim = '$';
        string removeString = "";

        [TestInitialize]
        public void Setup()
        {
            // Generating reports
            if (testReports == null)
            {
                testReports = new ExtentReports();
                htmlReport = new ExtentHtmlReporter(path);
            }

            testReports.AttachReporter(htmlReport);
            driver = null;
        }


        [TestCleanup]
        public void Cleanup()
        {
            driver.Quit();
            testReports.Flush();
        }

        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.CSV", @"Data\LoanData.csv", "LoanData#csv",
        DataAccessMethod.Sequential)]
        [TestMethod]
        public void LoanCalc()
        {
            ExtentTest test1;
            test1 = testReports.CreateTest("LoanCalcTest").Info("Test Started");

            driver = new FirefoxDriver();
            test1.Log(Status.Info, "Starting the LoanCalc test");
            driver.Manage().Window.Size = new Size(700, 400);
            driver.Manage().Window.Position = new Point(0, 0);

            string AutoPrice = TestContext.DataRow[0].ToString();
            string LoanTerm = TestContext.DataRow[1].ToString();
            string InterestRate = TestContext.DataRow[2].ToString();
            string DownPayment = TestContext.DataRow[3].ToString();
            string TradeIn = TestContext.DataRow[4].ToString();
            string State = TestContext.DataRow[5].ToString();
            string SalesTax = TestContext.DataRow[6].ToString();
            string Fees = TestContext.DataRow[7].ToString();


            // Fields from the results panel
            // Using the CultureInfo.CreateSpecificCulture library which requires
            // System.Globallization and set to EN-US for dollars as default CurrentCulture
            // will add a euro symbol instead of a dollar
            string MonthlyPay = TestContext.DataRow[8].ToString();
            double MonthlyPayNum = double.Parse(MonthlyPay);
            string MonthlyPayString = MonthlyPayNum.ToString("C2", CultureInfo.CreateSpecificCulture("EN-US"));

            //string LoanAmount = TestContext.DataRow[9].ToString();
            //Console.WriteLine(LoanAmount);
            //double LoanAmountNum = double.Parse(AutoPrice);
            //string LoanAmountString = String.Format("{0:0.00}", LoanAmountNum);

            string SaleTax = TestContext.DataRow[10].ToString();
            double SaleTaxNum = double.Parse(SaleTax);
            string SaleTaxString = SaleTaxNum.ToString("C2", CultureInfo.CreateSpecificCulture("EN-US"));

            string UpfrontPayment = TestContext.DataRow[11].ToString();
            double UpfrontPaymentNum = double.Parse(UpfrontPayment);
            string UpfrontPaymentString = UpfrontPaymentNum.ToString("C2", CultureInfo.CreateSpecificCulture("EN-US"));

            string TotalOfLoanPayments = TestContext.DataRow[12].ToString();
            double TotalOfLoanPaymentsNum = double.Parse(TotalOfLoanPayments);
            string TotalOfLoanPaymentsString = TotalOfLoanPaymentsNum.ToString("C2", CultureInfo.CreateSpecificCulture("EN-US"));

            string TotalInterest = TestContext.DataRow[13].ToString();
            double TotalInterestNum = double.Parse(TotalInterest);
            string TotalInterestString = TotalInterestNum.ToString("C2", CultureInfo.CreateSpecificCulture("EN-US"));

            string TotalCost = TestContext.DataRow[14].ToString();
            double TotalCostNum = double.Parse(TotalCost);
            string TotalCostString = TotalCostNum.ToString("C2", CultureInfo.CreateSpecificCulture("EN-US"));

            driver.Navigate().GoToUrl("https://www.calculator.net/auto-loan-calculator.html");
            driver.FindElement(By.LinkText("Auto Loan Calculator")).Click();
            driver.FindElement(By.Id("cloanamount")).Click();
            driver.FindElement(By.Id("cloanamount")).Clear();
            driver.FindElement(By.Id("cloanamount")).SendKeys(AutoPrice);
            Thread.Sleep(1500);

            // Using the Selenium interactions library as there is an issue
            // with a drop down box using historical data obscuring the cloanterm
            // element using just a findElement approach
            IWebElement element = driver.FindElement(By.Id("cloanterm"));
            Actions actions = new Actions(driver);
            actions.MoveToElement(element).Click().Build().Perform();
            driver.FindElement(By.Id("cloanterm")).Clear();
            driver.FindElement(By.Id("cloanterm")).SendKeys(LoanTerm);

            driver.FindElement(By.Id("cinterestrate")).Click();
            driver.FindElement(By.Id("cinterestrate")).Clear();
            driver.FindElement(By.Id("cinterestrate")).SendKeys(InterestRate);

            driver.FindElement(By.Id("cdownpayment")).Click();
            driver.FindElement(By.Id("cdownpayment")).Clear();
            driver.FindElement(By.Id("cdownpayment")).SendKeys(DownPayment);

            driver.FindElement(By.Id("ctradeinvalue")).Click();
            driver.FindElement(By.Id("ctradeinvalue")).Clear();
            driver.FindElement(By.Id("ctradeinvalue")).SendKeys(TradeIn);

            driver.FindElement(By.Name("cstate")).Click();
            new SelectElement(driver.FindElement(By.Name("cstate"))).SelectByText(State);
            driver.FindElement(By.XPath("//table[@id='calinputtable']/tbody/tr[6]/td[2]/select/option[31]")).Click();

            driver.FindElement(By.Id("csaletax")).Click();
            driver.FindElement(By.Id("csaletax")).Clear();
            driver.FindElement(By.Id("csaletax")).SendKeys(SalesTax);

            driver.FindElement(By.Id("ctitlereg")).Click();
            driver.FindElement(By.Id("ctitlereg")).Clear();
            driver.FindElement(By.Id("ctitlereg")).SendKeys(Fees);
            driver.FindElement(By.XPath("//input[@value='Calculate']")).Click();

            //Assert.AreEqual(MonthlyPayString, driver.FindElement(By.XPath("//div[@id='content']/table/tbody/tr/td[2]/h2")).Text);
            //Assert.AreEqual(LoanAmountString, driver.FindElement(By.XPath("//td[2]/table/tbody/tr/td[2]")).Text.Trim(charsToTrim));
            Assert.AreEqual(SaleTaxString, driver.FindElement(By.XPath("//div[@id='content']/table/tbody/tr/td[2]/table/tbody/tr[2]/td[2]")).Text);

            try
            {
                Assert.AreEqual(UpfrontPaymentString, driver.FindElement(By.XPath("//div[@id='content']/table/tbody/tr/td[2]/table/tbody/tr[3]/td[2]")).Text);
                Thread.Sleep(1000);
            }
            catch
            {
                DateTime now = DateTime.Now;
                string asNow = now.ToString("dd-mmm-yyy hh-mm-ss");
                ITakesScreenshot camera = (ITakesScreenshot)driver;
                Screenshot screenshot = camera.GetScreenshot();
                screenshot.SaveAsFile(path + "Picture" + asNow + ".png",
                ScreenshotImageFormat.Png);
                test1.AddScreenCaptureFromPath(path + "Picture" + asNow + ".png");

                test1.Log(Status.Fail, "Total LoanPayments failed");
            }

            try
            {
                Assert.AreEqual(TotalOfLoanPaymentsString, driver.FindElement(By.XPath("//div[@id='content']/table/tbody/tr/td[2]/table/tbody/tr[4]/td[2]")).Text);
                Thread.Sleep(1000);
            }
            catch
            {
                DateTime now = DateTime.Now;
                string asNow = now.ToString("dd-mmm-yyy hh-mm-ss");
                ITakesScreenshot camera = (ITakesScreenshot)driver;
                Screenshot screenshot = camera.GetScreenshot();
                screenshot.SaveAsFile(path + "Picture" + asNow + ".png",
                ScreenshotImageFormat.Png);
                test1.AddScreenCaptureFromPath(path + "Picture" + asNow + ".png");

                test1.Log(Status.Fail, "Total LoanPayments failed");
            }

            try
            {
                Assert.AreEqual(TotalInterestString, driver.FindElement(By.XPath("//div[@id='content']/table/tbody/tr/td[2]/table/tbody/tr[5]/td[2]")).Text);
                Thread.Sleep(1000);
            }
            catch
            {
                DateTime now = DateTime.Now;
                string asNow = now.ToString("dd-mmm-yyy hh-mm-ss");
                ITakesScreenshot camera = (ITakesScreenshot)driver;
                Screenshot screenshot = camera.GetScreenshot();
                screenshot.SaveAsFile(path + "Picture" + asNow + ".png",
                ScreenshotImageFormat.Png);
                test1.AddScreenCaptureFromPath(path + "Picture" + asNow + ".png");

                test1.Log(Status.Fail, "Total Interest failed");
            }

            try
            {
                Assert.AreEqual(TotalCostString, driver.FindElement(By.XPath("//div[@id='content']/table/tbody/tr/td[2]/table/tbody/tr[6]/td[2]")).Text);
                test1.Log(Status.Info, "Total Cost passed");
                Thread.Sleep(1000);
            }
            catch
            {
                DateTime now = DateTime.Now;
                string asNow = now.ToString("dd-mmm-yyy hh-mm-ss");
                ITakesScreenshot camera = (ITakesScreenshot)driver;
                Screenshot screenshot = camera.GetScreenshot();
                screenshot.SaveAsFile(path + "Picture" + asNow + ".png",
                ScreenshotImageFormat.Png);
                test1.AddScreenCaptureFromPath(path + "Picture" + asNow + ".png");

                test1.Log(Status.Fail, "Total Cost failed");
            }
            
        }

        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.CSV", @"Data\Data.csv", "Data#csv",
        DataAccessMethod.Sequential)]
        [TestMethod]
        public void PercentCalc()
        {
            ExtentTest test1;
            test1 = testReports.CreateTest("PercentCalcTest").Info("Test Started");
            driver = new FirefoxDriver();
            test1.Log(Status.Info, "Starting the PercentCalc test");

            driver.Manage().Window.Size = new Size(700, 400);
            driver.Manage().Window.Position = new Point(700, 0);

            string num1 = TestContext.DataRow[0].ToString();
            string num2 = TestContext.DataRow[1].ToString();
            string expectedResult = TestContext.DataRow[2].ToString();

            driver.Navigate().GoToUrl("https://www.calculator.net/percent-calculator.html");
            driver.FindElement(By.LinkText("Percentage Calculator")).Click();
            driver.FindElement(By.Id("cpar1")).Click();
            driver.FindElement(By.Id("cpar1")).Clear();
            driver.FindElement(By.Id("cpar1")).SendKeys(num1);
            driver.FindElement(By.Id("cpar2")).Click();
            driver.FindElement(By.Id("cpar2")).Clear();
            driver.FindElement(By.Id("cpar2")).SendKeys(num2);
            driver.FindElement(By.XPath("//input[@value='Calculate']")).Click();

            Assert.AreEqual(expectedResult, driver.FindElement(By.XPath("//div[@id='content']/p[2]/font/b")).Text);
        }
    }
}
