                          Beginner To Guru Part 2
                          Course Notes
                          
                          
Compiling Java
  - The Java compile process is as follows
    - Source files eg hello.java -> compiler -> hello.class -> jvm runtime
    - Other language files which run on the jvm also follow this path
    - hello.scala, hello.groovy and hello.kt which is Kotlin
  - There are different ways in which to package a Java application
    - *.jar -- Java ARchive which is a Zip file containing one or more Java class files
    - *.war -- Web Application aRchive is Zip file containing web application and includes one or more jar files, class files and web resources.
    - *.ear -- Enterprise aRchive which is a Zip file containing one more more WAR files.
    - Fat JAR (aka Uber JAR) -- Executable Jar containing all dependencies. (Used by Spring Boot)
    - Docker Container - Docker Image containing runtime environment, JVM, and Java package
  - There are also a few ways to deploy Java applications
    - Simple JAR files are typically collection of class files used to compose applications
      - They are typically not a complete application
    - WAR, EAR files are typically complete applications which are deployed to application servers eg Tomcat
    - Fat / Uber Jars are typically complete applications which contain embedded application servers and can be deployed stand alone
    - Docker Images are complete applications which can be deployed stand alone
    - The trend is towards the last 2 with the growth of microservices rather than monlithic applications

To create Jar files from the command line
    // cf in this case stands for create file
    - jar cf jar-name.jar
    - This should include the class name of the files that was compiled
  - To run the jar file
    // This will add the jar file to the class path
    - java -classpath jar-name.jar class-name
  - The jar file is just a zip file
    - To unzip simply use unzip jar-name.jar
    - This will automatically show what has been extracted
    - Uzipping creates a META-INF directory
      - This will hold a text tile called MANIFEST which is is a simple manifest of the archive
  - All of this is what will be done by Maven
  - To see command history simply use the history command, this maybe useful

Using 3rd Party Jars From The CLI
  - Using the commons-lang package
  - This is from Apache and has string utilities available
  - To use in the jar  
    - Download the needed files and into a directory eg lib
    - Add the import to the java file
    - Use the imports within the file
    - You will then need to ensure that the downloaded files are added when compiling the java file
    - javac -classpath ./lib/* file-name.java
  - To run the java file
    // The colon tells to use all from the project root folder as well as the lib folder
    // The delimiter is a semi-colon rather than a colon on Windows
    - java -classpath ./lib/*:./ file-name
    - Failure to add claspath directive will cause failure
                          
