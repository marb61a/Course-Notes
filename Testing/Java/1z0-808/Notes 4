                                        Oracle Java SE 8 Certification Part 4
                                        Notes from the Selikoff/Boyarsky book
                                        
                                        
Naming Conflicts
  - One reason for using packages is so that class names do not have to be unique across Java
  - There are times where a class can be found in multiple places
  - One common example is the Date class
  - The Date class can be found in both util and sql
    - import java.util.*;
    - import java.sql.*;
  - When something is found in multiple packages it can cause a compiler error because of ambiguity
  - If you explicitly import a class name, it takes precedence over any wildcards present.
  - If you try to import both specific classes such as
    - import java.util.Date;
    - import java.sql.Date;
  - This will cause a import collision error in the compiler
  - If you need to have both imports used a fully qualified name
    - You could do this with each instance and save imports
      - java.util.Date date;
      - java.sql.Date sqlDate; 

Creating a New Package
  - Once you know the Java syntax well, you can switch to an integrated development environment (IDE) like Eclipse.
  - This will save time coding but can hide some stuff from you
  - You should be very clear on how the command line works
  - The exam tests on the language not the IDE so you might be better sticking with a text editor and the command line
  - You can also specify the location of the other files explicitly using a class path.
  - This can be useful for files located in different places on the file system or in JAR files
  - A JAR is an archive like a zip file of Java class files
  - These paths are platform dependent eg C:\...\... does not exist on a *nix system

Code Formatting on the Exam
  - Not all imports will be included on the exam
  - If they are not being asked about the may be left out to save space
  - You’ll see examples with line numbers that don’t begin with 1 in this case.
 
 
 Creating Objects
 Constructors
  - To create an instance of a class, all you have to do is write new before it eg Random r = new Random();
  - First declare the type that you are creating (Random) and give the variable a name (r). 
  - This gives Java a place to store a reference to the object. 
  - Then you write new Random() to actually create the object.
  - Random in this case is a constructor, which is a special type of method that creates a new object. 
  - The constructor name matches the class name
  - There is also no return type
    - Eg public void Chick() { } is not a constructor since void is a return type
  - The purpose of a constructor is to initialise fields, although you can put any code in there.
  - You can also initialise fields as you declare them eg String name = "Steve";
  - Most classes if there is no constructor will create a default no arguments constructor
  
                                        
