Example of a Caesar Cipher which takes an input string and the number of bits to shift

import java.util.*;
import java.io.*;

public class XorExampleCipher{
    public static void main(String[] args){
        Scanner myScan = new Scanner(System.in);
            System.out.println("Please enter a phrase");
            // Using next() will tokenise input and only fetch the first
            // part of the phrase until a space occurs
            String stringEntered = myScan.nextLine();
            String keyValue = "thisIsTheKey"; 
			
			// Close the scanner to avoid leaks
            myScan.close();

            int[] encrypted = encryptPhrase(stringEntered,keyValue);
            for(int i = 0; i < encrypted.length; i++){
                // Using string formatting
                System.out.printf("%d", encrypted[i]);
            }
            System.out.println("");
            System.out.println(decryptPhrase(encrypted,keyValue));
    }

    public static int[] encryptPhrase(String str, String key) {
        // Creates an array whose size matches the length of the input string
        int[] output = new int[str.length()];

        // Cycles through the output array for the char value at each position and then concats 0
        for(int i = 0; i < str.length(); i++) {
            int outputVal = (Integer.valueOf(str.charAt(i)) ^ Integer.valueOf(key.charAt(i % (key.length() - 1)))) + '0';
            output[i] = outputVal;
        }

        return output; 
    }

    private static int[] string2Arr(String str){
        // Splits the string into a char array
        String[] sArray = str.split(",");
        // Creates an int array whose length matches the array created above
        int[] out = new int[sArray.length];

        for (int i = 0; i < out.length; i++) {
            out[i] = Integer.valueOf(sArray[i]);
        }
        return out;
    }

    private static String decryptPhrase(int[] input, String key){
        String output = "";
        for(int i = 0; i < input.length; i++){
            // Cycles through the input array and concatanates values for return output
            output += (char) ((input[i] - 48) ^ (int) key.charAt(i % (key.length() - 1)));
        }

        return output;
    }
}
