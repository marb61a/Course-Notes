package org.java.refvariables;

public class RefVariablesExample{
	// The only way you can access an object is through a reference variable
	// A reference variable that is declared as final can never be reassigned 
	// to refer to a different object. The data within the object itself can be modified, 
	// however the reference variable cannot be changed
	public static void main(String[] args) {
		// Declare the reference variables
		Reference refVar1, refVar2;
		
		// Cannot be reassigned 
		final Reference refVar3;
		
		// Assign ref1 to a new Reference object
		refVar1 = new Reference("Just a reference to the 1st reference variable", 1);
		
		// Access the getNumber method of the Reference object through the ref1 variable
		int number = refVar1.getNumber();
		System.out.println("The number is " + number);
		
		// Assign ref2 to a new Reference object
		refVar2 = new Reference("Just a reference to the 2nd reference variable", 2);
		number = refVar2.getNumber();
		System.out.println("The number is " + number);
		
		// Passing the ref2 as a parameter of printText() method
        RefVariablesExample.printText(refVar2);
		
		// Assign ref3 to a new Reference object, trying to reassign will cause an error to occur
		refVar3 = new Reference("Just a reference to the 3rd reference variable", 3);
		number = refVar3.getNumber();
		System.out.println("The number is " + number);
	}
	
	public static void printText(Reference reference) {
        String text = reference.getText();
        System.out.println(text);
    }
}

class Reference {
	// Best practice stops access to the variables themselves
	// but allows access through accessors/mutators aka getters/setters
	private int number;
	private String text;
	
	// Constructor
	Reference(String text, int number){
		// The this is used here because of shadowing
		this.text = text;
		this.number = number;
	}
	
	public String getText(){
		return text;
	}
	
	public int getNumber(){
		return number;
	}
}
