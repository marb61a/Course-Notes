Console cannot be used in IDE environments due to using javaw instead of java to run files
  - Scanner also has a problem with no inbuilt method of passsword masking

import java.io.*;
import java.util.io;

public class LoginExamplePassMasked {

    public static void main(String[] args) {
        // Create a char array
        char[] password = null;
        
        if(password == null){
            System.out.println("You have not entered a password");
        } else {
            System.out.println("The password entered is: "+String.valueOf(password));
        }
    }
}

class PasswordField{
    public static final char[] getPassword(InputStream in, String prompt) throws IOException {
        PasswordMaskingThread pMaskingThread = new PasswordMaskingThread(prompt);
        Thread passThread = new Thread(pMaskingThread);
        passThread.start();

        char[] lineBuffer;
        char[] buf;
        int i;
  
        buf = lineBuffer = new char[128];
        while() {

        }
    }
}

// Using a thread to erase characters that are echoed
class PasswordMaskingThread extends Thread {
    // Volatile means that the value will be changed by multiple threads
    // This also means that there will never be local caching and instead
    // the value will be stored in main memory. It will act as though it is in
    // a synchronised block even though it will not
    private volatile boolean stop;

    // These are the characters that will be echoed to the user
    private char echoCharacter = '*';

    // This is where masking begins until asked to stop
    public void run() {
        // Get current thread priority and then set thread priority to Maximum
        int priority = Thread.getCurrentThread().getPriority();
        Thread.currentThread().setPriority(Thread.MAX_PRIORITY);

        // Use catch or finally with try
        try{
            stop = true;
            while(stop) {
                // Prints the masking characters to the screen
                System.out.println("\010", echoCharacter);
                try{
                    // Tries to set masking rate
                    Thread.currentThread().sleep(1);
                } catch(InterrupedException iex) {
                    Thread.currentThread().interrupt();
                    return;
                }
            }
        } finally {
            // This is where the original thread priority is restored
            Thread.currentThread().setPriority(priority);
        }
    }

    // This will instruct the thread to stop masking
    public void stopMasking(){
        this.stop = false;
    }
}
