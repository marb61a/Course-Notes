import java.util.*;

// ROT13 is a simple letter substitution cipher that replaces a letter with the 13th letter after it,
public class Rot13Example {
    public static String rot13(String toBeRotated) {
        // Breaks the entered string into a character array
        char[] charValues = toBeRotated.toCharArray();

        // Cycles through the char array and adds 13 on to each character
        // It does this for both lower and uppercase letters
        for(int i = 0; i < charValues.length; i++){
            char letter = charValues[i];

            if(letter >= 'a' && letter <= 'z') {
                if(letter > 'm') {
                    letter -= 13;
                } else {
                    letter += 13;
                }
            } else if(letter >= 'A' && letter <= 'Z') {
                if(letter > 'M') {
                    letter -= 13;
                } else {
                    letter += 13;
                }
            }

            charValues[i] = letter;
        } 

        // COnvert the char array back to a new string
        return new String(charValues);
    }

    public static void main(String[] main) {
        Scanner myScan = new Scanner(System.in);

        try{
            System.out.println("Please enter a phrase");
            // Using next() will tokenise input and only fetch the first
            // part of the phrase until a space occurs
            String stringEntered = myScan.nextLine();
            String rot13Text = rot13(stringEntered);

            // Rotates the rotated string 
            String reRotatedString = rot13(rot13Text);
			
			      // Close the scanner to avoid leaks
            myScan.close();
            
            System.out.println("Phrase entered is " + stringEntered);
            System.out.println("Phrase after encryption is " + rot13Text);
            System.out.println("Phrase after decryption is " + reRotatedString);
        } catch (InputMismatchException ex){ 
			  
        System.out.println("Exception: " + ex.toString());
		  }
    }
}
