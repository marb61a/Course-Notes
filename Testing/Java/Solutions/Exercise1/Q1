package org.java.exercisesone;

// Importing the whole Java.util is needed when handling exceptions
import java.util.*;

public class Exercise1 {
	public static void main(String[] args) {	
		Scanner myScan = new Scanner(System.in);
		
		try {
			// The nextFloat takes the next number as input
			// Used nextFloat rather than nextInt to enable passing in decimal numbers
			// Trying to pass in decimal using nextInt causes compilation problems
			System.out.println("Please enter a number");
			float numA = myScan.nextFloat();
			
			System.out.println("Please enter a second number");
			float numB = myScan.nextFloat();
			
			float numC = numA * numB;
			
			// Used float as int division will not lead to proper numbers
			// eg 10 / 20 is 0.5 but will show 0. Also had to use other floats to
			// stop conversion problems, Also floats will round eg .6667 instead of .6666666
			float numD = numA / numB;
			float numE = numA + numB;
			float numF = numA - numB;
			float numG = numA % numB;
			
			// This will show decimal place addition
			System.out.println(numA + " " + "multiplied by " + numB + " " + "is equal to" + " " + numC);
			System.out.println(numA + " " + "divided by " + numB + " " + "is equal to" + " " +  numD);
			System.out.println(numA + " " + "plus " + numB + " " + "is equal to" + " " +  numE);
			System.out.println(numA + " " + "minus " + numB + " " + "is equal to" + " " +  numF);
			System.out.println(numA + " " + "modulo " + numB + " " + "is equal to" + " " +  numG);
			
		// As and from Java 7 you do not have to use multiple catch blocks
		// using a multi-catch block will do the same thing. The calculations example 
		// uses multiple blocks as an example
		} catch (ArithmeticException | InputMismatchException ex){ 
			System.out.println("Exception: " + ex.toString());
		}
	}
		
}
