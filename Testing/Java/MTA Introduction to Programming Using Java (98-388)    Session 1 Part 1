                    MTA Introduction to Programming Using Java (98-388)    Session 1
                    Course Notes


Introduction
  - Intro to the course and instructor
  - There are 2 objectives, improve job skills and cover the exam syllabus
  - Being able to predict output from code is important
  - The course uses Visual Studio Code
    - There are several extensions available for running Java
  - Writing code is the best form of practice
  - An IDE is not compulsory for running Java
  - The course will use the OpenJDK development kit 
    - There is no real difference at this level between OpenJDk and Oracle JDK
  - There are different installation processes 
  
The Use of Main
  - Every Java file needs main
  - Main syntax is Public Static Void Main(String[] args){}
    - The Public indicates that all classes have access to the method
    - Void shows that there is no return value
    - Static shows that the method can be ran without creating an object for it
  - The String[] Args part of the method declaration is an exam topic in and of itself
  - A semi-colon is needed at the end of each statement
  - To print out a statement use the following syntax -- System.out.print("Welcome to Java");
  - To run a java file it must be save with the .java suffix
  - Keywords should be in lower case eg public and static
  - Uppercase keywords will cause problems during compilation
  - It is the public keyword that makes the method available to the JVM
  - You will need to have the method inside a class or there will be errors due to misplaced constructs
  - When compiling a file the filename must match a class in the file
  - To compile at the commend prompt run --> javac filename
  - This will generate a .class file
  - To run the class file, at the prompt run --> java filename
    - - The .class suffix is not needed
  - Classes are object blueprints
  - Java is an Object Oriented Programming language (OOP)
    - Objects will drive projects
  - To consume a class eg Product
    - Product product1 = new Product();
    - This will be a topic on the exam
  - Running Java files is a 2 step process from the cli
    - Save and compile the file using javac
    - Run the file using java filename
  - You can specify which directory to compile a file to
    - javac file_name -d c:\\directory_path
  - To see available options
    - javac -help or java -help


Basic Input And Ouput
Print Statements
  - To print something to the console use System.out.print("Hello");
    - Semi-colon is compulsory
    - The out is short for output
    - System has to have an uppercase S as it is a key and case sensitive
  - To use separate lines use System.out.println();
  - To put a table between items use \t
    - The backslash is an escape character and t is for tab
    - For a new line use \n
Using the scanner class
  - As it is not part of core Java the scanner class will have to be imported
  - To import Scanner use -- import java.util.Scanner;
  - The import is done before the class declaration at the top of a file
  - System.in is the opposite of System.out and is used for getting input
  - Getting imports right is an exam topic
  
  
Variable Scopes
Variables in Blocks
  - Variables are containers that store data
  - Variables need to be declared in the right place
  - String literals need to be in double quotes in Java
  - Variables may only live within their code blocks
  - Where variables can be used after declaration is called their scope
Variables in Methods
  - The default rule for variables is that they are only visible within the block they are declared
  - Methods in if blocks may not be seen in the outer method
Variables in Classes
  - Classes will have multiple methods
  - This will mean sharing certain variables
  - Variables needed in several methods should be decalred at class level
  - You may need to make them static so that they are not dependent on an instance of a class
  
  
