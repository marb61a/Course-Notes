                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 25
                    
                    
White-Box Test Techniques
  - White-Box test techniques may also be referred to as structural or structure based techniques. 
    - They can also go by other names like Glass-Box techniques.
  - With White-Box test techniques, we concentrate on the structure and the processing within the test object. 
    - This is in stark contrast to Black-Box test techniques, where we are not concerned at all about the internal structure. 
  - White-Box testing techniques are based on an analysis of the Architecture as well as the Detailed design. 
  - The Internal structure, and the Code of the test object comprise the basis for White-Box test techniques. 
    - Common characteristics of White-Box test techniques include 
      - The fact that the test conditions, test cases, and test data are Derived from a test basis.
  - That includes the architecture, detailed design, and any other sources of information regarding the structure of the software. 
    - Coverage for white-box testing is measured, based on the items tested within the selected structure. 
    - Specifications, are very often used as an additional source of information 

Experience-Based Test Techniques
  - Experience-based test techniques, leverage the experience of members of the team. 
    - That's developers, testers, users and even other stakeholders, in the design, implementation, and execution of tests. 
    - In practice, these techniques are often combined with both Black-Box and White-Box test techniques.
  - Common characteristics of Experience-based test techniques include:   
    - Test conditions, test cases, and test data that are derived from a test basis. 
    - That may include knowledge from testers, from developers, from users, and even other stakeholders. 
    - This knowledge and experience includes the expected use of the software, how that software is going to be used, its environment.
    - The likely defects that are going to show up in the software, as well as, the distribution of those defects. 
    - With Experience-based test techniques, really what we're doing, is taking full advantage of the experience members of the project 

Error Guessing
  - Error guessing is an experience-based testing technique which is used to anticipate the occurrence of problems, mistakes, defects, 
  - This is based on the tester's knowledge of the software and the domain. 
    - The tester's knowledge may include the previous functioning of the software.
    - In other words, how was the application used? Or how did it work in the past? 
    - What types of mistakes did developers tend to make in previous incarnations of this software or projects similar to it?
    - And failures that have occurred in other similar applications. 
    - A methodical approach to the error guessing test technique is to generate a list of potential mistakes, defects, and failures. 
  - These mistake, defect, and failure lists may be built based on experience, defect, and failure data. 
    - Or from common knowledge about why software fails. 
    - Benefits of Error Guessing test techniques include that it relies on the tester's knowledge. 
    - Or takes advantage of the tester's knowledge in the area. 
    - It helps to be able to prioritize further testing. 
    - Error Guessing test techniques can locate otherwise, overlooked defects.

Exploratory Testing
[Video description begins] Topic title: Exploratory Testing. Your host for this session is Joseph Khoury. [Video description ends]

In this video, we'll consider the Exploratory Testing technique. In Exploratory Testing, informal, that is not predefined tests, are designed, executed, logged, and evaluated. And this is done dynamically during the execution of the tests. The results are used to learn more about the component or the system and then to go further and create tests for the areas that may need or require more testing.

Exploratory testing allows the tester to perform the maximum amount of testing with minimal planning. Exploratory testing is sometimes conducted using what's called session-based testing, to structure the activity. In session-based testing, exploratory testing is performed within a predefined time-box and the tester uses a test charter that contains the test objectives, in order to guide the testing.

With exploratory testing, the tester may also use test session sheets, which allow them to document the steps followed and the discoveries that they made. Benefits of exploratory testing include when there are few or perhaps inadequate specifications, that is when exploratory testing can be particularly helpful. Exploratory testing is also very useful, because of the minimal amount of planning and pre-work that goes on before testing, is very useful when there's a time crunch.

Because of its ad-hoc nature, exploratory testing is also very helpful when complementing other more formal testing techniques. And one thing to keep in mind, that exploratory testing is strongly associated with what's called reactive test strategies. And can incorporate the use of other black-box, white-box and experience-based techniques.

Checklist-Based Testing
[Video description begins] Topic title: Checklist-Based Testing. Your host for this session is Joseph Khoury. [Video description ends]

In this video, we'll explore Checklist-Based testing. In Checklist-Based testing, testers design, implement, and execute tests designed to cover test conditions that are contained in a checklist. In their analysis, testers create a new checklist, or amend or expand an existing checklist. However, testers may also choose to use an existing checklist without modifying it in any way.

[Video description begins] Screen title: Building Checklists [Video description ends]

When checklists are built, they can be built based on the prior experience of those building the checklist. Based on user preference, that is, information or knowledge about what the user thinks is important. When building checklists, it's also helpful to consider the reasons why and how software typically fails. And checklists can be created to support various test types. And this includes both functional and non-functional testing.

Now, let's consider the benefits of Checklist-Based testing. In Checklist-Based testing, experienced testers can base their past experience and prepare the checklist, which function as a pseudo manual to direct the testing process. The typical checklist is of high and standard level as far as testing goes, and consistently reminds the tester of what they should be testing.

Now, when there's an absence of detailed test cases, Checklist-Based testing may work to provide guidelines and some degree of consistency. Another benefit is that checklists prepared by testers aren't static. So, they may be amended or changed, altered in some way in order to meet the requirements of the testing.

Since, they are high-level lists, there is some variability in the actual testing likely to occur. And this results in potentially greater coverage but less repeatability. And the checklist, as a benefit is the only tool in this form of testing that ensures complete test coverage.

Perform Exploratory Testing Based on Experience
[Video description begins] Topic title: Perform Exploratory Testing Based on Experience. Your host for this session is Joseph Khoury. [Video description ends]

In this video, we'll perform Exploratory Testing. When we perform Exploratory Testing, we design, execute, log, and evaluate informal tests. We evaluate them dynamically during test execution. And we can use the results to learn more about the component or the system that we're testing and to create tests for areas that may need more testing. I'm going to start a .NET web app project in Visual Studio 2017, which you can download for free. And to start a new project, click File, point to New, click Website.

[Video description begins] The screen displays Start Page of Microsoft Visual Studio 2017. The window has a Menubar with various menus, namely File, Edit, View, Project, Debug, Tools, Test, Analyze, Window, and Help. The upper half section shows the Start Page with a brief description of how to get started. The bottom half section shows the Output console, which is currently blank. [Video description ends]

[Video description begins] He clicks the File menu and a menu pops up. It contains options such as New, Open, Start Page, and Close. He clicks New and a sub-menu pops up. It contains the following options: Project, Web Site, Repository, File, and Project From Existing Code. [Video description ends]

And on the new website dialog locate ASP.NET Web Site, and in parentheses Razor v3, and click on that template.

[Video description begins] The New Web Site dialog box opens. The navigator in the left pane displays multi-level menus such as Recent, Installed, and Online. The Installed menu has two sub-menus, Visual C# and Visual Basic. Visual C# is selected now. The right pane displays two drop-down fields at the top. The first one contains .NET Framework 4.6.1, and the second one is captioned Sort by. It contains Default. Below the fields is a list of Visual C# websites such as ASP.NETEmpty Web Site and ASP.NET Web Forms Site. ASP.NETEmpty Web Site is selected now. The pane on the extreme right side of the dialog box contains a Search field at the top with the keyboard short cut, Ctrl + E. Underneath, the search results display. At the bottom of the box is a Web location drop-down field which contains File System now. The location path of ASP.NETEmpty Web Site displays in the next field, and a Browse button displays next to the location. [Video description ends]

Then click OK. And that's going to go ahead and create the project for us.

[Video description begins] The upper half of the window shows a blank space for code, and the lower half shows a blank space for output. On the right side of the window, there is a Properties pane. It contains tabs such as SQL Server Object Explorer, Cloud Explorer, Solution Explorer, Team Explorer, and Server Explorer. [Video description ends]

Okay, so now that that's open, the Properties page opens. So, I'm going to click on the Solution Explorer tab to the right. And here's all the code for my system.

[Video description begins] He clicks the Solution Explorer tab. Various HTML files display in the pane. He clicks on About.cshtml and the corresponding code gets displayed in the upper half section of the window. [Video description ends]

So, this is just it, you can look at the code. That's part of Exploratory Testing as well. In fact, Exploratory Testing can incorporate Black-Box, White-Box, and Experience-based techniques. So, if we wanted to look at the code here, for the About page, just double-click and open it, so we can see our code. And now, let's go ahead click Google Chrome to test. There's options here to test it in any of the installed browsers. So, I'm going to click Google Chrome.

[Video description begins] He clicks the Google Chrome button in the Toolbar. A drop-down menu containing a list of web browsers opens. He clicks Google Chrome from the list. A Google Chrome window opens with the address, localhost:52222/About.cshtml. This web page has Register and Log in buttons in the top-right corner. Also, this web page has a title, Your app description page. The page contains placeholders for logo, title, and additional information. [Video description ends]

Okay, Visual Studio has finished compiling and creating the application, and now it's running. Now, I understand as a tester in this particular instance, that the Log in screen can pose certain problems. So, I can go there and view that and that's part of exploratory testing. Again, that's experience-based testing.

[Video description begins] He clicks the Log in button and a Log in page displays. This page has fields labeled Email address and Password. There is a Log in button below the fields. The top of the page displays three tabs, Home, About, and Contact. [Video description ends]

So, I understand from my experience that there may be certain issues here. You've got a host of other tools that you can use during Exploratory Testing as well. So, for example, you can press the Ctrl+Shift+I keyboard combination and open up the developer tools, so you can see each different section of the code, the HTML, as well as the styling.

[Video description begins] The HTML code of the Log in page displays in a new window. The window contains a Menu Bar with the following menus: Elements, Console, Sources, Network, and Performance. The Elements menu is open now. Below the HTML code for the open page displays. The bottom part of the window is divided into two sections vertically. The left section contains the following menus: Styles, Event Listeners, DOM Breakpoints, Properties, and Accessibility. The Styles menu is open now. Below the Menu Bar are a Filter field and the HTML code for style elements in the page. The right section displays a labeled thumbnail picture of the defined style element with all its dimensions. [Video description ends]

Okay, we can close the app and the browser now, and back over to Visual Studio. When we're conducting informal testing like this, we're trying to learn more about the component or system, or create tests for the areas that may need more testing. This form of testing is most useful when there's very little or maybe no specifications at all. Or even when there's significant time pressure on us testers to get it done.

We can also perform exploratory testing to complement other, more formal testing techniques. Sometimes, we conduct this Exploratory Testing using session-based testing. It adds structure to the activity. And with session-based testing, we conduct Exploratory Testing within a defined time box. And we use a test charter that contains the test objectives to guide the testing. All right, so that's a brief look at Exploratory Testing.                    
