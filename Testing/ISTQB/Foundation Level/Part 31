                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 31


Statement testing and coverage
    - You can write a statement on a single line, spread it across multiple lines, or have multiple statements on one line. 
    - You can also have statements within statements.
  - Statement coverage helps measure the percentage of executable statements tested by a test case suite. 
  - Effective and efficient test case suites should aim for 100% statement coverage.
  - You can calculate statement coverage 
    - Divide the number of statements exercised by the total number of statements and then multiplying the result by 100.
  - Measuring statement coverage helps you assess whether testing is complete and thorough. 
  - If statement coverage is inadequate use the results as a baseline and improve coverage by creating more test cases.
  - A test case suite cannot be considered complete and exhaustive unless each line of code is exercised at least once.
  
Decision Testing and Coverage in Software Testing
  - You can use control flow diagrams to visually depict program structures. 
  - Structures such as decision points may be easier to understand when visually depicted. 
  - You can also analyze code and arrive at test cases by understanding the control flow diagram.
  - A control flow diagram uses two symbols to represent code structure – a rectangle and a diamond.
  - Sequential statements are represented by rectangles, and decision statements are depicted by diamonds.
  - Control flow diagrams can be used to depict structures such as
    - Sequential structure
      - Code that is structured sequentially is comprised of statements that are executed one after the other. 
      - You use rectangular boxes to depict a sequential structure in a control flow diagram. 
      - For example, you use rectangular boxes to depict a program that calculates the sum of 2 numbers. 
      - This type of operation is linear and does not involve decision points.
    - Selection or decision
    - A decision structure is used to represent decision points within a program. 
    - To visually depict code with a decision structure, you use diamond-shaped boxes. 
    - When the program reaches a decision point, it checks the condition and depending on the outcome, 
      - The program branches to the appropriate path in the program. 
     - For example, you can use decision structures to visually depict the testing of a condition 
  - Iteration or loop
    - In an iteration structure in code, a statement is executed repeatedly until a specific condition is met. 
    - Once the condition is satisfied, the program ends or branches to another sequence, selection or loop. 
    - You can use the diamond-shaped box to depict an iteration structure.
  - For sequential statements, the flow graph is a straight line because there are no decision points that cause branching. 
  - For example, you would use a simple linear flow diagram to visually represent a program that calculates mean value.
  - Decision points in a program are depicted using IF statements. 
  - You use IF statements to check whether a condition is TRUE or FALSE. 
  - A different set of statements are executed depending on whether the condition evaluates to TRUE or FALSE. 
  - In a program that contains decision points, you can test decision coverage.
  - Decision coverage measures the percentage of decision outcomes exercised by a test suite. 
  - You perform decision testing to be certain that a decision is adequately tested. 
  - Esure that during testing, all appropriate statements are executed whether a condition evaluates to true or false.
  - Similar to statement testing, the goal of decision testing is to achieve 100% decision coverage. 
  - This involves testing both outcomes – true and false – of a decision. 
    - 100% decision coverage guarantees 100% statement coverage. 
    - However, 100% statement coverage doesn't necessarily mean 100% decision coverage. 
  - To measure decision coverage, divide the number of decision outcomes exercised by the total number of decision outcomes 
    - Then multiply the result by 100.
  - There are programs for tests are created that provide 100% statement coverage but don't provide 100% decision coverage. 
    - In such situations, you'll need to design more test sets to achieve 100% decision coverage.


Condition and path coverage
  - Programs often contain numerous conditions, which can lead to numerous paths. 
  - To ensure 100% coverage, you need to test all possible outcomes of the conditions and paths. 
  - To do so, you use advanced techniques, such as condition and path testing.
  - These techniques are more thorough than statement and decision coverage 
    - This is because 100% path coverage implies both 100% decision coverage and 100% statement coverage.
  - Because these tests are rigorous and exhaustive, they maximize the probability of detecting errors. 
  - These advanced techniques are implemented in safety-critical systems, such as medical softwar 
    - where even a single instance of system failure is unacceptable.
  - Condition coverage checks and evaluates the outcomes of each individual condition. 
  - Condition coverage helps you measure the percentage of conditional outcomes exercised by a test suite. 
    - Typically, you perform condition coverage after decision coverage.
  - Decision coverage is closely related to branch coverage. These terms are interchangeably used in various sources.
  - To achieve 100% condition coverage, each condition in the decision should be tested for both true and false outcomes.
  - When measuring decision and condition coverage, the test cases would typically exercise each decision in the program. 
  - However, sometimes, when you exercise a certain path in a program, you might find critical errors. 
  - For example, the program might behave in an unexpected manner if that particular path is executed. 
    - In this case, the developer might need to review the program structure.
  - Path coverage testing is the most comprehensive type of testing that a test suite can provide. 
  - However, path coverage testing is difficult and is usually reserved for critical sections of code. 
  - A path in a program could be simple and linear or it could contain various decision points. 
  - Even if only a few decisions are involved, 100% path coverage could be very time consuming and complicated. 
  - Therefore, it can be impractical to test all paths in a program.
  - Path coverage can be measured at various levels, such as component and system testing. 
  - When unit-testing software, it helps to know the percentage of modules exercised by the test suite. 
  - However, when performing an acceptance-level test, it is highly recommended that you test all possible paths.
  - In addition to path coverage, you can use the linear code sequence and jump (LCSAJ) technique for measuring code coverage
  - This is a variation of the path coverage technique in which only the subpaths of the program are exercised. 
  - You can use this technique as long as the statements in the subpath execute in a linear manner at run time.

