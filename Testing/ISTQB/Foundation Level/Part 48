                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 48
                    
                    
Benefits and Risks of Tools in Software Testing
Risks and benefits of test tools
  - Software testing involves many repetitive tasks and testers may lose interest in them and make mistakes. 
  - Examples of repetitive tasks include testing performed on regressed software, and presenting the test results. 
  - When testing regressed software, you need to consider the effort involved in entering the same data 
    - Or running the same tests repeatedly. 
    - After the testing is completed, you have to consider the effort put into the presentation of the test results.
  - You can automate such tasks using test tools instead. 
  - Test tools are software that support test activities such as planning and controlling tests, creating test specifications
    - building initial test files and data, executing tests, and analyzing test results. You can use a test execution tool to enter the data or run the test repeatedly in the case of the regressed software. And you can use a test management tool to quickly present the results of a test as a chart.
  - Automating the testing process using test tools helps improve accuracy and reduce costs. 
    - It also enables testers to concentrate on other important tasks such as planning, analysis, and design.
  - Using tools to automate processes, however, is not an easy task. Developing a tool can be expensive. 
    - It could also prove to be a difficult task. There are risks associated in purchasing a tool too. 
    - You should analyze the tool before buying it, or you risk buying a tool that may not match your requirements.
  - Even if you do obtain a tool that meets all your specifications
    - You should also keep the costs associated with using the tool in mind. 
    - These costs, such as the maintenance cost, should be less than the cost of testing without the tool. 
    - To avoid the risk of incurring loss over your investment and to determine when you can make profitable use of the tool, you can analyze the payback model for test tool implementation.

The graph shows the initial investment of deploying a testing tool as being high, but having a moderate accumulation of maintenance costs over time thereafter. Manual testing on the other hand shows little or no initial investment costs, but over time the ongoing costs accumulate more steeply. The point at which the accumulated costs for both testing methods meet is known as the break-even point; beyond this point the tool has saved on overall costs and the investment proves profitable.

Suppose you spend $75,000 a year on manual testing. You decide to automate the process with a test tool instead. The tool costs $200,000 to implement plus $25,000 a year to maintain and run.

In this example, the break-even point is achieved after four years. So you must use the tool for at least four years before you break even and begin to achieve financial benefits.

Tools provide benefits both in the short and long term. A good software testing tool can potentially

reduce time and effort for repetitive work
A test tool reduces the time and effort spent on repetitive work by automating it. For example, you can use a static analysis tool to verify the code against coding standards. Now, verifying the working of the code and checking that the coding standards are followed takes time. Using a static analysis tool instead would help to thoroughly check the code and verify the standards used. Automating these activities will also reduce the time and effort for you.
provide more predictable and consistent results
Tools provide consistent and predictable results. Humans, on the other hand, are prone to making errors due to issues such as forgetfulness, misunderstandings, incorrect assumptions, and confusion. For instance, if you're entering test data into a database, you may, unlike a test tool, enter the same data twice or miss entering some data.
access and present accurate test management information
Tools can also be used to access and present accurate test management information. Tools can easily retrieve test data from a database and present it as graphs and charts. This makes it easier for your team to understand the data.
ensure reports or findings are assessed objectively
When testers calculate values or make estimates from reports, they may not ensure the reports or findings are assessed objectively. They may interpret the data incorrectly, depending on their prejudices. Tools, on the other hand, assess data without any subjective bias. For instance, a tester may become biased when evaluating incident statistics. But, a test management tool makes the assessment consistently without any subjective bias.

Tools provide many benefits, but there are also risks involved in using them. Some examples of risks include

underestimating the time, cost, and effort when first introducing the tool
When you introduce a new tool into an organization, you may incorrectly estimate the time, cost, or efforts required in using the tool. For instance, you give your client a date for delivering a software application. Later, because of technical problems in deploying the tool, and resistance from experienced manual testers, you deliver the software to the client behind schedule.
expecting more from the tool
It's possible that team members might expect a tool to do more than it can. For instance, if an organization introduces a static analysis tool to identify potential problems in code, testers may expect the tool to identify problems and also provide suggestions to fix problems. To counter their expectations, you should clearly communicate the tasks the tool can perform.
underestimating the time and effort needed to derive benefits from the tool
When you first start using a tool, you may not get the expected results. This is because it takes time and effort to develop ways of achieving the desired benefits. For instance, a tool may have many useful features, but may be complicated to use. Understanding all the features of the tool and availing its benefits may take some time.
Some more examples of risks include

over-reliance on the tool
While tools can perform the testing activities they have been created for consistently well, over-reliance on tools can create problems. For instance, tools cannot perform analytical activities. They cannot suggest improvements or evaluate future uses of the tool. The success of a tool also depends upon the skills of the tool user.

When a new product testing requirement comes up, your testing team wishes to use a tool to automate all stages of the testing process. They wish to even automate the tests that take a long time to automate and are best done manually. This is due to the fact that the team is new to the use of the tool and is not skilled enough to make the best use of it.
underestimating the effort required to maintain the test assets generated by the tool
A number of tools end up on the shelf after some time because the effort required to maintain the assets generated by the tool was not estimated correctly. The main cause for the incorrect estimation is insufficient planning for maintenance of the assets that the tool produces.

Suppose you use a test execution tool and capture lengthy manual tests. After a while, the assets or the captured tests, would increase and the original space or resources allocated for the tests may not be sufficient. To end the increasing expenditure on the tool, the tool may be put away unused.

