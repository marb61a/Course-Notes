                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 7 


Agile Software Models
  - Agile models are lightweight, they display iteratie adaptive characteristics
  - They are less formal with less documentation and can adapt to the quick changes inherent in SW development
  - SDLC is iterated through multiple time but adherence to phases is not rigid
  - Phases may be accelerated or bypassed
  - Each cycle adds a small piece of functionality to the project
  - The new features are developed, tested and shown to the customer
  - Comments will be noted to influence requirements in later cycles
  - Proponents of different Agile models met in 2001 to find commonalities
    - This resulted in the Agile manifesto
  - The Agile Manifesto demonstrates the value added in all Agile models
  - The Agile methods value individuals and interactions over processes and tools
    - Others are working software over comprehensive documentation
    - Customer collaboration over contract negotiation
    - Change response over the following of a plan
  - Agile methods are characterized by an inspect and adapt mindset, which makes them highly flexible
  - These methods excel in helping businesses respond to risky projects
  - The different Agile software processes share some common practices
  - Many of them use a test first concept called Test Driven Development
    - This is where unit tests are written prior to features
  - The unit test is used to define the behaviour of the feature
  - Tests are written which will fail because the feature has not been implemented
    - The minimum code needed to pass the tests is written
    - Code is then refactored to meet standards
    - This is known as red-green testing
  - TDD encourages simple designs
  - Many Agile methods employ user stories to capture the features and functionalities the customer wants to see
  - The stories never describe how the feature will be implemented
  - It outlines who wants what feature and why in a simple statement
    - This will give a users view of the system
  - The two best-known Agile processes are Extreme Programming, or XP, and Scrum
  - XP views the project through the eyes of the developer, focusing on implementation of the system
    - XP uses and introduced Test Driven Development
  - XP projects are marked by heavy refactoring as software is designed and implemented as simply as possible
  - The main activity throughout the XP software project is implementing the cod
  - There is little documentation, and communication among teammates is done with the code
  - This means that there is a need for coding standards to be put in place
    - This is so developers will implement all code according to the same rules.
  - Scrum is the most popular of the agile models
  - In Scrum, the project is broken up into multiple development units called sprints.
  - Each Sprin is a time set inplementation of an SDLC
  - At the end of each sprint, the product is demonstrated, and the customer gives feedback
    - This can be used in later sprint
  - Scrum contains three roles â€“ the product owner, self-directed team, and the Scrum master.
    - The product owner represents the customers and stakeholders 
    - The self-directed team is responsible for delivering potentially shippable software
    - The Scrum master owns the Scrum process and ensures that it's followed
  - The Scrum master is also responsible for working with the team and removing impediments 
  - Each sprint contains five meetings or ceremonies. 
    - In the backlog grooming meeting, the list of prioritized requirements is discussed 
      - The top priority requirements are broken down into user stories, that describe features that can be developed i
    - In the sprint planning meeting, the user stories that will be implemented in the next sprint are chosen 
      - Each is then broken down into tasks describing how it will be accomplished. 
    - The daily Scrum is a short meeting where all team members check in and communicate their status. 
    - Each member of the team states what they did yesterday, what they will do today and any impediments blocking their way.
    - In the sprint review, the potentially shippable software completed in the last sprint is demonstrated to the customer. 
    - The sprint retrospective meeting is where the team reviews the last sprint, reflecting on the issues and what went well. 
    - Then the team puts actions in place to improve their performance in future sprints.

