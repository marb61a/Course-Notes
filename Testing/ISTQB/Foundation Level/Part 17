                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 17


Component and Integation Testing
  - In advanced software development models testing is an elaborate activity and is performed at four levels.
  - Dividing the testing activity into these levels helps you efficiently manage and control the activity.
  - Component and integration testing help locate code-related defects 
    - It also helps determine whether the various code segments interact with each other as intended.
  - You perform component and integration testing during the early stages of software development. 
  - Component testing helps to identify errors in each component, such as an object, program, or module, o
    - After the code for a component is written, it can be tested by the original developer, 
    - The involvement of another developer brings objectivity and independence to the component-testing process.
  - During component testing, you don't maintain a formal record of defects. 
    - To avoid oversights later, you or the designated tester should fix all errors as soon as you detect them.
  - A common approach to component testing is the test-first approach, which is an iterative process. 
    - According to this approach, you create test cases before you start developing and testing code. 
    - To create the test cases, you use the specifications documents and the blueprint for the software application.
  - While testing the code of a component, you may also need to check whether the code correctly responds to or calls other components. 
    - However, sometimes, you may not have immediate access to these other components.
  - To check whether a software component can respond to or call other components, you create two temporary components:
  - Stubs
      - Stubs simulate called components. While testing a software component in isolation, you use a stub in place of each 
      - called component. For example, if an component calls an object that is not yet ready, you can use a stub in place of the object.
  - Drivers
      - During component testing, you may also have to create simulated components or test tools known as drivers. 
      - A driver acts as a substitute for a component that calls the component being tested. 
  - A nonfunctional requirement is one that isn’t related to functionality, but to an attribute such as usability, portability etc
  - During component testing, you also test the robustness of a component. 
  - After successful component testing, you move on to integration testing. 
    - At this test level, you determine whether software components interact with each other as intended.
  - During integration testing, you also verify whether the software components interact correctly with hardware and software, such as an operating system. 
    - This level of testing is also known as component integration testing and is typically conducted by either developers or integrators.
  - You can also conduct an integration test after the system-testing process. 
    - At this stage, you refer to integration testing as system integration testing. 
    - This type of testing helps you accurately analyze the interactions between a complete software product and other software systems.
  - During component and system integration testing, you can test the nonfunctional characteristics of the integrated components 
    - You can check for such performance degradation during component integration testing.
  - Before planning for and performing integration testing, you should choose an integration strategy. 
    - This strategy helps you decide the order in which you integrate the components of a software application. 
      - The order depends on the number and types of bugs you expect the application to have.
  - Based on the integration strategy you choose, you can adopt one of two methods to conduct integration testing:
    - big-bang integration testing
      - You perform big-bang (or non-incremental, as it is formally known) integration testing on a fully integrated system. 
      - Use this method of testing only if you plan to integrate the software components first and then test the resulting system. 
      - Bang-bang integration testing proves successful if the components have few and uncomplicated bugs.
    - incremental integration testing
      - Incremental integration testing is opposite to the big-bang method. 
      - In this type of testing, you gradually build and test the system on a component-by-component basis. 
  - Both integration testing methods have their advantages and disadvantages.
    - Big-bang integration testing ensures that you don't require stubs and drivers to simulate missing components. 
      - Yet this method is time consuming because it involves testing an entire system. 
        - While conducting such tests, you may be unable to identify the cause of defects quickly.
      - Additionally, big-bang integration testing allows you to detect defects only late in the development process. 
      - Fixing defects at this late stage can considerably increase the defects and expenses of the project, leading to budget overruns.
    - The advantage of incremental integration testing is that you start testing on a small scale. 
      - However, when you conduct tests using incremental integration testing, you need to use stubs and drivers 
      - Creating the stubs and drivers can be time consuming, increasing the cost and effort involved in the test process.
  - In most cases, incremental integration testing is preferable to big-bang integration testing 
    - This is because the advantages of incremental integration testing outweigh the disadvantages.
  - Incremental integration testing can be divided into two types:
    - top-down integration testing
      - Top-down integration testing involves testing the external features of a software application first 
      - Then gradually integrating and testing the internal components. 
      - The advantage of top-down integration testing is that you don't need to create drivers. 
      - Also, this type of testing helps you easily identify and fix defects in the design of your software application. 
    - bottom-up integration testing
      - In bottom-up integration testing, you first test the component at the lowest level in the software application. 
      - This would be the component that doesn’t call any other components. 
      - You can use drivers to simulate the components that call this component. 
      - Similarly, you progressively build the application and test the higher-level components.
      - This method helps you test the interactions between software components more effectively than the top-down method.
  
