                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 9


General Software Testing Principles 
  - Software testing is based on certain principles that have evolved over the years.
  - These principles guide testers and reduce software related problems.
  - There are seven principles of software testing.
    - testing shows presence of defects – Principle One
    - exhaustive testing is impossible – Principle Two
    - confusing an absence of errors with product fit is a fallacy – Principle Three
  - The first principle states that running tests on software will discover defects
    - The absence of defects does not mean that the software is defect free
    - These tests also decrease the possibility that the software still contains defects,
  - The second principle states that it's impossible to conduct exhaustive testing.
    - Exhaustive testing can be defined as a test approach in which all possible data inputs and preconditions are used.
    - Testing every data input and precondition of software is not feasible
    - Exhaustive testing is possible only when the application under test (AUT) is based on simple logic
  - The third principle outlines the absence-of-errors fallacy. 
    - It states that although testing might succeed in locating and correcting all possible defects in the software
      - The software itself might not be fit for use by an end user.

Applied Software Testing Principles
  - Always base testing on certain established principles
  - As well as the previous 3 principles there are another 4 principles
  - Applied testing provides a standardized format for creating test plans
  - The applied principles of software testing concern the importance of early testing, defect clustering and the pesticide paradox
    - Testing should always be context dependent
  - The first principle stresses the importance of early testing.
    - This principle states that testing should begin as early as possible in the SDLC
    - If defects are detected during the initial stages of the SDLC, they can be corrected with minimum effort
  - Software testing should not just be a part of development but should be carried out throughout the SDLC.
  - If an error is detected during the Analysis phase through static tests it probably weill not make it into the design phase
    - If there is no testing conducted during the Analysis phase, errors can only be discovered during the Implementation phase
    - During the Design phase, if a defect in the code goes undetected, it can result in further defects.
    - A considerable amount of rework is required to correct such defects.
    - Extensive studies are carried out to study the effect of defects on cost at various stages of the SDLC
    - Testing objectives differ at every stage of the SDLC
  -  The second principle of applied testing is based on the pretext that the defects aren't spread uniformly in the software.
    - A few software modules will display the most number of defects and operational failures, this is called defect clustering
    - Defect clustering is based on the Pareto principle.
    - The Pareto principle states that about 80% of defects will be found in approximately 20% of the modules
    - You should test components of the software that are more susceptible to defects
      - This does not mean disregarding those that are less susceptible
  - The third applied principle of software testing discusses the Pesticide Paradox
    - It  states that if you continue using the same set of tests over and over again, the tests will cease to uncover bugs.
    - This can happen because during the debugging and testing, the software might have undergone changes
  - The fourth applied principle of software testing states that you need to vary testing efforts depending on the circumstances
    - For example testing a medical system would be different than testing a bookstore


Testing Throughout the Software Lifecycle
  -

Static Techniques and Test Designing Software Testing
  -

Black-box Sofware Testing Techniques
  -

White-box Sofware Testing Techniques
  -

Software Test Management
  -                   
