                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 33
                    
                    
Exploratory techniques
  - Exploratory testing technique is another kind of experience-based testing technique. 
    - It is a combination of ad hoc and structure-based testing.
  - Exploratory testing is the process by which you design test cases, execute tests
    - Log test results based on a test charter within a time box. 
    - A test charter contains test objectives & the time box denotes a specific span of time in which testing should be completed.
  - You typically perform exploratory tests if specifications are missing or if they're insufficient or if time is limited. 
  - You perform exploratory tests in addition to specification-based tests to ensure 
    - That most of the critical defects are detected.
  - In the exploratory test technique, the testers control the design of the tests. 
  - Based on their experience, the testers decide the aspects of the product to be tested, the coverage of tests, 
    - And the time frame within which the testing should be completed. 
    - The information gained from the tests is used to create new tests.
  - In exploratory testing, you learn about the software by exploring it and figuring out how it works. 
  - When you explore the system, you make decisions about what to test within the stipulated time.
  - To perform exploratory tests, you follow a sequence of steps:
    - Understanding how the system works
    - Making informed guesses regarding the location of the errors
    - Designing a test case to check for bugs
    - Executing the tests
  - When time is limited, skilled testers design and execute test cases in parallel, based on a test charter. 
  - Therefore, while the tests are performed, you need to simultaneously document the test cases and test conditions 
    - This is because no separate time is allotted for documenting.
  - As a skilled tester, you should generate a test log that contains the main aspects of the tested product, defects, 
    - And the strategies implemented to discover those defects. 
    - You can then use these findings to create test cases for other similar projects.
  - Although you can perform exploratory tests on any type of project
    - They are usually performed when the requirements of a product or a project change frequently. 
    - An example of such a product is one that is updated every two months. 
    - With each new release, product features are enhanced. 
    - Exploratory testing can help test the new features and check the compatibility between current and previous versions 
  - In this case, it would be difficult to maintain scripted test cases because you need to constantly update them. 
  - Because exploratory tests don't require you to maintain test cases, you save time and effort spent on documenting them.
  - You can also use exploratory tests when you want to provide feedback on a new product or feature. 
  - You use this technique if you want to find the most serious defect in the shortest possible time.
  - Exploratory tests performed by skilled and experienced testers can be more beneficial and effective than structured tests
    - performed by less-experienced testers.

Selecting a test technique
  - You can use various software testing techniques, such as structure-based, specification-based, and experience-based, 
    - This depends on the requirements of your project. 
    - None of these techniques are right, wrong, better, or worse 
    - This is because each technique is suitable for a specific situation and covers a certain area. 
    - However, sometimes you might need to use multiple techniques because a single technique would be inadequate 
  - Sometimes, test specifications are well documented, but the code doesn't cover all the specifications. 
    - Such discrepancies can be detected only through specification-based testing.
  - In some cases, you may need to use a combination of testing techniques
    - This is because one alone may not be sufficient to detect all types of bugs in the software. 
    - For example, to test complex software, you must use specification-based test techniques. 
    - Then to complement this, you would use experience-based testing. 
    - This approach helps discover bugs that couldn't be detected using specification-based techniques alone.
  - The three types of test techniques are specification-based, structure-based, and experience-based.
  - Suppose you're testing software that doesn't contain sufficient documentation for creating specification-based test cases
  - You have a limited amount of time to run a structured test. 
    - In this scenario, rely on the skills and experience of the tester to exercise the important areas of the software.
  - Assume that you've created a complex web application. All the specifications are well documented and there is separate time allocated for testing the software before it is deployed.

You might want to perform exhaustive and thorough testing. So you use structure-based techniques, such as statement and decision testing. These techniques help you test the structure and logic of the application code.

Graphic
The first column contains four conditions listed on four rows. In the second column, Rule1, there is Y in the conditions 1 and 2 rows and there is N in the conditions 3 row. In the third column, Rule2, there is N in the conditions 1 row and Y in the conditions 2 and 3 rows. In the fourth column, there is N in the conditions 2 and 3 rows.

Determining the technique used to test an application or software depends on various internal factors.


The models used while developing the system
Your choice of testing technique would depend on the software model used during specification, design, development, and implementation of the system. For example, if the specification requires you to test various cases with different possible outcomes, you use the decision table testing technique.

Knowledge and experience of the tester
The knowledge, skill, and experience of the tester is another factor that influences the choice of test techniques. If you want to test a system based on equivalence partitioning and boundary values and if the tester is an expert in boundary-value analysis, you might decide to perform boundary-value analysis testing instead of equivalence testing.

Potential defects
Based on past experience, if you know that certain defects are likely to be present in the system, it's easier to select the test technique. You can find the areas with likely defects if you have experience with similar applications or technology. For example, if you have tested the previous version of an application, you can use that experience to discover likely errors in the current version.

Test objective
The test technique you select also depends on the test objective. Suppose you've created a financial application and you want to test whether it functions as expected. So, you employ the use-cases approach. If you want to perform complete and rigorous testing, you use structure-based techniques.

Documentation
The extent and style of documentation plays an important role in determining the test technique. If the specifications are missing or aren't well documented, you use an experience-based test approach. However, if the specifications are detailed and contain diagrams that explain state transition, you use the state transition testing technique.

Life cycle model
Your choice of test technique depends on the testing life cycle model you use. If you're using the iterative life cycle model where you have to test various values in a loop structure, exploratory testing should be used. But if you're using the sequential model, you can test the application using structure-based techniques.

In addition to the internal factors, various external factors affect the choice of test techniques. They are

risk
The risk involved in testing safety-critical systems, such as radiation therapy machines, is very high. So you need to devise structure-based testing techniques to thoroughly test the application. There could also be an associated commercial risk involving quality or time-to-market issues, so you use exploratory testing to test the application.
contractual requirements
Your company has signed a contractual agreement with the client to test their software applications. The contract specifies that you need to use boundary value analysis and equivalence partitioning techniques. Even though other techniques, such as decision and path testing would equally be suitable, you have to use the technique stipulated in the contract.
type of system
The type of test technique you use also depends on the type of systems, such as an embedded or a financial system. Suppose you're testing a loan application and want to test the various conditions for approving loan amounts. You also want to test the outcomes of all the conditions. In such a situation, you use the decision-table testing technique.
regulatory requirements
Some industries have regulatory guidelines that form a basis for choosing test techniques. For example, the medical industry might require the use of equivalence partitioning and boundary value analysis for testing life-critical medical software systems. So you use these techniques in addition to structure-based techniques, such as decision coverage and path testing.
time and cost
If you have sufficient time and if the required budget is sanctioned, you can use a combination of different test techniques. But if time and budget are limited, you might use the one technique, such as experience-based testing, that best meets the requirements of the application.
                    
                    
