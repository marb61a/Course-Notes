                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 52
                    
                    
  - A test harness is a test environment that simulates aspects of the production environment 
    - In which a software component will eventually run. 
    - The test harness contains small programs such as stubs and drivers that interact with the software being tested. 
    - Stubs and drivers are examples of unit test framework tools. 
    - They are typically skeletal programs designed specifically to call, provide input to
      - Or accept output from, the software modules being tested.
  - Test harnesses can be programmed in-house using 'XUnit' tools. 
    - For instance, you can create a .NET based test harness using an 'NUnit' tool. 
    - You can also obtain free source or commercial versions of test harnesses.
  - A test harness is best used during component or integration testing when parts of the system may be incomplete. 
  - Developers usually use test harnesses to test, identify, and localize defects during development.
  - Test harnesses and unit test framework tools enable you to
    - Provide input and receive output from the software being tested
    - Store and execute tests within the framework and record the results of each test
    - Provide support for debugging
    - Measure coverage at code level
  - Test comparators compare what the software produces to what the software is expected to produce 
    - And store the results either as part of the test case or as computed through a test oracle. 
    - For instance, suppose you are executing a test expecting a particular error to be returned during the test. 
    - The test execution tool returns an error, but it is not the one you expected. 
    - Then to catch the difference and report it, you will use a test comparator.
  - Test comparators are usually included with the test execution tools and are particularly helpful for regression testing 
  - The process of identifying differences between the actual results and the expected results for a component under test 
    - Is called test comparison. Test comparison can be performed in two ways.
  - Dynamic comparison
    - In dynamic comparison, you use a test execution tool to perform the comparison in real time
      - While the test is executing. 
      - This type of comparison helps identify if the compared and the actual results do not match each other during a test. 
      - If the results do not match, you can correct the defect or execute other tests. 
      - You can also monitor error messages through this method.
  - Post-execution comparison
    - In post-execution comparison, you use stand-alone and internally developed tools to perform the comparison 
      - After a test has finished executing.
    - This type of comparison is useful when comparing a large volume of data.
  - Many operating systems have file comparison tools for post-execution comparison.
  - Coverage measurement tools measure the percentage of quantifiable structural elements 
    - Or 'coverage items' that are covered by a given test suite. 
    - Some coverage tools can go further to identify elements that have not been exercised during the test
      - And even to suggest test inputs that will exercise these elements.
  - Depending on the programming language and the test techniques in use
    - Coverage measurement can be intrusive or non-intrusive.
  - Software cannot be considered 100% tested if it achieves 100% statement coverage. 
    - This only means that those elements that the coverage measurement tool succeeded in identifying 
      - Have been exercised during the test.
  - To test an application using a coverage measurement tool, you
    - Instrument the code
      - You first instrument the code by identifying the coverage items at the component test level.
  - You use the tools to first identify the coverage items that have undergone a structural test. 
    - For example, at the component testing level, the coverage items can be code statements or decisions. 
    - Or, at component integration level, they can be calls made to functions or modules.
  - Test the instrumented code
    - You then run the instrumented code through a series of manual or automated tests.
      - Identify the coverage items that were exercised
  - Next you use the coverage tool to count the number of coverage items that have been executed by the test suite. 
    - You also use it to identify and report the percentage of the exercised coverage items. 
    - If the coverage tool you are using is a sophisticated one
      - You can even use it to identify the test inputs that can exercise paths that include unexercised items.
  - Remove the instrumented code
    - Finally, just before the code goes into production, you remove the instrumented code.

Security testing tools are used to test a system's resistance to security threats 
  - Such as computer viruses, worms, or denial of service attacks.
  - These tools support the execution of test procedures to confirm that there are no flaws in the security systems. 
  - They test to check if security systems are secure enough to resist external attacks on 
    - The network, support software, databases, and source code. 
    - They are particularly important if the application being tested is to be used in an unsecured environment
      - Such as e-commerce or e-business and corporate applications on the Internet.
  - Because the skills required to use security tools are very specialized
    - You should ensure that only specialists operate them.
  - Security testing tools can be used to
    - Identify virus attacks
    - Identify weak passwords
    - Check if the system has weak points such as open ports or points of attack
    - Check if the operations are secure
    - Check if the system is secured against denial of service attacks and the results of test attacks
    - Simulate different types of external attacks


