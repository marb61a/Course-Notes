                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 29
                    
                    
State Transition Software Testing
  - A software application can be in various states depending on the action its user performs. 
  - As a software tester, you need to check if state transitions occur correctly. 
  - This type of testing is known as state transition testing.
  - State transition testing is based on the assumption that each application has a finite number of states, 
    - That the transition from one state to another depends on the objectives of the application. 
    - Applications with finite states are known as Finite State Machines.

To test if changes in states are accurate
  - To test state transitions of an application, you create a state transition model. 
  - This model contains four components:
    - States
      - You include all states possible in the application. 
    - Events
      - Events are user actions, such as a button click or text input, that trigger a state transition. 
    - Transitions
      - A transition is the process where an application changes from one state to another when an event is performed. 
      - You use arrows to depict transitions.
    - Outcomes
      - An outcome is a state that is the result of a transition. 
      - Outcomes are displayed near the arrowheads of transition arrows.
  - To test an application using the state transition model, you perform the possible events from all states to check if they change the application's state accurately.
    - In some cases, the same event can trigger different changes. 
    - You should also check if an event triggers an appropriate change depending on the current state of the application.

Using use cases to test software
It's a good practice to test software applications by operating them as end users. To do this, software testers usually create use cases. A use case is a scenario that contains a series of realistic tasks that end users will frequently perform when using the application.

For a web browser, for example, you can create a use case scenario for a beginner who wants to open a web page and bookmark it. Similarly, you can create another use case scenario for an advanced user who wants to activate the pop-up blocker and open a web site that uses pop-ups.

In addition to tasks, use cases include the outcome expected from the system for each task. In the use case for the advanced user, for example, an expected outcome can be that a message appears informing the user that pop-ups for the currently open web site have been blocked.

Use cases should also include error handling methods, which are alternate outcomes for tasks not performed correctly. For example, in the use case for the beginner, you can specify that an error should be displayed when the Enter key is pressed without specifying a web address.

In use case modeling, an actor is any person, external computer system, or event that interacts with the solution through a use case. Actors should also be given unique names that describe the role they play in interactions with the system.

Testers will monitor the outcome of interactions between various software components, helping to find integration errors caused by incorrect interactions between components. For example, if the browser asks the actor to enter the web page address when that actor tries to bookmark an already open web page, the interaction between the web page address and the Bookmark service is incorrect and the tester logs a bug.

You can use a table to build a use case. In this table, you can specify imperative tasks using appropriate verbs and nouns.

For example, to create the beginner's use case for the web browser, you specify three tasks for the actor – Type a web address and press the Enter key, Click the Add to Bookmarks button, and Type a name for the bookmark and click the Save button. You enter each task in alternate rows.

You then write the successful outcomes expected from the system for each task – The web page opens, The Add Bookmark dialog box opens with the web address entered, and The Bookmark name is visible in the Bookmarks list. You enter each outcome in the row below its corresponding task.

The column that contains the tasks and their successful outcomes is known as the Main Success Scenario.

You then write the possible error handling methods in a new column.

In this example, there are two possible error handling methods for the outcome of the first task – Prompts for an address if the Enter key is pressed without specifying a web address and Displays a Page Not Found error if the Enter key is pressed after specifying an incorrect web address. The outcome for the third task has one error handling method – Prompts for a name if the Save button is clicked without specifying a name in the Add Bookmark dialog box.

You can also use adverbs and adjectives in the outcome statements to describe how each outcome should occur.
