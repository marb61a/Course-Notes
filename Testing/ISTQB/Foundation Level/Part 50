                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 50


You use requirements management tools to
  - Capture and store requirements
    - Requirements management tools capture and store requirements related to test cases and check them for consistency.
  - Identify defects in requirements
    - The tools identify defects in the requirements such as undefined or missing requirements. 
    - For instance, some requirements may have issues or hold ambiguous words such as "to be decided" or "and/or". 
    - Some requirement management tools will be able to capture these defects.
  - Identify any changes to other items
    - These tools use their traceability function to identify if any changes to other areas of the software 
      - That are not under test have occurred as a result of the new requirements. 
      - This is made possible through the links and references made between requirements, functions, test conditions
        - And other testware items.
  - Calculate requirements coverage metrics easily
    - The traceability function of requirements management tools enables test cases to be mapped to requirements quickly
      - And so requirements coverage metrics can be calculated easily.
  - Incident management tools manage defects and incidents such as anomalies, enhancement requests
    - And suggestions that are recorded during testing. These tools are also used to create incident reports.
  - Incident reports contain details of all stages that incidents pass through such as incident analysis
    - Classification, fixing, retesting, and closing. These reports are stored in a database. 
    - The database has field categories such as incidents observed, priority level, severity level, people involved
      - And current status. The incidents are categorized according to the values stored in relevant fields of the database. 
      - As the incidents progress from one stage to another, the values change and the older values 
        - Are visible in the history of changes made to the incident.
  - Incidents can also be searched, analyzed, and presented as management information. 
    - This information is used along with the data generated by test management tools 
      - For planning and estimating new projects and for making process improvements. 
      - The information stored can also be used to produce management information 
        - About high-priority incidents that are assigned to developers.
  - Configuration management tools are used to keep track of versions of the software being tested 
    - Along with the corresponding operating systems and other relevant components, and sometimes the testware itself. 
    - They are particularly useful when the architecture of the system you are working on 
      - Is complex with multiple elements being subject to version change during the testing process.
  - Suppose your company sells different versions of products that operate on multiple operating systems. 
    - You can manage these versions using a configuration management tool 
      - That helps you map the version number of each subsystem to the build number of the complete system. 
      - You can also map testware depending upon the version number of the build. 
      - Mapping allows traceability between the tests and the builds.
  - Configuration management tools enable you to
    - Store information
      - You can store information about various versions and builds of software and testware.
    - Trace testware to versions and versions to testware
      - By embedding traceability into the system, you can identify the exact configuration 
        - Of software and testware at any given point of time. 
        - You can then determine the correct versions of software, testware and test procedures 
          - That need to be reused or corrected when fixing defects.
    - Perform other miscellaneous activities
  - With configuration management tools, you can manage builds and releases, perform baselining, control access to info


Using tools for testing specifications
The tools available for static testing are

review process support tools
static analysis tools
modeling tools
Review process support tools help keep track of all the information required for a review. These tools are useful for conducting formal reviews where teams located in different locations are involved.

Review process support tools are used to check if there are rules and checklists, if the review comments have been recorded and communicated, if the changes made have been logged, if the changes affect any other items, and if the affected items have been highlighted. They are also used to identify if the review was completed in the planned duration.

Additionally, you can use review process support tools to monitor the status of reviews and store, sort, and communicate reviewer comments. They serve as a repository for all rules, checklists, entry and exit criteria, and procedures used in reviews. These tools also collect metrics on key factors and provide statistical information and reports about comments. Review process tools also provide traceability between comments, documents reviewed, and other relevant documents.

Static analysis tools are usually language-specific tools that come either as part of programming languages or as tools that only work with certain development platforms. With the help of these tools, developers can identify and rectify defects as soon as they occur because these tools analyze code before it is executed and generate warning messages. These tools also identify defects that are hard to find during dynamic testing. Developers use these tools as part of the development and component testing process.

Static analysis tools also help in finding other issues such as syntax errors, invalid code structures, portability issues, security vulnerabilities, references to variables that have null values or stay unused, and inconsistent interfaces between components.

Additionally, static analysis tools are used to identify areas where testing may be required due to additional risks. These tools are also used during activities such as analyzing structures and dependencies and performing static analysis of requirements and enforcing coding standards.

Modeling tools are used by developers during the analysis and design stages of the product development life cycle. These tools help validate models of a system or software. They are used before dynamic tests are run and find omissions, inconsistencies, and defects early in the development life cycle. This helps make development more cost effective and helps developers ensure that they are beginning detailed design from a correct, consistent, and robust model.

Note
Modeling tools are different from model-based testing tools, which are tools that generate test inputs or test cases from stored information about a particular model. Model-based testing tools are therefore classified under test design tools.

Modeling tools help

identify and prioritize specific areas of the model for testing and find inconsistencies and defects in it
predict system response and behavior of a model under various situations, for instance, under a certain level of stress
understand system functions and identify test conditions using modeling languages such as Unified Modeling Language
Suppose you are testing a database design. You might discover conflicts arising from columns being present in transaction tables that should be also present in a master table, but are missing. Modeling tools can help you find such inconsistencies or defects early in design that are otherwise costly to pick up later in the development life cycle.

