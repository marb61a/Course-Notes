                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 32
                    

Condition and path coverage (cont)
  - Sometimes, there may be no test cases that can satisfy all criteria for a program. 
  - Statements that cannot be exercised even once are unreachable. 
  - For example, you've written a program that performs calculations such as addition, subtraction, and multiplication.
    - When you review the structure of the code, you find that the program doesn't call the multiplication function. 
    - In this case, the multiplication function can't be tested, and as a result, those statements are unreachable. 
    - You need to correct the code structure so that all functions are accessible and can be tested.
  - Unreachable statements can also exist in programs that check for uncommon error conditions. 
    - It could also occur when code becomes unmanageable because it keeps accumulating when converting legacy applications.
  - This problem can occur even in well-designed and well-maintained code. 
    - If it happens, you need to perform detailed code coverage analysis and then test the code once again. 
    - The testing process should accommodate the time and effort spent on these additional activities.

Experience-based techniques
  - In most of the structure-based testing techniques, such as statement, decision, condition, and path coverage testing, 
    - specifications for testing the software are already provided.
    - However there could be situations in which sufficient specifications aren't available for test cases, 
      - In this case you have to rely on your experience and skill as a tester. This is called experience-based testing.
  - Experience-based testing supplements specification-based testing. 
  - In experience-based testing, you rely on past experience with similar technologies 
    - This will help determine the areas likely to contain errors. 
    - You use your skill and intuition to locate defects that can't be found using any other testing technique.
  - Experience-based testing is called ad hoc or reactive testing because the specifics of the tests are defined while testing
  - In ad hoc testing, test details are either created spontaneously 
    - Or as a reaction to the functionality of the software system.
  - Because this type of testing is ad hoc, you need a framework to ensure that adequate tests are exercised. 
  - To define the framework, you need to have a general understanding of the type of bugs, system weaknesses etc
  -Because experience-based testing is open-ended and doesn't follow any specification, 
  - There are two key factors to be kept in mind. These are
  - Managing time and effort
    - Because reactive tests are open-ended, you have to run them in a "time-boxed" manner. 
    - For example, consider a situation where you've developed a pilot software program
    - It has requirements that are not closed, and you need to test the product for possible enhancements. 
    - In this instance, you would run an experience-based test. 
    - The time allocated for testing the software would depend on the risks associated with the test conditions
    - The complexity of the area to be tested, and the time required to test a specific use case.
  Tracking test coverage
    - To track coverage, you would need test charters containing a high-level description of the test cases. 
    - For example, suppose you need to test the spell-check function of a word-processing application. 
    - In this case, you create the test charter called test_spell_check and specify the time box as 60 minutes. 
    - This means the tester is not expected to take more than 60 minutes to test the spell-check function 
      - This would exceed the time limit only if the product contains an unexpected number of bugs.
  - One type of experience-based testing technique is error guessing. 
  - In this technique, you guess the location of an error according to your testing experience with previous applications.
  - Although this type of testing has no specifications, you can create test cases according to the application. 
  - Consider an application that contains a Zip code field. 
    - When testing this application using the error guessing technique, 
    - You check for various cases including whether the user has entered a five-digit number.
  - Although error guessing is an ad hoc technique this test technique can be systemised. 
  - For this, you need to understand how the software works and identify the possible ways for the software to fail.
  - After you identify potential failures, you can organize and categorize them into types. 
    -You can include this information while designing test cases for the system.
  - You can also use error guessing to detect buffer overrun â€“ an input string that is too long for the program to handle. 
    - This error can occur when developers do not insert checkpoints in the code to check the size of inputs.
  - Other defects you can detect using the error guessing technique are division by zero, no input values in a field, 
    - Empty files, and entering wrong data in a field.
  - Using this technique, you can also detect errors you think would never occur in the software. 
    - For example, the software manufacturer claims that you can use the software to modify 100 records simultaneously. 
    - So as an experienced tester, you should try entering 100, or approximately 100, records to test this feature 


