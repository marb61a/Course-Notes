                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 45
                    
                    
Product Risks in Software Testing
Risk-based software testing
  - Software applications, like all products, are subject to risk; they are prone to failures and can dissatisfy customers, 
  - Although conventional testing helps prevent failures, it concentrates equally on all features of the application. 
  - As an alternative, you can conduct a risk-based test. 
  - In this test, features that are more likely to fail and features that have a bigger impact on business 
    - Are given higher priority during testing. This ensures that the risk of failure for the application is minimized.
  - If a bank application, for example, calculates lower interest, the bank would incur losses on the loans provided. 
    - However, if it displays the incorrect time, it wouldn't affect the business of the bank. 
    - So if you conduct a risk-based test, you wouldd prioritize the testing of the interest calculator over the clock 
      - Because its failure would prove more expensive.
  - Similarly, if you're aware that the feature that transfers funds is likely to fail because it was poorly coded
    - You would test it before testing the interest calculator.

Basic Incident Reports in Software Testing
Incident reports
  - Testing software may produce different results from those expected. 
  - Such a result is called an incident. 
  - For example, according to the functional specification document
    - You should be able to generate reports while testing billing software
      - But the application hangs when you try to generate a report. 
      - This result is different from the expected and so is an incident.
  - If an incident wouldn't cause any problem to the software, then you can leave it as is. 
  - However, if the incident causes the software to malfunction, you can categorize it as a defect. 
  - In this case, the developers need to rectify the defect so that the software functions as expected. 
  - Defects can appear in any phase of the development process of the software.
  - Incidents occur for various reasons. 
  - An incident could arise if the test environment is configured incorrectly or if the tester makes mistakes while testing. 
    - Logging incidents helps you take appropriate action at the right time. 
    - You log or document the details of an incident or a defect in an incident report.
  - An incident report also enables you to categorize the incident. 
    - For example, you can categorize the incident as a bug, an observation, or an enhancement.
  - You use the incident report to log an incident for various purposes. The report helps you
  - Provide feedback to developers
    - You should provide adequate and complete information in the incident report 
      - So that it provides feedback to the developers. 
        - This would enable them to locate and correct the defects or to handle the incident in an appropriate manner.
  - Track the quality and progress of testing
    - The incident report provides the managers and test leads a general overview of the product quality. 
      - For example, if the number of incidents or defects is numerous, then the quality of the application is poor.
      - The report also helps them understand the areas that contain the most errors and the severity levels of these errors
      - For instance, when testing an online web site, you report various incidents and defects 
        - Which affect the look and feel of the web pages. 
        - This means the developer needs to revisit the web site to change some aspects of the graphical design.
  - Improve the test process
    - You can improve the test process by determining the phase in which the incident or defect was detected. 
    - For example, if you test an online web site from the design until the deployment phase
      - You will find incidents and bugs at all phases. 
      - If you analyze them, you will get consolidated data about the number of bugs in each phase. 
      - Then you can perform additional tests in each phase and remove the defects. 
      - This helps improve the efficiency of the test process.
  - A typical incident report is a template that contains four main sections: 
    - Test Incident Report Identifier, Summary, Incident Description, and Impact.
    - You provide a unique ID for the incident in the Test Incident Report Identifier section.
    - In the Summary section, you provide a brief description of the incident. 
      - For example, you can explain the variation observed between the expected and actual result while testing the software
      - In addition, you can provide high-level detail of the application you tested 
        - And also the incidents you came across while testing.
  - You describe the incident in the Incident Description section. It contains subsections such as
    - Inputs
      - It is important to record the input data that triggered the incident. 
        - For example, for a tax calculation application, if you enter the salary amount in four decimals digits
          - The application might round off the tax value to display two decimals. 
          - In such cases, you should note that your input value was a four decimal digit.
    - Expected results
      - You should document how the software application is expected to function. 
      - For example, you want the tax calculation application to produce results in four decimal digits. 
      - Therefore, you specify the same in the expected results subsection of the Incident Description section.
    - Actual results
      - After you execute the application using the test data provided 
      - The actual result you observe should be documented in the incident report. 
      - This could either be the same as the expected result or could be different. 
      - For example, the actual result would be different if the salary value expected contains four decimal digits
        - And in the output displays two decimal digits.
    - Anomalies
      - Any anomalies – how the actual result differs from the expected result 
      – Or an unusual occurrence you find when executing the software application should be documented. 
      - For example, you test the tax application by entering the salary in fractions. 
      - You find that the software doesn't respond. 
      - This is an anomaly and so you should document the values that caused the anomaly.

