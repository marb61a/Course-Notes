                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 44


Project Risks in Software Testing
Identify and mitigate project risks
  - Risk is an integral part of life. Every action has some degree of risk associated with it. 
  - Even a simple task such as crossing a street could be risky. 
  - Similarly, your projects may also face risks because of uncertainty, making risk management an integral part of a project
  - Most projects face potential risks that can adversely affect the cost and profitability of a project. 
  - The level of risk is characterized by the likelihood of an unfavorable event and its impact on a project.
  - You can minimize potential risks and maximize potential opportunities by creating a risk management plan. 
  - Risk management helps you identify and handle potential risks. It also helps you monitor your project.
  - Information technology projects involving software testing typically face two types of risks:
    - Project risks
      - Project risks are unfavorable events that may jeopardize the achievement of one or more project objectives on time. 
      - For example, introduction of third-party software, developers exceeding their scheduled estimates
        - application complexity, change in scope of testing etc may adversely affect the testing schedule.
    - Product risks
      - Any risk that adversely impacts the quality of a product being delivered constitutes product risk. 
      - Risks such as failure to deliver software that meets the specifications or client needs
        - Inadequate test processes, software with incomplete data or inadequate testers can affect the quality of software.
  - Software testing is an important activity in information technology projects where software development is involved. 
    - And so, it is subject to risks similar to other activities in the project.
  - To deal with project risks that may apply to testing, you can ignore the risk, transfer risk, mitigate risk
    - Or you could create a contingency plan.
  - You may ignore a risk if the probability of its occurrence and impact is low. 
  - For example, if a tester goes on vacation during the project or falls ill, you can ignore the risk to the project 
    - I you have additional testers who can take on the pending work. 
    - However, you need to create a contingency plan to cover a key project team member becoming unavailable.
  - If a risk is highly probable, you can transfer it to a third party. 
  - When you transfer a risk, the responsibility for managing the risk is transferred to another party
    - This doesn't eliminate the risk.
  - For example, you can outsource a high-risk activity to a vendor who has the expertise to deal with it. 
    - Or you can move the risk to someone with a high risk tolerance, for example, an insurance firm.
  - Another strategy to deal with project risks is to create a contingency plan. 
    - Under this plan, risk events are identified before the project begins. 
    - A response plan is created that will only be executed if certain events occur under predefined conditions. 
    - Events that trigger the contingency response, such as missing milestones are defined and tracked.
  - You can also mitigate a risk by taking proactive steps to minimize the negative impact of the risk. 
  - For example, to mitigate the risk of an experienced member leaving the team, you can maintain a list of current employees
    - Or contractors who can step in to fill the vacancy. 
    - Taking early action to reduce potential risk impact is more effective than trying a project a rebuild after risk occurs

When creating a risk management plan, you first identify the potential risks. 
  - To do this, you can take proactive steps, such as creating a draft of project risks
    - And receiving input and feedback about the risks from your team members.
  - These are the common risk types that occur in a testing project.

Supplier issues
    A testing project may face risks such as failure of a supplier to provide on-time delivery of critical materials 
      - For the testing environment. 
      - You may also face issues such as failure to consider efforts during the testing process in the contract 
        - Or inability to respond to the testing issues when raised.

Organizational issues
    Organizational issues associated with a testing project include shortage of skilled testers, inadequate training
      - outdated development and testing practices, and failure of testers to communicate and respond to test results.
  - Product changes
      - When there is a change in product requirements, it can result in additional efforts and delayed schedules. 
      - It can also result in extensive modifications in existing test cases or creation of new test cases
        - Besides invalidating test results.
  - Test environment issues
      - Sometimes risks related to inadequate or unrealistic testing environments, such as limited network connectivity, 
        - Poor system configuration, or unavailability of required applications, result in a delayed project 
        - Or misleading data. You can either transfer these risks or mitigate them. 
        - Setting up a proper test environment enables you to get accurate results and save time.
Faulty test items
    Test items or test cases that can't be installed properly in a test environment pose a risk for the project. 
      - For example, test cases may not target critical areas of an application or the test plan omits tests 
        - For an important functional area. To ensure that all test items are properly tested in the test environment
        - You can create a contingency plan or perform smoke testing before starting the testing process.
Technical problems
    Risks that arise because of technical problems in the testing project include issues such as difficulty in defining 
      - test requirements, constraints that limit the effectiveness of test cases, quality of the product design, 
        - Or highly complex systems.
  - Consider a situation when you use the black-box testing environment for acceptance testing. 
    - You realize that the new software doesn't install properly over the older version 
      - This is becausae the configuration files are incompatible. 
      - In this case, the test environment is insufficient and so is a project risk.
  - To mitigate this risk, you need to ensure that a defined uninstall process is part of your project plan. 
  - This enables you to clean up the environment after testing and ensure that old components of a system 
    - Are not left to conflict with new software builds.
  - Apart from insufficient test environments, you can encounter organizational problems such as ineffective communication 
  - Suppose the system you're testing is dependent on timely communication between the server and its clients. 
  - To ensure that this happens, you need to measure the response time for client requests. 
    - You also need to conduct the test when the clients and the server are on the same infrastructure. 
    - However, you realize that the server and the clients are geographically distant. 
    - This is a problem since the plan does not contain any provision for testing from geographically distant locations.
  - To mitigate the risks arising out of the problem, you can outsource the tests to other companies 
    - These should be located in a specified geographical area and can provide more realistic environments. 
    - This will help you transfer the risk ownership to a more competent company.
  - You can also manage risks related to changes in product during the development stage.
  - Consider that you are testing a graphic manipulation library for use in a variety of applications. 
    - The development team's priority is to deliver a feature-rich product that meets client needs. 
    - Although the test plan is complete and the project is moving into the acceptance testing phase
      - The developers have received new requirements and have added a new text manipulation and rasterization functions 
      - These functions are not part of the designed test cases and thus pose a project risk.
  - You can then mitigate this issue by implementing product change-control processes, robust test design,
    - And light-weight test documentation, allowing for more flexibility.
  - In severe incidents, when new features are added repeatedly, it may be necessary to transfer the risk
    - by escalating the issue to management.

