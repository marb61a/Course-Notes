                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 20
                    
                    
Structural and Changed-based Software Testing
  - Every time an application is developed, it is tested to verify that the system not only works but also as efficiently as required
  - To aid you in this testing, you are provided with test objectives and test types.
  - The test objectives will define the test types which are used
    - Each test type has specific types of test objectives pertinent to that type of test.
  - You carry out functional testing to check that the application does what the functional specification requires
    - As functional testing is not directly concerned with the inner workings of the software, it is referred to as black-box testing. 
  - Structural testing on the other hand is concerned with the internal architecture and workings of the software
    - For that reason is often referred to as white-box, or glass-box, testing
  - Structural tests can be carried out at all test levels
    - However, they are mostly performed at the lower test levels such as at the component and the component integration level.
  - At the component level, the tests are based on the structural aspects of the system such as code in a program
  - At the component integration level, the tests may be based on the architecture of the system, such as a calling hierarchy.
  - Structural tests measure the amount of testing done by checking the coverage of a set of structural elements or coverage items
  - In structural testing the internal system design is considered and the tests are based on the logic of the application's code.
    - This is in addition to testing the coverage of a set of structural elements or coverage items, 
  - In structural testing, you are required to have knowledge of the internal working of software and the code
    - Regardless of the specifications, you are required to test each command in the code.
    - To ensure that you are testing your program adequately, you need to execute all the elements such as statements, branches etc
  - The coverage achieved in structural testing is expressed as a percentage of the items being covered.
  - There are a variety of tools and methods available to support code coverage measurement at component and integration testing levels.
  - These tools measure the percentage of executable elements.
  - If the coverage is not 100%, then more tests may be designed to test those items that were missed
  - Various structure-based techniques are used to implement structural testing. 
    - These techniques are also called white-box techniques. 
    - They are based on an analysis of the structure of a component or a system.
  - White-box techniques can also be used at various levels, such as
    - Component
      - At the component level, the structure is that of the code itself, such as in the statements or decisions.
    - Integration
      - The structure at the integration level could be a call tree where modules call other modules.
    - System
      - At the system level, the structure may be a menu structure, a business process or a web page structure.
    - Changed-based software testing
      - Testing is carried out at every stage of the product development to discover the defects, if any, and fix them. 
      - This ensures that the product is defect free and works as specified.
  - Every time you find a defect and fix or debug it, 
    - you need to retest the debugged component by re-executing the test cases that failed the last time. 
    - The product is considered free of known defects only when it passes the retest.
    - This type of retesting is called confirmation testing.
  - Confirmation testing by itself does not guarantee a quality product. 
    - Even after confirmation testing, because of fixing a bug, or any other modification such as the addition of a new feature, 
    - a debugged or new version of the software can lose its original functionality or a part of it. 
    - When this happens, the new version is said to have regressed with respect to former versions, and is defective again.
  - A systems or component that has had changes carried out needs to be tested again 
    - This is to ensure that none of its functionality was modified unintentionally. 
    - A set of tests are designed to demonstrate that despite the changes that were made, the system works as expected. 
    - These tests are called regression tests and the testing is called regression testing.
  - Like confirmation testing, regression testing involves executing test cases that were executed before. 
    - However, confirmation testing is performed on the items that failed the tests the last time they were executed, 
    - Regression testing is performed to ensure that previously working parts of the system have not had faults introduced.
  - There are three types of regression:
    - Local regression – a change or a bug fix in the existing software creates a new bug
    - Exposed regression – a change or a bug fix in the existing software reveals an existing bug
    - Remote regression – any change or a bug fix in one area triggers an error in another area of the system
  - While performing regression testing, most organizations use a regression test suite, 
    - This is a set of test cases used for regression testing at each level. 
    - And where the postcondition of one test is used as a precondition for the next one. 
    - Also because the same test cases are used every time, the test cases can be used for test automation. 
    - The test cases perform an overall testing of each of the most important functions in a system. 
    - They are executed every time software is updated or the environment is changed.
  - It is important to maintain the test suite so it stays updated with the latest software version. 
    - So every time new functionality is added to software, new regression tests should also be added 
  - In a situation where the regression test suite becomes very large, and the tests need to be executed
    - A subset of the test cases can be chosen. 
  - This is because it is difficult to execute all the tests manually or simultaneously. 
  - Unlike the other types of testing, regression testing can be carried out only at the very end, 
  - It is also important not to omit regression testing because the risk involved is huge. 
  - While functional tests help you verify the functionality of the features, 
  - Non-functional tests test the behavioral characteristics of software, which are quantifiable on a varying scale. 
  - And structural tests measure the amount of the developed component that has been exercised by testing.
  - After running the new code through all these tests, you find it passes the tests and is free of known defects. 
  - There are a number of strategies available to capture defects in the regressed software. the main strategies are
    - Repeating all the tests
      - If you have sufficient time and resources to cover critical risks, repeat all your tests after the last change 
      - If you are repeating these tests for large, complex systems, you can use automation.
    - Repeating some of the tests
      - It is not always possible to repeat all the tests. 
      - Executing all the test cases for a large and complex software product may require too many resources 
      - In such cases, you can repeat some tests only.
  - Other strategies are
    - Using cross-functional tests
      - You use cross-functional tests to capture accidental regressions. 
    - Releasing the product in various phases
      - You can also choose to release your updates on the product in phases. 
      - You will need to phase your release so that you have more time to ensure that your product is thoroughly tested.
    - Having other users testing the product (Beta testing)
      - When you send your product for a Beta test, it will be your users who will be testing your product 
    - If you find yourself bogged down with schedule pressure, instead of releasing poorly tested emergency patches, 
      - It will be a good idea to release smaller but well tested patches to only those users who need them. 
      - You can then roll the final and completed patches into maintenance releases instead. 
      - Doing this will ensure that the regression risk increase for your users is only short term.
    - If you are using the strategy of repeating tests, you will need to decide which of the tests to repeat. 
  - To decide which tests to repeat, you can use techniques, such as
    - Traceability
      - The traceability technique is used when checking whether any requirement etc, is affected by the modification. 
      - You would have a set of tests related to the behavioral descriptions of the system. 
      - You trace back to these tests and re-execute them.
    - Change analysis
      - When you want to analyze how changes in one part could trigger off changes in other portions of the system, 
      - You use the change analysis technique. So you look at the structural descriptions to find the answers. 
      - To be able to do this, you need to have an indepth understanding of the code and the system's design.
    - Quality risk analysis
      - If you want to decide what to retest based on business risks, you should use the quality analysis technique. 
      - Even though defects are unlikely here, you will have knowledge of the areas that are prone to high business risk. 
      - Using traceability and change analysis techniques will only help you select tests based on technical risks.
