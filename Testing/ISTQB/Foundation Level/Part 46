                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 46


The other subsections in the Incident Description section include
  - The date and time of the incident
    - You can log the date and time when the incident occurred in the Date and Time section. 
    - However, if you're using a testing tool to log incidents and defects, this information is automatically captured.
the procedural step
    The developer who fixes the incident or the defect should be able to check the application and make appropriate corrections in the software application. So the specific procedural step that caused the incident should be documented in the incident report.
the environment
    You have to document the environment in which you tested the application. Environment includes hardware and software used for executing tests. For example, according to the test specifications, you have to test the application on Apple Macintosh platform and so you have to specify this information in the incident report.
the number of attempts to repeat an incident
    If you find an incident, you should be able to repeat it. You should also document the number of times you attempted to repeat the test. You should be able to document the exact steps that caused the incident so if somebody else tests the application, the same incident should occur again. The developer can then deduce the problem and correct it.
comments
    As a tester and observer, you can provide general comments. For example, you can specify if a section of the application code is modified based on the incident then all the resultant codes should also be checked for the same change. You can also specify any global issues that should be taken care of while fixing the application in the Incident Description section.
After providing the details in the Incident Description section, you can use the Impact section to describe how the incident would affect the end user. Depending on the severity of the impact, you can categorize an incident as one that would have a low, medium, or high impact. You can also rate the incidents on a scale of one to five or ten, and based on the severity level or rating, you can assign an order of priority to each of them.

Logging and Managing Incidents in Software Testing
Elements of incident report template
  - Logging the outcome of testing a product is as important as testing itself. This ensures that the product evolves with the desired quality through a systematic testing process. A typical test log contains incidents, the unanticipated results that you observe when executing an operation. You document incidents in an incident report.

One type of unanticipated result is a defect that can cause system failure by preventing the system from functioning according to its specifications. For example, online banking software may fail to execute the operation of printing the statement when the user clicks the "Print Statement" option.

Such failures arise due to individual defects, also called bugs. You need to prepare a test incident report, recording not only defects, but also any other incidents that are not as critical as bugs.

You use specific defect-tracking tools to record incidents, and the Institute of Electrical and Electronics Engineers (IEEE) Template to create a test incident report.

To record incidents, you can use the various elements in the IEEE Template. It includes

incident report identifier
    You assign a unique incident report identifier to your test incident report. This identifier uses a numbering scheme to track incidents and enables you to view the report of each incident.
incident summary
    You use the incident summary to relate an incident to the test case in which the incident was detected. A developer reads the incident summary and recreates the situation to run the application in an environment similar to that in which the bug was identified. You then run the test case again to ensure the developer has fixed the defects.
incident description
    The incident description provides information on incidents to the readers and enables them to replicate each incident from a user's perspective. Usually this description comprises details such as inputs, expected results, actual results, testing date and time, procedure followed, environment, the number of times the test case was run, and the tester's comments, if any.
impact
    You document the potential impact of the incident on the users under the impacts section. This information also helps you to prioritize the bug fixes. To measure the impact of defects, you use a standardized impact rating scale. For example, you use a scale with categories such as Minor, Major, and Critical. The categories must be well-defined so that the impact rating is uniform and it doesn't depend on the tester who assigns the ratings.

From the elements you used in the incident report, the developer recognizes the root cause, the phase of the project in which the incident was identified, and the action that produced the incident. In addition, the incident report provides references to documents specifying the correct behavior.

The flow chart starts with Reported stage of the incident report life cycle. The Reported stage has two branches – if rejected, it reaches the Rejected stage. If accepted, it reaches the Opened stage. If approved, the report reaches the Assigned stage. If the project team declines it for repair, the report is Deferred. The assigned report then reaches the Fixed stage. It then reaches the Closed stage, or if not fixed, reaches the Reopened stage.

Description ends.

Reported
    When you log a test incident report, an incident is in the Reported stage. A peer tester or test manager reviews the incident report in this stage and decides if it should be opened or sent back for rewriting.

Rejected
    If the report is not reproducible or if the defect couldn't be justified, the peer tester or test manager marks the report as Rejected and returns it to the tester. The test manager demands more information such as the number of times the tester attempted to replicate the intermittent defect or the number of times the defect was noted.

Opened
    The incident report is in the Opened stage when it passes the initial review and the project team is still working on filtering the defects that they actually need to repair.

Deferred
    An incident is in a Deferred stage if the project team considers it as a defect and wants to decline the defect for repair at least temporarily.

Assigned
    An Assigned defect is the one that the project team approves for repair. Then a programmer begins fixing the defect.

Fixed
    After repairing the defect, the programmer sends the Fixed report back to the tester. The tester performs a confirmation testing based on this report.

Reopened
    In the event of a failure observed in a confirmation test or a problem being observed after an incident is closed, it must be Reopened and reassigned.

Closed
    The incident report is Closed when the tester confirms that the defects are fixed.

Suppose you are testing a multimedia player application developed for mobile phones. You notice that there is a problem playing .3gp files and that the volume level is very low when you play .mp3 files. You first create an incident report by recording the incidents, classifying them, and identifying the impact of each defect.

Your test manager validates the report and opens it for the project team to approve and assign the incidents to the development team.

Then the video developer goes through your description of the incident and attempts to identify and eliminate the cause of the failure while playing .3gp files. Similarly, the audio developer works on disposing of the incident responsible for a low volume.

Once the developers have fixed the defects, they mark the incidents as Fixed and send the updated incident report back to you.

You perform a confirmation test to make sure the application doesn't contain the reported incidents. Now suppose you find that while the defect in running .3gp files is solved, the volume level of .mp3 files is still low compared to that in files of other formats.

You reopen the incident in the incident report and send the report for fixing, if possible, with an additional description of the incident, so that the developer understands the incident better. Then the incident report once again goes through the same process of review and assignment.

The developer continues to work on fixing the defect. If improving the volume level of .mp3 files is not possible at this level, the incident is deferred until the end of the project. If the defect could be fixed, the developer updates the incident report and sends you the updated report. You once again perform a confirmation test, and on confirming the update, you close the incident report.

All the various stages in the testing process – from reporting to closing incidents, except Rejected, Deferred, and Closed – have a distinct owner who is responsible for moving the incident to the next stage. To maintain a smooth workflow, you need a defect-tracking system that can be customized to match your operational requirements.

You can use a defect-tracking tool that incorporates all the different stages to manage incidents. Many organizations develop their own defect-tracking tools and customize it to match their requirements. This helps them save time and effort required to detect and fix bugs.

The defect-tracking tool also enables testers to communicate with managers by providing information related to the number, severity, and status of bugs.

To ensure a smooth workflow and effective incident management, the major attributes your defect-tracking tool should include are

user-friendly interface
    Your defect-tracking tool should have a user-friendly interface, which doesn't tax the user by demanding excessive information. An ideal defect-tracking tool saves time required to generate an incident report.
customizable fields
    Customizable fields in a defect-tracking tool enable you to fulfil the requirements of your organization. You should be able to customize the fields in the tool and create categories your organization uses, for example Critical, Major, and Minor.
discrete data analysis
    With discrete data analysis features, a test manager can easily get the required data in the preferred format, for example a table or a chart. Discrete categories such as type, status, and distribution facilitate easy and quick data analysis.
dynamic incident log
    A dynamic incident log for each incident recorded in the report enables you to track the progress of the incident through the various stages of its life cycle.
organization-wide accessibility
    The defect-tracking tool should be accessible across the organization so that all the users are able to access it at any time. This reduces the amount of time spent waiting for someone with more access to move the incidents from a completed stage to the next stage.


Configuration Management in Software Testing
Configuration management
  - A software product is likely to go through many iterations during the course of its lifecycle 
  - Due to factors such as changed requirements, changes in functionality, and changes as a result of testing. 
  - In such cases, it becomes important to identify and record the configuration items 
    - Such as the operating system, networking elements, and the source code of the software.
  - You also need to ensure that changes in each item are properly recorded, reported, implemented, and verified throughout the project. This elaborate process is called Configuration Management.

A critical component of configuration management is the use of version control to manage configuration items as they go through iterations.

Version control requires you to assign a unique name, a version number, and other attributes to each configuration item. By mapping incidents against version-controlled configuration items, you can easily identify and trace incidents back to the test case during the actual testing.

It also avoids confusion during testing. For example, software is updated whenever a new incident is identified and fixed leading to multiple versions. If the item fixed is not version controlled and documentation is not updated, it is very likely that subsequent testing will continue on the older version of the software, and the same incident may be reported again.
Note

To avoid such confusions, you can follow the Institute of Electrical and Electronics Engineers (IEEE) template IEEE 829.

Configuration management involves two functions.
Library Management
    As part of the configuration management process, library management involves managing and documenting the changes made in the product, versioning the software, and maintaining baselines of the software for easy tracking. A configuration manager, who is in charge of this activity, may perform these tasks using commercial or in-house library management tools.

Change Control Board (CCB)
    The Change Control Board (CCB) analyzes the incidents reported during testing and decides how to handle them – whether to treat them as a critical or minor change, or as an enhancement that can be carried out in later releases. Typically, this board comprises of end users, testers, developers, and other stakeholders of the product, so that decisions on how to handle each incident are discussed and agreed upon from every perspective.

In addition to rating the impact and prioritizing incidents, the CCB is responsible for conflict resolution and release management. The CCB members meet at regular intervals to analyze incidents and enhancement requests. During analysis of the incident report, they may categorize the incident as a defect or as a change. Regardless of whether defects are being fixed or changes to requirements are being authorized, it is essential that configuration management practices are in place to ensure traceability.


Configuration management requires you to record, report, implement, and verify changes in each configuration item across project phases.

During testing you identify incidents and manage changes by mapping them against the correct version of the configuration item.

Configuration management includes the library management and Change Control Board (CCB) functions. Library management is an administrative function where changes and product versioning are managed. CCB, on the other hand, determines the severity and priority of each incident.

                    
