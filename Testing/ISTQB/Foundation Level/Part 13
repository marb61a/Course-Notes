                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 13
                    
                    
2.2 CTFL: Fundamentals (Cont)
  - You may see quality assurance referred to as testing.
    - However, quality assurance and testing are not the same thing
    - They are however related by a larger concept known as quality management.
  - Quality management is a discipline involving activities that are related to software quality
  - Quality assurance is typically focused on the alignment to proper processes
  - Quality assurance supports proper testing
  - A requirements definition error typically leads to a requirements defect
  - If a defect in the code is executed, it can cause a failure, but not necessarily in all circumstances. 
    - For example, some defects require specific inputs or they require conditions to trigger the failure. 
    - And these specific inputs or conditions may not exist. 
    - The result is that some failures may rarely or never actually be triggered.
  - Factors leading to errors include time constraints and pressure. 
    - These tend to cause the individual to make assumptions or to work quickly under pressure and this leads to errors. 
    - A lack of experience or skill is also a factor that leads to errors. - 
    Miscommunication between project participants, including miscommunication regarding the design or requirements
  - Other factors leading to errors include intrasystem or intersystem misinterpretation. 
    - And this is especially when intra and intersystem interactions occur in large numbers. 
  - The complexity of the code, the architecture and/or the design of the system is a factor that can lead to errors.
  - New or unfamiliar technologies that are being employed with the software product can lead to errors. 
  - Not all unexpected test results are failures. False positives or false positive failures can occur 
    -These are reported as defects, even though they're not really defects. 
    - False positive failures can be caused by errors in how the tests were executed as well as other factors 
    - False negative failures occur, and these are due to tests that don't detect errors but should have.
  - Defects may be analyzed when they're detected in order to locate the root cause. 
    - The root cause is the earliest action or condition that leads to the defect. 
  - Identifying and addressing the root cause is really important to software quality
    - If you don't address the root cause, it can continue to have an effect on that software.
    - By identifying and addressing the root cause, on the other hand, it serves to reduce similar defects in the future.
  - Root cause analysis focuses on and zeroes in on the most significant root cause of defects. 
    - The root cause analysis can lead to process improvements and help avoid future similar defects. 
  - So the defect originated in the product owner's misunderstanding of the sales tax calculation rules. 
  - Testing principle 1. Testing shows the presence of defects, not their absence. 
    - Testing may be able to show that there are defects in the software. 
    - But testing does not prove that there aren't defects in the software.
    - Testing reduces the likelihood of undiscovered defects that remain in the software,
    - Testing in and of itself is no guarantee of correctness even if no defects are found in the software. 
  - Testing principle 2, exhaustive testing is just not possible. 
    - That is, every potential combination of inputs and conditions can just not be tested. 
    - Exhaustive testing is impossible so we focus on risk analysis rather than testing everything. 
    - We use test techniques and priorities to prioritize those components of testing that need to actually be performed. 
  - Testing principle 3. Early testing saves time and money. 
    - In order to find defects as early as possible in the development life cycle, we use static and dynamic testing. 
    - This helps reduce or eliminate costly fixes that can occur late in the software development life cycle.
    - Early testing is also known as shift left.
  - Testing principle 4. Defects cluster together. 
    - That is, a small number of modules typically contain the most defects that are going to be discovered 
    - They are typically responsible for the majority of operational errors
    - Keep in mind that predicted defect clusters and the actual observed defect clusters that occur in testing 
  - Testing principle 5, beware the pesticide paradox. 
    - This means that when you apply the same tests over and over again, eventually they will no longer be effective. 
    - In other words, they will no longer find new defects. 
    - To detect new defects, recognizing the pesticide paradox, existing tests and test data may need to be changed. 
    - In addition, you may be required to design and devise new tests.
    - Some situations may actually benefit from the pesticide paradox, and that is automated regression testing. 
    - Automated regression testing benefits because there is a relatively low number of regression defects. 
  - Testing principle 6. Testing is performed differently in different contexts, so, testing is context dependent. 
    - So we perform testing and those activities differently under different contexts.
    - We use early testing in sequential life cycle model as well.
  - Testing Principle absence of errors is a fallacy. 
    - Consider this, some organizations contend that testers can run all possible tests against software. 
    - They also contend that it's possible to detect and find every possible defect but exhaustive testing is impossible.
    - It is a fallacy to assume the success of a system is assured. 
    - Simply by finding a large number of defects and by fixing a large number of defects. 
    - Just by finding and fixing them does not assure the success of the system
