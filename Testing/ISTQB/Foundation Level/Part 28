                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 28
                    
                    
Boundary Value Analysis in Software testing
  - Boundary value analysis is a black-box test technique that is often executed along with equivalence partitioning.
  - When implemented together, help you prepare stringent test cases that can uncover most defects in a software application.
  - In equivalence partitioning, you classify the input or the output values into equivalent partitions. 
    - These partitions include boundary values, which mark the beginning and the end of a partition. 
    - Boundaries are the input/output values found at the edge of an equivalence partition. 
    - Boundary values also include the smallest incremental values found at either side of these boundaries. 
    - Creating test cases for verifying these values is termed as boundary value analysis.
  - Boundary value analysis is commonly known as range checking and can be applied at all levels of testing.
  - Boundary value analysis is very important for any system whose values are divided into partitions 
    - This is because the system's function is most likely to change when these boundary values are hit.
  - So, you should specifically concentrate on the boundary values while implementing test suites.
  - While it is easy to identify two boundary values for each partition, 
    - Some practitioners of the boundary value analysis technique note that every boundary in a partition includes three boundary values. 
  - To identify multiple boundary values for both lower and upper boundaries
    - Identify the next precision value in the sequence of the partition. 
    - By identifying all the boundary values and executing test suites for them, you ensure that most errors in this zone are uncovered.
  - Boundary value analysis is applied to values such as numbers, text, dates, time, and currency. 
  - Among these, two values that benefit are
    - Integers
      - Boundary value analysis for integer values is simple and most effective. 
    - Real numbers
      - Applying boundary value analysis for real numbers is more complicated than integer value evaluation. 
      - Real numbers include floating-points
        - Due to which you should identify the smallest difference between the values that form the input sequence. 
        - This difference is termed as epsilon – ∑. 


Advanced Partitioning and Boundary Value Analysis
  - You use equivalence partitioning and boundary value analysis techniques when you want to perform rigorous and thorough testing.

If you perform only BVA, it means you've tested the boundary values for each partition and every boundary falls in some partition. However, if the test fails, you would not know whether the boundary values or the partitions failed. Also, you may miss out on checking some values in the partitions.

Because the values at the boundaries are extreme, it would not be appropriate to test only boundary values. You should use a combination of the techniques to create minimum, but efficient test cases.

Equivalence partitioning and boundary value analysis techniques can be used for all levels of testing. At component level, it is easier to create and test the partitions and boundaries. However, at system-level testing, it would be more complex. For example, if you are installing a software application, there are three installation types available – typical, custom, and advanced. Each of these types, along with its options, is a partition. You need to test each installation type along with all the options to adequately cover the application.

When creating test sets you should select test values from within the partitions but not the boundary values.

Consider a situation where you want 1000 photocopies of a document. For 500 to 1000 copies, you have to pay 8 cents and if you want less than 500 copies, you have to pay 10 cents. In this example, one of the valid partitions is 500 to 1000.

When performing boundary value analysis, you need four test values: 500, 501, 999, and 1000. Therefore, a separate equivalent partition value is not required as it would be redundant. However, you can replace the values 501 and 999 with one value from the equivalent partition: 750. This would prove more efficient because it covers the boundaries as well as the partition with the fewest possible test cases.
  
  
