                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 30
                    
                    
White-Box Software Testing Techniques
Statement Testing and Coverage in Software Testing
  - White-box techniques, also known as structural or structure-based techniques
  - They are based on an analysis of the structure of the component or system.
  - White-box techniques use information about how the software is constructed to derive the test cases
  - You can use structure-based testing techniques to measure test coverage. 
  - Test coverage is the extent to which a test suite exercises a specific test item.
  - Measuring test coverage helps you to quantitatively assess the extent of testing performed using a set of tests. 
    - For example, in any situation where you can quantify some aspect of software such as code
    - And can then quantify how much of that code was tested by some particular test
    - You can then assign a measure to the test coverage. 
    - If the actual test coverage is less than that required
      - You would need to design additional structural tests to reach the required level of coverage.
  - Test coverage therefore provides an objective measure and if applied to testing criteria based on priorities and risks
  - Tt may be applied as part of the completion or exit criteria defined in the test plan. 
  - Test coverage could then be used to determine when to stop testing in the final step of the test process.
  - Test coverage is measured as percentage of the coverage items. 
    - To measure the percentage of test coverage
      - Divide the number of coverage items exercised by the total number of coverage items and multiply the result by 100.
  - Depending on the number of system elements to be tested, you can measure coverage at various levels. They are
    - Component testing
      - In component testing, each unit of code, such as a module, object, or class is tested separately. 
      - For example, if the code contains five functions, each of them is tested independently. 
      - Unit testing is typically done by the developers themselves, and any bugs are fixed at that stage.
    - Integration testing
      - In integration testing, the integrated units of code are tested. 
      - You measure coverage of specific interactions between the units or modules in the code that have been tested. 
      - You can also measure the call coverage of modules, objects, or procedures. 
      - After the code is tested at the integration level, it is ready for acceptance testing.
    - System or acceptance testing
      - In system or acceptance testing, the code is tested as a whole. 
      - Coverage items include client requirements and user-interface elements, such as menu options. 
      - Coverage items could also include business transactions.
  - To effectively measure coverage, you can use testing tools. 
  - Using testing tools helps create test cases and improve productivity and test efficiency
    - This is by ensuring that most structural aspects are tested. To measure coverage, you
      - Determine the structural elements to be used
      - Count the structural elements
      - Instrument the code
      - Execute the tests for measuring coverage
      - Determine the percentage of elements exercised
  - When you instrument code, you add code next to each structural element, such as a For Each loop. 
  - In structure-based testing, you need to generate test cases from code
    - You need to be able to understand and analyze the code.
  - Pseudocode does not belong to any particular programming language. 
  - Rather, it is a simplified short-hand version of the source codde
    - It typically covers all the important control structures used in programming.
  - There are two types of pseudocode. They are
  - Nonexecutable
    - In software development, because certain lines of code don't perform an action
      - They are considered nonexecutable code statements. 
      - Nonexecutable code includes statements that declare variables. 
      - These statements are usually written at the beginning of a program and do not return results.
  - Executable
    - Executable code statements instruct the computer to take a specific action and return a result. 
  - Depending on the function you want the code to perform, you can structure executable code in different ways. They are
    - Sequence
      - When code statements are arranged in a sequence, they are executed in a linear fashion. 
      - This is a rather simple programming structure and doesn't involve decision points or iterations.
    - Selection
      - You use the selection method when you want to insert decision points in the code. 
      - In this method, you insert a condition in the code. 
      - If the condition is true, a specified set of steps is performed. Otherwise, a different set of steps is executed.
    - Iteration
      - If you want to repeat a step a specific number of times, you use the iteration method. 
      - In this method, you specify the number of times the action should be repeated before the program ends.
  - Lines of executable code in a program are called statements.

