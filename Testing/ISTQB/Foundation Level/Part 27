                    ISTQB Certified Tester Foundation Level
                    Course Notes Part 27


Perform Exploratory Testing Based on Experience
  - When we perform Exploratory Testing, we design, execute, log, and evaluate informal tests. 
  - We evaluate them dynamically during test execution. 
  - We can use the results to learn more about the system that we are testing and to create tests for areas that may need more testing. 
  - This form of testing is most useful when there's very little or maybe no specifications at all. 
  - Or even when there's significant time pressure on us testers to get it done.
  - We can also perform exploratory testing to complement other, more formal testing techniques. 
  - Sometimes, we conduct this Exploratory Testing using session-based testing. 
  - It adds structure to the activity. 
  - And with session-based testing, we conduct Exploratory Testing within a defined time box. 
  - And we use a test charter that contains the test objectives to guide the testing. 



Black-Box Software Testing Techniques
Equivalence Partitioning in Software Testing
Equivalence Partitioning
  - The software testing process is driven by a number of test design techniques. 
  - Black-box software testing, one of the specification-based testing techniques, is a form of dynamic testing.
  - Black-box testing derives test cases directly from the specifications of the software being tested 
  - It focuses on the behavior of the software and the efficiency of its performance. 
  - It does not focus on the structural details. 
  - A tester using black-box testing only checks the input and output of the software
    - Not how inputs and outputs are generated by the system.
  - There are five commonly used black-box test techniques.
  - Equivalence partitioning
    - Equivalence partitioning is a black-box technique where test conditions for software are divided into sets of logical groups 
      - These are called partitions if they exhibit similar behavior when processed. 
      - Each partition covers a specific aspect of the software. 
      - This type of testing does not require you to create test cases covering all test conditions from the partitions 
      - Only one condition from each partition is tested, as its behavior would be similar to that of the other conditions in the same partition.
  - Boundary value analysis
    - To assess the inputs at the edge or boundary of each equivalence partition, you use the boundary value analysis technique. 
    - This type of testing helps yield the most defects   
      - This is because the behavior of test inputs are more likely to be incorrect at the boundaries, where the partition changes 
  - Decision table testing
    - Decision tables help you validate system requirements that contain logical conditions
    - This type of testing is used to record complex business rules that a system needs to implement. 
    - In this technique, the specifications of the system are analyzed, and its conditions and actions are identified. 
    - The input conditions and actions for this analysis are then stated as either true or false (as boolean values) in a table format.
    - The strength of this testing technique is that it creates combinations of conditions that might not have otherwise been exercised during testing.
  - State transition technique
The state transition technique uses the state transition diagram to test a software application that modifies its response depending on its current conditions or previous history of its state. These state changes may be represented in a state transition diagram. This technique allows the tester to view the software in terms of its states, transitions between states, the inputs or events that trigger state changes, and the actions that may result from those transitions.

A state table shows the relationship between the states and inputs, and can highlight possible transitions that are invalid. Tests can be designed to cover these states as well as these transitions.

Use case testing
Testing based on use cases, which help you identify the different types of interactions between actors (users or systems), is use case testing. Because use cases describe process flows through a system based on its actual likely use, test cases derived from use cases are most useful in detecting defects in the process flow during the real-world use of the system. This type of technique helps in acceptance tests.

  
