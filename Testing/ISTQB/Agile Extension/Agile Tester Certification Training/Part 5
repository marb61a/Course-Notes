                    Agile Tester Certification Training
                    Course Notes Part 5


Continuous Integration
  - The Continuous Integration process is as follows
    - Check-in code
      - To a central server\repository etc
    - Fetch code changes
    - Build the changed system\codebase
    - Test the changed system\codebase
    - Notify on success or failure
  - There are some automated activities in the Continuous Integration process
    - Static code analysis, compilation, Unit testing
    - Code Deployment, Integration Testing, Reporting
  - The benefits of Continuous Integration
    - Any Integration issues or defects are detected early
    - There is frequent feedback to the development team about any issues with checked-in code
    - Automated regression testing can be done continuously
    - There is more time for testers to do exploratory testing
    - There is better testing coverage
    - It eliminates risk from the Big Bang approach to Integration
    - It reduces manual testing for repetitive tasks
    - Executable software is constantly available to the test team or demonstrating to customers
  - The risks and challenges of Continuous Integration
    - The identification and implementation of the best suited tool(s)
    - Defining Continuous Integration processes
    - getting the right people with the right CI skills
    - There maybe a tendency to perform less Integration testing
    - The team may become over reliant on Automated Unit testing

Iteration Planning
  - What is Iteration Planning
    - It is concerned with the planning for each project iteration or sprint
    - It defines the iteration backlog
    - It occurs prior to the start of each project iteration or sprint
  - Activities in Iteration Planning
    - The team selects the user story from the release backlog
    - The user story is elaborated so that everyone in the team understands the details
    - There should be clarification of story details with the product owner to remove any lingering doubts
    - There is an estimation of the user story
    - The user story is broken down into tasks and these are assigned to team members for implementation
  - Testers Involvement in Iteration Planning
    - Estimate the testing efforst for stories
    - They will participate in the detailed risk analysis of stories
    - Identify both functional and non-functional aspected that need to be tested
    - Identifiaction of the story tests
    - Planning the test automation strategy at various levels of testing

Release Planning
  - What is Release Planning
    - It is concerned with product release after a certain number of iterations
    - This happens a few months prior to project commencement
    - This is where the release backlog is defined
    - High-level estimates are performed
    - Any project or product risks are captured
  - Who is involved in release planning
    - The scrum master who facilitates the meeting
    - The product owner to represent the view of the product backlog
    - The development team
    - Stakeholders who can advise around release planning
  - Activities involved in release planning
    - All the required members and the Agile team get together
    - A product backlog is created
    - User stories are given priority for the release
    - An estimation of the high level effort is done
    - The testing approach and plan is defined
  - Testers Involvement in release planning
    - Estimating testing efforts
    - Planning for release testing
    - Contribute to quality risks
    - Define testable user stories
    


                   Section 4: Differences in Agile vs Traditional Development
Differences Between Testing Activities - Agile vs Traditional Development
  - https://insights.sei.cmu.edu/assets/content/F1%20-%20Traditional%20V%20Model.jpg
  - Testing activities in Agile methodology
    - The specification, design, development and testing are done in sprints
    - Testing is the responsibility of the whole team
    - The finished product after each iteration should meet the definition of done (DoD)
    - DoD's are defined for user story, test level, feature, iteration and release
    

Agile vs Non-Agile Development Approach Differences
  - Non-Agile has longer iterations
    - Business value is obtained late in the cycle
    - Most testing is done in later stages of the SDLC
    - Bug fixes are not necessarily done in upcoming development cycle
    - No pair programming concept
    - Product Quality lies with the testing team
    - Less emphasis on automation
    - Requirement changes are managed through change requests
  - Agile has shorter iterations
    - Each iteration has working code which offers business value
    - Development and testing is done in each iteration
    - Fix bug approach first
    - Pair programming approaches used
    - Quality is everyone's responsibility in the team
    - Emphasis on automation at all levels
    - Requirement changes are welcome

