                    The Ultimate XSS Training Course


Hacking Websites With CrossSite Scripting
  - XSS is the most popular way to attack a website
  - The course is for educational purposes only
  - XSS or Cross Site Scripting is a vulnerability in Web Apps
  - This allows for attackers to inject code into a web app
    - This can allow intruders to steal passwords etc
  - The ingredients for this particular recipe are
    - HTML tags, JavaScript Functions, Numbers and Strings
  - The first step in an XSS attack is to inject a script into a web page
  - In the example there is an input box
    - When there is something typed in it is then rendered on the page
  - Script Injection
    - Using the paragraph element <p></p>
    - Although this is simple if you can inject a script element you can control what happens in the browser
  - This is the point where JavaScript becomes involved
    - Javascript is like any other language but has some quirks, there are notes on JS at
      - https://github.com/marb61a/Course-Notes/tree/master/Development/Web Development/Javascript
    - JavaScript handles function calls like other languages
      - Example uses alert function call inside script tags -- <script>alert()</alert>
      - If the alert pops up this means that script injection was successful
  - Alerts are the most commonly used function by both attackers and researchers
  - The example showing how dangerous allowing scripts to be injected is by removing the html from the page
    - This is done by setting the innerhtml for the pager to an empty string
    - document.documentElement.innerHTML=''
  - An alert is a great tool for testing and is often all that is needed

XSS Attacks From HTML Attributes
  - Script tags may not work
  - HTML Attributes show many things eg where to find images
  - Using hover example and developer tools in the browser
    - 2 different attributes are class and title
    - Attributes are set using name="value"
      - This can be double or single quoted as well as not quoted as long as there are no space characters
      - This is so that the browser knows where things begin and end
    - All of this is important because an attacker can break out of an atribute using single or double quotes or spaces depending on how the attribute is set
  - The payload from the first lesson will not work unless there is a break out
    - "><script>alert()</alert>
    - This will work whether injecting into the content or attributes
  - Textareas are used to allow multiline input
  - Textareas handle content differently than other elements
  - A textarea will not allow entering the payload and executing
    - You will need to close the textarea element
      - </textarea><script>alert()</script>

XSS Attacks From URLs
  - Examining bad URL's for XSS purposes
  - Escaping HTML input will mean previous payloads do not work.
  - This section will continue to focus on HTML attributes
  - Some attributes are specifically designed for URL's
    - Hrefs and anchor tags take in URL's to create links -- <a href="{{url}}">Link</a>
    - Sources and Iframes take in URL's to embed webpages -- <iframe src="{{url}}"></iframe>
  - Using the previous payload will not work as it is being escaped which means that the HTML is not treated as code
    - The browser will instead treat this as ordinary text
  - Instead of injecting a script the URL will have to be directly attacked
  - Normally HTTPS and HTTP are the used schemes but this will not help in this case
    - Javascript schemes can be used in this case and can be used in many things
      - Redirects -- location = 'javascript:alert()'
      - Source attributes -- <iframe src=javascript:alert()></iframe> 
      - Embeded attributes -- <embed src=javascript:alert()></embed>  (firefox only)
      - Href attributes -- <a href=javascript:alert()>Link</a>
  - Third Party scripts can be dangerous to use
    - Even using trusted sources for scripts are not totally safe as breaches do happen
  - The data scheme -- data:text/html,<script>alert()</script>
    - This can also be sometimes encoded in Base64
    - Modern browsers have stopped XSS attacks from data schemes
      - Scripts ran from data schemes are not XSS as it is completely isolated and not ran in the context of the web page
      - Older browsers which may be used are vulnerable

XSS Filter Evasion
  - XSS filters look at values, they then decide on whether to remove, block or allow
    - This will be on the basis whether something seems dangerous
  - Using the Attribute Breakout With Escaping example
    - The URL will contain the value #beautiful
  - Inspecting the 3 hearts element on the page
    - This is a h1 class called title beautiful
  - Clicking the toggle theme button will change the hearts and the URL
    - The URL will now contain #disgusting and the h1 class is now called title disgusting
  - URLs can be cntrolled as well as inputs
    - A part of a URL can be changed and the link then sent to a potential victim
    - Add a payload to a URL with breakout -- https://url"><script>alert()</script>
    - This will break the example page and will need to be inspected
    - In the h1 element the class attribute has not been broken out of
    - The inspector will always show attributes in double quotes even when that is not the case
    - Use a single quote instead of the double quote to see if that will breakout
    - There is another issue which is the less than and greater than characters are being escaped
      - The word script is also being filtered and replaced
    - Scripts may be impossible to use so maybe href=javascript:alert() or src=javascript:alert() instead
      - This may seem like it will work but will not as h1 elements will not pull content from a different webpage
    - You will instead need to use Event Handlers
    - Events are the actions that take place within the browser suck as clicks or keypresses
    - Event Handlers are a way to run JS code when these events happen
      - They can be sent using HTML attributes
    - The attribute name is simply the word on follwed by the event name eg onclick
      - Its value is the JS code that you wish to run
    - Change the previous alert example to use an event handler
      - https://url'onclick='alert()
    - Simply adding the event handler in this case will not work, you will need to add either a beautiful or disgusting
      - This will come before the single quote
      - This attack requires user interaction on the page
    - XSS attacker usually want their code to execute as quickly as possible

XSS Filter Evasion (Cont)
  - Creativity and persistence will be needed in some cases
    - What would happen if each instance of javascript: or alert() was filtered
  - Using the JavaScript URLs with Filtering example
    - This will filter out the javascript:alert()
  - You may be able to get past some of the filtering by changing character cases
    - Other things to try include adding tabs and spaces
    - There will be a lot of examples online
  - Custom filtering is not going to save a site from attack

How To Use Event Handlers For XSS Exploits
  - Fine-tuning event handlers for exploits
  - In order to understand XSS you must understand exploit techniques
  - You should understand how attackers are going to attack your applications
  - There are 2 qualities that must be met for an exploit to be high quality
    - It must execute quickly
    - The attack must remain undetected
  - Using event handlers properly in exploits will require a higher level of skill
  - Using the Exploit With Event Handlers example
  - There is a small "share this page" link at the end of the page
    - Using the dev tools inspector shows a data-url attribute currently set to its present URL
    - Adding a payload to the url is the vulnerability
      - url#"onclick="alert() - each time that the element is click will cause the alert to popup
      - onclick may not be the best choice, onmouseover may be a better option along with some CSS styling
      - CSS styles can be used in tags with the style attribute
  - Continuing the above example using the mouseover with styles combination instead
    - url#"onmouseover=alert() style=position:fixed;top:0;left:0;width:100%25;height:100%25;
      - Elements are usually positioned where they appear in the html but can be changed in this case using the position attribute
      - This will position the element at the top of the page and beginning
      - Some characters will need to be URLEncoded
        - This is done by taking the % character and adding the Hex value eg % becomes %25
      - Semi colons can be left at this juncture as it is in the URL hash rather than as a query parameter
      - With all the options added to the URL the element covers the whole page
      - This will run very quickly
    - url#"onmouseover=alert() style=position:fixed;top:0;left:0;width:100%25;height:100%25;color:transparent;
      - The next goal is to make the element unseen, this is done using the color attribute and the value transparent
  - At this stage the HTML needs to be cleaned as it contains exploit code
    - The onmouseover and style attributes need to be removed
    - This can be done in an event handler eg before an alert add code that deletes itself
    - In JS the word this can be used to refer to the same element
      - url#"onmouseover=this.removeAttribute('onmouseover')alert() style=position:fixed;top:0;left:0;width:100%25;height:100%25;color:transparent;
    - Like CSS, JS expressions can be separated by semi-colons
      - url#"onmouseover=this.removeAttribute('onmouseover');
          this.removeAttribute('style')alert() style=position:fixed;top:0;left:0;width:100%25;height:100%25;color:transparent;
  - The attack runs once and then is removed by itself
  - Using the XSS with progress events example
    - Script tags will be stripped out
    - This example needs immediate execution and onmouseover needs user interaction so is not suitable
    - JavaScript URL's and progress events will be the way as they give perfect immediate execution
    - Progress events in JS are things such as load, timeout, progress etc
    - An example of progress events with immediate execution are IFrame elements with JS URL's
      - <iframe src=javascript:alert()></iframe>
    - JavaScript URL's will not work with every element that uses source attributes such as images
      - You should still be able to use progress events to get code to run
  - A common payload is to use an image attibute with an invalid source and then use the onerror event handler
    - <img src=x onerror=alert()>
  - There is still the issue of hiding the attack
    - Using CSS values to hide elements only partially solves the problem
    - There is still the code inside the HTML on the page
      - The element needs to be destroyed, this can be done using element.remove()
        - <img src=x onerror=this.remove();alert()>
  - Automatically destroyed payloads are very difficult to find

XSS Attacks Inside JavaScript
  - Injecting into HTML is not the only place that XSS can occur
    - Sometime JavaScript code can also be vulnerable
  - Attacking through JavaScript requires proper syntax
    - JavaScript is much less forgiving than HTML so ensure syntax is correct to avoid issues
  - JS Strings are the most likely place to find XSS vulnerabilities
    - Single and double quotes can be used to create Strings as can back ticks `` 
    - Back ticks can contain code inside them, these are called template literals
      - The code iside is marked using a dollar and brackets eg `fasfsd ${Code} swg`
    - You may not need to break out of a template literal to inject code
      - You may just have to use ${}
  - One method of breaking out properly is to surround your payload with the proper quotes or ticks
    - Then add  + or - characters between the original string, the payload and the final string just created
  - Strings are often assigned to variables in JS but that is not always the case
    - There are 3 other areas where you might find strings
      - Function arguments, there can be multiple comma separated arguments passed in including strings
      - Array elements which can also be vulnerable strings
      - Objects names and values eg {name: value}
        - You can have vulnerable strings in names but it is more common to find them in values
  - You can use the console to enter vulnerable JS code
    - 
  - Polyglots The Ultimate XSS Payloads
  -

How To Create Real XSS Exploits To Attack Websites
  -

How To Fix XSS Vulnerabilities In Code
  -

How To Allow Safe HTML Injection
  -

How To Prevent XSS With Code Reviews
  -

Automatic XSS Prevention
  -

Exploiting Web Pages That Have A CSP
  -
