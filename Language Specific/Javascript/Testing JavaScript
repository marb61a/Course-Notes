                    Testing JavaScript
                    Course Notes


1 - Throw an Error with a Simple Test in JavaScript
Example Syntax
  // There is a bug in the sum function
  const sum = (a, b) => a - b
  
  const subtract = (a, b) => a - b
  
  // An automated test to ensure that the bug in sum never gets through
  // This is code that throws an error when there are unexpected occurences
  const result = (3, 7);
  const expected = 10;
  
  if(result !== expected) {
    throw new Error(`${result} is not equal to ${expected}`)
  }
  
2 - Abstract Test Assertions into a JavaScript Assertion Library

3 - Encapsulate and Isolate Tests by building a JavaScript Testing Framework

4 - Support Async Tests with JavaScripts Promises through async await

5 - Provide Testing Helper Functions as Globals in JavaScript

6 - Verify Custom JavaScript Tests with Jest

7 - Lint JavaScript by configuring and running ESLint

8 - Install and run Prettier

9 - Configure Prettier
Урок 10. Use eslint-config-prettier to disable unnecessary ESLint stylistic rules
Урок 11. Validate all files are formatted when linting
Урок 12. Install, run and configure Flow
Урок 13. Run the validate script in a pre-commit git hook with husky
Урок 14. Auto-format all files and validate relevant files in a precommit script with lint-staged
Урок 15. Override Object Properties to Mock with Monkey-patching in JavaScript
Урок 16. Ensure Functions are Called Correctly with JavaScript Mocks
Урок 17. Restore the Original Implementation of a Mocked JavaScript Function with jest.spyOn
Урок 18. Mock a JavaScript module in a test
Урок 19. Make a shared JavaScript mock module
Урок 20. Install and run Jest
Урок 21. Transpile Modules with Babel in Jest Tests
Урок 22. Configure Jest’s test environment for testing node or browser code
Урок 23. Support importing CSS files with Jest’s moduleNameMapper
Урок 24. Support using webpack CSS modules with Jest
Урок 25. Generate a Serializable Value with Jest Snapshots
Урок 26. Test an Emotion Styled UI with Custom Jest Snapshot Serializers
Урок 27. Handle Dynamic Imports using Babel with Jest
Урок 28. Setup an afterEach Test Hook for all tests with Jest setupTestFrameworkScriptFile
Урок 29. Support custom module resolution with Jest moduleDirectories
Урок 30. Support a test utilities file with Jest moduleDirectories
Урок 31. Step through Code in Jest using the Node.js Debugger and Chrome DevTools
Урок 32. Configure Jest to report code coverage on project files
Урок 33. Analyze Jest Code Coverage Reports
Урок 34. Set a code coverage threshold in Jest to maintain code coverage levels
Урок 35. Report Jest Test Coverage to Codecov through TavisCI
Урок 36. Use Jest Watch Mode to speed up development
Урок 37. Run Jest Watch Mode by default locally with is-ci-cli
Урок 38. Filter which Tests are Run with Typeahead Support in Jest Watch Mode
Урок 39. Run tests with a different configuration using Jest’s --config flag and testMatch option
Урок 40. Support Running Multiple Configurations with Jest’s Projects Feature
Урок 41. Test specific projects in Jest Watch Mode with jest-watch-select-projects
Урок 42. Run ESLint with Jest using jest-runner-eslint
Урок 43. Run only relevant Jest tests on git commit to avoid breakages
Урок 44. Install and run Cypress
Урок 45. Write the first Cypress Test
Урок 46. Configure Cypress in cypress.json
Урок 47. Installing cypress-testing-library
Урок 48. Scripting Cypress for local development and Continuous Integration
Урок 49. Debug a test with Cypress
Урок 50. Use Cypress to test user registration
Урок 51. Cypress Driven Development
Урок 52. Simulate HTTP Errors in Cypress Tests
Урок 53. Test user login with Cypress
Урок 54. Create a user with cy.request from Cypress
Урок 55. eep tests isolated and focused with custom Cypress commands
Урок 56. Use custom Cypress command for reusable assertions
Урок 57. Run tests as an authenticated user with Cypress
Урок 58. Use cy.request from Cypress to authenticate as a new user
Урок 59. Use a custom Cypress command to login as a user
Урок 60. Combine custom Cypress commands into a single custom command
Урок 61. Install React DevTools with Cypress
Урок 62. Render a React component for testing
Урок 63. Use jest-dom for improved assertions
Урок 64. Use dom-testing-library to write more maintainable React tests
Урок 65. Use react-testing-library to render and test React Components
Урок 66. Avoid Memory leaks using react-testing-library’s cleanup function
Урок 67. Debug the DOM state during tests using react-testing-library’s debug function
Урок 68. Test React Component Event Handlers with fireEvent from react-testing-library
Урок 69. Assert rendered text with react-testing-library
Урок 70. Test prop updates with react-testing-library
Урок 71. Assert that something is NOT rendered with react-testing-library
Урок 72. Test accessibility of rendered React Components with jest-axe
Урок 73. Mock HTTP Requests with jest.mock in React Component Tests
Урок 74. Mock HTTP Requests with Dependency Injection in React Component Tests
Урок 75. Mock react-transition-group in React Component Tests with jest.mock
Урок 76. Test componentDidCatch handler error boundaries with react-testing-library
Урок 77. Test drive the development of a React Form with react-testing-library
Урок 78. Test drive the submission of a React Form with react-testing-library
Урок 79. Test drive the API call of a React Form with react-testing-library
Урок 80. Test drive mocking react-router’s Redirect component on a form submission
Урок 81. Test drive assertions with dates in React
Урок 82. Use generated data in tests with tests-data-bot to improve test maintainability
Урок 83. Test drive error state with react-testing-library
Урок 84. Write a custom render function to share code between tests and simplify tests
Урок 85. Test React components that use the react-router Router Provider with createMemoryHistory
Урок 86. Initialize the `history` object with a bad entry to test the react-router no-match route
Урок 87. Create a custom render function to simplify tests of react-router components
Урок 88. Test a redux connected React Component
Урок 89. Test a redux connected React Component with initialized state
Урок 90. Create a custom render function to simplify tests of redux components
Урок 91. Test a render prop component using a Jest mock function
Урок 92. Test React portals with react-testing-library
Урок 93. Test Unmounting a React Component with react-testing-library
Урок 94. Use dom-testing-library with React
Урок 95. Use dom-testing-library with Preact
Урок 96. Use dom-testing-library with jQuery
Урок 97. Use dom-testing-library with Dojo
Урок 98. Use dom-testing-library with HyperApp
Урок 99. Use dom-testing-library with AngularJS
Урок 100. Use dom-testing-library with Angular
Урок 101. Use dom-testing-library with VueJS
Урок 102. Use dom-testing-library with Mithril
Урок 103. Use dom-testing-library with Svelte
Урок 104. Use dom-testing-library with from-html
