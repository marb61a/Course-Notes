                    JavaScript: The Hard Parts of Object Oriented JavaScript
                    Course Notes


                    Section 1 - Introduction
1 - Course Introduction
Introduction to the course and the author
There are 5 capabilities that the instructors teaching company looks for in students
  - Analytical problem solving with code
  - Technical Communication (can a solution be implemented just from an explanation)
  - Engineering best practices such as Debugging, Use of documentation
  - Empathic and thoughtful commmunication (non-technical)
  - Language and Computer science experience
  - The top 2 are the most important
    - The course is aimed at developing these 5 factors

2 - Object Oriented Paradigm
OOP is still a huge part of software development
  - The course will cover different ways of using sub-classes
  - It makes it easier to add functionality and features to software
  - It is easier to reason about for developers
  - It is efficient(performant) in terms of memory
  - Code does need to be properly organised as it gets more complex



                    Section 2 - Object Creation
1 - Creating an Object
Example
  - Building a quiz game with users
  - Example user data 
    name: Phil    score: 4
    name: Julia   score: 5
  - The ability to increase score is the functionality needed
  - What is the best way to store this data & functionality
    - This would be in an object because an object would allow for data and functionality to be bundled up together
 Example Syntax
  // This is the principle of encapsulation
  // JS is not strict about it's implementation
  const user1 = {
    name: "Phil",
    score: 4,
    increment: function() {
      user1.score++
    }
  };
  
  // In reality there would be much more functionality
  // Decrease score, Delete user, Login User etc
  user1.increment();

2 - Object dot Notations
An alternative object creation
  // Using dot notation
  // You can assign properties to an object
  const user2 = {};     // Object literal
  
  user2.name = "Julia";
  user2.score = 5;
  user2.increment = function() {
    user2.score++;
  }

3 - Object.create
Another way to create which gives fine grained control over what the object will have access to
Example Syntax
  // Using the Object.create method
  // Using .create, on the left side will always create an empty object
  const user3 = Object.create(null); 
  
  user3.name = "Eva";
  user3.score = 9;
  user3.increment = function() {
    user3.score++;
  }

4 - Creating Objects with Functions
Example Syntax
  // Creating an object using a function
  // This is an easy approach to reason about but can have issues adding features
  // There will also be issues with performance 
  function userCreator(name, score) {
    const newUser = {};
    newUser.name = name;
    newUser.score = score;
    newUser.increment = function() {
      newUser.score++;
    }
    
    return newUser;
  }
  
  const user1 = userCreator("Phil", 4);
  const user1 = userCreator("Julia", 5);
  user1.increment();



                    Section 3 - Prototype & new
1 - Avoid Duplication with Prototype
Using the prototype chain
Example Syntax
  // Creating a user using the Prototype chain
  const functionStore = {
    increment: function(){
      this.score++;
    },
    login: function(){
      console.log("You are logged in");
    }
  }
  
  const user1 = {
    name: "Phil",
    score: 4
  };
  
  // The challenge is to link user1 and the function store so that the JS interpreter
  // will check the functionStore where it will find an increment property 
  user1.name                      // name is a property of the user1 object
  user1.increment                 // This is not a property of the object so will cause an error

Example Syntax
  We need a full solution connecting things together
  Will be used in the next example and a full walkthrough

2 - Prototype Walkthrough
Example Syntax
  // Using the full solution2 from the previous section
  // This will also explain how the new keyword works under the hood in JS
  // Avoid looking in function bodies until they are invoked!!!
  function userCreator(name, score) {
    const newUser = Object.create(userFunctionStore);
    newUser.name = name;
    newUser.score = score;
    return newUser;
  }
  
  const userFunctionStore = {
    increment: function(){
      this.score++;
    },
    login: function(){
      console.log("You are logged in");
    }
  }
  
  const user1 = userCreator(name: "Phil", score: 4);
  const user2 = userCreator(name: "Julia", score: 5);
  user1.increment();
  
3 - Prototype Chain
Reusing the previous example code
  - There is no increment property on the user
  - The user exists in the global space
  - There are hidden properties on objects that give them additional features
  - In the dev tools you will see __proto
  - When a method is not found on the object is checks the __proto 
  - This is called the prototypal nature of JS

4 - new & this Keywords
Example Syntax
  // new is the keyword that automates a lot of hard work
  // There is no need to create or return as it is done automatically
  // In order to refer to the autocreated object we use the "this" keyword
  // This leads to a problem as we need to know where to put single copies of the functions

5 - Functions are Objects & Functions
This is a quick interlude to demostrate how JS thinks about functions
  - In JS all functions have a default property on their object version
  - This is prototype which in itself is an object
  - In the example it replaces the functionStore object
  - As soon as a function is declared it is a "function-object combo"
  - There are no functions alone
Example Syntax
  function multiplyBy2 (num){
    return num * 2
  }
  
  multiplyBy2.stored = 5;
  multiplyBy2(3)              // 6
  
  multiplyBy2.stored          // 5
  multiplyBy2.prototype       // {}
  
6 - new Keyword & Share Functions with prototype
Example Syntax
  // The further into the course we get the more standard the approaches are
  // This was done to help understand why these approaches are used and 
  // also to help when debugging issues that arrive
  // This is a regular function despite the capital letter
  function UserCreator(name, score) {
    this.name = name;
    this.score = score;
  }
  
  userCreator.prototype.increment = function(){
    this.score++;
  }
  
  userCreator.prototype.login = function(){
    console.log("You are logged in");
  }
  
  const user1 = userCreator(name: "Eva", score: 9);

  user1.increment();
  

7 - Review of new
A brief run through of what has been covered in the section



                    Section 4 - Scope & this
1 - Calling Prototype Methods

2 - this Keyword Scoping Issues

3 - Solving Scope with Arrow Functions

4 - ES6 class Keyword

5 - Recap of the class Keyword



                    Section 5 - Default Prototype Chain
1 - Objects default __proto__

2 - Function.prototype and Array.prototype

3 - Pair Programming OOJS



                    Section 6 - Subclassing with Factory Functions
1 - Intro to Subclassing and Inheritance

2 - Create object with Factory Function

3 - Create a Sub-Factory Function

4 - Creating an object with a Sub-Factory Function

5 - Prototype Lookup

6 - Subclass Review

7 - Call and Apply



                    Section 7 - Subclassing with new and call
1 - Create an Object with new

2 - Creating a Subclass with a Constructor

3 - Using a call Method in a Constructor

4 - Assigning Properties to Instance

5 - Prototype Tracing



                    Section 8 - Subclassing with class, extends & super
1 - Create an Object with a class

2 - Creating a Subclass with extends

3 - Creating an object with a subclass

4 - Using super in a subclass constructor



                    Section 9 - Conclusion
1 - Wrapping Up
