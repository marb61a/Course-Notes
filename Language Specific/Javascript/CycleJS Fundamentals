                    Cycle.JS Fundamentals
                    Course Notes
                    
                    
1 - The Cycle.js Principle Separating Logic From Effects
Cycle.js is based on RxJs and the virtual DOM
The cycle.js website is located at the following website
  - https://cycle.js.org
The course will involve building a smaller version of Cycle.js
Example Syntax
  // You need to add RxJs
  // Html File
  <!DOCTYPE html>
  <html>
    <head>
      <script>"Path to RxJs"</script>
      <meta charset="utf-8">
      <title>JS Bin</title>
    </head>
    <body>
      <div id="app"></div>
    </body>
  </html>
  
  // JS file
  // The goal of the JS is to build on the DOM a timer which says seconds elasped and counts
  Rx.Observable.timer(0, 1000)              // Will return 1 -- 2 -- 3 --4 up to 1000;
    // mapped to a string  
    .map(i => `Seconds Elapsed ${i}`)
    // This now needs to be put on the DOM
    .subscribe(text => {
      const container = document.querySelector('#app');
      container.textContent = text;
    })
The guiding principle from Cycle.js is to separate logic from effects
  - The subscribe block is effects as effects change the external world
  - console.log and network requests are examples of effects
  - In the above example Cycle.js would like to push the subscribe far from the other parts of the example

2 - Main Function And Effects Functions
Example Syntax
  // The logic part
  function main(){
    Rx.Observable.timer(0, 1000) 
      .map(i => `Seconds Elapsed ${i}`)
  }
  
  // Effects (This is imperative)
  function DOMEffects(text$){
    text$.subscribe(text => {
      const container = document.querySelector('#app');
      container.textContent = text;
    })
  }

3 - Customizing effects From the Main Function

4 - Introducing Run And Driver Functions

5 - Read Events From The DOM Click Events

6 - Generalizing Run Function For More Types Of Sources

7 - Making Our Toy DOM Driver More Flexible

8 - Fine Grained Control Over The DOM Source

9 - Hyperscript As Our Alternative To Template Languages

10 - From Toy DOM Driver To Real DOM Driver

11 - Hello World In Cycle.js

12 - An Interactive Counter In Cycle.js

13 - Using The Http Driver

14 - Body Mass Index Indicator Built In Cycle.js

15 - Model View Intent Pattern For Separation Of Concerns

16 - Our First Component a Labeled Slider

17 - Using The Component In The Main Function

18 - Multiple Independent Instances Of A Component

19 - Isolating Component Instances

20 - Exporting Values From The Component Through Sink

21 - Overview Of Cycle.js
