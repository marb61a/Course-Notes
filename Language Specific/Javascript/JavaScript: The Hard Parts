                    JavaScript: The Hard Parts
                    Course Notes


                    Section 1 - Introduction
1 - Introduction
Introduction to the course and the author
There are 5 capabilities that the instructors teaching company looks for in students
  - Analytical problem solving with code
  - Technical Communication (can a solution be implemented just from an explanation)
  - Engineering best practices such as Debugging, Use of documentation
  - Empathic and thoughtful commmunication (non-technical)
  - Language and Computer science experience
  - The top 2 are the most important
    - The course is aimed at developing these 5 factors



                    Section 2 - Principles of JavaScript
1 - Global Execution Context
In the course there is a set of principles
  - This will allow for both problem solving and communicating any scenario in JS
  - Start at the essentials to get up to a shared level of understanding
  - This will help when more difficult times arise
Example Syntax
  // What happens when JavaScript runs the code
  // When is was just an interpreted language it processed line by line
  // JavaScript now uses Just In Time (JIT) compilation in Chrome runtime
  const num = 3;
  
  // This function is never called and thus cannot be initialised
  // Thread execution will ever enter a function if it is not called
  function multiplyBy2 (inputNumber){
    const result = inputNumber*2;
    return result;
  }
  
  const name = "Martin"
 
As soon as code starts running it creates a global execution context which has
  - Thread of execution is the parsing and running of code line after line
  - Live memory of variables with data know as the Global Variable Environment

The thread in JavaScript
  - Single threaded (one item at a time)
  - Synchronous Execution (for the moment)

2 - Local Execution Context
Running / calling / invoking a function
  - This is not the same as defining a function
When you execute a function you create a new execution context comprising
  - The thread of execution from the line by line execution of function code
  - A local memory location where anything defined in the function is stored
Example Syntax
  const num = 3;
  
  function multiplyBy2(inputNumber) {
    const result = inputNumber * 2;
    return result;
  }
  
  const output = multiplyBy2(4);
  const newOutput = multiplyBy2(10);
  
3 - Call Stack
We keep track of the functions being called in JavaScript with a Call stack
  - This is a special data structure
  - It uses LIFO (Last In First Out)
  - It tracks which execution context we are in
  - Tnere is one global execution context but multiple function contexts

4 - Q&A: Global Memory and Call Stack

5 - Principles Review



                    Section 3 - Functional Programming
1 - Pure Functions
Functional Programming is a paradigm of structuring and writing code
  - This provides a means of sacling code and add features
There are several core features of Functional Programming

2 - High Order Functions



                    Section 4 - Callbacks and Higher Order Functions
1 - Setting Up Pair Programming

2 - Introducing Pair Programming

3 - Callbacks and Higher-Order Functions Exercises

4 - Paramaterizing Functions

5 - Q&A: Const and Let

6 - Generalizing Functions

7 - Reviewing Generalizing Function

8 - Deconstructing Generalize Function

9 - Q&A: Passing Functions

10 - First-Class Objects

11 - Callback vs Higher-order Functions



                    Section 5 - Closure
1 - Introducing Closure

2 - Deconstructing Example

3 - Q&A and Pair Programming

4 - Closure Exercise, Part 1

5 - Closure Exercise, Part 2

6 - Closure Exercise, Part 3

7 - Q&A: Lexical Scope

8 - Q&A: Garbage Collection

9 - Closure Exercise, Part 4

10 - Q&A: Shared References

11 - Power of Closure



                    Section 6 - Asynchronous JavaScript
Part 2 of the course covers Asynchronous JavaScript
  - https://github.com/marb61a/Course-Notes/blob/master/Language Specific/Javascript/JavaScript: The New Hard Parts

1 - Introducing Asynchronous JavaScript

2 - Browser API

3 - Browser API Q&A

4 - Resetting Pair Programming

5 - Browser API Q&A, Part 2

6 - Callback Queue

7 - Callback Queue & Event Loop

8 - Asynchronous Q&A and Pair Programming

9 - Introducing More Browser APIs

10 - XMLHttpRequest

11 - XMLHttpRequest Q&A

12 - XMLHttpRequest Correction



                    Section 7 - Object-Oriented JavaScript
1 - Introducing Object-Oriented JavaScript

2 - OOP Exercise, Part 1

3 - OOP Exercise, Part 2

4 - OOP Exercise, Part 3

5 - OOP Exercise Q&A and Pair Programming

6 - __proto__

7 - OOP Exercise, Part 4

8 - __proto__ Q&A and Pair Programming, Part 2

9 - new operator

10 - new operator Q&A

11 - Object.prototype

12 - OOP Exercise, Part 5

13 - Object.prototype Q&A

14 - Class Syntactic Sugar

15 - OOP Exercise, Part 6

16 - Class Syntactic Sugar Q&A



                    Section 8 - Wrapping Up
1 - Wrapping Up "JavaScript: The Hard Parts"

