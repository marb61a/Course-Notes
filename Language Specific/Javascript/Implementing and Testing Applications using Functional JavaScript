                    Implementing And Testing Applications Using Functional JavaScript
                    Course Notes
                    

                    Section 1 - BRIDGING FUNCTIONAL PROGRAMMING THEORY AND PRACTICE
1 - The Course Overview
Quick welcome to the course
Brief introduction to the author 
Very quick run through of the course syllabus
The goals of the course are
  - To connect theory with practice
  - To learn advanced functional programming techniques
  - Get hands on functional application development experience

2 - Functors In JavaScript
Looking at Function Composition, Category Theory and Functors
Example Syntax
  // compose (f, g)(x) = f(g(x))
  compose = (f, g) => x => f(g(x))
  
  const double = x => 2*x;
  const plusone = x => x + 1;
  
  compose(double, plusone)(5)                       // This is evaluated to 12
  double( plusone(5))                               // This is evaluated to 12

A category is 
  - A set of Javascript values
  - Example -- Booleans (False, True)
  - A set of functions (morphisms) defined on these values
Categories have properties
  - Indentity transformation
    - const identity = x => x;
  - Associativity
    - compose(compose(f, g), h = compose(f, compose(g, h)));
Example Syntax
  // Demonstrating Associativity
  const compose = (f1, f2) => x => f1(f2(x));
  // These are homomorphic operations which map return values in the same category
  const double = x => x*2;
  const plusone = x => x + 1;
  // If you interpret a set of all possible numbers and all possible strings then toString is a morphism
  // between 2 categories and so toString is a polymorphic operation
  const toString = x => `Result: ${x}`;
  
  compose(compose(toString, double), plusone)(5)      // Returns "Result: 12"
  compose(toString, compose(double, plusone))(5)      // Returns "Result: 12"

3 - Monads



                    Section 2 - ASYNCHRONOUS CODE AND PROMISES IN DEPTH
1 - Escaping the Pyramid of Doom

2 - ES6 Promises and Functional Programming

3 - Asynchronous Functional Programming with ES6 Generator Functions

4 - Functional Programming with Async-Await



                    Section 3 - LAZY EVALUATION
1 - What Is Lazy Evaluation?

2 - Using ES6 Generator Functions for Evaluating Lazy Sequences



                    Section 4 - IMPLEMENTING A WEB APPLICATION USING FUNCTIONAL PROGRAMMING
1 - Introduction

2 - Weather App

3 - Application Setup

4 - Bottom-Up Design Using Test Driven Development

5 - Bottom-Up Design and TDD (Continued) â€“Parsing the Response

6 - Handling Timezones

7 - Getting Weather Data with Promises and Async-Await

8 - Rendering the Weather App

9 - Course Summary and Next Steps
