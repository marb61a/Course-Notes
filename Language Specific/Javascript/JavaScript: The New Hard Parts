                    JavaScript: The New Hard Parts
                    Course Notes 


                    Section 1 - Introduction
1 - Introduction
The course is expected to be very demanding
  - Students will need to be explain their code clearly
Brief introduction to the instructor
Being a great engineer means the ability to build quality products
The material is asked by a lot of interviewers
Students background is agnostic so CS degree is not necessary
Candidates should meets 5 criteria
  - Analytical problem solving with code
  - Technical Communication
  - Engineering best practices and approach
  - Non-technical communication
  - Language and computer science experience
The 5th and final criteria is often the least important
  - It's important not to just know the latest framework
  - Understanding of language specific syntax will evolve

2 - JavaScript Code Execution
Running / calling / invoking a function
  - This is not the same as defining a function
When you execute a function you create a new execution context comprising
  - The thread of execution from the line by line execution of function code
  - A local memory location where anything defined in the function is stored
Example Syntax
  const num = 3;
  
  function multiplyBy2(inputNumber) {
    const result = inputNumber * 2;
    return result;
  }
  
  const output = multiplyBy2(4);
  const newOutput = multiplyBy2(10);


                    Section 2 - Asynchronous JavaScript
1 - Introducing Asynchronicity
Asynchronicity is the backbone of modern web development in JavaScript
JavaScript is single threaded
  - This means that one command at a time executes
  - It also has a synchronous execution model which means that each line is executed in the order it appears
  - What if there are times needed to execute certain pieces of code
  - There may be a need to wait on something to complete before running new code
  - This causes a conundrum between delaying code execution and avoiding thread blocking
Example Syntax
  // Solution 1
  function display(data){
    console.log(data)
  }
  
  const dataFromAPI = fetchAndWait('https://twitter.com/will/tweets/1')
  
  // The user can do NOTHING here !
  
  display(dataFromAPI)
  console.log(“Me later!”);

2 - Asynchronous Web Browser APIs
There has to be awhole new range of features used in Asynchronous coding
  - These are from outside the JS engine itself
  

3 - Asynchronous Web Browser APIs Q&A

4 - Calling the Outside World

5 - Calling the Outside World Q&A

6 - Wrapping Up Web Browser APIs

7 - Asynchronous Exercises



                    Section 3 - Promises
1 - Introducing Promises

2 - Promises

3 - Promises Q&A

4 - Promises & Microtask Queue

5 - Microtask Queue Q&A

6 - Wrapping Up Promises



                    Section 4 - Iterators
1 - Return Function Inside a Function

2 - Return Next Element with a Function

3 - Iterator Function

4 - Iterators Exercise



                    Section 5 - Generators
1 - Generators

2 - Generator Functions with Dynamic Data

3 - Generators Q&A

4 - Introducing Async Generators

5 - Async Generators

6 - Async Generators Q&A



                    Section 6 - Final
1 - Async Await

2 - Wrapping Up
Some final thoughts from the instructor

