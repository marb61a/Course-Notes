                    Understanding JavaScript's Prototypal Inheritance
                    Course Notes

There are related notes available at the following
  - https://github.com/marb61a/Course-Notes/blob/master/Language Specific/Javascript/JavaScript: The Hard Parts of Object Oriented JavaScript

1 - Introduction to Prototypal Inheritance in JavaScript
The course is designed to teach the mechanics behind inheritance
Working with any type of objects in JS means working with the Prototype chain

2 - Link to Other Objects through the JavaScript Prototype Chain
Example Syntax
  // Objects in JS give the opportunity to create key-value pairs
  // In JS when the object literal form is used the protoype chain is linked
  // to the global objects prototype object 
  const obj = {
    firstName = "Jack" 
  };
  
  const protoObj = {
    lastName = "Black" 
  };
  
  // This will set protoObj as the prototype of obj, this means than
  // obj.lastName will not be undefined but will be Black
  Object.setPrototypeOf(obj, protoObj);
  
  console.log(obj.firstName);       // Joe
  
  // This will return [object Object] rather than undefined
  // This is because the toString() method is connected to obj
  // in some way through the prototype chain
  console.log(obj.toString());

3 - Prototype Delegation with JavaScript's new Keyword
Example Syntax
  // In traditional class based OOP languages constructors are special methods that
  // are attached to classes, they are invoked when the new keyword is invoked on the class
  // this makes JS code look the same as these languages, this sometimes leads to the mistaken 
  // impression that JS is doing the same as these languages but it is not.
  function Car(make) {
    this.make = make;
    this.wheels = 1;
  }
  
  // There are 3 things that happen when the new keyword is used on a function
  // Firstly a new object is created, the second is that it is prototype linked
  // and thirdly the constructed object is set as the "this" binding on this function call 
  const myCar = new Car("Ford");
  
  console.log(myCar);

4 - Understanding the .constructor property on JavaScript Objects

5 - Understand JavaScripts this keyword within Prototypes

6 - Use JavaScript's for-in Loop on Objects with Prototypes

7 - Compose Objects with Object.assign to Create a Direct Copy

8 - Understanding Prototype Delegation within JavaScript's Class Keyword

9 - Assign and Access Methods of a JavaScript Class with Static Properties

10 - Determine an Object's Constructor with JavaScripts instanceof Operator

11 - Create Factory Functions for Object Composition

12 - Use Polymorphism with Prototype Linked Objects

13 - Replicate JavaScript Constructor Inheritance with Simple Objects (OLOO)

