                    100DaysOfCode with Python
                    Course Notes


                    Section 1 - Welcome to the course
Introduction to the course and the author
In the official 100Days chellenge there are 2 main rules
  - Code at least 1 hour a day for the next 100 days
  - Tweet progress with the 100DaysOfCode hash tag

There are a few reasons to use Python for the challenge rather than some other language
  - The major reason is that Python is growing at a huge rate
  - Usage of other languages such as PHP are trending downward which may not be good for the future

The students should follow is
  - Day N -- Watch videos
  - Day N +1 -- Write code (use Github)
  - Day N +2 -- Finalize code


                    Section 2 - Playing with Datetimes


                    Section 3 - Collections module


                    Section 4 - Python Data Structures


                    Section 5 - Testing your code with pytest


                    Section 6 - Text-based games (and classes)


                    Section 7 - List comprehensions and generators


                    Section 8 - Iteration with itertools


                    Section 9 - Decorators


                    Section 10 - Error handling


                    Section 11 - Regular Expressions


                    Section 12 - Logging


                    Section 13  - Refactoring / Pythonic code


                    Section 14 - Using CSV data


                    Section 15 - JSON in Python


                    Section 16 - Consuming HTTP services


                    Section 17 - Web Scraping with BeautifulSoup4


                    Section 18 - Measuring performance


                    Section 19 - Parsing RSS feeds with Feedparser


                    Section 20 - Structured API clients with uplink


                    Section 21 - Twitter data analysis with Python


                    Section 22 - Using the Github API with Python


                    Section 23 - Sending emails with smtplib


                    Section 24 - Copy and Paste with Pyperclip
20:45
 Lesson introduction
0:49
 Your 3 day overview
1:44
 Setup: Install Pyperclip and your env
0:52
 Pyperclip Usage
2:34
 Demo: Affiliate script
5:26
 Demo: Pyperclip text replacer
6:15
 Concepts: what did we learn
3:05
 Days 70-72: Excel automation with openpyxl
33:29
 Lesson introduction
0:39
 Your 3 day overview
1:58
 Setup: install openpyxl and your env
0:58
 Understanding workbooks and worksheets in openpyxl
4:05
 Working with cell values
6:42
 Using maxrow
4:01
 Inserting data into a worksheet
8:09
 Concepts: what did we learn
6:57
 Days 73-75: Automate tasks with Selenium
22:24
 Lesson introduction
1:07
 Setup: install Selenium and ChromeDriver
2:04
 Hello world Selenium: search python.org
1:11
 Demo 1: access my Packt ebook collection
6:48
 Demo 2: automating PyBites banner creation
6:58
 Concepts: what did we learn
1:54
 Your turn: Day 2
1:16
 Your turn: Day 3
1:06
 Days 76-78: Getting Started with Python Flask
23:35
 Flask introduction
0:43
 Your 3 day overview
1:56
 Setting up the environment
1:55
 Creating your first Flask app!
6:30
 Dict data in Flask
9:47
 Concepts: what did we learn
2:44
 Days 79-81: Basic Database Access with SQLite3
32:10
 A brief intro to SQLite3 Databases
1:03
 Your 3 day overview
2:08
 Installing SQLite DB Browser
1:13
 Creating a simple SQLite3 address book
7:13
 Analysing the DB with SQLite DB Browser
0:47
 Demo: Script to Generate a DB
4:28
 Inserting data into the address book
2:48
 Demo: Script to populate the address book
6:22
 Pulling data with SELECT
2:25
 Concepts: what did we learn
3:43
 Days 82-84: Data visualization with Plotly
27:30
 Lesson introduction
0:59
 Installing feedparser and plotly
2:17
 Prep 1: parse PyBites RSS feed data
5:53
 Prep 2: useful data structures for plotting
4:28
 Prep 3: transpose data and init Plotly
2:22
 Creating bar and pie charts with Plotly
3:11
 Other data visualization libraries
1:54
 Concepts: what did we learn
3:29
 Second day: build your own graphs
1:56
 Third day: extra inspiration / keep coding
1:01
 Days 85-87: Fullstack web apps made easy
1:02:30
 Fullstack web introduction
0:46
 What is fullstack development?
2:20
 What app will we build?
1:00
 Introducing Anvil
0:54
 Anvil building blocks
2:41
 Creating a new project in Anvil
2:09
 Adding navigation
2:28
 Subforms
2:06
 Linking the forms
4:20
 Building the Add new document form
2:08
 Processing add new document
4:44
 Data tables
2:32
 Anvil server code
3:26
 Creating the document
2:53
 Add document finale
4:52
 All docs
6:55
 A refactoring
1:32
 Adding filtering
3:04
 Document details form
2:48
 Publishing our web app
1:55
 Anvil concepts
2:55
 Your turn: Day 1
1:49
 Your turn: Day 2
1:07
 Your turn: Day 3
1:06
 Days 88-90: Home Inventory App
31:40
 Lesson Introduction
0:48
 Your 3 day overview
2:36
 Writing and working the main menu
6:06
 SQLite3 database usage
4:37
 Scrub function - SQLite3 workaround
5:46
 Home Inventory app run through
5:01
 Bug and functionality fixes
5:40
 Your Turn! - Fix the app
1:06
 Days 91-93: Database access with SQLAlchemy
37:06
 Introducing SQLAlchemy
1:18
 Demo: Introducing our app
2:38
 Demo: The app skeleton
2:17
 Demo: Defining database classes
3:01
 Demo: Defining columns (via classes)
4:56
 Demo: Connecting to the database
6:24
 Demo: Using the data access layer (DAL)
7:34
 Demo: The final game
0:55
 Demo: Seeing the database
1:25
 Concepts: SQLAlchemy
3:18
 Your turn: Day 1
0:55
 Your turn: Day 2
1:45
 Your turn: Day 3
0:40
 Days 94-96: Rich GUI apps in Python
23:34
 Introduction to Python UIs
2:50
 Demo: Where we are starting
2:49
 Demo: Refactoring to isolate user input
2:15
 Demo: Adding Gooey to our app
5:25
 Demo: Packaging our app for redistribution
4:47
 Concepts: Gooey
1:24
 Your turn: Day 1
1:58
 Your turn: Day 2
1:03
 Your turn: Day 3
1:03
 Days 97-99: Building JSON APIs
1:01:31
 Introducing our online game server
3:41
 What API operations are required?
2:45
 Getting started: Program structures
3:06
 Adding the Flask basics
2:04
 Defining JSON methods in Flask
2:58
 Migrating our SQLAlchemy models
1:47
 Ensuring starter data
4:24
 Defining the API methods in Flask
4:55
 Exercising the API
1:36
 Implementing the all-rolls method
1:25
 Implementing the create-game method
1:24
 Implementing the find-user method
2:58
 Implementing the create-user method
4:06
 Implementing the game-status method
2:37
 Implementing the top-scores method
1:31
 Implementing the play-round method
4:14
 Refactoring our web code for single responsibility
4:17
 Implementing the client
2:36
 Making the client self-validating
1:25
 Writing the full client
0:45
 Implementing the game (client-side)
3:09
 Your turn: Day 1
1:44
 Your turn: Day 2
0:45
 Your turn: Day 3
1:19
 Day 100
0:45
 The final day
0:45
 Course conclusion
5:50
 You've done it!
0:30
 What you've learned
1:21
 Make sure you have the source
0:28
 Stay immersed in Python
1:07
 Continue to challenge yourself with PyBites
1:12
 Thanks and goodbye
1:12
 Appendix: Python language concepts
46:01
 Concept: The shape of a program
1:15
 Concept: Variables
0:51
 Concept: Truthiness
1:47
 Concept: If else
1:24
 Concept: Complex conditionals
1:31
 Concept: for-in
1:41
 Concept: Calling functions
0:59
 Concept: Creating functions
1:33
 Concept: File I/O
1:20
 Concept: Imports and importing modules
1:59
 Concept: Python package index
1:54
 Concept: pip
2:26
 Concept: Virtual environments
3:53
 Concept: Slicing
2:53
 Concept: Tuples
1:43
 Concept: Named tuples
1:44
 Concept: Classes
2:01
 Concept: objects vs. classes
1:44
 Concept: Inheritance
1:30
 Concept: Polymorphism
0:53
 Concept: Dictionaries
2:30
 Concept: Error handling
2:38
 Concept: lambdas
2:09
 Concept: list comprehensions
2:57
 Concept: Want more foundational Python?
0:46
