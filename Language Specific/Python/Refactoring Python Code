                    Refactoring Python Code
                    Course Notes


                    Section 1 - GETTING STARTED WITH REFACTORING
1 - The Course Overview
Brief introduction to the instructor and the course

2 - Benefits of Refactoring
Refactoring is the changing or restructuring of code with changing functionality
Clean Code has 3 main features
  - Code is straight forward
    - Multi-member code teams can have issues with code clarity
  - DRY or Don't Repeat Yourself
    - Having Clean Code can avoid repeating code
    - In code you should only have a single way to preform an action
    - It is not specific to Python 
  - With less code there are less opportunities fro errors
    - This can be writing an easier implementation or using libraries

3 - Understanding Refactoring Principles
A discussion on some general principles for refactoring
  - PEP 8 is a style guide for Python
    - https://www.python.org/dev/peps/pep-0008/
    - It shows how to write more Pythonic code eg readability
    - It allows for a standard to be applied to development
    - It is highly recommended to use

4 - Overview of Refactoring Tools



                    Section 2 - REMOVING PYTHON ANTI-PATTERNS
1 - Overview of Python Anti-Patterns

2 - Various Types of Python Anti-Patterns

3 - Playbooks for Removing Anti-Patterns



                    Section 3 - SIMPLIFYING LONG AND COMPLEX FUNCTIONS INTO SMALLER METHODS
1 - Refactoring Through Splitting Up Functions

2 - Refactoring Through Merging Functions

3 - Replace Complex Expressions with Inner Function Calls

4 - Refactoring Through Local Variable Creation



                    Section 4 - REFACTORING CLASSES AND OBJECTS IN OOP
1 - Assessing the Correct Class for Fields and Methods

2 - Moving Functions Around Different Classes to Group Functionality

3 - Refactor Delegate Classes to Remove Double Dependencies

4 - Removing Middlemen Classes to Reduce Needless Complexity



                    Section 5 - PATTERN-BASED REFACTORING
1 - Introduction to Pattern Based Refactoring

2 - Using Encapsulation Methods for Refactoring

3 - Removing Multiple Checks for None in Your Python Code

4 - Python Refactoring Using Conditionals



                    Section 6 - USING 3RD PARTY REFACTORING TOOLS
1 - Using Rope, a Python Refactoring Library

2 - Using Codemods to Do Python Refactoring

3 - Other Tools Available for Refactoring
