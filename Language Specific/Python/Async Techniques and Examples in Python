                    Async Techniques and Examples in Python
                    Course Notes


1 - Course introduction
Very quick introduction to the course

2 - Async for taking full advantage of modern CPUs
CPU's tend to have mulyiple cores
  - This was due to heat and power problems
  - Single threaded performance has flatlined over the last decade
    - In places performance has fallen
    - This is because using the extra cores has not occured
    - Async programming will allow for taking advantage of modern hardware

3 - Topics covered
A brief run through of what the course will cover
  - There will be a very thorough examination of async coding

4 - Student prerequisites
There are some prerequisites
  - Students should know Python
  - This course is intermediate to advanced level

5 - Meet your instructor
A brief introduction to the course instructor

6 - Video player: A quick feature tour
A run through of the online video player used in the course

7 - Do you have Python 3? 
The course will need the student to have Python 3.5+ installed on the computer

8 - Getting Python 3
Installing Python differs from platform to platform
Checking Python 3 version on Ubuntu can be done
      - Python3 -V
    - Updating existing Python 3 can be done with
      - sudo apt-get upgrade python3

9 - Recommended text editor 
The course uses the PyCharm editor
  - https://www.jetbrains.com/pycharm/
  - This is not compulsory and other editors can be used eg Visual Studio Code, Vim etc

10 - Hardware requirements
Unlike other courses this course needs to be on a multicore computer
  - The minimum suggested is 2
  - The more cores the better the illustration of benefits

11 - Get the source code
The code from the course is on GitHub
  - https://github.com/talkpython/async-techniques-python-course

12 - Async for computational speed 
A brief high level view of Async and the landscape to get started

13 - Demo: Why you need async for speed

14 - An upper bound for async speed improvement

15 - Async for scalability

16 - Concept: Visualizing a synchronous request 

17 - Concept: Visualizing an asynchronous request

18 - Python's async landscape

19 - Why threads don't perform in Python

20 - Python async landscape: asyncio 

21 - I/O-driven concurrency

22 - Demo: Understanding basic generators

23 - Demo: The producer-consumer app

24 - Demo: Make the producer-consumer async

25 - Demo: Make the producer-consumer async (methods)

26 - Concept: asyncio

27 - Performance improvements of producer consumer with asyncio 

28 - Faster asyncio loops with uvloop 

29 - Let's do some real work 

30 - Synchronous web scraping

31 - async web scraping

32 - Concept: async web scraping

33 - Other async-enabled libraries

34 - Python async landscape: Threads 

35 - Visual of thread execution 

36 - How to choose between asyncio and threads

37 - Demo: hello threads

38 - Demo: Waiting on more than one thread 

39 - Demo: Something productive with threads

40 - Concept: Thread API

41 - Concept: Tips for multiple threads

42 - Cancelling threads with user input

43 - Concept: Timeouts

44 - Demo: Attempting to leverage multiple cores with threads

45 - Python async landscape: Thread Safety landscape

46 - Threads are dangerous

47 - Visualizing the need for thread safety

48 - Demo: An unsafe bank

49 - Demo: Make the bank safe (global)

50 - Demo: A missed lock in our bank (global)

51 - Demo: Make the bank safe (fine-grained)

52 - Demo: Breaking a deadlock

53 - Concept: Basic thread safety

54 - Python async landscape: multiprocessing

55 - Introduction to scaling CPU-bound operations 

56 - Demo: Scaling CPU-bound operations with multiprocessing

57 - Concept: Scaling CPU-bound operations

58 - Multiprocessing return values

59 - Concept: Return values

60 - Python async landscape: Execution pools

61 - Demo: Executor app introduction 

62 - Demo: Executor app (threaded-edition)

63 - Demo: Executor app (process-edition)

64 - Concept: Execution pools

65 - Python async landscape: asyncio derivatives

66 - Why do we need more libraries?

67 - Introducing unsync

68 - Demo: unsync app introduction

69 - Demo: unsync app for mixed-mode parallelism

70 - Concept: Mixed-mode parallelism with unsync

71 - Introducing Trio

72 - Demo: Starter code for Trio app

73 - Demo: Converting from asyncio to Trio

Урок 74. Demo: Cancellation with Trio 00:01:57

Урок 75. Concept: Trio nurseries 00:01:17

Урок 76. The trio-async package 00:00:56

Урок 77. Python async landscape: Async web 00:01:21

Урок 78. Review: Request latency again 00:01:32

Урок 79. Demo: Introducing our Flask API 00:05:02

Урок 80. There is no async support for Flask 00:01:51

Урок 81. Demo: Introducing Quart for async Flask 00:01:06

Урок 82. Demo: Converting from Flask to Quart 00:01:30

Урок 83. Demo: Making our API async 00:04:39

Урок 84. Demo: An async weather endpoint 00:01:34

Урок 85. Concept: Flask to Quart 00:02:37

Урок 86. Load testing web apps with wrk 00:02:01

Урок 87. A note about rate limiting with external services 00:03:17

Урок 88. Performance results 00:03:33

Урок 89. Remember to run on an ASGI server 00:01:42

Урок 90. Python async landscape: Cython 00:01:32

Урок 91. C and Python are friends 00:01:45

Урок 92. Why Cython 00:03:00

Урок 93. Cython syntax compared 00:02:27

Урок 94. Demo: Hello Cython 00:05:37

Урок 95. Concept: Getting started with Cython 00:01:12

Урок 96. Demo: Fast threading with cython (app review) 00:02:47

Урок 97. Demo: Fast threading with Cython (hotspot) 00:01:40

Урок 98. Demo: Fast threading with Cython (conversion) 00:02:20

Урок 99. Demo: Fast threading with Cython (GIL-less) 00:04:06

Урок 100. Demo: Fast threading with Cython (int overflow issues) 00:02:53

Урок 101. Concept: Cython's nogil 00:01:25

102 - The finish line

103 - Review: Why async?

104 - Review: asyncio

105 - Review: Threads 

106 - Review: Thread safety

107 - Review: multiprocessing

108 - Review: Execution pools

109 - Review: Mixed-mode parallelism

110 - Review: Coordination with Trio

111 - Review: Async Flask

112 - Review: Cython

113 - Thanks and goodbye
End of the course and a brief thanks from the instructor
