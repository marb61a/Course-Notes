                    Async Techniques and Examples in Python
                    Course Notes


1 - Course introduction

2 - Async for taking full advantage of modern CPUs

3 - Topics covered

Урок 4. Student prerequisites 00:00:45

Урок 5. Meet your instructor 00:00:49

Урок 6. Video player: A quick feature tour 00:02:05

Урок 7. Do you have Python 3? 00:01:40

Урок 8. Getting Python 3 00:00:39

Урок 9. Recommended text editor 00:00:54

Урок 10. Hardware requirements 00:01:14

Урок 11. Get the source code 00:01:02

Урок 12. Async for computational speed 00:03:43

Урок 13. Demo: Why you need async for speed 00:03:55

Урок 14. An upper bound for async speed improvement 00:03:53

Урок 15. Async for scalability 00:01:50

Урок 16. Concept: Visualizing a synchronous request 00:03:34

Урок 17. Concept: Visualizing an asynchronous request 00:02:15

Урок 18. Python's async landscape 00:04:25

Урок 19. Why threads don't perform in Python 00:02:53

Урок 20. Python async landscape: asyncio 00:01:16

Урок 21. I/O-driven concurrency 00:03:51

Урок 22. Demo: Understanding basic generators 00:09:05

Урок 23. Demo: The producer-consumer app 00:03:08

Урок 24. Demo: Make the producer-consumer async 00:05:36

Урок 25. Demo: Make the producer-consumer async (methods) 00:07:17

Урок 26. Concept: asyncio 00:01:18

Урок 27. Performance improvements of producer consumer with asyncio 00:01:47

Урок 28. Faster asyncio loops with uvloop 00:04:38

Урок 29. Let's do some real work 00:01:07

Урок 30. Synchronous web scraping 00:03:09

Урок 31. async web scraping 00:09:17

Урок 32. Concept: async web scraping 00:01:25

Урок 33. Other async-enabled libraries 00:03:42

Урок 34. Python async landscape: Threads 00:01:07

Урок 35. Visual of thread execution 00:01:13

Урок 36. How to choose between asyncio and threads 00:02:34

Урок 37. Demo: hello threads 00:05:00

Урок 38. Demo: Waiting on more than one thread 00:03:53

Урок 39. Demo: Something productive with threads 00:03:10

Урок 40. Concept: Thread API 00:01:42

Урок 41. Concept: Tips for multiple threads 00:00:42

Урок 42. Cancelling threads with user input 00:06:02

Урок 43. Concept: Timeouts 00:01:22

Урок 44. Demo: Attempting to leverage multiple cores with threads 00:05:46

Урок 45. Python async landscape: Thread Safety landscape 00:00:47

Урок 46. Threads are dangerous 00:01:28

Урок 47. Visualizing the need for thread safety 00:03:35

Урок 48. Demo: An unsafe bank 00:05:05

Урок 49. Demo: Make the bank safe (global) 00:04:35

Урок 50. Demo: A missed lock in our bank (global) 00:01:45

Урок 51. Demo: Make the bank safe (fine-grained) 00:05:50

Урок 52. Demo: Breaking a deadlock 00:03:45

Урок 53. Concept: Basic thread safety 00:01:43

Урок 54. Python async landscape: multiprocessing 00:01:03

Урок 55. Introduction to scaling CPU-bound operations 00:01:52

Урок 56. Demo: Scaling CPU-bound operations with multiprocessing 00:04:56

Урок 57. Concept: Scaling CPU-bound operations 00:01:22

Урок 58. Multiprocessing return values 00:02:19

Урок 59. Concept: Return values 00:01:00

Урок 60. Python async landscape: Execution pools 00:01:51

Урок 61. Demo: Executor app introduction 00:02:22

Урок 62. Demo: Executor app (threaded-edition) 00:06:45

Урок 63. Demo: Executor app (process-edition) 00:01:47

Урок 64. Concept: Execution pools 00:01:43

Урок 65. Python async landscape: asyncio derivatives 00:01:32

Урок 66. Why do we need more libraries? 00:04:32

Урок 67. Introducing unsync 00:02:22

Урок 68. Demo: unsync app introduction 00:04:22

Урок 69. Demo: unsync app for mixed-mode parallelism 00:05:55

Урок 70. Concept: Mixed-mode parallelism with unsync 00:03:11

Урок 71. Introducing Trio 00:01:11

Урок 72. Demo: Starter code for Trio app 00:01:02

Урок 73. Demo: Converting from asyncio to Trio 00:04:54

Урок 74. Demo: Cancellation with Trio 00:01:57

Урок 75. Concept: Trio nurseries 00:01:17

Урок 76. The trio-async package 00:00:56

Урок 77. Python async landscape: Async web 00:01:21

Урок 78. Review: Request latency again 00:01:32

Урок 79. Demo: Introducing our Flask API 00:05:02

Урок 80. There is no async support for Flask 00:01:51

Урок 81. Demo: Introducing Quart for async Flask 00:01:06

Урок 82. Demo: Converting from Flask to Quart 00:01:30

Урок 83. Demo: Making our API async 00:04:39

Урок 84. Demo: An async weather endpoint 00:01:34

Урок 85. Concept: Flask to Quart 00:02:37

Урок 86. Load testing web apps with wrk 00:02:01

Урок 87. A note about rate limiting with external services 00:03:17

Урок 88. Performance results 00:03:33

Урок 89. Remember to run on an ASGI server 00:01:42

Урок 90. Python async landscape: Cython 00:01:32

Урок 91. C and Python are friends 00:01:45

Урок 92. Why Cython 00:03:00

Урок 93. Cython syntax compared 00:02:27

Урок 94. Demo: Hello Cython 00:05:37

Урок 95. Concept: Getting started with Cython 00:01:12

Урок 96. Demo: Fast threading with cython (app review) 00:02:47

Урок 97. Demo: Fast threading with Cython (hotspot) 00:01:40

Урок 98. Demo: Fast threading with Cython (conversion) 00:02:20

Урок 99. Demo: Fast threading with Cython (GIL-less) 00:04:06

Урок 100. Demo: Fast threading with Cython (int overflow issues) 00:02:53

Урок 101. Concept: Cython's nogil 00:01:25

Урок 102. The finish line 00:00:35

Урок 103. Review: Why async? 00:02:01

Урок 104. Review: asyncio 00:01:04

Урок 105. Review: Threads 00:01:19

Урок 106. Review: Thread safety 00:02:17

Урок 107. Review: multiprocessing 00:02:14

Урок 108. Review: Execution pools 00:01:45

Урок 109. Review: Mixed-mode parallelism 00:01:59

Урок 110. Review: Coordination with Trio 00:01:35

Урок 111. Review: Async Flask 00:01:18

Урок 112. Review: Cython 00:01:39

Урок 113. Thanks and goodbye
