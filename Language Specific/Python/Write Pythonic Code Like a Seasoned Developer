                    Write Pythonic Code Like a Seasoned Developer
                    Course Notes


                    Section 1 -  Welcome to the course
1 - Welcome and thanks for coming
A quick welcome to the course from  the instuctor

2 - Topics covered
A brief look at the syllabus of the course by topic

3 - Get the source code
The code from the course can be found at the authors Gihub 
  - https://github.com/mikeckennedy/write-pythonic-code-demos

4 - Do you need to learn Python too?
You should already know some basic Python prior to taking this course

5 - Python 3 or Python 2?
Python 3 is what the course was designed with in mind
  - Python 2 will be discussed where there are significant differences
  - Python 2 is more widely used but is close to end of life in 2020
  - This means that Python 3 will be more widely used going forward

6 - Recommended editor
Students can use any editor they choose but the instructor recommends using PyCharm
  - https://www.jetbrains.com/pycharm/

7 - Video player: A quick feature tour
Using the site video player and how to get the best experience possible



                    Section 2 -Style guidance from PEP 8
1 - Who decides what is Pythonic?
PEP 8 - Style Guide for Python Code
Many people decide what is Pythonic code
  - Stack Overflow etc communities
  - The Zen of Python
  - PEP 8

2 - Import statements

3 - Code layout and structure

4 - Documentation strings

5 - Naming conventions



                    Section 3  Foundational Concepts
1 - Truthiness and boolean statements
Truthiness
  False     # false is false
  []        # Empty lists or arrays are false
  {}        # Empty dictionaries are false
  ""        # Empty strings are false
  0         # Zero ints are false
  0.0       # Zero floats are false
  None      # None / null / nil pointers are false
  Custom    # Custom __bool__ / __nonzero__
  
  Everything else is True!!

2 - Testing for None

3 - Multiple tests against a single variable

4 - Choosing an item at random

5 - String formatting

6 - Care enough to send an exit code

7 - Flat is better than nested



                    Section 4 - Dictionaries
1 - Why dictionaries
Dictionaries are a very important topic in Python
  - Dictionaries are everywhere in Python
    - EG As a backing store for types, classes and objects
  - They are isomorphic with JSON
    - This means that they provide a 1 to 1 mapping
    - JSON in the web's most important transport type
  - Keyword arguments in methods (kwargs)
  - They add large performance boosts to certain types of algorithms 
  - They add a switch statement like functionality
    - Python does not have a switch statement
  - If not using an ORM they can be used with databases

2 - Stop using lists for everything
Example Syntax
  // Comparing the performance of 2 algorithms
  data_list = [ ... ]                        # Length of 500,000 items
  interesting_points = [ ... ]               # Length of 100 items
  
  for i in interesting_ids:
    pt = find_point_by_id_in_list(data_list, i)
    interesting_points.append(pt)

3 - Merging dictionaries

4 - Hacking Python's memory

5 - Safer dictionary item access

6 - Dictionaries as switch statements

7 - To and from JSON



                    Section 5 - Generators and Collections
1 - Custom iteration and your types

2 - Testing for containment

3 - Slicing collections all the way to the database

4 - On-demand computation with yield and generators

5 - Recursive generators with yield from

6 - Inline generators via expressions

7 - Counting generators



                    Section 6 - Methods and Functions
1 - Introduction to Pythonic functions

2 - Leverage inline methods with lambda expressions

3 - I'm going to ignore your return value

4 - There is no method overloading in Python

5 - Default values for overloads

6 - Variable argument counts for overloads

7 - Unpacking dictionaries as named arguments

8 - Beware: The danger of mutable default arguments



                    Section 7 - Modules and Packages
1 - Introduction to packaging and module idioms

2 - Pythonic import statements

3 - What is __main__ and when do you use it?

4 - Isolation with virtual environments

5 - State your requirements



                    Section 8 - Classes and Objects
1 - Defining fields on classes

2 - Encapsulation and data hiding

3 - Do not write get_thing() set_thing()

4 - Pythonic Loops

5 - There is no numerical for loop

6 - Wait, is there a numerical for loop (v1)?

7 - Wait, is there a numerical for loop (v2)?

8 - Loops have an else block, don't use it



                    Section 9 - Tuples
1 - Tuple assignment and unpacking

2 - Swapping values

3 - Multiple return values from a function

4 - Prefer named tuples



                    Section 10 - Python for Humans
1 - Human Python as a stand in for packages in general

2 - Requests: HTTP for Humans

3 - Records: SQL for Humans



                    Section 11 - Course Conclusion
1 - You've done it!
A quick congrats to students for reaching this section as they have completed the course

2 - Lightning review
A very very quick review of what was covered in the course

3 - Source code
A link to the source code used in the course

4 - Thanks and bye
A quick thanks from the instructor to students

