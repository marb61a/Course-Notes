                    Elm
                    Course Notes


                    Section  1 - The Elm Language
1 - Beginning Elm

2 - Why bother?

3 - HTML and the virtual DOM

4 - Exercise 1

5 - Exercise 1 Solution

6 - Basic Data Structures

7 - Collections

8 - Exercise 2

9 - Exercise 2 Solution

10 - Booleans

11 - Partial Application

12 - List.filter and List.map



                    Section 2 - Elm Functions
1 - The Elm Architecture

2 - Interactivity

3 - Exercise 3

4 - Exercise 3 Solution

5 - Type Annotations

6 - Function Annotations
01:23:20 - 01:36:44
Function Annotations
Function arguments and returns can also have type annotations that are enforced by the compiler.
Exercise 4
01:36:44 - 01:37:56
Exercise 4
The fourth exercises involves improving documentation by adding type aliases.
Exercise 4 Solution
01:37:56 - 01:45:53
Exercise 4 Solution
Type annotations are added to variables, functions, and type aliases.
Case Expressions
01:45:53 - 01:48:58
Case Expressions
Case expressions are presented as more concise than if-then-else.
Union Types
01:48:58 - 01:59:25
Union Types
You can declare custom types. Union types can be compounds of values, constants, and functions
Messages
01:59:25 - 02:05:18
Messages
Messages are shown as type aliases. A case expression is used to parse the message.
Exercise 5
02:05:18 - 02:09:29
Exercise 5
The fifth exercise grabs a string from a text field to set the model’s query field. The second task is to add a delete by ID message
Questions: Functions
02:09:29 - 02:13:03
Questions: Functions
Richard answers questions about functions without bodies. He discusses uppercase and lowercase function names.
Exercise 5 Solution
02:13:03 - 02:21:48
Exercise 5 Solution
Richard writes code to grab a string from a text field and add it to a message using OnInput. He uses an OnClick handler to delete a result.
Questions: Functions & Messages Update
02:21:48 - 02:24:12
Questions: Functions & Messages Update
Richard answers a question about when functions are executed and the flow of messages and the Update function.


                    Section 3 - Client-Server
1 - Result and Maybe
02:24:12 - 02:31:09
Result and Maybe
Built-in functions return a union type that contains two values, Ok and Err. It’s necessary to use a case expression to parse the union to get the value. The Maybe type has at most one value.
Pipelines
02:31:09 - 02:40:11
Pipelines
Pipeline style allows an expression to be coded on multiple lines separated by pipes. Each line takes as it’s argument the value returned from previous line.
Decoders
02:40:11 - 02:50:12
Decoders
Decoders are functions that accept JSON data as an argument and return a value. A decoder can be composed of multiple decoders arranged pipeline style.
Questions: Decoder & Refactoring
02:50:12 - 02:57:15
Questions: Decoder & Refactoring
Richard explains that decoders make for easier refactoring.
Exercise 6
02:57:15 - 03:04:35
Exercise 6
The sixth exercise involves building a decoder for search results.
Questions: Decode Identity & Naming
03:04:35 - 03:11:03
Questions: Decode Identity & Naming
Richard answers questions about decode identity and function name uppercase.
Exercise 6 Solution
03:11:03 - 03:16:25
Exercise 6 Solution
Richard builds out the case expression that accepts the search results.Then he completes the pipe that decodes the search results.
Questions: Logging, Types, Pipeline Decoding, etc
03:16:25 - 03:23:58
Questions: Logging, Types, Pipeline Decoding, etc
Richards answers questions about logging inside a case expression, having multiple expressions inside a case branch, uppercase for type annotations, pipeline decoding, debug.log, let expressions, and virtual DOM.
Function Guarantees
03:23:58 - 03:31:52
Function Guarantees
Functions in Elm are pure. If you give functions the same arguments they will always return the same value. It’s impossible for Elm to have a function that generates a random number. To get a random number from Elm you must use a command.
Another Function Guarantee
03:31:52 - 03:38:58
Another Function Guarantee
Elm functions do not perform side effects. Functions do not modify external state. Commands may modify external state. Tasks may also modify state.
HTTP GET
03:38:58 - 03:40:52
HTTP GET
Http.get takes as arguments a decoder and a URL.
Exercise 7
03:40:52 - 03:49:00
Exercise 7
The seventh exercise involves commands and tasks to work with the search results.
Exercise 7 Solution
03:49:00 - 03:58:46
Exercise 7 Solution
Richard creates a task that converts into a command that decodes the search results and handles the error.
Day One Wrap Up
03:58:46 - 04:01:09
Day One Wrap Up
Richards presents some links to Elm resources and talks about his book. - http://elmlang.https://elmlang.herokuapp.com/ - http://elmweekly.nl - https://groups.google.com/forum/#!forum/elm-discuss - http://elm-conf.us
JavaScript Interoperability

Questions: Imports, Subscriptions, Perf, etc
05:00:00 - 05:10:06
Questions: Imports, Subscriptions, Perf, etc
Richard answers questions about imports, graphQL, subscriptions, reordering a list, virtual DOM, performance, server-side Elm, concurrency, Elm for native mobile applications, and server-side rendering.
JavaScript Interoperability
05:10:06 - 05:18:38
JavaScript Interoperability
Invoking JavaScript from Elm is similar to accessing a server.
The Elm Object
05:18:38 - 05:25:15
The Elm Object
Commands send messages to JavaScript. Using the port keyword to talk to the DOM. The Elm object contains your ELM modules.
Port
05:25:15 - 05:29:31
Port
Port modules talk to JavaScript.
Questions: JavaScript to Elm, Multiple Elm Apps, etc
05:29:31 - 05:33:48
Questions: JavaScript to Elm, Multiple Elm Apps, etc
Richard answers questions about what kind of data you can send to JavaScript from Elm, how you have multiple Elm apps on the same web page,, and how you use callbacks. - https://guide.elm-lang.org
Subscriptions
05:33:48 - 05:36:28
Subscriptions
Subscriptions manage messages from outside Elm.
Receiving Responses
05:36:28 - 05:43:05
Receiving Responses
Richard discusses how Elm listens for responses.
Questions: Events, Handlers, Ports, etc
05:43:05 - 05:50:54
Questions: Events, Handlers, Ports, etc
Richard answers questions about listening for window events and web sockets. A question is asked about click handlers and other event handlers. Ports manage communications asynchronously. - http://package.elm-lang.org/packages/elm-lang/core/4.0.5/Json-Decode
Exercise 8
05:50:54 - 05:55:12
Exercise 8
The eight exercise asks the user to complete the port code and implement decoders. Richard answers questions about subscriptions and ports, and getting DOM properties. - http://package.elm-lang.org/packages/elm-lang/dom/latest
Exercise 8 Solution
05:55:12 - 06:01:58
Exercise 8 Solution
Richard hooks up the ports and logic for receiving the search results.
Questions: Memoize JSON, Caching, Error Types
06:01:58 - 06:10:07
Questions: Memoize JSON, Caching, Error Types
Richard answers questions about memoizing JSON requests and caching server responses. He talks about error types. - http://package.elm-lang.org/packages/elm-lang/core/4.0.5/Json-Decode
The Elm Package
06:10:07 - 06:23:17
The Elm Package
The elm-pack.json file is explored.
Testing

Testing Setup
06:23:17 - 06:33:02
Testing Setup
The tests directory with it’s own elm-pack.json is explored, showing dependencies on test runners. Richard answers questions about npm.
Testing
06:33:02 - 06:41:09
Testing
You can search the package manager for packages by type. Unit tests are shown in Elm and compared to Mocha and Jasmine. - http://package.elm-lang.org/
Fuzz Testing
06:41:09 - 06:53:55
Fuzz Testing
Fuzz testing allows for randomly generated arguments for functions. Richards answers questions about custom fuzzers.
Exercise 9
06:53:55 - 07:03:32
Exercise 9
The ninth exercise asks the user to create a unit test and a fuzz test.
Exercise 9 Solution
07:03:32 - 07:13:53
Exercise 9 Solution
Richard completes the todos and resolves the errors revealed by the tests. He answers questions about debouncing, and task versus command.
Delegation

Elm as a Pure Function Language
07:13:53 - 07:16:15
Elm as a Pure Function Language
Elm is compared to JavaScript as a pure function language versus an object oriented language.
Delegation Introduction
07:16:15 - 07:23:34
Delegation Introduction
Refactoring with delegation is introduced as a technique to be able to scale your application and organize your code.
Building Search
07:23:34 - 07:38:53
Building Search
The search options are scoped from the model with map functions.
Exercise 10
07:38:53 - 07:52:54
Exercise 10
The tenth exercise asks you to use delegation to refactor the search options in the model and the view. Richard answers questions about organizing your modules, accessing the model from the view options, and module size.
Exercise 10 Solution
07:52:54 - 08:07:26
Exercise 10 Solution
A new constructor function is added for the search options and the view options. Richard shows how a helper function to destructure the model may complicate your code.
Scaling Elm Code

Unidirectional Data Flow
08:07:26 - 08:15:49
Unidirectional Data Flow
Richard explains how to solve the deeply nested component problem with the Elm architecture.
Scaling Fundamentals
08:15:49 - 08:22:30
Scaling Fundamentals
Expand and refactor to scale your code. Richard answers a question about using Elm and React together, and also using multiple Elm apps, and multiple Elm app communication using ports. - http://elm-lang.org/blog/how-to-use-elm-at-work
Scaling Examples
08:22:30 - 08:32:33
Scaling Examples
One way to scale the viewer the model, or update is to split into smaller helper functions.
Portable Signup Form
08:32:33 - 08:38:53
Portable Signup Form
Richard discusses approaches to creating a reusable signup form with validation.
Exercise 11
08:38:53 - 08:44:32
Exercise 11
Exercise 11 involves using a sortable table component. - http://package.elm-lang.org/packages/evancz/elm-sortable-table/latest
Exercise 11 Solution
08:44:32 - 08:52:43
Exercise 11 Solution
The tasks to be completed are add table state to the model, initialize the state, add a new message, change the update function to receive the new message, and configure the table with the table state, and add it to the view. Richard shows another component as an example—autocomplete. - http://package.elm-lang.org/packages/tehbritican/elm-autocomplete/latest
Composition
08:52:43 - 08:59:16
Composition
Richard show various ways to write functions to access fields.
Optimization

List Performance
08:59:16 - 09:13:27
List Performance
List performance techniques are explained by examining the underlying data structures.
Array Performance
09:13:27 - 09:22:59
Array Performance
Arrays in Elm are compared to arrays in JavaScript. The dictionary data structure is introduced. A question is answered about iterating over a record.
Rendering Performance
09:22:59 - 09:29:44
Rendering Performance
Rendering performance is improved by skipping DOM building using the lazy function.
RequestAnimationFrame
09:29:44 - 09:35:58
RequestAnimationFrame
Restricting the view function to repaint no faster than the browser repaints is built into Elm.
Exercise 12
09:35:58 - 09:38:10
Exercise 12
Exercise 12 involves using debug.log and lazy.
Exercise 12 Solution
09:38:10 - 09:39:31
Exercise 12 Solution
The solution adds lazy to the search results.
Tools

Tools
09:39:31 - 09:53:12
Tools
The first tool accepts HTML and returns Elm Html. The second tool accepts JSON and returns Elm type alias and decoders and encoders. The third tool lists compiler error messages. The fourth tool generates boilerplate Elm application code. The fifth tool is a pretty print for Elm code. The sixth tool is built into the latest version of ELM and is a history of messages that map to each change of application state. The seventh tool lets you define your CSS in Elm. - http://mbylstra.github.io/html-to-elm - http://noredink.github.io/json-to-elm/ - https://github.com/elm-lang/error-message-catalog - https://github.com/halfzebra/create-elm-app - https://github.com/avh4/elm-format - http://package.elm-lang.org/packages/rtfeldman/elm-css/latest
Elm-css
09:53:12 - 09:56:11
Elm-css
Richard mentions the last exercise of using elm-css.
Links of Interest
09:56:11 - 09:57:22
Links of Interest
Links of interest. - http://builtwithelm.co - http://elm-community.org - http://tech.noredink.com - https://developer.github.com/v3/search/#search-repositories
