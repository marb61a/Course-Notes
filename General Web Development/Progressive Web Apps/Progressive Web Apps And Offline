                    Progressive Web Apps And Offline
                    Course Notes


1 - 
Introduction to the course & instructor
What is a Progressive Web App
  - It uses the latest advanced web technologies
  - Adopts a progressive enhancement tenet
  - It transcends what users will normally expect from a browser
    - EG Offline working and Push notifications
    - This limits some of the need for native app development
  - It also offers a native like experience
There are 10 characteristics of PWA's
  - Progressive in that they work for a variety of browsers
  - Responsive because mobile traffic has eclipsed desktop traffic
  - Works offline because PWA's should work regardless of absent or poor quality connections
  - App Like because you can add them and launch them from the home screen
  - Fresh because they should get up to date content without complex process
  - Safe because security is very important, HTTPS is used by about 60% of the web
  - Discoverable, they should have rich metadata for search engines
  - Re-engageable in the form of notifications so that users can be bought back into an app
  - Durable in that they should be able to store data so that it survives
  - Linkable, so that url linking is possible along with native deep linking
The course will cover all of this
The course has a sample app which will be used during the course
  - It will need to be set up as part of Exercise 0
  - At the beginning of the course it works like a standard single page app
    - It is built in React but the work will be done in Vanilla JS
    - The React will work only as a thin view layer
  - During the course there will be support added for
    - Background Tasks
    - Notifications
    - Offline Boot
    - Custom 404 images
    - Offline Add-To-Cart
    - Background Sync
    - Native Look And Feel
    - Offline on iOS

Measuring Apps
  - There are important metrics which will be watched
    - Time to first paint
    - Time to interactive
    - Time to dynamic data
  - The chrome devtools course is recommended
    - There are notes on this course available
      - https://github.com/marb61a/Course-Notes/blob/master/General Web Development/Tools/Mastering Chrome Developer Tools
  - The course will be touching on HTTP2
  - Web Apps should perform at about 60 fps if performing well
    - Knowing how to read the flame chart on the performance tab in devtools is important
      - The flame chart shows how long each function takes to invoke
    - Keeping an eye on this chart during development is recommended
  - Lighthouse is a new tool for measuring performance
    - https://developers.google.com/web/tools/lighthouse/
    - This is a very new tool but has a great advantage as it can be run from Chrome Devtools
  - Webpagetest is a much older but extremely useful tool
    - https://www.webpagetest.org
    - It allows you to run speed tests from around the world
    - It uses real browsers at real connection speeds
      - This gives a much more realistic view of user experience
    - It supports many advanced features such as
      - Multi-Step Transactions, Scripting, Video Capture, Content Blocking and  Single Point of Failure Testing
    - This is free but the domain must be public if using the website version
      - A way around this is to host it yourself as the application is open source
  - The first item will be to set up the project, get it running and test with Lighthouse
    - Clone the github repo
    - Use the yarn command to install
    - Beginning app should be available on the browser
    - Vapid keys are necessary for web push
      - web-push generate-vapid-keys --json > ./private/vapid.json
      - This command generates both public and private keys
      - This file is in json format so should be kept secret
    - The node version should be at least 7.10
    - To start the app use the following command
      - npm run watch
      - Also there are a couple of other options available for running everything
        // This first option is deprecated and npm run watch is recommended instead
        - ./run serve 
        - node ./server/cli/cli.js serve
    - To build the app use the following command
      - npm run build:prod
      - This may take a few minutes to do the first time
      - Webpack will do some tree shaking for unused code
    - Gzip works really well compressing reoccuring string
    - An environmental variable is added which will open a web based tool when building the app
      - ANALYZE=true npm run build:prod
      - This will show a graphical representation of what is making up the compressed app file
    
2 -
Windows 10 users are recommended to install the Linux subsystem
The installation procedure is available at the following url
  - https://msdn.microsoft.com/en-us/commandline/wsl/install-win10
  - This installs pieces of Ubuntu alongside Windows
  - This gives a true Bash environment
    - This means that setup is much faster

Mobile Simulation
  - When running the app in Chrome/Firefox/Safari etc, the devices mode is the first thing to be reached for
  - The devices mode can do several things
    - It simulates device web experiences
    - It simulates sensor input
      - This includes GPS co-ordinates which can be simulated
      - Also device orientation and items like long press simulating righ-click
    - It is closer to Android than iOS
    - There is responsive breakpoint visualisation
    - This is still in Chrome
  
  iOS Simulator
    - Localhost is your machine
    - This is critical for testing Apple-specific features
    - This emulates even CPU architecture
    - This is more similar to a virtual machine
    - It allows you to test things you would not otherwise be able to do
    - Mobile Safari is different then desktop Safari
    - It is easy to connect Safari to the simulator
    - It is useful for validating against the 2 iOS JS engines
 
  Android Simulator
    - 10.0.2.2 is the machine address
    - The simulator can be connected to devtools
    - You will need to install Android Studio
    - This can be an involved process
    - At least one member of the team should have this setup
    - Some of the PWA technology appears on Android first
    - Use standard sizes when creating a virtual device

Progressive Metadata
The example application is at this point as if no-one had thought of mobile experience
The first thing to be examined is the viewport
Example Syntax
  // Viewport can be set so as to approximate what viewers expect from native apps
  // The name attribute and content attribute are convention and can be thought of as key-value pairs
  // Reccomended that user scalable be set to no as it will better approximate native app settings where zooming
  // is not available on many native apps eg Twitter on the address bar where no zoom is
  <meta name="viewport" content="width=device-width, initial-scale=1">
    - width is a positive integer or device-width
    - initial-scale is a positive number between 1.0 and 10.0
    - maximum-scale is a positive number between 1.0 and 10.0
    - minimum-scale is a positive number between 1.0 and 10.0
    - user-scalable is a yes or no
Apple-Specific Metatags
  - There are hundreds of platform specific tags
  - There is a cheet sheet available as part of the course
Example Syntax
  // Fullscreen
  <meta name="apple-mobile-web-app-capable" content="yes">
  // Black Status Bar
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  // Home Screen Title
  <meta name="apple-mobile-web-app-title" content="Home Screen">
Application Manifest
  - This is part of the PWA standard
Example Syntax
  // The manifest.json file
  // This is the link that would be in the index.html file
  <link rel="manifest" href="manifest.json">
  
  {
    "name": "MyApp",                        //App name
    "icons": [                              //Various icon sizes
      // A 192px square is recommended for "add to home screen"
      // This is used for Android high resolution
      // There is no image resizing so images must be correct
      {
        "src": "image_src_path",
        "sizes": 192x192,
        "type": "image/png"
      },
      // A 512px square is recommended for the startup screen
      {
         "src": "image_src_path",
        "sizes": 512x512,
        "type": "image/png"
      }
    ]
    "theme_color": "#2d89ef",               //Theme bar styling
    "background_color": "#2d89ef",          //Used for startup screen
    "display": "standalone"                 //Launch as an app
  }

The manifest.json file display option has several different settings to choose from
  - fullscreen -- This is where are available area is used
  - standalone -- It looks and feels like a standalone app
  - minimal-ui -- "light-browser" ui, it does not have it's own window
  - browser -- This is a conventional app in a browser
    - This is the default setting

Not all versions of iOS or Android will read this app manifest
  - Older versions of Android for example used to use meta-tags but the trtend is towards an icon array
  

3 -

4 -

5 -

6 -

7 -

8 -

9 -

10 -

11 -

12 -

13 - 
