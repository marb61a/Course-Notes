                    Offline Web
                    Course Notes
                    
                    
                    Section 1 - Introduction
1 - Introduction
Introduction to the author and course
A quick overview of the syllabus

2 - Offline Web Basics
The web and offiline seem to be two very different concepts
Some Offline Web Advantages
  - It can offer improved experience to users
  - Offer offline access where it maybe needed
  - The offline web can offer improved performance
  - Use web technology to offer a web like experience
The offline web use cases
  - Bad or limited connection eg slow 3G
  - No Connection for example when in a taxi or on a plane
  - For installation of webapps
  - A faster experience for users in some circumstances
  - If a site or company is experiencing server problems
Offline First 
  - This uses local data when possible
  - When there is a separation of application shell and the content
A related field is Progressive Web Apps
  - It is an enhancement to the home screen web apps discussed previously
  - It has a responsive layout, works offline and can be installed on the home screen of a device



                    Section 2 - Offline Detection
1 - HTML 5 API's For Offline Detection
The first thing that need to be done is to check if online or offline
HTML 5 has an API for checking network state
  - navigator.onLine which returns true or false where online or offline
Most browsers query the OS about the network state
Example Syntax
  <!DOCTYPE html>
  <html>
    <head>
      <title> Offline Web </title>
      <meta charset="utf-8">
      <h1> Offline Web </h1>
    </head>
    <body></body>
  </html>

2 - Offline Detection With Ping
Using ping to contact the server using xhr/AJAX
  - There is a Fetch API available but it is not supported by every browser
  - You should ping a server every few seconds to ensure that the network is up
  - The responses should be appropriate
Example Syntax
  // detection.html file
  <!DOCTYPE html>
  <html>
    <head>
      <title> Offline Web </title>
      <meta charset="utf-8">
      <h1> Offline Web </h1>
    </head>
    <body>
      <script>
        console.log(window.navigator.online);
        
        var timerPing;
        
        function startPing(){
          setInterval(function(){
            // AJAX call
            
          }, 360000);
        }
        
        function stopPing(){
          if(timerPing){
            clearInterval(timerPing);
          }
        }

        window.addEventListener("online", function(e){
          document.querySelector("output").innerHTML = "You might be online";

          startPing();
        });

        window.addEventListener("offline", function(){
          document.querySelector("output").innerHTML = "You are offline";

          stopPing();
        });
      </script>
    </body>
  </html>

3 - The Offline.js Framework



                    Section 3 - Data Storage
1 - Data Storage API's
There are several different HTML5 data storage API's
  - Web Storage
    - This consists of Session & Local with the difference being in lifecycle. 
    - Session will have a very short lived cache
    - This is string based
    - There is a limit of about 2.5 mb
  - WebSQL 
    - This is not an approved standard
    - It is not available in some browsers
    - You can store up to 50mb
  - IndexedDB
    - This is a NoSQL database  
    - You can store up to 50mb
    - In some browsers storage above 5mb requires user permission
  
2 - Using LocalStorage
The example uses a small app that brings in infromation from Wikipedia
Example Syntax
  // Index.html
  <!DOCTYPE>
  <html>
    <head lang="en">
      <meta charset="utf-8">
      <title>Wikipedia Search</title>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link href="googleapi url css" rel="stylesheet" type="text/css">
      <link rel="stylesheet" href="css/normalize.css">
      // Skeleton CSS is a responsive css framework
      <link rel="stylesheet" href="css/skeleton.css">
    </head>
    <body>
      <div class="container">
        <div class="row">
          <div class="five columns" style="margin-top: 25%">
            <h4>Wikipedia</h4>
            <p>
              <input type="search">
              <input type="button" value="search" onclick="search()">
            </p>
          </div>
          <div class="seven columns" id="result" style="margin-top: 5%">
          
          </div>
        </div>
      </div>
    </body>
  </html>



                    Section 4 - Application Cache
1 - Application Cache Basic Manifest
At this stage the sample web app is still operating online as it will not work offline
  - This is where the Application Cache API comes in
  - This is available for both desktop and mobile devices
There is a need to create a manifest file for the app
  - It is commonly referred to as either the offline manifest or the app cache manifest
  - It is just a text file
  - It is added to the html element
    - <html lang="en" manifest="offline.manifest"></html>
Creating an application cache manifest file
Example Syntax
  // This line must be in uppercase and it is compulsory
  // If this line is missing the file will not work
  // offline.manifest file
  CACHE MANIFEST
  
  css/normalize.css
  css/skeleton.css
  search.js
  // fonts.googleapis.com/css?family=Raleway:400,300,600

2 - Application Cache Online Resources

3 - Application Cache Updating the Package

4 - Application Cache Event Handling

5 - Application Cache Advanced Techniques



                    Section 5 - Service Workers
1 - Service Introduction Challenges

2 - Service Workers Installation

3 - Service Workers The Cache API

4 - Service Workers Serving Cached Files

5 - Service Workers Mock Responses

6 - Service Workers Network First

7 - Service Workers Updating Data Tools

8 - Service Workers Challenges



                    Section 6 - Web Push Notifications
1 - Web Push Notifications Introduction

2 - Web Push The Client

3 - Web Push The Server

4 - Web Push Wrap Up

                    
                    Section 7 - Conclusion
1 - Conclusion
