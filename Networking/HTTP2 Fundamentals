                    HTTP2 Fundamentals - Course Notes
                    
                    
                    Section 1 - Introduction
1 - Introduction
Introduction to the syllabus and to the author
Overview of the history of web pages
Nielsons law of bandwith
  - This states that there will be a 50% increase in bandwidth each year
  - This is somewhat similar to Moores Law which states that technology will double every 18 months
Approximately 3 billion people use the internet

2 - Why the need for HTTP2
Stuart Cheshire in 1996 in a paper said latency was going to be the biggest issue facing the internet users in the future
Page Size
  - Parges larger in size
  - Much of the material is not primary content
Latency is limited by the speed of light
  - It could be 80 - 200 ms
Latency is money
  - Increasing bandwidth means page load times drop proportionately but at a point the impact is greately reduced
Latency greatly affects user behaviour
Some rich media web pages can have 400 requests

3 - TCP The underlying Problem
Everything runs on the transport layer of the OSI model
  - Mostly using TCP
More Notes on TCP &  related is available at
  - https://github.com/marb61a/Course-Notes/tree/master/Networking
Headers were not introduced to HTTP1.0
In HTTP1.1 There was a connection field introduced to the header
  - This defaulted to keep-alive
The reliability of TCP instead of UDP because of its connection oriented approach has many good features but this
reliability also can cause problems
Head Of Line Blocking
  - This is where a line of packets is held up because the first packet has either been lost or dropped and is preventing 
  further processing of packets
  - This is a big issue when using HTTP piplining which will be covered later in the course
The waterfall pattern is from under performing websites where the page loading statistics look like a waterfall
Another issue of TCP is flow control which deals with congestion problems, basically it adjusts transfer rate based
on network reactions.
TCP SLow Start
  - This is where a connection is started with a small transfer rate called a window size and is increased until maximum 
  capacity is then found, if affects every TCP connection

4 - HTTP2
HTTP2 is a binary protocol which itself makes things easier as it is easier to pass binary instead of text
HTTP2 uses the same semantics as HTTP1.x
HTTP2 addresses the shortcomings of TCP
SPDY was a protocol developed by Google to address performance issues 
SPDY constitutes the foundation of HTTP2 and it has replaced SPDY
Development work on SPDY has been discontinued
Chrome has dropped support for SPDY
HTTPBis Working Group is the main group charged with working on HTTP2
HTTP2 RFC Number is 7540
`- There is a corresponding RFC 7541 (HPACK) which covers header compression
HTTP2 is supported by most browsers & server software

5 - Demo HTTP2 In Action
A quick demonstration of using HTTP2 using akamamai
  - https://http2.akamai.com
  - https://http2.akamai.com/demo
The deomstration is inspired by the golang gophertiles demonstration
  - http://http2.golang.org/gophertiles

6 - Summary
Quick summary of the material covered in the section


                    Section 2 - An HTTP2 Connection
1 - Establishing An HTTP2 Connection
In HTTP1.x the client makes a request to the server
  - It does this using plain text
  - This sends a verb, a resource url and some header information
The server in turn responds with the corresponding resource or error code
Each request and response is self contained
In HTTP2 things change a bit
  - The exchange is no longer in plain text but in binary
  - The binary messages contain the same information
HTTP2 is not compatible with HTTP1.x
  - It does however need to work on the existing infrastructure of the web
HTTP2 needs to work on top of HTTP1.x, there are 2 options for doing this
  - Plain Text
    - Client issues a request with the header upgrade h2c
    - If the server supports HTTP2 it sends back a 101(Switching Protocols) response
  - TLS
    - The predominant methodology as it is used with ssl
    - There had to be an extension called Application-Layer Protocol Negotiation (ALPN) added
      - ALPN allows protocol negotiationto take place during the handshake

2 - Frames And Messages
Frames constitute the basic protocol unit in HTTP2
They are used for communicating data whether its header or a response body
There are 10 different types of frames in the HTTP2 protocol, each having a different function
Each frame will contain a series of header fields which will be 72 bytes in size in total
The header will be followed by the payload which will vary depending of the frame type
Some important fields are
  - Type -- This indicates the type of frame being used
  - Flags -- These are associated with Type and indicate specific characteristics for that frame
  - ID -- This indicates the stream that the frame is associated with
  - Payload -- This is the actual content, which will vary depending on type

HTTP2 Messages
These are used because HTTP2 needs to keep the semantics of HTTP1.X
A message consists of a series of frames
A HTTP2 Request Message consists of a series of Header frames and Data frames
  - The response message is similar in structure
The data frame is by far the most important frame as it carries the payload of the request and response bodies
Padding in used in the data frame to mitigate against attacks

Headers Frame
The headers frame corresponds to headers sent in a request and response
There can be many headers and they can be distributed over multiple frames
A series of flags such as endheaders and endstream are used to indicate if the headers frame is the last
or followed by a series of continuation frames which contain additional header information
There is a single headers frame and one or more continuation frames
A few fields E, Stream Dependency and Weight are related to stream priorities

Every HTTP2 connection has a series of settings that apply through out the exchanges
These settings are defined with the settings frame and are sent when establishing a connection
The parameters include
  - SETTINGS_HEADER_TABLE_SIZE
  - SETTINGS_ENABLE_PUSH
  - SETTINGS_MAX_CONCURRENT_STREAMS
  - SETTINGS_INITIAL_WINDOW_SIZE
  - SETTINGS_MAX_FRAME_SIZE
  - SETTINGS_MAX_HEADER_LIST_SIZE

3 - Headers

4 - Basic Tooling

5 - Demo An HTTP 2 Connection

6 - Summary


                    Section 3 - Streams
1 - A Recap On HTTP 1.1 v HTTP2

2 - Multiplexing And Streams

3 - Demo An HTTP2 Stream Exchange

4 - Stream Priorities

5 - Demo Priorities In Action

6 - Flow Control

7 - Summary
                    
                    Section 4 - Server Push
1 -

2 - 
                    
                    Section 5 - Security, Proxies And More
                    
                    Section 6 - Working with HTTP2 Libraries And Servers
                    
                    Section 7 - Adapting Existing Applications
