Exercise
Select the id, name, breed and coloration of all cats that:

    are females,
    like teaser toys,
    are not of the Persian or Siamese breeds.


Solution
	id, 
    name, 
    breed, 
    coloration 
from cat
where sex = 'F'
and fav_toy = 'teaser'
and(breed != 'Persian' and breed != 'Siamese')


Instruction
Now we will focus on aggregation and grouping. However, we'll start with a quick recap.
SQL offers aggregate functions that can help with computing statistics: count(), sum(), min(), max(), avg(), etc.
In order to create more sophisticated statistics with aggregate functions, you have to use the GROUP BY clause. 
This groups together all rows that have the same values.
You can use the HAVING clause, if you need to filter the result of an aggregate function.
Take a look at the example below. This query selects every client_id and the average value of all items a given client ordered. 
It takes into consideration only those clients who ordered at least twice.

SELECT 
  client_id,
  avg(order_price)
FROM client_orders
GROUP BY client_id
HAVING count(client_id) >= 2

The DISTINCT keyword eliminates duplicate results.
In order to sort table rows, you need to use the ORDER BY clause. For example:

SELECT 
  client_id,
  name
FROM client_orders
ORDER BY name DESC

Exercise
Click the Next exercise button to continue.

Solution
No solution needed


Instruction
Now we move on from cats and focus on something completely different video games. It's a much bigger table that consists of 9 columns. 
We need to emphasize the fact that although the names of the gaming systems are real, all other data are completely made up. 
So don't bother looking for these games on the Internet – you won't find them!

Exercise
Select all data from the games table.
As you can see, this table consists of the following columns:

    id – the id of a given game,
    title – the title of a given game,
    company – the name of a company that produced a given game,
    type – the genre of a given game,
    production_year – the year in which a game was created,
    system – the system for which a game was released,
    production_cost – the cost of producing of a given game,
    revenue – the revenue a given game generated,
    rating – the rating of a given game.

Solution
select * from games


Exercise
Select all data from the games table and order the results by the cost of the production from the cheapest to the most expensive. 
If the cost of production is the same, order by ratings from best to worst.

Solution
select * from games
order by production_cost asc,
rating desc


Exercise
Show the average production cost of games that were produced between 2010 and 2015 and were rated higher than 7.

Solution
select 
    avg(production_cost) 
from games
where production_year between 2010 and 2015
and rating > 7


Exercise
What was the total revenue for all shooter games that were created after 2010 and rated higher than 3? 

Solution
select 
    sum(revenue) 
from games
where type = 'shooter'
and production_year > 2010
and rating  > 3
