Exercise
Select all data from the order_items table.

This is an associative table – it connects data from two tables: orders and products. That's how we know what items form an order.

It consists of the following columns:

    order_id – the id of the order a given product is part of,
    product_id – the id of the product itself,
    quantity – the quantity of the product in this order,
    price – the total price for the product in this order.

Solution
select * from order_items


Exercise
Select the names of all products that were part of the order with the id of 13.

Solution
select p.name
from products as p
join order_items as o
on o.product_id = p.id
where o.order_id = 13
group by 1


Exercise
For each order select its ID (name the column order_id), the first and last name of the client who made this order,
and the total revenue generated by this order (name the column revenue).

Note: The revenue for the order is the sum of the price column for each item in the order. 

Solution
select o.id as order_id,
c.first_name, c.last_name,
sum(oi.price) as revenue
from orders as o
join clients as c
on o.client_id = c.id
join order_items as oi 
on o.id = oi.order_id
group by o.id, c.first_name,
c.last_name


Exercise
Select the first and last name of each client, the name of the category they purchased from (in any of their orders),
and the total amount of money they spent on this product category (name this column total_amount).

Solution
select c.first_name, c.last_name,
cat.name, sum(oi.price) as total_amount
from clients as c
join orders as o
on c.id = o.client_id
join order_items as oi
on oi.order_id = o.id
join products as p
on p.id = oi.product_id
join categories as cat
on p.category_id = cat.id
group by c.first_name, c.last_name, cat.name


Exercise
Select the name of each product category and the revenue (name that column revenue) that it generated. Sort the results by revenue in descending order.
Show a product category even if there were no sales for a particular category. In this case, the revenue is null. 


Solution
!!! Issue with the exercise but a couple of solutions which are the same
Removing the where clause seems to be the issue here, the exercise may have been changed as
there is no mention of where clauses in the Exercise

// Now Working
select c.name,
sum(oi.price) as revenue
from categories c
left join products p
on c.id = p.category_id
left join order_items as oi
on p.id = oi.product_id
join orders o
on o.id = oi.order_id
OR oi.price is null
group by c.name
order by revenue desc

// Working
SELECT
categories.name,
sum(order_items.price) as revenue
FROM categories
LEFT JOIN products

ON categories.id = products.category_id
left outer join order_items
on order_items.product_id = products.id

left outer join orders
on orders.id = order_items.order_id
OR order_items.price is null

group by categories.name
order by revenue desc;

