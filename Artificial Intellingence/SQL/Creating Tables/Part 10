Instruction
We have just said that you can't have two primary keys in one table - but your primary key can consist of more than one column. Take a look at the example:

CREATE TABLE order_item (
   order_id int,
   sequence int,
   name varchar(32),
   quantity int,
   PRIMARY KEY (order_id, sequence)
);

We've got a table which keeps information about items in a given order. We keep the order_id from each item. 
We also keep the sequence number of the item in the purchase.
The column order_id isn't enough as the primary key - many items can be ordered together in one purchase and treated as one order. 
On the other hand, we can't use the sequence column as the primary key either - the first purchase starts with item no 1, followed by no 2 etc., 
but the next purchase starts the counting again from 1. In order to obtain unique values for the primary key, we have to take the two columns together.
Primary keys like this - with more than one column - are often called composite primary keys.

Exercise
Movies sometimes fall under the same title and we should treat the combination of the movie title + the year of production as the primary key.
Let's recreate the table movie with the following columns:

    title, up to 64 characters,
    year, an integer,
    genre, up to 10 characters.

The first two columns create the primary key.

Solution
CREATE TABLE movie(
	title VARCHAR(64),
  	year INTEGER,
  	genre VARCHAR(10),
  	PRIMARY KEY(title, year)
)


Exercise
Let's say we want to direct another movie under the title The Kid in 2016. The genre will be drama. Put that information into the table movie.

Solution
INSERT INTO movie VALUES(
	'The Kid',
  	2016,
  	'drama'
)


Exercise
Let's see if you can create a new table based on the description below:
Each customer in our store has certain favorite genres. This is why we need a table named preference with the following information: 
user_id (an integer), priority (an integer), genre (text up to 20 characters). The first two columns form the primary key.
We created a simple template for you. Fill in the gaps with the table name, column names and column types!

Solution
CREATE TABLE preference(
	user_id int,
	priority int,
  	genre varchar(20),
   PRIMARY KEY (user_id, priority)
);


Exercise
Try to create a table using the ERD diagram below:

Solution
CREATE TABLE enrollment(
	student_id INT,
  	course_id INT,
  	start_date DATE,
  	evaluation CLOB,
  	PRIMARY KEY(student_id, course_id, start_date)
);


Instruction
Let's now get back to the single-column primary keys with integer numbers. They are the most frequent choice in professional databases. 
Because of their popularity, database system creators have decided to make our lives easier. 
They provide us with tools to automatically number our rows! Take a look:

CREATE TABLE movie (
    id IDENTITY PRIMARY KEY,
    title varchar(64),
    year int,
    genre verchar(20)
);

As you can see, we've added a new keyword IDENTITY after the name of the column. 
Thanks to it, the database will know that it should calculate the consecutive numbers for this column. 
IDENTITY works like a data type, so we write it instead of our data type (like int).
The keyword IDENTITY is usually used for primary keys, but it may not be so. 
You can have a column which is not a primary key and still have your database generate the values automatically.

Exercise
Try to add a new row to the table movie. It's a movie called Birdman from 2014, the genre is comedy-drama. 
Do NOT specify the id column. What do you think will happen?

Solution
INSERT INTO movie (title, year, genre) VALUES(
	'Birdman',
  	2014,
  	'comedy-drama'
)
