Instruction
Finally, we're going to learn a mixture of the types date and time - datetime, which is also called timestamp. The format for timestamp is yyyy-MM-dd hh:mm:ss. 
As you can see, it includes both the date and the time. It has various names in various databases: timestamp, datetime, smalldatetime. 
In our database, all of these names work.

Exercise
Peter wants to create yet another version of his table payment, with the following columns: user_id (integer), amount (decimal(4,2)) and date_time (timestamp)

Solution
CREATE TABLE payment(
	user_id INT,
  	amount DECIMAL(4, 2),
  	date_time TIMESTAMP
)


Exercise
Peter wants to create a table couple where he wants to store information about people who got lucky together using his website. 
Create the table for him with the following columns:

    user1 (integer),
    user2 (integer),
    first_date (date),
    from_first_sight (boolean),
    description (text).

Solution
CREATE TABLE couple(
	user1 INT,
  	user2 INT,
  	first_date DATE,
  	from_first_sight BOOLEAN,
  	description CLOB
)


Exercise
Peter introduced a new option on his website. Users can now meet for first dates using a special date planner. 
Use the ERD diagram below and create a table which will help organize the dates.

Solution
CREATE TABLE first_date(
	code CHAR(8),
  	user1 INT,
  	user2 INT,
  	start TIMESTAMP,
  	place VARCHAR(32)
)


Exercise
After many months, Peter finally decided it was time to reconstruct his table with user_account.
Read the description below, suggest the appropriate data types and build the SQL instruction.
Now each user has a user_id which is a combination of letters and digits, always 8 characters long (like X87DEW45).
We need to store information about the first_name and last_name, each of which can be up to 40 characters long.
Next, there is a nickname, which can be 20 characters long. Each user has their birthday on a specific day. 
They also provide their description, which can be of any length, weight and height which are no greater than 300 and have one digit after the decimal. 
Finally, we need to store information about tattoos (name the column has_tattoos) - a simple yes or no will do.

Solution
CREATE TABLE user_account(
  	user_id CHAR(8),
	first_name VARCHAR(40),
  	last_name VARCHAR(40),
  	nickname VARCHAR(20),
  	birthday DATE,
  	description CLOB,
  	weight DECIMAL(4, 1),
  	height DECIMAL(4, 1),
  	has_tattoos BOOLEAN
)


Instruction
Okay, let's start with text data types. So far, we've learnt 3 text types:

    VARCHAR, which allows us to enter a value of up to the given amount of characters,
    CHAR which is used for data of constant length and
    TEXT or CLOB data type for longer passages.

The choice of the proper type is not always obvious. For instance, if we want to store user passwords and they are supposed to be up to 20 characters long, 
you may think that VARCHAR(20) will be the right choice. However, it is good practice to store passwords in your database encrypted.
For instance, we can use a special hash function like SHA-512. The good thing is, it is not easy to decrypt such passwords, 
so if the data from our database falls into the wrong hands, it won't be easy to get to know the stolen passwords.
The password hash generated with the SHA-512 function is 512 bytes long, which is more or less 88 characters, depending on the encoding.

Exercise
Let's create a simple table for an internet forum.
Let's name the table forum_user. We want the following columns: first_name, nickname, password, description.
The first two columns are up to 25 characters long. The third column is up to 88 characters long. The last column description is a longer text.

Solution
CREATE TABLE forum_user(
	first_name VARCHAR(25),
  	nickname VARCHAR(25),
  	password VARCHAR(88),
  	description CLOB
)
