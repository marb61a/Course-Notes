Instruction
Welcome to the course Creating Tables in SQL. We assume that you already know how to use tables in a database: how to create queries and how to modify data in them. 
If not, why don't you check out our previous courses first? We have a course on SQL queries and another one about data operations in SQL.
In this course, you're going to learn how to create tables. You're now going to create your very first table. 
See that SQL code on the right? You may not understand it yet, but don't worry. We'll explain the instructions in this course.

Exercise
Peter loves toys and he decided to open a museum of childhood in his city. In the museum, he wants to show various kinds of toys from the past, 
coming from all over the world.
As you can see, he has already written some code. This code is going to create a table where he will store data about all of his exhibits.
Why don't you help him create it? Click Run and check code to see how the table is created. 

Solution
CREATE TABLE exhibit (
   id int,
   name varchar(64),
   country varchar(32),
   production_year int
);


Instruction
Excellent! You have just created your first table! Its name is exhibit and it has the following columns: id, name, country, and production_year.
For now, our table is empty. Let's fill it up with some data. We have an entire course which deals with data insertion, modification and deletion,
but here's a little reminder:

INSERT INTO exhibit VALUES (10, 'Doll', 'USA', 1995);

The above statements adds a new row to the table called exhibit with the values

    10 for column id,
    'Doll' for column name,
    'USA' for column country, and
    1995 for column production_year.

Note that we put quotes around text like 'Doll', but not around numbers like 1995. 
Remember to specify the values in this exact order - this is the same order in which we provided column names when creating the table. 

Exercise
Peter has gathered a few toys already and he wants to insert them into the table exhibit. 
Help him add a Matryoshka with id 1. The toy comes from Russia and was produced in 1989.

Solution
INSERT INTO 
EXHIBIT VALUES(
	1, 'Matryoshka', 'Russia', 1989
)

Exercise
Let's find out if the row has been inserted correctly. Write a simple SQL query which will select the production_year column for the row with the name 'Matryoshka'.

Solution
SELECT PRODUCTION_YEAR 
FROM EXHIBIT 
WHERE NAME = 'Matryoshka'


Exercise
Here, you can practice your new skills. Why don't you add a few toys coming from your country to the list? 
Do you still remember what items you played with when you were young? Give it a go!
Use the Run and check code button to run your query or Reset to restore the original content of the table. 
Once you're done playing, press Next exercise to move on. There are no right or wrong answers this time!

Solution
No solution needed


Instruction
Now, let's go deeper into table structure. Each column stores a certain type of data. 
Some columns store numbers (price, quantity, id), other columns store text (names, descriptions) or dates.
Why do we need to specify data types for columns? Couldn't there be one general data type for everything? 
Well, internally, our database performs a lot of bookkeeping. It needs to know how much space it should have for the data in a given column.
A longer text requires more space than a short number, for example.
What's more, the database has many additional structures which make it run faster, like row sorting. 
Numbers are sorted differently than text. This is why we need to specify column types each time we add a column to a table.

Exercise
Let's experiment with data types a little bit. In our table exhibit, there is a column id which contains the identification number of the toy. 
The data type has been chosen to allow number values only. Let's try to insert a row with some text in that column and see what happens. 

Solution
No solution needed


Instruction
You did your job right, but as you can see, the operation failed. Why? Well, data types are very strict. 
If we have a column intended for number values, we can't insert text values there.
Okay, you are finally ready to learn how to create tables! Let's create a very simple table with one column which stores numbers. Take a look at the example:

CREATE TABLE airplane (id int);

First, we put the keywords CREATE TABLE, after which we provide the name of the table. 
Then, inside parentheses, we write the name of the column, put a space and then specify the data type. 
The data type int is short for integer - this column type is used to store integer numbers (like 4 or 157).

Exercise
It's time for you to practice. Create a table named result with one number column called score.

Solution
CREATE TABLE result(
	score int
);
