Instruction
Once we create a sequence, we can use a special instruction to retrieve the next value for it. 
The code varies depending on the database, so don't worry if it's different from the one we presented below.

SELECT nextval('first_seq');

The above code will select the next value for the sequence named first_seq. 
It is possible to associate a sequence with values in a column, but we'll discuss it in another part of our course. For now, just remember what sequences are.

Exercise
Select the next value for your new sequence my_sequence.

Solution
SELECT nextval('my_sequence')


Exercise
Let's get started with the review. Use the ERD diagram below to create the proper table.

Solution
CREATE TABLE festival(
	code CHAR(8) PRIMARY KEY,
  	name VARCHAR(20),
  	start TIMESTAMP,
  	end TIMESTAMP,
  	participants INT,
  	score DECIMAL(2, 1)
)


Exercise
We want a table called parcel which will register pieces of land within our country. The table has the following columns:

    city - up to 25 characters,
    street - up to 25 characters,
    num - an integer,
    area - a real number,
    state_owned - a yes/no field.

We want the first three columns to form the primary key

Solution
CREATE TABLE parcel(
	city VARCHAR(25),
  	street VARCHAR(25),
  	num INT,
  	area REAL,
  	state_owned BOOL,
  	PRIMARY KEY(city, street, num)
)


Exercise
Create a table foreign_student which will keep track of students coming from abroad. Consider the following columns:

    id - integer, primary key,
    first_name and last_name - up to 32 characters long each,
    year_born integer.

Mind the following: the university always assigns an id number for foreign students with the digit 9 at the end. 
This allows for quick identification of students coming from abroad. Use an IDENTITY to help you generate such numbers. 

Solution
CREATE TABLE foreign_student(
	id INT identity(9, 10) PRIMARY KEY,
  	first_name VARCHAR(32),
  	last_name VARCHAR(32),
  	year_born INT,
  	
)


Instruction
We'll start off with UNIQUE. This constraint means that the values in a given column must be... well, unique. 
In other words, you can't have more than one row with the same value in such columns. Take a look at our instruction:

CREATE TABLE board_game (
    id IDENTITY PRIMARY KEY,
    name varchar(32) UNIQUE,
    genre varchar(32),
    min_players int,
    min_age int,
    price decimal(5,2)
);

As you can see, the column name has the UNIQUE constraint. It is placed after the type of the column.

Exercise
Our users added some games to the table board_game. Select all the information from the table and study the column name.
As you will see, all the values are unique and each of them appears only once.

Solution
SELECT * FROM board_game


Exercise
Let's add another board game to our table board_game. It's called Carcassonne, the genre is medieval, min_players is 2, 
min_age is 10 and the price is estimated at 32.99. Don't worry about the id column - as you may remember, IDENTITY will take care of numbering.

Solution
INSERT INTO board_game (name, genre, min_players, min_age, price)
VALUES(
	'Carcassonne',
  	'medieval',
  	2,
  	10,
  	32.99
)
