Instruction
UNIQUE is indeed very similar to PRIMARY KEY which we learned in the previous part. We sometimes say that UNIQUE creates an alternate key.

Exercise
It's time for you to create your own table board_game with the UNIQUE column. Let us remind you about the columns we have:

    id which is an IDENTITY and the primary key,
    name is a text of up to 32 characters (must be unique!),
    genre which is also a text of up to 32 characters,
    min_players and min_age which are integers,
    price which is a decimal value of up to 5 digits, 2 of which are after the decimal point.

Remember that the UNIQUE constraint is placed after the column type! 

Solution
CREATE TABLE board_game(
	id IDENTITY PRIMARY KEY,
  	name VARCHAR(32)UNIQUE,
  	genre VARCHAR(32),
  	min_players INT,
  	min_age INT,
  	price DECIMAL(5, 2)
)


Instruction
Do you remember that we could include more than one column in the PRIMARY KEY? The same rule applies to the UNIQUE constraint. Take a look:

CREATE TABLE board_game (
    id IDENTITY PRIMARY KEY,
    name varchar(32),
    genre varchar(32),
    min_players int,
    min_age int,
    price decimal(5,2),
    UNIQUE (name, genre)
);

At the end of the instruction, we put the key word UNIQUE and within parentheses we provided the pair of columns which must be unique.
From now on, the pair of values: name and genre, must be unique for each row. Particular values, however, may be the same, as long as the whole pair is unique. 
So (name='ABC', genre='horror') and (name='ABC', genre='fantasy') will be both acceptable, just as in the case of PRIMARY KEYs on multiple columns. 
In other words, no two games of the same genre can have the same name, but if the genres are different, then identical names are allowed.

Exercise
Run the example from our instruction to create the new table.

Solution
CREATE TABLE board_game (
    id IDENTITY PRIMARY KEY,
     name varchar(32),
     genre varchar(32),
     min_players int,
     min_age int,
     price decimal(5,2),
     UNIQUE (name, genre)
);


Instruction
As you can see, UNIQUE on multiple columns works exactly the way PRIMARY KEY does.
There is, however, one major difference between the two. We can only have one primary key in a given table, but we can have as many UNIQUE constraints as we want. 
Take a look at the example:

CREATE TABLE board_game (
  id IDENTITY UNIQUE,
  name varchar(32),
  genre varchar(32),
  studio varchar(32),
  min_players int,
  min_age int,
  price decimal(5, 2),
  UNIQUE (name, genre),
  UNIQUE (name, studio)
);

We now have one row with the UNIQUE constraint and two separate UNIQUE constraints, each containing two columns.
Is there a difference between one UNIQUE constraint with multiple columns and separate UNIQUE constraints for each column? 
There is. In the former case, all the columns must form a unique group of values. In the latter, each value in each column must be unique independently.

Exercise
We modified our table so that there are now two UNIQUE constraints. 
Try to test the table as previously: add rows with the same and different values and see what is allowed.

Solution
-- Some suggestions you may want to try: 
-- INSERT INTO board_game (name, genre, studio, min_players, min_age, price) VALUES ('Uno', 'business', 'Days of Wonder', 2, 7, 23.50);
-- INSERT INTO board_game (name, genre, studio, min_players, min_age, price) VALUES ('Scrabble', 'language', 'Ubisoft', 2, 6, 32.00);
-- INSERT INTO board_game (name, genre, studio, min_players, min_age, price) VALUES ('Monopoly', 'cards', 'Ubisoft', 2, 10, 35.20);


Instruction
Let's proceed to our second constraint: NOT NULL, and our second game type: RPG. Take a look at the following example:

CREATE TABLE rpg_game (
    id IDENTITY PRIMARY KEY,
    name varchar(32) UNIQUE NOT NULL,
    genre varchar(32),
    classes_no int,
    complexity int,
    min_players int
);

As you can see, we've added a new keyword NOT NULL after the type of the column. 
Its meaning should be quite clear: the value in the specific column cannot be a NULL. In other words - we must provide a value in the column for each row.

Exercise
As you could see in the example, we introduced a new type of game: rpg games. Now, we store the following information: 
id of the game, its name, genre, number of playable character classes (column classes_no), 
the complexity of the system (a score from 0 to 10) and the minimal number of players.
Select all the content from the new table rpg_game and study the values for the column name. A you can see, there are no NULL values.

Solution
SELECT * FROM rpg_game
