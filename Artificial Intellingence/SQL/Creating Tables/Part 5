Instruction
You might, however, wonder how double and real numbers are stored in the database.
It's pretty straightforward, you can put the numbers just as you do in English: 1.5 stands for one and a half 
(in some languages you would write it as 1,5 - this is not correct in SQL).
If you want to store really big or really small numbers in your database, you can use scientific notation in DOUBLE and REAL columns. For instance:

1.26e4

stands for 1.26 * 10^4, which is 12600. The letter e is the only letter allowed in number fields and it specifies the exponent for the base 10.

Exercise
Our first daredevil is ready to specify his weight. The user with user_id 10 weighs (column weight) 87.3 kg. Put this information into table body.

Solution
INSERT INTO body VALUES(
	10,
  	87.3
)


Instruction
You can also use math and logical operators with DOUBLE and REAL columns. If we only wanted to show people who weigh 80 kg or less, we could write the following:

SELECT *
FROM body
WHERE weight <= 80;

Exercise
Peter got feedback from his users. They complain that weight tells us nothing without height! 
After all, it's nothing extraordinary for a man 2 meters tall to weigh 85 kg. But the same weight is no good for someone whose height is 1.60 m.
In our table body, we now have three columns: user_id, weight and height. Select all the information about users for whom the ratio weight/height is lower than 0.5.

Solution
SELECT * FROM body 
WHERE weight/height <= 0.5


Instruction
There is, however, one problem about REAL and DOUBLE numbers which you must take into account. These are rounding errors. Why?
Well, DOUBLE and REAL numbers store information in the binary system. Values such as 0.2 don't have a precise binary representation. 
Numbers like 1/3 can't be represented with a finite decimal number at all. This is why such numbers need to be rounded.
And when you add a rounded number to a rounded number and the result is rounded as well - you can predict what happens.

Exercise
Have you noticed that we have a rather special user in our table with user_id 6? It's Thumbelina. We will use the information she provided to check rounding errors.
Select her height, weight and calculate the third column expected_zero in the following way: height - weight - height + weight. It should equal zero, right?

Solution
SELECT 
    height, 
    weight,
    height - weight - height + weight AS expected_zero
FROM body
WHERE user_id = 6


Instruction
That was a rather peculiar result, wasn't it? Let's see how we can fix it.
What kind of data is most important for every business? Money, of course. Because of rounding errors, floating point numbers are not suitable to store money values.
After all, we don't want the bank to think that we ALMOST or NEARLY paid back the credit!
Money values can be stored in another data type: DECIMAL. What is unique about this data type is that it stores numbers in the decimal system.
DECIMAL values are precise when they are added or divided by integer numbers. This is why they are an excellent choice for financial operations like calculating tax.
In SQL, DECIMAL(p,s) takes two numbers: p is the precision (that is, the number of digits in the number) 
and s stands for the scale (the number of digits after the decimal point). DECIMAL(5,2) is a number which has 5 digits, of which 2 are after the decimal point.

Exercise
The online dating business is going really well and Peter needs another table where he will keep money transfers from his users. 
Create a simple table payment with two columns: user_id which stores integer values and amount which is a decimal value with 6 digits, 
of which 2 are after the decimal point.

Solution
CREATE TABLE payment(
	user_id INT,
  	amount DECIMAL(6, 2)
)


Exercise
We've got a new payment from the user with user_id 13. He made a payment in the amount of 314.27. Insert this data into table payment.

Solution
INSERT INTO payment VALUES
(
	13, 314.27
)


Exercise
Let's check how much tax Peter is going to pay. Select 0.15 of every amount from the payment table. Name this column tax.

Solution
SELECT 0.15 * amount AS tax
FROM payment


Exercise
Let's go back to our table body and our Thumbelina problem. We changed the columns types to decimal. 
Again, select height, weight and calculate the third column expected_zero in the following way: height - weight - height + weight.
The user_id for Thumbelina is 6. Will this calculation equal zero now? Let's find out!

Solution
SELECT 
    height, 
    weight,
    height - weight - height + weight AS expected_zero
FROM body
WHERE user_id = 6
