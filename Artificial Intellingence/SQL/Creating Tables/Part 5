Instruction
You might, however, wonder how double and real numbers are stored in the database.
It's pretty straightforward, you can put the numbers just as you do in English: 1.5 stands for one and a half 
(in some languages you would write it as 1,5 - this is not correct in SQL).
If you want to store really big or really small numbers in your database, you can use scientific notation in DOUBLE and REAL columns. For instance:

1.26e4

stands for 1.26 * 10^4, which is 12600. The letter e is the only letter allowed in number fields and it specifies the exponent for the base 10.

Exercise
Our first daredevil is ready to specify his weight. The user with user_id 10 weighs (column weight) 87.3 kg. Put this information into table body.

Solution
INSERT INTO body VALUES(
	10,
  	87.3
)


Instruction
You can also use math and logical operators with DOUBLE and REAL columns. If we only wanted to show people who weigh 80 kg or less, we could write the following:

SELECT *
FROM body
WHERE weight <= 80;

Exercise
Peter got feedback from his users. They complain that weight tells us nothing without height! 
After all, it's nothing extraordinary for a man 2 meters tall to weigh 85 kg. But the same weight is no good for someone whose height is 1.60 m.
In our table body, we now have three columns: user_id, weight and height. Select all the information about users for whom the ratio weight/height is lower than 0.5.

Solution
SELECT * FROM body 
WHERE weight/height <= 0.5


Instruction
There is, however, one problem about REAL and DOUBLE numbers which you must take into account. These are rounding errors. Why?
Well, DOUBLE and REAL numbers store information in the binary system. Values such as 0.2 don't have a precise binary representation. 
Numbers like 1/3 can't be represented with a finite decimal number at all. This is why such numbers need to be rounded.
And when you add a rounded number to a rounded number and the result is rounded as well - you can predict what happens.

Exercise
Have you noticed that we have a rather special user in our table with user_id 6? It's Thumbelina. We will use the information she provided to check rounding errors.
Select her height, weight and calculate the third column expected_zero in the following way: height - weight - height + weight. It should equal zero, right?
