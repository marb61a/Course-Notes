Instruction
Well done! That was quite a lot of typing, right?
Well, this is where views come in handy. In SQL, a view is a "remembered" query. 
If we repeatedly perform the same complicated query, we have to write it from scratch every time.
When we create a view, the database can remember the query for us. All we need to remember is the name of the view.
In the teaching center database, there is some historical data - for instance, there are some courses which are no longer run (their next_edition field is NULL). 
So, each time we want to retrieve some information for only those courses which are actually run, we have to write:

SELECT *
FROM course 
WHERE next_edition IS NOT NULL;

A view could make our life easier. Take a look:

CREATE VIEW current_course AS 
SELECT *
FROM course 
WHERE next_edition IS NOT NULL;

As you can see, we provided the keywords CREATE VIEW, followed by the name of the view and the keyword AS. 
And that's it. A view will be created with the query we specify afterwards.

Exercise
Alright. Create the view course_lecturer joining courses and lecturers as in the previous exercise. To save you some typing, we have put the query in the template

Solution
CREATE VIEW course_lecturer  AS 
SELECT 
  course.id AS course_id,
  course.name AS course_name,
  course.description AS course_description,
  course.first_edition AS course_first_edition,
  course.next_edition AS course_next_edition,
  course.lecturer_id AS course_lecturer_id,
  lecturer.id AS lecturer_id,
  lecturer.first_name AS lecturer_first_name,
  lecturer.last_name AS lecturer_last_name,
  lecturer.started_work AS lecturer_started_work,
  lecturer.ended_work AS lecturer_ended_work
FROM course
JOIN lecturer
  ON course.lecturer_id = lecturer.id;


Exercise
Excellent! We have just created the view. How can we use it? Well, a view is a virtual table: it has its name, some columns and rows, like any other table. 
The view data is not stored physically, every time you retrieve data from the view, the database reruns the underlying query.
We can use a view in our queries just as we use other tables. Take a look:

SELECT *
FROM course_lecturer;

The above query will select all the information for courses together with their lecturers.

Solution
SELECT *
FROM course_lecturer
WHERE course_next_edition IS NOT NULL


Instruction
Good! As you can see, the view worked like any other table. In fact, views can be used in complicated queries such as joins too. Let's give it a go.

Exercise
Use a join to select course_name, lecturer_first_name and lecturer_last_name from the view course_lecturer together with the column title from the table position. 
Select only the current position (i.e. a position whose end_date is null). Use the ERD diagram to help you navigate around tables:
You will need to use the table job_history and two joins. 

Solution
SELECT
	cl.course_name,
    cl.lecturer_first_name,
    cl.lecturer_last_name,
    p.title
FROM course_lecturer cl
JOIN job_history j
ON j.lecturer_id = cl.lecturer_id
JOIN position p
ON p.id = j.position_id
WHERE j.end_date IS NULL


Exercise
Alright, now it's your turn to create a simple view. Remember: before the query, write CREATE VIEW name AS
Create a view current_lecturer which selects all information about lecturers who still work (their ended_work column is a null).

Solution
CREATE VIEW current_lecturer AS
SELECT *
FROM lecturer
WHERE ended_work IS NULL


Exercise
Use a join to select first_name and last_name of current_lecturer together with their current position title.

Solution
SELECT 
	cl.first_name,
    cl.last_name,
    p.title
FROM current_lecturer cl
INNER JOIN job_history j
ON j.lecturer_id = cl.id
JOIN position p
ON p.id = j.position_id
WHERE end_date IS NULL
