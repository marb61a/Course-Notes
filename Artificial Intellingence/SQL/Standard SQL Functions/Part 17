Instruction
See? The query returned nothing. You must use IS (NOT) NULL to check for NULL and NOT NULL values. If you don't use it, the query will return nothing.
It's easy to remember that x = NULL is wrong, but this phenomenon is much more difficult to notice with non-equality. 
Take a look at the column production_area. If you want to get all the products which have been produced outside EU, you could write:

SELECT *
FROM product
WHERE production_area != 'EU';

... but this query will not return those rows which have NULL in the column production_area.

Is this correct? It depends. If you want to find all the products which have a set value which is other than 'EU', then the condition is OK. 
If you want to find all the rows with anything other than 'EU' (including NULLs), then we need to use the following construction:

SELECT *
FROM product
WHERE production_area != 'EU'
  OR production_area IS NULL;

Exercise
Select the name for all the products with a price different than 299.99. Include NULLs!

Solution
select name 
from product
where price != '299.99'
or price is null


Exercise
Select the name for all products together with their categories and types. Exclude rows with category 'kitchen' and those rows which have no category set.

Solution
select name, category, type
from product
where category != 'kitchen'
and category is not null



Instruction
Excellent! NULL is also tricky when it comes to comparisons. If you write a query like this:

SELECT *
FROM product
WHERE price > 0.99;

the rows with a NULL price will not be displayed at all. 
This is because the database doesn't know whether NULL > 0.99 is true or false, so it just skips such rows and doesn't bother.

Exercise
Mr Amund released a certain series of products on April 30, 2014. 
Now, he would like to get all the names, categories and types of those products which were introduced any time later 
or which will be introduced in the future (i.e., they don't have a launch_date yet). Write the proper query

Solution
select name, category, type
from product
where launch_date > '2014-05-01'
or launch_date is null



Instruction
Another place where NULL won't work is the construction IN(a,b,c, ...). 
If you want to select those products which were introduced on February 25, 2015 or August 1, 2015 or don't have a launch_date, 
you could think it's correct to write the following:

SELECT *
FROM product
WHERE launch_date IN ('2015-02-25', '2015-08-01', NULL);

But this query is not correct. The proper way to do it is as follows:

SELECT *
FROM product
WHERE launch_date IN ('2015-02-25','2015-08-01')
  OR launch_date IS NULL;

The second method requires more typing, but at least it will include NULL too.

Exercise
Select all the columns for products from categories: kitchen, bathroom, or with unknown category.

Solution
select * from product
where category
in ('kitchen', 'bathroom')
or category is null



Instruction
Okay, let's move on. You should also watch out for NULLs when you work with calculations. 
Most of them will return a NULL if any of the arguments is a NULL. This may not be obvious.
For instance, you could think that the following expression:

firstname || ' ' || lastname

with firstname = 'Anne' and a NULL lastname will return 'Anne ' as a result. That's not true. You will get a NULL if any of the columns is NULL.

Exercise
Check it out for yourself. For all products, show their category, type and the following text: category and type separated with a colon (:), for example:
kitchen:fork
Name the last column category_type. Note what happens with the row which doesn't have a category.

Solution
select category, type,
(category || ':' || type) as category_type
from product
