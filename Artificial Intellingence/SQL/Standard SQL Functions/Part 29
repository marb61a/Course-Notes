Instruction
As we mentioned previously, you can use various conditions in a single CASE WHEN clause. As usual, here comes an example:

SELECT
  candidate_id,
  CASE
    WHEN pay_date < '2015-06-01' THEN 'database error'
    WHEN pay_date BETWEEN '2015-06-01'
      AND '2015-06-05' THEN 'accepted'
    WHEN pay_date = '2015-06-06'
      THEN 'conditionally accepted'
    ELSE 'not accepted'
  END AS payment_status
FROM application;

The situation is as follows: each candidate was supposed to pay an application fee between June 1 and June 5. 
If the system provides an earlier date, this must be clearly a mistake, because the bank account was only opened on June 1 (hence the status 'database error'). 
Those who indeed paid between June 1 and June 5 got a status 'accepted'. The university also agreed to accept those who paid a day later ('conditionally accepted'). 
There was, however, no mercy for those who paid even later – they did not qualify. Poor them.
Note that we could use the less than sign, the BETWEEN construction and the equality sign (=) - all in a single CASE clause. 
In other words, you can basically use all the operators and functions you've learned so far. This is the magic of searched CASE WHENs.

Exercise
For each candidate, show the first_name and last_name and a third column called overall_result: 
if the sum of score_math and score_language is 150 or more, show 'excellent'. 
If it's between 100 and 149, show 'good'. Otherwise, show 'poor'.

Solution
select first_name,
	last_name,
    case
    	when score_math + score_language > 150 then 'excellent'
        when score_math + score_language between 100 and 149 then 'good'
        else 'poor'
    end as overall_result
from candidate



Instruction
You can also work with NULLs in a CASE WHEN statement:

SELECT CASE
  WHEN fee IS NULL THEN 'no fee recorded'
  WHEN fee IS NOT NULL THEN 'fee recorded'
  END AS fee_information
FROM application;

We used the standard IS (NOT) NULL construction to check if the column is NULL. 
Note that we didn't have to use the ELSE part – a column value can be NULL or NOT NULL only. 
There is no other option, so we didn't need to specify it.

Exercise
For each candidate, show the first_name and last_name along with the third column contact_info with the values:

    'provided' when the column preferred_contact is not NULL.
    'not provided' otherwise.

Solution
select first_name,
	last_name,
    case
    	when preferred_contact is not null then 'provided'
        else 'not provided'
    end as contact_info
from candidate



Instruction
Okay, and what will happen to NULLs if you don't include IS NOT NULL in your CASE WHEN? 
They will be treated as those rows for which the ELSE part is executed. Let's check that.

Exercise
Show each candidate's ID, score in math and a third column which will show:

    'above average' for candidates with math score higher than 60.
    'below average' for candidates with math score equal to or less than 60.
    For other results, show 'not available'.

The column names should be: id, score_math, and result. Note what happens to the rows with a NULL score.

Solution
select id,
	score_math,
	case
    	when score_math > 60 then 'above average'
        when score_math <= 60 then 'below average'
        else 'not available'
    end as result
from candidate


Exercise
The courses have different requirements, so let's check who can actually become a student of Ethical Hacking (id = 3). 
Show the name of this course, the first_name and last_name of the candidate who applied for this course, and another column called qualification. 
The rules are as follows:

    If the student got above 80 in math, show 'qualified'.
    If the score in math is above 70, but the score in language is above 50, show 'qualified' as well.
    If the score in math is between 50 and 70, show 'possible'.
    Otherwise, show 'rejected'.

Solution
select co.name, 
	c.first_name,
    c.last_name,
    case
    	when score_math > 80 then 'qualified'
        when score_math > 70 and score_language > 50 then 'qualified'
        when score_math between 50 and 70 then 'possible'
        else 'rejected'
    end as qualification
from candidate c
join application a
on c.id = a.candidate_id
join course co
on co.id = a.course_id
where a.course_id = 3
