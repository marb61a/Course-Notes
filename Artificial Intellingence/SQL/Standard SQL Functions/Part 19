Instruction
Nice! You can also use COALESCE with other functions: concatenation, multiplication etc. Take a look:

COALESCE(category, '') || ':' || COALESCE(type, '')

In the above fragment, a NULL category or type will be replaced by an empty string. 
Thanks to this, we can still see the type when the category is NULL and vice versa.

Exercise
Show the following sentence: Product X is made in Y. Where X is the name and Y is the production_area. 
If the name is not provided, write 'unknown name' instead. 
If the production_area is not provided, write 'unknown area'. Name the column sentence.

Solution
select 'Product'||' '||
coalesce(name, 'unknown name')
||' '||'is'||' '||'made'||' '||'in'||' '||
coalesce(production_area, 'unknown area')
||'.'
as sentence
from product



Instruction
Good. You can also use COALESCE in calculations in a similar way:

COALESCE(price, 0) * 1.05

The above query will return the price times 1.05 or 0 (0 * 1.05 = 0) if the price is NULL.

Exercise
The company organized a discount campaign on all prices: -10%.
Show the names of all products together with their price and the new prices (name the column new_price). 
If there is no price, show 0.0 in the column new_price. Round the result to two decimal points.

Solution
select name, price,
round((coalesce(price, 0.0) * 0.9), 2) as new_price
from product



Instruction
Good job. The last thing you should know about COALESCE is that it can take more than two arguments. 
It will simply look for the first non-NULL value in the list and return it.

COALESCE(name, CAST(id AS varchar), 'n/a')

The above function will try to show the name of a given product. If the name is unknown, it will try to show its id instead. 
If the id is unknown too, it will simply show 'n/a'.

Exercise
Show the name of each product together with its type. When the type is unknown, show the category. 
When the category is missing too, show 'No clue what that is'. Name the column type.

Solution
select name,
coalesce(type, cast(category as varchar), 'No clue what that is') as type
from product



Instruction
Okay! Another nice function, albeit less frequently applied, is NULLIF. NULLIF(x, y) returns NULL if both x and y are equal. 
Otherwise, it returns the first argument. For example, NULLIF(5, 4) will return 5 while NULLIF(5, 5) will return NULL.
You might wonder how you can use this function in your queries. The answer is: it helps you avoid dividing by zero. Take a look at this theoretical example:
Let's say we have $10,000 and we want to give equal portions of this amount to some people. 
We know that the number of these people is stored in the column all_people. 
But we also know that there are some people who are rich already, so they don't need the money from us. 
Their number is stored in the column rich_people. Now, if we want to decide how much a single "not-rich" person should get, we could write:

10000 / (all_people - rich_people)

And the query works fine… unless all the people are rich. We will then get a 0 in the denominator. 
As you know, we can't divide by 0, so the database will return an error.

Luckily, we can use NULLIF:

10000 / NULLIF((all_people - rich_people), 0)

NULLIF checks if the subtraction equals 0. If it doesn't, it just gives the result of the subtraction. 
If it does, it returns a NULL. Dividing by 0 is illegal, but dividing by NULL will just give NULL – in this way, 
we can at least prevent our database from producing an error.

Exercise
Today, the customers at Highland Furniture get a special offer: the price of each product is decreased by 1.99! This means that some products may even be free!
Our customer has $1,000.00 and would like to know how many products of each kind they could buy.
Show the name of each product and a second column named quantity: Divide the sum of 1000.00 by the new price of each product.
Watch out for division by 0 and return a NULL instead.
Most quantities will have a decimal part. That's okay for this exercise.

Solution
select name,
1000/nullif((price - 1.99), 0)
as quantity
from product

