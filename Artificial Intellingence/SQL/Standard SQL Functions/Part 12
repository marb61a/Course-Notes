Instruction
Nice job. As you may expect, it is also possible to use BETWEEN with timestamps:

SELECT id
FROM aircraft
WHERE launched
BETWEEN '2015-11-01' AND '2015-12-01';

Again, we can skip the time – the database will fill in the missing fields with zeroes.
This automatic addition of zeroes is very convenient, but you need to watch out when retrieving rows for the whole month, year etc. 
If you want the aircraft launched in November 2015, you must use the condition we've just shown you:

BETWEEN '2015-11-01' AND '2015-12-01'

The second date is December 1 because the database will add the missing zeroes: 2015-12-01 00:00:00. 
This is the exact point in time when December starts (the beginning of its first day). 
If you wrote the second date as the last day of November (2015-11-30), you would skip all the aircraft which were launched on November 30, 2015.

Exercise
Find all the aircraft which were launched in 2015. Show the columns id and launched.

Solution
select id, launched
from aircraft
where launched
between '2015-01-01' and '2016-01-01'



Instruction
The last thing you should know about timestamps is that you can also sort them with ORDER BY:

SELECT
  id,
  launched
FROM aircraft
ORDER BY launched;

Of course, you can use DESC or ASC after ORDER BY.

Exercise
For all the aircraft launched in 2013 or 2014, show their id and launch date. Sort by the column launched from the newest to the oldest dates.

Solution
select id, launched
from aircraft
where launched
between '2013-01-01' and '2015-01-01'
order by launched desc


Exercise
For each aircraft, show its id as aircraft_id and calculate the average distance (call it average) covered on all its routes. 
Only take into account those aircrafts which were launched before January 1, 2014 and took more than 1 flight.

Solution
select a.id as aircraft_id,
avg(r.distance) as average
from aircraft a
join flight f on
f.aircraft_id = a.id
join route r 
on f.route_code = r.code
where launched < '2014-01-01'
group by a.id, f.aircraft_id
having count(f.aircraft_id) > 1



Instruction
Now, let's see how we can manipulate dates, times and timestamps. SQL provides a special function:
EXTRACT(field FROM column). Here field is one of the following: DAY, MONTH, YEAR, HOUR, MINUTE, SECOND.
Take a look:

SELECT EXTRACT(YEAR FROM launched) AS year
FROM aircraft
ORDER BY year;

The above query will extract the year from the column launched for each aircraft and will show it in ascending order.
The function EXTRACT is not supported by SQL Server. SQL Server has a similar function called datepart.

Exercise
Extract and show the month of each withdrawn date in the table aircraft (name the column month). 
Show the column withdrawn as the second column for reference.

Solution
select extract(month from withdrawn) as month,
withdrawn
from aircraft



Instruction
Great. How can we use this function? For instance, we can use it to change the way dates are shown. Take a look:

SELECT
  EXTRACT(DAY FROM launched) ||
  '-' ||
  EXTRACT(MONTH FROM launched) ||
  '-' ||
  EXTRACT(YEAR FROM launched)
FROM aircraft;

As a result, we'll get dates like '10-03-2012' instead of '2012-03-10'. But the query itself… Ugh… this doesn't look very nice.
This is why various databases implement new functions to work with time and date. These functions make such operations easier. 
However, there is no universal way which would work across most databases. This is why we won't show any of them here.

Exercise
For each route, show its code and the departure time in the following, changed format: hh.mm, where hh is the hour and mm the minutes. Name the second column time.

Solution
select code,
extract(h from departure) ||'.'||
extract(m from departure) as time
from route
