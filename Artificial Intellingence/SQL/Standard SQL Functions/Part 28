Instruction
In the previous example, we checked the values of a numerical column and produced string values as a result, 
but you can check a string column and produce numbers just as well. Check it out:

SELECT
  first_name,
  last_name,
  CASE preferred_contact
    WHEN 'mobile' THEN 5
    WHEN 'e-mail' THEN 0
    WHEN 'mail' THEN 10
    ELSE 5
  END AS contact_cost
FROM candidate;

In the above example, we want to calculate the cost of contacting a given candidate. 
Based on the values in the column preferred_contact, we provide some numerical values. 
lease note how we renamed the column in question with AS contact_cost, put after the END keyword.

Exercise
For each application, show the candidate ID (as candidate_id) and the course_id along with the following information: 
if the status is accepted, show 1. Otherwise, show 0. Name the last column accepted.

Solution
select candidate_id,
	course_id,
	case status
    	when 'accepted' then 1
        else 0
    end as accepted
from application



Instruction
That's correct! Having gone through Part 5 about NULLs, you might want to ask: okay, but how do NULLs behave in CASE WHEN?
The answer is pretty straightforward: NULL will always go to the ELSE condition if you include it. Let's check this out in an exercise.

Exercise
For table candidate, show each candidate's id, preferred_contact and the third column which will print:

    'traditional' if the preferred_contact is 'mail'.
    'modern' if it's 'mobile' or 'e-mail'.
    'other' otherwise.

Look what is shown for NULL values.

Solution
select id,
	preferred_contact,
    case preferred_contact
    	when 'mail' then 'traditional'
        when 'e-mail' then 'modern'
        when 'mobile' then 'modern'
        else 'other'
    end
from candidate


Exercise
Show the following columns: name of the course, first and last name of the candidate (first_name, last_name), and a column fee_information which shows:

    'high' when the fee is 50.
    'low' in any other case.

Sort the rows by the name of the course in DESCending order.

Solution
select co.name, c.first_name, c.last_name,
	case a.fee
    	when 50 then 'high'
        else 'low'
    end as fee_information
from candidate c
join application a
on a.candidate_id = c.id
join course co
on co.id = a.course_id
order by co.name desc



Instruction
We told you previously that there is also another type of CASE WHEN which is searched CASE WHEN. 
This is a slightly more complicated form, but don't worry – it's no rocket science. Take a look at the example:

SELECT CASE
  WHEN score_math > 80 THEN 'amazing mathematician'
  WHEN score_math > 60 THEN 'knows something about numbers indeed'
  ELSE 'not good enough'
END AS mathematical_skills
FROM candidate;

Let's analyze what is happening here. First of all, there is now no column name immediately after the keyword CASE. 
Instead, we put entire logical conditions with column names after each WHEN. 
Again, you can have as many WHEN ... THEN statements as you want and you can skip ELSE if you like.
A simple CASE WHEN took a single column and checked it against a number of values we provided. 
A searched CASE WHEN is more general – you can put different column names in each WHEN clause and you can use mathematical and logical operators. 
We'll show you that in a second.
In this case, those candidates who had a score greater than 80 will have 'amazing mathematician' displayed, 
those with a score higher than 60 but lower than 80 will have 'knows something about numbers indeed' shown instead. 
Those who scored 60 or less will have 'not good enough' displayed.

Exercise
Let's make a similar query for language skills. For each candidate, show their first and last name (first_name, last_name) 
along with a third column language_skills with the following possibilities:

    'amazing linguist' (>80 language points).
    'can speak a bit' (>50 language points).
    'cannot speak a word' otherwise.

Solution
select first_name,
last_name,
	case 
    	when score_language > 80 then 'amazing linguist'
        when score_language > 50 then 'can speak a bit'
        else 'cannot speak a word'
    end as language_skills
from candidate
