Exercise
Show the name of each product and the column ratio calculated in the following way: 
the price of each product in relation to its shipping_cost in percent, rounded to an integer value (e.g. 31).

If the shipping_cost is 0.00, show NULL instead.

Solution
select name,
round(price/nullif(shipping_cost,0.00)*100)
as ratio
from product


Exercise
Mr Amund wants to offer a new promotion.
The promotion is as follows: every customer who orders a product and picks it up on their own (i.e., no shipping required) can buy it at a special price: 
the initial price MINUS the shipping_cost! If the shipping_cost is greater than the price itself, 
then the customer still pays the difference (i.e. the absolute value of price â€“ shipping_cost).
Our customer has $1,000.00 again and wants to know how many products of each kind they could buy. 
Show each product name with the column quantity which calculates the number of products.
Drop the decimal part. If you get a price of 0.00, show NULL instead.

Solution
select name,
floor(1000/nullif((price - shipping_cost), 0))
as quantity
from product


Exercise
Select the name and launch_date of all products for which the launch date is not February 25, 2015.

Solution
select name, launch_date
from product 
where launch_date != '2015-02-25'
or launch_date is null


Exercise
Show the name of all products together with their price. If the price is equal to 19.99 change it to NULL. 
However, make sure there aren't any NULLs in the price column, show 'unknown' instead of them. Make sure the latter column is named price.

Solution
select name,
coalesce(cast(nullif(price, 19.99) as varchar ), 'unknown')
as price
from product


Exercise
Show the id, name and category of all products in the descending order of names.

Solution
select id, name, category
from product
order by name desc



Instruction
Things are getting serious now: let's add another table. You will work with the table product and the table advertisement in the next three exercises.
The table advertisement tells us which products have been advertised so far. It also informs us where and when this happened.

Exercise
For each advertisement, show its id, country, start_date and end_date together with the name of the product advertised.
If there is no start_date or no end_date, show 'n/a' instead. If there is no name of the product, show 'no name'. 
Order the results by the start_date, with the oldest dates shown first. The column names should be: id, country, start_date, end_date, and name.

Solution
select a.id, a.country,
coalesce(cast(a.start_date as varchar), 'n/a') as start_date, 
coalesce(cast(a.end_date as varchar), 'n/a') as end_date,
coalesce(cast(p.name as varchar), 'no name') as name
from advertisement a
join product p
on p.id = a.product_id
order by start_date asc


Exercise
For each product with a non-NULL name, show its id and the number of advertisements associated with it. Sort the results by the id in descending order.

Solution
select 
p.id,
count(a.product_id)
from product p
left join advertisement a 
on p.id = a.product_id
where p.name is not null
group by p.name, p.id, a.product_id
order by p.id desc


Exercise
For each advertisement, show its id and the following sentence (as sentence):
The advertisement with id {id} for the product {name} was started on {date}.
Replace {id}, {name} and {date} with the proper columns. If there is no name, show the product id, if the product id is missing too, show 'no name'. 
If there is no started_date, show 'n/a'. Ignore products with missing price.

Solution
select a.id,
'The advertisement with id '||a.id||
' for the product ' || coalesce(name, cast(p.id as varchar),'no name') ||
' was started on '|| coalesce(cast(start_date as varchar), 'n/a')
||'.' as sentence
from product p
join advertisement a
on p.id=a.product_id
where price is not null
