Instruction
That was correct again. There are also other rounding functions available in each database.

    ceil(x) (in SQL Server – ceiling()) returns the smallest integer which is not less than x. 
      In other words, it always rounds up (13.7 will become 14, and so will 13.1).
    floor(x) is the opposite of ceil(x) – it always rounds down, so 13.7 will become 13.
    trunc(x) (in MySQL – truncate()) is yet another function which always rounds towards 0. 
      For positive numbers, it works like floor(x) (13.7 becomes 13). For negative ones, it works like ceil(x) (-13.7 becomes -13).

What's more, each of the functions above can be used with a second argument to specify its precision, as in the case of round(x, precision).
When using the round(x, precision) function with two arguments, PostgreSQL requires us to pass the first argument of the numeric type. Use casting when appropriate.

Exercise
Let's check some rounding functions in the next few exercises. 
Show the character's name together with its weight, followed by the weight rounded up (name this column weight_rounded_up.

Solution
select name, weight, 
ceil(weight) as weight_rounded_up
from character


Exercise
Show each character's name together with its account_balance followed by the account_balance rounded down. Name the last column floor.

Solution
select name, account_balance, 
floor(account_balance) as floor
from character


Exercise
Show the character's name together with its stat_modifier, followed by the stat_modifier rounded with the function trunc(x,p) to a single decimal place.
Name the last column trunc. Observe how it behaves for positive and negative numbers.

Solution
select name, stat_modifier, 
trunc(stat_modifier, 1) as trunc
from character



Instruction
Nice! Of course, SQL features numerical functions other than rounding too. Let's take a look at two of them.
The first one is abs(x) and it returns the absolute value of x. 
Positive numbers will be expressed as they are, but negative ones will be expressed without the minus at the beginning.

SELECT abs(3), abs(-3);

The above query will return 3 twice. The absolute value of 3 is 3, just like the absolute value of -3. Let's give it a try.

Exercise
For each character, show its stat_modifier and its absolute value (as absolute_value).

Solution
select stat_modifier,
abs(stat_modifier) as absolute_value
from character



Instruction
Perfect. The last function we want to introduce is sqrt(x), which calculates the square root of x (x\sqrt{x}x

SELECT sqrt(25);

The square root of 25 is 5 and this is the result we'll get from the above query. Let's give it a try again.

Exercise
A nasty curse in our game changes your strength to its square root for a few minutes. 
Show each character's name, strength and calculate the square root of strength for each of them. Name the last column square_root.

Solution
select name, strength,
sqrt(strength) as square_root
from character


Exercise
Calculate the BMI for every character in the table. BMI is calculated in the following way:
BMI=weight in kilograms(height in meters)2 \text{BMI} = \frac{\text{weight\ in\ kilograms}}{(\text{height\ in\ meters})^2} BMI=(height in meters)2
weight in kilograms

Round the result to an integer. Show the characters name and the calculated BMI (column name bmi).

Solution
select name, round(weight / height ^ 2) as bmi              ---> ^ is in this case to the power of
from character


Exercise
A healing potion costs 50 gold coins. For each character with an account balance of at least 100, 
calculate how many healing potions it can buy (column name potion_amount) and how much money it will have left as a result of that purchase (column change).
Round the first column down to integers.

Solution
select floor(account_balance / 50) as potion_amount,
mod(account_balance, 50) as change
from character
where account_balance >= 100

