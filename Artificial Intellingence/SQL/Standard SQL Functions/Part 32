Instruction
Now, in certain situations you may also want to include DISTINCT in your CASE WHEN statements with COUNT. Take a look:

SELECT
  COUNT(DISTINCT CASE
    WHEN pay_date BETWEEN '2015-06-01' AND '2015-06-05'
      THEN candidate_id
  END) AS accepted_student,

  COUNT(DISTINCT CASE
    WHEN pay_date = '2015-06-06'
      THEN candidate_id
  END) AS conditionally_accepted_student,

  COUNT(DISTINCT CASE
    WHEN pay_date > '2015-06-06'
      THEN candidate_id
  END) AS not_accepted

FROM application;

What changed here? Two things. First of all, we included the keyword DISTINCT in each COUNT. 
Second, we now count student_ids and not pay_dates. What is the meaning of these changes?
We previously counted the number of accepted payments, conditionally accepted payments and not accepted payments. 
Now, we count the number of candidates who were accepted for at least one degree course, 
the number of candidates who were conditionally accepted for at least one degree course and not accepted for at least one degree course.
We had to include the keyword DISTINCT because a single candidate can apply for more than one degree course, 
so if a candidate made two payments for two courses on time, that candidate would be counted twice 
(the candidate can be still counted twice in two different columns if the candidate paid for one degree course and didn't pay for another,
but that's a different story).

Exercise
Show how many students paid the full fee of 50 (full_fee_sum) and the reduced fee of 10 (reduced_fee_sum), 
but if a certain student paid the same amount for more than one degree course, count them only once.

Solution
select
	count(
    	distinct
      	case
      	  when fee = 50 then candidate_id
      	end
    ) as full_fee_sum,
    count(
    	distinct
      	case
      	  when fee = 10 then candidate_id
      	end
    ) as reduced_fee_sum
from application



Instruction
Now, let's move on and analyze how we can use CASE WHEN and GROUP BY together. Take a look at the following example:

SELECT 
  course_id,
  SUM(CASE WHEN fee = 50 THEN 1 ELSE 0 END) AS full_fee,
  SUM(CASE WHEN fee = 10 THEN 1 ELSE 0 END) AS reduced_fee,
  SUM(CASE WHEN fee = 0  THEN 1 ELSE 0 END) AS no_fee
FROM application
GROUP BY course_id;

Look what happened in the above query: we count the number of applications with full fee, reduced fee and no fee for single courses. 
In other words, we know how many applications have a full fee for Baking Technology, Viking Studies, etc. 
We use SUMs as we did before, but now we also group the rows so that these sums refer to specific groups.

Exercise
For each course, show its id (name the column course_id) and three more columns: accepted, pending and rejected, 
each containing the number of accepted, pending and rejected applications for that course, respectively. 
(Don't show the courses that aren't present in the application table.)
Sort the results by ID in ASCending order.

Solution
select
  course_id,
    sum(
      case
        when status = 'accepted' then 1
        else 0
      end
    ) as accepted,
    sum(
      case
        when status = 'pending' then 1
        else 0
      end
    ) as pending,
    sum(
      case
        when status = 'rejected' then 1
        else 0
      end
    ) as rejected
from application
group by course_id
order by course_id
