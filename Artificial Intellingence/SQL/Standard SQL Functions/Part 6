Instruction
Ooopsâ€¦ something went wrong. Why did we get something so odd?

The type of columns weight and height is real, which is a floating point number. 
The internal representation here is binary arithmetic. It means that not all decimal numbers can be represented exactly. 
The computations are also not performed exactly - as we can see.

What can be done about it? Nothing :) That's the way binary arithmetic works. If you need exact computations, you have to use a decimal type.

Something to remember: When you deal with money values, you should always use a decimal type. 
Floating point numbers are for "scientific" computations on various measurements, like weight and height.

Exercise
Run the example query to find out. (SELECT 1\4)

Solution
SELECT 1/4;       ---> Returns 0



Instruction
Wait ... what? We got a 0? After all those years we've been taught it's 0.25? Has someone deceived us?
Not really, no. What happened here is called integer division. Integer division in SQL takes place when both the dividend and the divisor are integers. 
Since they are integers, SQL wants to return an integer result to match the number type. 
In other words, it brutally cuts off the decimal part, which is .25 in our case. Zero (0) is the only thing left.

What is more, the meaning of the operator / differs among databases. In PostgreSQL and SQL Server, it is integer division.
In MySQL and Oracle it is regular division (and the result of 1/4 is 0.25).
So, how can we make sure that the result includes the decimal part?

One thing you can do is change the type of one of the values to decimal: write 1/4.0 instead of 1/4.

Exercise
Run another example query to see what happens now. (SELECT 1/4.0 AS result;)

Solution
SELECT 1/4.0 AS result;           -----> Returns 0.2500000000 .....



Instruction
That's how you can force the desired result in SQL.
There is one 'but'. What can we do if both numbers are given as columns, e.g. hp/level?
We need to use another trick: convert one type to another explicitly. 
This procedure is called casting and it uses the structure shown in the example below:

SELECT CAST(hp AS numeric)/level
FROM character;

CAST(column AS type) changes the column to the specified type.

In SQL standard, there are three kinds of numeric data types:

    integer data types. These are types with names like INTEGER, INT, SMALLINT, BIGINT, etc.
    exact numeric data types (decimal types). These are types with names like NUMERIC and DECIMAL.
    inexact numeric data types, with names like FLOAT, REAL, DOUBLE PRECISION.

Data types are very tricky in databases. Each database has its own names and ranges for numeric data types. 
To get accurate information about the data types supported in your database check its documentation!

In this course whenever we're doing division of two integers, we'll always cast the numerator to a NUMERIC data type. 
In your real-world application, you may need a different precision and a different casting (for example cast both numbers to REAL).
