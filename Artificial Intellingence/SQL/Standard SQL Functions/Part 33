Exercise
For each candidate, with at least one application, show their id and three more columns called count_accepted, count_rejected, count_pending. 
Each of these columns should count the number of times the candidate has been accepted to courses, rejected or where the decision is pending.
Sort the rows in ASCending order by the id.

Solution
select
	candidate_id as id,
    sum(
	  case
      	when status = 'accepted' then 1
        else 0
      end
    ) as count_accepted,
    sum(
      case
        when status = 'rejected' then 1
        else 0
      end
    ) as count_rejected,
    sum(
      case
        when status = 'pending' then 1
        else 0
      end
    ) as count_pending
from application
group by candidate_id
order by candidate_id


Exercise
For each degree course, show its ID (as id) and the number of distinct candidates who applied for this course and have the preferred_contact set to:

    mobile (column: count_mobile),
    mail (column: count_mail)

Solution
select
	co.id,
    count(
      distinct
      case
        when preferred_contact = 'mobile' then candidate_id
      end
    ) as count_mobile,
    count(
      distinct
      case
        when preferred_contact = 'mail' then candidate_id
      end
    ) as count_mail
from application a
join candidate c
on c.id = a.candidate_id
join course co
on co.id = a.course_id
group by co.id



Instruction
We will now show you two other ways of using CASE WHEN with GROUP BY statements and aggregate functions. Take a look at the following example:

SELECT
  pay_date,
  COUNT(pay_date),

  CASE WHEN COUNT(pay_date) > 5
  THEN 'high' ELSE 'low' END
  AS number_of_payments

FROM application
GROUP BY pay_date;

The above query will group all applications according to the date where the payment was made. 
Then, it counts the number of payments on each date. Up to this point, it's pretty standard, right? 
But look what happens next: we can use CASE WHEN to show a comment on the values of the aggregate function. 
If it's more than 5, we'll say that the number is 'high'. Otherwise, we'll show 'low'.

Exercise
Show each preferred_contact form with the number of candidates who provided it (as candidates_count). 
Along with that, show a column entitled 'rating' and show:

    'high' if there are more than 5 candidates with this form of contact.
    'low' otherwise.

Solution
select
	preferred_contact,
	count(id) as candidates_count,
    case
      when count(id) > 5 then 'high'
      else 'low'
    end as rating
from candidate
group by preferred_contact
