Instruction
You may wonder what happens when you try to extract a field which is not present in the given type. 
Is it possible to extract a year from a time column? Let's find out.

Exercise
For each route, try to extract the year from the arrival column and see what happens

Solution
SELECT EXTRACT(YEAR FROM arrival) AS year
FROM route



Instruction
Error! That's what you got, as you could have expected. It's not possible to extract any part of date from a time column … 
But it's possible to extract a field of time from a date column. It will just provide a zero. Let's give it a try.

Exercise
For each flight, show its id, date, and the hour extracted from the field date (name the column hour).

Solution
select id, date, 
extract(hour from date) as hour
from flight



Instruction
Another thing we want to introduce is conversion between various time zones. 
As you know, the table route provides the departure and arrival times in Central European Time. 
Let's see how we can show the arrival time in the arrival airport time zone for a flight from Madrid to Tokyo:

SELECT arrival AT TIME ZONE 'Asia/Tokyo'
FROM route
WHERE from_airport = 'MAD'
  AND to_airport = 'NRT';

As you can see, we need to write AT TIME ZONE followed by the timezone in apostrophes. 
In our database, we usually provide the time zone in the format Continent/City, but you need to watch out, because some databases have other conventions.
MySQL uses the function convert_tz to convert timestamps between various timezones.

Exercise
For the route from Keflavik (KEF) to Gdansk (GDN), show the departure time from Keflavik in local time for Gdansk (Europe/Warsaw). Name the column local_time.

Solution
select departure 
AT TIME ZONE 'Europe/Warsaw' as local_time
from route
where from_airport = 'KEF'
and to_airport = 'GDN'


Exercise
For each route with a distance greater than 600 km, show its code and its departure and arrival at the local time for Tokyo, Japan. 
Name the last two columns local_departure and local_arrival.

Solution
select code,
departure at TIME ZONE 'Asia/Tokyo' as local_departure,
arrival at TIME ZONE 'Asia/Tokyo' as local_arrival
from route
where distance > 600



Instruction
Let's move on. Our database can add and subtract dates. Take a look:

SELECT withdrawn – launched
FROM aircraft;

The above query will calculate the difference between the columns withdrawn and launched. What will the result look like? Let's find out.

Exercise
Run the template query and analyze the result.

Solution
SELECT withdrawn - launched
FROM aircraft;



Instruction
The results we got are intervals: 1307 days 23:16:00 tells us that the difference between the two timestamps is 1307 days, 23 hours and 16 minutes. 
This is the result we got in our database (PostgreSQL), but be aware that other databases may return something else 
(like the number of milliseconds between these two dates, for instance).
The standard of SQL provides two types of intervals. 
One of them is INTERVAL 'x-y' YEAR TO MONTH, where x is the number of years and y is the number of months. 
You can add such an interval to a date/timestamp:

SELECT
  id,
  launched + INTERVAL '1-2' YEAR TO MONTH
FROM aircraft;

The above query will add 1 year and 2 months to each launched timestamp in the table aircraft.
Among popular databases, only MySQL does not support the syntax for INTERVAL YEAR TO MONTH.

Exercise
PerfectAir decided to use the withdrawn aircraft (id = 5). 
Show its id, its original withdrawn date and the withdrawn date postponed by 1 year and 6 months. 
Name the last column changed_date.

Solution
select id, withdrawn,
withdrawn + interval '1-6' year to month as changed_date
from aircraft
where id = 5
