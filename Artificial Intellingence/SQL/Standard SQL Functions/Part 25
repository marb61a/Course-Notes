Instruction
Okay. Finally, we can use ROUND with AVG to get a nicer appearance for our results:

SELECT
  ROUND(AVG(price), 2)
FROM project;

The above query will round the average price to two decimal places. 
Of course, you can also use AVG without the second argument: ROUND(AVG(price)) to get rounding to integer values.

Exercise
For each client in the project table, show the client ID and find the average price for all their projects rounded to integer values. 
Column names should be client_id and rounded_average.

Solution
select client_id,
round(avg(price)) as rounded_average
from project
group by client_id


Exercise
For each translator, show their first and last name together with the average price of all the projects they have completed (as rounded_average). 
Round the price to two decimal places. Count only the projects with the number of words greater than 500. 
Exclude translators who have completed fewer than 2 projects (all completed projects are present in the project table).

Solution
select t.first_name, t.last_name,
round(avg(p.price), 2) as rounded_average
from project p
join translator t
on t.translator_id = p.translator_id
where words > 500
group by t.first_name, t.last_name
having count(p.project_id) > 2



Instruction
Amazing. Another function we'll take a look at is SUM. As you know, SUM finds the sum from all the values. NULL values are ignored: they are not added to the sum.

SELECT SUM(price)
FROM project;

The above query will find the total revenue of the translation agency.

Exercise
Find the total number of words translated in all the projects. Name the column sum.

Solution
select sum(words)
from project


Exercise
Remember the translator with translator_id = 5 Adriana Fuentes? Let's go back there again. 
Sum all the words from all her projects except for project_id = 13 so that you only sum NULLs. Name the column sum.

Solution
select sum(words)
from project
where translator_id = 5
and project_id != 13



Instruction
Fine. Again, if we don't like to get NULL as a result, we can use COALESCE to replace it with any value of our choice:

SELECT COALESCE(SUM(price), 0)
FROM project;

If all prices happen to be NULLs, the above query will return 0 and not a NULL. Note that this time you can also write:

SELECT SUM(COALESCE(price, 0))
FROM project;

and the result will stay the same.

Exercise
Show translator ids with the sum of the prices of all the projects they have completed (as sum). 
Exclude project_id = 13 so that one of the translators has NULL prices only. Instead of that NULL sum, show 0.

Solution
select translator_id,
coalesce(sum(price), 0) as sum
from project
where project_id != 13
group by translator_id


Exercise
For client with id = 10, find the sum of the number of words in their projects, and the sum of the distinct number of words in their project. 
Name the columns sum and distinct_sum. Note that the results differ.

Solution
select sum(words),
sum(distinct words) as distinct_sum
from project
where client_id = 10
