Instruction
Hello and welcome to Part 6 of our course. In this part, we're going to deal with aggregate functions. COUNT, AVG, MIN, MAX ... 
You know these already, but you'll now have a chance to learn some new information.
Let's not waste any time. Today, we have managed to obtain some data from a translation agency. Let's find out what we're going to deal with.

Exercise
Select all the information from the first table: client.
Each client (company) has an id and a name. Not really complicated, right? Let's move on when you're done.

Solution
select * from client


Exercise
Select all the information from the second table: translator.
As you can see, the table presents some of the translators that the agency contracts with.
Each translator has: an id, a first and last name, and a start_date, which is the date on which the agreement was signed and the contract was officially started.

Solution
select * from translator


Exercise
The last table is a bit more complicated. It has many rows and many columns.
Select all the information from the last table: project. 
Note that you won't see all the rows present in the table – our platform displays only a limited number of rows for readability.
You can find the project_id, client_id and translator_id, of course. These columns should be clear. Then, you can also see:

    the start – that is, when the client commissioned the project.
    the deadline – when the project is due.

Afterward, we can see the price the client paid, the number of words for translation and two languages:

    the source language (lang_from),
    the target language (lang_to).

The final column (feedback) provides the client's feedback. Positive numbers mean that the client was very satisfied, 
negative ones mean that the client complained to some extent about the quality.

Solution
select * from project



Instruction
Nice. Now that you know the tables, let's get down to work.
We'll start off with a function you already know: COUNT(*), which is used to count all the rows in the result set. Just like this:

SELECT COUNT(*)
FROM translator
WHERE start_date > '2016-01-01';

The above query will provide the number of translators who started contracting with the translation agency on January 1, 2016 or later

Exercise
Now's your turn. Count the number of all the projects for the client with id 1. Name the column projects_no

Solution
select count(*) as projects_no
from project
where client_id = 1



Instruction
That's it! You may also remember that we can use COUNT with a column name:

SELECT COUNT(name)
FROM client;

What's the difference between COUNT(*) and COUNT(name) in this case? COUNT(*) will count all the rows in the table,
but COUNT(name) will skip those rows where name is NULL

Exercise
Count all the rows in the table project (name the column all_projects), then count those rows where price is not NULL (name the column projects_with_price)

Solution
// Do not need to use the where is not null condition
select count(project_id)
as all_projects,
count(price) as projects_with_price


Exercise
The agency manager gets a bonus of 5 for each project which got some feedback.
Show the theoretical sum the project manager could get if all the projects got some feedback (theoretical_bonus) and the actual bonus (actual_bonus).
from project

Solution
select count(*)*5
as theoretical_bonus,
count(feedback)*5 
as actual_bonus
from project



Instruction
Good job! It is less commonly known that you can use COUNT functions with any expression as an argument.
You can write:

SELECT COUNT(price * 2)
FROM project

This query counts the doubled prices. (Yes, the result will be the same as counting single prices.) 
We will see a real-world usage of this construction later in this section and in the next part of the course.

Exercise
The feedback of 0 doesn't mean anything to agency managers. They want to find out how many projects got meaningful (non-zero) feedback.
Count the number of project with non-zero feedback. Name the column projects_no.

Solution
select count(*) as projects_no
from project
where feedback != 0
