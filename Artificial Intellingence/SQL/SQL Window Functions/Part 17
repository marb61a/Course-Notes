Instruction
Note that the column specified as the argument of LEAD may be different than the column by which we sort rows:

SELECT
  name,
  opened,
  budget,
  LEAD(budget) OVER(ORDER BY opened)
FROM website;

The above query will still sort the rows by the opening date, but will show the budget of the next website instead of its opening date.
Now it's your turn to write a query with LEAD(x).

Exercise
For all the statistics of the website with id = 1, show the day, the number of users and the number of users on the next day.

Solution
select
	  day,
    users,
    lead(users) over(order by day)
from statistics
where website_id = 1



Instruction
Good job! LEAD can be extremely useful when we want to calculate deltas, i.e. differences between two values. A typical example may look like this:

SELECT
  day,
  clicks,
  LEAD(clicks) OVER(ORDER BY day),
  clicks - LEAD(clicks) OVER(ORDER BY day) 
FROM statistics
WHERE website_id = 2;

The above query calculates day-to-day deltas: the last column shows the difference in clicks between the current day and the next day.
From a business point of view, this could easily tell us a lot about the website: 
if the deltas for many rows are positive, and possibly increasing, then the website is expanding.
If, in turn, the deltas are mostly negative, we can start to worry about the performance of the website.

Exercise
For website_id = 1, show each statistics row: day, revenue, revenue on the next day and the difference between these two values.

Solution
select 
    day,
    revenue,
    lead(revenue) over(order by day),
    revenue - lead(revenue) over(order by day)
from statistics
where website_id = 1



Instruction
There is also another version of LEAD. It takes two arguments: LEAD(x,y). x remains the same – it specifies the column to return. 
y, in turn, is a number which defines the number of rows forward from the current value. For instance:

SELECT
  name,
  opened,
  LEAD(opened,2) OVER(ORDER BY opened)
FROM website;

This form of LEAD won't show the webpage with the opening date coming immediately after the current opening date. 
Instead, it will show the opening date 2 rows forward – the 1st row will show the 3rd date, etc.

Exercise
Take the statistics for the website with id = 2 between 1 and 14 May 2016 and show the day, the number of users and the number of users 7 days later.
Note that the last 7 rows don't have a value in the last column, because no rows '7 days from now' can be found for them.

Solution
select  
    day,
    users,
    lead(users, 7) over(order by day)
from statistics 
where day between '2016-05-01' and '2016-05-14'
and website_id = 2


Instruction
The last possible type of LEAD takes three arguments:

SELECT
  name,
  opened,
  LEAD(opened,2,'2000-01-01') OVER(ORDER BY opened)
FROM website;

The new (last) argument tells the function what it should return if no matching value is found. 
Previously, the last rows got NULLs from the function, because there were no "lead" (further) rows for them. 
Now, you can specify what should be displayed in such cases instead of the default NULL. 
Here, we show '2000-01-01'. Note that this value must be of the same type as the column itself: 
if you show dates with LEAD, the last argument must be a date too. You can't show "not available" or 0 instead.

Exercise
Modify the template based on the previous exercise so that it shows -1 instead of NULL if no LEAD value is found.

Solution
SELECT
  day,
  users,
  LEAD(users,7, -1) OVER(ORDER BY day)
FROM statistics
WHERE website_id = 2
  AND day BETWEEN '2016-05-01' AND '2016-05-14';
