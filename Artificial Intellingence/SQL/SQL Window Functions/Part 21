Exercise
Take the statistics for website_id = 1. For each row, show the day, 
the number of clicks on that day and the median of clicks in May 2016 
(calculated as the 16th value of all 31 values in the column clicks when sorted by the number of clicks).

Solution
select
    day,
    clicks,
    nth_value(clicks, 16) over(
      order by clicks rows between unbounded preceding 
      and unbounded following
    )
from statistics
where website_id = 1 and 
day between '2016-05-01' and '2016-05-31'


Exercise
For each statistics row of website_id = 3, show the day, the number of clicks on that day and a ratio expressed as percentage: 
the number of clicks on that day to the greatest number of clicks on any day. Round the percentage to integer values.

Solution
select
    day,
    clicks,
    round(cast(clicks as numeric)*100/first_value(clicks) 
      over (
        order by clicks desc
      ),0
    ) 
from statistics
where website_id = 3


Exercise
Select all the information from the advertisement table.
The owner of the websites decided to try another business model: now, there is a single advertisement on the websites and an auction takes place. 
Whoever pays the highest price, gets their ad on the websites for a single day. 
The table is very simple: it only shows how much was paid (price) after the auction on a given date (day).

Solution
select * from advertisement


Exercise
For each row, show the day, the price on that day and the price on the next day.

Solution
select
	day,
    price,
    lead(price) over(
      order by day
    )
from advertisement


Exercise
For each row, show the day, the price on that day, the price 7 days earlier and the difference between these two values.

Solution
select
	day,
    price,
    lag(price, 7) over(
      order by day
      rows between unbounded preceding
      and unbounded following
    ),
    price - lag(price, 7) over(
      order by day
      rows between unbounded preceding
      and unbounded following
    )
from advertisement

Exercise
For each row, show the day, the price on that day, the highest price ever (column name highest_price) and the lowest price ever (column name lowest_price).

Solution
select
	day,
    price,
    max(price) over(
      order by price
      rows between unbounded preceding
      and unbounded following
    )as highest_price,
    min(price) over(
      order by price
      rows between unbounded preceding
      and unbounded following
    )as lowest_price
from advertisement
