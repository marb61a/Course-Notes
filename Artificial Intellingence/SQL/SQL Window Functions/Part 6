Instruction
Of course, you can partition rows by multiple columns. Take a look:

SELECT
  route_id,
  ticket.id,
  ticket.price,
  SUM(price) OVER (PARTITION BY route_id, date)
FROM ticket
JOIN journey
ON ticket.journey_id = journey.id;

We wanted to show each ticket with the sum of all tickets on the particular route on the particular date. 
Neither of the tables would suffice on its own, so we had to join them together to get all the columns.

Exercise
Show the id of each journey, the date on which it took place, the model of the train that was used, 
the max_speed of that train and the highest max_speed from all the trains that ever went on the same route on the same day.

Solution
select
    j.id,
    j.date,
    t.model,
    t.max_speed,
    max(t.max_speed) over(partition by route_id, date)
from journey j
join train t 
on t.id = j.train_id


Exercise
For each journey, show its id, the production_year of the train on that journey, the number of journeys the train took and the number of journeys on the same route.

Solution
select
    j.id,
    t.production_year,
    count(j.train_id) over(partition by j.train_id),
    count(j.route_id) over(partition by j.route_id)
from journey j
join train t 
on t.id = j.train_id


Exercise
For each ticket, show its id, price, date of its journey, the average price of tickets sold on that day and the number of tickets sold on that day.
Exclude journeys with train_id = 5.

Solution
select
    t.id, 
    t.price,
    j.date,
    avg(price) over(partition by j.date),
    count(j.date) over(partition by j.date)
from ticket t
join journey j
on j.id = t.journey_id
where j.train_id != 5


Exercise
For each ticket, show its id, price and, the column named ratio. The ratio is the ticket price to the sum of all ticket prices purchased on the same journey.

Solution
select
    t.id, 
    t.price,
	cast(t.price as numeric) / sum(cast(t.price as numeric)) 
    over(partition by t.journey_id) as ratio 
from ticket t


Exercise
Select all the information from the table employee.
Each employee has a first and last name, a department where they work and a salary.

Solution
select * from employee


Exercise
For each employee, show their first_name, last_name, department, salary, as well as the minimal and maximal salary in that department.

Solution
select
    first_name,
    last_name,
    department,
    salary,
    max(salary) over(partition by department),
    min(salary) over(partition by department)
from employee


Exercise
For each employee, show their first_name, last_name, department, salary and the proportion of their salary to the sum of all salaries in that department. 
To avoid the integer division remember to CAST the dividend to numeric.

Solution
select
    first_name,
    last_name,
    department,
    salary,
    cast(salary as numeric) / sum(cast(salary as numeric)) over(partition by department)
from employee
