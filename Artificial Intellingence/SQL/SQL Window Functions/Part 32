Exercise
Show each subscription: id, length, start_date, payment_amount and the total amount paid for all subscriptions ever.

Solution
select
    id,
    length,
    start_date,
    payment_amount,
    sum(payment_amount) over()
from subscription


Exercise
Show each single rental: id, rental_period, payment_amount, the average amount paid from all the single rentals ever and the ratio of the two last columns.

Solution
select
	id, 
    rental_period,
    payment_amount,
    avg(payment_amount) over(),
    payment_amount / avg(payment_amount) over()
from single_rental


Instruction
Let's continue our adventure. In Part 3, we introduced PARTITION BY, which we used to show window functions for groups of rows 
rather than all rows in the query result. Take a look:

SELECT
  first_name,
  last_name,
  country,
  COUNT(id) OVER(PARTITION BY country)
FROM customer;

The above query shows the data about each customer along with the count of customers from the same country.

Exercise
For each movie, show its title, editor_rating, genre and the average editor_rating of all movies of the same genre.

Solution
select
    title,
    editor_rating,
    genre,
    avg(editor_rating) over(
      partition by genre
    )
from movie


Exercise
For each distinctive movie, show the title, the average customer rating for that movie (as the avg_movie_rating column), 
the average customer rating for the entire genre (as the avg_genre_rating column), and the average customer rating for all movies (as the avg_rating column).

Solution
select
	distinct m.title,
    avg(r.rating) over(
      partition by r.movie_id
    ) as avg_movie_rating,
    avg(r.rating) over(
      partition by m.genre
    ) as avg_genre_rating,
    avg(r.rating) over(
    ) as avg_rating
from review r
join movie m
on m.id = r.movie_id


Exercise
Show
    distinctive amount_worth values of giftcards,
    count of the number of giftcards with this value that were ever purchased (shown as count_1),
    count of all giftcards ever purchased (shown as count_2),
    show the percentage that the respective giftcard type constitutes in relation to all gift cards. 
    Show the last column rounded to integer values and name it percentage.

Solution
select
	distinct amount_worth,
    count(id) over(
      partition by amount_worth
    ) as count_1,
    count(id) over() as count_2,
    round(cast(count(id) over(
      partition by amount_worth) as numeric
    ) * 100/ count(id) over()) as percentage
from giftcard
