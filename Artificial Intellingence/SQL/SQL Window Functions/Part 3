Instruction
That's right. Now, take a look at another interesting example:

SELECT
  id,
  item,
  price,
  CAST(price AS numeric) / SUM(price) OVER()
FROM purchase
WHERE department_id = 2;

In the above query, we show all purchases from the department with id = 2. 
Note that we divide the price of the item purchased by the total price of all items purchased by that department. 
In this way, we can check what part of all expenditures each purchase constitutes.

Exercise
For all employees from department with department_id = 3, show their:
    first_name,
    last_name,
    salary,
    the difference of their salary to the average of all salaries in that department as difference.

Solution
select
    first_name,
    last_name,
    salary,
    salary - avg(salary) over() as difference
from employee
where department_id = 3



Instruction
You can use all aggregate functions with OVER(). Let's try an example with COUNT:

SELECT 
  id, 
  name, 
  COUNT(id) OVER()
FROM department
ORDER BY name ASC;

Here, we show the id and name of each department, plus the number of all departments. At the end, we sort the rows by name.

Exercise
For each employee that earns more than 4000, show their first_name, last_name, salary and the number of all employees who earn more than 4000.

Solution
select
    e.first_name,
    e.last_name,
    e.salary,
    count(id) over()
from employee e
where salary > 4000
group by e.first_name, e.last_name, e.salary, e.id


Exercise
For each purchase with department_id = 3, show its:
    id,
    department_id,
    item,
    price,
    maximum price from all purchases in this department,
    the difference between the maximum price and the price.

Solution
select
    p.id,
    p.department_id,
    p.item,
    p.price,
    max(p.price) over(),
    max(p.price) over() - p.price as difference
from purchase p
where department_id = 3
group by p.id, p.department_id, p.item, p.price


Exercise
For each purchase from any department, show its id, item, price, average price and the sum of all prices in that table.

Solution
select
    id,
    item,
    price,
    avg(price) over(),
    sum(price) over()
from purchase
group by id, item, price
