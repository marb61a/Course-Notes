Exercise
For each stock_change, show id, product_id, quantity, changed date, and the total quantity change from all stock_change for that product.

Solution
select
	id,
    product_id,
    quantity,
    changed,
    sum(quantity) over(
      order by product_id
      range current row
    )
from stock_change


Exercise
For each stock_change, show its id, changed date, and the number of any stock changes that took place on the same day or any time earlier.

Solution
select
	id,
    changed,
    count(quantity) over(
      order by changed
      range unbounded preceding
    )
from stock_change


Exercise
Our finance department needs to calculate future cashflows for each date. Let's help them. In order to do that, we need to show each order: 
its id, placed date, total_price and the total sum of all prices of orders from the very same day or any later date.

Solution
select
	id,
    placed,
    total_price,
    sum(total_price) over(
    	order by placed
        range between current row
        and unbounded following
    )
from single_order



Instruction
You may wonder what the default window frame is when it's not explicitly specified. This may differ between databases, but the most typical rule is as follows:
If you don't specify an ORDER BY clause within OVER(...), the whole partition of rows will be used as the window frame.
If you do specify an ORDER BY clause within OVER(...), the database will assume RANGE UNBOUNDED PRECEDING as the window frame. 
Let's check both of these cases in exercises.

Exercise
We'll start with not specifying an ORDER BY clause within OVER(...).
For each single order, show its id, date when it was placed, the total price and the sum of all total prices.
Note that the SUM computes the sum of all prices in the table, even though you did not specify the window frame.

Solution
select
    id,
    placed,
    total_price,
    sum(total_price) over()
from single_order



Instruction
Alright! When there is no ORDER BY clause in OVER(...), the query simply treats all rows as the window frame for each row. 
Nothing shocking, really â€“ that's the kind of queries we wrote in previous parts.
Now, we said the following: if there is an ORDER BY clause, RANGE UNBOUNDED PRECEDING will be used as the default window frame. 

Exercise
Just as in one of the previous exercises, we'll be looking for the running sum of single orders. 
For each order, show its id, placed date, total_price and the sum of all total prices. 
Sort the orders by the placed date, but do not specify any window frame.
The sum of total_prices should be calculated as if you wrote RANGE UNBOUNDED PRECEDING

Solution
select
	id,
    placed,
    total_price,
    sum(total_price) over(
      order by placed
    )
from single_order



Instruction
Alright! It's time to review what we've learned in this part:

You can define a window frame within OVER(...). The syntax is: [ROWS|RANGE] <window frame definition>.
ROWS always treats rows individually (like the ROW_NUMBER() function), 
RANGE also adds rows which share the same value in the column we order by (like the RANK() function).
<window frame definition> is defined with BETWEEN <lower bound> AND <upper bound>, where the bounds may be defined with:
UNBOUNDED PRECEDING,
n PRECEDING (ROWS only),
CURRENT ROW,
n FOLLOWING (ROWS only),
UNBOUNDED FOLLOWING

Exercise
Press Next Exercise to continue

Solution
No solution needed
