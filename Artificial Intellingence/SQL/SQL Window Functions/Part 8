Exercise
Use DENSE_RANK() and for each game, show name, size and the rank in terms of its size.

Solution
select
    name,
    size,
    dense_rank() over(order by size)
from game


Instruction
All right, and now, let us take a look at yet another way of ranking:

SELECT
  name,
  platform,
  editor_rating,
  ROW_NUMBER() OVER(ORDER BY editor_rating)
FROM game;

Let's run the example to see what's different now.

Exercise
Run the third example and see the difference in ranking.
Now, each row gets its own, unique rank number, so even rows with the same value get consecutive numbers.

Solution
SELECT
  name,
  platform,
  editor_rating,
  ROW_NUMBER() OVER(ORDER BY editor_rating)
FROM game;



Instruction
As you can see, ROW_NUMBER() gives a unique rank number to each row. 
Even those rows which share the same editor_rating value got different ranks that are expressed as consecutive numbers.
The only problem is with the order of these consecutive numbers. 
You could ask yourself – how does my database determine which of the games with editor_rating = 4 gets 1, 2 or 3 as the rank? 
The answer is – it doesn't, really. The order is nondeterministic. When you execute ROW_NUMBER(), you never really know what the output will be.

Exercise
Use ROW_NUMBER() and for each game, show their name, date of release and the rank based on the date of release.

Solution
select
    name,
    released,
    row_number() over(order by released)
from game


Exercise
For each game, show its name, genre and date of release. 
In the next three columns, show RANK(), DENSE_RANK() and ROW_NUMBER() sorted by the date of release.

Solution
select
    name,
    genre,
    released,
    rank() over(order by released),
    dense_rank() over(order by released),
    row_number() over(order by released) 
from game



Instruction
You may have noticed that the rank given by the function may be counter-intuitive to some extent. 
When we showed the rank sorted by editor_rating, the game with the lowest score got a rank of 1. 
We usually want it the other way around – the first place should be occupied by the best game. 
Luckily, this requires a very minor change to our query:

SELECT
  name,
  platform,
  editor_rating,
  RANK() OVER(ORDER BY editor_rating DESC)
FROM game;

Voila, add DESC after the column name in OVER( ... ) and the ranking order is reversed.

Exercise
Let's use DENSE_RANK() to show the latest games from our studio. 
For each game, show its name, genre, date of release and DENSE_RANK() in the descending order.

Solution
select
    name,
    genre,
    released,
    dense_rank() over(order by released desc)
from game
