Exercise
For each single rental, show the following columns: id, payment_date, payment_amount, 
the payment_amount of the previous single_rental in terms of the payment_date and the difference between the last two values.

Solution
select
    id,
    payment_date,
    payment_amount,
    lag(payment_amount) over(
      order by payment_date 
    ),
    payment_amount - lag(payment_amount) over(
      order by payment_date 
    )
from single_rentaL


Exercise
For each rental date, show the rental_date, the sum of payment amounts (column name payment_amounts) from single_rentals on that day, 
the sum of payment_amounts on the previous day and the difference between these two values.

Solution
select
  rental_date,
  sum(payment_amount) as payment_amounts,
  lag(sum(payment_amount)) over(
    order by rental_date
  ),
  sum(payment_amount) - lag(sum(payment_amount)) over(
    order by rental_date
  ) as difference
from single_rental
group by rental_date


Exercise
For each customer, show the following information: first_name, last_name, the sum of payments (AS sum_of_payments)
for all single rentals and the sum of payments of the median customer in terms of the sum of payments 
(since there are 7 customers, pick the 4th customer as the median).

Solution
select
    c.first_name,
    c.last_name,
    sum(s.payment_amount) as sum_of_payments,
    nth_value(sum(s.payment_amount), 4) over(
      order by sum(payment_amount)
      rows between unbounded preceding
      and unbounded following
    )
from customer c
join single_rental s
on s.customer_id = c.id
group by first_name, last_name


Exercise
For each movie, show its title, genre, editor_rating and its rank based on editor_rating for all the movies in the same genre.

Solution
select
    title,
    genre,
    editor_rating,
    rank() over(
      partition by genre
      order by editor_rating desc
    )
from movie


Exercise
For each review, show the following information: its id, title of the movie, the rating and the previous rating given by any customer 
to the same movie when sorted by the id of the reviews.

Solution
select
    r.id,
    m.title,
    r.rating,
    lag(r.rating) over(
      partition by m.id
      order by r.id
    )
from movie m
join review r
on m.id = r.movie_id


Exercise
select
    m.title,
    m.genre,
    avg(r.rating),
    rank() over(
      partition by m.genre
      order by avg(r.rating) desc
    )
from movie m
join review r
on r.movie_id = m.id
group by m.title, m.genre
