Exercise
For each sales row, show the following information: store_id, day, revenue and the future cash flow receivable 
by the headquarters (i.e. the total revenue in that store, counted from the current day until the last day in our table). 

Solution
select
    store_id,
    day,
    revenue,
    sum(revenue) over(
      partition by store_id
      order by day
      rows between current row
      and unbounded following
    )
from sales



Instruction
Now, let's talk about the use of analytical functions with PARTITION BY ORDER BY. Take a look at the following example:

SELECT
  country,
  city,
  opening_day,
  LEAD(city, 1, 'NaN') OVER(PARTITION BY country ORDER BY opening_day)
FROM store;

In the above example, we show the country, city and opening_day of each store, but we also show the city where the next store was opened –
in the same country, of course.

Exercise
For each store, show the sales in the period between August 5, 2016 and August 10, 2016: store_id, day, number of transactions, 
number of transactions on the previous day and the difference between these two values.

Solution
select
    store_id,
    day,
    transactions,
    lag(transactions) over(
      partition by store_id
      order by day
    ),
    transactions - lag(transactions) over(
      partition by store_id
      order by day
    )
from sales
where day between '2016-08-05' 
and '2016-08-10'



Instruction
Of course, other analytical functions are possible as well. Let's analyze another example:

SELECT
  country,
  city,
  rating,
  FIRST_VALUE(city) OVER(PARTITION BY country ORDER BY rating DESC)
FROM store;

In the above query, we're showing each store individually, but we also show the name of the city with the highest rating in that particular country. 
Note that this would be impossible without PARTITION BY – we couldn't get individual city names for each country separately.

Exercise
Show sales figures in the period between August 1 and August 3: for each store, show the store_id, the day, 
the revenue and the date with the best revenue in that period as best_revenue_day.

Solution
select
    store_id,
    day,
    revenue,
    first_value(day) over(
      partition by store_id
      order by revenue desc
    ) as best_revenue_day
from sales
where day between '2016-08-01' 
and '2016-08-03'


Exercise
For each row of the sales figures, show the following information: store_id, day, revenue, 
revenue a week before and the ratio of revenue today to the revenue a week before expressed in percentage with 2 decimal places.

Solution
select
    store_id,
    day,
    revenue,
    lag(revenue, 7) over(
      partition by store_id
      order by day
    ),
    round(((cast(revenue as numeric) / (lag(revenue,7) 
    over(partition by store_id order by day)))*100),2) 
from sales
