Instruction
Of course, there's also a function that shows a previous value, and its name is LAG(x):

SELECT
  name,
  opened,
  LAG(name) OVER(ORDER BY opened)
FROM website;

Now, instead of showing the next opening date, we show the previous opening date. Take a look: LAG

Note that you can always sort the rows in the reverse order with DESC and use LEAD(...) instead of LAG(...), or the other way around. In other words:

LEAD (...) OVER(ORDER BY ...)

is the same as

LAG (...) OVER (ORDER BY ... DESC)

and

LEAD (...) OVER(ORDER BY ... DESC)

is the same as

LAG (...) OVER (ORDER BY ...)

Exercise
Show the statistics for the website with id = 3: day, number of clicks that day and the number of clicks on the previous day.
Note that there won't be any previous value for the first row.

Solution
select
    day,
    clicks,
    lag(clicks) over(order by day)
from statistics
where website_id = 3



Instruction
And, of course, there's also an analogous version of LAG(x,y) with two arguments:

SELECT
  name,
  opened,
  LAG(opened,2) OVER(ORDER BY opened)
FROM website;

Now, instead of the previous row, we show the value '2 rows before'.
Some people have difficulties remembering the difference between LEAD(...) and LAG(...). 
You may think about it in the following way: let's imagine that your ordered rows are people hiking in the mountains. 
The people (rows) that are FURTHER ahead are currently LEADing, so you get them with LEAD. 
The people (rows) BEHIND you are currently LAGging (making progress slower), so you call them with LAG.

Exercise
Show the statistics for the website with id = 3: day, revenue and the revenue 3 days before.

Solution
select 
    day,
    revenue,
    lag(revenue, 3) over(order by day)
from statistics
where website_id = 3



Instruction
The last version of LAG takes three arguments and is very analogous to LEAD with three arguments:

SELECT
  name,
  opened,
  LAG(opened,2,'2000-01-01') OVER(ORDER BY opened)
FROM website;

The last argument is the value displayed when no 'lag' (previous) row can be found. Remember that this value must be of the type corresponding to the column.

Exercise
Modify the template from the previous exercise so that it shows -1.00 for rows with no revenue value 3 days before.

Solution
SELECT
  day,
  revenue,
  LAG(revenue,3, -1.00) OVER(ORDER BY day)
FROM statistics
WHERE website_id=3;


Exercise
RPM (revenue per thousand impressions) is defined as the revenue divided by the number of impressions, times 1000.
RPM = (revenue / number of impressions) * 1000
For each statistics row with website_id = 2, show the day, the RPM and the RPM 7 days later. Rename the columns to RPM and RPM_7.

Solution
select
    day,
    (revenue / impressions) * 1000 as RPM,
    lead((revenue / impressions) * 1000, 7) over(
      order by day
    ) as RPM_7 
from statistics
where website_id=2
