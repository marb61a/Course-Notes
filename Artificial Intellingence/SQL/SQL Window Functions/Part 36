Exercise
For each platform, show the following columns: platform, sum of subscription payments for that platform and its rank based on that sum 
(the platform with the highest sum should get the rank of 1).

Solution
select 
	  platform,
    sum(payment_amount),
    rank() over(
      order by sum(payment_amount) desc
    )
from subscription
group by platform


Exercise
Divide subscriptions into three groups (buckets) based on the payment_amount. Group the rows based on those buckets. 
Show the following columns: bucket, minimal payment_amount in that bucket and maximal payment_amount in that bucket.

Solution
select
    bucket,
    min(payment_amount),
    max(payment_amount)
  from
    (
      select
        payment_amount,
        ntile(3) over(
          order by payment_amount
        ) as bucket
      from subscription
    )c
group by bucket


Exercise
Select all the information from the doctor table.
Each doctor has an id, first and last name as well as their age.

Solution
select * from doctor


Exercise
Select all the information from the procedure table.
Each procedure contains the following information: id, procedure_date, doctor_id, patient_id (we are not going to work with the patient table to make things easier,
but the column is still there for completeness), category (like: dermal procedure, gastrointestinal procedure...), name, price and score. 
The last column is a number from 0 to 100 which comes from procedure evaluation by another colleague at the clinic.

Solution
select * from procedure


Exercise
For each doctor, show first_name, last_name, age and the average age of all doctors.

Solution
select
    first_name,
    last_name,
    age,
    avg(age) over()
from doctor
group by first_name, last_name, age


Exercise
For each procedure, show its id, category, price and the total sum of prices from all procedures in the same category.

Solution
select 
    id,
    category,
    price,
    sum(price) over(
      partition by category
    )
from procedure 


Exercise
For each procedure, show its name, the first and last name of the doctor, the score and the rank of the procedure in its category based on its score. 
The best procedure should get rank = 1. Allow multiple procedures with the same rank and gaps in numbering.

Solution
select
    p.name,
    d.first_name,
    d.last_name,
    p.score,
    rank() over(
      partition by category
      order by score desc
    )
from doctor d
join procedure p
on d.id = p.doctor_id
