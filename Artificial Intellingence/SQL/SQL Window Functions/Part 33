Exercise
For each customer, show the following information: first_name, last_name, the average payment_amount from single rentals by that customer 
and the average payment_amount from single rentals by any customer from the same country.

Solution
select 
	distinct c.first_name,
    c.last_name,
    avg(s.payment_amount) over(
      partition by c.id
    ),
    avg(s.payment_amount) over(
      partition by c.country
    )
from customer c
join single_rental s
on s.customer_id = c.id



Instruction
Take a look at this example:

WITH ranking AS
  (SELECT
    title,
    RANK() OVER(ORDER BY editor_rating DESC) AS rank
  FROM movie)

SELECT title
FROM ranking
WHERE rank = 2;

In the above example, we show the title of the second best movie in terms of the editor_rating.

Exercise
For each movie, show the following information: title, release_year, editor_rating and the rank based on editor_rating. 
The movie with the highest editor_rating should have rank = 1. The same rank values are possible for multiple rows, but don't leave gaps in numbering.

Solution
select 
	title,
	release_year,
	editor_rating,
    dense_rank() over(
      order by editor_rating desc
    )
from movie 


Exercise
Rank single_rentals in accordance with the price paid for them. For each single_rental, show the movie title, rental_period, payment_amount and the rank. 
Multiple single_rentals can share the same rank, the highest amount should have rank = 1 and gaps in numbering are allowed, too.

Solution
select
   m.title,
    s.rental_period,
    s.payment_amount,
    rank() over(
      order by s.payment_amount desc
    )
from movie m
join single_rental s
on m.id = s.movie_id


Exercise
Show the first and last name of the customer who bought the second most recent giftcard along with the date when the payment took place. 
Assume that an individual rank is assigned for each giftcard purchase.

Solution
with ranking as(
	select
  	  c.first_name,
  	  c.last_name,
      g.payment_date,
  	  rank() over(
        order by g.payment_date desc
      )
  	from customer c
  	join giftcard g 
  	on g.customer_id = c.id
)

select
   first_name,
    last_name,
    payment_date
from ranking
where rank = 2


Exercise
For each single rental, show the rental_date, the title of the movie rented, its genre, the payment_amount and the rank of the rental in terms of the price paid 
(the most expensive rental should have rank = 1). The ranking should be created separately for each movie genre. 
Allow the same rank for multiple rows and allow gaps in numbering too.

Solution
select
    s.rental_date,
    m.title,
    m.genre,
    s.payment_amount,
    rank() over(
      partition by m.genre
      order by s.payment_amount desc
    )
from movie m
join single_rental s
on m.id = s.movie_id
