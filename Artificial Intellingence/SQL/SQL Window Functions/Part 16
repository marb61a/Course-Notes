Exercise
Select all the information from the revenue table.
There are only three columns: department_id, year and amount. Mind you, you will need to write very similar queries in this part. The devil's in the detail!

Solution
select * from revenue


Exercise
For each row from department with id = 2, show its department_id, year, amount and the total amount from the current year + two previous years.

Solution
select
    department_id,
    year,
    amount,
    sum(amount) over(
      order by year
      rows 2 preceding
    )
from revenue
where department_id = 2


Exercise
For each row from department with id = 1, show its department_id, year, amount and the running average amount from all rows up to the current rows, sorted by the year.

Solution
select
    department_id,
    year,
    amount,
    avg(amount) over(
      order by year
    )
from revenue
where department_id = 1


Exercise
For each row sorted by the year, show its department_id, year, amount, 
the average amount from all departments in the given year and the difference between the amount and the average amount.

Solution
select
    department_id,
    year,
    amount,
    avg(amount) over(
      partition by year
      range current row
    ),
    amount - avg(amount) over(partition by year)
from revenue
group by department_id,year,amount


Exercise
Select all the information from the website table.
Each website has an id, name, monthly budget and the date of opening (opened).

Solution
select * from website


Exercise
Select all the information from the statistics table.
In this table, you can find the statistics from May 2016. Each generated statistics row corresponds to a certain website_id and a particular day.
Column users shows how many unique people visited the website that day. Column impressions indicates how many times an advertisement was shown to a user. 
clicks means the number of clicks on an advertisement. Column revenue is the total profit generated by those clicks on that day.

Solution
select * from statistics



Instruction
Okay! Let's introduce the general syntax for analytic functions:

<analytic function> OVER (...)

Looks familiar? That's right. Analytic functions are quite easy, their syntax is identical to aggregate functions. 
The difference is that aggregate functions calculate a cumulative result for all the rows in the window frame, 
while the analytic functions refer to single rows within the frame. 

Exercise
Press Next Exercise to continue

Solution
No solution needed



Instruction
Take a look at the very first example:

SELECT
  name, 
  opened,
  LEAD(name) OVER(ORDER BY opened)
FROM website;

The analytic function here is LEAD(name). LEAD with a single argument in the parentheses looks at the next row in the given order 
and shows the value in the column specified as the argument.

Exercise
Run the template from the instruction and study the result of LEAD(name).
Note that for each website, the function shows the name of the website that was opened next. The last row doesn't show any value, because there is no 'next' row.

Solution
SELECT
  name,
  opened,
  LEAD(name) OVER(ORDER BY opened)
FROM website
