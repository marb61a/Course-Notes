Exercise
For each author show:
    author_id,
    the number of books published by this author (name the column number_of_books),
    the rank of the author based on the number of published books in descending order.

Solution
select
    author_id,
    count(author_id) as number_of_books,
    rank() over(
      order by count(author_id) desc
    )
from book
group by author_id


Exercise
select
    publish_year,
    count(publish_year),
    lag(count(publish_year)) over(
      order by publish_year
    )
from (
	select publish_year,
	count(publish_year) over(
      partition by publish_year 
      order by publish_year
    )
	from book
) b
group by publish_year


Exercise
Select all the information from the customer table.
Whoever wants to buy anything in our store needs to register as a customer. 
Each customer in our system has an id, first_name and last_name, join_date and the country.

Solution
select * from customer


Exercise
Select all the information from the movie table.
Movies in our system have their ids and titles, of course. Then, there is the year of release, 
the genre of the movie and the rating by the editors of the store (0-10).

Solution
select * from movie


Exercise
Select all the information from the review table.
Customers can rate movies, too! This is done via reviews. Each review has an id, a rating (0-10), the customer_id and the movie_id, of course.

Solution
select * from review


Exercise
Select all the information from the single_rental table.
Now, let's get down to business. The first possibility in our store is to rent a single movie for a certain period of time. 
Each rental has an id, rental_date (when the rent starts), rental_period (in days), the platform (desktop, mobile or tablet), 
customer_id, movie_id, payment_date (you can pay a few day after you rent) and the payment_amount, or the price.

Solution
select * from single_rental


Exercise
Select all the information from the subscription table.
Real movie lovers get a subscription instead of single rentals. Each subscription has an id, a length (in days), 
a start_date, a platform (same as the platforms for single rentals), payment_date, payment_amount and customer_id.

Solution
select * from subscription


Exercise
Select all the information from the giftcard table.
The last thing you can purchase are giftcards for someone else. Each giftcard has an id, amount_worth (30, 50 or 100 dollars to spend in our store), 
customer_id, payment_date and payment_amount.

Solution
select * from giftcard



Instruction
We started our adventure with window functions in part 2, where we introduced the basic concept of window functions with an aggregate function + OVER(). 
Take a look at the example:

SELECT
  title,
  editor_rating,
  AVG(editor_rating) OVER()
FROM movie;

This simple query will show each movie with the average editor_rating from all movies as the last column.

Exercise
Show each gift card purchased: id, amount_worth and the total number of all gift cards purchased.

Solution
select
    id,
    amount_worth,
    count(id) over()
from giftcard
