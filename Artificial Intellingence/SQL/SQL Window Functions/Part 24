Exercise
For each day of the sales statistics, show the day, the store_id of the best store in terms of the revenue on that day, and that revenue.

Solution
with ranking as(
  select
	store_id,
    day,
  	revenue,
    rank() over(
      partition by day
      order by revenue desc
    )
    from sales
)

select
    store_id,
    day,
    revenue
from ranking
where rank = 1


Exercise
Divide the sales results for each store into four groups based on the number of transactions and for each store, 
show the rows in the group with the lowest numbers of transactions: store_id, day, transactions.

Solution
with ranking as (
  select
      store_id,
      day,
      transactions,
      ntile(4) over(
        partition by store_id
        order by transactions
      )
  from sales
)

select
    store_id,
    day,
    transactions
from ranking
where ntile = 1



Instruction
In part 5, you got to know window frames. Can we use them together with PARTITION BY to create even more sophisticated windows? Of course we can. Take a look:

SELECT
  id,
  country,
  city,
  opening_day,
  rating,
  MAX(rating) OVER(
    PARTITION BY country
    ORDER BY opening_day
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM store;

In the above example, we show some information about each store and the maximal rating of any store opened up to that date 
(that's where we need a window frame) in the respective country (that's where we need PARTITION BY).

Exercise
Show sales statistics between August 1 and August 7, 2016. For each row, show store_id, day, revenue and the best revenue in the respective store up to that date.

Solution
select
    store_id,
    day,
    revenue,
    max(revenue) over(
      partition by store_id
      order by day
      rows between unbounded preceding
      and current row
    )
from sales
where day between '2016-08-01' 
and '2016-08-07'


Exercise
Take sales from the period between August 1 and August 10, 2016. For each row, show the following information: store_id, day, 
number of transactions and the average number of transactions in the respective store in the window frame starting 2 days before
and ending 2 days later with respect to the current row.

Solution
select
    store_id,
    day,
    transactions,
    avg(transactions) over(
      partition by store_id
      order by day
      rows between 2 preceding
      and 2 following
    )
from sales
where day between '2016-08-01' 
and '2016-08-10'
