Instruction
Another JOIN type is the FULL JOIN. FULL JOIN is a union of LEFT JOIN and RIGHT JOIN. 
It shows matching rows from both tables, rows that have no match from the left table, and rows that have no match from the right table. Take a look at this example:

SELECT
  course.name
  lecturer.name
FROM course
FULL JOIN lecturer
  ON course.lecturer_id = lecturer.id

Exercise
Display the title of each book along with the name of its author. Show all books, even those without an author. 
Show all authors, even those who haven't published a book yet. Use a FULL JOIN.

Solution
SELECT 
	TITLE, 
    NAME
FROM BOOK
FULL JOIN AUTHOR ON
AUTHOR.ID = BOOK.AUTHOR_ID



Instruction
Cool! One of the last things we would like to show you is a special kind of JOIN: the CROSS JOIN. Here's the general syntax of a CROSS JOIN:

SELECT
  *
FROM book
CROSS JOIN author

The result of a CROSS JOIN is known as a Cartesian product. In short CROSS JOIN combines all rows from one with all rows from the right table, 
essentially producing all possible combinations.

Exercise
Your school is holding a contest in which you're tasked with correctly matching the names of authors to the names of the books 
they wrote from a list of all book-author pairs.
Generate all possible pairs of book titles and author names. Consider only books whose author's name is Ray Henry.

Solution
SELECT 
	TITLE, 
    NAME
FROM BOOK
CROSS JOIN AUTHOR
WHERE NAME = 'Ray Henry'



Instruction
Good job! As you remember, you can combine INNER JOIN with WHERE without problems.
However, using WHERE with a LEFT JOIN, RIGHT JOIN or FULL JOIN can sometimes be tricky. 
Let's see an example. Suppose you want to select all courses and show only those lecturers who were employed after 2004. Here's the query:

SELECT
  course.name,
  lecturer.name
FROM course
LEFT JOIN lecturer
  ON course.lecturer_id = lecturer.id
WHERE lecturer.emp_year > 2004

Imagine that a particular course (e.g. "SQL Joins") doesn't have a lecturer assigned yet. 
This course will NOT show up in the result of the query. Why? 
Since the course doesn't have a lecturer, the column lecturer.emp_year is null and the condition lecturer.emp_year > 2004 is not true.
If you use a condition on the left table the LEFT JOIN can yield the same result as an INNER JOIN. 
If you want to keep the rows with no lecturer in the result, you must explicitly include empty (null) values:

SELECT
  course.name,
  lecturer.name
FROM course
LEFT JOIN lecturer
  ON course.lecturer_id = lecturer.id
WHERE lecturer.emp_year > 2004
  OR lecturer.emp_year IS NULL

Exercise
Show all books with their movie adaptations. Select each book's title, the name of its publishing house, the title of its adaptation, 
and the type of the adaptation.

Solution
SELECT
	b.title,
    b.publishing_house,
    a.title,
    a.type
FROM book b
INNER JOIN adaptation a
ON b.id = a.book_id
WHERE a.type = 'movie'



Instruction
You can use this technique to filter rows with no matching rows.
Suppose we want to get a list of lecturers that still do not have any course assigned:

SELECT
  course.name
  lecturer.name
FROM lecturer
LEFT JOIN course
  ON course.lecturer_id = lecturer.id
WHERE lecturer_id IS NULL

Notice that we added WHERE lecturer_id IS NULL line.
First, our database LEFT JOINs the table. 
Then, we simply inform the database that we'd like to select only those rows where for which the value of lecturer_id IS NULL 
(i.e. there is no matching course for a given lecturer). Note that the lecturer_id is a column in the right table, course. 
This value will be missing if there is no matching course.

Exercise
Show the title and publish_year for books that do not have any reviews in the book_review table.

Solution
SELECT
	b.title,
    b.publish_year
FROM Book b
LEFT JOIN book_review r
ON b.id = r.book_id
WHERE r.book_id IS NULL
