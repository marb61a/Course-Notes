Instruction
When joining tables, you'll sometimes find that they share a few column names. For example, it is common for tables to have an id column. 
In this case, if two or more tables you're joining share some column names, 
you must always refer to those identical column names using the table name followed by a dot and the name of the column you want to select.

SELECT
  employee.id AS employee_id,
  position.id AS position_id
FROM position
JOIN employee
  ON position.id = employee.position_id

In the SELECT clause we specify the columns as employee.id and position.id to avoid ambiguity. 
If we don't do that, the database won't know which id column we are referring to.
We also aliased the columns to employee_id and position_id, respectively, to make the result more readable.

Exercise
For each book, show its title, adaptation title, adaptation year, and publication year.
Consider only books with a rating lower than the rating of their corresponding adaptation. 
Additionally, show only those books for which an adaptation was released at most four years after the book was published.
Rename the title column from the book table to book_title, and the title column from the adaptation table to adaptation_title.

Solution
SELECT 
  book.title as book_title,
  adaptation.title as adaptation_title,
  book.publish_year,
  adaptation.release_year
FROM book
JOIN adaptation
ON book.id = adaptation.book_id
WHERE adaptation.release_year - book.publish_year <= 4
AND book.rating < adaptation.rating


Instruction
The JOIN clause we used is the most common way of joining tables. It's full name is INNER JOIN. 
In other words JOIN is a synonym for INNER JOIN; they both mean exactly the same thing.
Some people prefer to use INNER JOIN for the sake of clarity, especially in long queries with different kinds of joins used together.

Exercise
Join the author and book tables using an INNER JOIN.
Show the title of each book together with its rating. Consider only those books that were published by authors who are still alive.

Solution
SELECT 
    book.title, 
    book.rating 
FROM book
INNER JOIN author
ON book.author_id = author.id
WHERE death_year IS NULL


Instruction
Another common type of JOIN is the LEFT JOIN. It is used when we want to return ALL rows from the table to which we are joining another table, 
even if there is no matching row in the second table.
Imagine you have two tables: course (with columns id, name and lecturer_id) and lecturer (with columns id and name). 
Some courses do not have lecturers yet, as the term is still being planned. 
You'd like to list all courses and the lecturers teaching team, including courses that don't yet have lecturer assigned.
Here's how you would do that:

SELECT
  course.name AS course_name
  lecturer.name AS lecturer_name
FROM course
LEFT JOIN lecturer
  ON course.lecturer_id = lecturer.id

LEFT JOIN tells the database to list ALL rows from the left table (course), even if there is no matching row for the ON condition in the right table (lecturer). 
That way, you'll see all courses, even if the course doesn't have a lecturer yet.
The database will display NULL for the missing rows

Exercise
Show the title of each book together with the name of its adaptation and the date of the release.
Show all books, regardless of whether they had adaptations.

Solution
SELECT 
	book.title, 
    adaptation.title, 
    adaptation.release_year
FROM book
LEFT JOIN adaptation
ON book.id = adaptation.book_id


Instruction
Great! If there is a LEFT JOIN, there must be a RIGHT JOIN, too, right? What's the difference?
Well, recall that a LEFT JOIN shows all rows from the left table, even if there are no matching rows for the ON condition in the right table.
Similarly a RIGHT JOIN shows all rows from the right table, even if there are no matching rows for the ON condition in the left table.
Suppose that this time, we want to show all lecturers and the courses they are teaching; if a lecturer has not yet been assigned to a course, 
we still want to show their name. We can do that like this:

SELECT
  course.name AS course_name
  lecturer.name AS lecturer_name
FROM course
RIGHT JOIN lecturer
  ON course.lecturer_id = lecturer.id
  
Exercise
We've added a new table: book_review. It's simple and contains only three columns:

    book_id - the ID of a reviewed book,
    review - the summary of the review.
    author - the name of the review's author.

Join the book_review and book tables using a RIGHT JOIN. Show the title of the book, the corresponding review, and the name of the review's author. 
Consider all books, even those that weren't reviewed.

Solution
SELECT
	title, 
    review, 
    author
FROM book_review 
RIGHT JOIN book
ON book.id = book_review.book_id 
