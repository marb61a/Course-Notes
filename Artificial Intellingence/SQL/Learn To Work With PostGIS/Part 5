Instruction
We've already learned how to change the internal PostGIS format to WKT (via the ST_AsText function). How about doing it the other way round?
The ST_GeomFromText function allows us to change the coordinates we provided to the internal PostGIS format.
It may help us to check whether something in our data corresponds to the provided longitude and latitude. 
Let's suppose that we have latitude = 37.468980000000002 and longitude = -122.432969999999997. 
It's quite easy to make a point with this information: simply type POINT and pass in the longitude and latitude as the arguments, in that order, like so:

 POINT(-122.432969999999997 37.468980000000002) 

Note that we inverted the longitude and latitude. As we mentioned previously, the longitude comes first in PostGIS!
Alright, now that we've constructed our point, we can check whether something corresponds to these coordinates in the sf_atms table.
Let's take a look at how this can be done:

SELECT
  coordinates
FROM sf_atms
WHERE coordinates = ST_GeomFromText(
  'POINT(-122.432969999999997 37.468980000000002)',
   4326)

There are two very important things worth noting. First, we had to put our POINT(-122.432969999999997 37.468980000000002) into quotation marks.
This is because ST_GeomFromText expects a string as its first argument. The second argument is an SRID. In this case the SRID equals 4326.
Don't worry about what SRIDs are. We'll get to it in a while.

Exercise
You have two coordinates:

    latitude: 37.8018500234353283,
    longitude: -122.44882987574394

Create a point out of them and check whether there is any attraction in the sf_sights table that matches this exact point. 
Display the name of the place and its coordinates in PostGIS format.

Solution
SELECT
  name,
  coordinates
FROM sf_sights
WHERE coordinates = ST_GeomFromText(
  'POINT(-122.44882987574394 37.8018500234353283)',
   4326)
   

Instruction
Well done! It's time to move on and discover the next subtype of geometry: linestrings. Linestring are paths between two or more points. 
The first point of a linestring is the start (initial) point, and the last point of the linestring is the end (final) point. 
Linestrings can be closed when the start and end point are the same. Linestrings are also called simple if they do not touch or cross themselves. 
The picture below shows the various kinds of valid linestrings:
Linestrings are perfect for representing rivers, tram tracks, subway routes and various kinds of roads or passageways.

Exercise
Let's see what kinds of linestrings we have in our database. First, select all the information from the table sf_selected_railways. 
Do not forget to check the map visualization.
This table contains some of the railways used by trams, trains and the subway system. 
Each railway has a unique identifier (id) and a geometrical representation (course).

Solution
SELECT * FROM sf_selected_railways


Exercise
Select all the information from the table sf_bicycle_routes.
This table is quite similar to the one with railways. Each bicycle route has a unique identifier (id), a geometrical representation (course) 
and a rating of its condition (condition_rating) on a scale from 1 to 3.

Solution
SELECT * FROM sf_bicycle_routes


Exercise
Select the WKT for the route whose id equals 1 from the sf_bicycle_routes table.
As you can see, each linestring starts with the word LINESTRING, followed by a pair of parentheses. 
Inside the parentheses, we define all points that are contained in the linestring. 

Solution
SELECT
	ST_AsText(course)
FROM sf_bicycle_routes
WHERE id = 1


Instruction
Next, let's get to know a couple functions that will be useful when we work with linestrings.
The first two are ST_StartPoint(geometry) and ST_EndPoint(geometry). Take a look at how they're used:

SELECT 
  ST_AsText(ST_StartPoint(course)), 
  ST_AsText(ST_EndPoint(course)) 
FROM sf_selected_railways 
WHERE id = 1;

In the query above, we show the start and end point of the railway with id = 1. Note that we used ST_AsText(...) and passed in ST_StartPoint(...) as its argument. 
That's because ST_StartPoint and ST_EndPoint return points in the internal PostGIS format, which is not very human-readable. 
Thus, we used ST_AsText(...) to convert it to WKT.

Exercise
Show the start points (in the WKT format) of all bicycle routes in the table sf_bicycle_routes that have a condition_rating of 2.

Solution
SELECT
	ST_AsText(ST_StartPoint(course))
FROM sf_bicycle_routes
WHERE condition_rating = 2


As you can tell, spatial functions can be nested, or put inside one another.
The X and Y coordinates of each point are separated by a space, and the points themselves are separated by commas.
