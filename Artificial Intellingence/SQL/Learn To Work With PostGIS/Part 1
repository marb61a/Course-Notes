Exercise
Before moving on, let's get to know the table we'll use in the quiz. The entire course is about geography, and so is the quiz table! 
Here's the first task: select all the information from the table travel_spending. You can always view all the tables in the Database tab on the right.
Done? Now, let's talk about the table in detail. A traveler named Mark decided to keep track of his spendings on each day of his trip throughout Asia. 
You can view the unique id of each day, its date, the country he visited on that day, the specific city he was in, and the usd_amount he spent that day.

Solution
SELECT * FROM travel_spending


Exercise
Select all rows from the table travel_spending that have 'Japan' in the country column.

Solution
SELECT * 
FROM travel_spending
WHERE country = 'Japan'


Exercise
For each country in the table travel_spending, show the country name and the average daily amount (in USD) Mark spent there.

Solution
SELECT
	country,
    AVG(usd_spent)
FROM travel_spending
GROUP BY country


Exercise
Show the city names and usd_spent for all rows with less than 100 usd_spent. Order the results in descending order (from most to least amount spent).

Solution
SELECT
	city,
    usd_spent
FROM travel_spending
WHERE usd_spent < 100
ORDER BY usd_spent DESC


Exercise
For each city, show its name and the average amount of usd_spent there, calculated using data from all days spent in the city. 
Only show rows for which the average usd_spent is greater than 90.

Solution
SELECT
	city,
    AVG(usd_spent)
FROM travel_spending
GROUP BY city
HAVING AVG(usd_spent) > 90


Exercise
Take a look at another table we've prepared: gdp_per_capita. GDP per capita is a statistical measure of a region's economic performance. 
Our table has two columns: city and gdp_value.
For each city, show a single row with three columns: name of the city, usd_spent, and gdp_value.

Solution
SELECT
	g.city,
    g.gdp_value,
    t.usd_spent
FROM gdp_per_capita g
JOIN travel_spending t
ON g.city = t.city


Instruction
Congratulations on passing our preliminary quiz. It seems you know enough SQL to start digging into PostGIS. 
In this part, we'll explain the very basics - what spatial databases are, what PostGIS is, and so on. So, without further ado, let's get started!
First off, we'll discuss what exactly spatial databases are. In the broadest sense, these are databases that have been optimized to store and query geometric data. 
Most spatial databases provide at least some simple geometric objects: points, linestrings and polygons. 
Some of them also feature 3D and 4D objects, topological coverages and triangulated irregular networks. 
Those more advanced features are outside the scope of this course - we'll focus on the basic things that are available in virtually every spatial database.
So far, you've probably worked with columns that store numbers (int, decimal, ...), dates, times, strings (varchar, char, ...). 
You may have also used some functions that deal with these column types, like AVG() for calculating the average of a numerical column. 
In this course, you'll get to know a new column type that will store points, lines and polygons. 
Then, you'll also learn about the various functions that calculate the distance between two points or the area of a polygon.
Sometimes you will also hear the names geodatabase, geospatial database or geographical database in place of spatial database.
These names highlight the fact that this kind of database can apply geometries to a map to calculate the area of a park, the length of a road, and so on. 
However, the differences between these names are not that important to us.

Exercise
Answer following questions â€“ fill the template with trues and falses.
Spatial databases are mainly used by companies like NASA when they send spacecraft. True or false?
Geospatial databases and geographical databases are essentially the same thing. True or false?

Which of the following are the basic types of geometries found in most spatial databases?
        Polygons
        Circles
        Linestrings
        Points

Solution
SELECT
  -- first question (type true or false)
  FALSE AS first_question,
  -- second question (type true or flase)
  TRUE AS second_question,
  -- third question (type true for correct answers and false for incorrect answers)
    TRUE AS polygons,
    FALSE AS circles,
    TRUE AS linestrings,
    TRUE AS points;
