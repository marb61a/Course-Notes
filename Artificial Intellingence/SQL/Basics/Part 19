Instruction
Still remember the operator ALL? Let's use it in a correlated subquery.

SELECT *
FROM trip main_trip
WHERE price >= ALL (
  SELECT price
  FROM trip sub_trip
  WHERE main_trip.city_id = sub_trip.city_id
);

The above query looks for all trips which are the most expensive of all trips to that specific city. 
The instructions only choose trips with their price equal to or greater than all trip prices in the specific city.

Exercise
Select the hiking trip with the longest distance (column length) for every mountain.

Solution
SELECT * FROM HIKING_TRIP MAIN_HTRIP
WHERE LENGTH >= ALL(
	SELECT LENGTH FROM HIKING_TRIP SUB_TRIP
  	WHERE MAIN_HTRIP.MOUNTAIN_ID
  	= SUB_TRIP.MOUNTAIN_ID 
)


Instruction
One more thing â€“ you can also use the operator ANY in your correlated subqueries. Just take a look:

SELECT *
FROM hiking_trip
WHERE price < ANY (
  SELECT price FROM trip
  WHERE trip.days = hiking_trip.days
);

The above query compares city trips and hiking trips which last the same number of dates. 
It then returns all hiking trips which are cheaper than any city trip of the same duration.

Exercise
Select those trips which last shorter than any hiking_trip with the same price.

Solution
SELECT
  *
FROM TRIP 
WHERE DAYS < ANY (
  SELECT DAYS FROM HIKING_TRIP
  WHERE TRIP.PRICE = HIKING_TRIP.PRICE
);


Instruction
Now, queries can also be used in other places. We can, for example, use a subquery instead of a table in the FROM clause.

SELECT *
FROM city, (
    SELECT
      *
    FROM country
    WHERE area < 1000) AS small_country
WHERE small_country.id = city.country_id;

The above query finds cities from small countries. Of course, there is no table small_country in our database, so... 
we create it 'on the fly' with a subquery in the FROM clause. Of course, we need a name for it, so we use an alias with the keyword AS.
In the end, the query shows cities together with their countries, provided that the country has an area below 1,000. 
Remember how selecting from two tables works? We need the condition in the WHERE clause, 
because otherwise each city would be shown together with every possible country.

Exercise
Show mountains together with their countries. The countries must have at least 50,000 residents.

Solution
SELECT
  *
FROM MOUNTAIN, (
    SELECT
      *
    FROM COUNTRY
    WHERE POPULATION > 50000) AS MNTN
WHERE MNTN.ID = MOUNTAIN.COUNTRY_ID ;


Instruction
Of course, you can pick just a few columns in those queries. Study the following example:

SELECT
  name,
  days,
  price
FROM trip, (
    SELECT
      *
    FROM city
    WHERE rating = 5) AS nice_city
WHERE nice_city.id = trip.city_id;

The above query finds trips and their respective cities for such cities which are rated 5. 
It then shows the columns name, days, price for these tables.
When the tables have all columns with different names, then you may drop the table names 
(i.e. you can write price instead of trip.price because there is just one column price anyway).

Exercise
Show hiking trips together with their mountains. The mountains must be at least 3,000 high. Select only the columns length and height.

Solution
SELECT
  LENGTH, HEIGHT
FROM HIKING_TRIP, (
    SELECT
      *
    FROM MOUNTAIN
    WHERE HEIGHT > 3000) AS MTN_HGHT
WHERE MTN_HGHT.ID = HIKING_TRIP.MOUNTAIN_ID ;
