Exercise
Select the title and production_year columns from the movie table, and the name and birth_year columns from the director table 
in such a way that a movie is shown together with its director.
Show the column birth_year as born_in. Select only those movies which were filmed when their director was younger than 40
(i.e. the difference between production_year and birth_year must be less than 40).

Solution
SELECT
  TITLE, 
  PRODUCTION_YEAR, 
  NAME, 
  BIRTH_YEAR AS BORN_IN
FROM MOVIE 
JOIN DIRECTOR
  ON DIRECTOR_ID = DIRECTOR.ID
WHERE (PRODUCTION_YEAR - BIRTH_YEAR)  < 40;


Exercise
Select the id, title, and production_year columns from the movie table, and the name and birth_year columns from the director table 
in such a way that a movie is shown together with its director. 
Show the column birth_year as born_in and the column production_year as produced_in. Select only those movies:

    whose title contains a letter 'a' and which were filmed after 2000,
    or
    whose director was born between 1945 and 1995.

Solution
SELECT
  MOVIE.ID, 
  TITLE, 
  PRODUCTION_YEAR AS PRODUCED_IN, 
  NAME, 
  BIRTH_YEAR AS BORN_IN
FROM MOVIE
JOIN DIRECTOR
  ON DIRECTOR.ID = DIRECTOR_ID
WHERE (TITLE LIKE '%a%' AND
PRODUCTION_YEAR > 2000) OR
(BIRTH_YEAR BETWEEN 1945 AND 1995);


Instruction
Let's have a look at the tables we're going to work with. If you've already had enough of cars and movies,
here's a good piece of news: we're going to discuss orders and employees this time. We'll provide you with examples based on the table orders:

orders (order_id, customer_id, order_date, ship_date, total_sum)

Not very complicated, as you can see.
Each order has an id (order_id), was made by a specific customer (customer_id) on a specific day (order_date), as well as shipped on a specific day (ship_date). 
The total value of the order is contained in the column total_sum.

Exercise
So much for the example table.
Now take a look at the table we'll use for exercises. Here, we have employees with their salaries in specific years.
Naturally, one employee can work for more than one year, so there may be many rows for the same person, usually with different salaries each year.
The employees work in specific departments and have a certain position, which may change as the employee gets promoted.
Study the table for a moment and then click Next exercise to move on.

Solution
SELECT * FROM employees;


Instruction
You're already pretty skilled when it comes to filtering rows – but have you wondered how they are sorted in the result of an SQL query? 
Well, the answer is simple – by default, they are not sorted at all. The sequence in which rows appear is arbitrary and every database can behave differently.
You can even perform the same SQL instruction a few times and get a different order each time – unless you ask the database to sort the rows, of course.

SELECT *
FROM orders
ORDER BY customer_id;

In the above example, we've added a new piece: ORDER BY. After this expression, you can simply specify a column on which the data will be sorted.
In this case, we give the column name customer_id, so all orders will be sorted in relation to customer_ids.

Exercise
Select all columns from the table employees and sort them according to the salary.

Solution
SELECT * FROM EMPLOYEES
ORDER BY SALARY


Instruction
Now you can easily examine who's got the lowest and the highest salary. It's not that hard, as you can see.
We can filter rows and sort them at the same time. Just have a look:

SELECT *
FROM orders
WHERE customer_id = 100
ORDER BY total_sum;

The WHERE clause and ORDER BY work well together.
In this case, we'll only see the orders made by the customer with id 100. The orders will be sorted on the total sum – 
the cheapest order will appear as the first result and the most expensive as the last one.

Exercise
Select only the rows related to the year 2011 from the table employees. Sort them by salary. 

Solution
SELECT * FROM EMPLOYEES 
WHERE YEAR = 2011
ORDER BY SALARY
