Instruction
In this section, we'll have a look at how groups can be filtered. There is a special keyword HAVING reserved for this.

SELECT
  customer_id,
  order_date,
  SUM(total_sum)
FROM orders
GROUP BY customer_id, order_date
HAVING SUM(total_sum) > 2000;

The new part here comes at the end. We've used the keyword HAVING and then stated the condition to filter the results. 
In this case, we only want to show those customers who, on individuals days, ordered goods with a total daily value of more than $2,000.

By the way, this is probably a good time to point out an important thing: in SQL, the specific fragments must always be put in the right order. 
You can't, for example, put WHERE before FROM. Similarly, HAVING must always follow GROUP BY, not the other way around. 
Keep that in mind when you write your queries, especially longer ones.

Exercise
Find such employees who (have) spent more than 2 years in the company. 
Select their last name and first name together with the number of years worked (name this column years).

Solution
SELECT
  FIRST_NAME, 
  LAST_NAME, 
  COUNT(DISTINCT YEAR) as years
FROM EMPLOYEES
GROUP BY FIRST_NAME, LAST_NAME
HAVING COUNT(DISTINCT YEAR) > 2;


Exercise
Find such departments where the average salary in 2012 was higher than $3,000. Show the department name with the average salary.

Solution
SELECT
  DEPARTMENT, 
  AVG(SALARY)
FROM  EMPLOYEES
WHERE YEAR = 2012
GROUP BY DEPARTMENT
HAVING AVG(SALARY) > 3000 ;


Instruction
There's one more thing before you go. Groups can be sorted just like rows. Take a look:

SELECT
  customer_id,
  order_date,
  SUM(total_sum)
FROM orders
GROUP BY customer_id, order_date
ORDER BY SUM(total_sum) DESC;

In this case, we'll order our rows according to the total daily sum of all orders by a specific customer. The rows with the highest value will appear first.

Exercise
Sort the employees according to their summary salaries. Highest values should appear first. Show the last name, the first name, and the sum

Solution
SELECT
  LAST_NAME, 
  FIRST_NAME, 
  SUM(SALARY)
FROM EMPLOYEES 
GROUP BY LAST_NAME, FIRST_NAME
ORDER BY SUM(SALARY) DESC;


Exercise
Show the columns last_name and first_name from the table employees together with each person's average salary and the number of years they worked in the company
Use the following aliases: average_salary for each person's average salary and years_worked for the number of years worked in the company. 
Show only such employees who (have) spent more than 2 years in the company. Order the results according to the average salary in the descending order.

Solution
SELECT 
	FIRST_NAME, 
    LAST_NAME, 
    AVG(SALARY) AS average_salary,
COUNT(DISTINCT YEAR) AS years_worked
FROM EMPLOYEES
GROUP BY FIRST_NAME, LAST_NAME
HAVING years_worked > 2
ORDER BY average_salary DESC


Instruction
You're already pretty skillful in SQL, so this time we're going to go down into details.
By the end of this part, you'll know how to exercise real control over your JOIN clauses.
Don't worry if you don't remember JOINs precisely â€“ we're going to revise them anyway.
Before we start, you should get to know the data. We're going to work with three brand-new tables: student, room, and equipment. Are you ready?

Exercise
Let's study the first table: room. Get all the data from it.

Solution
SELECT * FROM ROOM


Instruction
As you can see, there are four columns in the table room: id, room_number, beds, and floor.
The column:
    id is the identification number of the room in our table.
    room_number is the number of the room typically found on its door in the dormitory.
    beds tells you how many beds there are in the room.
    floor is the number of the floor where the room can be found in the dormitory.

Exercise
Study the contents of the room table and click Next exercise when you're done.

Solution
SELECT * FROM room;
