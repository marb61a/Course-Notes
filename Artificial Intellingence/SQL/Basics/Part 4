Instruction
Now, sometimes we may not remember just one letter of a specific name. Imagine we want to find a girl whose name is... Catherine? Katherine?

SELECT *
FROM user
WHERE name LIKE '_atherine';

The underscore sign (_) matches exactly one character. Whether it's Catherine or Katherine – the expression will return a row.

Exercise
Select all columns for cars which brand matches 'Volk_wagen'.

Solution
SELECT
  *
FROM Car 
WHERE Brand LIKE 'Volk_wagen';


Instruction
In every row, there can be NULL values, i.e. fields with unknown, missing values. Remember the Opel from our table with its missing price? 
This is exactly a NULL value. We simply don't know the price.
To check whether a column has a value, we use a special instruction IS NOT NULL.

SELECT id
FROM user
WHERE middle_name IS NOT NULL;

This code selects only those users who have a middle name, i.e., their column middle_name is known.

Exercise
Select all columns for each car whose price column isn't a NULL value.

Solution
SELECT * FROM  Car
WHERE Price IS NOT null


Instruction
Remember, NULL is a special value. You can't use the equal sign to check whether something is NULL. It simply won't work. The opposite of IS NOT NULL is IS NULL.

SELECT id
FROM user
WHERE middle_name IS NULL;

This query will return only those users who don't have a middle name, i.e. their middle_name is unknown.

Exercise
Select all columns for each car whose price is unknown (NULL).

Solution
SELECT * FROM Car 
WHERE Price IS NULL


Instruction
Remember, NULL is a special value. It means that some piece of information is missing or unknown.
If you set a condition on a particular column, say AGE < 70, the rows where age is NULL will always be excluded from the results. Let's check that in practice.
In no way does NULL equal zero. What's more, the expression NULL = NULL is never true in SQL!

Exercise
Select all columns for cars whose price column is greater than or equal to zero.
Note that the Opel with an unknown price is not in the result.

Solution
SELECT
  *
FROM Car
WHERE Price >= 0


Instruction
We may now move on to our next problem: simple mathematics. Can you add or multiply numbers in SQL? Yes, you can! Take a look at the example:

SELECT *
FROM user
WHERE (monthly_salary * 12) > 50000;

In the above example, we multiply the monthly salary by 12 to get the annual salary by using the asterisk (*). 
We may then do whatever we want with the new value – in this case, we compare it with $50,000.
In this way, you can add (+), subtract (-), multiply (*) and divide (/) numbers.

Exercise
Select all columns for cars with a tax amount over $2000. The tax amount for all cars is 20% of their price. Multiply the price by 0.2 to get the tax amount.

Solution
SELECT
  *
FROM Car
WHERE Price * 0.2 > 2000;

Exercise
Select all columns of those cars that:

    were produced between 1999 and 2005,
    are not Volkswagens,
    have a model that begins with either 'P' or 'F',
    have their price set.

Solution
SELECT
  *
FROM Car
WHERE 
	PRODUCTION_YEAR
    BETWEEN 1999 AND 2005
AND BRAND != 'Volkswagen'
AND (MODEL LIKE 'P%' OR MODEL LIKE 'F%')
AND PRICE IS NOT NULL;
