Instruction
You already know that your database can do computation because we've already added or subtracted values in our SQL instructions. 
The database can do much more than that. It can compute statistics for multiple rows. This operation is called aggregation.

Let's start with something simple:

SELECT COUNT(*)
FROM orders;

Instead of the asterisk (*) which basically means 'all', we've put the expression COUNT(*).
COUNT(*) is a function. A function in SQL always has a name followed by parentheses. 
In the parentheses, you can put information which the function needs to work. For example, COUNT() calculates the number of rows specified in the parentheses.
In this case, we've used COUNT(*) which basically means 'count all rows'. 
As a result, we'll just get the number of all rows in the table orders â€“ and not their content.

Exercise
Count all rows in the table employees.

Solution
SELECT COUNT(*) FROM EMPLOYEES


Instruction
Naturally, the asterisk (*) isn't the only option available in the function COUNT(). For example, we may ask the database to count the values in a specific column:

SELECT COUNT(customer_id)
FROM orders;

What's the difference between COUNT(*) and COUNT(customer_id)? 
Well, the first option counts all rows in the table and the second option counts all rows where the column customer_id has a specified value. 
In other words, if there is a NULL in the column customer_id, that row won't be counted

Exercise
Check how many non-NULL values in the column position there are in the table employees. Name the column non_null_no.

Solution
SELECT 
	COUNT(POSITION) as non_null_no 
FROM EMPLOYEES


Instruction
As you probably expect, we can also add the keyword DISTINCT in our function COUNT():

SELECT COUNT(DISTINCT customer_id) AS distinct_customers
FROM orders;

This time, we count all rows which have a distinctive value in the column customer_id. 
In other words, this instruction tells us how many different customers have placed an order so far. 
If a customer places 5 orders, the customer will only be counted once.

Exercise
Count how many different positions there are in the table employees. Name the column distinct_positions

Solution
SELECT 
    COUNT(DISTINCT POSITION) as distinct_positions
FROM EMPLOYEES


Instruction
Of course, COUNT() is not the only function out there. Let's learn some others!

SELECT MIN(total_sum)
FROM orders;

The function MIN(total_sum) returns the smallest value of the column total_sum. In this way, we can find the cheapest order in our table. Convenient, huh?
You can also use a similar function, namely MAX(). That's right, it returns the biggest value of the specified column. Check it for yourself.

Exercise
Select the highest salary from the table employees.

Solution
SELECT 
	MAX(SALARY)
FROM EMPLOYEES


Instruction
OK, now that you know what the highest salary is, let's discuss another function:

SELECT AVG(total_sum)
FROM orders
WHERE customer_id = 100;

The function AVG() finds the average value of the specified column.
In our example, we'll get the average order value for the customer with id 100.

Exercise
Find the average salary in the table employees for the year 2013.

Solution
SELECT AVG(SALARY)
	FROM EMPLOYEES
WHERE YEAR = 2013


Instruction
The last function that we'll discuss is SUM().
Examine the example:

SELECT SUM(total_sum)
FROM orders
WHERE customer_id = 100;

The above instruction will find the total sum of all orders placed by the customer with id 100.

Exercise
Find the sum of all salaries in the Marketing department in 2014. Remember to put the department name in inverted commas! 

Solution
SELECT 
	SUM(SALARY)
FROM EMPLOYEES 
WHERE DEPARTMENT = 'Marketing'
AND YEAR = 2014
