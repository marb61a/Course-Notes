Instruction
There's one more joining method before you go. It's called NATURAL JOIN and it's slightly different from the other methods 
because it doesn't require the ON clause with the joining condition:

SELECT *
FROM person
NATURAL JOIN car;

Check it yourself and try to guess how it works.

Exercise
Use NATURAL JOIN on the tables student and room.

Solution
SELECT
  * 
FROM STUDENT 
NATURAL JOIN ROOM;


Instruction
NATURAL JOIN doesn't require column names because it always joins the two tables on the columns with the same name.
In our example, students and rooms have been joined on the column id, which doesn't really make much sense.
In our dormitory, the construction

SELECT *
FROM student
NATURAL JOIN room;

gives the same result as the following query:

SELECT *
FROM student
JOIN room
  ON student.id = room.id;

You can, however, construct your tables in such a way that NATURAL JOIN comes in handy. If you had the following tables:

car(car_id, brand, model)
owner(owner_id, name, car_id)

Then it would make perfect sense to use NATURAL JOIN because it would join the two tables on the car_id column. 
You would then need fewer keyboard strokes to join two tables.

Exercise
Click Next exercise to continue.

Solution
No solution needed


Instruction
Speaking of fewer keyboard strokes, there is one more thing which may come in handy and make you write less: aliases for tables.
Imagine the following situation: we want to select many columns from two joined tables. You could, of course, write it like this:

SELECT
  person.id,
  person.name,
  person.year,
  car.id,
  car.name,
  car.year
FROM person
JOIN car
  ON person.id = car.owner_id;

Takes a lot of writing, doesn't it? All those column names together with their table names... 
Fortunately, there is a way to make things simpler: we can introduce new temporary names (called aliases) for our tables:

SELECT
  p.id,
  p.name,
  p.year,
  c.id,
  c.name,
  c.year
FROM person AS p
JOIN car AS c
  ON p.id = c.owner_id;

As you can see, after the table names in the FROM clause, we used the keyword AS. 
It indicates that whatever comes next will become the new, temporary name (alias) for the table. 
Thanks to this, we can save our fingers a little bit and write shorter names for our tables.

Exercise
Use INNER JOIN on the tables room and equipment so that all pieces of equipment are shown with their room data. 
Use table aliases r and e. Select the columns id and name from the table equipment, as well as room_number and beds from the table room.

Solution
SELECT 
	e.id,
    e.name,
    r.room_number,
    r.beds
FROM EQUIPMENT AS e
INNER JOIN ROOM AS r
ON e.room_id = r.id
