Instruction
As you can see, the lowest salary was shown first and the highest salary last. This ascending order of results is performed in SQL by default. 
If you want to be precise and make things clear, however, you can use the keyword ASC (short for the ascending order) after the column name:

SELECT *
FROM orders
ORDER BY total_sum ASC;

Adding the keyword ASC will change nothing, but it will show your intention in a very clear way.
We can also reverse the order and make the greatest values appear first.

SELECT *
FROM orders
ORDER BY total_sum DESC;

As you can see, we've added the word DESC after the column name, which is short for the descending order. 
As a result, the highest values in the column total_sum will be shown first.

Exercise
Select all rows from the table employees and sort them in the descending order by the column last_name.

Solution
SELECT * FROM EMPLOYEES
ORDER BY LAST_NAME DESC


Instruction
All right, one more thing before we move on: you can sort your results by more than one column and each of them can be sorted in a different order:

SELECT *
FROM order
ORDER BY customer_id ASC, total_sum DESC;

As you can see, the results will first be sorted by customer_id in the ascending order (lowest values first) and then, for each customer_id, 
the orders will be sorted by the total_sum in the descending order (greatest values first).

Example
Select all rows from the table employees and sort them in the ascending order by the department and then in the descending order by the salary. 

Solution
SELECT * FROM EMPLOYEES
ORDER BY DEPARTMENT ASC, SALARY DESC


Instruction
We'll now focus on another aspect. By default, the database returns every row which matches the given criteria. 
This is what we normally expect, of course, but there are cases when we might want to change this behavior.
Imagine the following situation: we want to get the ids of all customers who have ever placed an order. We might use the following code:

SELECT customer_id
FROM orders;

What's wrong with the code in this case? Well, try to do the exercise to find out.

Exercise
Select the column year for all rows in the table employees. Then examine the result carefully.

Solution
SELECT YEAR FROM EMPLOYEES


Instruction
Could you see the problem? There were many rows with the same year, so each year is shown many times in the results.
In our orders example, if there were many orders placed by the same customer, each customer id would be shown many times in the results. Not good.
Fortunately, we can easily change this.

SELECT DISTINCT customer_id
FROM orders;

Before the column name, we've added the word DISTINCT. Now the database will remove duplicates and only show distinct values. 
Each customer_id will appear only once

Exercise
Select the column year from the table employees in such a way that each year is only shown once.

Solution
SELECT DISTINCT YEAR FROM EMPLOYEES


Instruction
You can also use DISTINCT on a group of columns. Take a look:

SELECT DISTINCT
  customer_id,
  order_date
FROM orders;

One customer may place many orders every day, but if we just want to know on what days each customers actually did place at least one order, 
the above query will check that.

Exercise
Check what positions there are in every department. In order to do that, select the columns department and position from the table employees and eliminate duplicates

Solution
SELECT 
	DISTINCT DEPARTMENT, 
    POSITION 
FROM EMPLOYEES
