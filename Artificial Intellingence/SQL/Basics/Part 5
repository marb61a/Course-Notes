Instruction
Before we start, let's explain the data sets we're going to work on.
Remember the table car from Part 1? We're going to use it now together with another table called person. 
We'll show you all the examples in this part based on these two tables.
We'll have cars (table car) and their owners (table person). 
We know the owner of the car because we have the column owner_id in the table car which contains an id from the table person. Easy, right?
Take a look at the columns the tables contain:

person (id, name, age);
car (id, brand, model, price, owner_id);

Exercise
In case you're already fed up with the cars, we've created a new set of data for all the exercises in this part.
We're going to work with movies and their directors.
Open the Database tab on the right and study the tables. Think about the following question: How do we know who directed a specific movie?
When you're done, simply click Next exercise and we'll tell you the answer.

Solution
No solution needed


Instruction
We know who directed a specific movie because there is a column director_id in the table movie. 
If you take a look at "Midnight in Paris", its director_id is 3. So we can now look into the director table to find out that id 3 is assigned to Woody Allen. 
And that's how we know he is the director. Did you get that right?
There are quite a few ways of getting information from multiple tables at the same time. We're going to start with the easiest one.

SELECT *
FROM person, car;

You already know how SELECT * FROM works, don't you? Now we just name two tables instead of one, and we separate them with a comma (,).
Piece of cake! The result, however, might be a tiny bit of a surprise to you. Let's check that out.

Exercise
Get all the data from two tables: movie and director.
If there are 8 movies and 5 directors, how many rows will we get in our result? Think about it before you click Run and check code.
Note that you won't see all rows returned by the query â€“ our platform displays only a limited number of rows due to readability restrictions.

Solution
SELECT * FROM MOVIE, DIRECTOR


Instruction
If there are 8 movies and 5 directors, most people will say that we'll get 5, 8 or 13 rows in the result. This is not true.
We've got 40 rows altogether because SQL takes every single movie and joins it with every possible director. So we now have 8 * 5 = 40 rows!
Why did this happen? SQL doesn't know what to do with the results from the two tables, so it gave you every possible connection. How can we change it? Take a look:

SELECT *
FROM person, car
WHERE person.id = car.owner_id;

We've set a new condition in the WHERE clause. We now see only those connections where id from person is the same as owner_id from car. Makes sense, right?
Take a closer look at how we provide the information about columns in the WHERE condition. 
If you have multiple tables, you should refer to specific columns by giving the name of the table and the column, separated by a dot (.). 
As a result, the column owner_id from the table car becomes car.owner_id and so on.

Exercise
Select all columns from tables movie and director in such a way that a movie is shown together with its director.
For the sake of this exercise, join movie and director tables in this exact order (movie, director).

Solution
SELECT
  *
FROM  MOVIE, DIRECTOR
WHERE MOVIE.DIRECTOR_ID = DIRECTOR.ID;


Instruction
Joining two tables is such a popular and frequent operation that SQL provides a special word for it: JOIN. 
There are many versions of JOIN out there. For the time being, we'll focus on the basic one.

Exercise
Click Next exercise to proceed.

Solution
SELECT *
FROM movie, director
WHERE director.id = movie.director_id;


Instruction
Take a look at the following example:

SELECT *
FROM person
JOIN car
  ON person.id = car.owner_id;

We want to join the tables person and car, so we use the keyword JOIN between their names.
SQL must also know how to join the tables, so there is another keyword ON. 
After it, we set our condition: join only those rows where the id in person is the same as owner_id in car.

Exercise
Use the new construction JOIN ... ON to join rows from the tables movie and director in such a way that a movie is shown together with its director.

Solution
SELECT
  * 
FROM MOVIE
JOIN DIRECTOR
  ON MOVIE.DIRECTOR_ID = DIRECTOR.ID;
  
