                    Recursion, Backtracking and Dynamic Programming in Python
                    Course Notes Part 1


Section 1: Introduction
Introduction
  - Intro to the instructor and the course
  - Quick run through of the course syllabus


Section 2: Recursion
What are stack and heap memory?
  - There are 2 main types of memory, stack memory and heap memory
  - Stack memory is a special region in RAM
    - The stack is a special data type that stores active functions and local variables
    - The stack is how languages such as Python knows where to return to after finishing execution of a function 
    - Stack memory can be accessed very quickly
    - There is no fragmentation
    - Last In First Out
  - Heap memory is also a special region in RAM
    - The heap is much larger than that of the stack
    - Objects are stored on the heap
    - Heap memory can suffer from fragmentation
    - Heap memory is nothing to do with Heap data structure

Stack memory and heap memory simulation
  - A graphic presentation showing how stack and heaps work

What is recursion (recursive function call)?
  -

Head and tail recursion implementation
  -

Recursion and stack memory (stack overflow)
  - 

7. Recursion optimization in Python
1min
Quiz 2: Recursion Quiz
8. Factorial problem - with head recursion
6min
9. Factorial problem - visualizing the stack
4min
10. Transforming a head recursion into a tail recursion
5min
11. Fibonacci numbers problem - with head recursion
7min
12. Fibonacci numbers - visualizing the stack memory
9min
13. Exercise - Fibonacci-numbers with tail recursion
1min
14. Solution - Fibonacci-numbers with tail recursion
1min
15. Towers of Hanoi introduction
6min
16. Towers of Hanoi implementation
8min
17. Towers of Hanoi - visualizing the stack
7min
18. Exercise - solving recursion with iteration
1min
19. Solution - solving recursion with iteration
1min
20. Recursion and iteration revisited
2min
Quiz 3: Recursive Problems Quiz
