                    Python Search Algorithms
                    Notes

Linear Search Algorithm
  - Linear Search is also called a sequential search
    - https://en.wikipedia.org/wiki/Linear_search
  - The idea is that an array is searched sequentially for a specific element
  - The array is searched and the index is returned when found
  - If the element is not found then either a not found message or -1 value is returned
  - In essence there is a list of values that are searched
  - The index being used to search is zero based
  - Python 3.8 has the walrus operator which is  :=
    - https://docs.python.org/3/whatsnew/3.8.html
    - It assigns values to variables as part of a larger expression such as an index
    - A popular use case is while loops where you need to initialize and update a variable
  - This is not that efficient of an algorithm -> 0/n


Binary Search Iterative Algorithm
  - https://en.wikipedia.org/wiki/Binary_search_algorithm
  - This is a better searching algorithm than linear
  - This only works if the list is in sorted order
  - The first step is to start with the middle element
  - If the key matches then return the index
  - If the key is less than the middle element then search the lower half
    - If more then search the upper half
  - The function for conducting Binary Search takes in 3 parameters
  - The first parameter is the list of numbers, the second is the number of values and the third is the key
  - There will be 2 values needs to represent each side of the index
    = LIndex or left index which starts at 0
    - RIndex or right index which starts at n - 1 eg Array of 6 values will start from the number 5
  - Using the floor function will give integer values
  - This is needed as indexes cannot have float values
    - There is no value located at position 2.5 for example
  - This is a more effiecient algorithm as the while loop will run only half the time
    - This is represented by 0(log n)

Binary Search Recursive
  - 
  
