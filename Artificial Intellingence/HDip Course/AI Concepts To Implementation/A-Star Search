                    A-Star Search Notes


Informed Search -- Looking for solutions with guidance
  - Informed Search is also known as Heuristic Search
  - These algorithms use both depth and breadth first searches and some degree of intelligence
  - There are several algorithms that can be used and which one will depend on the nature of the problem
  - The most popular is called A* or A-Star search

A* search
  - A* search is pronounced A star search
  - This algorithm usually improves performance by estimating heuristics to minimize the cost of the next node visited
  - The total cost uses 2 metrics for calculation
    - First is the total distance from the start node to the current node
    - The second metric is the estimated cost of moving to a specific node by using a heuristic
    - When atteptimg to minimise the cost a lower value indicates a better-performing solution
  - The function for calculating A* is
    - f(n) = g(n) + h(n)
    - g is the cost of the path from the starting node to node n
    - h is the cost from the heuristic function for node n
    - f is the cost of the path from the starting node to node n plus the cost from the heuristic function for node n
  - Breadth-first search visits all nodes on each depth before moving to the next depth.
  - Depth-first search visits all nodes down to the final depth before traversing back to the root and visiting the next path
  - A* differs from this as it does not have a predefined pattern to follow
    - Nodes are visited in an order based on heuristic cost
    - These costs are not known by the algorithm up-front
    - This means that the costs are calculated as the tree is explored
    - Each node that has been visited is added to the stack
    - This means that nodes that cost more than nodes already visited are ignored saving some computation time

Flow of A* Search
  - Add root node to stack
    - A* can be implemented with a stack that uses LIFO, the first step is assing the root node to the stack
  - Check is the stack empty?
    - If the stack is empty, and no path has been returned then there is no path to the goal
    - If there are still nodes in the queue then the algorithm may continue the search
  - Return a No Path To Goal value
    - This step is the one possible exit from the algorithm if no path to the goal exists
  - Pop a node from the stack as the current node
    - When we pull an object from the stack and set it as the current node then we can look at it's possibilities
  - Has the current node been visited
    - If the answer to the question is no then it has not been examined and can be examined now
  - Mark the current node as visited
    - This indicates that the node was visited and saves on unnecessary processing
  - Has the goal been reached
    - This determines whether the current neighbour contains the algorithm's goal
  - Return Path using the current node
    - By referencing successive parents of the current node the path from the root to the goal can be described
    - The root node will not have a parent
  -
