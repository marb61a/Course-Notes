                    Min-Max Search Notes


Simulate actions and choose the best future
  - Min-max search tries to build a tree of possible outcomes based on moves that each player could make
    - It will favour paths that are advantageous to the agent while avoiding those paths favourable to opponents
  - In order to do so this type of search simulates possible moves and scores the state based on a heuristic after making the move 
  - Min-max search attempts to discover as many states in the future as possible
    - There maybe limitations placed on these attempts due to memory or computation activities
    - This means that discovering the entire tree may not be realistic so searches can be limited to specified depths
  - Min-max search simulates the turns taken by each player
    - The depth that is specified is directly linked to the number of turns between both players
    - A depth of 4, for example, means that each player has had 2 turns where each player has had an alternate move
  - A flow chart for a min-max algorithm can look extremely complex
    - It is not that complex as the number of conditions that check whether the current state is to maximize or minimize causes the chart to bloat

Heuristics
  - The min-max algorithm uses a heuristic score to make decisions
    - This score is defined by a crafted heuristic and it is not learned by the algorithm
  - If there is a specific game state then every possible valid outcome of a move from that state will be a chile node in the game tree
  - If using the example of a heuristic which will provide a score where positive numbers are better than negative numbers
    - By simulating all of the possible valid moves the min-max algorithm will try to minimise making moves where the opponent will have an advantage
    - It will maximise the moves that give the agent an advantage or a winning state

Min-max Algorithm Flow
  - 
