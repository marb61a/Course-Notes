                    Min-Max Search Notes


Simulate actions and choose the best future
  - Min-max search tries to build a tree of possible outcomes based on moves that each player could make
    - It will favour paths that are advantageous to the agent while avoiding those paths favourable to opponents
  - In order to do so this type of search simulates possible moves and scores the state based on a heuristic after making the move 
  - Min-max search attempts to discover as many states in the future as possible
    - There maybe limitations placed on these attempts due to memory or computation activities
    - This means that discovering the entire tree may not be realistic so searches can be limited to specified depths
  - Min-max search simulates the turns taken by each player
    - The depth that is specified is directly linked to the number of turns between both players
    - A depth of 4, for example, means that each player has had 2 turns where each player has had an alternate move
  - A flow chart for a min-max algorithm can look extremely complex
    - It is not that complex as the number of conditions that check whether the current state is to maximize or minimize causes the chart to bloat

Heuristics
  - The min-max algorithm uses a heuristic score to make decisions
    - This score is defined by a crafted heuristic and it is not learned by the algorithm
  - If there is a specific game state then every possible valid outcome of a move from that state will be a chile node in the game tree
  - If using the example of a heuristic which will provide a score where positive numbers are better than negative numbers
    - By simulating all of the possible valid moves the min-max algorithm will try to minimise making moves where the opponent will have an advantage
    - It will maximise the moves that give the agent an advantage or a winning state

Min-max Algorithm Flow
  - Given a game state, whether the current mode is minimization or maximization, and a current depth, the algorithm can start
    - Understand the algorithm inputs as this algorithm is recursive
    - A recursive algorithm calls itself in one or more steps
    - It is very important for any recursive algorithm to have an exit condition to avoid calling itself forever
  - Is the current state an end state or 0
    - This condition will determine whether the current state is terminal or whether the desired depth has been reached
    - A terminal state is one in which one of the players has won or the game is a draw
    - For example a score of 10 represents a win for the agent, and a score of -10 represents a win for the opponent, a 0 score indicates a draw
    - Due to how expensive traversing an entire tree is computationally a depth will be specified
    - By specifying a depth, the algorithm can look a few turns into the future to determine whether a terminal state exists
  - Return the current score and the last move
    - The score for the current state will be removed if the current state is a terminal game state or if the specified depth has been reached
  - Is the current mode MAX
    - If the current iteration of the algorithm is in the maximise state then it will try to maximise the score for the agent
  - Set best known score as +∞ (lemniscate or infinity)
    - If the current mode is to minimise the score then the best score is set to positive infinity
    - This is because we know that the scores that are returned by the game states are going to always be less
    - In real world implementations an extremely large positive number is used instead of infinity
  - Set best known score as -∞
    - If the current mode is to maximize the score, the best score is set to negative infinity
    - This is because the scores returned by game states will always be more
    - In real world implementations an extremely large negative number is used instead of infinity
  -
  -
  
