                    Dijkstra's Algorithm Notes
                    
                    
Dijkstra's Algorithm
  - This is an algorithm which can be used to determine the shortest path between points such as when using routing on the internet
    - This is an iterative algorithm which provides information on the shortest path from one particular starting node to all other nodes in the graph
    - It is similar to the results of a breadth first search
  - To keep track of the total cost of a distance from the start node a distances dictionary is used
    - This is initialised to 0 for the start vertex and to infinity for the others
    - These other verticies can have their values updated until they represent the smallest weight from the start to the vertex in question
      - Once this has been reached then the distances dictionary is returned
    - The algorithm iterates once for every vertex in the graph
      - The order of that iteration is controlled by a priority queue
      - The value that is used to determine the order of the objects in the priority queue is the distance from our starting vertex
      - Using a priority queue ensures that as each vertex is explored the one with the smallest distance is being explored
  - Priority queues can be achieved in Python using the heapq module
    - https://docs.python.org/3/library/heapq.html
  - The entries in the queue are tuples made of distance and vertex
    - This allows us to maintain a queue of vertices which have been sorted by their distances
    - When the distance to a vertex in the queue is reduced, the distance is updated as is the priority
    - This is accomplished by adding another entry into the queue for the same vertex
    - A check is put in place after removal to ensure that each vertex is processed only once
  -
  
