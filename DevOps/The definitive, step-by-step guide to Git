                    Git Complete



                    Section 1 - Introduction
1 - Welcome and Course Goals 
Welcome messages
Goal for the course are
 - Help Yourself (know where documentation etc is available)
 - Understand Core Concepts
 - Master main commamds
 - Compare with ease
 - Conquer branching and merging
 - Familiarity with Github
 - Teach a friend

2 - Course Overview 
A very quick run through oof the course and what will be covered

3 - About the Author / Instructor
A quick bio of the course author

4 - Course Audience and Course Study Tips 
Audience should
 - Have some computer skills
 - Need to be able to install software
 - Need source control -- Programmers, Graphic Designers etc
 - Interested in learning GIT
 - Follow along
 - Pause video when needed

5 - Why Command Line? 
Command line can be intimidating, command line why
  - Strong history in GIT 
  - New Features
  - Online Help
  - Much more power
  - Consistent

6 - Why Source Control? 
  - Is a type of backup\archive
  - Versioning\History
  - Undo changes
  - Comparing
  - Collaboration\Teamwork
  - Learning moment
  - Isolation of changes
  - Experimentation
  - Context Switching
  - Code Reviews
 
Who needs
  - Software Developers
    - Source Code
    - Models
    - SQL, configuration, text files
  - Freelancers
    - Same reasons as above
  - Web Designers
    - Mockups, Website assets
  - Graphic Artists
    - Original Art, Vector Graphics, Photoshop files
  - Open Source

Options
2 Main types
  - Centralised
    - Free -- CVS, Subversion
    - Commercial -- ClearCase, Perforce, Team Foundation Server
    - Requires a connection to a central server for most operations
  - Decentralised/Ditributed
    - GIT, Mercurial
    - Most operations are local
    - Cenral server not required

7 - Why Git? 
What is Git 
  - Distributed Source Control System
    - Not required to be decentralised
  - Scales Massively
  - Open Source
  - Developed for Linux project requirements
  - Most Operations are local
  - Very Fast
  - Active Community
  - Most popular VCS\DVCS

8 - Key Git Terminology 
Key concepts
  - Repository contains files, history, config managed by Git
  - Three states of Git
    - Working directory
    - Staging Area (sometimes referred to as the Git index)
    - Repository (.git folder)
  - Remote -- Github
  - Master Branch


                    Section 2 - Git Installation
1 - Installation Overview 
Introduction to the installation process
Installation from -- https://git-scm.com
Chrome browser is used

2 - Installing Git for Windows 
Installation process for Windows

3 - Installing Git on Mac OS X 
Installation process for Mac OSX



                    Section 3 - Git Quick Start
1 - Quick Start, Part 1: Starting with GitHub and Project Setup 
Create an account with Github or login if you already have an account
You will need a username that is not already taken
Github is free but also has a paid level
Use the new repository button to create a new repository
Repository should be 
  - Descriptive
  - Lowercase
  - Words separated with dashes
Repository can be public or private
On Github private repositories are part of paid plan
Create with readme
Gitbash -- Windows shell

pwd - Print Working Directory -- Shows which directory
mkdir projects - Creates a directory called projects
cd projects - Changes into projects directory
pwd

2 - Quick Start, Part 2: Configuration, Clone, and Git Basic Workflow 
git version -- If installed Git will return a version
git config --global user.name "Your name" - Adds your name
git config --global user.email "Your email" - Adds your email
git config --global --list -This will show name and email just added
git clone github-https-url -- paste in your GitHub HTTPS clone URL 
ls - list file
cd github-demo 
ls 
git status 
echo "Test Git Quick Start demo" >> start.txt - Send d demo information in to a text file called start.txt
ls 
cat start.txt - Brings file into text editor
git status - Checks the status of git (should need 1 file to be added)
git add start.txt - Adds the start file
git status - Should be clean with no files to add
git commit -m "Adding start text file" - Adds file to staging area
git status - Should be clean with no files to add
git push origin master - Sends file to remote location -- master branch



                    Section 4 - Text Editor Installation
1 - Text Editor Installation Overview
Overview of installations for text editors on the 2 platforms
  - Notepad++ -> Windows
  - Textmate2 -> OSX

2 - Windows Text Editor: Notepad++ Installation
While Notepad will work, Notepad++ is a much better text editor that is also free.
Installation of Notepad++

3 - Configure Notepad++ with Git (Windows Only)

4 - Mac Text Editor: TextMate 2 Installation

5 - Configure Text Mate 2 with Git (Mac Only)



                    Section 5 - Basic Git Commands
1 - Basic Commands Overview
Overview of what the section will cover
  - Theory and practice
  - 3 ways to set up repository
    - Starting a new repository
    - Add Git to existing repository
    - Joining an existing repository

2 - Starting with a Fresh Project (git init)
For dummy text author uses Hipsum, its is similar to lrem ipsum
  - https://hipsum.co
  - http://www.lipsum.com

3 - Adding Git to an Existing Project (git init)

4 - Starting on GitHub by Joining an Existing Project (git clone)

5 - Basic Git Workflow (add, commit, pull & push)

6 - Tracked Files

7 - Editing Files

8 - Recursive Add

9 - Backing Out Changes

10 - Renaming and Moving Files

11 - Deleting Files

12 - History

13 - Git Alias

14 - Ignoring Unwanted Files and Folders

15 - Cleanup and Back to Origin (GitHub)

16 - Git Basics Resources



                    Section 6 - Visual Merge/Diff Tool Installation
1 - Visual Merge / Diff Tool Installation Overview

2 - P4Merge Install on Windows

3 - P4Merge Configure on Windows

4 - P4Merge for Windows Git Configuration

5 - P4Merge for Mac Installation

6 - P4Merge for Mac Git Configuration

7 - Visual Merge / Diff Tool Resources



                    Section 7 - Comparisons
1 - Git Repository Setup (for comparing examples)

2 - Comparing Working Directory and the Staging Area

3 - Comparing Working Directory and Git Repository (Last Commit)

4 - Comparing between the Staging Area and the Git Repository (Last Commit)

5 - Limiting Comparsons to one File (or path)

6 - Comparing Between Commits

7 - Comparing Between Local and Remote Master Branches

8 - Comparison Section Cleanup and Push back to GitHub



                    Section 8 - Branching and Merging
1 - Branching Basics

2 - Happy Path / Fast Forward Merges

3 - Happy Path / Disable Fast Forward Merges

4 - Automatic Merges

5 - Conflicting Merges and Resolution

6 - Section Cleanup and Push back to GitHub



                    Section 9 - Rebasing
1 - Simple Rebase Example

2 - Setup for rebasing conflict

3 - Abort a Rebase

4 - Rebase Conflict and Resolution

5 - Pull with Rebase (GitHub)

6 - Section Cleanup and push to GitHub



                    Section 10 - Stashing
1 - Simple Stash Example

2 - Stashing Untracked Files and Using Pop

3 - Managing Multiple Stashes

4 - Stashing into a Branch

5 - Section Cleanup and push to GitHub



                    Section 11 - Tagging
1 - Simple Tag Example / Lightweight Tags

2 - Annotated Tags

3 - Comparing Tags

4 - Tagging a Specific Commit

5 - Updating Tags

6 - Using Tags with GitHub



                    Section 12 - Bonus: Office Hour Sessions
1 - Reset and Reflog (Office Hours, Session 1)

2 - Compare Branches via GitHub (Office Hours, Session 1)

3 - Compare Branches via Command Line (Office Hours, Session 1)

4 - Stash vs Branch (Office Hours, Session 1)

5 - Gitting Help (Office Hours, Session 1)

6 - Cherry Pick (Office Hours, Session 1)



                    Section 13 - Updates and Errata
1 - Git Mac OS X Updates



                    Section 14 - Bonus: Resources and Special Offers
1 - Bonus: Exclusive Student Discounts
