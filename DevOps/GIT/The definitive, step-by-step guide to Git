                    Git Complete



                    Section 1 - Introduction
1 - Welcome and Course Goals 
Welcome messages
Goal for the course are
 - Help Yourself (know where documentation etc is available)
 - Understand Core Concepts
 - Master main commamds
 - Compare with ease
 - Conquer branching and merging
 - Familiarity with Github
 - Teach a friend

2 - Course Overview 
A very quick run through oof the course and what will be covered

3 - About the Author / Instructor
A quick bio of the course author

4 - Course Audience and Course Study Tips 
Audience should
 - Have some computer skills
 - Need to be able to install software
 - Need source control -- Programmers, Graphic Designers etc
 - Interested in learning GIT
 - Follow along
 - Pause video when needed

5 - Why Command Line? 
Command line can be intimidating, command line why
  - Strong history in GIT 
  - New Features
  - Online Help
  - Much more power
  - Consistent

6 - Why Source Control? 
  - Is a type of backup\archive
  - Versioning\History
  - Undo changes
  - Comparing
  - Collaboration\Teamwork
  - Learning moment
  - Isolation of changes
  - Experimentation
  - Context Switching
  - Code Reviews
 
Who needs
  - Software Developers
    - Source Code
    - Models
    - SQL, configuration, text files
  - Freelancers
    - Same reasons as above
  - Web Designers
    - Mockups, Website assets
  - Graphic Artists
    - Original Art, Vector Graphics, Photoshop files
  - Open Source

Options
2 Main types
  - Centralised
    - Free -- CVS, Subversion
    - Commercial -- ClearCase, Perforce, Team Foundation Server
    - Requires a connection to a central server for most operations
  - Decentralised/Ditributed
    - GIT, Mercurial
    - Most operations are local
    - Cenral server not required

7 - Why Git? 
What is Git 
  - Distributed Source Control System
    - Not required to be decentralised
  - Scales Massively
  - Open Source
  - Developed for Linux project requirements
  - Most Operations are local
  - Very Fast
  - Active Community
  - Most popular VCS\DVCS

8 - Key Git Terminology 
Key concepts
  - Repository contains files, history, config managed by Git
  - Three states of Git
    - Working directory
    - Staging Area (sometimes referred to as the Git index)
    - Repository (.git folder)
  - Remote -- Github
  - Master Branch


                    Section 2 - Git Installation
1 - Installation Overview 
Introduction to the installation process
Installation from -- https://git-scm.com
Chrome browser is used

2 - Installing Git for Windows 
Installation process for Windows

3 - Installing Git on Mac OS X 
Installation process for Mac OSX



                    Section 3 - Git Quick Start
1 - Quick Start, Part 1: Starting with GitHub and Project Setup 
Create an account with Github or login if you already have an account
You will need a username that is not already taken
Github is free but also has a paid level
Use the new repository button to create a new repository
Repository should be 
  - Descriptive
  - Lowercase
  - Words separated with dashes
Repository can be public or private
On Github private repositories are part of paid plan
Create with readme
Gitbash -- Windows shell

pwd - Print Working Directory -- Shows which directory
mkdir projects - Creates a directory called projects
cd projects - Changes into projects directory
pwd

2 - Quick Start, Part 2: Configuration, Clone, and Git Basic Workflow 
git version -- If installed Git will return a version
git config --global user.name "Your name" - Adds your name
git config --global user.email "Your email" - Adds your email
git config --global --list -This will show name and email just added
git clone github-https-url -- paste in your GitHub HTTPS clone URL 
ls - list file
cd github-demo 
ls 
git status 
echo "Test Git Quick Start demo" >> start.txt - Send d demo information in to a text file called start.txt
ls 
cat start.txt - Brings file into text editor
git status - Checks the status of git (should need 1 file to be added)
git add start.txt - Adds the start file
git status - Should be clean with no files to add
git commit -m "Adding start text file" - Adds file to staging area
git status - Should be clean with no files to add
git push origin master - Sends file to remote location -- master branch



                    Section 4 - Text Editor Installation
1 - Text Editor Installation Overview
Overview of installations for text editors on the 2 platforms
  - Notepad++ -> Windows
  - Textmate2 -> OSX

2 - Windows Text Editor: Notepad++ Installation
While Notepad will work, Notepad++ is a much better text editor that is also free.
Installation of Notepad++

3 - Configure Notepad++ with Git (Windows Only)

4 - Mac Text Editor: TextMate 2 Installation

5 - Configure Text Mate 2 with Git (Mac Only)



                    Section 5 - Basic Git Commands
1 - Basic Commands Overview
Overview of what the section will cover
  - Theory and practice
  - 3 ways to set up repository
    - Starting a new repository
    - Add Git to existing repository
    - Joining an existing repository

2 - Starting with a Fresh Project (git init)
For dummy text author uses Hipsum, its is similar to lrem ipsum
  - https://hipsum.co
  - http://www.lipsum.com
git init project-name - creates an empty git folder
ls - will show no files\folders
ls -al - Shows all files including hidden files with .filename being the hidden files lead
git status - shows the status of the repository
Master branch by default
ctrl-w - Windows -- Closes active window
git -add file - adds file to git
git commit - commits to staging area
root commit - first commit of repository
rm -rf -- removes file\folder -r is recursively f is to force

3 - Adding Git to an Existing Project (git init)
Using initializr to generate a sample template project
  - http://www.initializr.com
Unzip the generated package
Go into the package folder
git init - creates a git folder 
git add . - adds the untracked files 
git commit -m "message" - Provides an inline commit message

4 - Starting on GitHub by Joining an Existing Project (git clone)
Sample starter site already setup on Github
Click the fork button to make a copy of the repository into your personal space
There are a couple of clone options available to clone repository
  - Clone button
  - Copy the clone address
Clone Syntax
  - git clone url
Ensure that your username is in the url that has been cloned
cd into the folder that has been created by the git clone operation and there should be all the files that were present in the repository
Origin is a reference to the remote repository

5 - Basic Git Workflow (add, commit, pull & push)
Filler text available - http://meettheipsums.com
Home directory noted by tilde ~
You can change your environment to show what branch of a repository you are on
Authour uses Textmate on MAC - Using touch filename on Linux will work the same and there are many ways of doing this on any platform
git add filename - adds file to staging area
git commit - without options will open text editor for commit message
Uses SHA1 for unique identifier for commit
After commit there is nothing left in the staging area
git pull origin master will pull any changes to the remote repository down to local repository
Author recommends always doing a pull before a push to maintain sync
git push origin master will push local commits to remote repository
You will need to enter your Github credentials to push commits to remote Github repository

6 - Tracked Files
.gitconfig - Git configuration file
  - Contains user email etc
You can short cut git commiting updates
  - git commit -am "message"
  - -a will add to staging area but only works with tracked file
To list the files being currently being tracked in the repository
  - git ls-files

7 - Editing Files
Git status allows you to see both staged and unstaged files
Use the staging area for longer file changes

8 - Recursive Add
mkdir -p level1/level2/level3/level4/level5 -- Creates a nested folder structure 5 levels deep
-p can be used to make parent directories --parents can also be used
cd ../../.. - can be used as many times as need to get back to folder root
To add files recursively
  - git add . 

9 - Backing Out Changes
You can issue git command from most places within the repository
To remove file from staging area
  - git reset HEAD filename eg git reset HEAD file1.txt
To discard changes
  - git checkout --filename eg git checkout --file1.txt

10 - Renaming and Moving Files
Uses git commands rather than OS to rename files
  - git mv ooldfile newfile eg git mv file1.txt file2.txt
  - Name changes have to be committed
BASH shell also uses mv but there is no git prefix
Using the OS to rename files makes git think that 2 operations have taken place
  - File removed and new file added
To add new files and recursively add changes
  - git add -A
You can use git mv to rename files in the staging area rather than resetting and then renaming

11 - Deleting Files
You cannot use Git to delete untracked files
rm filename - a shell command for removing files
Git has its own removal command for staged files
  - git rm filename
  - removal has to be committed
You can also backout of deleting files
Tab completion will not work on files that are not in the git working directory
To remove recursively using shell commands
  - rm -rf foldername
Be very careful using the removal command

12 - History
git help     -- This command will bring up the manual pages for git
git help log  -- This will bring up the man page for log which will be used for git history
git log    -- This will show the commit history for the repo in reverse chronological order
git log --abbrev-commit     -- This will show the SHA1 commit identifier in shorter format
git log --oneline --graph --decorate     -- This command will
  - Compress entries into one line
  - Provide an ASCII graph depicting a branching graph
  - Will add labels or tags or any annotations
You can use git log to specify a range using the shortened SHA1 id as beginning and end values
git log --since="3 days ago"    -- This will list the commits in the past 3 days
git log -- filename     -- This will show the commit history for a specific file
git log --follow -- filepath    -- This will show commits for a renamed file
git show commitID     -- Will show information from a specific commit

13 - Git Alias
Setting up aliases in GIT
You can use aliases to associate a created command with alias
Example Syntax
  - git config -- global alias.hist "log --all --graph --decorate --oneline"
  - This will assign the name hist to the commands in the brackets
  - running git hist will run git log --all --graph --decorate --oneline
Git aliases are stored in the .gitconfig under the alias section

14 - Ignoring Unwanted Files and Folders
You will probably want to exclde Operating Systems files
Using .gitignore file to exclude files
Git ignore patterns - 1 per line
  - Specific File -- MyFile.ext
  - File Pattern -- *.ext
  - Folder -- my-folder/
.gitignore will need to be tracked and added

15 - Cleanup and Back to Origin (GitHub)
Synchronizing back up to the remote repository
Git status will tell you about commits being ahead of remote repository

16 - Git Basics Resources
PDF file of resources/commands from the chapter


                    Section 6 - Visual Merge/Diff Tool Installation
1 - Visual Merge / Diff Tool Installation Overview
The next few sections will focus on merging, comparing and branching
Author recommends P4Merge

2 - P4Merge Install on Windows
Installation guide for install a free tool called P4Merge
https://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools
Ensure that you download the correct version for your Operating system
Install only the visual merge tool
You will need to add path variable to environmental variables in Windows

3 - P4Merge for Windows Git Configuration
Setting up P4Merge - Ensure that the path is set up
Configuring P4Merge as diff tool
  - git config --global diff.tool p4merge
  - git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
Disable prompt
  - git config --global difftool.prompt false
Configuring P4Merge as merge tool  
  - git config --global merge.tool p4merge 
  - git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
Disable prompt
  - git config --global mergetool.prompt false

Your .gitconfig file should look like
[merge]    
  tool = p4merge 
[mergetool "p4merge"]    
  path = C:/Program Files/Perforce/p4merge.exe 
[diff]    
  tool = p4merge 
[difftool "p4merge"]   
  path = C:/Program Files/Perforce/p4merge.exe 
[difftool]    
  prompt = false 
[mergetool]    
  prompt = false

4 - P4Merge for Mac Installation
5 - P4Merge for Mac Git Configuration 
Similar to the commands used on configuring the Windows section

6 - Visual Merge / Diff Tool Resources
PDF of commands etc used in the section



                    Section 7 - Comparisons
1 - Git Repository Setup (for comparing examples)
Setting up a GIT repo to demonstrate several different scenarios

2 - Comparing Working Directory and the Staging Area

3 - Comparing Working Directory and Git Repository (Last Commit)

4 - Comparing between the Staging Area and the Git Repository (Last Commit)

5 - Limiting Comparsons to one File (or path)

6 - Comparing Between Commits

7 - Comparing Between Local and Remote Master Branches

8 - Comparison Section Cleanup and Push back to GitHub



                    Section 8 - Branching and Merging
1 - Branching Basics
Using master for all commits is not best practice
Using properly named branch is the recommended practice
Branches can then be merged back into the master once stable
To list branches
   - git branch -a
To create a branch
  - git branch branch name
To change branch
  - git checkout branch name
HEAD and origin/HEAD are pointers to latest commmits local and remote
To return to master
  - git checkout master
To rename branch
  - git branch -m oldname newname
To delete branch
  - git branch -d branch
You cannot delete the branch you are currently on

2 - Happy Path / Fast Forward Merges
Using the example repository from previous
To create branch before checking it out
  - git checkout -b branchname
  - git status will show what branch you are on
To move back to master
  - git checkout master
To show difference between branches
  - git diff branch1 branch2
To show the diiferences visually 
  - git difftool branch1 branch2 
  - This should oper p4merge to visually show the differences in the branches
To merge in changes for example into master
  - Ensure that you are on master branch
  - git merge branchname
Fast forwarding is only possible when target branch has no changes
  - For example if after switching to a new branch you switch back to master which has not been changed then fast forward is ok
To delete branch
  - git branch -d branchname

3 - Happy Path / Disable Fast Forward Merges
Creating another branch
To disable the Fast Forwarding feature
  - git merge branch name --no--ff
  - This results in a merge-commit

4 - Automatic Merges
Creating an automatic merge-commit
Example uses
  - New branch called simple changes
  - Exising files edited
  - Changes saved and committed
  - Switch back to master branch
  - File on master branch edited & saved + committed
  - git merger branch name -m "commit message"
  - git branch -d branch name is used to deleted unneeded changes

5 - Conflicting Merges and Resolution

6 - Section Cleanup and Push back to GitHub



                    Section 9 - Rebasing
1 - Simple Rebase Example

2 - Setup for rebasing conflict

3 - Abort a Rebase

4 - Rebase Conflict and Resolution

5 - Pull with Rebase (GitHub)

6 - Section Cleanup and push to GitHub



                    Section 10 - Stashing
1 - Simple Stash Example

2 - Stashing Untracked Files and Using Pop

3 - Managing Multiple Stashes

4 - Stashing into a Branch

5 - Section Cleanup and push to GitHub



                    Section 11 - Tagging
1 - Simple Tag Example / Lightweight Tags

2 - Annotated Tags

3 - Comparing Tags

4 - Tagging a Specific Commit

5 - Updating Tags

6 - Using Tags with GitHub



                    Section 12 - Bonus: Office Hour Sessions
1 - Reset and Reflog (Office Hours, Session 1)

2 - Compare Branches via GitHub (Office Hours, Session 1)

3 - Compare Branches via Command Line (Office Hours, Session 1)

4 - Stash vs Branch (Office Hours, Session 1)

5 - Gitting Help (Office Hours, Session 1)

6 - Cherry Pick (Office Hours, Session 1)



                    Section 13 - Updates and Errata
1 - Git Mac OS X Updates



                    Section 14 - Bonus: Resources and Special Offers
1 - Bonus: Exclusive Student Discounts
