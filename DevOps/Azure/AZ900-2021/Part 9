                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 9


Install and Configure the Azure CLI (Cont)
  - If I type az --version, then we'll get some versioning information related to Azure CLI components
    - It's always important to make sure that we know exactly which version of the CLI that we are using, which we see here is 2.0.59. 
    - The reason that's important is to make sure that if we're looking at documentation on how to do something from the CLI that it will work in our version of it.
  - If I were to type az --help, then from here I would see some next level commands that would be available after az, such as vm, or storage, or sql
    - That means then it's like I type az vm --help to get the next level commands after az vm. ]
    - For example the create command which we can even take that a step further
      - az vm create --help, to even learn more about how to use this command line syntax. 
  - At the same time, it's also important that we know how to authenticate to our account in Azure, of course, so that we can manage resources
    - We can do that with az login command. 
    - That's going to open up a web browser page like we see here where we can sign in to our Azure account if we're not already signed in
    - Go ahead and click next to continue signing in and specify the password and then click Sign in. 
    - It then says that we have logged into Microsoft Azure, so it will redirect me to some CLI documentation
      - I can go back to the command prompt and continue working.
  - Let's flip back to the command prompt for a second we can see a note about how it launched a browser for us to login.
    - After successfully authenticating we can see that we are connected to our AzureCloud subscription. 
  - Now that we are connected to our Azure account
    - we could issue commands like az vm list to list out virtual machine information for what we've got in our current cloud subscription. 
    - We can see it's all been returned here
    - If we kind of scroll back up, we can see that the first returned item would be our first virtual machine, and of course, a lot of details related to it
    - As we go back up we can see things like the specific names of things
    - For example, as we go down here we can see that we've got the location or region, canadaeast, for our virtual machine named eastlinuxvm1. 
    - As we start scrolling down, then we have all the further details for that virtual machine, including the admin user name, the computer name, and so on.


Azure Cloud Shell CLI
  - Be already signed into the Azure portal. So up in the bar at the top click the command prompt icon that will let me launch the Cloud Shell. 
    - Once the Cloud Shell loads, I need to ensure that I'm using either Bash or PowerShell. 
    - In this case, I'm using a Bash environment which is very familiar for Unix and Linux people. And I'm going to stick with this.
  - If I were to type az --version, I can see the version of the Azure CLI that is available here. 
    - I can scroll up and get the overall version at the very top, 2.0.59 is what it says here. 
  - So now what I want to do is clear the screen with the clear command and deploy an Azure virtual machine. To do that, I'll use the az vm create command. I'm going to use -n, and the name of this virtual machine will be eastlinuxvm2. And I'm going to assign it to a resource group with -g called rg1. I'm going to use --image, and I'm going to base this on Centos Linux. I'm going to generate some SSH keys, so --generate-ssh-keys, where the public one will be stored inside of the newly created virtual machine. And the private part of the key pair will be stored here in the Bash shell environment. Or, if you're actually doing this from a Linux station on-premises with the CLI installed, the private key will be stored on that machine. And I'm going to create a user here using --admin-username called azureuser.
  - We're going to go ahead and press Enter to begin the creation here of this virtual machine using the Azure Cloud Shell. [Video description begins] He runs the command: az vm create -n eastlinuxvm2 -g rg1 --image Centos --generate-ssh-keys --admin-username azureuser. [Video description ends]
  - Now that our virtual machine is deployed, we can see the public IP address that it was assigned by default. [Video description begins] The output is: { " fqdns": "", "id": "/subscriptions...eastlinuxvm2", "location": "canadaeast", "macAddress": "00...98", "powerState": "VM running", "privateIpAddress": "10.1.1.7", "publicIpAddress": "52.235.37.149", "resourceGroup": "rg1", "zones": "" }. [Video description ends]
  - So at this point, what I'm going to do within the Cloud Shell is use the ssh command to SSH into our newly deployed virtual machine. So to do that, I'll type ssh. The account we created was azureuser, that's what we created in our command line up here above, and I'm going to use an @ symbol and specify the public IP address of the virtual machine as we see it listed up above. [Video description begins] He runs the command: ssh azureuser@52.235.37.149. [Video description ends]
  - And when I go ahead and press Enter, it asks if I want to trust the unique digital fingerprint [Video description begins] The output indicates that the authenticity of host 52.235.37.149 can't be established and requires confirmation to continue connecting. [Video description ends] because it's the first time we've connected. I'll go ahead and type in yes and press Enter. And after a moment, we're in.
  - We know by looking at the command prompt that we have successfully SSHed into that remote host in the cloud. [Video description begins] A warning message indicates 52.235.37.149 has been permanently added to the list of known hosts. The prompt changes to [azureuser@eastwestlinuxvm2 ~]$. [Video description ends] And from here, it's business as usual. Which means we can issue any standard commands that we would issue normally in Linux once connected to the host, such as ifconfig, where we can see the internal IP address, the private IP assigned for the subnet into which that Linux host was deployed. [Video description begins] He runs the command: ifconfig. There are two large blocks of output. The first is for eth0 and has values such as netmask, ether, and txpackets. [Video description ends]


Azure PowerShell
  - Micorsoft PowerShell has been around for quite a while. 
    The latest version is up to 6 these days. Azure PowerShell focuses on how to use PowerShell commands or cmdlets to manage the Azure environment
  - PowerShell, then, is a command line interface tool
    - It's not just for developers. Administrators use it to manage the file system on a Windows client or manage the DHCP service on a Windows Server. 
    - Even third-party vendors are into PowerShell such as, managing VMWare virtual machines through PowerShell or managing Amazon Web Services through PowerShell. But here, the focus is on managing the Azure environment through PowerShell. And doing stuff in the command line provides many benefits including automation and repeatability that otherwise might be somewhat cumbersome using the Azure portal or the Web GUI.
  - One way to get into Azure PowerShell is through Azure Cloud Shell. What this means is that we would first authenticate to Azure, using the Azure portal, the web GUI interface, from which we could then launch the Azure Cloud Shell where Azure PowerShell is available.
  - Now we can also download, install, and run Azure PowerShell on any of our on-premises stations as well. Whether we are running the Windows, Linux, or MacOS operating systems. Now we have to bear in mind that if we're installing Azure PowerShell on the Windows platform, one form of the installer is an MSI file, a Microsoft installer file. Or we could download a ZIP file. We can also do an installation directly from within PowerShell itself. Such as Install-Module -Name, and you notice that a lot of the Microsoft Azure modules have an Az prefix. [Video description begins] The complete command is: Install-Module -Name Az. [Video description ends]
  - Depending on the distribution of Linux you're running, such as Ubuntu Linux, you can install components using apt-get install followed by the name of the package. And you'll need privileges to do this. A regular Linux user won't be able to do this. So we could do this, for instance, to install PowerShell on Linux in the first place, so we could get support to run Azure PowerShell cmdlets.
Pictured on the screen, we have some examples of how Azure PowerShell syntax works. As a matter of fact, it really stems back to how regular PowerShell works where we have PowerShell commands, otherwise called cmdlets, that take the form of verb dash noun. So, for example, Get is a verb, Command is a noun, separated by a dash, Get-Command. What this lets us do is retrieve a list of PowerShell cmdlets and specifically here, from specific modules where a module is really just a library or collection of PowerShell cmdlets.
So in the first command, we're really saying, show me PowerShell cmdlets related to working with Azure Compute, which means virtual machines. [Video description begins] The command is: Get-Command -Module Az.Compute. [Video description ends] Second command really is saying, show me PowerShell cmdlets related to working with Azure SQL. [Video description begins] The command is: Get-Command -Module Az.Sql. [Video description ends]
Then we've got another cmdlet where the prefix or the verb is different. It's not Get, which is retrieve really, but rather Set, to make a change. And what we are doing here is setting the Azure Context. Why would you want to set AzContext? Well, you might be working in an environment where you have multiple Azure subscriptions and so you can set the Azure Context to a particular subscription before you start working with it using Azure PowerShell cmdlets. [Video description begins] The command is: Set-AzContext. [Video description ends]
You can also get help using the Get-Help cmdlet. So if I know, for instance, there's a cmdlet called Connect-AzAccount, and I don't know how to use it but I want to figure it out, I could use Get-Help, give it the name of the cmdlet, in this case Connect-AzAccount, and if I even want detailed help, including syntax examples if available, I could use -detail at the end. [Video description begins] The command is: Get-Help Connect-AzAccount -detail. [Video description ends]
The Connect-AzAccount is a very important cmdlet because it allows you to authenticate to your Azure account. After which, of course, you can use PowerShell cmdlets to work with your Azure resources.


Install and Configure Azure PowerShell
  - While you can run PowerShell cmdlets through the Azure portals, specifically in Azure Cloud Shell
    - You can also install the Azure PowerShell module, which contains all the cmdlet definitions on-premises
    - That is what is going to be done here, start PowerShell as an administrator as we see here listed in the upper left of the window
  - To get the PowerShell module installed, I'm going to type, install-module-name az, then press Enter
    - There will be a message about needing a new version of a provider to talk to a repository on the Internet. [Video description begins] A Nuget provider is required to continue. Instructions for its installation display. [Video description ends] So I'm going to go ahead and press Enter which is the default of yes, we allow this to happen.
  - I should get a message about trusting installing something from a repository out on the Internet. [Video description begins] The message relates to an untrusted repository and asks if the installation should proceed. [Video description ends] I am going to type in yes because this time if I just press Enter the default here it says is no. So I do trust it. So what we're doing is reaching out to a repository to install this PowerShell module. The good thing about doing it from PowerShell is that it's the same method as long as you've got PowerShell running on Windows, or the MacOS, or even Linux.
Now we have a red message that says some commands are already available on the machine, and it gives me some name of the cmdlets. And that will happen if you've got different versions of modules installed. So all you have to do to avoid this and to use the latest installed version is to use the -AllowClobber parameter. No problem, let's clear the screen. Let's bring up our command initially that we used to install the module. And we'll simply add to the end of it -allowclobber, that's one word, and we'll press Enter. [Video description begins] He runs the command: install-module -name az -allowclobber. The output is the untrusted repository message. [Video description ends] And again, we going to type in yes to trust the repository and let it be on its way. And now notice this time no errors, we are good to go.
And now if I run get-module and use wildcards looking for PowerShell modules, which are essentially libraries of cmdlets, if I look for them that begin with az. and I use -list to show me what's been installed, not necessarily what's loaded in memory, we can see we've got all kinds of these great Azure PowerShell modules available, such as Az.Compute. [Video description begins] He runs the command: get-module *az.* -list. The output is a table of modules with the column headings: ModuleType, version, Name, and ExportedCommands. [Video description ends] And we can even see some of the cmdlets listed here for working with virtual machines, Cdn for Content Delivery Network, Az.Accounts for working with account information, and so on.
So what I could do is run things like get-command -module, let's say, az.compute. So show me the PowerShell cmdlets related to compute. [Video description begins] He runs the command: get-command -module az.compute. The output is a question asking whether to run software from an untrusted publisher. [Video description ends]
Now here it wants me to trust this file to do that. So I'm going to choose that I always want to run, so a. And here we now see a list of the many PowerShell cmdlets available within that module [Video description begins] The output is a list of cmdlets such as Remove-AzVmzzDataDisk. [Video description ends] where we can remove things like data disks or we can save virtual disks. And as we go further up through the list of commands because there's a lot of them available here, we see one for example called New-AzVM.
So if I clear the screen, I can also run get-help. So get-help new-azvm. And I can even ask for detail by putting in -detail. [Video description begins] He runs the command: get-help new-azvm -detail. The output is a question checking whether to run Update-Help. [Video description ends] Now, it says do you want to make sure you run Update-Help so that you have the most up-to-date information? Sure, I have some time. I'll go ahead and type in the letter y for yes and press Enter.
After a moment the update is complete. So if I scroll back up here we'll see examples of how we can actually use this cmdlet to work with new virtual machines that are being created through PowerShell. So we have the synopsis Creates a virtual machine, and we can see the many parameters available potentially to be used with the New-AzVM cmdlet. And as we scroll further down because we asked for detail with -detail, we can see a detailed listing of each and every parameter. And furthermore, down at the bottom we'll start seeing examples of how to use this cmdlet to create a virtual machine. [Video description begins] He points to different sections of the output. [Video description ends]
The last thing we'll do here is talk about how to authenticate to our Azure account here in PowerShell so we can actually do things like manage Azure resources. To do that I'm going to run connect-azaccount. That's going to pop up this Sign in screen for Azure, [Video description begins] He runs the command: connect-azaccount. The Sign in to your account dialog box opens. [Video description ends] so I'll go ahead and put in my credentials. And then I'll go ahead and click Sign in. [Video description begins] He enters his username and clicks Next, then he enters his password and clicks Sign in. [Video description ends] And after a moment, indeed we can see that we are connected to our Azure account. [Video description begins] The output lists the account, subscription, tenantId, and environment. [Video description ends]



Azure PowerShell Syntax
  - Azure Powershell cmdlets are a great way to manage your Azure resources at the command line. 
    - One way to do it is to install and download the Azure Powershell modules on your on-premises station. 
    - Another way that we're going to look at is through the Azure portal, where we can launch the Azure Cloud Shell. 
  - The icon at the top that's for the Cloud Shell, it kind of looks like a command prompt icon. So, I'm going to go ahead and click on it. That's going to start my Azure Cloud Shell, which I will maximize for a moment. [Video description begins] He clicks Cloud Shell on the toolbar. [Video description ends] I want to make sure in the upper left I'm using PowerShell and not a Linuxy Bash type of environment. [Video description begins] The Cloud Shell window opens in the PowerShell environment. The command prompt is PS Azure:\>. [Video description ends] And right away, I'm ready to go, I'm authenticated.
  - So I'm going to clear the screen with cls and I'm going to run get-azvm. This is the cmdlet I know will list Azure virtual machines. [Video description begins] He runs the command: get-azvm. The output is a list of two virtual machines under column headings which include ResourceGroupName, Name, and Location. [Video description ends] And we can see that we've got two of them here. They're deployed in resource group called RG1. We can see their names, their locations, which is the Azure region, and so on.

Now I can filter this list out a little bit. So for instance, I can run get-azvm, and if I only want to see a few of these details, I could use the the select alias. Now I say alias because select is an alias that technically actually points to select-object, but it's less to type. So I'll go with select, and I'm going to select the name comma and location properties, and I'll press Enter. And notice that we've filtered out the other properties that might not be of interest to us at the time. [Video description begins] He runs the command: get-azvm | select name, location. The output is the list of two VMs, but arranged only by Name and Location. [Video description ends]

Now I'm going to run get-command because I'm wondering is there anyway to stop a virtual machine from PowerShell? So I'm going to put wildcard asterisks symbols around the word stop. And while we have a lot of cmdlets with the word stop, one that jumps out here is Stop-AzVM. Sounds like what we want. [Video description begins] He runs the command: get-command *stop*. The output is a cmdlets list. He points to Stop-AzVM. [Video description ends] So I'm going to clear the screen and get help on it, get-help stop-azvm, maybe -example if I'm just looking at syntax examples, that might help. [Video description begins] He runs the command: get-help stop-azvm -example. The output lists the cmdlet name, a synopsis, and an example of its usage. [Video description ends]

Well, indeed as we thought, it does stop a virtual machine. Says so right here, and it's a pretty simple syntax. We give it the resource group, the virtual machine was deployed into, and of course, the name of the virtual machine, and we're ready to go. So I'm going to go ahead and run stop-azvm -resourcegroupname, in this case, it's rg1. Well, let's take a look at that actually, we're going to minimize this. [Video description begins] He switches to the Virtual machines page in the Microsoft Azure portal. [Video description ends]

So, I do have a virtual machine called eastlinuxvm1 and it's running, that's the status, and it's in a resource group called Rg1. So let's pop up our Cloud Shell again, and let's make this happen, [Video description begins] He returns to the Cloud Shell. [Video description ends] -name is eastlinuxvm1, and I'll press Enter. [Video description begins] He runs the command: stop-azvm -resourcegroupname rg1 -name eastlinuxvm1. The output contains several warnings and a message that the virtual machine is stopping operation. [Video description ends]

So, it says this cmdlet will stop the virtual machine. You sure you want to continue? The default is yes, if I just press Enter. So, I'll just press Enter. And after a moment it will begin the process of shutting down the virtual machine. So I'm just going to go ahead and minimize this and refresh my list of virtual machines here in the portal. [Video description begins] He switches to the Azure portal Virtual machines page. The eastlinuxvm1 VM has a status of Running. [Video description ends] And after a moment, we'll see that the virtual machine will be stopped. And sure enough, we can see that it's actually deallocating. So, after a moment, the state of the virtual machine will be stopped. [Video description begins] He clicks Refresh on the toolbar. The eastlinuxvm1 status changes to Deallocating. [Video description ends]

So we can use PowerShell cmdlets here in the Azure Cloud Shell which might be a little easier to work with than having to download it and install it on an on-premises station. But it really depends how you want to use it.


Azure Disk Storage
  - In the Microsoft Azure environment, virtual machine hard disks can be defined.
    - They come in the form of hard disk drives or HDDs. 
    - Or for better performance, you can have it backed by solid state drives or SSDs.
  - What we're really talking about here is Azure using a virtual hard disk or a VHD hard disk file that is used by a virtual machine
    - A virtual machine can have more than a single disk, it can have numerous data disks attached to it
    - This is considered a managed disk solution
    - This means that we can simply make a selection in the interface, or programmatically about what type of disk storage we want to use with a virtual machine.
  - This is automatically taken care of by the Azure environment
    - We don't have to worry about the underlying technical detailed configuration
    - We can choose from standard hard disk drives, or HDDs, and solid state drives
    - Or we can choose between ultra and premium SSDs
  - We can also specify the disk type, in this particular case for the operating system
    - You can also do it for data disks with options such as Premium SSD, Standard SSD, and Standard HDD
    - Premium gives us better disk performance or a higher disk IOPS value, where IOPS stands for Input and Output Operations Per Second.
  - In this case, more is better. But you'll notice what's lacking in the drop down list here is the Ultra SSD option that we discussed previously. And the reason it's not there is because this is currently a preview feature in Azure. And you have to enroll in that preview in order for that option to be available.


Configure Azure Disk Storage
  - Microsoft Azure virtual machines use virtual hard disks. 
    - Each virtual machine is going to have at least one of them, and it's going to be to host the operating system files. But we have the option, depending on the workload requirements running within that VM, to add additional data disks.
And so here in the Azure portal I'm going to go ahead and manually create a managed disk, and then I'm going to attach it to an Azure virtual machine.
[Video description begins] The Microsoft Azure portal home page displays in a browser window. The address bar contains the URL: https://portal . azure. com /#home. The page is divided into 2 panes. In the left pane is a menu bar with menus such as Create a resource, Home, Dashboard, All services and Favorites . The right pane has 2 sections. The first is titled Azure services and contains icons for some main Azure services such as Virtual machines, Storage accounts, App services, SQL databases, Azure database, Azure Cosmos, and others. The second section is titled Make the most out of Azure. It has 5 tiles listing the main advantages of using Azure. Each tile has an icon representing the advantage, a tagline, and a link to a relevant service. [Video description ends]
To get started here in the portal, I'm going to click Create a resource, towards the upper left, and I'm going to search for managed disk. And sure enough, there is Managed disks, and then I'll click the Create button.
[Video description begins] The host clicks on the Create a resource menu and a dialog box appears on the right. It is titled New and has a search field. He types managed disk in the search field and presses the Enter key. A new dialog box appears. It is titled Managed disks and has a brief explanation about managed disks. A Save for later button and a Create button are also present there. The Publisher's name is mentioned as Microsoft. [Video description ends]
[Video description begins] A Create managed disk dialog box opens. It has fields such as Name, Subscription, Resource group, Location, Availability zone, Account type, Source type, and Size. A Create button displays at the box bottom. [Video description ends]
So the first thing you have to do is give it a meaningful name, I'm going to call this DataDisk1. I'm going to tie it to an existing resource group and I'm going to put it in a location or region closest to where the virtual machine is already deployed.

[Video description begins] He types datadisk 1 in the Name field. He leaves the Subscription field with its default value, Pay-As-You-Go. He selects Rg 1 from the Resource group drop-down field. He selects Canada East from the Location drop-down field. [Video description ends]

And as I go further down I then get to choose the account type, whether it's Premium, SSD, Standard SSD, or the older and slower Standard HDD for hard disk drive. Now, depending on your disk IO requirements, you might choose one or the other of these options.

So for example, I'm just going to go middle of the road and choose Standard SSD. Then I get to choose the source. So are we taking an existing snapshot and creating a disk from it? Or if I open that drop-down list, do we want to go to a storage one? We might have to have, for instance, uploaded VHD or a virtual hard disk file from on-premises to a storage account. Or I can just make an empty disk, which I'll choose here. I'll choose the none empty disk option.

[Video description begins] He clicks the Source type drop-down arrow. 3 options display- Snapshot, Storage blob, and None ( empty disk). He selects the None option. [Video description ends]

I can then control the size of that virtual hard disk. I'm going to leave it at the default setting for this example, and then down at the bottom I'm going to click Create.

[Video description begins] At the bottom of the box is a section titled Estimated performance. It shows the IOPS limit as 500 and the Throughput limit as 60 MB per second. He clicks the Create button. [Video description ends]

So after a moment we'll have a managed disk in Azure disk that we can then work with by attaching to a virtual machine where it would be needed.

[Video description begins] He returns to the Create a resource page and a progress bar in the right corner shows the disk creation progress. [Video description ends]

So if I were to go to All resources, from here I will see a number of items, including the disk I just created.

[Video description begins] He clicks the All resources menu in the Favorites group. All the resources present in the default directory display on the right. There are a total of 21 items and he filters the resources by typing the text, disk, in the first filter field. Buttons labelled Add, Edit columns, Refresh, Assign tags, Delete, Export to CSV, and Try preview display at the top. [Video description ends]

So if I just filter it, let's say, for the word disk, after a moment, I might have to refresh, I'll see the DataDisk1 here that I've just created.

[Video description begins] 4 search results display. They include Datadisk 1 and its details such as TYPE, RESOURCE GROUP, SUBSCRIPTION, and TAGS. [Video description ends]

Now, if I were to go into a virtual machine's properties, so I'm going to click on the virtual machine's view over on the left. And let's say I pop up the Properties blade from one of my Windows virtual machines. So I'll click on that, and then I'll click on Disks in the Properties blade.

[Video description begins] A page titled Disk settings display on the right. It has a field captioned Enable Ultra SSD compatibility (preview) with 2 radio options, Yes and No. The next section is titled OS Disk and it contains a table with columns titled NAME, SIZE, STORAGE ACCOUNT, ENCRYPTION, and HOST CACHING. One disk, eastwindowsvm1_OsDisk_1_acee is listed in the table. The next section is titled Data disks and it contains the text, None, and a button labelled Add data disk. [Video description ends]

On the right we can see the existing OS disk, but notice that there are no data disks defined yet. But notice below that we've got a button that says Add data disk, so I'm going to go ahead and click on that, and from the drop-down list I'm going to choose DataDisk1.

[Video description begins] When he clicks the Add data disk button, a table displays above. It has columns titled LUN, NAME, SIZE, STORAGE ACCOUNT, ENCRYPTION, and HOST CACHING. [Video description ends]

Now, once I've done that, I'm going to click Save to save the change.

[Video description begins] The Save button displays at the top of the page, along with 2 other buttons, Discard and Refresh. [Video description ends]

So at this point I've added another virtual hard disk to an Azure virtual machine. And when I fire up that virtual machine, it will show up as another Disk device.

[Video description begins] A notification at the top-right corner says Updating virtual machine disks. [Video description ends]

 

[Video description begins] The notification text changes to Successfully updated virtual machine disks. [Video description ends]

So why don't we go ahead back to the Overview part of the Properties blade here and start the virtual machine? This is a Windows virtual machine, so I will RDP into it, and we'll take a look at that newly-added disk device.

[Video description begins] When he clicks the Start button at the top of the Overview page, a notification displays in the top-right corner. It says Starting virtual machine. [Video description ends]

[Video description begins] The Server Manager Dashboard window displays. The header bar contains the Server Manager- Dashboard title, and tabs such as Manage, Tasks, View, and Help. Below are 2 panes- left and right. In the left pane is a navigator with menus Dashboard, Local Server, and File and Storage Services. The right pane has a heading text, WELCOME TO SERVER MANAGER. Below the heading is a section containing 2 panes- left and right. The left pane displays 3 steps, QUICK START, WHAT'S NEW, and LEARN MORE. QUICK START is selected. The right pane shows 5 steps, out of which step 1, Configure this local server, is highlighted and displays in larger font than other steps. Below this steps section is a section titled ROLES AND SERVER GROUPS. Underneath are 3 tiles titled File and Storage Services, Local Server, and All Servers. [Video description ends]

So I've RDPed, or I've used the Remote Desktop Protocol client to connect to the public IP address of my Azure Windows virtual machine. And it automatically starts the server manager tools, so we can work from here by clicking File and Storage services on the left and then Disks.

And what we're going to see is that we've got a disk here, now the partitioning is not known, because it's a brand new added disk. And it shows up here as serial attached SCASI or SAS, S-A-S.

[Video description begins] When he clicks the File and Storage Services menu in the navigator, a new page displays, and it contains the following 4 menus in the naviagtor pane on the left: Servers, Volumes, Disks, and Storage Pools. When he clicks Disks, a page titled DISKS displays on the right. It has a Filter field at the top; a number of tabs such as Number, Virtual Disks, Status, and Unallocated; a table for eastwindowsvm 1; and 2 tiles titled VOLUMES and STORAGE POOLS. [Video description ends]

But notice the capacity here is about well, let's say 1,000 gigabytes is what we're looking at, so that's pretty much the default size that was set in Azure. So at this point we would right click, depending on the operating system version, and whether it's Linux or Windows. You would use whichever method you would normally use to initialize a file system and make that a usable disk device.

[Video description begins] When he right clicks on the highlighted row, a menu with the following options pops up: New Volume, Bring Online, Take Offline, Initialize, Reset Disk. [Video description ends]


Azure Blob Storage
  - When talking BLOB's we are talking about binary large objects, hence BLOBs, specifically how they relate to Azure storage accounts.
  - BLOB storage in the Azure cloud is really used as unstructured data storage. 
    - Where we don't always have the exact same type of file that is read from and written to in the exact way, instead it's unstructured.
    - We can take snapshots of BLOB files, just like you could take a snapshot of a disk volume, and it serves as a point in time picture, so to speak, of the state of the data at that point in time. There are also different storage tiers that you can choose from.
  - So if you don't require frequent access to your BLOB objects, you might configure your Azure storage tier for your BLOB storage to use the cool storage tier. Whereas if you need frequent access to your BLOB files, instead you might then choose the hot storage tier, which is optimized for frequent access. There are a variety of BLOB types, all of which are accessible over either HTTP, or the more secure HTTPS.
[Video description begins] 4 branches emerge from the BLOB icon. They are captioned Unstructured data storage, snapshots, storage tiers, and various BLOB types. An arrow points towards the BLOB icon. It has the label HTTP/ HTTPS next to it. [Video description ends]
Whether you're using a GUI tool, like a web browser, whether you're using PowerShell commandlets, the Azure CLI, or even developer's access and BLOBs through the REST API, all of those methods use HTTP or HTTPS. The Azure BLOB hierarchy starts with the storage account. So let's say we've got a storage account that we create called sa123, under which we can then create one or more containers. Think of these as being like folders on a disk that you use to organize all of your files.
And so here, let's say we've got a BLOB container called pics for pictures, into which we upload a file called pic1.jpg, that's the actual BLOB. So when we put all this together and we access it over HTTP or HTTPS, the URL would look something like this, as we see on the screen. In this case, http://sa123, which is our storage account name, then .blob.core.windows.net/pics, which is our container, and /pic1.jpg, which is the actual name of the BLOB itself.
And that can be a different name than, for example, what you started with on-premises before you uploaded it to your storage account, if that's how you're populating your storage account.
[Video description begins] A 3 -step process infographic displays. Step1 has the caption storage account: sa123. The second step has the caption BLOB container: pics, and the last step has the caption BLOB: pic1.jpg. [Video description ends]
Block BLOBs are one type of BLOB, these are used for small and large files. And you can even upload multiple BLOBs at the exact same time. So this would be useful if you want to store things like pictures, office productivity documents, any type of media documents up in the cloud. And it's great that you can upload multiple files concurrently.
Another type of BLOB is a page BLOB. This one is generally used for large file cloud storage, and it's designed for files that will experience random reads and random writes. A great example of this would be virtual hard disk files, or VHDs. Now these are the virtual hard disks that are used by Azure virtual machines. The last type of BLOB is an append BLOB. Now, this one is designed so that when we have new data, it gets added to the end of an existing BLOB.
Now this means, then, that any existing blocks of data that currently exist in the BLOB can't be updated or deleted. Why would you want this? Well, a great example of using this would be for logging purposes.


Create a Storage Account
  - Using the Azure portal to create a new Azure storage account. As the name implies, an Azure storage account is a cloud storage location
    - When you define a new storage account, there are a number of detailed settings to consider. 
    - This can be depending on things like the type of performance wanted or the type of durability
    - Or how many replicas of data you might need replicated throughout the Azure infrastructure. Now here in the Azure portal, I'm at the homepage where I could click Storage accounts, which takes me to the storage accounts view.
  - [Video description begins] The Microsoft Azure portal home page displays in a browser window. The address bar contains the URL: https://portal. azure.com/#home. The page is divided into 2 sections. In the left section, is a menu bar with menus such as create a resource, home, dashboard, all services and favorites. The right section has 2 panels. The first is titled Azure services and contains icons for some main Azure services such as virtual machines, storage accounts, app services, SQL databases, Azure database, Azure Cosmos, and others. The second panel is titled Make the most out of Azure. It has 5 tiles listing the main advantages of using Azure. Each tile has an icon representing the advantage, a tagline, and a link to a relevant service. He clicks the storage accounts service. [Video description ends]

Now I don't have any storage accounts listed right now, but I could add one by clicking the Add button.

[Video description begins] A storage accounts page appears. There are 5 buttons on the top of the page- Add, Edit Columns, Refresh, Assign Tags, and Delete. Below that are the filter options. No storage accounts are listed on the page. He clicks the add button. A create storage account page opens. He clicks the cross symbol on the upper-right corner of the page to close the page. [Video description ends]

Now instead of doing that, what we could also do is click the Create a resource link over in the upper left.

[Video description begins] He returns to the home page and clicks the create a resource option in the left panel. A dialog box titled New opens. There is a Search field on the top. He types storage accounts here. There are two columns on the page- Azure marketplace and Featured. In the first column, are options such as get started, recently created, compute, networking, storage, and others. The host clicks the Storage menu and its contents display on the right. They include quickstart tutorials for storage account, Azure file sync, data box edge, data lake storage, and others. He clicks the storage account tutorial. [Video description ends]

And from there, it opens up a new blade where we could search for what we want to create. So if I look for storage account, we could search for it that way, or we can simply browse what's presented to us on the screen. So I could simply go down under the Storage category on the left and then on the right, within that, choose Storage account, which I will do.

The first thing we have to think about is the subscription to which this storage account will be tied. I only have one subscription so that's an easy choice. Then I have to associate this with a resource group. I could either create a new one or choose from an existing one in the drop down list, which I will do. I'll choose Rg1.

[Video description begins] A Create storage account dialog box opens. There are 4 tabs in the box- Basics, Advanced, Tags, and Review+Create. The Basics tab is activated. A brief description of Azure Storage displays at the top. The first section of the box is titled project details. It has 2 fields- Subscription and Resource Group. He leaves the subscription field with its default value- pay-as-you-go. In the Resource Group drop-down field, he selects Rg1. [Video description ends]

Further down below, I have to give a name to the storage account. Notice uppercase letters will not be allowed. Lowercase are fine. But if I start using uppercase letters. It gives me a little red error message here about the fact that the name can only contain lowercase letters and numbers. And notice if I back out of the capital letters here, that if I just put in a name that's already in use that isn't globally unique. It will tell me. So I'm going to go ahead and call this eaststorageaccount. Now if I put in 1, it'll determine whether or not that's a unique name. And in this case it is because we've got the green check mark. We don't have the red error text. And of course, we always need to make sure we adhere to organizational naming standards as it applies to the creation of Azure resources. For the location, I'm going to specify Canada East, that's my region. The performance is either Standard or Premium.

[Video description begins] He types eaststorageaccount1 in the storage account name field. He selects Canada east in the Location field, the second field in this section. The performance field has 2 radio options- Standard and Premium. He selects standard and clicks the drop-down menu in the next field, Account Kind. There are 3 options here- Storage V2, Storage, and Blob Storage. He selects storage V2 (general purpose v1) option. 2 options-Cool and Hot - display in the Access Tier field. When he selects storage (general purpose v1) the Access Tier field disappears. [Video description ends]

In other words, with Standard, do we want to use older hard disk technology like magnetic hard disks that spin. Or the newer solid-state storage which provides better performance? Of course, it also means an increased cost. Now, depending on what we're planning on doing with the stuff that we put in the storage account really determines the next couple of selections. So if we're not going to have frequent access to what we're going to store in the cloud, we might want to just stick with standard performance.

But if we're going to have frequent access and we want it to be speedy, maybe we should look at using Premium. Down below I've also got to specify the account kind, whether it's StorageV2, general purpose storage. Or general purpose version one storage, or BlobStorage. Now with general purpose version two type of storage, we have an access tier, Cool or Hot. Similar to Standard and Premium, for frequently access data and the speediest access we should be choosing the Hot access tier. If this is more of an archive type of usage scenario, we would look at using a Cool access tier.

Now, if I were to switch this to Storage general purpose v1, notice that we lose the option of selecting the storage tier. And if I were to choose BlobStorage, binary large object, we then get a couple of additional options for replication. So the first option is locally redundant storage or LRS. Now, this means that we've got some replication that will occur within the Azure environment but at a very small level. Not, for example, across regions. Whereas Geo-redundant storage, if we were to select that, does provide replication across Azure regions geographically. And the benefit of doing this is that if there's some kind of a large-scale disaster or outage within an entire geographical region.

Well, your data's already been replicated elsewhere, and you can access it that way. Then we've got another variation called Read-ahead geo-redundant storage, RA-GRS. So essentially, this is similar to replicating across Azure regions, the difference being that we would have read-access only to a replica. So depending on what your storage requirements are will determine what you select here. It's important to realize that if we were to choose StorageV2 general purpose v2.

That we can change it later on if we want to for example, BlobStorage. If we're going to be working with storage, let's say of virtual machine hard disks. So we can always change our mind later. So generally speaking, the general purpose v2 account kind is what you'll see used more often than not in Azure. So I'm going to go ahead and click Next.

[Video description begins] He clicks the Next button and the Advanced tab gets active. The page has 3 sections- Security, Virtual Networks, and Data lake storage gen2. [Video description ends]

Here we have a couple of options such as whether we want to enable secure transfer. This would mean only allowing connections over HTTPS or newer versions of SMB, the Server Message Block protocol. As opposed to older, less secure standards. So I'm going to leave that on Enabled.

[Video description begins] In the security section, there is a field named secure transfer required with 2 radio options- Disabled and Enabled. He selects the Enabled option. [Video description ends]

Then we can determine where we want to allow access from in terms of virtual networks. And currently, it says All networks. If I were to click Selected network, then from the drop-down list, I could choose an existing Azure virtual network that I previously have defined. However, I'm going to leave it on All networks for now.

[Video description begins] The virtual networks section has a field allow access from. This field has 2 radio options- all networks and selected network. He selects the all networks option. [Video description ends]

We're going to talk about data lake storage later on, so I'm going to leave that disabled as a default setting, and then I'll click Next.

[Video description begins] The Data lake storage gen2 section has a field named hierarchical namespace. This field has 2 radio options- Disabled, the Default Option, and Enabled. He leaves the field with the default option. Then, he clicks the Next button. [Video description ends]

So we then get to decide whether we want to assign a tag to this storage account. And remember, tagging is just metadata, it's extra information that you might use here. So you can search, or sort, or assign costs to a department or a project. And from the name drop-down list, if I've already defined a tag before which I have, it'll show up. I've already used a tag called project. So go ahead specify that.

[Video description begins] The third tab- Tags- gets active now. A brief description displays. It reads: tags are name/value pairs that enable you to categorize resources and view consolidated billing by applying the same tag to multiple resources and resource groups. A note displays: Note that if you create tags and then change resource settings on other tabs, your tags will be automatically updated. There are 3 fields in this tab- name, value, and resource. [Video description ends]

Then I can give it a value, and I can also see any existing values I might have used for tagging. In this case, ProjectA. I'm going to go with it. I could add a multitude of tags but I'm just going to leave it that way for now. Technically, I don't have to add tags at all.

[Video description begins] He selects project in the name field, project A in the Value field and Resource Account in the Resource field. [Video description ends]

Then I'll click Next to review my settings.

[Video description begins] He clicks next and the tab Review+Create gets active. All the storage account settings display. The message validation passed displays on the top. A link captioned download a template for automation displays at the window bottom. [Video description ends]

Now notice it says the validation has passed based on my selection. We have a little summary here of what's going to be created. I also have the option to download a template for automation. That is an ARM template that uses JSON file syntax. And why would I do that?

Well, I might download it if I want to be able to deploy a storage account with all these settings from the template in the future. Maybe even using the Azure CLI or PowerShell, which is way quicker than doing it here and clicking on all these things in the screen. So it allows for repetition, automation, that type of thing. However, I'm okay with this. I'm going to click on the Create button to create the storage account.

[Video description begins] A message window displays on the top-right corner and it says: initializing deployment. A progress bar displays there. [Video description ends]

And it's taking us into an overview screen for the deployment of our new storage account.

[Video description begins] Once the deployment is complete, an overview screen displays. It has a navigator with options-overview, inputs, outputs, and template on the left. 4 buttons display on the right, namely Delete, Cancel, Redeploy, and Refresh. The text- Your deployment is underway- displays on the screen in large font. [Video description ends]

We can see some information related to it down below. But at the same time, I can simply go over to All resources on the left. And after I refresh it, we'll see that we do have our new storage account listed.

[Video description begins] He clicks the all resources option in the main window navigator and its page displays. It has buttons- add, edit columns, refresh, assign tags, delete, export to CSV, and try preview. Below the buttons the subscription mode displays. Then, filter options display, namely filter by name, resource groups, types, locations, tags, and grouping. According to the filter options selected, search results display in a table format. Its columns are name, type, resource group, location, subscription, and tags. The eaststorageaccount 1 displays in the table and the value under tags column is 1. [Video description ends]

And like always, we can see the resource group, it was deployed into the region or location. And in this case, if you've added the Tags column, you'll see that here too. The Tags column is not normally here by default unless you go to Edit columns,

[Video description begins] He clicks the Edit Columns button and its window opens on the right. All the available columns are listed on the left side and the selected columns on the right. Between the two column types are right and left arrow buttons for adding and removing columns. 5 column names display under selected columns, namely- type, resource group, location, subscription, and tags. [Video description ends]

select it on the left. And then click the arrow to move it on the right, which I've already done. So therefore, I can see some tag information. If I were to click on that storage account, it opens up the properties blade for it.

[Video description begins] He closes the edit columns window and returns to the storage account window. Here, he clicks eaststorageaccount 1 and its detailed page opens. There are 4 buttons here, namely Open in Explorer, Move, Delete, and Refresh. A navigator on the left shows menus such as Tags, Diagnose And Solve Problems, Events and Settings. [Video description ends]

And I could go back and take a look at the tags and make changes to it. Or I could go through and look at the settings specific, in this case to a storage account. Such as geo-replication options, if I want to enable that type of item.

[Video description begins] He clicks geo-replication in the settings menu group. A world map displays on the right. [Video description ends]

Also, I can see if I want to configure blob service settings and so on.

[Video description begins] He clicks blobs in the blob service menu group. Its page displays on the right. There are 4 buttons on the top- Container, Refresh, Delete, and Change Account level. A Search field is also present and a table with columns name, last modified, public access, and lease state. [Video description ends]

So we have a number of properties available then after we've configured an Azure storage account. But there you have it, that's how you can initially create the storage account here in the Azure portal.


Azure Blob Storage GUI Management
In this demonstration I'm going to use the Azure portal to create a new Azure storage account, and then we'll configure to be used for Blob storage. To get started here in the portal, I'm going to click Create a resource over on the left.
[Video description begins] The Microsoft Azure portal home page displays in a browser window. The address bar contains the URL: https://portal. azure.com /#home. The page is divided into 2 sections. In the left section, is a menu bar with menus such as Create a resource, Home, Dashboard, All services and Favorites. The right section shows the page linked to the menu item clicked on the left. He clicks the Create a resource menu. [Video description ends]
I want to create a storage account, so one way for me to do that, is to go under the Storage category here and then on the right to choose Storage accounts. I'm going to go ahead and do that.
[Video description begins] A dialog box titled New appears. It has a search field at the top. Below that are two columns-one titled Azure Marketplace and the other Featured. Under Azure Marketplace are various menu items such as Get started, Recently created, Compute, Networking, Storage, and others. In the featured column, detailed contents of the selected menu displays. The host clicks the Storage menu and its contents display on the right. He clicks the Storage account tutorial from here. [Video description ends]
So, now I have to tie it to a resource group. So I've already got one called Rg1, and down below I have to give it a name.
[Video description begins] A Create storage account window displays. It has 4 tabs- Basics, Advanced, Tags, and Review+create. The Basics tab is active now. It has a brief description about Azure storage and a section titled PROJECT DETAILS. He selects Rg 1 in the Resource group drop-down field. [Video description ends]
Now notice if I start typing in things like capital letters, it says here that the account name can use only lower case letters and, of course, numbers. And it needs to be between 3 and 24 characters, fine. No problem, because when we plan out how we're going to name our Azure resources, we should have a standard naming convention. So in this case, I'm going to call this stor, for storage account, S-T-O-R. And then I'm going to give it a number to make it unique.
[Video description begins] He scrolls down the window and reaches a section titled INSTANCE DETAILS. The first field in this section is the Storage account name. He types stor14567 here. [Video description ends]
Then, I'm going to choose a storage location that reflects where it might be used geographically. Then I get to choose between Standard and Premium types of storage, where I can determine, for example, whether or not I have access to these cool and hot access tiers. If it's standard, I do have access to that, and I could choose BlobStorage for the account kind, but I could also choose Premium for performance.
[Video description begins] He selects Canada East in the Location field. The Performance field has 2 radio options- Standard and Premium. He selects Standard and clicks the drop-down menu in the next field, Account kind. There are 3 options here- StorageV2, Storage , and Blob Storage. He selects StorageV2 option. When he clicks the Premium radio option, the Account kind field shows only the first 2 options. He finally clicks the Standard option and Blob storage option. [Video description ends]
Now, notice I don't get BlobStorage available when I do that. So it's important to understand the ramifications of the choices you make here and what features will follow down below. So I want to work with BlobStorage here, so I'm going to leave it on standard, and I'm going to choose BlobStorage. Then I get to determine if I want replication. So locally-redundant storage, geo-redundant storage, and read-access geo-redundant storage. Think of locally redundant storage as meaning that your data is replicated only within an Azure data center.
So therefore, if you've got a problem with an Azure data center, you could lose all your data if you don't have it stored elsewhere. Geo-redundant storage will replicate your data across multiple Azure regions. So, in the case of an Azure data center problem, even an Azure regional disaster, your data's still been replicated elsewhere. Then you've also got read-ahead geo-redundant storage, RA-GRS. And what this means is that you've got a primary replica that's writable, and then the replica itself from that is only allowable through read access. So in this case, I'm going to leave it on locally-redundant storage. I'm going to leave it on the hot access tier under the assumption that I'm going to be accessing the Blobs that I will populate the storage account with on a frequent basis.
[Video description begins] The next field is Replication. There are 3 options in its drop down menu- Locally-redundant storage, Geo-redundant storage, and Read-access geo-redundant storage. He selects Locally-redundant storage. The last field is Access tier and it has 2 radio options- Cool and Hot. He selects Hot. Then, he clicks the Next button. [Video description ends]
Now, I can click Next to view any advanced options. Do I want secure transfers enabled? Do I want to limit the virtual networks from which access is allowed to this storage account? I'm not going to change anything here.
[Video description begins] The Advanced tab gets activated. The page has 3 sections- SECURITY, VIRTUAL NETWORKS, and DATA LAKE STORAGE GEN2. [Video description ends]
I can click Next and then apply tags if applicable.
[Video description begins] The Tags tab gets activated. A brief description displays. There are 3 fields in this tab- NAME, VALUE, and RESOURCE. He doesn't update any of the fields and clicks Next. [Video description ends]

I'm just going to click Next to review my settings. So it's running a file validation based on my selection looks good, so at this point I'm just going to go ahead and create my BlobStorage account.

[Video description begins] The last tab, Review+create, gets activated. It contains all the options he chose. A progress bar on the top shows the review and validation progress. When the review completes, a message, Validation passed, displays at the top of the screen. He clicks the Create button and a progress bar displays in the top-right corner of the window. It is captioned- Submitting deployment. [Video description ends]

We can see clearly our deployment is underway, we have a link here to our new storage account down below. But, notice on the left also, we've got a view just for Storage accounts.

[Video description begins] A new page displays. It is titled- Microsoft.StorageAccount-2019030007131545- Overview. The page is divided into 2 sections-left and right. The left section has a search field and 4 menus- Overview, Inputs, Outputs, and Template. The right section has 4 buttons- Delete, Cancel, Redeploy, and Refresh. Below the buttons, the deployment progress status displays. A table with all newly-created resources display. There is just 1 resource here- stor14567- he just created. [Video description ends]

So if I click that, I'll see any storage accounts. And remember, if you don't see your new storage account here, you can always click Refresh until such time that it shows up and the deployment has completed. So ours is showing up here, I'm going to click on the link for

[Video description begins] There are 3 storage accounts here, including Stor14567, shown as links in a table. In the top-right corner the deployment status shows completed. He closes the window. [Video description ends]

the name of my storage account to go and do its properties blade. And there are a number of things that I can do here, for

[Video description begins] He clicks the stor14567 link and its page opens. There are 2 sections - a navigator on the left with menus. The right section shows contents of the menu clicked in the navigator. [Video description ends]

example, if I scroll all the way down, I can click on Blobs and it says, we don't have any containers yet. Well, remember, containers are kind of like folders used to organize Blobs. So what I'm going to do then is click Container. I'm going to call this one pics, for pictures.

[Video description begins] He clicks the Blobs menu in the Blob service group in the navigator. Its window opens on the right. There are 4 buttons here- Container, Refresh, Delete, and Change access level. He clicks the Container button. A section titled New container displays. It has 2 fields- Name and Public access level. Two buttons- OK and Cancel- display at the bottom of the page. [Video description ends]

And then down below I can determine whether it should be private, so no anonymous access allowed. Or anonymous read access for the blob only, or anonymous read access for containers and blobs. Why don't we start up here with Private (no anonymous access); OK, and

[Video description begins] He types pics in the Name field. He clicks the drop-down menu in the Public access level field. There are 3 options- Private ( no anonymous access), Blob (anonymous read access for blobs only), and Container ( anonymous read access for containers and blobs ). He selects Private. Then, he clicks the OK button. [Video description ends]

after a moment there's the pics container. So I'll click it to open it up. That gives me a new properties blade related to the container, and from here I can upload Blobs.

[Video description begins] The pics container appears in the contents as a link. He clicks the link and the pics page opens. The page is divided into 2 sections- a navigator on the left and the contents on the right. There is no content in the pics container. In the right section are buttons captioned Upload, Refresh, Change access level, Delete, Acquire lease, and Break lease. [Video description ends]

So I'm going to go ahead and upload Blobs. When I do that on the far right, I'll click the Select a file button.

[Video description begins] He clicks the Upload button. A new window titled Upload blob, appears in the far-right side of the screen. There is a files field where a file can be searched to be uploaded as a blob. A check box captioned Overwrite if files already exist is also present. An Upload button is present at the bottom of the window. [Video description ends]

After you've selected a local file, and you can have multiple files. At this point you can open up Advanced to specify details about the upload whether it should be treated as a block blob or an append blob. In this case it's going to be a block blob.

[Video description begins] He searches the file dog.jpg in the Files field. Then, he clicks the Advanced drop down arrow. The Advanced section displays. It has 4 fields and an Upload button. The Authentication type field has 2 options- OAuth and SAS. The Blob type field is a drop-down type with 2 options- Block blob and Append blob. The Blob size field has a default value of 4MB and the last field Upload to folder is blank. [Video description ends]

And I'm going to click Upload. And after a moment we can see it's uploaded this jpg. It's showing up right here in the list, and

[Video description begins] When he clicks the Upload button, a message box displays in the top-right corner of the window. It says: Upload completed for dog.jpg. Dog.jpg file now shows in the pics page, as a clickable link. [Video description ends]

if I actually click on it, I'll see some details, or properties related to it. Notice that by default server-side encryption is enabled for protection of data at rest. So what I'm going to do then for the URL is click the little copy icon, because I'm going to open a new web browser window, we're going to see if we can access this Blob data, over HTTP using a web browser.

[Video description begins] When he clicks the dog.jpg link, its page displays. The page has 4 tabs- Overview, Snapshots, Edit blob, and Generate SAS. The Overview tab is active now and the blob URL displays. He clicks the copy icon next to the URL. [Video description ends]

Now, when I paste that URL up here, by default, I get this kind of an error message, resource not found. Well, that's because we didn't allow anonymous access, if you recall.

[Video description begins] He opens another browser window and pastes the copied URL there. An error message displays that reads: This XML file does not appear to have any style information associated with it. [Video description ends]

So if I go back into Azure, and why don't we go back to the point, I'm just using my links here, my breadcrumb trail. Why don't we back to the point where we can actually go into our folder. So there's pics, and I'm going to click, I'm looking at the overview on

[Video description begins] He goes back to the Azure portal window and clicks the pics link. The pics container window opens. [Video description ends]

the left, I'm going to click the Change access level button at the top. And here it is, private (no anonymous access). Let's say we choose Blob (anonymous read access for blobs only).

[Video description begins] He clicks the Change access level button on the top of the window. The page opens and he clicks the Public access level drop-down field. He selects the Blob (anonymous read access for blobs only) option in the field. [Video description ends]

Okay, let's try that. So I'm going to click OK. It says it successfully applied the change. So, let's go back into our browser here where previously it failed, and let's refresh it. And sure enough, now we have access to the picture of the dog. So we can see how we can build a storage account and configure a variety of Blob Storage options, and then how we can start to work with content in the Blob Storage account.



Azure Blob Storage CLI Management
  - You can use the Azure CLI to manage Azure storage accounts and the contents within them.
  - To get started here, I'm going to build a new storage account in Azure. I've already run az login, and I've already authenticated to my Azure account. So the next thing I want to do here is I'm going to go ahead and run the az storage account create, command prefix. Where I'm going to use -n for name, and I'm going to call this store, let's say I'm just going to make up the name of the storage account. Although make sure you adhere to the naming standards for Azure resources in your organization.

[Video description begins] He types and executes the following command: az storage account create -n stor1988 - g rg1 -l canadaeast --sku "Standard_ LRS ". [Video description ends]

Then I'm going to use -g and specify I want this deployed in a resource group I've already created called rg1. And -l for location, or Azure region, in this case let's say canadaeast, and then --sku to determine the type of replication I want. In this case, I want "Standard_LRS". That's locally redundant storage replication, essentially within an Azure datacenter, as opposed to geo-redundancy across regions.

So I'm going to go ahead and do this and press Enter. So it's going to create my storage account, and it's going to be called, as you can see stor, in this case, 1988. And we can see it's returned a lot of information about what it's just done. But what we're looking for here is the provisioningState being set to Succeeded. So we're going to clear the screen and run az storage account list.

[Video description begins] Next, he types and executes the following command: az storage account list. [Video description ends]

Now again, I'm going to get a lot of information for each storage account, which is fine. But let's say I just want to see the names of the storage accounts. So I'm going use the up arrow key to go through my previous command history. And I'm going to use a vertical bar or pipe symbol, now you can shift your backslash key on your keyboard to get that. Which means I want to take the result of the command on the left and feed it into what I'm about to specify to the right of the pipe. Which is the Windows find command.

And I'm going to tell it in quotes I'm looking for "name", N-A-M-E. This is a little more digestible. For instance, here I can quickly determine that yes, our new storage account, stor1988, has been created. Now when you want to work with a storage account, let's say programmatically as a developer. Or like we are here in a command line environment, you need an access key. Well here in the portal, if I go to the Storage accounts view, I can see our storage account is there. If I click on it, there's access keys shown here in the Properties blade.

And we've got a couple of access keys, key1 and key2, and you can regenerate them independently of one another. So that one could still be used by code that might reference a specific connection string or a key. While the other one, you are changing, because from a security standpoint, it's pretty smart to change keys periodically to enhance security. Now I could copy the keys here.

So I'm going to copy, let's say, the first key. It doesn't matter which one you use when you are using command line tools or programmatic access. Back here at the CLI you might wonder, well how do I do that from the CLI? How do I list keys? Well you can if you really want to. You would run az storage account keys list, and then you'll see the same type of thing that we would have looked at. Now, of course, I get an error because I didn't tell it which storage account. Well, that might be useful.

So how about --account-name stor1988, and then the resource group we have to specify too, --resource-group, in this case, rg1. And maybe I'll tell it --output, in tabular format, so table. And then that way we'll be able to easily digest Key1 and Key2. So we can see it and we could highlight it and copy, but I've already copied it. But you might wonder, why do we care? Why do we have to copy it? Well because I want to create a container in my storage account and then upload an on-premises file into that container.

But you can't do that until you start working with the access key, one of them, either one, it doesn't matter. So here we go, I'm going to clear the screen, and what I want to do is I want to create a container, so az storage container create. Now if I don't know what to from here, I can use --help to get help on what follows next, along with examples.

[Video description begins] He types and executes the following command: az storage container create --help. [Video description ends]

However, I'm just going to bring that back up here and remove the --help. At the end to create my storage account container, I'm going to specify name, --name. Let's call it pics, for pictures, --account-name, with the two c's here. Is going to be stor, S-T-O-R 1988, but that's not all I need because I need the account keys. So --account-key and I'll just paste that key in there. You wouldn't want to memorize that, so you can also stuff that into a variable or work with it however you please. So I'm going ahead and press Enter to build that container,

[Video description begins] He types and executes the following command: az storage container create --name pics --account - name stor1988 --account -key. He types the account key and presses enter. The output displays: { " created " : true }. [Video description ends]

and it looks like it says "created": true. Well, that's good news. Here in the current directory on drive C called samplefiles, if I do a dir, I've got a file called dog.jpeg.

[Video description begins] He types and executes the following command: dir. The output displays: volume in drive C is OS. The contents of samplefiles display. There are 2 directories and one file- dog.jpg in samplefiles. [Video description ends]

Let's upload that. So do that, I'm going to run az storage blob upload, that makes sense, and then I'm going to use --container-name, which in this case is pics --name. What do you want to call the blob? How about I call it the same thing, dog.jpg --file. Where's the file? Well that would be c:\samplefiles\dog.jpg.

There's no spaces in my folder or filename so I don't need to put anything in quotes. But bear in mind, that could be an issue depending on how you're doing this. I have to tie this to my storage account, of course, --account-name is stor1988. Make sure we type that in correctly. It'll always give us errors if we don't spell things correctly, so it's not a problem to quickly fix them. Next thing is the account key, of course, --account-key. And I'll just go ahead and paste that in there. And assuming the syntax is correct, when I press Enter, it will upload that file. And we're just going to flip over in a moment to the Azure Portal to check that out.

[Video description begins] He types and executes the following command: az storage blob upload -- container - name dog . jpg -- file c: \ samplefiles \ dog . jpg -- account - name stor1988 -- account - key. He types the account key and presses enter. The output displays: finished 100%. [Video description ends]

Okay, it looks like it's finished. Let's go to the portal.

[Video description begins] The Microsoft Azure portal home page displays in a browser window. The page is divided into 2 sections. In the left section, is a menu navigation pane. The right section shows the page linked to the menu item clicked on the left. He scrolls down the navigation pane. [Video description ends]

When we were last here in the portal, we were looking at our storage account properties blade and we had gone to the access keys. Well, let's drill down a bit further down, shall we? Let's go down into Blobs, and there's the pics container, and

[Video description begins] He reaches the Blob service menu group and clicks Blobs. Its window displays on the right. Storage account is stor1988 and a table shows all the contents of stor1988. There is only 1 item -the pics container he just created. He clicks it. [Video description ends]

there's the dog JPG file. So we can work with this if we need to using the Azure CLI.

[Video description begins] The contents of the pics container display on the right. It contains only 1 file- dog.jpg. Its Blob Type is Block blob and its Lease State is Available. [Video description ends]


