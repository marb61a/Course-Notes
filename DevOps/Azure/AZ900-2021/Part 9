                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 9


Install and Configure the Azure CLI (Cont)
  - If I type az --version, then we'll get some versioning information related to Azure CLI components
    - It's always important to make sure that we know exactly which version of the CLI that we are using, which we see here is 2.0.59. 
    - The reason that's important is to make sure that if we're looking at documentation on how to do something from the CLI that it will work in our version of it.
  - If I were to type az --help, then from here I would see some next level commands that would be available after az, such as vm, or storage, or sql
    - That means then it's like I type az vm --help to get the next level commands after az vm. ]
    - For example the create command which we can even take that a step further
      - az vm create --help, to even learn more about how to use this command line syntax. 
  - At the same time, it's also important that we know how to authenticate to our account in Azure, of course, so that we can manage resources
    - We can do that with az login command. 
    - That's going to open up a web browser page like we see here where we can sign in to our Azure account if we're not already signed in
    - Go ahead and click next to continue signing in and specify the password and then click Sign in. 
    - It then says that we have logged into Microsoft Azure, so it will redirect me to some CLI documentation
      - I can go back to the command prompt and continue working.
  - Let's flip back to the command prompt for a second we can see a note about how it launched a browser for us to login.
    - After successfully authenticating we can see that we are connected to our AzureCloud subscription. 
  - Now that we are connected to our Azure account
    - we could issue commands like az vm list to list out virtual machine information for what we've got in our current cloud subscription. 
    - We can see it's all been returned here
    - If we kind of scroll back up, we can see that the first returned item would be our first virtual machine, and of course, a lot of details related to it
    - As we go back up we can see things like the specific names of things
    - For example, as we go down here we can see that we've got the location or region, canadaeast, for our virtual machine named eastlinuxvm1. 
    - As we start scrolling down, then we have all the further details for that virtual machine, including the admin user name, the computer name, and so on.


Azure Cloud Shell CLI
  - Be already signed into the Azure portal. So up in the bar at the top click the command prompt icon that will let me launch the Cloud Shell. 
    - Once the Cloud Shell loads, I need to ensure that I'm using either Bash or PowerShell. 
    - In this case, I'm using a Bash environment which is very familiar for Unix and Linux people. And I'm going to stick with this.
  - If I were to type az --version, I can see the version of the Azure CLI that is available here. 
    - I can scroll up and get the overall version at the very top, 2.0.59 is what it says here. 
  - Now what I want to do is clear the screen with the clear command and deploy an Azure virtual machine
    - Use the az vm create command. I'm going to use -n, and assign a name
    - Then assign it to a resource group with -g called rg1
    - Use --image, and for this example base it on Centos Linux.
    - Generate some SSH keys, so --generate-ssh-keys, where the public one will be stored inside of the newly created virtual machine
    - The private part of the key pair will be stored here in the Bash shell environment
    - If doing this from a Linux station on-premises with the CLI installed, the private key will be stored on that machine
    - Create a user here using --admin-username called azureuser.
  - We're going to go ahead and press Enter to begin the creation here of this virtual machine using the Azure Cloud Shell. [Video description begins] He runs the command: az vm create -n eastlinuxvm2 -g rg1 --image Centos --generate-ssh-keys --admin-username azureuser. [Video description ends]
  - Now that our virtual machine is deployed, we can see the public IP address that it was assigned by default. [Video description begins] The output is: { " fqdns": "", "id": "/subscriptions...eastlinuxvm2", "location": "canadaeast", "macAddress": "00...98", "powerState": "VM running", "privateIpAddress": "10.1.1.7", "publicIpAddress": "52.235.37.149", "resourceGroup": "rg1", "zones": "" }. [Video description ends]
  - So at this point, what I'm going to do within the Cloud Shell is use the ssh command to SSH into our newly deployed virtual machine. So to do that, I'll type ssh. The account we created was azureuser, that's what we created in our command line up here above, and I'm going to use an @ symbol and specify the public IP address of the virtual machine as we see it listed up above. [Video description begins] He runs the command: ssh azureuser@52.235.37.149. [Video description ends]
  - And when I go ahead and press Enter, it asks if I want to trust the unique digital fingerprint [Video description begins] The output indicates that the authenticity of host 52.235.37.149 can't be established and requires confirmation to continue connecting. [Video description ends] because it's the first time we've connected. I'll go ahead and type in yes and press Enter. And after a moment, we're in.
  - We know by looking at the command prompt that we have successfully SSHed into that remote host in the cloud. [Video description begins] A warning message indicates 52.235.37.149 has been permanently added to the list of known hosts. The prompt changes to [azureuser@eastwestlinuxvm2 ~]$. [Video description ends] And from here, it's business as usual. Which means we can issue any standard commands that we would issue normally in Linux once connected to the host, such as ifconfig, where we can see the internal IP address, the private IP assigned for the subnet into which that Linux host was deployed. [Video description begins] He runs the command: ifconfig. There are two large blocks of output. The first is for eth0 and has values such as netmask, ether, and txpackets. [Video description ends]


Azure PowerShell
  - Micorsoft PowerShell has been around for quite a while. 
    The latest version is up to 6 these days. Azure PowerShell focuses on how to use PowerShell commands or cmdlets to manage the Azure environment
  - PowerShell, then, is a command line interface tool
    - It's not just for developers. Administrators use it to manage the file system on a Windows client or manage the DHCP service on a Windows Server. 
    - Even third-party vendors are into PowerShell such as, managing VMWare virtual machines through PowerShell or managing Amazon Web Services through PowerShell. But here, the focus is on managing the Azure environment through PowerShell. And doing stuff in the command line provides many benefits including automation and repeatability that otherwise might be somewhat cumbersome using the Azure portal or the Web GUI.
  - One way to get into Azure PowerShell is through Azure Cloud Shell. What this means is that we would first authenticate to Azure, using the Azure portal, the web GUI interface, from which we could then launch the Azure Cloud Shell where Azure PowerShell is available.
  - Now we can also download, install, and run Azure PowerShell on any of our on-premises stations as well. Whether we are running the Windows, Linux, or MacOS operating systems. Now we have to bear in mind that if we're installing Azure PowerShell on the Windows platform, one form of the installer is an MSI file, a Microsoft installer file. Or we could download a ZIP file. We can also do an installation directly from within PowerShell itself. Such as Install-Module -Name, and you notice that a lot of the Microsoft Azure modules have an Az prefix. [Video description begins] The complete command is: Install-Module -Name Az. [Video description ends]
  - Depending on the distribution of Linux you're running, such as Ubuntu Linux, you can install components using apt-get install followed by the name of the package. And you'll need privileges to do this. A regular Linux user won't be able to do this. So we could do this, for instance, to install PowerShell on Linux in the first place, so we could get support to run Azure PowerShell cmdlets.
Pictured on the screen, we have some examples of how Azure PowerShell syntax works. As a matter of fact, it really stems back to how regular PowerShell works where we have PowerShell commands, otherwise called cmdlets, that take the form of verb dash noun. So, for example, Get is a verb, Command is a noun, separated by a dash, Get-Command. What this lets us do is retrieve a list of PowerShell cmdlets and specifically here, from specific modules where a module is really just a library or collection of PowerShell cmdlets.
So in the first command, we're really saying, show me PowerShell cmdlets related to working with Azure Compute, which means virtual machines. [Video description begins] The command is: Get-Command -Module Az.Compute. [Video description ends] Second command really is saying, show me PowerShell cmdlets related to working with Azure SQL. [Video description begins] The command is: Get-Command -Module Az.Sql. [Video description ends]
Then we've got another cmdlet where the prefix or the verb is different. It's not Get, which is retrieve really, but rather Set, to make a change. And what we are doing here is setting the Azure Context. Why would you want to set AzContext? Well, you might be working in an environment where you have multiple Azure subscriptions and so you can set the Azure Context to a particular subscription before you start working with it using Azure PowerShell cmdlets. [Video description begins] The command is: Set-AzContext. [Video description ends]
You can also get help using the Get-Help cmdlet. So if I know, for instance, there's a cmdlet called Connect-AzAccount, and I don't know how to use it but I want to figure it out, I could use Get-Help, give it the name of the cmdlet, in this case Connect-AzAccount, and if I even want detailed help, including syntax examples if available, I could use -detail at the end. [Video description begins] The command is: Get-Help Connect-AzAccount -detail. [Video description ends]
The Connect-AzAccount is a very important cmdlet because it allows you to authenticate to your Azure account. After which, of course, you can use PowerShell cmdlets to work with your Azure resources.


Install and Configure Azure PowerShell
  - While you can run PowerShell cmdlets through the Azure portals, specifically in Azure Cloud Shell
    - You can also install the Azure PowerShell module, which contains all the cmdlet definitions on-premises
    - That is what is going to be done here, start PowerShell as an administrator as we see here listed in the upper left of the window
  - To get the PowerShell module installed, I'm going to type, install-module-name az, then press Enter
    - There will be a message about needing a new version of a provider to talk to a repository on the Internet. [Video description begins] A Nuget provider is required to continue. Instructions for its installation display. [Video description ends] So I'm going to go ahead and press Enter which is the default of yes, we allow this to happen.
  - I should get a message about trusting installing something from a repository out on the Internet. [Video description begins] The message relates to an untrusted repository and asks if the installation should proceed. [Video description ends] I am going to type in yes because this time if I just press Enter the default here it says is no. So I do trust it. So what we're doing is reaching out to a repository to install this PowerShell module. The good thing about doing it from PowerShell is that it's the same method as long as you've got PowerShell running on Windows, or the MacOS, or even Linux.
Now we have a red message that says some commands are already available on the machine, and it gives me some name of the cmdlets. And that will happen if you've got different versions of modules installed. So all you have to do to avoid this and to use the latest installed version is to use the -AllowClobber parameter. No problem, let's clear the screen. Let's bring up our command initially that we used to install the module. And we'll simply add to the end of it -allowclobber, that's one word, and we'll press Enter. [Video description begins] He runs the command: install-module -name az -allowclobber. The output is the untrusted repository message. [Video description ends] And again, we going to type in yes to trust the repository and let it be on its way. And now notice this time no errors, we are good to go.
And now if I run get-module and use wildcards looking for PowerShell modules, which are essentially libraries of cmdlets, if I look for them that begin with az. and I use -list to show me what's been installed, not necessarily what's loaded in memory, we can see we've got all kinds of these great Azure PowerShell modules available, such as Az.Compute. [Video description begins] He runs the command: get-module *az.* -list. The output is a table of modules with the column headings: ModuleType, version, Name, and ExportedCommands. [Video description ends] And we can even see some of the cmdlets listed here for working with virtual machines, Cdn for Content Delivery Network, Az.Accounts for working with account information, and so on.
So what I could do is run things like get-command -module, let's say, az.compute. So show me the PowerShell cmdlets related to compute. [Video description begins] He runs the command: get-command -module az.compute. The output is a question asking whether to run software from an untrusted publisher. [Video description ends]
Now here it wants me to trust this file to do that. So I'm going to choose that I always want to run, so a. And here we now see a list of the many PowerShell cmdlets available within that module [Video description begins] The output is a list of cmdlets such as Remove-AzVmzzDataDisk. [Video description ends] where we can remove things like data disks or we can save virtual disks. And as we go further up through the list of commands because there's a lot of them available here, we see one for example called New-AzVM.
So if I clear the screen, I can also run get-help. So get-help new-azvm. And I can even ask for detail by putting in -detail. [Video description begins] He runs the command: get-help new-azvm -detail. The output is a question checking whether to run Update-Help. [Video description ends] Now, it says do you want to make sure you run Update-Help so that you have the most up-to-date information? Sure, I have some time. I'll go ahead and type in the letter y for yes and press Enter.
After a moment the update is complete. So if I scroll back up here we'll see examples of how we can actually use this cmdlet to work with new virtual machines that are being created through PowerShell. So we have the synopsis Creates a virtual machine, and we can see the many parameters available potentially to be used with the New-AzVM cmdlet. And as we scroll further down because we asked for detail with -detail, we can see a detailed listing of each and every parameter. And furthermore, down at the bottom we'll start seeing examples of how to use this cmdlet to create a virtual machine. [Video description begins] He points to different sections of the output. [Video description ends]
The last thing we'll do here is talk about how to authenticate to our Azure account here in PowerShell so we can actually do things like manage Azure resources. To do that I'm going to run connect-azaccount. That's going to pop up this Sign in screen for Azure, [Video description begins] He runs the command: connect-azaccount. The Sign in to your account dialog box opens. [Video description ends] so I'll go ahead and put in my credentials. And then I'll go ahead and click Sign in. [Video description begins] He enters his username and clicks Next, then he enters his password and clicks Sign in. [Video description ends] And after a moment, indeed we can see that we are connected to our Azure account. [Video description begins] The output lists the account, subscription, tenantId, and environment. [Video description ends]



Azure PowerShell Syntax
  - Azure Powershell cmdlets are a great way to manage your Azure resources at the command line. 
    - One way to do it is to install and download the Azure Powershell modules on your on-premises station. 
    - Another way that we're going to look at is through the Azure portal, where we can launch the Azure Cloud Shell. 
  - The icon at the top that's for the Cloud Shell, it kind of looks like a command prompt icon. So, I'm going to go ahead and click on it. That's going to start my Azure Cloud Shell, which I will maximize for a moment. [Video description begins] He clicks Cloud Shell on the toolbar. [Video description ends] I want to make sure in the upper left I'm using PowerShell and not a Linuxy Bash type of environment. [Video description begins] The Cloud Shell window opens in the PowerShell environment. The command prompt is PS Azure:\>. [Video description ends] And right away, I'm ready to go, I'm authenticated.
  - So I'm going to clear the screen with cls and I'm going to run get-azvm. This is the cmdlet I know will list Azure virtual machines. [Video description begins] He runs the command: get-azvm. The output is a list of two virtual machines under column headings which include ResourceGroupName, Name, and Location. [Video description ends] And we can see that we've got two of them here. They're deployed in resource group called RG1. We can see their names, their locations, which is the Azure region, and so on.

Now I can filter this list out a little bit. So for instance, I can run get-azvm, and if I only want to see a few of these details, I could use the the select alias. Now I say alias because select is an alias that technically actually points to select-object, but it's less to type. So I'll go with select, and I'm going to select the name comma and location properties, and I'll press Enter. And notice that we've filtered out the other properties that might not be of interest to us at the time. [Video description begins] He runs the command: get-azvm | select name, location. The output is the list of two VMs, but arranged only by Name and Location. [Video description ends]

Now I'm going to run get-command because I'm wondering is there anyway to stop a virtual machine from PowerShell? So I'm going to put wildcard asterisks symbols around the word stop. And while we have a lot of cmdlets with the word stop, one that jumps out here is Stop-AzVM. Sounds like what we want. [Video description begins] He runs the command: get-command *stop*. The output is a cmdlets list. He points to Stop-AzVM. [Video description ends] So I'm going to clear the screen and get help on it, get-help stop-azvm, maybe -example if I'm just looking at syntax examples, that might help. [Video description begins] He runs the command: get-help stop-azvm -example. The output lists the cmdlet name, a synopsis, and an example of its usage. [Video description ends]

Well, indeed as we thought, it does stop a virtual machine. Says so right here, and it's a pretty simple syntax. We give it the resource group, the virtual machine was deployed into, and of course, the name of the virtual machine, and we're ready to go. So I'm going to go ahead and run stop-azvm -resourcegroupname, in this case, it's rg1. Well, let's take a look at that actually, we're going to minimize this. [Video description begins] He switches to the Virtual machines page in the Microsoft Azure portal. [Video description ends]

So, I do have a virtual machine called eastlinuxvm1 and it's running, that's the status, and it's in a resource group called Rg1. So let's pop up our Cloud Shell again, and let's make this happen, [Video description begins] He returns to the Cloud Shell. [Video description ends] -name is eastlinuxvm1, and I'll press Enter. [Video description begins] He runs the command: stop-azvm -resourcegroupname rg1 -name eastlinuxvm1. The output contains several warnings and a message that the virtual machine is stopping operation. [Video description ends]

So, it says this cmdlet will stop the virtual machine. You sure you want to continue? The default is yes, if I just press Enter. So, I'll just press Enter. And after a moment it will begin the process of shutting down the virtual machine. So I'm just going to go ahead and minimize this and refresh my list of virtual machines here in the portal. [Video description begins] He switches to the Azure portal Virtual machines page. The eastlinuxvm1 VM has a status of Running. [Video description ends] And after a moment, we'll see that the virtual machine will be stopped. And sure enough, we can see that it's actually deallocating. So, after a moment, the state of the virtual machine will be stopped. [Video description begins] He clicks Refresh on the toolbar. The eastlinuxvm1 status changes to Deallocating. [Video description ends]

So we can use PowerShell cmdlets here in the Azure Cloud Shell which might be a little easier to work with than having to download it and install it on an on-premises station. But it really depends how you want to use it.


