                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 26


Linux Azure Virtual Machine Deployment
  - Use the Azure portal to create a new Linux virtual machine, to get started, in the upper left, I'm going to click Create a resource.
  - See the most popular virtual machine images here, including Ubuntu Server, which I'm going to use
    - See more options by clicking the Compute category on the left
    - On the right, I can click the See all link. 
    - This is where filtering is done for example by operating systems
    - Instead of selecting all operating systems, I could choose only the Linux variants shown here.
  - When that is done then close the drop down list, the filter is effective
    - In this case for example, I'm going to choose Ubuntu Server 18.04 LTS, when clicked it gives a little brief synopsis about that
    - Click Create, then the details that need to be filled in will be available
    - If the Subscription is already filled in put this into an existing Resource group.
    - Call this according to the naming scheme being used and the same for the region
    - Make sure that the Ubuntu image here is what is wanted
  - Leave the default virtual machine sizing, otherwise if I need to accommodate a busier workload I might need more than 2 vcpus and 8 GB of memory
    - When there is a change in size, it's not only increasing or scaling up vertically
    - There is also the option to scale down, that means choosing less horse power
    - For example, maybe I'll choose a standard general purpose type of sizing
    - Click Select, it now reflects the change, only 1 vcpu and 2 GB of memory.
  - With Linux you can either use SSH public key authentication or standard password authentication, which I'll do here.
  - With password authentication you've got to specify a username and confirm a password
    - With SSH public key, you need to paste in the SSH public key for the specific username that you specify
    - Of course, you need to have the related private key in your possession on your station.
    - Go ahead and configure password authentication here, once done we can control things like inbound port rules for network traffic.
    - Leave the defaults and then just click Next.
  - We have the option, just like with the Windows virtual machine, as to whether we want the better performing SSD
    - Or the slower performing HDD, hard disk drive type of disk system, leave it on Premium SSD
    - Don't attach any additional data disks and stick with the operating system disk here
    - Go to Next, I can then place this within a virtual network in subnet, which I can either create newly or I can choose from the drop-down list
    - Leave this in the existing Vnet and Subnet,create a Public IP, so I can reach into that virtual machine from across the Internet. 
    - Do not going to change any of the other settings here related to inbound ports, public configuration, or NIC security group options
    - Also do not change load balancing options so just click Next.
  - Leave the defaults for boot and OS guest diagnostics and auto-shutdown, click Next.
    - On the Guest config, I could click Select an extension to install, which is an agent that exist in the VM, just like it does for Windows. 
    - So for virus scanning, or for backup purposes, and so on.
    - Then click Next for tagging.
    - At this point is the chance to tie it to a projec, it can be tied to an existing project, in this case ProjectA
    - That's a value, that's already been filled in, or define something new here for example Project B.
    - Click Review + create. I'm going to check that all my options passed the final validation.
  - Here we can see it has, listed here at the top which is okay
    - See the pricing per hour on a US dollar basis, then click Create
    - That's going to show a little deployment screen so we can see how far along the deployment is.
  - Of course, I can go to the All resources view on the left
    - Firstly refresh it here, we'll see it has started to create the various resources that are required to run my Linux virtual machine.
  - That would include things like an IP address, a network security group, and other items like the network interface
    - That it's going to create as we keep going, we can see the network interface, and even the virtual machine itself
    - When clicking on that virtual machine link to open up its properties blade
    - We can see from here we have all management options available in the portal, including the ability to start, stop, and restart the virtual machine.
    - Just like we have the option to do for a Windows virtual machine.


Connect to Azure Virtual Machines
  - Once you've deployed a virtual machine into the Azure cloud, how do you connect to it?
  - There are a few ways to do it, and our perspective in this demo will be how to do it from outside of Azure. 
    - In other words, from over the Internet from our on-premises network. 
    - Here in the Azure portal, I've already clicked on the Virtual machines view on the left. 
    - There are two virtual machines here, one running Linux, one running Windows, one is in the midst of being created and one is running.
  - Our Windows virtual machine should currently running. 
    - First step to talk about is about how to connect to a Windows virtual machine deployed in the Azure cloud. 
    - Click on the link for the name of that Windows virtual machine.
  - What is of interest in here is its public IP address
    - Configure it with a public IP so I can reach into it from over the Internet. 
    - Hover over it, there should be the little two pieces of paper icon over on the right, which implies copying, like the tip tells me. 
    - Click to copy that to my Windows clipboard.
  - Next is to fire up the Remote Desktop Protocol, or RDP client, here on my Windows 10 station.
    - Paste that public IP address assigned to my Azure Windows virtual machine, and then I'm going to click Connect.
    - Tell it, Don't ask me again for connections to this computer, about trusting it and click Connect again
    - Notice there is a message that says, Remote Desktop can't connect to it
    - We know it's running, and we know that that is a valid IP address
    - Obviously we are connected to the Internet to see this screen in the first place
    - It's probably related to some kind of blockage, not allowing port 3389 traffic, which is what is used by Remote Desktop Connections
    - So click OK, and let's go back into Azure and take a look at this.
  - Still in the portal and still looking at the Properties blade for the Windows virtual machine, click on Network in the Properties blade.
  - On the right I can see that VNet, so virtual network inbound traffic, is allowed. 
    - It says allowed over on the right, so is load balancer traffic, but everything else is denied
    - This means it is no wonder we can't make a connection so click Add inbound port.
  - The source here can be configured as a specific IP address, or an Application security group, or leave it here on Any, then specify the source port
    - That's fine, but the destination here, I can specify as being any or a specific IP address
    - Leave it here on any, but the destination port range is important.
    - Here we want to allow traffic to 3389.
    - That's going to be TCP based, or I could specify UDP, or just leave it on Any, and in this case I want to allow not deny it.
  - We also specify the priority, the default priority here is 100
    - Also change the name here to reflect the new port number for Remote Desktop Protocol.
    - Go ahead and click Add, that's going to add it to the list of inbound rules that we see listed in the background.
  - It's important to note that the rule is at the top of the list, because these rules are checked from top down
    - We don't want this Port_3389 rule underneath the DenyAllInBound, because it would never get used
    - Try to Remote Desktop into this virtual machine again it should work fine
  - The username and password that were defined when deployed that virtual machine, and I'm going to go ahead and click OK
    - We can see here we're being asked to trust the identity of the computers, select Don't ask me again, I trust it, and choose Yes
  - After a moment, we can see that we are actually now being sent into a Remote Desktop session of that Windows Server 2016 vm which is running in the cloud
    - Before you know it, we're in, it's just another Windows virtual machine but in this case, it happens to be running in the cloud.
  - Much quicker and easier to set up than we might do if we were trying to set this up ourselves manually on-premises
    - Go into the Start menu here, and let's say we go to a command prompt
    - Run cmd, you can see in the background it's automatically launching the Server Manager GUI tool
    - This is normal for new installations of the Windows Server operating system.
    - Simply type ipconfig, notice here that we don't see a reference to the public IP address we connected to
    - Because that's not configured within the virtual machine operating system, it's a separate Azure resource.
