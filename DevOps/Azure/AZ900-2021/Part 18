                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 18


Configure an Azure Point-to-Site VPN
  - An Azure point-to-site VPN is essentially a client-to-site VPN.
  - Ppen up an existing virtual network, to do that go to Virtual networks view on the left here in the portal.
    - Click on the first virtual machine setup
    - Click on it to pull up its Properties blade, I can then click on Subnets.
  - The reason being here is because when you want to set up a point-to-site VPN
    - You have to choose a virtual network where you're going to create what's called a gateway subnet
    - Which is required for this type of point-to-site VPN connectivity
    - Notice that we've got a button here called Gateway subnet with a plus sign,  to add one go ahead and click on that.
    - Specify an address range for this subnet of 10.1.2.0/24.
  - Don't make any other changes click OK. So you need to have this gateway subnet defined in order to move further with your configuration of a point-to-site VPN.
  - The next thing to do is create what's called a virtual network gateway
    - Don't do that in the Properties blade of a virtual network, it's its own separate Azure resource
    - Click on Create a resource in the upper-left, and what I'm going to do is, let's say, search for virtual network gateway.
  - So, if I start searching for that virtual network gateway, and we could see it pops up in the list
    - Go ahead and click on that and click the Create button on the introductory screen.
  - Start by giving it a name for example call it vpngw1, for VPN gateway 1?
    - It's not for a dedicated express route circuit
      - Which is used if you have a dedicated network link from your network to the Azure cloud without going through the Internet
      - That's not the case here, this is going to be going over the Internet, hence VPN.
    - It's going to be a route-based VPN connection.
    - Don't change any of the other specific items other than linking this to our virtual network where we've defined our gateway subnet.
    - That was EastVNet1, so select that.
  - The next thing is to have a public IP address defined 
    - Because we need some way to make a connection over the Internet to some location to get into the Vnet through an encrypted tunnel.
    - Let it create a new public IP address, and so we're going to call it vpngw1pubIP.
    - It's going to be a dynamic IP address, we don't have much of a choice here.
    - Leave the location and click Create, beware that this can take some time. 
      - Microsoft states in their documentation it can take up to 45 minutes before this is ready to go.
    - You may have time to grab coffee and enjoy that as you wait for your virtual network gateway to be fully deployed.
  - In the meantime, we can deal with the whole PKI certificate issue
    - Because clients that connect to the point-to-site VPN need to authenticate themselves with a PKI certificate
    - In the PowerShell ISE, the first chunk of code I have here is going to create a self-signed root certificate.
  - Do that using the New-SelfSignedCertificate PowerShell cmdlet
    - It's going to be a custom self-signed type of specific certificate and for the example call it RootCert, CN= means common name equals
  - We can see here that the hashing algorithm is sha256 and the key length will be 2048 bits
    - We can also see it's going to be stored in the certificate store drive here on this Windows machine
    - Go ahead and select that code, and we're going to execute it by clicking the Run Selection button.
  - When we've done that down below, it looks like it executed without incident
    - Change directory to the cert drive, and we're going to go ahead and go into currentuser.
    - In Cert:\CurrentUser\my,  do a dir for directory listing, we can see that we've got our RootCert here.
  - The next thing to do is we're going to create a client certificate using the New-SelfSignedCertificate PowerShell cmdlet.
    - Once we've run that code, we can see that it will be called ClientCert.
    - And we can see indeed that that client certificate has been created.
  - The machine on which I've run this code is where that client certificate was created
    - Otherwise, I could go into the MMC tool and then load up the certificates snap-in and export it to another machine
    - From the Start menu on my machine, I searched for and launched MMC, Microsoft Management Console, and this is what I get.
  - Go into the File menu and choose Add/Remove Snap-in because I want to work with certificates, add that component, Certificates, Add.
    - Leave it on my user account, and Finish and OK.
    - On the left I'm going to drill down under Certificates for current user, Personal Certificates.
  - You may have to refresh the screen and make sure you're seeing the most up-to-date information, now we've got one root cert and also our client cert.
  - What we need to do now is export the root cert to a file, so that we can take the public key portion and configure that in Azure
    - Go ahead and right-click on the RootCert and choose All Tasks, Export, and in the Wizard click Next.
    - We don't want the private key exported, only the public so leave the default of No, do not export the private key and click Next.
    - Make this a Base-64 encoded CER files, I'll select that and click Next.
    - Specify a file name, let's say, on the root, and I'm going to call it rootcertpubkey
    - Then just go ahead and click Next and Finish, and it says the export was successful.
  - On the root of drive C, I can see the file here, I'm going to right-click on it, and I'm going to open it with Notepad.
  - Because what I want to do is highlight everything between begin certificate and end certificate
    - This is the public key portion of the root certificate that we need to paste into a specific place, which we'll see in a moment in Azure.
  - Here in Azure go to All resources what is of interest is looking at our virtual network gateway that we created, in this case, vpngw1
    - Click on it to open up its Properties blade.
    - Click Point-to-site configuration, and I'm going to click Configure now.
  - Specify an address pool, essentially that I want to assign to VPN clients
    - We want to make sure that that matches whatever they should have access to on a specific network
    - For example what I would do is set that to 1.1.1.0/24 
    - That has to match what's on the internal part of the network in Azure that I want clients to have an address for
    - Change from tunnel type OpenVPN (SSL), let's say, to IKEv2 and SSTP, depending on the type of VPN you want to set up.
    - As for the Azure certificate, call it here RootCert, and paste in what we just copied into the public certificate data field.
    - At this point we've got that configuration, so I'm going to go ahead and click Save.
    - The next thing to do is click on the Connections part of the blade.
  - Notice currently we have no VPN connection, go back to Point-to-site configuration where I have the option of downloading a VPN client package.
    - Go ahead and click on that.
    - After it's been downloaded, go ahead and open it up.
  - When I open up the zip file, I'm going to choose the appropriate platform, in this case Windows AMD64
    - Go ahead and I'm going to run that executable installer.
    - And it asks me if I want to install the VPN client for EastVnet1, choose Yes.
  - On my machine, if I go down and click on my Network Settings, I'll see I've got a connection for EastVnet1.
    - Select that, then can choose to make a connection.
    - Click Connect and Continue.
    - After a moment, we can see indeed we are connected through our point-to-site VPN to our EastVnet1 virtual network in the cloud.
    - On my machine, notice if I go to a prompt and run ipconfig that we've got an IP address within that specific range for that point-to-site VPN connection.


Azure Application Gateway
  - In a very general sense, the Azure Application Gateway is a load balancer for web application traffic. 
    - That's where the similarities stop because with a traditional load balancer
      - Traffic gets routed to backend virtual machine instances through the load balancer based on things like the IP address and port number
    - However, with the Azure Application Gateway, we have many options above and beyond what you can do with a traditional load balancer.
  - As an example of this, the Azure Application Gateway could load balance and get clients connected to backend virtual machines 
    - Based on routing rules that might be based on an incoming URL passed to the application from the client
    - The Azure App Gateway is then connectable from the Internet, it will have a public facing IP address if it's designed to be made publicly visible.
  - The Azure App Gateway will then have access to backend VMs, listed here as VM1, VM2, and VM3, it doesn't have to be three; it could be two
  - It could be more than three and we can also configure options like session affinity
  - This can be used so that a user that's got an established session on VM1
  - For example the next time that they make a connection which could be moments later, they will still have their session directed to that same backend server.
  - When we talk about web applications over HTTP or HTTPS, bear in mind that HTTP and HTTPS are really stateless
    - In other words, once we contact a web server and ask it to do something and it does it, that's it
    - So we need to have a way therefore where we can maintain session affinity information on the backend
    - This is a configuration option within the Azure Application Gateway among many others.
  - The application gateway also supports a web application firewall, or a WAF, W-A-F
    - When you deploy an Azure Application Gateway, you have a web application firewall that can be configured
    - This is a specific type of firewall that's designed to look for web application exploits
    - Such as cross-site request forgeries, or directory traversals
    - Where attackers might try to go further back in the file system outside of the location of files that make the website run
    - Which could give them unauthorized access to other files in the operating system.
  - Cross-site scripting is also another type of attack that can be prevented
    - SQL injection which might allow a user to input query statements in fields that get sent to a database
    - Those fields are validated properly and so might reveal more sensitive information than it was designed to do
    - There are many other types of web application exploits that are protected with a web application firewall.
