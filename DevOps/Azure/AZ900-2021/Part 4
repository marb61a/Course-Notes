                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 4


Azure PaaS
  - Azure Platform as a Service, otherwise called PaaS, applies to IT administrators and developers. 
    - These are the types of IT people that would be interested in Platform as a Service offerings.
  - Now let's find out why that is because there are many examples of Platform as a Service in Azure
    - The first of which is Azure Active Directory, otherwise called AAD
      - Normally, there maybe an on-premises Active Directory domain controller that has a replica of the Active Directory domain database. 
      - That would contain things like user accounts, computers, for those computers joined to the domain, groups, and so on.
  - Well, instead of provisioning a virtual machine and installing the Active Directory services role and all of that manual work
    - We can simply deploy a new instance of Azure Active Directory very quickly in the Azure Cloud
    - There is no need to worry about the underlying virtual machines, because if manually deploying virtual machines, it wouldn't be Platform as a Service. 
      - It would instead be Infrastructure as a Service.
  - Other examples of Platform as a Service include deploying Azure SQL databases in the Azure Cloud. 
    - Deploying the Azure Search solution or the Azure Content Delivery Network or CDN, which is used to place content geographically nearest users that will be requesting it to speed up the experience. So these are all examples of things that we could deploy very quickly without having to manually deploy the underlying virtual machines that would support these services. So in other words, these are examples also of managed services.
  - With Platform as a Service in Azure, there is shared responsibility where the cloud provider
    - Microsoft, is responsible for the underlying servers that will run things like Active Directory and Microsoft SQL Server
    - However we as the cloud customers have a different type of responsibility
    - We would be responsible, for instance, for the contents that would be stored within Azure Active Directory
    - This would include user accounts that we might create for authentication and groups and the privileges they have through role-based access control. 
  - If deploying Azure SQL databases, we would be responsible for the specific configuration of how that works and whether we've got replicas. 
    - Of course, the data that's stored within those Azure SQL databases.
  - Like pretty much everything in Azure, Platform as a Service offerings can be accessed in a number of ways 
    - This includes deploying, configuring, and just ongoing management
    - The Azure Portal can be used as can the web GUI and also Azure CLI commands. 
    - We can use Azure PowerShell cmdlets to talk to Platform as a Service offerings
    - At the development level, developers can talk to Platform as a Service items such as Azure SQL databases through exposed APIs
      - They can do that using the REST API.


Azure SaaS
  - Software as a Service, otherwise called SaaS, is one of those cloud service models that applies primarily to end users.
  - What does that mean using the word primarily? 
    - What it really means, is that end users benefit from the use of Software as a Service, such as office productivity tools that are cloud based. 
      - However, IT techs are still responsible for making config changes or applying security settings that will influence how end users use those solutions
  - Examples of Software as a Service would include cloud-based solutions related to things like email, or calendaring
    - Office productivity tool such as Office 365, which can also include things like SharePoint Online.
  - With Software as a Service, the shared responsibility is split between the cloud provider and the cloud consumer. 
    - The cloud provider is responsible for all of the underlying hardware to make those services available 
    - Also underlying servers that might run Microsoft Exchange Mail Server software, so it's available for cloud-based mail, and office productivity software.
  - But we as the cloud customer, we're SaaS end users, Software as a Service
    - This means that we are responsible for configuring the behavior of those solutions
    - This may include some security settings, whatever is available with the specific solution we're talking about, and also the data that results from it. 
    - We would be responsible, for instance for how data is treated or backed up, archived, or replicated that we might be working with, in eg SharePoint Online
  - So we can manage Software as a Service settings using a web browser
    - An example is to be using the Office 365 web portal to provision users or control what they can access. 
    - We can also use command line tools to do the same things
    - For instance, we might use PowerShell cmdlets to authenticate to Azure Active Directory which is used by Office 365. 
    - We might also use separate PowerShell cmdlets to make a connection to SharePoint Online, so we begin managing that aspect of the Office 365.


On-Premises vs. Cloud
  - Years ago, when cloud computing was a newer thing, there were a lot of comparisons made as to how we could use cloud computing or on-premises IT solutions, one or the other, not both together. But the reality is we can use a hybrid of both. It doesn't necessarily have to be just black and white.
  - So let's talk about on-premises IT computing versus cloud computing. And we'll start from the context of hardware. With on-premises IT systems, we as the private organization are entirely responsible for selecting, then acquiring and waiting for hardware to be shipped. Including things like racks for server rooms or data centers, rack-mount servers, UPS battery systems, storage appliances, firewall appliances, routers, switches, the list goes on and on. In the cloud, that's the provider's problem, not us as a cloud consumer.

The same goes for the configuration of that hardware, the ongoing management, firmware updates that need to be applied perhaps over time, and the eventual decommissioning of it and finding replacement hardware. On-premises that would fall entirely on the organization, but in the cloud, that responsibility falls on the cloud provider.

If we look at the same type of thing but from a software perspective, on-premises, private organization is responsible. The selection, the acquisition and the licensing of whatever software solutions are needed to meet business needs. Now in the cloud, the acquisition part isn't a big deal because the cloud provider will have something available such as Office 365 and its variety of options. However, licensing is an interesting topic, because if we've already purchased licenses, let's say for the Windows Server operating system or maybe for Microsoft SQL Server and we're running all that on-premises, when we migrate to the cloud some Azure Cloud offerings will allow us to bring our own license, BYOL. So we can reuse our investment in licenses and not have to pay for it all over again, just because we're migrating to the cloud.

The configuration of software, the ongoing management, the application of updates, and the eventual decommissioning of software, all of this is our responsibility if we are doing all of this on-premises. However, in the cloud, depending on the specific cloud service model you're talking about, most or all of this could be the cloud provider's responsibility. The reason I say it may or may not be the cloud provider's responsibility is, imagine that you're deploying software in the form of a Linux virtual machine in Azure. So you're manually deploying that. That's Infrastructure as a Service. You as the cloud customer, then, are responsible for updating that operating system and installing software in that virtual machine and updating it as well. So it really depends on the specific cloud service model that you're talking about when it comes to software and who is responsible for what.

The next thing to consider is that if we've got a physical disaster, when we have an on-premises environment, it might be beneficial to use the cloud as an alternate site. Now that means that we could have IT systems that run on-premises. So web applications, database servers and so on, that could be duplicated and left running in the cloud. And depending on our requirements, we might even have continuous data replication to the cloud, so in the event of a physical disaster, everything is ready to go in the cloud.

The other thing to consider is the responsibilities, as we mentioned. On-premises really means that the private organization is pretty much responsible for everything. In the cloud, generally speaking, the cloud provider is responsible for a lot of the infrastructure, certainly when it comes to hardware.

We also have to think about the cost. We want to make sure that we dispel the myth that cloud computing is always cheaper than the alternative, which would be to host everything yourself on-premises. That's not always the case necessarily. It's not as simple as that. We have to consider the fact, though, that we've got capital expenditures when it comes to purchasing and paying upfront for all of this hardware that we're running on-premises. We don't have that Capex or that capital expenditure, when it comes to exclusively using cloud computing. In that case, we've got an operating expense over time with a monthly subscription and usage payment. So that's Opex, or operating expenditures. [Video description begins] With the cost of cloud computing, Capex vs Opex needs to be considered. [Video description ends]

And in the cloud, we can also configure billing alert so that we can be notified when a certain cost threshold is exceeded. So that we can go take a look and perhaps realize that we left databases running in the cloud for a test environment when we're actually finished with them. And remember, when you leave things running in the cloud, you're still paying for them, so very important to watch that. And we'll focus on that in more detail later when we talk about cost management.


Cloud Migration
  - Cloud migration deals with migrating on-premises IT environments into the Azure cloud. Things like specific IT systems, such as servers, or even specific IT workloads running on a server. So imagine that you've got an on-premises file server, that's also doubling as a database server. And so you might choose the database workload as something you might migrate into the Azure cloud, while leaving the file server on-premises.
  - We can also migrate data that's currently housed on-premises into the cloud as long as it meets specific security requirements that might be applicable based on the industry we're in or the government agency that we might doing this for.

We have to also consider the suitability of on-premises IT solutions for migration into the Azure cloud. We need to make sure that we can map existing on-premises services to an equivalent solution in the cloud. Now in some cases you might simply be able to take what you're running on-premises and move it essentially into the cloud. Or, in other cases you might have to find a functional equivalent that is already made available through Azure service offerings. Then you need to consider security standards, such as whether or not you need to encrypt data at rest, such as data stored in a storage account in the Azure cloud.

With cloud migration, an important term to be aware of is lift and shift migration. What this means is we're taking an existing IT solution, and we're migrating it to the cloud without changing it. [Video description begins] The IT solution is migrated to the cloud without any changes made to the source. [Video description ends] So an example of this might be migrating a physical or a virtual server that we currently have running on-premises and migrating it to Azure. So really, we're changing the hosting environment in which that virtual machine or maybe we're converting a physical to a virtual. We're changing the hosting environment, but the operating system and its configuration remains exactly as it was on-premises, unchanged.

The Azure Migrate Service is an offering that can help with such types of migrations. It allows us to evaluate the migration suitability for things like virtual machines that we currently have running on-premises, and the workloads that they support. [Video description begins] Virtual Machines are also known as VMs. [Video description ends]

It can also take a look at IT system dependencies. For instance, you might have a front end web application that depends on a back end data base running in a different virtual machine. So that kind of system dependency would be caught by the Azure Migrate Service, because you don't want to be in a situation where you're only migrating one part of the solution to the cloud, only to realize it then doesn't work in the cloud.

The Azure Migrate Service can also provide cost estimations as to what you might be looking at for monthly charges on a recurrent basis after you've migrated specific workloads to the cloud.

So the Azure Migration Service Process begins with creating what's called a project. It then requires running an on-premises collector virtual machine. And this is designed to run in a VMware vCenter type of environment. Now that collector virtual machine will then gather data from on-premises and that gets sent to the Azure project.

Next, that discovered data is organized into specific groups. And this discovered data really comes from on-premises virtual machines that we're considering migrating to the Azure cloud. [Video description begins] The groups consist of the VMs that were discovered. [Video description ends]

Finally, the last step of working with the Azure Migration Service Process is to assess the results, to determine in fact if it is a migration that will take place. [Video description begins] The assessment needs to be viewed or downloaded. [Video description ends]


Azure Data Centers
Microsoft Azure data centers are the physical side of Microsoft Azure cloud computing. A couple of terms come to mind when talking about data centers, as we see here. Physical facilities is one of them. A data center is a physical facility, often a very large building or a collection of buildings that house computing equipment. In this case, for potentially thousands of different cloud customers.

Now, in the case of Microsoft Azure, these physical facilities, or data centers, exist currently in 140 countries around the globe. Although that will be changing over time. Then physical security becomes an important aspect of it, due to the fact that we do have a centralized location physically, that houses a lot of potentially sensitive data for many different customers. So as a result, you'd be hard-pressed to get a specific address for a Microsoft Azure data center, as the actual physical locations are not disclosed.

One data center component to consider, much like you would if you had a data center owned by a single large organization or even a server room within a building, is HVAC. Heating and ventilation and air conditioning. Within a data center, on a large scale, it's absolutely crucial that we've got pathways for air to travel. So that we can take warm air exhaust and feed it away from equipment, often out of the facility, and then, of course, have cool air fed into the facility from the outside and maybe through air-conditioning units that are filtered to equipment intake fans.

The next thing that we should consider is the number of equipment racks that would exist within a data center. It's often a very large number because pretty much everything these days, every physical computing device, is an appliance that can be rack mounted. Whether it's a hypervisor server that's used to host virtual machines running in the Azure cloud environment. Whether it's storage arrays that Azure customers enjoy when it comes to provisioning cloud storage. Whether it's physical routers and switches to provide network connectivity. UPSs, UPSs, uninterruptible power supplies, are used for short-term battery power for a device to shut down gracefully when it detects that the AC power from the power grid is no longer there. For longer-term power supplies, we looked at things like power generators that might run, for instance, off of diesel fuel.

At the physical security level, we have to consider things like fencing around the perimeter of an Azure data center. Along with both interior and exterior alarm systems, often in the form of motion detection sensors. And then, of course, physical guards on premises to check badges. Mantrap doors work in such a way that after access to an outer door is granted and the door opens there's an area within the door that the person must wait before they can enter a second inner door. The outer door has to close first. And often these doors are locked, of course. And they are controlled, or access is granted, through a proximity card. And all entry and exit points in the facility are logged centrally.

Microsoft performs thorough background checks on all employees. Especially those that work in Microsoft Azure data centers. Within the data center, specific rooms that might contain a specific type of equipment, such as storage arrays, might be in a locked area that requires additional access beyond just gaining access to the facility itself. In the same way, we can also have locked equipment racks so that in order to gain access physically to a device, whether it is a rack-mount server or a router or a storage array, access must be granted to the rack itself. We have to physically be able to open the rack before we can even get our hands on the equipment.

So all of these things together provide a secure physical environment for an Azure data center.

Azure Regions

[Video description begins] Topic title: Azure Regions. Your host for this session is Dan Lachance. [Video description ends]

Microsoft Azure regions are an important concept to understand. Whether you're managing Azure at the command line, or whether you're doing it using GUI tools like the Azure portal. And in some cases you'll see references to, not an Azure region, but rather a location. Either way, it's the same thing.

An Azure region is geographical in nature. We are talking about a physical region whereby Azure resources can be deployed. And when you actually deploy new resources like a virtual machine, let's say, in Azure, you need to specify the location or region. Currently, Azure has a presence within 140 countries, and that is organized into 54 regions. But bear in mind that while these numbers are current, they're always changing. Microsoft is always looking at expanding Azure with more regions in additional countries.

Microsoft Azure also supports some special Azure government cloud options, and those specific regions are not disclosed anywhere. Unlike standard Azure cloud regions like East US and Canada Central, are made available.

Pictured on the screen, we get a sense of what an Azure region really is. We can also see a bit of a hierarchy. So you can think here of a region as being interconnected over the Internet by the wide area network link. So on the left, we've got Region 1. Let's say that's East US. Then we've got Region 2. Now, Region 1 and Region 2 are my labels. In Azure, they would actually be named East US and, in this case, Region 2 is Central India. So they can be very far apart from one another. And you can deploy Azure resources into disparate regions like this. And you might do that for availability in case there is some kind of a regional disaster. Although in this case we're talking about pretty much opposite sides of the planet, so it's an extreme example.

What we see within each region is a set of data centers, and we'll talk about availability zones shortly. But essentially we've got very high speed network links within a region compared to between regions.

Availability zones, or otherwise called AZs, exist within a Microsoft Azure region. And often, you'll find that most regions have three availability zones, although in some cases, you won't see that. This means that we've got one or more data centers. So what we're really saying is that there is not a one-to-one correlation between an Azure availability zone mapping to one data center. It's not always that simple. You could have an availability zone that consists of, let's say, three data centers.

Then we have to think about Azure Service Availability and how it relates to regions. The first thing we have to bear in mind is Azure Services, so the cloud stuff that we as customers want to use, varies. It varies in its availability from one region to the next. So as an example, if we want to use the Azure search feature, when we configure that and deploy it, we won't be able to specify a location or region of Canada East, at least not currently. And again this is always in flux. Another example would be the deployment of G-Series VMs, virtual machines, high-end virtual machines. This specific series or type of VM is not available in Central US.

Now G-Series virtual machines might be important to you if you need to accommodate very large database workloads and you need as much CPU, memory, and processing power that you can get. So in some cases this could be very important, but we do need to understand that when we go to manage and deploy resources, they will vary in their availability, in some cases from one region to another.

Azure Availability Zones

[Video description begins] Topic title: Azure Availability Zones. Your host for this session is Dan Lachance. [Video description ends]

If we had to sum up Azure Availability Zones in one word, we would simply use the word availability.

Pictured on the screen, we have two availability zones, or AZs. One on the left, AZ 1, and another on the right, AZ 2. On the left with AZ 1, notice we have a picture of a single data center. So in other words, an availability zone doesn't have to be, but it can equate to a single Azure data center. But on the right, we've got three data centers. So what we're seeing here then is that an availability zone can consist of more than just one data center. So what we're talking about using this for is to spread out services to increase availability.

Now, how is that? Well, we might replicate data between availability zones, so that if there's some kind of a catastrophe or a failure in one availability zone, the data is still available elsewhere. And it doesn't have just to be data, it could be an entire application ecosystem that we've duplicated in another AZ.

With Azure Availability Zones, we get the benefit of high availability of IT systems and data. And we know that an Azure Availability Zone could consist of one or more data centers. But then we've got the notion of fault domains. The purpose of a fault domain is essentially to spread out our deployed services like virtual machines that we might create in Azure. Spread them out if we've got a cluster of them across multiple physical data center racks. Where each rack has its own network switch, at least one, its own power source, its own hypervisor, and so on. And that way if there's some kind of an unanticipated failure within an Azure data center in a rack. So whether it's power-related, network-related, or hypervisor-related, at least we will still have some of our virtual machines that were deployed to another fault domain. And so when you start deploying resources, this happens automatically.

Then we've got the notion of an update domain. So an update domain is a little bit different here because instead of an unpredictable or unanticipated failure, we have a planned maintenance type of downage of something like a hypervisor server. Maybe Microsoft needs to apply configuration changes or updates. So, instead of bringing down a whole bunch of physical hypervisor servers in an Azure data center simultaneously, one would be brought down, its configuration changes and or updates will be applied, and then once that's back up and running then the next server would get the same treatment where it would be perhaps brought down or reconfigured, updates are applied, that type of thing.

And the whole purpose here is that when updates need to be applied, we don't end up with the service outage. It minimizes what is affected. And we're not talking here about how we, as Azure customers, might deploy virtual machines manually ourselves, because we are responsible for updating them. So this is more at the underlying Azure data center level.

Pictured on the screen, we've got an example of deploying a virtual machine using the Azure portal, the web interface. [Video description begins] A section of the Azure web interface displays, specifically the INSTANCE DETAILS section. There is a Virtual machine name field, set to vm1. There are Region, Availability options, and Availability zone drop-down lists. The Availability options is set to Availability zone. Availability zone has no value, but a note below the drop-down list indicates that there are no availability zones available for the selected location. There is a hyperlink to View locations that support availability zones. [Video description ends]

Notice here, the selected region is Canada East. And when we take a look at availability zones within that region, it says that there are no availability zones available. Now that depends on the region. So some regions are much larger than others and will have numerous Availability Zones within them. So depending on which region you work with, as in this case when deploying a virtual machine, you can expect, in some cases, to not have the choice of Availability Zone. It simply depends on the region that is selected.

Azure Resource Manager

[Video description begins] Topic title: Azure Resource Manager. Your host for this session is Dan Lachance. [Video description ends]

Azure Resource Manager, otherwise called ARM for short, is often used to manage related Azure resources together as a group. Although you don't have to do that. You can use ARM, for example, to deploy or manage a single virtual machine. But it really shines when you're talking about something like a web application which might consist of a front end load balancer, a public IP address, numerous virtual machines to host the website, or the web front end, and then even some back end databases. Which also includes storage. So all of those things together, all of those different Azure resources, can be managed as a single unit through an Azure Resource Manager resource group.

So we use ARM to deploy resources, so to create new things like virtual machines, storage accounts, virtual networks, databases, and so on. But we can also use ARM to manage existing resources, maybe to change a configuration or to remove a deployed resource.

So what is an Azure resource? Well, it's pretty much anything that you can deploy in the Azure Cloud, including things like a web application that's hosted in Azure. Maybe a Cosmos DB NoSQL compliant database or an Azure SQL database. Or a storage account, because you want to store files such as Office productivity files in the Cloud. Also virtual machines that we deploy, these are all resources. So if we've got a single application, it might consist of all of these items. And so we could organize these into what's called a resource group.

You'll notice that when you deploy and manage Azure resources, whether it's through command line tools or through the Azure portal, the web GUI, you'll always have to deal with the resource group. For example, if you're deploying a virtual machine, one of the things you have to do is either deploy it into an existing resource group or define a new resource group.

Here we see an example of an ARM Template. When we work with ARM Template files, they use JSON file format, J-S-O-N. It looks kind of like JavaScript, but it's not JavaScript, it's JSON. So here we see parameters. So we can set a default parameter, in this case for a virtual machine name, where the default value, if not specified otherwise, would be MyVM. [Video description begins] The presenter highlights the following code: "parameters"l {"virtualMachines_vm1_name": {"defaultValue": "MyVM", "type": "String" },. [Video description ends]

We can see the location, or region, into which this virtual machine will be deployed, in this case canadaeast. [Video description begins] He highlights the code: "location": "canadaeast",. [Video description ends] We can see the virtual machine size listed below, which determines the underlying horsepower, like virtual CPUs, the amount of RAM. Whether it uses solid state drives and so on. [Video description begins] He highlights the code: "properties": {"hardwareProfile": { "vmsize": "Standard_B1s". [Video description ends]

In the Azure portal, when we deploy a resource, in this example, if we've deployed a virtual machine. So we've created a new Azure virtual machine in the Azure Cloud. [Video description begins] He displays a section of the Azure web interface, which lists several settings. [Video description ends] When you get to the end of the screens, the Wizard in the GUI, you'll see that there's a link, as we see outlined here in the bottom right, to download a template for automation. [Video description begins] He highlights the link in the image. [Video description ends] So in other words, the Azure portal is essentially tracking all of your choices when you deploy your resource. And then you have the option to download a template, so that you could reuse that template to deploy more resources of that type. Now, of course, you might want to change things like the specific name of a virtual machine and so on. Or you could customize it and parameterize it as we were talking about previously.

Now you can also deploy ARM templates in numerous ways, such as through the Azure portal as seen here. [Video description begins] The presenter displays a page from the ARM Template Deployment Portal. The heading is Custom deployment. [Video description ends] When you create a template deployment in Azure portal, this is what you see. You could build your own template in the editor, there's a built in editor online, where you can also import a template. [Video description begins] He points to the Build your own template in the editor link in the Learn about template deployment section. [Video description ends]

Remember, template is a file that uses JSON syntax. So you can build it in the cloud, if you already built it, you could import it into the cloud. And there's also a list here of common templates for creating things like Linux or Windows virtual machines or a web app. And you can even connect to templates over the Internet, such as through GitHub.

In this example, we're talking about the Azure CLI, the command line interface, which you can download and install so that you have command line management of Azure. So here we're deploying an ARM template through the CLI. In the first command, az group create, we are creating a resource group. The resource group is called rg1 and it's been deployed on a location, or a region, called Canada central. [Video description begins] The complete command is: az group create --name rg1 --location "Canada central". [Video description ends]

Next thing we see is a command that says, az group deployment create. We are creating a deployment. We want to deploy or create resources in Azure. In this case using a JSON formatted template file. So we're giving our deployment a name. Here I'm calling it, deployment1, referencing my resource group rg1. And then I'm specifying a local template file, in this case, mytemplate.json. But you could also specify a location elsewhere over the Internet. Again, as in the case of connecting to an ARM template, that you might want to deploy from GitHub. And then you might specify parameters. In this case, such as a parameter for MyVM. [Video description begins] The complete command is: az group deployment create \ --name deployment1 \ --resource-group rg1 \ --template-file mytemplates.json \ --parameters "MyVM". [Video description ends]

We can also deploy ARM templates using PowerShell. In the first line we're creating a variable called $rg that contains the text rg1. That's the name of the resource group. And we're setting the location variable to Canada east. [Video description begins] The presenter highlights two commands. The first is: $rg = "rg1". The second command is: $location = "Canada east". [Video description ends]

Then we're using the New-AzResourceGroup cmdlet to build a resource group. [Video description begins] He highlights the command: New-AzResourceGroup -Name $rg -Location $location. [Video description ends] And then we're building a New-AzResourceGroupDeployment. So we're referencing our resource group name and a local TemplateFile. In this case on the root of drive C called mytemplate.json. [Video description begins] He highlights the command: New-AzResourceGroupDeployment -ResourceGroupName $rg - TemplateFile c:\mytemplate.json. [Video description ends] But just like with the Azure portal, with the Azure CLI, we don't have to reference a local template file. We can actually point to one over the Internet, such as stored in a GitHub repository.


Azure Resource Groups
The Azure Resource Manager, or ARM, method of managing Azure resources allows us to group resources together. So for example if we've got a web application that consists of a front end load balancer, and a couple of load balanced web servers and backend databases. All of those items together could be grouped into a single resource group to facilitate management. And we can even build resource group templates or ARM templates that allow us to deploy and manage these resources together.

[Video description begins] The presenter switches to an instance of the Azure portal in a Web browser. The URL is https://portalazure.com/#home. The Home page displays. There is a toolbar, which includes a search bar, and a navigation pane with several options, including Dashboard, Favorites, and App Services. There is also a content pane. [Video description ends]

So here in the Azure portal, we can see that on the left we've got a Resource groups view. When I click it, any resource groups that I've already defined will be shown. [Video description begins] He clicks Resource groups in the navigation pane. The Resource groups page opens in the content pane. There are Add, Edit columns, and Refresh buttons. There is a Filter by name field and All locations, All tags, and No grouping drop-down lists. The resource group table headings are NAME, SUBSCRIPTION, and LOCATION. A message indicates that there are no resource groups to display. There is also a Create resource group button. [Video description ends] Currently I don't have any, but we can add a resource group at this point by clicking the Add button. [Video description begins] He points to the Add button on the toolbar. [Video description ends]

Now aside from doing that, if I were, for example, to deploy a new virtual machine. So let's say I click on Virtual machines on the left [Video description begins] He clicks Virtual machines in the navigation pane. The Virtual machines page opens in the content pane. There is a toolbar, filter options, and a table with no data. A message indicates that there are no virtual machines to display. [Video description ends] and then click the Add button in the Virtual machines view, you'll also notice that as you deploy resources here in Azure, [Video description begins] He clicks Add on the toolbar of the Virtual machines page. The Create a virtual machine wizard launches. The Basics tabbed page of the wizard displays. [Video description ends] you also get the chance to select an existing resource group, but you can also create a new one here while you're deploying this resource. [Video description begins] He points to the Resource group drop-down list and then to the Create new hyperlink. [Video description ends]

So what I'm going to do then is close out of this Create a virtual machine window and I'm going to go back to the Resource groups view over on the left, [Video description begins] He closes the wizard and clicks Resource groups in the navigation pane. [Video description ends] and I'm going to click Add. So we can have one here. [Video description begins] He clicks Add on the toolbar of the Resource groups page. The Create a resource group wizard launches. The Basics tabbed page displays. [Video description ends]

First thing I have to do is tie it to a subscription. So I've only got one subscription that's listed here, my pay as you go subscription. [Video description begins] In the PROJECT DETAILS section, he points to the Subscription drop-down list. [Video description ends] And then I need the name of a resource group. So I'm going to call my first resource group Rg1. Now if this were a resource group that would be used to manage the Azure resources to support a web application, I would have a more meaningful name. Perhaps the name of the web application followed by Rg. It's important in Azure that you have a standard when it comes to naming conventions for items. So in this case, I'm just going to stick with Rg1 for resource group one. [Video description begins] In the Resource group field, he types "Rg1". [Video description ends]

Then I have to determine into which region I want to create this resource. Currently it's set to Central US. If I open the drop-down list, I can choose whichever one makes the most sense. [Video description begins] In the RESOURCE DETAILS section, he expands the Region drop-down list. Several regions are listed including Australia East, Brazil South, and Canada East. [Video description ends] Because I'm on the East Coast of Canada, I'm going to choose Canada East. And then I'm going to click Next. [Video description begins] The Tags tabbed page of the wizard opens. There is a table with three columns: NAME, VALUE, and RESOURCE. [Video description ends]

Here we can build a tag or we can add multiple tags, which is really just metadata. You can do this for more than just resource groups in Azure. You might, for example, do it for storage accounts or virtual machines so you could tag it and assign it to a specific department or a billing cost center or something like that. So for here I'm going to create a new tag called Project. And let's say that this is going to be for a project that we are currently working on called ProjectA. [Video description begins] In the first data row of the table, he types "Project" in the NAME field and "ProjectA" in the VALUE field. The RESOURCE value is automatically set to Resource group. [Video description ends] So that's what I'm going to tag this resource group with. You don't have to tag.

Now the next things I'll do is click the Review + Create button down at the bottom. [Video description begins] The Review + Create tabbed page of the wizard displays. [Video description ends] And here we have a little summary of what we are configuring, which is a resource group, which will be deployed in the Canada East region. [Video description begins] The SUMMARY list also displays the Subscription value of Pay-As-You-Go. [Video description ends] And then I'll go ahead and click Create. [Video description begins] The wizard closes and a message indicates briefly that the resource group was created. [Video description ends]

After a moment if we refresh the Resource groups view, we'll see clearly that we've got our resource group, Rg1, listed here. [Video description begins] On the Resource groups page, he clicks Refresh. The Resource group Rg1 is listed. [Video description ends] So I could click on it to select it to open up its properties blade. And we kind of have a navigator here on the left related to the property categories for the resource group called Rg1. [Video description begins] He clicks Rg1. It opens its own page. [Video description ends]

And as we scroll down for example, we can see we've got tags and [Video description begins] He clicks Tags in the navigation pane. The Tags page opens. [Video description ends] we can see that we've got a Project tag with the value of ProjectA. [Video description begins] He points to the listed tags. [Video description ends] However, I'm going to go ahead and close that property sheet for that resource group. [Video description begins] He returns to the Resource groups main page. [Video description ends]

And if I were once again to click on Virtual machines on the left [Video description begins] He clicks Virtual machines in the navigation pane. The Virtual machines page opens. [Video description ends] and then click the Add button in the Virtual machines view. [Video description begins] He clicks Add on the toolbar. The Create a virtual machine wizard opens. The Basics tabbed page displays. [Video description ends] Notice that when we go to deploy our virtual machine we now have our Rg1 resource group available from the drop-down list. Again, we could create a new one, but we have a couple of ways that we can work with it here in the Azure Portal.


Azure Portal
The Microsoft Azure portal is a GUI tool, a graphical user interface type of tool, that comes in the form of a web application. This facilitates managing Azure resources. So it's a GUI management tool that also supports RBAC self-provisioning. RBAC stands for role based access control. We'll talk about that a lot more later, but for now what it means is that we could give other administrators limited access to manage specific resources in Azure instead of everything.

The Azure portal has a lot of functionality. And part of this includes, of course, creating and managing Azure resources. So for example, you can very quickly, using the portal, deploy a new Linux or Windows virtual machine, or a storage account to store files in the cloud, or even quickly deploy in Azure SQL database. You don't have to know any commands to type in, it's all done visually.

We can also work with ARM templates, Azure resource manager templates. ARM templates use the JSON file syntax and they allow us to create and manage Azure resources of any type. So we can use an ARM template to create resources like storage accounts in virtual machines. We can also use the portal to edit templates. We can also import existing templates into the portal and maybe tweet them. And we can also even download ARM templates. Because whenever you deploy your resource in the Azure portal, it's watching what you're doing and tracking in the background what that comprises of in terms of JSON commands. And so you can then download an ARM template based on what you've deployed in the GUI.

In the Azure portal, we can also tag resources. Tagging means you're adding extra metadata, such as assigning a virtual machine and a storage account to a specific project, or maybe to a specific department within a large organization. The benefit of tagging is that you can then search based on the tag. So for instance, show me all deployed Azure resources related to project A, or I would like to see all deployed Azure resources for billing purposes related to the human resources department.

We can also search for resources within the Azure portal. So instead of rummaging around through potentially dozens, hundreds, even thousands of deployed resources in a larger subscription, we could simply search for what we're looking for, such as a specific virtual machine that we want to manage.

There's also this notion of the Azure Cloud Shell. When we talk about the Azure Cloud Shell, we're talking about either issuing commands using a Linux-style bash shell or using PowerShell cmdlets. Now why would we want to do this? Well, we're talking about command line management of Azure resources. So instead of having to download, and install, and configure, and authenticate to some command line tool like the Azure CLI or Azure PowerShell, which you can do, and we'll talk about later, instead you can simply launch the Azure Cloud Shell within the portal, and you're already authenticated.

So the PowerShell also supports a number of built-in languages. If you want to work with Node.js, or Java, or Python, it's available. It also support Azure file share storage. So if you need to store something in a file persistently between Azure Cloud Shell sessions, well, you can do it. So Azure Cloud Shell is yet another benefit of working through the Azure portal.


Navigate the Azure Portal
The Azure portal is a web-based GUI management tool for Azure resources. I've popped in the URL of portal.azure.com and it, of course, has changed it and it wants me to pick an account to login with. [Video description begins] The Microsoft login page displays in the Web browser. The Pick an account dialog box displays. There is one user account and an option to use another account. [Video description ends]

So I'm going to go ahead and choose my Azure account, at which point it wants me to specify the password for that account. [Video description begins] The presenter clicks stefan.samms at outlook.com. The Enter password dialog box opens. [Video description ends] So I'm going to go ahead and put the password in and choose Sign in. And after a moment I will be brought to the main home screen in the Azure portal, where we can see that we've got a quick way to quickly jump into things like virtual machines. [Video description begins] He enters the passwords and clicks Sign in. The Azure portal opens to the Home page. The URL is https://portalazure.com/#home. There is a toolbar with a search bar, along with a navigation pane and a content pane that displays several apps. [Video description ends]

If I click that it takes me into the Virtual machines viewer. [Video description begins] He clicks Virtual machines in the content pane. The Virtual machines page opens. There is a toolbar, fields for filtering, and a table of virtual machines arranged in columns that include NAME, TYPE, and STATUS. [Video description ends] I can see I've got two of them that currently have a status of Running. [Video description begins] He points to the virtual machines in the table. [Video description ends]

If I go back to Home I can also view Storage accounts and do the same type of thing. [Video description begins] He returns to the Home page, then clicks Storage accounts. The Storage accounts page opens. There is a toolbar, fields for filtering, and a table of virtual machines arranged in columns that include NAME, TYPE, and KIND. [Video description ends]

Of course, we've got a left-hand navigator, so if we want to view SQL databases, [Video description begins] He clicks SQL databases in the navigation pane. The SQL databases page opens. It has a similar layout to the other pages. [Video description ends] or if we want to view Azure Active Directory, [Video description begins] He clicks Azure Active Directory in the navigation pane. The Default Directory - Overview page opens. This page has its own navigation and content panes. [Video description ends] and perhaps then view users or groups that are defined, we can do that. [Video description begins] He clicks Users in the navigation pane. The Users - All users page opens. [Video description ends]

Now on the topic of Azure Active Directory, which serves as a storage location for additional users and groups, that type of thing, we can switch between multiple Azure Active Directory instances if we have them. In the upper right where my user account name is, it says DEFAULT DIRECTORY, but if I click on that I can switch to another Azure Active Directory instance. [Video description begins] He clicks his user name on the Azure portal toolbar. The user details display along with a Switch directory link. [Video description ends] It's kind of like having multiple Active Directory domains in a larger network. [Video description begins] He clicks Switch directory. The Directory + subscription pane displays. [Video description ends]

You might do that for different business units, one might be for testing and development, while the other is for production. [Video description begins] A default directory is specified as well as links to favorite directories. [Video description ends] Either way, when I click another existing Azure Active Directory instance, it switches me to it in the portal. [Video description begins] He clicks quick24x7.com in the Favorites list. A new instance of the Azure portal opens on the Home page. [Video description ends] So for example, if I were to go to Azure Active Directory now and click on Users, I have a different listing of users that I did previously, because now I'm in a different named Azure Active Directory instance. [Video description begins] He switches to the Azure Active Directory page and points out the differences from the previous time this page was accessed. [Video description ends]

If I click on the Virtual machines view, notice here that we don't see anything. [Video description begins] He opens the Virtual machines page from the navigation pane. No virtual machines are listed. [Video description ends] Well, its because we are tied to a different Azure Active Directory instance. So if I flip back to the default directory, so I'll switch back to the default directory where we began working. [Video description begins] He accesses the Directory + subscription pane again and clicks Default Directory. The Azure portal reloads to the Home page. [Video description ends] And again, if I go back and look at Virtual machines, there they are. [Video description begins] He clicks Virtual machines in the navigation pane. Two virtual machines are listed. [Video description ends]

So we have a couple of things that are important here in terms of navigating through the Azure portal. Now in the left-hand navigator, I can hide the text labels once I begin getting used to what these icons mean. [Video description begins] He collapses the navigation pane so that the icon labels are not displayed. Tooltips display as he moves the pointer over each icon. [Video description ends] For example, the plus sign naturally means I want to create some kind of an Azure resource, [Video description begins] He clicks the plus icon. The New page opens. The available categories include Networking, Storage , and Web. [Video description ends] and we've got a number of categories here. So if I want databases, I can see Databases, and of course, I can always search for something. So if I'm interested in Ubuntu Linux, I could search for ubuntu. [Video description begins] He clicks in the Search field and types "ubuntu". [Video description ends]

Now we also have couple of buttons across the top that we should be aware of. [Video description begins] He returns to the Azure portal Home page. [Video description ends] The first here looks like a command prompt icon, and when I hover it, it says Cloud Shell. Cloud Shell allows me to run either CLI commands or PowerShell commands right here through the Azure portal, without having to download and install the Azure CLI or Azure PowerShell files. [Video description begins] He clicks Cloud Shell on the toolbar. [Video description ends] Now because I've never done it, it says you don't have any storage for this, so if you want to have any kind of persistence, if you want to save any files between sessions, you need this set up. [Video description begins] He points to the dialog box that displays. The Subscription field has a value of Pay-As-You-Go. [Video description ends]

Well, it wants to tie it to my subscription, I'm just going to go ahead and click Create storage, so we can see how this works. And notice here we've now got some storage that was created for Azure Cloud Shell, and this says, it's initializing our account for use with Cloud Shell. [Video description begins] He clicks Create. The PowerShell window opens. [Video description ends] And after a moment I'm in an Azure Cloud Shell prompt. [Video description begins] The prompt is PS Azure :\>. [Video description ends] So for example, if I simply type az, which we normally do for the Azure CLI, just like we would if we downloaded and installed the Azure CLI on our on-premises station. The difference is we're already authenticated here, and we've got all of the options available for that. [Video description begins] He runs the command az. The output is a list of Azure options and their descriptions. [Video description ends]

Now in the future, so let's go ahead and close the Azure Cloud Shell. [Video description begins] He returns to the Azure portal Home page. [Video description ends] In the future when we run the Azure Cloud Shell, it's not going to have to set up our storage or anything like that, because we've already done it the first time. So when I click on it, [Video description begins] He clicks PowerShell on the toolbar and the PowerShell window opens. [Video description ends] we can then determine whether we want to run PowerShell, or whether we want to go into a more Linuxy environment through Bash. [Video description begins] In the PowerShell toolbar, he clicks the Select environment drop-down list, that's set to PowerShell, and selects Bash. A message displays indicating that a switch to Bash will create a new session and PowerShell running processes will go to the background. [Video description ends] And if I click Confirm, it will switch over and do just that. [Video description begins] He clicks Confirm. A Bash session starts up. [Video description ends]

So we can either work in a Bash type of environment if we're used to Unix and Linux, or we can work in a PowerShell more Windows-based type of environment. And we can switch back and forth as you can see just by clicking that little icon. [Video description begins] He closes PowerShell and returns to the Azure Home page. [Video description ends]

Now the other thing to bear in mind here [Video description begins] He clicks Directory + Subscription on the toolbar. The Directory + subscription pane opens. [Video description ends] is that we can also filter based on our subscriptions and our directories. [Video description begins] In the Switch directory section, he expands the Set your default directory drop-down list. The options include Sign in to your last visited directory, Default Directory, and quick24x7.com. [Video description ends] So we can see that we've got a couple of Azure Active Directory instances. So we can determine how that appears here in the Azure portal. [Video description begins] He closes the pane and returns to the Azure Home page. [Video description ends]

The alarm bell is for any notifications in this session, such as the creation or the deletion of an Azure resource. [Video description begins] He points to the Notification icon on the toolbar. [Video description ends] We've also got some graphical configuration settings for the portal, [Video description begins] He clicks Settings on the toolbar. The Settings pane opens. Settings that can be configured include the default view, themes, and toast notifications. [Video description ends] and some timeout items, such as logging out when there's a period of time for inactivity. And of course, we can click on our account name over here and sign out, or as we know, switch to a different Azure Active Directory instance.

Now when you're looking at a view, so for example, let's say that we go to the Virtual machines view, [Video description begins] He opens the Virtual machines page from the navigation pane. [Video description ends] bear in mind that you can also edit the columns here at the top. And when you do that, you can determine what you want to see. [Video description begins] He clicks Edit columns on the toolbar. The Edit columns pane opens. There is an Available columns list and a Selected columns list with back and forward arrows between them. [Video description ends] The selected volumes are listed on the right, what's available to you is listed on the left. And if I'm interested in Tags, let's say, because I've tagged my resources, I can select that column and move it over to the Selected columns area on the right. [Video description begins] He clicks Tags in the Available columns and clicks the forward arrow. Tags is added to the Selected columns list. [Video description ends]

When I apply it, then the tags will be here. [Video description begins] He closes the pane and points to the virtual machines table. TAGS has been inserted as the last column of the table. [Video description ends] And from here I have an easy way to edit, to make a change to any tags, here we can see it's ProjectB, and so on. [Video description begins] He clicks the pencil icon in the TAGS column and the Tags pane opens. He closes the Tags pane. [Video description ends]

Also, notice the filtering that is available here. So if I only want to see virtual machines that have Linux in the name, then I can just type in Linux and it's only showing me that. [Video description begins] In the filters section. he types "linux" in the Filter by name field. One result is returned. [Video description ends] I can also filter by other things like tagging. So if I open up tagging here maybe I only want to see stuff related to ProjectA. [Video description begins] He expands the Tags filter. There is a Filter tags field, All or Any radio buttons, and tag names with checkboxes. He selects the ProjectA checkbox. [Video description ends] And so when I do that and close the drop-down, it filters it and shows me only that. [Video description begins] One result is returned. [Video description ends] So I can see here that if I hover over the tags item for that virtual machine, indeed it is set to ProjectA.

So it's important to spend a bit of time, then, to get used to the Azure portal, because if you're going to be working in the GUI, this is going to be your home as it relates to Azure resource management.


Azure CLI
The Microsoft Azure CLI is a command line interface tool. It lets you manage Microsoft Azure resources from a command line environment.
Now you could also launch this through the Azure Cloud Shell. In other words, when you're authenticated to the Azure portal, the GUI, you can launch Azure Cloud Shell and gain access to the CLI. Or you could download and install it on one of your machines on-premises. And the machine on-premises can be running Windows, it can be running Linux or it can be running the MacOS. And within any of these operating systems you can then issue Azure CLI commands if you know the syntax.

Now the syntax, once it's installed, begins with az followed by a hierarchy or a subset of commands. So for example one of the first things you should know is how to retrieve the version of the Azure CLI. Because if you are looking at an example on the Internet on how to do something in the CLI and you've got a CLI installation that's a year or two old, what you see on the Internet might be newer and it might not be available in your installed version. So we can run az --version, so we know what version of the CLI we're running.

We can learn about the syntax with az --help, where we might notice that there's a vm command. So then we can get further help on that, because it is a hierarchy, by typing in az vm --help. Then we're going to get a help screen showing us what we can do with Azure virtual machines through the CLI.

Now an important command, of course, is az login. This allows you to authenticate to your Azure account so you can actually start managing your subscription and the resources within it. When you issue the az login command you're going to see a screen that looks like this, where there's a note about having launched a web browser where you'll have to sign into your Azure account if you're not already signed in. Then after you sign in, you'll see the clear text listed down below here beginning with cloudName. It returns information about your specific Azure account. [Video description begins] The account details are as follows: [{"cloudName": "AzureCloud", "id": "048...2109", "isDefault": true, "name": "Pay-As-You-Go", "state": "Enabled", "tenantID": "258e...bf7c", "user": { "name": "hotmail.com", "type": "user"}}]. [Video description ends]

Now at this point, you will be authenticated and you can actually start to do things like deploy virtual machines either manually or through an ARM template, or work with storage accounts or databases, websites, work with user accounts, and groups and permissions in Azure. Basically, the sky is the limit but you'll be able to find out about the syntax by using az --help.

Install and Configure the Azure CLI

[Video description begins] Topic title: Install and Configure the Azure CLI. Your host for this session is Dan Lachance. [Video description ends]

The Azure CLI, or command line interface, allows us to manage Azure resources at the command line level. Now, we can run this using Azure Cloud Shell which is accessible through the Azure portal. But in this example, we're going to talk about how you can download and then run the Azure CLI on any station of your choosing on-premises. [Video description begins] The presenter switches to the Microsoft Azure - Install the Azure CLI page in the Web browser. [Video description ends]

So here in my web browser, I've gone to the documentation related to installing the Azure CLI. And we can see here there are instructions detailing how this is done for the Windows platform, the macOS, and Linux variants. We're going to be doing this in Windows. So I'm going to choose Install on Windows. [Video description begins] He clicks the Install on Windows link. The Install Azure CLI on Windows page displays. [Video description ends] And I'm going to choose Download the MSI installer. [Video description begins] He clicks the Download the MSI Installer button. [Video description ends] And after a moment we can see that the Azure CLI is in the midst of downloading.

Once the CLI is downloaded we can go ahead and run the installation. [Video description begins] He right-clicks the install file on the download bar and selects Open. The Microsoft Azure CLI Setup wizard launches. [Video description ends] So I'm going to go ahead and accept the terms in the license agreement and I'm going to choose Install. And after a moment we'll click Finish to complete the installation. [Video description begins] He accepts the licence agreement terms and finishes the installation. [Video description ends]

Now on that same station, I can go to a command prompt where I can begin by typing az. [Video description begins] A command prompt window opens. The prompt is C:\>. He enters the command: az. [Video description ends] Now what's happening here is we're testing that the Azure CLI has been installed. This is the prefix that starts all of the other hierarchical commands that follow az. [Video description begins] The output is a list of commands with their associated descriptions. [Video description ends]

So looks like we have something, which is good, it's recognized. If I type az --version, then we'll get some versioning information related to Azure CLI components. And it's always important to make sure that we know exactly which version of the CLI that we are using, which we see here is 2.0.59. [Video description begins] He runs the command: az --version. The output is a list of components with their associated version numbers. [Video description ends] Now the reason that's important is to make sure that if we're looking at documentation on how to do something from the CLI that it will work in our version of it.

If I were to type az --help, then from here I would see some next level commands that would be available after az, such as vm, or storage, or sql. [Video description begins] He runs the command: az --help. The output is a list of commands with their associated descriptions. [Video description ends] Well, that means then it's like I type az vm --help to get the next level commands after az vm. [Video description begins] The output is a list of commands with descriptions, related to VMs. [Video description ends] So for example, we see here create. And we can even take that a step further, az vm create --help, to even learn more about how to use this command line syntax. [Video description begins] He runs the command: az vm create --help. The output is a list of example syntax for using the create command. [Video description ends] Now, we have examples of how to do it. So to create a Debian virtual machine, for example, so a Linux variant.

Now at the same time, it's also important that we know how to authenticate to our account in Azure, of course, so that we can manage resources. And we can do that with az login command. [Video description begins] He runs the command: az login. [Video description ends] That's going to open up a web browser page like we see here where we can sign in to our Azure account if we're not already signed in. So I'm going to go ahead and click next to continue signing in. And then I'll go ahead and specify the password and I'll click Sign in. It then says that we have logged into Microsoft Azure, so it will redirect me to some CLI documentation, and I can go back to the command prompt and continue working. So here it is, it's redirected us automatically. [Video description begins] The Azure documentation displays in the Web browser. [Video description ends]

Let's flip back to the command prompt for a second. [Video description begins] He switches to the command prompt. [Video description ends] Back here we can see a note about how it launched a browser for us to login. And after successfully authenticating we can see that we are connected to our AzureCloud subscription. [Video description begins] He points to the following account details: [{"cloudName": "AzureCloud", "id": "048...2109", "isDefault": true, "name": "Pay-As-You-Go", "state": "Enabled", "tenantID": "258e...bf7c", "user": { "name": "hotmail.com", "type": "user"}}]. [Video description ends]

And so now that we are connected to our Azure account, we could issue commands like az vm list to list out virtual machine information for what we've got in our current cloud subscription. We can see it's all been returned here. So we if we kind of scroll back up, we can see that the first returned item would be our first virtual machine, and of course, a lot of details related to it. And as we go back up we can see things like the specific names of things. So, for example, as we go down here we can see that we've got the location or region, canadaeast, for our virtual machine named eastlinuxvm1. And as we start scrolling down, then we have all the further details for that virtual machine, including the admin user name, the computer name, and so on.


Azure Cloud Shell CLI
In this demonstration, I'll use the Azure Cloud Shell CLI to deploy a Linux virtual machine. [Video description begins] The presenter switches to an instance of the Microsoft Azure portal in the Web browser. The home page is open. [Video description ends]

I've already signed into the Azure portal. So up in the bar at the top, I'm going to click the command prompt icon that will let me launch the Cloud Shell. Once the Cloud Shell loads, I need to ensure that I'm using either Bash or PowerShell. [Video description begins] He clicks Cloud Shell on the toolbar. The PowerShell window opens, but the environment is set to Bash. [Video description ends] In this case, I'm using a Bash environment which is very familiar for Unix and Linux people. And I'm going to stick with this.

If I were to type az --version, I can see the version of the Azure CLI that is available here. [Video description begins] The output is a list of the Azure components and their version numbers. [Video description ends] And I can kind of scroll up and get the overall version at the very top, 2.0.59 is what it says here. [Video description begins] He points to the azure-cli version. [Video description ends]

So now what I want to do is clear the screen with the clear command and deploy an Azure virtual machine. To do that, I'll use the az vm create command. I'm going to use -n, and the name of this virtual machine will be eastlinuxvm2. And I'm going to assign it to a resource group with -g called rg1. I'm going to use --image, and I'm going to base this on Centos Linux. I'm going to generate some SSH keys, so --generate-ssh-keys, where the public one will be stored inside of the newly created virtual machine. And the private part of the key pair will be stored here in the Bash shell environment. Or, if you're actually doing this from a Linux station on-premises with the CLI installed, the private key will be stored on that machine. And I'm going to create a user here using --admin-username called azureuser.

We're going to go ahead and press Enter to begin the creation here of this virtual machine using the Azure Cloud Shell. [Video description begins] He runs the command: az vm create -n eastlinuxvm2 -g rg1 --image Centos --generate-ssh-keys --admin-username azureuser. [Video description ends]

So now that our virtual machine is deployed, we can see the public IP address that it was assigned by default. [Video description begins] The output is: { " fqdns": "", "id": "/subscriptions...eastlinuxvm2", "location": "canadaeast", "macAddress": "00...98", "powerState": "VM running", "privateIpAddress": "10.1.1.7", "publicIpAddress": "52.235.37.149", "resourceGroup": "rg1", "zones": "" }. [Video description ends]

So at this point, what I'm going to do within the Cloud Shell is use the ssh command to SSH into our newly deployed virtual machine. So to do that, I'll type ssh. The account we created was azureuser, that's what we created in our command line up here above, and I'm going to use an @ symbol and specify the public IP address of the virtual machine as we see it listed up above. [Video description begins] He runs the command: ssh azureuser@52.235.37.149. [Video description ends]

And when I go ahead and press Enter, it asks if I want to trust the unique digital fingerprint [Video description begins] The output indicates that the authenticity of host 52.235.37.149 can't be established and requires confirmation to continue connecting. [Video description ends] because it's the first time we've connected. I'll go ahead and type in yes and press Enter. And after a moment, we're in.

We know by looking at the command prompt that we have successfully SSHed into that remote host in the cloud. [Video description begins] A warning message indicates 52.235.37.149 has been permanently added to the list of known hosts. The prompt changes to [azureuser@eastwestlinuxvm2 ~]$. [Video description ends] And from here, it's business as usual. Which means we can issue any standard commands that we would issue normally in Linux once connected to the host, such as ifconfig, where we can see the internal IP address, the private IP assigned for the subnet into which that Linux host was deployed. [Video description begins] He runs the command: ifconfig. There are two large blocks of output. The first is for eth0 and has values such as netmask, ether, and txpackets. [Video description ends]


Azure PowerShell
Micorsoft PowerShell has been around for quite a while. We're up to version 6 these days. Azure PowerShell focuses on how to use PowerShell commands or cmdlets to manage the Azure environment.

So PowerShell, then, is a command line interface tool. But it's not just for developers. Administrators use it to manage the file system on a Windows client or manage the DHCP service on a Windows Server. Even third-party vendors are into PowerShell such as, managing VMWare virtual machines through PowerShell or managing Amazon Web Services through PowerShell. But here, the focus is on managing the Azure environment through PowerShell. And doing stuff in the command line provides many benefits including automation and repeatability that otherwise might be somewhat cumbersome using the Azure portal or the Web GUI.

One way to get into Azure PowerShell is through Azure Cloud Shell. What this means is that we would first authenticate to Azure, using the Azure portal, the web GUI interface, from which we could then launch the Azure Cloud Shell where Azure PowerShell is available.

Now we can also download, install, and run Azure PowerShell on any of our on-premises stations as well. Whether we are running the Windows, Linux, or MacOS operating systems. Now we have to bear in mind that if we're installing Azure PowerShell on the Windows platform, one form of the installer is an MSI file, a Microsoft installer file. Or we could download a ZIP file. We can also do an installation directly from within PowerShell itself. Such as Install-Module -Name, and you notice that a lot of the Microsoft Azure modules have an Az prefix. [Video description begins] The complete command is: Install-Module -Name Az. [Video description ends]

Depending on the distribution of Linux you're running, such as Ubuntu Linux, you can install components using apt-get install followed by the name of the package. And you'll need privileges to do this. A regular Linux user won't be able to do this. So we could do this, for instance, to install PowerShell on Linux in the first place, so we could get support to run Azure PowerShell cmdlets.

Pictured on the screen, we have some examples of how Azure PowerShell syntax works. As a matter of fact, it really stems back to how regular PowerShell works where we have PowerShell commands, otherwise called cmdlets, that take the form of verb dash noun. So, for example, Get is a verb, Command is a noun, separated by a dash, Get-Command. What this lets us do is retrieve a list of PowerShell cmdlets and specifically here, from specific modules where a module is really just a library or collection of PowerShell cmdlets.

So in the first command, we're really saying, show me PowerShell cmdlets related to working with Azure Compute, which means virtual machines. [Video description begins] The command is: Get-Command -Module Az.Compute. [Video description ends] Second command really is saying, show me PowerShell cmdlets related to working with Azure SQL. [Video description begins] The command is: Get-Command -Module Az.Sql. [Video description ends]

Then we've got another cmdlet where the prefix or the verb is different. It's not Get, which is retrieve really, but rather Set, to make a change. And what we are doing here is setting the Azure Context. Why would you want to set AzContext? Well, you might be working in an environment where you have multiple Azure subscriptions and so you can set the Azure Context to a particular subscription before you start working with it using Azure PowerShell cmdlets. [Video description begins] The command is: Set-AzContext. [Video description ends]

You can also get help using the Get-Help cmdlet. So if I know, for instance, there's a cmdlet called Connect-AzAccount, and I don't know how to use it but I want to figure it out, I could use Get-Help, give it the name of the cmdlet, in this case Connect-AzAccount, and if I even want detailed help, including syntax examples if available, I could use -detail at the end. [Video description begins] The command is: Get-Help Connect-AzAccount -detail. [Video description ends]

The Connect-AzAccount is a very important cmdlet because it allows you to authenticate to your Azure account. After which, of course, you can use PowerShell cmdlets to work with your Azure resources.


Install and Configure Azure PowerShell
While you can run PowerShell cmdlets through the Azure portals, specifically in Azure Cloud Shell, you can also install the Azure PowerShell module, which contains all the cmdlet definitions on-premises. And that's what I'm going to do here. I've already started PowerShell as an administrator as we see here listed in the upper left of the window. [Video description begins] The presenter switches to the Select Administrator: Windows PowerShell window. The prompt is PS C:\WINDOWS\system32>. [Video description ends]

So to get the PowerShell module installed, I'm going to type, install-module-name az. And then I'll press Enter. I get a message about needing a new version of a provider to talk to a repository on the Internet. [Video description begins] A Nuget provider is required to continue. Instructions for its installation display. [Video description ends] So I'm going to go ahead and press Enter which is the default of yes, we allow this to happen.

Then I get a message about trusting installing something from a repository out on the Internet. [Video description begins] The message relates to an untrusted repository and asks if the installation should proceed. [Video description ends] I am going to type in yes because this time if I just press Enter the default here it says is no. So I do trust it. So what we're doing is reaching out to a repository to install this PowerShell module. The good thing about doing it from PowerShell is that it's the same method as long as you've got PowerShell running on Windows, or the MacOS, or even Linux.

Now we have a red message that says some commands are already available on the machine, and it gives me some name of the cmdlets. And that will happen if you've got different versions of modules installed. So all you have to do to avoid this and to use the latest installed version is to use the -AllowClobber parameter. No problem, let's clear the screen. Let's bring up our command initially that we used to install the module. And we'll simply add to the end of it -allowclobber, that's one word, and we'll press Enter. [Video description begins] He runs the command: install-module -name az -allowclobber. The output is the untrusted repository message. [Video description ends] And again, we going to type in yes to trust the repository and let it be on its way. And now notice this time no errors, we are good to go.

And now if I run get-module and use wildcards looking for PowerShell modules, which are essentially libraries of cmdlets, if I look for them that begin with az. and I use -list to show me what's been installed, not necessarily what's loaded in memory, we can see we've got all kinds of these great Azure PowerShell modules available, such as Az.Compute. [Video description begins] He runs the command: get-module *az.* -list. The output is a table of modules with the column headings: ModuleType, version, Name, and ExportedCommands. [Video description ends] And we can even see some of the cmdlets listed here for working with virtual machines, Cdn for Content Delivery Network, Az.Accounts for working with account information, and so on.

So what I could do is run things like get-command -module, let's say, az.compute. So show me the PowerShell cmdlets related to compute. [Video description begins] He runs the command: get-command -module az.compute. The output is a question asking whether to run software from an untrusted publisher. [Video description ends]

Now here it wants me to trust this file to do that. So I'm going to choose that I always want to run, so a. And here we now see a list of the many PowerShell cmdlets available within that module [Video description begins] The output is a list of cmdlets such as Remove-AzVmzzDataDisk. [Video description ends] where we can remove things like data disks or we can save virtual disks. And as we go further up through the list of commands because there's a lot of them available here, we see one for example called New-AzVM.

So if I clear the screen, I can also run get-help. So get-help new-azvm. And I can even ask for detail by putting in -detail. [Video description begins] He runs the command: get-help new-azvm -detail. The output is a question checking whether to run Update-Help. [Video description ends] Now, it says do you want to make sure you run Update-Help so that you have the most up-to-date information? Sure, I have some time. I'll go ahead and type in the letter y for yes and press Enter.

After a moment the update is complete. So if I scroll back up here we'll see examples of how we can actually use this cmdlet to work with new virtual machines that are being created through PowerShell. So we have the synopsis Creates a virtual machine, and we can see the many parameters available potentially to be used with the New-AzVM cmdlet. And as we scroll further down because we asked for detail with -detail, we can see a detailed listing of each and every parameter. And furthermore, down at the bottom we'll start seeing examples of how to use this cmdlet to create a virtual machine. [Video description begins] He points to different sections of the output. [Video description ends]

The last thing we'll do here is talk about how to authenticate to our Azure account here in PowerShell so we can actually do things like manage Azure resources. To do that I'm going to run connect-azaccount. That's going to pop up this Sign in screen for Azure, [Video description begins] He runs the command: connect-azaccount. The Sign in to your account dialog box opens. [Video description ends] so I'll go ahead and put in my credentials. And then I'll go ahead and click Sign in. [Video description begins] He enters his username and clicks Next, then he enters his password and clicks Sign in. [Video description ends] And after a moment, indeed we can see that we are connected to our Azure account. [Video description begins] The output lists the account, subscription, tenantId, and environment. [Video description ends]

