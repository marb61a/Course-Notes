                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 4


Azure PaaS
  - Azure Platform as a Service, otherwise called PaaS, applies to IT administrators and developers. 
    - These are the types of IT people that would be interested in Platform as a Service offerings.
  - Now let's find out why that is because there are many examples of Platform as a Service in Azure
    - The first of which is Azure Active Directory, otherwise called AAD
      - Normally, there maybe an on-premises Active Directory domain controller that has a replica of the Active Directory domain database. 
      - That would contain things like user accounts, computers, for those computers joined to the domain, groups, and so on.
  - Well, instead of provisioning a virtual machine and installing the Active Directory services role and all of that manual work
    - We can simply deploy a new instance of Azure Active Directory very quickly in the Azure Cloud
    - There is no need to worry about the underlying virtual machines, because if manually deploying virtual machines, it wouldn't be Platform as a Service. 
      - It would instead be Infrastructure as a Service.
  - Other examples of Platform as a Service include deploying Azure SQL databases in the Azure Cloud. 
    - Deploying the Azure Search solution or the Azure Content Delivery Network or CDN, which is used to place content geographically nearest users that will be requesting it to speed up the experience. So these are all examples of things that we could deploy very quickly without having to manually deploy the underlying virtual machines that would support these services. So in other words, these are examples also of managed services.
  - With Platform as a Service in Azure, there is shared responsibility where the cloud provider
    - Microsoft, is responsible for the underlying servers that will run things like Active Directory and Microsoft SQL Server
    - However we as the cloud customers have a different type of responsibility
    - We would be responsible, for instance, for the contents that would be stored within Azure Active Directory
    - This would include user accounts that we might create for authentication and groups and the privileges they have through role-based access control. 
  - If deploying Azure SQL databases, we would be responsible for the specific configuration of how that works and whether we've got replicas. 
    - Of course, the data that's stored within those Azure SQL databases.
  - Like pretty much everything in Azure, Platform as a Service offerings can be accessed in a number of ways 
    - This includes deploying, configuring, and just ongoing management
    - The Azure Portal can be used as can the web GUI and also Azure CLI commands. 
    - We can use Azure PowerShell cmdlets to talk to Platform as a Service offerings
    - At the development level, developers can talk to Platform as a Service items such as Azure SQL databases through exposed APIs
      - They can do that using the REST API.


Azure SaaS
  - Software as a Service, otherwise called SaaS, is one of those cloud service models that applies primarily to end users.
  - What does that mean using the word primarily? 
    - What it really means, is that end users benefit from the use of Software as a Service, such as office productivity tools that are cloud based. 
      - However, IT techs are still responsible for making config changes or applying security settings that will influence how end users use those solutions
  - Examples of Software as a Service would include cloud-based solutions related to things like email, or calendaring
    - Office productivity tool such as Office 365, which can also include things like SharePoint Online.
  - With Software as a Service, the shared responsibility is split between the cloud provider and the cloud consumer. 
    - The cloud provider is responsible for all of the underlying hardware to make those services available 
    - Also underlying servers that might run Microsoft Exchange Mail Server software, so it's available for cloud-based mail, and office productivity software.
  - But we as the cloud customer, we're SaaS end users, Software as a Service
    - This means that we are responsible for configuring the behavior of those solutions
    - This may include some security settings, whatever is available with the specific solution we're talking about, and also the data that results from it. 
    - We would be responsible, for instance for how data is treated or backed up, archived, or replicated that we might be working with, in eg SharePoint Online
  - So we can manage Software as a Service settings using a web browser
    - An example is to be using the Office 365 web portal to provision users or control what they can access. 
    - We can also use command line tools to do the same things
    - For instance, we might use PowerShell cmdlets to authenticate to Azure Active Directory which is used by Office 365. 
    - We might also use separate PowerShell cmdlets to make a connection to SharePoint Online, so we begin managing that aspect of the Office 365.


On-Premises vs. Cloud
  - Years ago, when cloud computing was a newer thing, there were a lot of comparisons made as to how we could use cloud computing or on-premises IT solutions
    - One or the other, not both together. But the reality is we can use a hybrid of both. It doesn't necessarily have to be just black and white.
  - On-premises IT computing versus cloud computing starting from the context of hardware
    - With on-premises IT systems, we as the private organization are entirely responsible for selecting, then acquiring and waiting for hardware to be shipped
      - Including things like racks for server rooms or data centers, rack-mount servers, UPS battery systems,
        - storage appliances, firewall appliances, routers, switches, the list goes on and on
      - In the cloud, that's the provider's problem, not us as a cloud consumer.
  - The same goes for the configuration of that hardware, the ongoing management, firmware updates that need to be applied perhaps over time
    - And the eventual decommissioning of it and finding replacement hardware
    - On-premises that would fall entirely on the organization, but in the cloud, that responsibility falls on the cloud provider.
  - If we look at the same type of thing but from a software perspective, on-premises, private organization is responsible. 
    - The selection, the acquisition and the licensing of whatever software solutions are needed to meet business needs. 
    - Now in the cloud, the acquisition part isn't a big deal because the cloud provider will have something available such as Office 365 and its variety of options
    - However, licensing is an interesting topic, because if we've already purchased licenses, let's say for the Windows Server operating system or another 
    - These we are running all that on-premises, when we migrate to the cloud some Azure Cloud offerings will allow us to bring our own license, BYOL. 
    - This means we can reuse our investment in licenses and not have to pay for it all over again, just because we're migrating to the cloud.
  - The configuration of software, the ongoing management, the application of updates, and the eventual decommissioning of software
    - All of this is our responsibility if we are doing all of this on-premises
    - In the cloud however, depending on the specific cloud service model you're talking about, most or all of this could be the cloud provider's responsibility. 
    - Imagine that you're deploying software in the form of a Linux virtual machine in Azure which you are manually deploying, that's Infrastructure as a Service
    - You as the cloud customer, then, are responsible for updating that operating system and installing software in that virtual machine and updating it as well. 
    - So it really depends on the specific cloud service model that you're talking about when it comes to software and who is responsible for what.
  - The next thing to consider is that if we've got a physical disaster, when we have an on-premises environment
    - It might be beneficial to use the cloud as an alternate site
    - That means that we could have IT systems that run on-premises
    - Web applications, database servers etc, that could be duplicated and left running in the cloud
    - Depending on requirements, we could have continuous data replication to the cloud, in the event of a physical disaster, everything is ready to go in the cloud
  - The other thing to consider is the responsibilities, as we mentioned. 
    - On-premises really means that the private organization is pretty much responsible for everything. 
    - In the cloud, generally speaking, the cloud provider is responsible for a lot of the infrastructure, certainly when it comes to hardware.
  - We also have to think about the cost. 
    - We need to dispel the myth that cloud computing is always cheaper than the alternative, which would be to host everything yourself on-premises. 
    - That is not necessarily always the case as it is not that simplistic
    - Consider the fact, though, that there are capital expenditures when it comes to purchasing and paying upfront for all of this on-premises hardware 
    - We don't have that Capex or that capital expenditure, when it comes to exclusively using cloud computing
    - In that case, we've got an operating expense over time with a monthly subscription and usage payment which is Opex, or operating expenditures
  - And in the cloud, we can also configure billing alert so that we can be notified when a certain cost threshold is exceeded
    - This is so that we can take a look and maybe realize that we left databases running in the cloud for a test environment when we are finished with them
    - Remember, when you leave things running in the cloud, you're still paying for them, so very important to watch that


Cloud Migration
  - Cloud migration deals with migrating on-premises IT environments into the Azure cloud. 
    - Things like specific IT systems, such as servers, or even specific IT workloads running on a server
    - Imagine that you've got an on-premises file server, that's also doubling as a database server
    - You might choose the database workload as something you might migrate into the Azure cloud, while leaving the file server on-premises.
  
