                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 41


Configure Azure Firewall
  - In the portal, click on the Virtual Machines view over on the left
    - Here there is a virtual machine running, it's called eastwindowsvm1
    - If we take a look at the networking for this, it's in a network called EastVnet1 and more specifically in a subnet within that vnet called EastSubnet1
  - Having said that, if I go to my jumpbox virtual machine, which is running, and click on it and look at the networking. It's in the same virtual network, EastVnet1, but in a different subnet, in this case EastSubnet2. Now a jumpbox is normally used as a point for remote administration from the outside. So I can make a connection from the Internet into the jumpbox, and from the jumpbox to other virtual machines on private networks.
So what I'm going to do then is take a look at my virtual network definition, because I've prepared something ahead of time. If I go into virtual networks on the left. And then if I open up one of my virtual networks here on the right, called EastVnet1. I've already created a subnet called AzureFirewallSubnet.
All one word, no spaces, and I've allocated it some address range that falls under the vnet range. Now you can either have this done ahead of time or you are prompted to create a new virtual network and a subnet with this name when you build the Azure Firewall, as you'll see pretty much now.
So I'm going to click Create a resource in the upper left to begin building the firewall. I'm going to search for firewall. I'll select it from the list and I'll click Create. So I want to put this in an existing resource group I've already got created. And I'm going to call this Fw1 for firewall1, and in this case I'll put in the Canada East region and here's where you have the option to create a new virtual network or use an existing one.
Notice it wants to call it, the subnet at least within the Vnet, AzureFirewallSubnet. We've already done that. So if I were to choose Use existing, if I use existing Vnet, let's say I chose Vnet2 here. Notice it says you need to have a subnet called AzureFirewallSubnet. Well that Vnet doesn't but EastVnet1 does, and so I don't get that message any longer. Now remember that an Azure Firewall has a public IP address so it needs to create that resource. I'm going to call this Fw1PubIP and I'll click Review and create, it'll check.
And once the validation has passed, I will click Create. So I'm in the midst of creating the firewall, and then we can see that the deployment is underway.
While that's happening, I'm going to click Create a resource because what we need to create is a route table. Now we have to do this so we can direct any subnets that have resources that we want to go through our Azure Firewall, we need to define a route so that they are forced to so before traffic gets to the Internet.
Now that's going to be our example, the Azure Firewall also controls inbound traffic from the Internet. So I'm going to choose Route table and I'm going to click Create. And I'm going to call Fw1Rt1, firewall 1, router table 1. And I'll place this in an existing resource group. Same region or location, Canada East, and Create.
So we're going to have to do two things here. Number one, I'm going to have to create a route to the private IP address of my Azure Firewall. And I'm also going to have to associate the routing table with the subnet in question. Okay, looks like that resource deployment has succeeded. So let's just go to all resources here, I'll type rt and there it is, Firewall 1 Rt1, my routing table.
First thing that I'll do here is go to subnets and click Associate. I'm going to choose EastVnet1 and I'm interested in EastSubnet1. That's got virtual machines on it and my goal is to limit their access to specific Internet locations based on the FQDN. And those virtual machines are in EastSubnet1. So I want them affected by this routing table. So therefore I'm going to go ahead and click OK.
Then, I need to create a route. Now, to do that, I need a private IP at the firewall. Let's see if the firewall is ready yet. So if I go to all resources and filter by fw, there is Fw1, but we don't have the private IP address yet. So let's give it a moment until it's completely initialized, then we'll copy the private IP because that needs to be in the routing table entry, as you will see in a moment. And after a minute, we have now have a private IP address for this firewall. So we're going to go ahead and copy that.
Now just for fun, let's go back to virtual networks for a moment and let's open up EastVnet1, and let's click Connected devices.
So we can see that our firewall device, firewall 1 is connected to a subnet called AzureFirewallSubnet. We've got our jumpbox connected to EastSubnet2, we are going to reach into that jumpbox. And then from it we will connect to the private IP address for our Windows virtual machine running in EastSubnet2. So let's get back to our routing table and get this all figured out and working.
So I need to go to All resources. Filter it for rt, there's our routing table. We've already associated with EastSubnet1. And now I'm going to go to Routes and Add a route. I'm going to call this firewall1 default and the address prefix here for the default route is 0.0.0.0/0. The actual firewall is considered a virtual appliance in here, we're going to give it the private IP address. Then I'll click OK.
So now I've used remote desktop to RDP into my jumpbox and through it RDP to the private IP address of a Windows computer that is on a subnet affected by our default route to our firewall. And so what you are going to notice then on those machines, like if you go to the command prompt and if you try to ping something on the Internet, let's say www.google.com, you are not going to get a response back.
But you would from your jumpbox, of course, because it's reachable from the Internet. And so if I were to open a web browser here on this computer, and let's say I just try to go to cnn.com. Notice, I get an action of deny being shown here. No rule matched. And the default rule blocks connectivity. Okay, well, let's say I want to allow access to cnn.com. So I'm going to make an application rule that will allow that.
  - Back in the Azure portal, in the All resources view, filter for things that have fw in the name
    - Let see, firewall 1, Rules, Application rule collection, Add application rule collection
    - Call this example AllowedEntertainment and give it a rule priority
    - In this case, it's the only one rule we have, so 100
    - We want to allow, and the name here will be AllowHBO or CNN or whatever it is, in this case CNN
    - Let's say the source address is any, protocols and ports http,https, and the target FQDN will be star dot cnn.com and click Add
    - Once it's updated that firewall rule, go back to that client station and retry the connection to cnn.com.
  - After a moment we can see we're able to pop up the web page because now that is listed as an allowed FQDN through our Azure Firewall
    - Although if we try to go to other sites here, eg going to google.com, again we get an action of deny and we don't get access to the webpage.


Azure DDoS Mitigation
  - A distributed denial of service attack is executed by an attacker
    - These machines would have been infected perhaps by tricking users into following links to websites that contain malicious code
    - Or email messages that have infected file attachments, and the like
    - The idea is that the attacker has control of all of these machines and these machines are called zombies or bots
  - They are organized into what is referred to as a botnet, a collection of computers under the control of an attacker
    - Often, if you actually search around the dark web, you will come across sites where these are for sale
    - You can rent the use of a botnet to execute a DDoS attack against, for example, a website or even a competitor to make their web application unavailable
    - Or even if you're a malicious person, to demand ransom, this is highly illegal, however, it does exist and it's a reality
  - We need to be able to mitigate this
    - So the attacker controls all of these bots organized into a botnet, which can render a website or an application useless for legitimate traffic
    - What can we do about this? Well, with a distributed denial of service attack, basic protection is automatically enabled for you in Microsoft Azure
    - There's no additional cost, but what does that mean?
  - Well, why don't we compare basic with standard, which does have a cost associated with it
    - You configure standard DDoS mitigation protection in the properties of an Azure virtual network, when you're in the properties blade.
  - So what happens then, is that based on the resources deployed in that Azure VNet
    - Microsoft Azure will tune protection against DDoS attacks against those resources
    - You also get alerts when DDoS attacks appear to be occurring against some of your deployed resources In those VNets.


Network Security Groups
  - Azure network security groups, or NSGs, are resources in Azure that get associated with other resources like NICs, network interface cards, used by virtual machines, or subnets.
  - So we're talking about inbound network security rules to control traffic coming into Azure, or even traffic leaving Azure in an outbound direction. But that inbound and outbound protection is associated at the NIC level for a specific virtual machine or, a little bit more generally, at the subnet level. So certainly, if you've got a subnet with a bunch of Linux machines that you want to be able to administer, you might allow inbound SSH, either to one jump box or to all of them.
And so you could do that through a network security group associated with the subnet. However, when it comes to associating network security groups with things like network interface cards used by DMs, bear in mind that only one network security group can be associated with a network interface card.
Azure network security groups support Allow as well as Deny actions, depending on what your requirements are. There are also a series of default rules to allow things like load balancing, to allow Inter-VNet communication. And of course, incoming Internet traffic initiated from the Internet is blocked by default. Outbound Internet traffic, however, is allowed by default.
When you use the portal to create a network security group, or an NSG, it's going to look something like this. Specifically, this is a rule being created within the NSG, where at the top we specify the Source, in this case it's IP Addresses. We can control either a specific IP address or a range of IP addresses. We can specify a source port range or just a single port from which the traffic is initiated from. And then we have to specify the Destination, because this is an inbound rule. In this case, it could be a virtual network, it could be a specific virtual machine IP address. And, of course, we can see here the Destination port of 80.
We can specify the Protocol as being TCP, UDP, or Any. And then, of course, we determine whether we want to Allow or Deny this traffic, in this case we are allowing it. The Priority value is relative to other items. Here we've got a Priority for 100 in this rule. If we have another rule with a priority of 300, well this rule will get checked first, and if there's a match with the incoming traffic, rule processing stops. Otherwise, it would continue on to the next rule with a priority of 300. And then, of course, we have a name that we can assign to the rule.
Here we can see a number of inbound security rules listed together for a network security group. We can see the first rule, PRIORITY 100, is the rule we just looked at a moment ago for port 80. So because that has the smallest priority number, at least value-wise numerically, it gets checked first. And on the far right, you can see the ACTION is to Allow it if incoming traffic matches those conditions.
The next three, the last three also, are default rules, and I can click the Default rules button pictured here in the screenshot to hide them if I don't want to see them. But allowing inbound VNet traffic and load balancing is allowed by default. But after that, notice the last rule at the bottom is to DenyAllInbound traffic if there is not a match from above.
Network security groups in Azure can be managed using the Azure portal GUI, or using PowerShell cmdlets such as New-AzNetworkSecurityGroup, Get-AzNetworkSecurityGroup to retrieve a list of them. We can remove a security group with Remove-AzNetworkSecurityGroup.
However, there are also PowerShell cmdlets to manage the rules within the network security group. At the CLI level, we can use az network nsg create, naturally to create the network security group. We can list them, and of course we can delete them using the appropriate syntax.


Network Security Group GUI Management
In this demonstration, I will use the Azure portal to create and configure a network security group. In Azure, network security groups are often simply referred to as NSGs and they are used to control traffic into and out of VNet subnets.
So to go ahead and get started here, let's take a look at an existing configuration and then we'll build a new one. So here in the portal, I'll start by clicking on Virtual networks over on the left, and I'm going to click on one of my existing virtual networks to pull up its properties blade. Now the first thing I want to do here is look at the subnet affiliation or
association to the selected VNet. And on the right, we can see that we've got a number of subnets such as EastSubnet1, for example, that is associated with this virtual network. And notice under the SECURITY GROUP column, we can see the network security group associated with that particular subnet, in this case, NSG1. So therefore, if I go to All resources and
if I were to filter by NSG, among other things, we will certainly see NSG1, the network security group we were just talking about.
And if I go ahead and click on that to pull up its properties blade, it has a set of inbound security rules to control traffic into, in this particular case, the way it's being used, the subnet, and also outbound security rules. Now when I go to both inbound and outbound security rules, I can hide the built in default rules, which, if you look at their priority values fall towards the bottom of the list of rules.
The rules are matched against, in this case, incoming traffic starting at the very top based on the priority, and then going further down to the next priority value and so on and so forth. When there is a match, rule processing starts. And so that is also true when it comes to outbound security rules.
Now let's just go look at our virtual machines. If I were to pop up the properties blade of a virtual machine, and if we were to click on Networking, we would also see the VNet and the subnet association, but also the network security group. So notice here that we've got NSG1, that's network security group 1, attached to a subnet, and we can see that the rules are showing up in here. But also notice that if the virtual machine were running, we'd be able to click Effective Security Rules so that we would be able to see all of the rules in effect if we've got more than one particular security group. Because you might have a network security group associated to a virtual machine specifically.
So I'm going to go to the Create a resource button in the upper left, and here under the Networking section, I'm actually going to create a network security group. Now when I do that, I have to come up with a name for it. So if this is going to be, let's say for the Windows environment for an application, specifically, that has many resources like a back end database, some virtual machines, a load balancer and what not, maybe I would call this, WebApp1_ NSG, if it's for that purpose. Then I have to deploy it into either an existing resource group or create new resource group, specify the location, and then I simply click Create.
But that's not the end of the story with network security groups, though of course, because they need in and outbound rules configured appropriately so that they can be used. And then, of course, they need to be associated with things like subnets so they're actually effective.
So if I go to All resources here, let's just look or filter for NSG, here's WebApp1 NSG, so I'm just going to go ahead and click on that. So for inbound security rules, we've got the default rules, because if I hide them we see nothing. Same with the outbound rules, we've got the default rules.
However, I want to add a rule to allow inbound traffic. So because this is for a web app, I'm going to click Add to add a rule. The source will be Any. I can specify Source port range on the request, and I can also specify a destination of Any. Or I could specify an IP Address if I know, for instance, I've got a fixed IP address, a static, unchanging IP address, that I'm using for a virtual machine, that I can pop that in here.
If I know that the destination port is 443, it's an HTTPS connection type of application only, I know that's happening over TCP port 443, and I want to allow it. And again, I've got a priority value here and I need to give it a name. How about we call this AllowinboundHTTPS, and then I'll click Add.
So once we've added the security rule or security rules to our liking, we're then ready to make this effective by associating this network security group with something, and those somethings could include, as we know, a subnet. If I go to Subnets, I can click Associate and I can choose, first, a virtual network and then choose the appropriate subnet to which I want that applied.
However, I'm going to exit out of there because we can also associate this with a network interface that's tied to a virtual machine. So we could have a network security group for an entire subnet, but there are times when you might have a single virtual machine which is linked to a network interface that has specific in or outbound network traffic security rule requirements. And so in that case, you could associate your network security group with a specific network interface.


Network Security Group CLI Management
In this demonstration, I will create a network security group using the Azure CLI. I've downloaded and installed the Azure CLI and I've already run the az login command to authenticate to Azure. So at this point, I'm going to run az space network space nsg, for network security group, create. And from here, if I do --help, I'll learn about the syntax related to the creation of a network security group.
However, I'm going to go ahead and bring up that command using my up arrow key and just modify it by removing --help. I'm going to use -g, I'm going to tie this network security group or deploy it into a resource group, and I'm going to call it, with -n for name, Windows_NSG. So assuming I need a network security group to control traffic into and out of Windows virtual machines, this will be a good name.
I'm going to go ahead and just do that. Once that's finished, of course, I can also get a list of virtual networks. So we can see it looks like it created our Windows_NSG, network security group.
And at any point in time I could run az space network space nsg space list. Now I get the same kind of thing back.
What I could do is also run that command, but pipe the result to the find command and tell it to look for name. Now I'm also going to get the names of rules within the network security groups. But at least we can see we have less to look at, and indeed, our Windows Network Security Group lives on.
So, the next thing we're going to do is create a rule within that network security group to control traffic. So I'm going to run az space network space nsg space rule space create. And this is going to be for a resource group of Rg1 --nsg-name, in this case is Windows_NSG. I'll set the priority, let's say, for this rule to value of 200, which is relative to the other rules to control the execution.
And I'll use --source-address-prefixes anywhere, so asterisk, --destination-address-prefixes, same thing, going anywhere. And then I can specify also the destination port information. So, --destination-port-ranges. And in this case I want to make an allowance for port 443 --direction is going to be inbound because network security groups can also control traffic going out. -- access, we can either allow or deny, in this case, allow, the protocol, -- protocol, is tcp. And finally, let's give this thing a name.

How about AllowInboundHTTPS. And then I'll go ahead and press Enter on the assumption that everything was typed in correctly. Okay, it looks good.
Let's just do this, let's clear the screen. az space network nsg rule space list and --resource-group Rg1, and what's the name of our security group? --nsg-name, it's Windows_NSG, and we can press Enter, and we have a typo. Well, that's because we have az newtork when really it should be az network. A little dyslexic here, there we go.
So we got the same kind of output that we got when we created that rule. And we can see the destinationPortRange indeed is for port 443, and that this is for an Inbound direction and we're allowing that traffic.


Network Security Group PowerShell Management
You can also use PowerShell to create and manage network security groups in Azure. Here I've already got a PowerShell script that I've opened up in the PowerShell ISE, the integrated scripting environment. The first command is Get-AzNetworkSecurityGroup. So having my cursor blinking on line 1 where that command exists, I'm going to click the Run Selection button. And this is going to list back, of course, the Azure network security groups and the details that go along with each of them as we can see.
However, in line 3 I'm filtering it out and only showing the name. So I'm piping it to the select alias in PowerShell, and telling it that the only prop I'm interested in is name. So let's go ahead and run that line, and see how the output differs. That is much cleaner looking, because now we see only the names of the network security groups as opposed to all of the details for each and every one of those network security groups.

[Video description begins] He highlights and executes the following command in the third line of command: Get-AzNetworkSecurityGroup | select name. The cursor blinks after the command. He clicks the Run Selection button on the toolbar. The second section of the windows displays: Name, eastlinuxvml-nsg, eastwindowsvml-nsg, NSG1, WebApp1_NSG, Windows_NSG. The section also displays other details of network security groups. [Video description ends]

So to build a new network security group we would use the New-AzNetworkSecurityGroup cmdlet. Where we have to specify a name,- name, we deploy it into a resource group, so I use -resourcegroupname for that, and then we specify the Azure region. Now I'm going to go ahead and run that line, so I'm going to select it and I'm going to run the selection. So after a moment we'll see that we've got a new network security group here.

[Video description begins] He types and executes the following command in the second section of the window: cls. He highlights and executes the following command in the fifth line of command in the first section: New-AzNetworkSecurityGroup - name Linux_NSG -resourcegroupname RG1 -location canadaeast. He selects the fifth line of command and clicks the Run Selection button on the toolbar. The second section of the windows displays data associated with new network security group. [Video description ends]

Let's clear the screen down here in PowerShell, why don't we run that command again where we just select by name. So how about we do that, let's just clear this up and let's see what we get returned here. What we're looking for is that we've got our Linux NSG or network security group that exist. And indeed it is returned from that PowerShell cmdlet,

[Video description begins] He types and executes the following command in the second section of the window: cls. He highlights and executes the following command in the third line of command in the first section: Get-AzNetworkSecurityGroup | select name. He clicks the Run Selection button on the toolbar. The second section of the windows displays: Name, eastlinuxvml-nsg, eastwindowsvml-nsg, Linux_NSG, NSG1, WebApp1_NSG, Windows_NSG. [Video description ends]

so, what are we doing in line 7? Well, I'm using the back tick character so that I can have this wrap across three lines, it's really one big statement. What we're doing here is we're running Get-AzNetworkSecurityGroup and I'm calling it by name. I want to get the Linux network security group, and here's the resource group it's in.

And then, once we have a handle on that object, we are piping that output to the Add-AzNetworkSecurityRuleConfig cmdlet. And we're adding a rule that's called AllowSSH, so we're allowing access that's destined from an inbound direction for TCP port 22, as we see way down here. We can see all the other details like the priority, the sourceaddressprefix, and in this case from anywhere, *the sourceportrange*, destinationaddressprefix*.

Having done that, that's the middle command as we can see selected here. Then we take the result of that and we pipe it to Set-AzNetworkSecurityGroup, so we can write the settings to the security group that we got from the beginning of the command. Does that make sense? We get the network security group, get a handle on it, add a rule and then write it using the Set-AzNetworkSecurityGroup cmdlet.
So, let's make sure we execute lines 7, 8, 9 here as one expression. So I'm going to select them and I will click the Run Selection button. And after a moment, it looks like it ran. Why don't we do this? Why don't we go into the Azure portal and check our work in this particular example just for fun.
So here in the portal I'm in the All resources view, why don't we filter it for things that have NSG in the name. There's the Linux network security group, and if you look at our inbound security rules, there is the AllowSSH with the priority of 220, port 22, and so on, and of course it is allowed. So there you have it, it's pretty easy to work with network security groups using Microsoft PowerShell.


Configure a VM Jump Box
In this demonstration, I'm going to create a jump box. A jump box is a machine that you can connect to. For example, from the Internet if you're working on premises, so that you have access into the Azure cloud. And from the jump box you can then make remote connections to other internal Azure resources. Like other virtual machines that might not be publicly accessible directly.
And so to get started, really we're talking about creating a virtual machine. So I'm going to click Create a resource in the upper left here in the portal, it's going to be Windows Server 2016 Datacenter. And I will deploy this into an existing resource group. We're going to call this JumpBox, and I'm going to go ahead and deploy this into a specific Azure region of my choosing.

And I'll fill in the Username and Password information. And then I'll click Next, I'm going to accept the disks. And for networking this is going to go and do a virtual network called EastVnet. And specifically I'm going to put this in a subnet, let's say, called EastSubnet1, and it's going to make a new public IP.

So that's fine, let's let it create that, because I need a public IP to get to the jump box. And from the jump box we get to other internal resources that might not have a public IP. So I'm okay with this. I'm just going to basically go through the wizard. I'm okay with everything here. Let's make sure validation is passed.

[Video description begins] He clicks Create a resource on the left navigation pane of the Azure portal. A window titled New displays on the right pane. It displays various links. He clicks Windows Server 2016 Datacenter Quickstart tutorial. A window titled Create a virtual machine displays on the right pane. It displays seven tabs: Basics, Disks, Networking, Management Advanced, Tags, and Review + create. He clicks the Basics tab. The tab displays various details, which need to be populated to create a virtual machine. He selects and types the following details: Subscription as Pay-As-You-Go, Resource group as Rg1, Virtual machine group as JumpBox, Region as Canada East, Availability options as No infrastructure redundancy required, Image as Windows Server 2016 Datacenter, and size as Standard DS1 v2. He types his username and password and clicks the Next: Disks > tab at the bottom of the window. The Disks tab displays. The OS disk type displays as Premium SSD. He clicks Next: Networking > tab at the bottom of the window. The Networking tab displays. He enters the following data: Virtual network as EastVnet1, Subnet as EastSubnet1 (10.1.1.0/24), Public IP as (new) JumpBox-ip, NIC network security group as None, and Accelerated networking as Off. He clicks Next: Management > tab at the bottom of the window. He clicks the Advanced, Tags and Review + Create tabs also. [Video description ends]

And it is, so I'm going to create this virtual machine. Now, while that's happening, if I go look at my other virtual machines. I've got one here called eastwindowsvm1, and it's got a private IP allocated but not a public IP. And this virtual machine is actually in the midst of being started. Let's just go back here and do a refresh now. And in a moment, we'll see that it's actually up and running.

[Video description begins] The Create a virtual machine window on the right pane displays Validation passed. He clicks the Create tab at the bottom of the window. A pop-up window shows that the deployment is in progress. He clicks Virtual machine on the left navigation pane of the Azure portal. A window titled Virtual machine opens on the right pane and displays three virtual machines in three rows. He clicks the second virtual machine eastwindowsvm1 on the second row. A window titled eastwindowsvm1 Virtual machine opens on the right pane. The window displays Private IP Public Address but not the Public IP address. He clicks Virtual machine on the left navigation pane of the Azure portal. A window titled Virtual machine opens on the right pane and displays three virtual machines in three rows. He clicks Refresh tab displayed above the rows. The Status of the virtual machines eastwindowsvm1 and JumpBox, displayed on the second and third row gets updated to Running. [Video description ends]

And after a few moments, we can see that the two virtual machines are up and running. Again, we've got a virtual machine here that does not have a public IP, but it does have a private one. But that's not our JumpBox. Our JumpBox, if I click on it, in fact does have a public IP address.

Let's start by using the Remote Desktop client here on premises to connect into the jump box. Okay, so I've popped in the public IP address that I copied from the jump box virtual machine in Azure. So I'll paste that in here, I'm going to click on Connect. And when I put in the credentials and click OK, I'll just get this certificate message. I'm going to trust this certificate and tell it not to ask me again every time I connect, and I'll choose Yes. So we're making an inbound connection from on-premises through

[Video description begins] The window titled Virtual machines displays on the right pane. He clicks the second virtual machine eastwindowsvm1 on the second row. The Public IP address is still not displayed. He clicks the third virtual machine JumpBox on the third row. The window tilted JumpBox displays the Public IP address as 52.235.38.242. He clicks and copies the Public IP address. A pop-up window titled Remote Desktop Connection displays. He types Computer as 52.235.38.242 and clicks Connect. Another pop-up window titled Windows Security displays. He enters the credentials and clicks OK. A security warning displays on the window. He clicks the Yes tab. A pop-up titled Remote Desktop Connection displays, which shows the connection is being established to 52.235.38.242. [Video description ends]

the Internet into our jump box Windows virtual machine in the Azure cloud. Now, let me just go ahead and minimize that Remote Desktop window. Because what we want to do is now make a connection to this virtual machine eastwindowsvm1. Which, of course, as we know, if we go to overview, let's say, it does not have a public IP but it does have a private one. So I'm going to copy that private address, 10.1.1.4. Let's go back to our Remote Desktop session in our jump box.

[Video description begins] A window titled Virtual machines displays on the right pane of the Azure portal. The window displays three virtual machines in three rows. He clicks the second row: eastwindowsvm1. A window titled eastwindowsvm1- Networking displays on the pane. He clicks Overview. The right pane displays the Private IP address as 10.1.1.4, however, does not display the Public IP address. He clicks and copies the Private IP address. [Video description ends]

So now within here, I'm just going to go to my Start Menu and we're going to go ahead and fire up the Remote Desktop client. So from the jump box we're making a connection to other Azure host. In this case, using the private IP, in this case 10.1.1.4, which was our example, 1.1.4. And I'll click Connect. And of course it wants the credentials so I'll go ahead and supply that including the password.

And then after a moment we'll be prompted to trust a certificate for that connection to secure that network transmission. And now we can see that we are one level deeper, we are now connected to an internal Azure virtual machine, that itself, does not have a public IP. But rather, we got to it by going through a jump box. Now, the jump box itself does not have to be on the same subnet.

[Video description begins] He clicks Start menu on his computer and opens the Remote Desktop Connection. A pop-up window titled Remote Desktop Connection displays. He types the Private IP address as 10.1.1.4 and clicks the Connect tab on the pop-up window. Another pop-up window displays, which requires credentials to connect. He types the credentials and clicks the OK tab on the pop-up window. A security certificate appears and he clicks the Yes tab. The connection gets established. [Video description ends]

Back here in the Azure portal, if I open up EastVnet1 and look at the connected devices, we can see our Windows virtual machine and our jump box which are both on the same subnet. Now, that may or may not meet your security needs, we easily could have put our jump box on a different subnet in a different range.

And it would still be able to make a connection to the private IP of our Windows virtual machine. And sometimes because the jump box is publicly accessible, you might want to put it on its own subnet for isolation purposes, but it's not a requirement.

