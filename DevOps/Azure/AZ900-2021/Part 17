                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 17


Azure Virtual Network CLI Management
  - Using the Azure CLI to create an Azure virtual network and subnet. 
    - You can use the CLI through the Azure portal or you can use it the way I'm doing it by downloading and installing the CLI on a station. 
      - This needs to be downloaded and installed on an on-premises station running Windows 10.
  - First run the az login command to authenticate to my Azure account
    - Type az network vnet --help to figure out what the next level commands are related to working with virtual networks.
  - The first thing seen is create, take that step further and run az network vnet create --help to get the next level commands that we would use in our syntax.
  - Run az network vnet create as we saw in the help screen
    - Tie that to a resource group, so -g that I've already created called rg1. 
    - The name of this -n, and then name appropriately for the scheme being used
    - Use the --address-prefix parameter which would have been planned ahead of time, of course, but for example use the 14.1.0.0/16 addressing.
  - The /16 means we're using CIDR notation that identifies how many bits remain in the subnet mask
    - In this case, my network address is 14.1, at least for the Vnet itself
    - Use --subnet-name to also build the subnet within this Vnet
    - Call this Subnet1 and I'm gonna use the IP address range for the subnet within that VNet range
    - --subnet-prefix, and, in this case, I'm going to use, let's say, 14.1.1.0, it's a network address, /24 bits, press Enter.
  - After a moment, we can see the returned JSON which indicates that it successfully provisioned this resource, the Vnet and the subnet
    - We can even list it here in the Azure CLI, for example, by running az network vnet list
    - What I might wanna do is pipe that to the find command in Windows and tell I only want to see the names, I don't want to see all of the other properties.


Azure Virtual Network PowerShell Management
  - You can use PowerShell cmdlets to manage Azure virtual networks.
  - In PowerShell ensure that you have run the Connect-AzAccount cmdlet to authenticate to the Azure account
    - PowerShell is running here on-premises previously we downloaded and installed the Azure PowerShell module
    - To get started create a variable that I'm going to call $vnet, in PowerShell, variables are always prefixed with the dollar sign.
  - Then say equals, and what I want to put in that variable is the result of this PowerShell cmdlet, new-azvirtualnetwork
    - Use -resourcegroupname, and I'm going to put this or deploy this into a resource group already created and set location
  - Set -name to what you want to and -addressprefix, which would have been planned ahead of time just like the nomenclature for these things, 15.1.0.0/16
    - We have a 16-bit subnet mask, and what that means here is my network address, of course, is 15.1
    - Go ahead and press Enter to populate the $vnet variable, we're not finished because we need to also define a subnet.
  - Create a variable called $subnet, into which will be stored the result of add-azvirtualnetworksubnetconfig -name
    - Call this Subnet1, -addressprefix needs to fall somewhere under the Vnet range, so in this case how about 15.1.1.0/24?
    - It's a 24-bit subnet mask, in other words, the network address for the subnet is 15.1.1
    - We need to tie this to our virtual network and we can do that with -virtualnetwork and pass it our variable defined above, $vnet
  - Finally, what I want to do is use our $vnet variable and simply pipe the result of that to the set-azvirtualnetwork cmdlet
    - This means we want to make a change to the virtual network
    - In other words, we want to make sure our subnet that we've just defined above is actually added to that Vnet, press Enter
    - Click on the Virtual networks view and indeed we can see our newly created virtual network
    - Click on it to pull up its Properties blade, and if we click on Subnets, we'll see, there's Subnet1 with the appropriate IP address range.


Azure IP Addresses
  - IP addressing is used in the Azure cloud to allow different devices to communicate, such as virtual machines or database server instances
    - As such, it's important to have a solid understanding of how IP addressing actually works in Azure
    - Azure devices, such as virtual machines, can have private addresses or public addresses
    - A public IP address would be used, for example, to allow access from the public Internet directly into a virtual machine.
  - At the same time, bear in mind that the public IP addressing is something that is configured in Azure as an Azure resource
    - It's not something that we configure the way you would normally configure TCP IP within the virtual machine operating system
    - That's an important distinction, if it's a Windows host, and you type IP config at the command line for an Azure virtual machine
      - you won't see the public IP address, instead, the public IP address is controlled through Azure, through a resource.
  - We can also set static or unchanging IP addresses, as well as configuring dynamic or changing IP addressing
    - Static IP addressing is going to be important when you need the IP address to stay the same
    - The way it works in Azure is that the IP address will be allocated to the resource until the resource is deleted
    - If that resource happens to be a virtual machine in Azure, then the IP address it gets will stay with it until you delete it.
  - Even if it's shut down, it will still retain the address when you fire up that virtual machine later on
    - This is definitely useful when you need the IP address to remain the same
    - Example of this might be if you're defining your own custom DNS server for name resolution
    - Static IP addresses get assigned by an Azure address pool
    - So while you can't specifically select the IP that you want to assign, once your resource gets it, it gets it until the resource is removed from Azure.
  - Dynamic IP addresses are useful when you don't really care if the IP address changes
    - The IP address could change within each invocation of a service such as each time that you stop a virtual machine
    - When you fire it back up, you might always get a different private IP address in the case of dynamic private IPs or a dynamic public IP
    - As long as you don't need to depend on that address remain the same, dynamic IP addresses would be the correct selection.
  - With Azure private IP addressing, you can use both IPv4 and IPv6. 
    - Both static allocation of IP addresses, where you can't choose the address you get, but once you get it, you've got it until the resource is deleted
    - Can be used as well as dynamic allocation of IP addresses and these addresses are allocated or set, if you're doing it manually from the VNet subnet IP range.
  - You have to know what that range is for the subnet in order to know what to assign if you're doing it statically. 
    - You can also use private IP addressing within a VNet to allow communication between deployed resources like virtual machines
    - Or also you can use private IP addressing if your VNet is connected through a VPN or an ExpressRoute circuit to an on-premises network.
  - You can also assign public IP addresses as we have mentioned, whether they be IPv4 or IPv6. 
    - Like private IP addresses they can be assigned statically or dynamically
    - The public IP address will allow incoming and outgoing Internet connections, to be clear, even if a public IP address isn't associated with a virtual machine
    - That virtual machine will still be able to get out to the Internet.
  - What we are talking about is the inability of a connection to be initiated from the Internet into a virtual machine that has only a private IP address
    - Public IPv6 addresses currently are useful in Azure only for public-facing load balancers
    - IP addressing, whether it's public, private, static, or dynamic, needs to be planned for ahead of time
    - We need to think about certain services that might require unchanging addresses that might even need to be reachable from the public Internet.


Azure VPN Gateway
  - Virtual Private Networks, or VPNs, have long been used by business users to allow a secured way to connect over the internet to a private network
    - That's what the Azure VPN gateway is also for. It provides an encrypted tunnel between two endpoints
    - Those endpoints could be one VNet in Azure to another, or more often than not
    - It would be a link from an on-premises network or an on-premises individual client station to a VNet in the Azure cloud.
  - In order to deploy the Azure VPN gateway, you need to define a gateway subnet in your Azure virtual network
    - The subnet needs to be named GatewaySubnet, that's not a problem in the portal for instance, because that name is set and you cannot change it
    - What happens in the background is two virtual machines get deployed in the Gateway Subnet
    - However, they are not directly manageable, nor should you deploy anything else into that specific subnet, it should be set aside for this purpose only.
  - There are two types of Azure VPN gateway configurations: point-to-site and site-to-site
    - With the point-to-site configuration, it supports SSTP and IPsec protocols, you don't need a VPN device on the client's side
    - It really provides a single device VPN connection
    - That device might be a laptop used by a traveling user that might to make a secured connection into Azure to access a line of business application.
  - Site-to-site VPN configurations use IPsec in Azure. This might be used, for instance, to link our on-premises network to the VNet
    - In order for this to work, we need to have some kind of a VPN device on our on-premises network, unlike with a point-to-site configuration
    - That VPN device could come in the form of software through Windows Routing and Remote Access Service, Windows RRAS, or it could be an actual VPN appliance
    - Either way, we need a public facing IPv4 address to establish the encrypted tunnel from on-premises to our VNet in Microsoft Azure
    - If you're going to be configuring a VNet to VNet connection in Azure, then you don't actually need a VPN device; it's already taken care of.

