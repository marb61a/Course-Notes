                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 45


Azure AD User MFA
  - Multi-factor authentication, or MFA, enhances user login security
    - It does this because instead of simply having the knowledge of a username and a password to authenticate to Azure, an additional factor is required
    - Get started enabling MFA here on the portal by clicking on Azure Active Directory in the left-hand navigator
    - Then click on Users which is followed by clicking the Multi-Factor Authentication button
    - That's going to open up a new web browser, so I'm going to specify the admin credentials that I want to use
  - Here we can see a list of my Azure Active Directory users and the multi-factor authentication status
    - In this case, it's listed as Disabled for all users
    - We want to enable it for our created user Jonathan Gold, so put a check mark next to the name and over on the right, under Quick Steps click Enable
  - It tells me here that if our users don't normally use a web browser to sign in
    - Then we've got a link I can provide to them so that they can register for multi-factor authentication
    - But we don't have to worry about that here, we are just going to click enable multi-factor authentication
    - Notice here it says multi-factor authentication is now enabled for the selected accounts
    - If we close out, indeed we can see it is enabled for user Jonathan Gold.
  - When we use that account to sign into my web browser again, we've already specified the username and the password for the jgold account
    - We now get this message upon login which says more information required
    - Your organization needs more info to keep your account secure
    - That is okay, no problem so to continue click Next
    - We are then prompted, how should we contact you?
    - We can specify an office phone, a mobile app, or an authentication phone
    - If we were to choose Mobile app, then it says, how do you want to use the mobile app? 
    - You can receive notifications for verification or you can use a verification code
    - It tells us down below that to use this we have to get the Microsoft Authenticator app installed on my smartphone
    - So what we are going to do then is use the Microsoft Authenticator app to receive notifications for verification
    - Then we need to go ahead and click Set up
  - Then we get this little pop-up where we can scan this code
    - Assuming we have an app on a phone to scan this type of code
    - Then we can continue configuring the Microsoft Authenticator app
    - We do have a message that says, if we are unable to scan this image
    - For example, if we don't have some kind of a QR or bar code scanner app on our mobile device, then we can enter this code and the URI information manually
  - Now that we've scanned that in within our Microsoft Authenticator app after choosing work or school account which we've done
    - Then we're ready to continue with Next
    - What will happen on your smartphone is you'll have a numeric code
    - A six-digit code that pops up in the Microsoft Authenticator app for that account you've just added
    - This code is good for 30 seconds as it changes every 30 seconds
  - We are going to go ahead and click Next, it's checking the activation status
    - Once this looks good click Next, and at this point it's trying to send a message to the Microsoft Authenticator app on my smartphone
    - We did get a pop-up message, so we are just going to tell it we approve this type of connectivity, and it says verification successful
  - Choose our country or region in case we lose access to the mobile app
    - We are going to go down and fill in that information including my number, then click Done
    - We are going to put in the password again, so we need to know the username and the password
    - Now we have to approve a sign in request by tapping on Approve on our smartphone app, so tap on Approve, and now we are good to go
    - We are logged in now as user jgold through multi-factor authentication
    

Azure Subscription Overview
  - Microsoft Azure Subscriptions allow you to create Azure resources
    - The hierarchy begins at the top, with an organization, under which we can create one or more subscriptions
    - Now you might have multiple subscriptions. For example, for different countries, if you're a multinational firm
    - In some cases maybe even for different projects, or maybe one subscription for development versus one for production.
  - There are many reasons that we would do this, but in the hierarchy, your subscription or subscriptions exist under an organization name
    - We are assigned licenses at the subscription level and this was what allows us to use specific features of Azure
    - Going further down in the hierarchy under the subscription, we can create resource groups
    - Like the name implies, a resource group allows us to deploy resources.
  - Further down in the hierarchy under Resource Group 1, for example, we see three resources
    - But it could be one resource like a single virtual machine
    - Or it could be multiple resources like virtual networks, virtual machines, web applications, load balancers, all of that type of stuff
    - Often, we try to organize related items into a resource group
    - We can have more than one resource group to organize our Azure resources.
  - Azure Subscriptions then work in such a way that we can have one Azure account that we sign into
    - But we can switch between multiple subscriptions
    - We can do that in the Azure Portal, so in the GUI, we can also do it using command line tools
    - Whether we're talking about programming SDKs or the Azure CLI, even PowerShell commandlets
  - We can switch between subscriptions, so that we can manage resources within that subscription hierarchy
    - Billing also occurs separately for each individual subscription
    - That's why sometimes it might facilitate having large scale projects that might run for long periods of times under their own Azure subscription
    - Although, that certainly is not a requirement
    - If you sign up for a trial account, a trial subscription in Azure, once that time runs out
    - You can then convert it to a paid subscription, such as a Pay As You Go, for example


Azure Policies and Initiatives
  - In Microsoft Azure, we pay for the resources that we use
    - It's important that we have a way to control how resources can be deployed and which resources can be deployed by whom, and also how they can be managed
    - That's where Azure policies and initiatives come in
    - By definition, an Azure Policy lets us control the deployment and management of Azure resources
  - It's much more granular than RBAC, role-based access control
    - With RBAC, we could determine, for example, whether an administrative assistant in Azure has the ability to deploy virtual machines or not
    - However, with an Azure Policy, we can be much more granular
    - For example, we can limit how many virtual machines users can deploy and in which specific regions
  - Now, we also have Azure Initiatives
    - Initiatives take Azure policies a step further because it groups similar policies together for management
    - So that we might have a series of individual policies that lock down certain Azure resources to be compliant with a certain law or set of regulations
    - So we might have the initiative with the name of that law or regulations
    - And all the individual policies that that would entail would be contained within that initiative
  - There are built-in policies that we can use. In Azure, built-in policies allow us to control resource deployment by region
    - We can control resource deployment by type, such as whether we can deploy storage accounts, or load balancers, or virtual machines and in which regions
    - We can also use built-in policies to essentially audit things, such as to verify the version of SQL Server that we are using in the cloud
  - Custom policies can also be built. We can do this by getting them from Internet repositories like GitHub
    - We can manually create policies. We could copy an existing policy and then make minor changes
    - Either way, in the end, a policy uses JSON syntax
    - Notice here, also, in the middle of these two listings of built-in and custom policies, we see policy parameters
  - Policy parameters are basically variable values that we can pass to the policy
    - It enables us to reuse policies instead of hard-coding things like region names or virtual machine names and so on
    - Bear in mind that whether we use built-in or custom policies to control resource deployment or management
    - We're really talking about these policies that will apply not only to the creation of new resources, but also to existing resources
