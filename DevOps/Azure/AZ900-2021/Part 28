                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 28



Connect to Azure Virtual Machines (Cont)
  - What we do see is an IP address that's been assigned based on the subnet address range that we deployed the virtual machine into
    - That's it, we are now able to get into our Windows virtual machine
    - That's fine for Windows, but what about Linux? 
    - Back in the portal, I've gone back to my Virtual machines view and we can see our Linux virtual machine now has a status of Running
    - Click on it so that we can see its public IP address.
  - Now we need to use an SSH client of some kind
    - If you're using a Linux machine already, you can use the SSH command line to connect to your Azure Linux virtual machine
    - Or if using Windows, I could also use the free PuTTY tool
    - I've downloaded and installed the free PuTTY tool
    - When I fire it up, I can paste in the public IP address from my Linux VM running in Azure, along with Port 22, which is used by SSH.
    - That can be loaded up at any point in time.
    - To make the SSH connection, click Open.
    - It's trying to make the connection, but remember with the Windows virtual machine there was no default inbound port enabled? 
    - That's the problem here. Let's go back and let's explore that here in the Linux virtual machine in Azure.
  - Go to networking and again, we can see our inbound ports
    - There's no allowance here for port 22, so I'm going to click Add inbound port, and specify a destination port of 22, so TCP 22 for SSH allow.
  - Change the name here to reflect the port number, and click Add, see the rules at the top
    - It's allow rule, so it should allow our traffic in.
    - Let's go back and test it out. So back here in PuTTY, let's try again.
    - Click Open and this time we get something immediately.
    - It should ask do we trust the unique fingerprint for the server, because it's the first time we've connected
    - Choose Yes, and it wants me to log in, the credentials were specified when I deployed this
    - We're using username and password authentication as opposed to public key authentication, which is a choice when you deploy a Linux virtual machine.
  - It now wants the password for this account, go ahead and supply that
    - After I've done that, if the credentials are correct, we will be logged into the virtual machine remotely over the Internet
    - We can see in fact, that's been done, and if I do an ifconfig to show the interface, we can see not the public IP
    - Just like with Windows, but rather the private IP
    - Which is derived from the address range assigned to the subnet that this Azure virtual machine was deployed into.


Azure Virtual Machine PowerShell Management
  - Using PowerShell to create a new Azure virtual machine
    - Here in the PowerShell ISE, I've already got a script ready to go
    - In the first line of the script, it's actually lines 1 and 2 but I've got the back tick symbol here as the line continuation character
    - I've got a statement using a PowerShell cmdlet called Get-AzVMImage.
  - This is important because we can specify the image name that we want to build the new virtual machine from
    - Go ahead and highlight that first set of code for Get-AzVMImage. And I'm going to go ahead and run that selection.
    - Below, we can see some of the images that are available here based on Microsoft Windows Server.
  - We can see here that the SKU names are listed in the list, comment those back out in my script and clear the screen down at the bottom.
  - To actually work with a virtual machine. To build it through PowerShell, the first thing is building a variable here called $creds for credentials
    - We're using the PowerShell Get-Credential cmdlet, which will pop up a graphical dialog box where I can specify both a username and a password
    - That's going to be stored in the $creds variable
  - Creating a variable called vmconfig. And I'm setting the resource group that I want to deploy this virtual machine into
    - Set the name of the virtual machine, the location, the image I want to create the virtual machine from, in this case Win2016Datacenter
    - Also give a name for the public IP address resource. Here's the $creds I'm passing for the credential
    - Then and open port 3389,  what these all are in the vmconfig section here, ResourceGroupName, Name, Location, ImageName
  - These are parameters, we could just as well use dash in front of each of these parameter names, and then pass the values
    - All being done here is organizing it into a single resource or a single variable rather called $vmconfig that I simply refer to here
    - Pass it to the appropriate cmdlet, the appropriate cmdlet here is New-AzVM to build a virtual machine
    - Based on the configuration defined above, the parameters, and their values
    - Go ahead and run this entire script by clicking the Run Script button.
    - Sure enough, it pops-up and it says, new VM username and password, that comes from -Message up above
    - After we have specified those credentials, click OK
    - It's going to go ahead and create my virtual machine based on the settings defined here in PowerShell.
    - Once the script completes, switch over to the Azure portal to check for our new virtual machine, vm33452.
  - In the portal, if I go to the Virtual machines view
    - We can see our new virtual machine listed, and it's running
    - By default, when you deploy a virtual machine, even through PowerShell, its state is set to Running


Azure Virtual Machine Scale Sets
  - Microsoft Azure virtual machine scale sets are used for load balancing
    - Where we have a series of identical virtual machines working together to serve up some kind of an application
    - It also supports auto-scaling, for example, depending on the demand
    - We can increase the number of backend virtual machines supporting the application through the scale set.
  - So we can control this through the instance count property
    - This is the number of instances that are running in the scale set, and we can even set that to a minimum value
  - So that connection goes to the load balancer
    - If the client is typing in www.app.com, that is resolving to the public IP address of our load balancer
    - That's how the request gets from the client to the load balancer.
  - The load balancer periodically checks that the backend virtual machines, of which we have three here, listed on the far right
    - It periodically checks to make sure that they are responsive
    - Because if we have a virtual machine that is not responsive, then client requests are not forwarded to it
    - Otherwise, we have three virtual machines in the backend in our scale set
    - It increases performance while providing high availability
    - If we have virtual machines in the backend that aren't running, then client requests are simply directed to other ones that are still responsive
    - We manage our scale sets using the Azure portal.
  - We can use the Azure CLI, for example, you can use the az vmss virtual machine scale set create command to create one
    - In PowerShell, the equivalent to create a new virtual machine scale set would be New-AzVmss
    - Finally, we can also use an ARM template, where we can specify our resource type of Microsoft.Compute/VirtualMachineScalesets.


Deploy an Azure Virtual Machine Scale Set
  - In this demonstration, I will use the Azure portal to deploy a new Azure Virtual Machine Scale Set
    - To get started, I'm going to click Create a resource over on the left
    - Search for the word scale, here it is, Virtual machine scale set, choose that, and then click Create.
  - The purpose of creating this virtual machine scale set is to make sure that we have a number of identical backend virtual machines supporting an application
    - Basically, we're going to have a frontend load balancer that supports this capability.
  - We need a name for my virtual machine scale set
    - Call it webapp3 and vmss, virtual machine scale set
    - Because the backend virtual machines all need to be identical, when you define the scale set, which we're doing
    - You need to choose the Operating system disk image
  - Say it's going to be Windows Server 2016 Datacenter
    - You could also have some kind of a custom image that has an application loaded within it
    - Next thing I'm going do here is deploy it to a resource group, and specify the location, and down below I need to specify credentials
    - Username and password, in this case, for the Windows operating system since that's the image I selected for my scale set
    - Notice this is different than if you create an Azure load balancer, which we'll see in another demo.
