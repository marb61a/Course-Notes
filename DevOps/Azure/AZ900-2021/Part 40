                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 40


Deploy Azure Cognitive Services
  - To get started here in the portal in the upper left, click Create a resource
    - Search for C-O-G, for cog, and we can see Cognitive Services listed, so go ahead and search that
    - The next thing is to then choose Create
    - We need a name for this, so for the example we are goint to call this cogservice1
    - Deploy this into a location that makes sense, that's nearest to us geographically where we'll be accessing it
    - We are then going to choose the only available pricing tier, and deploy this into an existing storage group
  - Notice that we have to check off this confirmation about Microsoft using data that we send to Bing Search Services, if we talk to Bing-related APIs
    - So go ahead and do that, and just go ahead and create this resource
    - Once it's completed, it'll show up like any other resource does, go to All resources and filter with a prefix of cog, there's cogservice1
    - Click on and open it up, the first thing that's going to be important is the Keys in the Properties blade.
    - We have two Keys here, and you can regenerate one or the other
    - You have two so that you can keep one in use for a while as you regenerate the other and over time, vice versa
  - There is more security achieved by rotating keys periodically instead of sticking with the exact same keys
    - But when developers are making API calls, they're going to need access to one of these keys
    - Then if we go to Quick start in the Properties blade.
    - We can also see reference documentation links for making API calls to the API of the developers choosing
    - Whether it's the face API reference for facial recognition or whether it's translator text API references
  - When we click on any one of these, for example we choose the face API reference
    - That's going to open up a new web browser where we can see the regions in which that specific API is available through Cognitive Services
    - Then we can see the API definition can then be downloaded either as a Swagger or a WADL file
    - The developers can use to learn about how to hook in to the API.
    - As we go further down it has more of an explanation about how this works and how to formulate the request URL


Azure Machine Learning Studio
  - You can use the Azure portal to create an Azure Machine Learning Studio workspace. 
    - The purpose of Machine Learning Studio, it being a web-based tool, is essentially data analysis, but it runs deeper than that. 
    - Always bear in mind that the source data that we use, that we're going to analyze needs to be trustworthy, and it needs to be accurate.
  - Although we do have some built-in functions that allow us to manipulate data, in other words, to transform the data
    - It's also important to note that there are sample data sets that we can use to learn how to use the Machine Learning Studio interface. 
      - Of course, we can also import our own data sets.
  - The purpose of machine learning in this context is to take vast amounts of data
    - And based on the factors that we define as being relevant and the training model that we apply to that data
    - We can then predict future trends or some kind of outcome as it might relate to financial credit risks
    - Or, as another example, the most likely income to be expected based on marital status, education, city
    - Many other potential factors, whatever happens to be in your data set that you specify as being relevant
    - It might even relate to the healthcare side of things, such as heart disease prediction, given a number of factors
    - The process of working with a data experiment in Azure Machine Learning Studio begins with working with data
    - Whether it's sample data that's provided, or whether you import your own custom data
    - Bear in mind that there are also plenty of pre-defined templates
  - There's a gallery that you can select from, that you can open up directly into Machine Learning Studio
    - So that you can begin working with these items and start to learn how to use the tool
    - The next thing to do once you've acquired data, or you decide you're going to use sample data
    - Is to start applying functions such as maybe to transform the data into a specific manner
    - Or maybe to exclude data that is not relevant, perhaps values that fall below a certain range
  - You can also then apply learning algorithms based on what it is you're looking for in terms of an outcome
    - Finally, the last thing you would do is to run the data experiment and then visualize the outputs
  - What you end up getting in the middle is a blank canvas
    - Then you can start dragging items from the left, such as data sets and you can add them into the canvas
    - You can also then expand things like functions to manipulate your data
    - In this screenshot, the Data Transformation category has been opened up and the Clip Values item has been dragged over.
  - Now, when you drag something over and select it on the far right in the panel, you'll see details related to what's selected
    - In this case, for clipping peak values of a specific piece of data. 
    - Once you've done this, in the left hand-side of the screen in the navigator, you'll also be able to select different types of training models
    - And at the very bottom center, you'll have a Run Experiment button that you can use to actually run your experiment 
    - Which will then end up with some kind of predictive analysis as an outcome


Azure Firewall
  - The Azure Firewall is a managed service that, as the name implies, is used to control inbound and outbound traffic to and from Microsoft Azure
    - It is set to block everything by default
    - Besides controlling in and outbound traffic to and from Azure, it gets associated with one or more subnets within an Azure VNet.
  - We can even use other VNets besides the one where we deployed the Azure Firewall that connect in a hub and spoke fashion
    - When you deploy the Azure Firewall, you need to have a subnet called AzureFirewallSubnet within the VNet that you're deploying Azure Firewall into
    - You don't have to worry about having that done ahead of time
    - You can have it done ahead of time, or you can do that as you deploy the Azure Firewall
  - The Azure Firewall has a static public IP address
    - This is unlike a network security group, or NSG, which can also be used in Azure to control in and outbound network traffic
    - Because the Azure Firewall has a static public IP address, then you could use that in conjunction with other firewalls elsewhere as a source
    - Perhaps as a trusted location to receive traffic from
  - Also we use rules of different types that we'll talk about to control the traffic flow
    - Again, something that makes the Azure Firewall different than a standard Azure network security group 
    - Is that in an outbound direction it supports rules related to fully qualified domain names
    - If I want to specifically allow a certain subset of URLs within a DNS domain, I can do that using the Azure Firewall
  - The Azure Firewall also includes some threat intelligence capabilities that can not only alert on potential threats 
    - But also start denying traffic based on what's currently happening
    - Azure Firewall supports three different types of rules
    - One of which is called a NAT Rule to allow inbound access to resources deployed in Azure
    - Either traffic stemming from your on-premises network or from somewhere else on the Internet
  - This is supported through TCP and UDP transport protocols
    - It's referred to as Destination Network Address Translation, or DNAT
    - Where we've got a public IP address and port that is configured to map to an internal or private IP address import 
    - To allow traffic initiated from the outside in to Microsoft Azure
    - Each of the rules that we create within a collection has a priority value that determines the order of rule execution
    - Once there's a match with a rule then processing stops after that
  - As mentioned, rules get placed into what's called a collection, so you can have more than one rule grouped together
    - For example, for Destination Network Address Translation, or DNAT
  - Further on the right, there is the translated address and port which are what are used internally
    - Remember we've got a public IP address and port mapping to private IP address and port.
  - Next, we've got Azure Firewall network rules, which support TCP, UDP, ICMP, as well as any type of protocol
    - Where we can specify the source and destination IP address, the destination port
    - And this is what you would normally use to allow communication or to control traffic flow between subnets
    - It allows us to either configure an action of allowing the traffic or denying it
  - Azure Firewall application rules are for outbound connectivity, which means from within Azure going out
    - So we can specify Fully Qualified Domian Names, or FQDNs, including using wildcards
    - We could specify star or asterisk dot somednsdomain.com or we can simply refer to everything with an asterisk
    - And we can specify the protocol and port, such as HTTPS:443, and we can either allow or deny
  - Bear in mind that the default configuration with Azure Firewall is things are denied
    - If you want to allow specific access, if you want to make a white list of FQDNs, then you can certainly do that very easily
    - The last thing to mention is that you'll also need to build a route table Azure object 
    - That has the default route for a subnet going through the Azure firewall's private IP address 
    - For an outbound direction in the case of configuring application rules

