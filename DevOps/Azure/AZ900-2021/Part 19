                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 19


Configure Azure Application Gateway
  - The Azure application gateway takes incoming client requests for an application and forwards it off to a backend server that can host that request.
  - That might sound like a load balancer, and it is a load-balancing solution
    - What makes the application gateway different than a traditional load balancer is that beyond just looking at IP addresses and port numbers
    - The application gateway can look at the incoming URL request.
  - It can make a routing decision to a backend virtual machine based on that
    - So if a client requests something in the URL that includes /jpg images
    - That can be forwarded to a backend host that's been optimized to serve up that kind of content. 
    - To get started in the portal by click Create a resource.
  - Start by deploying two virtual machines that are going to be running Windows Server 2016 Data Center.
    - The key here is I want two virtual machines deployed into their own specific virtual network and subnet.
  - These virtual machines will be used as our backend pool for our application gateway
    - Tie this to a resource group and call it something appropriate for the naming scheme being used eg webapp1vm1.
  - Copy that as a help to make a second one afterwards, where the only difference is going to be vm2 instead of vm1
    - Put this in the location you are using.
    - Scroll down and specify the username and password information.
  - Then for inbound port rules, allow incoming RDP on port 3389 for management
    - Port 80 or 443 do not have to be enabled, because these will be running in the backend pool and they don't need to be publicly accessible.
    - So I'm going to go ahead and click Next.
    - Disks as fine as-is but we are interested in the Networking.
    - Create a new VNet called webapp172Vnet.
  - Specify the address range I want to use for that, which would have been planned ahead of time, that's for the VNet
    - Make a subnet here called Subnet1 and we'll configure a range for the subnet that falls within what is being used here in the VNet.
    - Just make sure we're using CIDR notation here, with the slash for the number of bits in the subnet mask.
    - Go ahead and click OK and that is now configured and then click Review and create.
    - Once the validation passes click the Create button.
  - While that's happening go ahead and deploy a second virtual machine, everything will be the same except the name will end in vm2 instead of vm1.
    - If you've got existing virtual machines hosting your app, you can use those
    - This process is when deploying them from scratch here
    - And of course, what you would do is install
    - In this case, the IIS web server and any other components within each virtual machine that you need to support your web application
    - The next thing is to actually deploy the application gateway, so click Create a resource, and type in application gateway.
    - Select it from the list, and then choose Create.
    - Call this example webapp172appgw, for app gateway.
  - If I leave it on the Standard tier, I can see the SKU sizes available are Small, Medium, and Large
    - These relate to the amount of throughput that can be handled by the application gateway
    - If I were to choose a Web Application Firewall tier, then all I have are Medium and Large available as sizing.
    - So I'm going to choose Medium.
    - Leave it at 2 for Instance count, and I'll pop this into an existing resource group.
    - And the same location where I've deployed my virtual machines in their own VNets, so click OK
    - For the virtual network on the next page, choose an existing virtual network.
    - The webapp172Vnet that we created is unavailable because we need another empty subnet as indicated here by the information screen.
    - No problem. So I've opened up another web browser window where I've navigated to Virtual networks.
    - Open up that virtual network and I'm going to click Subnets, and add a new Subnet.
    - This can be called Subnet2.
    - For the address range use 10.1.2.0/24 for bits in subnet mask, OK that to add a second subnet.
  - Now when I go to select the virtual network, and you might have to close this screen of the wizard and go back one step and come back in, which I've done.
    - I can now select that virtual network and it's got Subnet2, select it.
  - This is going to be a public facing application gateway, so leave the IP address type as Public
    - As opposed to Private for an internal line of business app, for example
    - Let it create a new public IP address, and I'm going to accept all the defaults here for HTTP port 80, and I'll click OK.
    - Then click OK on the Summary screen.
    - We can now see our application gateway is being deployed, but we're not finished configuring it yet. 
    - We have to link our backend virtual machines to the backend pool for the gateway.
    - So now go to the All resources view, and filter it for web
    - We can see that we've got a number of resources with that prefix such as our web application 172 app gateway
    - Click on it to pull up its Properties blade.
    - In the Properties blade scroll down to the Backend Pools, the backend pool is listed here.
    - However, from the dropdown list, you can choose virtual machines.
  - Go to select a virtual machine, the two virtual machines that were deployed in that virtual network that this application gateway is associated with are seen.
    - Choose the appropriate network interface for both of those virtual machines.
    - Now again, these would be configured with our web application.
    - Click Save to save that backend pool configuration.
  - We can also click on Web application firewall in the Properties blade to ensure that the Web application firewall is enabled. 
    - If we go to Rules, we can see the ruleset that's being used.
  - If you really want to, you can enable Advanced rule configuration to determine exactly which type of web application firewall rules that you want enabled.
  - Do not worry about making a change there at this point
    - If we go to Rules, we also have the option of configuring additional path-based rules to look at incoming URLs for routing purposes
    - That would require creating a front-end listener as well.
  - We can click Health probes to determine the configuration for how often we're going to check backend servers to make sure that they are responsive.


Content Delivery Networks (CDNs)
  - A Content Delivery Network or CDN is a strategy that we can employ in Azure to make sure that content is available to users locally. 
    - The overall goal then is to speed up the user experience when content is delivered to them
    - Whether it's basic standard website files, graphic images, audio-video media, whether it's streaming or not
    - We want to make sure that gets to end-users as quickly as possible. 
    - That can be done with a CDN because the Azure content delivery network has geographical point of presence servers in Azure regions all over the world.
  - We can create configurations in Azure to specify details about what should be cached 
    - Also for how long on these geographical point of presence servers in different parts of the world. 
    - The idea is that users that request content in one region should get that content served within the same region 
      - Instead of having to retrieve it across multiple regions which will slow down the end-user experience.
  - The Content Delivery Network process begins with the user requesting content via a URL. 
    - Now that URL is then sent to a content delivery network point of presence server
    - We will have configured data caching, or the client might have sent HTTP headers that have TTLs related to caching content and how long it should stay there. 
    - Otherwise, by default, content that gets cached sits on the CDN servers for seven days.
  - Now, in the event that a user makes a request for content that is not cached already
    - Then the CDN server will make the request to the origin server, which in turn will feed the content back to the user through the content delivery network. 
    - There are a number of features to be aware of that you might want to configure while you're configuring your Azure content delivery network settings
      - One of which is geo-filtering.
  - Geo-filtering lets you specify the type of content that should be cacheable based on the country of the origin request. 
    - Content compression allows us to enable compression for files so that they are more quickly delivered throughout the CDN
    - We could potentially incur lesser bandwidth charges since we're sending less data. 
    - Caching rules can be used to specify exactly how data gets cached and for how long.
  - There are a couple of different types of caching rules that you can configure, that we'll see when we configure a demo. 
    - Whether we're talking about just generic mobile caching rules or query string caching rules based on incoming query strings with HTTP requests. 
    - There's also a site acceleration option where you can configure this as you add endpoints to your CDN configuration to speed up access to content. 
    - Finally, you can also use HTTPS custom domain names to map more to your organizational presence on the Internet 
      - This is done using your fully qualified domain name in your configuration.

