                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 15


Retrieve Secrets from the Azure Key Vault
  - Once you've created an Azure Key Vault and populated it with secrets, how do you gain access to them?
    - Start by looking at how to do that here in the Azure portal where I'll go to the All resources view on the left.
  - Find the key vault I'm interested in, then open up the properties blade for that key vault
  - This can for instance be seen on the left, I've got keys, secrets and certificates
  - Go to secrets, because I know I've got one here called Secret1.
    - If I keep clicking on that secret, I'll get to the point where I can click the Show Secret Value button to expose the secret key
    - That's how we can gain access to that secret using the portal.
  - What about through the command line? Let's start by taking a look at PowerShell
    - In PowerShell I can use the get-az, for Azure, keyvaultsecret cmdlet
    - Then it needs the name of the vault, so -vaultname in this case is kv1989 as seen in the example
    - Then give it the name with a secret within that vault that is of interest
    - There is one and we know it's called secret mode, we just looked at it in the portal. 
      - So -name secret1, this is a problem as there is a need to call on a property that will result from this command executing called secret value text
      - Separate an object reference from its property using a dot.
  - However, we've got a problem here because if I press Enter, it's not going to really know what to do
    - That's because PowerShell is trying to treat secret1.secretvaluetext as the value of the name parameter
    - That's not what is wanted, what is wanted is to separate secretvaluetext from everything else
    - Use the Up Arrow key to bring up that command and the solution here which is a PowerShell thing
    - Is simply to enclose what you actually want to treat as a single statement so the PowerShell commandlet and its parameters, enclose it in parentheses. 
    - This is better, and so .secretvaluetext is a property reference outside of that, that's going to work
    - Press Enter, it returned the secret value here which is mydoghasfleas.
  - Take a look at how to do the same thing but in the Azure CLI
    - Just like with PowerShell, in the Azure CLI, I have to have connected and authenticated to my Azure account, which is already done. 
    - It was done in Powershell, it's also done here in the CLI
    - Run az keyvault secret show, there's a space between secret and show and keyvault, of course. --name, what is it called? 
    - Secret1 is the name of the example secret, the name of the vault? --vault -name, and it's called kv1989
    - Press Enter and then after a moment we can see the value here of that secret
    
                    
Software Defined Networking
  - If you have previous IT networking experience, then you've probably configured routers or switches or other types of network appliances
    - Some using a command line interface and perhaps other using a GUI tool. 
    - Software defined networking, otherwise called SDN, is common in cloud computing 
    - In that it hides the underlying technical complexities of configuring network items
    - Often, that means it's easy for us as cloud users to configure these types of network components using a GUI interface or even command line tools.
  - With software defined networking, we've got physical network management that is done through a virtual type of graphical interface
    - We have either the GUI or even CLI commands, which could come in the form of the Azure CLI or Azure PowerShell cmdlets
    - Both of course, are accessible through the Azure portal by going into the Azure cloud shell.
  - Whether you're using command line or GUI tools in Azure to configure network settings
    - In the end, it's still considered software defined networking
    - Where it can be making changes to underline physical network equipment like routers, switches, and a variety of different types of gateways.
  - In the midst of creating a new resource and the networking category has been selected over on the left.
    - Look at some of the things over on the right
    - We can define a virtual network, on-premises that would be like configuring a new VLAN
    - Maybe in a switch or acquiring a new entire physical switch and connecting it to the network
    - We can have devices deployed on that particular network, except, here in the Azure cloud
      - Where we are all doing it through a software interface, in this case, a GUI interface in the Azure portal.
  - The same is true if we were to start configuring a load balancer
    - To distribute incoming traffic to backend nodes or configuring a virtual network gateway for VPN connectivity
    - All of these things in the end have to have some kind of underlying configuration at the network level, within an Azure data center
    - Those complexities are hidden from us, the cloud users, through software defined networking.


Azure Virtual Networks
  - Azure Virtual Networks or VNets are network definitions that we create within the Azure cloud
    - We would do this for the same reasons that we would define a new network physically on-premises
    - Because we want to have a separate isolated part of the network where we deploy certain services, whether it's file servers, or DNS servers, or client stations
  - We would do it for the same types of reasons in the cloud, and this falls under the category of software defined networking or SDN
    - Where the actual underlying technical complexities in making this happen at the data center level are hidden from us
    - Instead, we have easy-to-use command line tools or graphical interfaces such as through the Azure portal, through which we can configure these things.
  - The management is varied, using the GUI or command line tools
    - When you deploy an Azure virtual network, there are some things to consider, one of which is the location or the Azure region where you are creating it
    - That could have an impact because you want to try to place that closest to where the use of resources that you will deploy into that VNet will be accessed from
  - For instance, if you know that you're going to have some virtual machines accessed by client devices in the American western seaboard area
    - Then you should probably create the VNet that will host those resources in the West US region
    - Then it is time to plan out our IPv4 CIDR notation where we've got to think about the IP address range or ranges that we want to use within our virtual network
  - Bear in mind, a virtual network contains subnets as we see here listed in the bottom left
    - Each subnet takes an IP address range that is derived from the parent IP address range assigned to the virtual network
    - There's a hierarchy where subnets fall under virtual networks
    - We also have to think about whether we're going to be deploying firewall and/or DDoS protection in that VNet or any of its subnets. 
    - Firewall protection controls traffic flow either in or out of VNet subnets but distributed denial of service attacks can be subscribed to as an Azure service.
  - See at the top, we have to specify a unique name, followed by which we must specify an address space in CIDR notation
    - This is something that needs to be planned ahead of time as it would be if we were creating a brand new network on-premises
    - In the portal, we are also creating a new subnet while we are creating the VNet nd that the subnet IP address falls within the parent VNet range.
  - We can use Azure virtual networks then to isolate deployed Azure resources
    - A VNet, in a loose way, is similar to a security boundary when it comes to network transmissions
    - We can also link VNets to other VNets in Azure; this is called peering and these VNets can even be in a different Azure subscription
    - VNets can also be used to link to an on-premises network, so you can essentially extend your on-premises network into the Azure cloud.
  - The DNS configuration can be customised for VNet
    - By default, it uses Azure supplied DNS for name resolution
    - Depending on the services and workloads that you're deploying in the VNet, you might need your own custom DNS name resolution
    - You could opt to configure addresses for your own custom DNS servers instead of using Azure provided DNS.
  - For resources that we deploy within Azure, we can determine whether we want them to stick with private IP addresses
    - They are not directly reachable, for example, from the Internet versus those that should have public IP addresses
    - You might have a public IP address assigned to a host in a subnet, so you can get into it from across the Internet
    - From there, you might further be able to get access to other internal hosts using their internal IP addresses.
  - That's really a definition of a jumpbox that IT administrators would use
    - We know that Azure virtual subnets are created within an Azure VNet, and you can have more than one subnet within the VNet
    - Each subnet is assigned a network security group, an NSG, which is used to control in and outbound network traffic
    - Also, each subnet is assigned a routing table to control network traffic flow.
  - There might be a need to modify this, for instance if you have a firewall appoints that are deployed as a virtual machine
    - That you want all traffic to go through first to be inspected, either on its way in or on its way out of your Azure VNet
    - The subnet IP address range, remember, must fall within the parent VNet range.
  - It's important to have planned the IP addressing that will be used ahead of time
    - You can also go back into a subnet and change IP address ranges at any time
    - For example, if you decide you wanted to find a new subnet or a new range within a subnet, you can go ahead and do that
      - Using either the Azure portal or command line tools.
