                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 30


Deploy an HTML Azure App Service
  - In the Azure portal, I'm going to start in the upper left by clicking Create a resource and then under the Web category choose Web App
  - I'm going to call this web app webapptest172
    - Notice it that's going to be part of the url, because it's going to add .azurewebsites.net as a DNS domain name suffix
    - Although I can configure custom DNS domain names if I wish.
  - Stick with that one, and put this in an existing resource group
    - Although you could build a brand new resource group into which you deploy all of the items that will be related to this web application
  - We can choose either Windows or Linux for the backend operating system hosting my application, my web app
    - Leave it as just code, as opposed to using a darker image to run the app.
    - Then deal with the service plan. And I'm going to click on Service plan and we're going to create a new one.
    - Call this testwebapp172_ or dash rather, serviceplan for example
  - The next thing to do is specify the location, and notice that in this service plan for the app
    - This is where I can specify the pricing tier or the sizing for the underlying virtual machine or machines that will support my app.
  - So choose the Dev / Test category, choose this F1 pricing tier, where there is 1 gigabyte of memory and click Apply then click OK
  - We can now see that that app service plan is now tied to this web application, go ahead and click Create to build the web app
    - After a moment, over on the left, go to App Services, see that my application now exists and that its status is listed as Running.
  - Otherwise we can keep clicking Refresh up at the top until it is seen
    - We can always look up my alerts until I see that the deployment succeeded for this specific resource.
    - So I'm going to go ahead and click on my web app, and in the overview panel, what I'm interested in to start with is the URL.
    - Notice the URL here is comprised of the name of the resource with .azurewebsites.net which we saw while we were creating it, copy that
  - We're going to open up that website in a new web browser window
    - What I can expect to see by default is an Azure page that says, Your App Service app is up and running.
  - Go back to the Azure portal, indeed, we can see that is the URL, and indeed everything is working
    - Scroll down, we also have a lot of configuration settings for our web applications
    - So to Application settings, we can determine the language support in the back end
    - For example, the version of PHP, which can matter, depending on what kind of functionality you're writing into your PHP scripts.
  - Also, we can see the .NET Framework version, Python and Java, if we're going to be using those
    - There are a number of options here that we can configure for our specific application
    - Go further down on the application settings page, I can also see the default documents
    - These are the documents that will be pulled up when the URL is connected to.
    - Such as Default.htm or, what we're going to be interested in in a moment, index.php
    - Scroll further and further down, we can also specify custom domain names
    - In this particular case, we'd have to upgrade the app service plan type in order to do that, but we can do it.
  - What to do then is to take an existing on-premises PHP file we've created
    - We're going to upload it here to our web app and make sure that it takes effect
    - The sample PHP file on-premises, it really just comes back and says, sample PHP page hosted in Azure
    - And sets the title in the browser to My Azure Web App.
    - Save this file locally on-premises and then upload it to the site, and I'm going to do that through FTP
  - Back in the portal, we are still looking at the properties blade for the web application
    - Scroll back up and choose Overview and then from here, we can see the FTP hostname, which is important
    - But what we want to do is to get the publishing profile
    - This is going to provide the credentials, not just the FTP username, but also the FTP password
    - Go ahead and download the publishing profile, once that's been downloaded click to open it up.
    - What we are interested in primarily is the username here listed and also the user password for FTP.
    - We should have downloaded and installed the free FileZilla FTP GUI tool, the first thing you need here is the host.
  - Back in the portal, on the Overview part of the Properties blade, go ahead and copy the FTP hostname and paste that into FileZilla.
    - Next, go to the publishing profile that was downloaded and copy the FTP username and password
    - Then paste them into the appropriate fields here in FileZilla
    - Once done click Quickconnect, after a moment, we can see on the right, under the Remote site section
    - We have access to our web application, but in the underlying file system through FTP
    - Go to wwwroot, the root of the website, we've got the default Azure placed hostingstart.html file.
But what I want to put there is my index.php. So that is available on my local machine under samplefiles, which I'll choose on the left.
    - There's index.php, so I'm just going to drag that over and drop it so that it shows up into the wwwroot folder for my site.
    - Here in a browser, we've still got the URL for my site, but if the page is refreshed 
    - We should be now seeing that it's picking up the Sample PHP page that was uploaded.
  - You can use other tools to manage the content and the code for your website, such as Visual Studio
    - You might run that on-premises, so that you can work with your code and then push it up into the cloud into your Azure web application.


Azure Functions
  - Azure Functions fall under the classification of serverless computing
    - These allow developers in the cloud to create and run code
    - So the fees that are charged are based only on when that code is actually running
    - With Azure Functions, developers don't have to worry about deploying virtual machines and virtual networks
    - And taking care of all of that underlying infrastructure
    - Because this is a managed service, developers can focus more on the code and the applications that they need to think about and work on
    - Instead worrying about the supporting infrastructure.
  - This is really for software developers and as a software developer, you would be interested in knowing whether or not you can use the language of your choosing
    - The language that you're familiar with, with Azure Functions
    - There are a wide variety of languages that can be used, including PHP, Java, Node.js, C#, and F#
    - What happens is we have to think about what will trigger the functions to execute.
  - There are plenty of different types of triggers that can be defined for an Azure Function, such as a CosmosDBTrigger
    - This means that when data is either modified or placed into a Cosmos DB database, then the code can be triggered at that point in time
    - If users upload content to a storage account container, then the BlobTrigger would kick in, and we could have it execute an Azure Function of our choosing.
  - You might do that to further organize uploaded files, or to do something specific to them
    - Such as maybe adding a watermark to a video image that's uploaded or to a graphic file image
    - The HTTPTrigger, as the name implies, gets triggered based on a specific type of HTTP request
    - When that is triggered, we can define which Azure Function runs
    - There's also a QueueTrigger, which is based on messages coming into an Azure storage queue that developers could query
    - When that occurs, an Azure Function could run.
  - Azure Functions, because we're talking about development here, can be defined in a number of different places, such as through the Azure portal
    - Or you might use a tool that you're familiar with, such as Visual Studio
    - You might use the Azure CLI to work with functions
    - Of course, you might use specific language tools related to languages such as Java and Python.


Azure App Event Grid
  - The purpose of Event Grid is it lets developers configure certain triggers by events such as making a change to an Azure resource
    - That can then connect to some kind of endpoint or hook into some other aspect of an application for notifications
    - In our particular case, we're simply going to set it up such that when a change is written to an Azure virtual machine, we want to be notified via email.
  - The first thing we'll do here, to get started is to create a Logic App
    - In the Azure portal, click Create a resource over on the left
    - Type in the word logic and then from the results choose Logic App.
    - Click on Create so we can get to the point where we start configuring this resource
    - After specifying a name, for this example call it vmchange_logicapp
    - And in this case, put it into an existing resource group and specify the location, after having done that to click on Create.
    - fter a moment, go to All Resources view and type in logic, then we could see our Logic App listed.
