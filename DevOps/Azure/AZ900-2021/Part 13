                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 13


Azure Blob Storage PowerShell Management
  - We can manage Azure Storage accounts using Windows PowerShell cmdlets, either in the Azure Cloud Shell, which is accessible in the portal
    - Or in an example on-premises where I've already downloaded and installed Azure PowerShell
    - This has already run the connect-az account cmdlets to connect to my Azure account.
  - To build a storage account, I'm going to run a new-azstorage account cmdlet. 
    - What needs to be specified is the resource group name into which I want this deployed. 
    - In the example -resourcegroupname, in this case rg1, which is already got it created. 
      - -name for the storage account, in this case will be stor, let's say, 1989, following naming conventions of my organization. 
      - -location, that's the Azure geographical region, is going to be your region. 
      - The -skuname, for replication purposes here, will be standard locally-redundant storage, or lrs or in other words, within the Azure data center. 
      - Then go ahead and press Enter and see what happens.
      - What happened is our storage account was created
      - At this stage there is hard wiring everything like the name of the resource group and the name and the location. 
      - This is just an example but this may not be good practice in the real world
      - When you are scripting with PowerShell, with the CLI, you can get very fancy with this and use parameter values 
      - These might ask the user for when running a script, and so on.
  - To verify our work, we could use the portal, but instead, why don't we just run get-azstorageaccount. 
    - We should see our newly created one, stor1989, somewhere in the list, and here it is right here.
  - We know it's there, and we know that we're doing this correctly. Let's do more, because this is so much fun. 
    - We need to make a variable here called $ctx, for context
    - The idea here is I can attach a context to PowerShell commands that work with a storage account. 
    - So then I don't have to always repeat the storage account name and stuff like that.
  - Create this variable $ctx, it can be called anything
    - It will contain, or =, the result of running get-azstorageaccount and -r rg1, 
    - That is the resource group into which my newly created storage account was deployed. And the name of it, if you recall, was stor1989.
  - Make a reference to that storage account, and it's going to be referenced through the $ctx variable. 
    - If I were to type $ctx, I can see that it's returning back information about that account, if I run $ctx.context, it gives me endpoint
    - Or connection information, and that's really what is needed here
  - What I want to do here, really, is I want to create a container in my storage account 
    - Use the new-azStoragecontainer command and then -name, 
    - Use -context and just give it my variable something like $ctx, because it is a variable.
  - If that is put in, it doesn't really know what I'm talking about
    - If I bring up the arrow key, I want to reference the context property of the storage account, so .context.
  - If you spell things incorrectly it's never going to work. 
      - Go back to our original version to demonstrate here. 
  - That's what we really wanted to see, if we reference the context property of our variable it shows that it created our pics folder.
  - Get some content up there. If I change directory into the sample files folder created for the example
    - I've got a picture of a dog, and the file's called img.jpg.
  - Do ahead and upload that to the pics container in my newly created storage account. 
    - To do that, I'm going to run the set-azstorage, spell storage correctly this time, blobcontent. 
    - Then -file is going to be c:\samplefiles. 
    - There are no spaces here around my file name or within my file name, I should say, or within my folder name
    - I don't have to put this in quotes because of that reason. 
    - Now tell the container I want that to go in, so -container, which in this case is pics
    - What do you want to call the blob? Well, I want to call it img.jpg, although it could have a different name. 
    - Once again -context, when this time we know what we're going to do
    - This going to be our variable ctx, which points to our storage account and then call upon the .context property of that storage account.
  - We can see it looks like it's in the midst of uploading our jpg.
    - Once that completes, we'll just double-check our work by flipping over to the portal, I guess we'll do that right now.
  - Here in the portal, in the Storage accounts view, indeed, there's the stor1989 storage account. 
    - If I click it, and if we scroll down to the Properties blade and then
    - Click on Blobs on the left, we can see pics on the right.
    - Within it, we should see imgg.jpg.


Azure Files
  - If you've performed IT network administrator duties over the years, you've probably at some point shared a folder on a computer
    - Then connected to it from other computers.
  - That's exactly what's going to happen here with Azure files, except that the shared folder's hosted in the Cloud. 
    - It's a cloud-based file share that allows access over the SMB protocol, Server Message Block. 
    - Which is really what is used with Windows file and print sharing. 
    - You can mount these shares in the Azure Cloud from virtual machines running in the cloud. 
    - Or you can do it from on-premises machines and reach into Azure to get to that shared folder, assuming that firewall rules allow that.
  - The client devices might be running a Windows operating system, the Mac OS, or even a Linux variant. 
    - As long as it supports SMB, it doesn't matter. That also includes apps on smartphones
    - For example say you've got an Android smartphone, you could install an app that supports SMB and map a drive into the Azure Cloud to do this
    - To manage Azure files, we can use the Azure Portal GUI. 
    -We can also manage and work with Azure file shares using the Azure CLI, and also, using Azure PowerShell cmdlets.
  - In order to work with Azure files, what do you need? First, you need a storage account in Azure. 
    - Within the storage account you can then configure your Azure file share
    - You have to give it a share name and a quota, which is really just a size limit. 
    - Remember, access from SMB, the Server Message Block protocol needs access to TCP port 445
    - Depending on where the clients are coming from that need to map to this or mount this shared folder. 
    - You're going to have to make firewall provisions to allow this to happen.
  - From Windows, we might map a drive letter either using the GUI or the net use command. 
    - Like we would normally to map to a file server on-premises that has a shared folder. 
    - You can connect directly to the UNC path and even use a mount point path. 
    - Which really just means it's more like the Unix and Linux world. 
    - Where you've got a folder that you connect to that points to the other shared folder out in the Azure Cloud, as opposed to a drive letter.


Configure Azure File Storage
  - Use the Azure portal to configure Azure file storage. 
    - Remember, Azure file storage is really just defining a shared folder in the Azure cloud
    - This is much like you might designate a shared folder on a file server on-premises, the concept is the same
  - To get started the first thing you need is a Storage account, so let's first go to the Storage accounts view over on the left.
  - If you have a storage account use that one. Within the Properties blade for that storage account, I'm going to scroll all the way down until I see Files.
  - Click Files on the right, I can see I don't have any file shares yet.
    - Click the add File share button at the top and then give it a name for example shared_files
    - Notice if I put in an underscore, it doesn't like it. And 
    - Hover over the little red block with the white exclamation mark, it tells me the rules for naming this
    - Bear in mind that in Azure, unfortunately, the rules for naming resources are not 100% consistent
    - That's why the help is right in front of us, at least in the GUI.
  - Call this sharedfiles, and let's say for the for the Quota, maybe I'll set it to 4 gigabytes. 
    - Go ahead and create it, so I'm going to click Create.
    - Right away, we can see it's there, sharedfiles. And if I click on it, I can actually upload content to it.
