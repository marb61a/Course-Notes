                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 13


IoT Overview
  - The Internet of Things, otherwise called IoT, is really just a general umbrella term that refers to a large variety of devices that communicate over the Internet. Now that relates to Microsoft Azure in the sense that we can register devices with this central location in the Azure Cloud, and we can receive data from these IoT devices and monitor them through the Azure IoT Hub.But we'll talk to that effect later on in more detail. There were plenty of examples of IoT devices.
  - Things like water pressure valves and gauges and their current settings, baby monitors, smart cars that allow their details about their internal systems and their location to be made available over the Internet in a secured manner, medical equipment that can be controlled through the Internet, as well as home automation features, things like environmental control and turning on lights, and so on. This is just but a subset of examples of IoT types of devices that have Internet connectivity.
The thing to be careful of with this is with consumer grade IoT devices. Often, security is just not a priority. In many cases, you'll find that firmware might not even be updatable when there are security holes that are revealed about a specific type of consumer grade IoT product, like a home automation device. As with all security hardening in IT, when it comes to IoT devices we should always take care to make sure that default settings, like credentials to access a web interface on the IoT device are changed.
AlsoIoT devices should be placed on an isolated and secured network. The reason for this is because if an IoT device is compromised, we want to make it as difficult as possible for the attacker to connect to other devices on the network where the IoT device resides. So by putting it on its own protected network, we're adding that extra layer of security.
Pictured on the screen, we have an example of the Shodan website, which is essentially an IoT search engine, where we can search for items, as I have done here, such as home automation, and it will index any discovered devices that might appear to be vulnerable out there on the Internet.

[Video description begins] A screenshot of SHODAN website is displayed on the screen. On the left, there is a navigation pane. It has the following headers: Total Results, Platform, Type, and Author. At the top, there is a search box for Exploits. Home automation is entered in the search box. In the center pane, the following results display: keware technologies homeseer 1.4 - Directory Traversal, Schneider Electric SBO / AS - Multiple Vulnerabilities, etc. [Video description ends]

And so when we work with the Azure IoT services, we have a centralized way to securely receive this information from IoT devices. And from there, we might even feed that data into things like Azure machine learning, to determine if vulnerabilities might exist or if there's suspicious activity related to those IoT devices that needs to be addressed.


IoT Central
  - Azure IoT Central is an Azure managed service. This means the underlying complexities of setting up the infrastructure to support the IoT central service, whereby we can work with our IoT devices, those complexities are hidden from us so we can focus on actually doing what the service offers, which is to centrally manage IoT devices.So it is a separate Azure resource that we deploy, and we have a URL that would use the DNS suffix of .azureiotcentral.com for the IoT central website. So it provides us the ability to centrally manage IoT devices that have been registered through the IoT hub.

It also allows us to monitor them, and we can even build triggers that look at some of the data that we're monitoring and can take specific actions, such as the pressure in a valve in a remote planned exceeding a given threshold value that is considered safe and acceptable. Pictured on the screen, we see an example of the Azure IoT Central Management Portal.

[Video description begins] A screenshot of the IoT 172 portal appears. The page URL: https://iot172.azureiotcentral.com has been highlighted. On the left, there is a navigation pane with the following tabs: Dashboard, Device Explorer, Device sets, etc. The Dashboard is currently open, and it has the following title: CONTOSO. Some of the options here are: Quick Start Demo, Tutorials, Add Device Set, etc. [Video description ends]

Notice that the URL uses the DNS suffix as we've mentioned of .azureiotcentral.com. This one was created using a template and you can see here the page lists CONTOSO, but notice on the left in the navigator we can also explore IoT devices that are registered. As we drill deeper into this sample Azure IoT central management portal, we can start exploring devices.

[Video description begins] A similar screenshot for IoT 172 portal appears. Here the center pane has the title: Refrigerator 1. Below the title, the following tabs are present: Measurements, Settings, Properties, Commands, Rules, and Dashboard. The Measurements tab is currently active. It has a list of Telemetry items. [Video description ends]

In this example, we are exploring a refrigerator IoT enabled device, where we can see some telemetry items such as items related to gyroscopes and pressure, and so on. So depending on the nature of the IoT device will determine what is seen here. But, again, we can configure actions that would look at thresholds that might be exceeded, in this case, maybe a temperature for a refrigerator getting too low or too high. And that could trigger the sending of an email to administrators to do something about this.


IoT Hub
Azure IoT Hub is a separate type of Azure resource that you can deploy much like you might deploy an Azure Virtual Machine. Azure Io Central uses an IoT Hub, but the IoT Hub isn't directly manageable in this particular case. But you might wonder, what does the IoT Hub exactly do? The purpose of the IoT Hub, as the name implies, hub meaning some kind of a centralized repository where we have IoT devices that are connected.

And from there, we can receive messages from IoT devices. So details about the statistics related to what that IoT device does, such as monitoring temperature controls in a building. But we can also configure it so that we send commands to control those remote IoT devices, such as to adjust the temperature. And developers can choose a wide variety of programming languages to do that in. But before all of this can happen, IoT devices need to be connected to the IoT Hub.

And that's done through connection strings that will show up after you've built your IoT Hub resource. So there's a device registration connection string to initially get a device connected to IoT Hub. When you deploy your IoT Hub, one of the things you'll get to deal with is the IoT sizing which really deals with the number of messages for throughput that you want your IoT Hub to be able to handle.

Now, not only device registration is of interest here, but also device message transmission, either from the device to the IoT Hub or command sent from the IoT Hub to devices to control them. So what might we use Azure IoT Hub for? Well, because there's a wide variety of IoT devices out there, the uses are many as well.

We could use it for medical device tracking, not only to track the device itself and where it is, but also, of course, to track all of the detailed statistics provided by that IoT device, which could include things like vital signs of the patient to which that medical device is connected. IoT Hubs can also be used to register and track information related to industrial machinery controls, or remote building, heating ventilation, and air conditioning control.
IoT devices will make a connection to IoT Hub and transmit data using a number of different protocols, depending on the configuration, one of which is HTTPS over TCP port 443. However, we've also got AMQP. This is the Advanced Message Queuing Protocol. This is a standard for IoT device transmission of data that uses port 5672, and it's designed to work on a number of different platforms not, for example, just Windows.

MQTT is the Message Queuing Telemetry Transport. This is another type of protocol used by IoT devices that uses TCP port 1883. Now, which one should you use? Well, for example, AMQP is a mature standardized protocol that provides more potential functionality than MQTT does, but it does so at a cost of higher overhead.


Configure IoT Hub
The Azure IoT Hub is a centralized Azure resource that's deployed in the Azure cloud that allows us to connect a multitude of IoT devices for the purposes of managing those devices and monitoring any data that they might send into Azure IoT Hub.

[Video description begins] A Microsoft Azure webpage opens. It has a menu bar with a search bar and the following options: Filter, Notifications, Settings, etc. A navigation pane is also present with the following options: Create a resource, Home, Dashboard, All services, and Favorites. The main body of the page has a section titled Azure services. Some of the options here are: Virtual machines, Storage accounts, App Services, etc. [Video description ends]

To get started here in the portal, I'm going to click Create a resource over on the left, and I'm going to search for IoT.

[Video description begins] He clicks on Create a resource from the navigation pane. A screen titled New appears. It has a search bar. The presenter types iot in the search bar. A list of options appears. [Video description ends]

And I'm going to choose IoT Hub.

[Video description begins] He selects IoT Hub from the list of options. A screen titled IoT Hub appears. It has a drop-down menu for the field Select a Software plan. IoT Hub is the default selection. There is a Create button at the bottom of the page. [Video description ends]

From here, I'll click Create, and I'll start by tying this into an existing resource group I've created.

[Video description begins] He clicks the Create button. A screen titled IoT opens. There are three tabs on this screen. These are: Basics, Size and scale, and Review + create. The Basics tab is currently active. It has a section titled Project Details. There are drop-down menus for Subscription, Resource Group, and Region. An input box for IoT Hub Name is also present. The default value for Subscription is Pay-As-You-Go. The default value for Resource Group is cloud-shell-storage-eastus. The default value for Region is West US. At the bottom there are two buttons: Review + create and Next: Size and scale. He clicks the drop-down menu for Resource Group. A list of options appears. He selects Rg1 from the list. [Video description ends]

And like pretty much deploying any resource in Azure, I'll select an appropriate region or location. And I'm going to give a name to this.

[Video description begins] He clicks the drop-down menu for Region. A list of options appears. He selects Canada East from the list. [Video description ends]

This I'm going to call iothubcentralapp.

[Video description begins] In the input box for IoT Hub Name, he types iothubcentralapp. [Video description ends]

Okay, after I've done that, I'm then going to click Next.

[Video description begins] He clicks the Next: Size and scale button. The screen shifts to the tab titled Size and scale. It has a drop-down menu for Pricing and scale tier. The default value is S1: Standard tier. A scale for Number of S1 IoT Hub units is also present. The pointer is currently on 1. On the page, there is a section with the following details: Pricing and scale tier, Messages per day, and Cost per month. The Pricing and scale tier is S1, Messages per day is 400,000, and Cost per month is 25.00 USD. The following features are enabled: Device-to-cloud-messages, Message routing, Cloud-to-device-commands, and IoT Edge. At the bottom there are two buttons: Review + create, and Previous: Basics. [Video description ends]

Here I can specify the pricing and scale tier, so that we can determine how many messages can be handled by this IoT Hub. These are called IoT Hub units, so this is the scale capacity, and as we need more IoT capacity units, then we can increase them. Now we have to choose the appropriate tier before that even becomes an option.

And notice that what we're looking at here is a number of messages per day that can be processed. And what goes along with that, of course, is the cost increase or decrease, as you increase or decrease the maximum messages per day that you want to be able to process.

[Video description begins] He clicks the drop-down menu for Pricing and scale tier. A list of options appears. He selects S3: Standard tier from the list. The name of the next criterion changes from Number of S1 IoT Hub units to Number of S3 IoT Hub units. The value of Pricing and scale tier changes to S3 and Messages per day changes to 300,000,000. The Cost per month changes to 2500.00 USD. He then changes the value of Number of S3 IoT Hub units to 3. The value of Messages per day changes to 900,000,000 and Cost per month changes to 7500.00 USD. He changes the value of Number of S3 IoT Hub units to 1. The value of Messages per day changes back to 300,000,000 and Cost per month changes back to 2500.00 USD. [Video description ends]

These are messages from IoT devices. Next, I'll click Review and Create, and then I'll just click the Create button.

[Video description begins] He clicks the Review + create button. The screen shifts to the tab titled Review + create. It has information on the basics and size and scale for the IoT hub . At the bottom, there are two buttons: Create and Previous: Size and scale. He clicks the Create button. A page titled All resources appears. It has the following buttons on the top: Add, Edit columns, Refresh, etc. Below the buttons, there is an input box for Filter by name and drop-down menus for resource groups, types, location, tags, and grouping. Below these, there is a table with the following columns: Name, Type, Resource Group, Location, Subscription, and Tags. A few rows of data are present in this table. [Video description ends]

Now, I'm going to go to the All resources view here in the portal, and I'm going to filter it by IoT, since I know that's the prefix used to name my IoT Hub.

[Video description begins] In the Filter by name input box, he types iot. A resource named iothubcentralappappears in the table. [Video description ends]

And now we can see that it's listed here in the view. I'm going to click to open up its Properties blade.

[Video description begins] He clicks on iothubcentralapp in the table. A page titled iothubcentralappappears. It has a navigation pane. The main body has the following buttons: Move, Delete, and Refresh. Below the buttons, a few details are listed. These include: Resource group, Status, Location, Subscription, Hostname, etc. [Video description ends]

The first thing that we want to bear in mind is the hostname that's been assigned to our IoT Hub because we're talking about connectivity from IoT devices over the Internet to the IoT Hub defined in the cloud, which is what we're looking at here.

[Video description begins] The hostname is iothubcentralapp.azure-devices.net. [Video description ends]

Also, if we take a look further down, we can also see we have an IoT devices view.

[Video description begins] He clicks on IoT devices present in the navigation pane. A page for IoT devices appears. At the top, the following buttons are present: Add, Refresh, and Delete. Below the buttons, there is a table with the following columns: Device ID, Status, Last Activity, Last Status Update, etc. The table is currently empty. [Video description ends]

If I click on that, we don't have any devices of course yet, but we can click to add IoT devices by specifying the Device ID.

[Video description begins] He clicks the Add button. A page titled Create a device opens. It has an input box for Device ID, Primary key, and Secondary key. For Authentication type, there are three options: Symmetric key, X.509 Self-Signed, and X.509 CA Signed. Symmetric key is selected by default. A check box for Auto generate keys is also present. This box is checked. For Connect this device to an IoT hub, there are two buttons: Enable and Disable. Enable is selected by default. [Video description ends]

And whether we have a certificate or a symmetric key that's used to authenticate the device to the IoT Hub.

[Video description begins] He closes the Create a device page. The IoT devices page is open. [Video description ends]

Then we've got IoT Edge listed over here on the left-hand side, where we can add an IoT Edge device.

[Video description begins] From the navigation pane, he clicks on IoT Edge. An IoT Edge page opens. It has the following buttons on top: Add an IoT Edge device, Add an IoT Edge deployment, and Refresh. This page has two tabs: IoT Edge devices and IoT Edge deployments. The IoT Edge devices tab is currently open. It has a table with the following columns: Device ID, Runtime Response, Deployment Count, etc. [Video description ends]

[Video description begins] He clicks the Add an IoT Edge device button. A page titled Create a device opens. At the top, an information box is present, which has the following text: Find Certified for Azure IoT devices in the Device Catalog. This page has input boxes for Device ID, Primary key, and Secondary key. The Authentication type is Symmetric key. A check box for Auto generate keys is also present. This box is checked. For Connect this device to an IoT hub, there are two buttons: Enable and Disable. Enable is selected by default. [Video description ends]

Now from here we can look at the supported Azure IoT devices in the Device Catalog.

[Video description begins] He clicks the information box. A new tab opens in the browser. The url is https://catalog.azureiotsolutions.com. A page titled Find your IoT device appears. It has a search bar and a button named See all devices. A section titled Azure IoT Edge Certified is also present here. Some of the devices listed here are: Cloudian AI Box, ARTiGO A1250, OpenBlocks IoT VX2, etc. [Video description ends]

And, for example, if I'm interested in looking at power, some kind of IoT device that tracks power. I might start selecting these devices and reading about them in their support for Azure.

[Video description begins] In the search bar, he types power. A list of devices appears on the screen. He clicks on the device named PMC-5231. A page with the information of this device opens. It has three tabs: Device Specifications, Kit Specifications, and Get Started. The Kit Specifications tab is currently open. The kit is called ICP DAS- Power management IoT Kit. Below the name of the kit, there is a Request Demo button. [Video description ends]

So the idea is that we need to be able to determine which IoT devices in this particular case would support IoT Edge which allows us to write custom code modules that will actually run directly on that device.

[Video description begins] He shifts to the Microsoft Azure tab. He closes the Create a Device page. The IoT Edge page is open. [Video description ends]

And then we can add an IoT Edge deployment to push out the IoT Edge agent and custom modules, code modules that we want to do.

[Video description begins] He clicks on the Add an IoT Edge deployment button. A page titled Create Deployment appears. It has six tabs. The first tab is titled Name and Label is open. It has an input box for Name. At the bottom, there is a Next button. In the input box for Name, he types aa. [Video description ends]

Now these code modules, of course, are docker compatible containers that we want to push out. We can specify the container registry settings to point to those specific items.

[Video description begins] He clicks the Next button. The page shifts to the second tab, titled Add Modules (optional). It has input boxes for Name, Address, User Name, and Password. At the bottom there are two buttons: Previous and Next. [Video description ends]

So we have a number of things that we can do then through the specific IoT Hub.

[Video description begins] He closes the Create Deployment page. The IoT Edge page is open. [Video description ends]

It serves as a central point to manage and monitor IoT devices.


IoT Edge
Azure IoT Edge is an IoT-based solution for the Azure cloud that allows us to have custom code running on IoT devices. So this custom IoT software can run on the device and can even perform processing data functions on the device before even sending data back to the cloud, and specifically, back to an Azure IoT Hub. So the way that this works, generally speaking, is developers can build these custom modules, which really run as docker containers on Azure IoT Edge devices.

And those code modules or containers are then deployed to IoT devices. This also means that if there's a network outage because these IoT devices ideally would be on-premises elsewhere and not in the Azure cloud, if there's a network outage, they can still work with their code logic and process data, and when the network link is re-established, send that to the cloud specifically to the Azure IoT Hub for further processing and storage.

Azure IoT Edge has a number of components that work together, such as the Azure IoT Hub, which is an Azure resource that is used to centrally register IoT devices and manage and monitor them in the Azure cloud. Of course, the Azure IoT devices themselves are components that are used. These could be devices built by any manufacturer out there such as small devices that are used with sensors to determine temperature or power readings or pressure and pump readings or anything like that.

And that IoT device then could be registered with the IoT Hub and it can send data to the IoT Hub. But remember, with Azure IoT Edge, a lot of that data processing and manipulation can happen directly on customized code modules we place or push out to IoT devices before being sent into the Azure cloud. And so the next component is IoT Edge runtime. The Azure IoT Edge runtime needs to be supported on the IoT device.

And essentially, this is what allows us to push out. It's an agent that allows us to push out our code modules or docker compatible containers that have our custom code onto IoT devices. So when you configure an Azure IoT Hub, you can choose to add an IoT Edge device. And when you do, you'll see that there's a web page here where you can search for specific IoT device types that are supported to work with Azure IoT Hub as an IoT Edge device running that agent.

[Video description begins] A screenshot of Microsoft Azure IoT Device Catalog is displayed on the screen. It is titled: Find your IoT device. Below the title, there is a search box. The central pane shows the options for Azure IoT Edge Certified devices. Two devices have been listed here. [Video description ends]

So the process looks like this: We first create an IoT Hub.

[Video description begins] Screen title: IoT Edge Process. [Video description ends]

This is an Azure resource and we might even do it using the portal, let's say, after which we can then look at the connection strings in the IoT Hub to determine how to register our IoT device or devices with that IoT Hub. Next, we would add, as we saw on the previous screen an IoT Edge runtime device.

Essentially, we're pushing the agent out to that device, so it has to support this connectivity to Azure IoT Hub after it's registered. And then as developers build these custom modules or docker compatible containers, we can then create deployments. Really, it's called creating an IoT Edge deployment, where we specify the modules that we want to push out to specific IoT devices connected to IoT Edge that are running IoT Edge runtime.

IoT Solution Accelerators

[Video description begins] Topic title: IoT Solution Accelerators. Your host for this session is Dan Lachance. [Video description ends]

Microsoft Azure IoT solution accelerators are essentially pre-created IoT cloud solutions, where code is already written. However, you can customize it as you see fit. Also, it's got built-in support for IoT device monitoring. And, it also means that required cloud IoT services like IoT Hub get created automatically from this essentially prefab IoT cloud-based solution. So we could use accelerators so that we have a complete IoT cloud solution out of the box, but rarely is that the case.

Often, we will use one of these prefabricated IoT cloud solutions in Azure as a starting point, where we then go back and tweak it and make changes certainly to things like code, especially if we're going to be using IoT edge devices, where we run custom code modules directly on those IoT devices on another network. Pictured on the screen, we can see the Azure IoT solution accelerators website.

[Video description begins] A screenshot of the Azure IoT solution accelerators website is displayed on the screen. The URL of the website https://www.azureiotsolutions.com/Accelerators is highlighted. The page has two sections: Deploy a Microsoft solution accelerator and Explore partner solution accelerators. The Deploy a Microsoft solution accelerator section has the following options: Remote Monitoring, Connected Factory, Predictive Maintenance, and Device Simulation. [Video description ends]

Now, by going to this solution accelerators website, we can browse the variety of prefabricated solutions that could serve as either a complete solution, out of the box, or as we mentioned, as a starting point.

[Video description begins] Screen title: Deploying Azure IoT Solutions Accelerators. [Video description ends]

Once you've located a solutions accelerator that you're interested in from the website, you can select it. And you do that by clicking the Try Now button, at which point you're then going to be asked to specify an Azure subscription and region for the deployment. Next thing is that after it's deployed, which could take a few minutes, it might include some IoT device simulators, so that you can immediately be up and running and start working with the tool.

It might even use backend Azure Cosmos DB storage, but remember that these Azure IoT solutions accelerators are all a little bit different. In the end, one commonality is that they will often have a monitoring dashboard, if not more than one that you will use to navigate through the IoT solutions accelerator.

Azure Cognitive Services

[Video description begins] Topic title: Azure Cognitive Services. Your host for this session is Dan Lachance. [Video description ends]

Artificial intelligence, otherwise called AI, is essentially the imitation of human behavior by technology. In Azure, that could be done using Azure Cognitive Services, which provides a series of developer artificial intelligence tools and also an endpoint URL for making API calls to use artificial intelligence. AI usage is many-factored, including for speech purposes. This would allow developers to add speech-enabled features to their applications, such as voice to text.

There are APIs related to vision metadata tagging for processing of images, language analysis APIs, and intelligence search APIs. So, you get to learn about each of these API calls when you deploy cognitive services in Azure as a resource. The documentation is built in to the Properties blade of cognitive services. And bear in mind that in order for developers to make API calls to the API of their choosing, depending on the need, will require access to a key for the code to authenticate.

Deploy Azure Cognitive Services

[Video description begins] Topic Title: Deploy Azure Cognitive Services. Your host for this session is Dan Lachance. [Video description ends]

In this demonstration, I will deploy Azure Cognitive Services in the portal. This is really more of a developer thing; however, as IT administrators for Azure, we can deploy Azure Cognitive Services, which really serves as an entry point for developers to hook into APIs of their choosing.

[Video description begins] A Microsoft Azure webpage opens. It has a menu bar with a search bar and the following options: Filter, Notifications, Settings, etc. A navigation pane is present on this screen with the following options: Create a resource, Home, Dashboard, All services, and Favorites. The center pane has a section titled Azure services. Some of the options here are: Virtual machines, Storage accounts, App Services, etc. [Video description ends]

To get started here in the portal in the upper left, I'm gonna click Create a resource.

[Video description begins] He clicks the Create a resource option from the navigation pane. A page titled New opens. At the top, a search bar is present. [Video description ends]

And I'll just search for C-O-G, for cog, and I can see Cognitive Services listed, so I'll go ahead and search that.

[Video description begins] In the search bar, he types cog. The following list of options appears: Azure Search, Cognitive Services, Spatial Anchors, etc. He clicks Cognitive Services. A new page titled Cognitive Services opens. It has a drop-down menu for Select a software plan. The default value here is Cognitive Services. Below it, a Create button is present. [Video description ends]

Then, I'll choose Create.

[Video description begins] He clicks the Create button. A page titled Create appears. It has an input box for Name. There are drop-down menus for Subscription, Location, Pricing tier, and Resource group. A check box with the following text is present: I confirm I have read and understood the notice below. At the bottom of the page, a Create button is present. [Video description ends]

I need a name for this, so I'm gonna call this cogservice1.

[Video description begins] In the input box, he types cogservice1. [Video description ends]

And I'm gonna deploy this into a location that makes sense, that's nearest to me geographically where I'll be accessing it.

[Video description begins] The default value for Subscription is Pay-As-You-Go. He clicks the drop-down menu for Location. A list of options appears. These are: Central US, East Asia, Canada Central, etc. He selects Canada Central. [Video description ends]

And I'm gonna choose the only available pricing tier, and I'll deploy this into an existing storage group.

[Video description begins] He clicks the drop-down menu for Pricing tier. S0 appears in the options. He selects it. [Video description ends]

Notice I have to check off this confirmation about Microsoft using data that we send to Bing Search Services, if we talk to Bing-related APIs. So I'm going to go ahead and do that, and just go ahead and create this resource.

[Video description begins] He clicks the drop-down menu for Resource group. The following options appear: Rg1, testwebapp1, testwebapp2, etc. He selects Rg1. He checks the box for I confirm I have read and understood the notice below. [Video description ends]

[Video description begins] He clicks the Create button. The Microsoft Azure Home page appears on the screen. [Video description ends]

Once it's completed, it'll show up like any other resource does. So if I go to All resources and filter with a prefix of cog, there's cogservice1.

[Video description begins] He clicks the All resources option from the navigation pane. A new page titled All resources is displayed. The following buttons are shown below the title: Add, Edit Columns, Refresh, etc. Below the buttons, there is an input box for name. There are drop-down menus for resource groups, types, location, etc. A table is present below these input boxes. It has the following columns: Name, Type, Resource Group, etc. [Video description ends]

And if I click on and open it up, the first thing that's going to be important is the Keys in the Properties blade.

[Video description begins] In the input box for name, he types cog. A resource named cogservice1 appears in the table. He clicks on it. On the next screen, a new page titled: cogservice1 – Quick start is displayed. It has a navigation pane with the following options: Overview, Keys, Quick start, etc. Quick start is currently active. He clicks the Keys option from the navigation pane. [Video description ends]

[Video description begins] A new page titled cogservice1 – Keys appears. At the top, the following buttons are present: Regenerate Key1 and Regenerate Key2. Below it, there are input boxes for Name, Key 1, and Key 2. [Video description ends]

So you've got two Keys here, and you can regenerate one or the other. So you have two so that you can keep one in use for a while as you regenerate the other and over time, vice versa.

[Video description begins] He highlights the values in Key 1 and Key 2. [Video description ends]

So there is more security achieved by rotating keys periodically instead of sticking with the exact same keys. But when developers are making API calls, they're going to need access to one of these keys. Now, if I go to Quick start in the Properties blade.

I can also see reference documentation links for making API calls to the API of the developers choosing, whether it's the face API reference for facial recognition or whether it's translator text API references.

[Video description begins] He clicks on Quick start from the navigation pane. Three guidance steps for Quickstart are written on the screen. The first step is Grab your keys. The second step is Make an API call to this endpoint: https://canadacentral.api.cognitive.microsoft.com/ and the third step is Enjoy coding. The second step has the following built-in testing consoles: Face API reference, Translator Text API reference, Logs, etc. He hovers over a few of them. [Video description ends]

So when I click on any one of these, let's say we choose the face API reference, that's gonna open up a new web browser where we can see the regions in which that specific API is available through Cognitive Services.

[Video description begins] He clicks the Face API reference. A new tab titled Microsoft Cognitive Services opens in the browser. A navigation pane is shown with the following options with drop-down menus: Face, FaceList, LargeFaceList, etc. The Face option is expanded to show the following options: Detect, Find Similar, Group, etc. Detect is currently active. In the center pane, Face API - V1.0 heading is shown with a list of available regions. Next to it, an API definition button is present. [Video description ends]

And then we can see the API definition can then be downloaded either as a Swagger or a WADL file. The developers can use to learn about how to hook in to the API.

[Video description begins] He clicks the API definition button. It expands to show the following options: Swagger and WADL. [Video description ends]

And, as we go further down it has more of an explanation about how this works and how to formulate the request URL.

[Video description begins] He scrolls down the page. The following sections appear on the screen: Face - Detect, Http Method, Request URL, Request Parameters, etc. [Video description ends]

Azure Machine Learning Studio

[Video description begins] Screen title: Azure Machine Learning Studio. Your host for this session is Dan Lachance. [Video description ends]

You can use the Azure portal to create an Azure Machine Learning Studio workspace. The purpose of Machine Learning Studio, it being a web-based tool, is essentially data analysis, but it runs deeper than that. Always bear in mind that the source data that we use, that we're going to analyze needs to be trustworthy, and it needs to be accurate.

Although we do have some built-in functions that allow us to manipulate data, in other words, to transform the data, it's also important to note that there are sample data sets that we can use to learn how to use the Machine Learning Studio interface. But, of course, we can also import our own data sets.

The purpose of machine learning in this context is to take vast amounts of data, and based on the factors that we define as being relevant and the training model that we apply to that data, we can then predict future trends or some kind of outcome as it might relate to financial credit risks. Or, as another example, the most likely income to be expected based on marital status, education, city, and many other potential factors, whatever happens to be in your data set that you specify as being relevant.

It might even relate to the healthcare side of things, such as heart disease prediction, given a number of factors. The process of working with a data experiment in Azure Machine Learning Studio begins with working with data. Whether it's sample data that's provided, or whether you import your own custom data. Bear in mind that there are also plenty of pre-defined templates.

There's a gallery that you can select from, that you can open up directly into Machine Learning Studio, so that you can begin working with these items and start to learn how to use the tool. The next thing to do once you've acquired data, or you decide you're going to use sample data, is to start applying functions such as maybe to transform the data into a specific manner, or maybe to exclude data that is not relevant, perhaps values that fall below a certain range.

You can also then apply learning algorithms based on what it is you're looking for in terms of an outcome. Finally, the last thing you would do is to run the data experiment and then visualize the outputs. Pictured on the screen, we can see the result of having created a Machine Learning Studio workspace object in Azure and then launching the Learning Studio.

[Video description begins] A screenshot of the Microsoft Azure Machine Learning Studio webpage is displayed on the screen. There is a side pane and a navigation pane. The navigation pane has a search bar for searching experiment items. It also has various other options, such as Saved Datasets, Data Format Conversions, Data Transformation, etc. The Data Transformation field is expanded to show the following options: Filter, Learning with Counts, Manipulation, Sample and Split, and Scale and Reduce. The Scale and Reduce field is expanded to show the following options: Clip Values, Group Data into Bins, and Normalize Data. The items in the experiment are shown in the center pane. A right pane is also present. It has two tabs: Properties and Project. Currently, the Properties tab is open. Under the option Clip Values, drop-down menus are present for the following fields: Set of thresholds, Upper threshold, Upper substitute value, etc. [Video description ends]

What you end up getting in the middle is a blank canvas. And then you can start dragging items from the left, such as data sets and you can add them into the canvas, but you can also then expand things like functions to manipulate your data. And, in this screenshot, the Data Transformation category has been opened up and the Clip Values item has been dragged over.

Now, when you drag something over and select it on the far right in the panel, you'll see details related to what's selected. In this case, for clipping peak values of a specific piece of data. Now, once you've done this, in the left hand-side of the screen in the navigator, you'll also be able to select different types of training models. And at the very bottom center, which you can't see in this screenshot, you'll have a Run Experiment button that you can use to actually run your experiment and then end up with some kind of predictive analysis as an outcome.
