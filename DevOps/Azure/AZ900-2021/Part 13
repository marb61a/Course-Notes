                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 13


Azure Blob Storage PowerShell Management
  - We can manage Azure Storage accounts using Windows PowerShell cmdlets, either in the Azure Cloud Shell, which is accessible in the portal
    - Or in an example on-premises where I've already downloaded and installed Azure PowerShell
    - This has already run the connect-az account cmdlets to connect to my Azure account.
  - To build a storage account, I'm going to run a new-azstorage account cmdlet. 
    - What needs to be specified is the resource group name into which I want this deployed. 
    - In the example -resourcegroupname, in this case rg1, which is already got it created. 
      - -name for the storage account, in this case will be stor, let's say, 1989, following naming conventions of my organization. 
      - -location, that's the Azure geographical region, is going to be your region. 
      - The -skuname, for replication purposes here, will be standard locally-redundant storage, or lrs or in other words, within the Azure data center. 
      - Then go ahead and press Enter and see what happens.
Well, what happened is our storage account was created. Now, I am hard wiring everything like the name of the resource group and the name and the location. Of course, this is just an example. When you are scripting with PowerShell, with the CLI, you can get very fancy with this and use parameter values that you might ask the user for when running a script, and so on.
But let's move on. Because now, to verify our work, we could use the portal, but instead, why don't we just run get-azstorageaccount. So we should see our newly created one, stor1989, somewhere in the list, and here it is right here.
So we know it's there, and we know that we're doing this correctly. Let's do more, because this is so much fun. So I'm going to make a variable here called $ctx, for context. And the idea here is I can attach a context to PowerShell commands that work with a storage account. And so then I don't have to always repeat the storage account name and stuff like that.
So I'm going to run this variable, or create this variable, I should say, $ctx. It can be called anything. And it will contain, or =, the result of running get-azstorageaccount and -r rg1, that's the resource group into which my newly created storage account was deployed. And the name of it, if you recall, was stor1989.
Okay, so I want to make a reference to that storage account, and it's going to be referenced through the $ctx variable. So if I were to type $ctx, I can see that it's returning back information about that account. Actually, if I run $ctx.context, it gives me endpoint or

connection information, and that's really what I need here. Okay, so now that we have that knowledge, let's work further with it.

[Video description begins] He types and executes the following command: $ctx.context. The output displays. It is detailed information about stor1989. [Video description ends]

What I want to do here, really, is I want to create a container in my storage account, but we had to do that stuff first to set it all up. So new-azStoragecontainer. And then -name, what would you like to call it? How about we call it pics, for pictures, to follow our examples in some of the other demos. And I'm going to use -context and just give it my variable. Now, if I just give it, I'll just put here $ctx, because it is a variable.
If I put that in, it doesn't really know what I'm talking about. And that's because if I bring up the arrow key, I want to reference the context property of the storage account, so .context.
  - If you spell things incorrectly it's never going to work. 
      - Go back to our original version to demonstrate here. 
  - That's what we really wanted to see, if we reference the context property of our variable it shows that it created our pics folder.
  - Get some content up there. If I change directory into the sample files folder created for the example
    - I've got a picture of a dog, and the file's called img.jpg.
  - Do ahead and upload that to the pics container in my newly created storage account. So to do that, I'm going to run the set-azstorage, spell storage correctly this time, blobcontent. And then -file is going to be c:\samplefiles. There's no spaces here around my file name or within my file name, I should say, or within my folder name. So I don't have to put this in quotes because of that reason. And now what I want to do is tell the container I want that to go in, so -container, which in this case is pics. And then what do you want to call the blob? Well, I want to call it dog.jpg, although it could have a different name. And then, of course, once again -context, when this time we know what we're going to do. It's going to be our variable ctx, which points to our storage account and then call upon the .context property of that storage account.
  - We can see it looks like it's in the midst of uploading our jpg.
    - Once that completes, we'll just double-check our work by flipping over to the portal, I guess we'll do that right now.
  - Here in the portal, in the Storage accounts view, indeed, there's the stor1989 storage account. 
    - If I click it, and if we scroll down to the Properties blade and then
    - Click on Blobs on the left, we can see pics on the right.
    - Within it, we should see imgg.jpg.


Azure Files
  - If you've performed IT network administrator duties over the years, you've probably at some point shared a folder on a computer
    - Then connected to it from other computers.
  - That's exactly what's going to happen here with Azure files, except that the shared folder's hosted in the Cloud. 
    - It's a cloud-based file share that allows access over the SMB protocol, Server Message Block. 
    - Which is really what is used with Windows file and print sharing. 
    - You can mount these shares in the Azure Cloud from virtual machines running in the cloud. 
    - Or you can do it from on-premises machines and reach into Azure to get to that shared folder, assuming that firewall rules allow that.
  - The client devices might be running a Windows operating system, the Mac OS, or even a Linux variant. 
    - As long as it supports SMB, it doesn't matter. That also includes apps on smartphones
    - For example say you've got an Android smartphone, you could install an app that supports SMB and map a drive into the Azure Cloud to do this
    - To manage Azure files, we can use the Azure Portal GUI. 
    -We can also manage and work with Azure file shares using the Azure CLI, and also, using Azure PowerShell cmdlets.
  - In order to work with Azure files, what do you need? First, you need a storage account in Azure. 
    - Within the storage account you can then configure your Azure file share
    - You have to give it a share name and a quota, which is really just a size limit. 
    - Remember, access from SMB, the Server Message Block protocol needs access to TCP port 445
    - Depending on where the clients are coming from that need to map to this or mount this shared folder. 
    - You're going to have to make firewall provisions to allow this to happen.
  - From Windows, we might map a drive letter either using the GUI or the net use command. 
    - Like we would normally to map to a file server on-premises that has a shared folder. 
    - You can connect directly to the UNC path and even use a mount point path. 
    - Which really just means it's more like the Unix and Linux world. 
    - Where you've got a folder that you connect to that points to the other shared folder out in the Azure Cloud, as opposed to a drive letter.


Configure Azure File Storage
  - Use the Azure portal to configure Azure file storage. Remember, Azure file storage is really just defining a shared folder in the Azure cloud, much like you might designate a shared folder on a file server on-premises. The concept is the same. So how do we get started?
  - The first thing you need is a Storage account, so let's first go to the Storage accounts view over on the left.

[Video description begins] He clicks the Storage accounts menu in the navigator. Its window opens on the right side. It has buttons Add, Edit columns, Refresh, Assign tags, and Delete. There are fields for filtering search results. 6 storage account items display in a table format. [Video description ends]

So I've got a Storage account here called stor1989. We're going to use that one. Within the Properties blade for that storage account, I'm going to scroll all the way down until I see Files.

[Video description begins] He clicks the stor1989 link and its window opens. The page has a navigator on the left that he scrolls down to the File service menu group. He clicks Files and its window displays on the right. There are no files in the stor1989 container. 2 buttons- File share and Refresh - display on the top. [Video description ends]

Now, when I click Files on the right, I can see I don't have any file shares yet. So I'm going to click the add File share button at the top. And this one, I'm going to call, let's say shared_files. Now notice if I put in an underscore, do you see what happened there? It doesn't like it. And if I hover over the little red block with the white exclamation mark, it tells me the rules for naming this. And bear in mind that in Azure, unfortunately, the rules for naming resources are not 100% consistent, but that's why the help is right in front of us, at least in the GUI.

[Video description begins] He clicks the File share button and a File share window opens on the far-right side of the screen. There are 2 fields in this section- Name and Quota. 2 buttons- Create and Discard are also present. He types file_ shared in the Name field. A red exclamation point appears, indicating an error. Naming convention rules pop up when he hovers the mouse on the exclamation point. He removes the underscore and the exclamation point disappears. [Video description ends]

So anyways, I'm going to call this sharedfiles, and let's say for the for the Quota, maybe I'll set it to 4 gigabytes. And then I'll go ahead and create it, so I'm going to click Create.
So right away, we can see it's there, sharedfiles. And if I click on it, I can actually upload content to it.

[Video description begins] He clicks sharedfiles and its window displays. It has 6 buttons- Connect, Upload, Add directory, Refresh, Delete share, and Quota. He hovers over all the buttons on the page. [Video description ends]

And you can add directories within it as well, so you can make subordinate subdirectories to organize large amounts of files. How about I click Upload to upload some content here?

[Video description begins] An Upload files panel opens on the far-right side of the screen. It has a field named Files and a small folder icon. An Upload button displays at the panel bottom. [Video description ends]

Over on the right, it opens up an Upload files blade. So I'm going to click the little folder icon, the blue folder icon, to upload a file. So I'm going to choose an on-premises file.

[Video description begins] When he hovers over the folder icon, No file chosen alt text displays. [Video description ends]

And once I've done that, I'll just click the Upload button. So it's in the midst of uploading that content.

[Video description begins] He clicks the folder icon. Dog.jpg appears in the Files field. A section titled Current uploads appears in the panel. Dog.jpg is getting uploaded here and a circular progress bar shows that 4MB out of 6MB has been uploaded. [Video description ends]

Now, the next thing we're going to do is we're going to figure out how we can make a connection to the shared folder from a virtual machine running within the Azure cloud. But you just as well could do it from on-premises, as long as TCP port 445 is opened up.

[Video description begins] When the entire file is uploaded a green tick mark appears beside the file name and a message with text- Upload completed- displays in the panel. [Video description ends]

So let me just go ahead and close this. When you're looking at a Azure file share, like we are now, you're going to see this Connect button up at the top.

[Video description begins] Dog.jpg appears in the main page. Next, he clicks the Connect button. A panel titled Connect appears on the far-right side of the screen. It has 3 tabs- Windows, Linux, and MacOS. Windows tab is active now. Here is a field named Drive Letter. The letter Z appears in this field. Below are PowerShell commands that you can use to connect to this file share from a Windows computer. 2 Commands display. [Video description ends]

And here, you can see how you can make a connection to it. For example, using the net use command in Windows. So I'm going to go ahead and copy the net use command to the Windows Clipboard,

[Video description begins] He highlights the second command and clicks the copy button next to it. The alt text- Copied- appears. [Video description ends]

and let's just go see what we've got here for virtual machines. I'm going to click Virtual machines on the left.

[Video description begins] In the Azure portal page, he clicks the virtual machines link in the navigator. The virtual machines page displays on the right. The page has buttons captioned Add, Reservations, Edit columns, Refresh, Assign tags, Start, Restart, Stop, Delete, and Services. Below are filter options such as Name, Resource groups, Types, Locations, Tags, and Grouping. 2 items display below. They are virtual machines named eastlinuxvm1 and eastwindowsvm1. The first machine's status is stopped and the second is running. [Video description ends]

So I've got a Windows virtual machine here called eastwindowsvm1, and it says the status is it's running. Okay, so I'm going to open that up and take note of the public IP.

[Video description begins] He clicks eastwindowsvm1 and its window appear. There are 6 buttons at the top- Connect, Start, Restart, Stop, Capture, Delete, and Refresh. Below are details such as Resource group, Status, Location, Subscription, subscription ID, Computer name, Operating system, size, public IP address, Virtual network, and DNS name. [Video description ends]

And on my on-premises computer here, I'll use the remote desktop protocol client to connect to that IP with the appropriate name and password defined when this virtual machine was created. Okay, so I've popped in that public IP address for that virtual machine, I'm going to go ahead and click Connect.

And then it's got the username that works for that virtual machine that I defined, and then I'll specify the password, and I'll click OK. So now what I'm going to do in my virtual machine is open up a command prompt, we'll just do this manually, but there are many ways this could be done. And I'm going to go ahead and paste in that net use command.

[Video description begins] He opens the Administrator Command Prompt window. The command prompt says C:\Users\cirving. [Video description ends]

So it's connecting to my Storage account, stor1989.file.core.windows.net\sharedfiles, that's the name of my share. And then it's got the other details to authenticate to it. So I'm going to go ahead and press Enter to see what happens. It says it completed successfully, really, that easy? Let's see, z: dir.

[Video description begins] He types and executes another command: z:. The command prompt changes to z:. Then he types and executes the following command: dir. The output displays: Volume in drive Z has no label. 1 file and 2 directories display. [Video description ends]
Hey, there's the dog.jpg file. And in the GUI, let's just say, here in my virtual machine in Azure, if I were to go to this PC on the left in Windows Explorer, there's my network location for shared files, and there's the dog file. And indeed, it looks like we've got a picture of a dog.
[Video description begins] He closes the command prompt window and opens the file manager again. He clicks this PC in the navigator and sharedfiles in the network locations. The dog.jpg file displays. [Video description ends]


