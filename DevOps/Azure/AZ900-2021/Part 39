                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 39


Configure IoT Hub
  - The Azure IoT Hub is a centralized Azure resource that's deployed in the Azure cloud that allows us to connect a multitude of IoT devices 
    - For the purposes of managing those devices and monitoring any data that they might send into Azure IoT Hub
  - To get started here in the portal, click Create a resource over on the left and search for IoT
    - Then choose IoT Hub, from here click Create, and I'll start by tying this into an existing resource group I've created
    - And like pretty much deploying any resource in Azure, select an appropriate region or location and give a name to this for example iothubcentralapp
    - After doing that then click Next
  - Here we can specify the pricing and scale tier, so that we can determine how many messages can be handled by this IoT Hub
    - These are called IoT Hub units, so this is the scale capacity, and as we need more IoT capacity units, then we can increase them
    - Now we have to choose the appropriate tier before that even becomes an option
    - Notice that what we're looking at here is a number of messages per day that can be processed
    - What goes along with that, of course, is the cost increase or decrease
    - As you increase or decrease the maximum messages per day that you want to be able to process
    - These are messages from IoT devices, click Review and Create, and then click the Create button
  - Go to the All resources view here in the portal, and filter it by IoT
    - We can see that it's listed here in the view. I'm going to click to open up its Properties blade
    - The first thing that we want to bear in mind is the hostname that's been assigned to our IoT Hub 
    - Because we're talking about connectivity from IoT devices over the Internet to the IoT Hub defined in the cloud, which is what we're looking at here
    - If we take a look further down, we can also see we have an IoT devices view
  - If we click on that, we don't have any devices of course yet, but we can click to add IoT devices by specifying the Device ID
    - Whether we have a certificate or a symmetric key that's used to authenticate the device to the IoT Hub.
    - Then we've got IoT Edge listed over here on the left-hand side, where we can add an IoT Edge device.
  - From here we can look at the supported Azure IoT devices in the Device Catalog
    - If interested in looking at power, some kind of IoT device that tracks power
    - We might start selecting these devices and reading about them in their support for Azure
  - The idea is that we need to be able to determine which IoT devices in this particular case would support IoT Edge 
    - Which allows us to write custom code modules that will actually run directly on that device
    - Then we can add an IoT Edge deployment to push out the IoT Edge agent and custom modules, code modules that we want to do
  - These code modules, of course, are docker compatible containers that we want to push out
    - We can specify the container registry settings to point to those specific items
    - So we have a number of things that we can do then through the specific IoT Hub
    - It serves as a central point to manage and monitor IoT devices


IoT Edge
  - Azure IoT Edge is an IoT-based solution for the Azure cloud that allows us to have custom code running on IoT devices
    - This custom IoT software can run on the device and can even perform processing data functions on the device before even sending data back to the cloud
    - Specifically, back to an Azure IoT Hub, the way that this works, generally speaking, is developers can build these custom modules
    - Which really run as docker containers on Azure IoT Edge devices.
  - Those code modules or containers are then deployed to IoT devices
    - This also means that if there's a network outage because these IoT devices ideally would be on-premises elsewhere and not in the Azure cloud
    - If there's a network outage, they can still work with their code logic and process data
    - When the network link is re-established, send that to the cloud specifically to the Azure IoT Hub for further processing and storage.
  - Azure IoT Edge has a number of components that work together, such as the Azure IoT Hub
    - Which is an Azure resource that is used to centrally register IoT devices and manage and monitor them in the Azure cloud
    - Of course, the Azure IoT devices themselves are components that are used
    - These could be devices built by any manufacturer out there such as small devices 
    - That are used with sensors to determine temperature or power readings or pressure and pump readings or anything like that
    - That IoT device then could be registered with the IoT Hub and it can send data to the IoT Hub
    - Remember, with Azure IoT Edge, a lot of that data processing and manipulation can happen directly on customized code modules 
    - We place or push out to IoT devices before being sent into the Azure cloud
    - The next component is IoT Edge runtime, Azure IoT Edge runtime needs to be supported on the IoT device
  - Essentially, this is what allows us to push out
    - It's an agent that allows us to push out our code modules or docker compatible containers that have our custom code onto IoT devices
    - When you configure an Azure IoT Hub, you can choose to add an IoT Edge device
    - When you do, you'll see that there's a web page here where you can search for specific IoT device types 
    - That are supported to work with Azure IoT Hub as an IoT Edge device running that agent
  - The process looks like this: We first create an IoT Hub.
    - This is an Azure resource and we might even do it using the portal
    - After which we can then look at the connection strings in the IoT Hub to determine how to register our IoT device or devices with that IoT Hub
    - Next, we would add, as we saw on the previous screen an IoT Edge runtime device
    - Essentially, we're pushing the agent out to that device, so it has to support this connectivity to Azure IoT Hub after it's registered
    - Then as developers build these custom modules or docker compatible containers, we can then create deployments
    - Really, it's called creating an IoT Edge deployment
    - Where we specify the modules that we want to push out to specific IoT devices connected to IoT Edge that are running IoT Edge runtime


IoT Solution Accelerators
  - Microsoft Azure IoT solution accelerators are essentially pre-created IoT cloud solutions, where code is already written
    - However, you can customize it as you see fit, also it's got built-in support for IoT device monitoring
    - It also means that required cloud IoT services like IoT Hub get created automatically from this essentially prefab IoT cloud-based solution
    - So we could use accelerators so that we have a complete IoT cloud solution out of the box, but rarely is that the case
  - Often, we will use one of these prefabricated IoT cloud solutions in Azure as a starting point
    - Where we then go back and tweak it and make changes certainly to things like code
    - Especially if we're going to be using IoT edge devices, where we run custom code modules directly on those IoT devices on another network
  - By going to this solution accelerators website, we can browse the variety of prefabricated solutions that could serve as either a complete solution
    - Out of the box, or as we mentioned, as a starting point
  - Once you've located a solutions accelerator that you're interested in from the website, you can select it
    - You do that by clicking the Try Now button, at which point you're then going to be asked to specify an Azure subscription and region for the deployment
    - Next thing is that after it's deployed, which could take a few minutes, it might include some IoT device simulators
    - So that you can immediately be up and running and start working with the tool
    - It might even use backend Azure Cosmos DB storage, but remember that these Azure IoT solutions accelerators are all a little bit different
    - In the end, one commonality is that they will often have a monitoring dashboard
    - If not more than one that you will use to navigate through the IoT solutions accelerator


Azure Cognitive Services
  - Artificial intelligence, otherwise called AI, is essentially the imitation of human behavior by technology
    - In Azure, that could be done using Azure Cognitive Services
    - Which provides a series of developer artificial intelligence tools and also an endpoint URL for making API calls to use artificial intelligence
    - AI usage is many-factored, including for speech purposes
    - This would allow developers to add speech-enabled features to their applications, such as voice to text
  - There are APIs related to vision metadata tagging for processing of images, language analysis APIs, and intelligence search APIs
    - You get to learn about each of these API calls when you deploy cognitive services in Azure as a resource
    - The documentation is built in to the Properties blade of cognitive services
    - Bear in mind that in order for developers to make API calls to the API of their choosing, depending on the need
    - This will require access to a key for the code to authenticate
