                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 8


Azure Blob Storage
  - When talking BLOB's we are talking about binary large objects, hence BLOBs, specifically how they relate to Azure storage accounts.
  - BLOB storage in the Azure cloud is really used as unstructured data storage. 
    - Where we don't always have the exact same type of file that is read from and written to in the exact way, instead it's unstructured.
    - We can take snapshots of BLOB files, just like you could take a snapshot of a disk volume, and it serves as a point in time picture, so to speak, of the state of the data at that point in time. There are also different storage tiers that you can choose from.
  - So if you don't require frequent access to your BLOB objects, you might configure your Azure storage tier for your BLOB storage to use the cool storage tier. Whereas if you need frequent access to your BLOB files, instead you might then choose the hot storage tier, which is optimized for frequent access. There are a variety of BLOB types, all of which are accessible over either HTTP, or the more secure HTTPS.
[Video description begins] 4 branches emerge from the BLOB icon. They are captioned Unstructured data storage, snapshots, storage tiers, and various BLOB types. An arrow points towards the BLOB icon. It has the label HTTP/ HTTPS next to it. [Video description ends]
Whether you're using a GUI tool, like a web browser, whether you're using PowerShell commandlets, the Azure CLI, or even developer's access and BLOBs through the REST API, all of those methods use HTTP or HTTPS. The Azure BLOB hierarchy starts with the storage account. So let's say we've got a storage account that we create called sa123, under which we can then create one or more containers. Think of these as being like folders on a disk that you use to organize all of your files.
And so here, let's say we've got a BLOB container called pics for pictures, into which we upload a file called pic1.jpg, that's the actual BLOB. So when we put all this together and we access it over HTTP or HTTPS, the URL would look something like this, as we see on the screen. In this case, http://sa123, which is our storage account name, then .blob.core.windows.net/pics, which is our container, and /pic1.jpg, which is the actual name of the BLOB itself.
And that can be a different name than, for example, what you started with on-premises before you uploaded it to your storage account, if that's how you're populating your storage account.
[Video description begins] A 3 -step process infographic displays. Step1 has the caption storage account: sa123. The second step has the caption BLOB container: pics, and the last step has the caption BLOB: pic1.jpg. [Video description ends]
Block BLOBs are one type of BLOB, these are used for small and large files. And you can even upload multiple BLOBs at the exact same time. So this would be useful if you want to store things like pictures, office productivity documents, any type of media documents up in the cloud. And it's great that you can upload multiple files concurrently.
Another type of BLOB is a page BLOB. This one is generally used for large file cloud storage, and it's designed for files that will experience random reads and random writes. A great example of this would be virtual hard disk files, or VHDs. Now these are the virtual hard disks that are used by Azure virtual machines. The last type of BLOB is an append BLOB. Now, this one is designed so that when we have new data, it gets added to the end of an existing BLOB.
Now this means, then, that any existing blocks of data that currently exist in the BLOB can't be updated or deleted. Why would you want this? Well, a great example of using this would be for logging purposes.


Create a Storage Account
  - Using the Azure portal to create a new Azure storage account. As the name implies, an Azure storage account is a cloud storage location
    - When you define a new storage account, there are a number of detailed settings to consider. 
    - This can be depending on things like the type of performance wanted or the type of durability
    - Or how many replicas of data you might need replicated throughout the Azure infrastructure. Now here in the Azure portal, I'm at the homepage where I could click Storage accounts, which takes me to the storage accounts view.
  - [Video description begins] The Microsoft Azure portal home page displays in a browser window. The address bar contains the URL: https://portal. azure.com/#home. The page is divided into 2 sections. In the left section, is a menu bar with menus such as create a resource, home, dashboard, all services and favorites. The right section has 2 panels. The first is titled Azure services and contains icons for some main Azure services such as virtual machines, storage accounts, app services, SQL databases, Azure database, Azure Cosmos, and others. The second panel is titled Make the most out of Azure. It has 5 tiles listing the main advantages of using Azure. Each tile has an icon representing the advantage, a tagline, and a link to a relevant service. He clicks the storage accounts service. [Video description ends]

Now I don't have any storage accounts listed right now, but I could add one by clicking the Add button.

[Video description begins] A storage accounts page appears. There are 5 buttons on the top of the page- Add, Edit Columns, Refresh, Assign Tags, and Delete. Below that are the filter options. No storage accounts are listed on the page. He clicks the add button. A create storage account page opens. He clicks the cross symbol on the upper-right corner of the page to close the page. [Video description ends]

Now instead of doing that, what we could also do is click the Create a resource link over in the upper left.

[Video description begins] He returns to the home page and clicks the create a resource option in the left panel. A dialog box titled New opens. There is a Search field on the top. He types storage accounts here. There are two columns on the page- Azure marketplace and Featured. In the first column, are options such as get started, recently created, compute, networking, storage, and others. The host clicks the Storage menu and its contents display on the right. They include quickstart tutorials for storage account, Azure file sync, data box edge, data lake storage, and others. He clicks the storage account tutorial. [Video description ends]

And from there, it opens up a new blade where we could search for what we want to create. So if I look for storage account, we could search for it that way, or we can simply browse what's presented to us on the screen. So I could simply go down under the Storage category on the left and then on the right, within that, choose Storage account, which I will do.

The first thing we have to think about is the subscription to which this storage account will be tied. I only have one subscription so that's an easy choice. Then I have to associate this with a resource group. I could either create a new one or choose from an existing one in the drop down list, which I will do. I'll choose Rg1.

[Video description begins] A Create storage account dialog box opens. There are 4 tabs in the box- Basics, Advanced, Tags, and Review+Create. The Basics tab is activated. A brief description of Azure Storage displays at the top. The first section of the box is titled project details. It has 2 fields- Subscription and Resource Group. He leaves the subscription field with its default value- pay-as-you-go. In the Resource Group drop-down field, he selects Rg1. [Video description ends]

Further down below, I have to give a name to the storage account. Notice uppercase letters will not be allowed. Lowercase are fine. But if I start using uppercase letters. It gives me a little red error message here about the fact that the name can only contain lowercase letters and numbers. And notice if I back out of the capital letters here, that if I just put in a name that's already in use that isn't globally unique. It will tell me. So I'm going to go ahead and call this eaststorageaccount. Now if I put in 1, it'll determine whether or not that's a unique name. And in this case it is because we've got the green check mark. We don't have the red error text. And of course, we always need to make sure we adhere to organizational naming standards as it applies to the creation of Azure resources. For the location, I'm going to specify Canada East, that's my region. The performance is either Standard or Premium.

[Video description begins] He types eaststorageaccount1 in the storage account name field. He selects Canada east in the Location field, the second field in this section. The performance field has 2 radio options- Standard and Premium. He selects standard and clicks the drop-down menu in the next field, Account Kind. There are 3 options here- Storage V2, Storage, and Blob Storage. He selects storage V2 (general purpose v1) option. 2 options-Cool and Hot - display in the Access Tier field. When he selects storage (general purpose v1) the Access Tier field disappears. [Video description ends]

In other words, with Standard, do we want to use older hard disk technology like magnetic hard disks that spin. Or the newer solid-state storage which provides better performance? Of course, it also means an increased cost. Now, depending on what we're planning on doing with the stuff that we put in the storage account really determines the next couple of selections. So if we're not going to have frequent access to what we're going to store in the cloud, we might want to just stick with standard performance.

But if we're going to have frequent access and we want it to be speedy, maybe we should look at using Premium. Down below I've also got to specify the account kind, whether it's StorageV2, general purpose storage. Or general purpose version one storage, or BlobStorage. Now with general purpose version two type of storage, we have an access tier, Cool or Hot. Similar to Standard and Premium, for frequently access data and the speediest access we should be choosing the Hot access tier. If this is more of an archive type of usage scenario, we would look at using a Cool access tier.

Now, if I were to switch this to Storage general purpose v1, notice that we lose the option of selecting the storage tier. And if I were to choose BlobStorage, binary large object, we then get a couple of additional options for replication. So the first option is locally redundant storage or LRS. Now, this means that we've got some replication that will occur within the Azure environment but at a very small level. Not, for example, across regions. Whereas Geo-redundant storage, if we were to select that, does provide replication across Azure regions geographically. And the benefit of doing this is that if there's some kind of a large-scale disaster or outage within an entire geographical region.

Well, your data's already been replicated elsewhere, and you can access it that way. Then we've got another variation called Read-ahead geo-redundant storage, RA-GRS. So essentially, this is similar to replicating across Azure regions, the difference being that we would have read-access only to a replica. So depending on what your storage requirements are will determine what you select here. It's important to realize that if we were to choose StorageV2 general purpose v2.

That we can change it later on if we want to for example, BlobStorage. If we're going to be working with storage, let's say of virtual machine hard disks. So we can always change our mind later. So generally speaking, the general purpose v2 account kind is what you'll see used more often than not in Azure. So I'm going to go ahead and click Next.

[Video description begins] He clicks the Next button and the Advanced tab gets active. The page has 3 sections- Security, Virtual Networks, and Data lake storage gen2. [Video description ends]

Here we have a couple of options such as whether we want to enable secure transfer. This would mean only allowing connections over HTTPS or newer versions of SMB, the Server Message Block protocol. As opposed to older, less secure standards. So I'm going to leave that on Enabled.

[Video description begins] In the security section, there is a field named secure transfer required with 2 radio options- Disabled and Enabled. He selects the Enabled option. [Video description ends]

Then we can determine where we want to allow access from in terms of virtual networks. And currently, it says All networks. If I were to click Selected network, then from the drop-down list, I could choose an existing Azure virtual network that I previously have defined. However, I'm going to leave it on All networks for now.

[Video description begins] The virtual networks section has a field allow access from. This field has 2 radio options- all networks and selected network. He selects the all networks option. [Video description ends]

We're going to talk about data lake storage later on, so I'm going to leave that disabled as a default setting, and then I'll click Next.

[Video description begins] The Data lake storage gen2 section has a field named hierarchical namespace. This field has 2 radio options- Disabled, the Default Option, and Enabled. He leaves the field with the default option. Then, he clicks the Next button. [Video description ends]

So we then get to decide whether we want to assign a tag to this storage account. And remember, tagging is just metadata, it's extra information that you might use here. So you can search, or sort, or assign costs to a department or a project. And from the name drop-down list, if I've already defined a tag before which I have, it'll show up. I've already used a tag called project. So go ahead specify that.

[Video description begins] The third tab- Tags- gets active now. A brief description displays. It reads: tags are name/value pairs that enable you to categorize resources and view consolidated billing by applying the same tag to multiple resources and resource groups. A note displays: Note that if you create tags and then change resource settings on other tabs, your tags will be automatically updated. There are 3 fields in this tab- name, value, and resource. [Video description ends]

Then I can give it a value, and I can also see any existing values I might have used for tagging. In this case, ProjectA. I'm going to go with it. I could add a multitude of tags but I'm just going to leave it that way for now. Technically, I don't have to add tags at all.

[Video description begins] He selects project in the name field, project A in the Value field and Resource Account in the Resource field. [Video description ends]

Then I'll click Next to review my settings.

[Video description begins] He clicks next and the tab Review+Create gets active. All the storage account settings display. The message validation passed displays on the top. A link captioned download a template for automation displays at the window bottom. [Video description ends]

Now notice it says the validation has passed based on my selection. We have a little summary here of what's going to be created. I also have the option to download a template for automation. That is an ARM template that uses JSON file syntax. And why would I do that?

Well, I might download it if I want to be able to deploy a storage account with all these settings from the template in the future. Maybe even using the Azure CLI or PowerShell, which is way quicker than doing it here and clicking on all these things in the screen. So it allows for repetition, automation, that type of thing. However, I'm okay with this. I'm going to click on the Create button to create the storage account.

[Video description begins] A message window displays on the top-right corner and it says: initializing deployment. A progress bar displays there. [Video description ends]

And it's taking us into an overview screen for the deployment of our new storage account.

[Video description begins] Once the deployment is complete, an overview screen displays. It has a navigator with options-overview, inputs, outputs, and template on the left. 4 buttons display on the right, namely Delete, Cancel, Redeploy, and Refresh. The text- Your deployment is underway- displays on the screen in large font. [Video description ends]

We can see some information related to it down below. But at the same time, I can simply go over to All resources on the left. And after I refresh it, we'll see that we do have our new storage account listed.

[Video description begins] He clicks the all resources option in the main window navigator and its page displays. It has buttons- add, edit columns, refresh, assign tags, delete, export to CSV, and try preview. Below the buttons the subscription mode displays. Then, filter options display, namely filter by name, resource groups, types, locations, tags, and grouping. According to the filter options selected, search results display in a table format. Its columns are name, type, resource group, location, subscription, and tags. The eaststorageaccount 1 displays in the table and the value under tags column is 1. [Video description ends]

And like always, we can see the resource group, it was deployed into the region or location. And in this case, if you've added the Tags column, you'll see that here too. The Tags column is not normally here by default unless you go to Edit columns,

[Video description begins] He clicks the Edit Columns button and its window opens on the right. All the available columns are listed on the left side and the selected columns on the right. Between the two column types are right and left arrow buttons for adding and removing columns. 5 column names display under selected columns, namely- type, resource group, location, subscription, and tags. [Video description ends]

select it on the left. And then click the arrow to move it on the right, which I've already done. So therefore, I can see some tag information. If I were to click on that storage account, it opens up the properties blade for it.

[Video description begins] He closes the edit columns window and returns to the storage account window. Here, he clicks eaststorageaccount 1 and its detailed page opens. There are 4 buttons here, namely Open in Explorer, Move, Delete, and Refresh. A navigator on the left shows menus such as Tags, Diagnose And Solve Problems, Events and Settings. [Video description ends]

And I could go back and take a look at the tags and make changes to it. Or I could go through and look at the settings specific, in this case to a storage account. Such as geo-replication options, if I want to enable that type of item.

[Video description begins] He clicks geo-replication in the settings menu group. A world map displays on the right. [Video description ends]

Also, I can see if I want to configure blob service settings and so on.

[Video description begins] He clicks blobs in the blob service menu group. Its page displays on the right. There are 4 buttons on the top- Container, Refresh, Delete, and Change Account level. A Search field is also present and a table with columns name, last modified, public access, and lease state. [Video description ends]

So we have a number of properties available then after we've configured an Azure storage account. But there you have it, that's how you can initially create the storage account here in the Azure portal.


Azure Blob Storage GUI Management
In this demonstration I'm going to use the Azure portal to create a new Azure storage account, and then we'll configure to be used for Blob storage. To get started here in the portal, I'm going to click Create a resource over on the left.
[Video description begins] The Microsoft Azure portal home page displays in a browser window. The address bar contains the URL: https://portal. azure.com /#home. The page is divided into 2 sections. In the left section, is a menu bar with menus such as Create a resource, Home, Dashboard, All services and Favorites. The right section shows the page linked to the menu item clicked on the left. He clicks the Create a resource menu. [Video description ends]
I want to create a storage account, so one way for me to do that, is to go under the Storage category here and then on the right to choose Storage accounts. I'm going to go ahead and do that.
[Video description begins] A dialog box titled New appears. It has a search field at the top. Below that are two columns-one titled Azure Marketplace and the other Featured. Under Azure Marketplace are various menu items such as Get started, Recently created, Compute, Networking, Storage, and others. In the featured column, detailed contents of the selected menu displays. The host clicks the Storage menu and its contents display on the right. He clicks the Storage account tutorial from here. [Video description ends]
So, now I have to tie it to a resource group. So I've already got one called Rg1, and down below I have to give it a name.
[Video description begins] A Create storage account window displays. It has 4 tabs- Basics, Advanced, Tags, and Review+create. The Basics tab is active now. It has a brief description about Azure storage and a section titled PROJECT DETAILS. He selects Rg 1 in the Resource group drop-down field. [Video description ends]
Now notice if I start typing in things like capital letters, it says here that the account name can use only lower case letters and, of course, numbers. And it needs to be between 3 and 24 characters, fine. No problem, because when we plan out how we're going to name our Azure resources, we should have a standard naming convention. So in this case, I'm going to call this stor, for storage account, S-T-O-R. And then I'm going to give it a number to make it unique.
[Video description begins] He scrolls down the window and reaches a section titled INSTANCE DETAILS. The first field in this section is the Storage account name. He types stor14567 here. [Video description ends]
Then, I'm going to choose a storage location that reflects where it might be used geographically. Then I get to choose between Standard and Premium types of storage, where I can determine, for example, whether or not I have access to these cool and hot access tiers. If it's standard, I do have access to that, and I could choose BlobStorage for the account kind, but I could also choose Premium for performance.
[Video description begins] He selects Canada East in the Location field. The Performance field has 2 radio options- Standard and Premium. He selects Standard and clicks the drop-down menu in the next field, Account kind. There are 3 options here- StorageV2, Storage , and Blob Storage. He selects StorageV2 option. When he clicks the Premium radio option, the Account kind field shows only the first 2 options. He finally clicks the Standard option and Blob storage option. [Video description ends]
Now, notice I don't get BlobStorage available when I do that. So it's important to understand the ramifications of the choices you make here and what features will follow down below. So I want to work with BlobStorage here, so I'm going to leave it on standard, and I'm going to choose BlobStorage. Then I get to determine if I want replication. So locally-redundant storage, geo-redundant storage, and read-access geo-redundant storage. Think of locally redundant storage as meaning that your data is replicated only within an Azure data center.
So therefore, if you've got a problem with an Azure data center, you could lose all your data if you don't have it stored elsewhere. Geo-redundant storage will replicate your data across multiple Azure regions. So, in the case of an Azure data center problem, even an Azure regional disaster, your data's still been replicated elsewhere. Then you've also got read-ahead geo-redundant storage, RA-GRS. And what this means is that you've got a primary replica that's writable, and then the replica itself from that is only allowable through read access. So in this case, I'm going to leave it on locally-redundant storage. I'm going to leave it on the hot access tier under the assumption that I'm going to be accessing the Blobs that I will populate the storage account with on a frequent basis.
[Video description begins] The next field is Replication. There are 3 options in its drop down menu- Locally-redundant storage, Geo-redundant storage, and Read-access geo-redundant storage. He selects Locally-redundant storage. The last field is Access tier and it has 2 radio options- Cool and Hot. He selects Hot. Then, he clicks the Next button. [Video description ends]
Now, I can click Next to view any advanced options. Do I want secure transfers enabled? Do I want to limit the virtual networks from which access is allowed to this storage account? I'm not going to change anything here.
[Video description begins] The Advanced tab gets activated. The page has 3 sections- SECURITY, VIRTUAL NETWORKS, and DATA LAKE STORAGE GEN2. [Video description ends]
I can click Next and then apply tags if applicable.
[Video description begins] The Tags tab gets activated. A brief description displays. There are 3 fields in this tab- NAME, VALUE, and RESOURCE. He doesn't update any of the fields and clicks Next. [Video description ends]

I'm just going to click Next to review my settings. So it's running a file validation based on my selection looks good, so at this point I'm just going to go ahead and create my BlobStorage account.

[Video description begins] The last tab, Review+create, gets activated. It contains all the options he chose. A progress bar on the top shows the review and validation progress. When the review completes, a message, Validation passed, displays at the top of the screen. He clicks the Create button and a progress bar displays in the top-right corner of the window. It is captioned- Submitting deployment. [Video description ends]

We can see clearly our deployment is underway, we have a link here to our new storage account down below. But, notice on the left also, we've got a view just for Storage accounts.

[Video description begins] A new page displays. It is titled- Microsoft.StorageAccount-2019030007131545- Overview. The page is divided into 2 sections-left and right. The left section has a search field and 4 menus- Overview, Inputs, Outputs, and Template. The right section has 4 buttons- Delete, Cancel, Redeploy, and Refresh. Below the buttons, the deployment progress status displays. A table with all newly-created resources display. There is just 1 resource here- stor14567- he just created. [Video description ends]

So if I click that, I'll see any storage accounts. And remember, if you don't see your new storage account here, you can always click Refresh until such time that it shows up and the deployment has completed. So ours is showing up here, I'm going to click on the link for

[Video description begins] There are 3 storage accounts here, including Stor14567, shown as links in a table. In the top-right corner the deployment status shows completed. He closes the window. [Video description ends]

the name of my storage account to go and do its properties blade. And there are a number of things that I can do here, for

[Video description begins] He clicks the stor14567 link and its page opens. There are 2 sections - a navigator on the left with menus. The right section shows contents of the menu clicked in the navigator. [Video description ends]

example, if I scroll all the way down, I can click on Blobs and it says, we don't have any containers yet. Well, remember, containers are kind of like folders used to organize Blobs. So what I'm going to do then is click Container. I'm going to call this one pics, for pictures.

[Video description begins] He clicks the Blobs menu in the Blob service group in the navigator. Its window opens on the right. There are 4 buttons here- Container, Refresh, Delete, and Change access level. He clicks the Container button. A section titled New container displays. It has 2 fields- Name and Public access level. Two buttons- OK and Cancel- display at the bottom of the page. [Video description ends]

And then down below I can determine whether it should be private, so no anonymous access allowed. Or anonymous read access for the blob only, or anonymous read access for containers and blobs. Why don't we start up here with Private (no anonymous access); OK, and

[Video description begins] He types pics in the Name field. He clicks the drop-down menu in the Public access level field. There are 3 options- Private ( no anonymous access), Blob (anonymous read access for blobs only), and Container ( anonymous read access for containers and blobs ). He selects Private. Then, he clicks the OK button. [Video description ends]

after a moment there's the pics container. So I'll click it to open it up. That gives me a new properties blade related to the container, and from here I can upload Blobs.

[Video description begins] The pics container appears in the contents as a link. He clicks the link and the pics page opens. The page is divided into 2 sections- a navigator on the left and the contents on the right. There is no content in the pics container. In the right section are buttons captioned Upload, Refresh, Change access level, Delete, Acquire lease, and Break lease. [Video description ends]

So I'm going to go ahead and upload Blobs. When I do that on the far right, I'll click the Select a file button.

[Video description begins] He clicks the Upload button. A new window titled Upload blob, appears in the far-right side of the screen. There is a files field where a file can be searched to be uploaded as a blob. A check box captioned Overwrite if files already exist is also present. An Upload button is present at the bottom of the window. [Video description ends]

After you've selected a local file, and you can have multiple files. At this point you can open up Advanced to specify details about the upload whether it should be treated as a block blob or an append blob. In this case it's going to be a block blob.

[Video description begins] He searches the file dog.jpg in the Files field. Then, he clicks the Advanced drop down arrow. The Advanced section displays. It has 4 fields and an Upload button. The Authentication type field has 2 options- OAuth and SAS. The Blob type field is a drop-down type with 2 options- Block blob and Append blob. The Blob size field has a default value of 4MB and the last field Upload to folder is blank. [Video description ends]

And I'm going to click Upload. And after a moment we can see it's uploaded this jpg. It's showing up right here in the list, and

[Video description begins] When he clicks the Upload button, a message box displays in the top-right corner of the window. It says: Upload completed for dog.jpg. Dog.jpg file now shows in the pics page, as a clickable link. [Video description ends]

if I actually click on it, I'll see some details, or properties related to it. Notice that by default server-side encryption is enabled for protection of data at rest. So what I'm going to do then for the URL is click the little copy icon, because I'm going to open a new web browser window, we're going to see if we can access this Blob data, over HTTP using a web browser.

[Video description begins] When he clicks the dog.jpg link, its page displays. The page has 4 tabs- Overview, Snapshots, Edit blob, and Generate SAS. The Overview tab is active now and the blob URL displays. He clicks the copy icon next to the URL. [Video description ends]

Now, when I paste that URL up here, by default, I get this kind of an error message, resource not found. Well, that's because we didn't allow anonymous access, if you recall.

[Video description begins] He opens another browser window and pastes the copied URL there. An error message displays that reads: This XML file does not appear to have any style information associated with it. [Video description ends]

So if I go back into Azure, and why don't we go back to the point, I'm just using my links here, my breadcrumb trail. Why don't we back to the point where we can actually go into our folder. So there's pics, and I'm going to click, I'm looking at the overview on

[Video description begins] He goes back to the Azure portal window and clicks the pics link. The pics container window opens. [Video description ends]

the left, I'm going to click the Change access level button at the top. And here it is, private (no anonymous access). Let's say we choose Blob (anonymous read access for blobs only).

[Video description begins] He clicks the Change access level button on the top of the window. The page opens and he clicks the Public access level drop-down field. He selects the Blob (anonymous read access for blobs only) option in the field. [Video description ends]

Okay, let's try that. So I'm going to click OK. It says it successfully applied the change. So, let's go back into our browser here where previously it failed, and let's refresh it. And sure enough, now we have access to the picture of the dog. So we can see how we can build a storage account and configure a variety of Blob Storage options, and then how we can start to work with content in the Blob Storage account.



Azure Blob Storage CLI Management
  - You can use the Azure CLI to manage Azure storage accounts and the contents within them.
  - To get started here, I'm going to build a new storage account in Azure. I've already run az login, and I've already authenticated to my Azure account. So the next thing I want to do here is I'm going to go ahead and run the az storage account create, command prefix. Where I'm going to use -n for name, and I'm going to call this store, let's say I'm just going to make up the name of the storage account. Although make sure you adhere to the naming standards for Azure resources in your organization.

[Video description begins] He types and executes the following command: az storage account create -n stor1988 - g rg1 -l canadaeast --sku "Standard_ LRS ". [Video description ends]

Then I'm going to use -g and specify I want this deployed in a resource group I've already created called rg1. And -l for location, or Azure region, in this case let's say canadaeast, and then --sku to determine the type of replication I want. In this case, I want "Standard_LRS". That's locally redundant storage replication, essentially within an Azure datacenter, as opposed to geo-redundancy across regions.

So I'm going to go ahead and do this and press Enter. So it's going to create my storage account, and it's going to be called, as you can see stor, in this case, 1988. And we can see it's returned a lot of information about what it's just done. But what we're looking for here is the provisioningState being set to Succeeded. So we're going to clear the screen and run az storage account list.

[Video description begins] Next, he types and executes the following command: az storage account list. [Video description ends]

Now again, I'm going to get a lot of information for each storage account, which is fine. But let's say I just want to see the names of the storage accounts. So I'm going use the up arrow key to go through my previous command history. And I'm going to use a vertical bar or pipe symbol, now you can shift your backslash key on your keyboard to get that. Which means I want to take the result of the command on the left and feed it into what I'm about to specify to the right of the pipe. Which is the Windows find command.

And I'm going to tell it in quotes I'm looking for "name", N-A-M-E. This is a little more digestible. For instance, here I can quickly determine that yes, our new storage account, stor1988, has been created. Now when you want to work with a storage account, let's say programmatically as a developer. Or like we are here in a command line environment, you need an access key. Well here in the portal, if I go to the Storage accounts view, I can see our storage account is there. If I click on it, there's access keys shown here in the Properties blade.

And we've got a couple of access keys, key1 and key2, and you can regenerate them independently of one another. So that one could still be used by code that might reference a specific connection string or a key. While the other one, you are changing, because from a security standpoint, it's pretty smart to change keys periodically to enhance security. Now I could copy the keys here.

So I'm going to copy, let's say, the first key. It doesn't matter which one you use when you are using command line tools or programmatic access. Back here at the CLI you might wonder, well how do I do that from the CLI? How do I list keys? Well you can if you really want to. You would run az storage account keys list, and then you'll see the same type of thing that we would have looked at. Now, of course, I get an error because I didn't tell it which storage account. Well, that might be useful.

So how about --account-name stor1988, and then the resource group we have to specify too, --resource-group, in this case, rg1. And maybe I'll tell it --output, in tabular format, so table. And then that way we'll be able to easily digest Key1 and Key2. So we can see it and we could highlight it and copy, but I've already copied it. But you might wonder, why do we care? Why do we have to copy it? Well because I want to create a container in my storage account and then upload an on-premises file into that container.

But you can't do that until you start working with the access key, one of them, either one, it doesn't matter. So here we go, I'm going to clear the screen, and what I want to do is I want to create a container, so az storage container create. Now if I don't know what to from here, I can use --help to get help on what follows next, along with examples.

[Video description begins] He types and executes the following command: az storage container create --help. [Video description ends]

However, I'm just going to bring that back up here and remove the --help. At the end to create my storage account container, I'm going to specify name, --name. Let's call it pics, for pictures, --account-name, with the two c's here. Is going to be stor, S-T-O-R 1988, but that's not all I need because I need the account keys. So --account-key and I'll just paste that key in there. You wouldn't want to memorize that, so you can also stuff that into a variable or work with it however you please. So I'm going ahead and press Enter to build that container,

[Video description begins] He types and executes the following command: az storage container create --name pics --account - name stor1988 --account -key. He types the account key and presses enter. The output displays: { " created " : true }. [Video description ends]

and it looks like it says "created": true. Well, that's good news. Here in the current directory on drive C called samplefiles, if I do a dir, I've got a file called dog.jpeg.

[Video description begins] He types and executes the following command: dir. The output displays: volume in drive C is OS. The contents of samplefiles display. There are 2 directories and one file- dog.jpg in samplefiles. [Video description ends]

Let's upload that. So do that, I'm going to run az storage blob upload, that makes sense, and then I'm going to use --container-name, which in this case is pics --name. What do you want to call the blob? How about I call it the same thing, dog.jpg --file. Where's the file? Well that would be c:\samplefiles\dog.jpg.

There's no spaces in my folder or filename so I don't need to put anything in quotes. But bear in mind, that could be an issue depending on how you're doing this. I have to tie this to my storage account, of course, --account-name is stor1988. Make sure we type that in correctly. It'll always give us errors if we don't spell things correctly, so it's not a problem to quickly fix them. Next thing is the account key, of course, --account-key. And I'll just go ahead and paste that in there. And assuming the syntax is correct, when I press Enter, it will upload that file. And we're just going to flip over in a moment to the Azure Portal to check that out.

[Video description begins] He types and executes the following command: az storage blob upload -- container - name dog . jpg -- file c: \ samplefiles \ dog . jpg -- account - name stor1988 -- account - key. He types the account key and presses enter. The output displays: finished 100%. [Video description ends]

Okay, it looks like it's finished. Let's go to the portal.

[Video description begins] The Microsoft Azure portal home page displays in a browser window. The page is divided into 2 sections. In the left section, is a menu navigation pane. The right section shows the page linked to the menu item clicked on the left. He scrolls down the navigation pane. [Video description ends]

When we were last here in the portal, we were looking at our storage account properties blade and we had gone to the access keys. Well, let's drill down a bit further down, shall we? Let's go down into Blobs, and there's the pics container, and

[Video description begins] He reaches the Blob service menu group and clicks Blobs. Its window displays on the right. Storage account is stor1988 and a table shows all the contents of stor1988. There is only 1 item -the pics container he just created. He clicks it. [Video description ends]

there's the dog JPG file. So we can work with this if we need to using the Azure CLI.

[Video description begins] The contents of the pics container display on the right. It contains only 1 file- dog.jpg. Its Blob Type is Block blob and its Lease State is Available. [Video description ends]


Azure Blob Storage PowerShell Management
We can manage Azure Storage accounts using Windows PowerShell cmdlets, either in the Azure Cloud Shell, which is accessible in the portal, or in this case here, on-premises where I've already downloaded and installed Azure PowerShell. So I've already run the connect-az account cmdlets to connect to my Azure account.
[Video description begins] The Administrator Windows PowerShell window displays. The command prompt reads PS C:\. [Video description ends]
So to build a storage account, I'm going to run a new-azstorage account cmdlet. Now, what I need to specify is the resource group name into which I want this deployed. So -resourcegroupname, in this case rg1, I've already got it created. -name for the storage account, in this case will be stor, let's say, 1989, following naming conventions of my organization. -location, that's the Azure geographical region, is going to be canadaeast. The -skuname, for replication purposes here, will be standard locally-redundant storage, or lrs. So in other words, within the Azure data center. Let's go ahead and press Enter and see what happens.
[Video description begins] He types and executes the following command: new -azstorageaccount -resourcegroupname rg1 -name stor1989 -location canadaeast -skuname "standard _lrs". [Video description ends]
Well, what happened is our storage account was created. Now, I am hard wiring everything like the name of the resource group and the name and the location. Of course, this is just an example. When you are scripting with PowerShell, with the CLI, you can get very fancy with this and use parameter values that you might ask the user for when running a script, and so on.
[Video description begins] The output displays. It is a table with columns storageaccountname, resourcegroupname, location, skuname, kind, accesstier, ptcreationtime, and provisionstate. One row of data displays. It tells the details of stor1989. Its ResourceGroupName is rg1, Location is Canadaeast, skuname is standardLRS, Kind is Storage, and ProvisioningState is Succeeded. [Video description ends]
But let's move on. Because now, to verify our work, we could use the portal, but instead, why don't we just run get-azstorageaccount. So we should see our newly created one, stor1989, somewhere in the list, and here it is right here.
[Video description begins] He types and executes the following command: get -azstorageaccount. The output displays. It is a table with the same columns as of the previous command, minus the column ProvisioningState. There are 6 rows of data in the tabtle. Stor1989 is also present. [Video description ends]
So we know it's there, and we know that we're doing this correctly. Let's do more, because this is so much fun. So I'm going to make a variable here called $ctx, for context. And the idea here is I can attach a context to PowerShell commands that work with a storage account. And so then I don't have to always repeat the storage account name and stuff like that.
So I'm going to run this variable, or create this variable, I should say, $ctx. It can be called anything. And it will contain, or =, the result of running get-azstorageaccount and -r rg1, that's the resource group into which my newly created storage account was deployed. And the name of it, if you recall, was stor1989.
[Video description begins] He types and executes the following command: $ctx = get -azstorageaccount -r rg1 -name stor 1989. [Video description ends]
Okay, so I want to make a reference to that storage account, and it's going to be referenced through the $ctx variable. So if I were to type $ctx, I can see that it's returning back information about that account. Actually, if I run $ctx.context, it gives me endpoint or
[Video description begins] He types and executes the following command: $ctx. The output displays. It is a table with all the original columns. The table contains a single row with details about stor1989. [Video description ends]

connection information, and that's really what I need here. Okay, so now that we have that knowledge, let's work further with it.

[Video description begins] He types and executes the following command: $ctx.context. The output displays. It is detailed information about stor1989. [Video description ends]

What I want to do here, really, is I want to create a container in my storage account, but we had to do that stuff first to set it all up. So new-azStoragecontainer. And then -name, what would you like to call it? How about we call it pics, for pictures, to follow our examples in some of the other demos. And I'm going to use -context and just give it my variable. Now, if I just give it, I'll just put here $ctx, because it is a variable.

[Video description begins] He types and executes the following command: new -azstoratecontainer -name "pics" -context $ctx. The command contains a typo so the output is incomprehensible. [Video description ends]

If I put that in, it doesn't really know what I'm talking about. And that's because if I bring up the arrow key, I want to reference the context property of the storage account, so .context.

[Video description begins] He types and executes the following command: new -azstoratecontainer -name "pics" -context $ctx. context. The command contains a typo. [Video description ends]

Well, if you spell things incorrectly, like I've done here, I didn't spell storage correctly, it's never going to work anyway. Let's just go back to our original version. Just so we can demonstrate here. But we need spell the cmdlet correctly. So storage, okay, yeah, new azstoragecontainer, okay, so it still doesn't like it, that's fine.

[Video description begins] He corrects the typo and changes storatecontainer to storagecontainer. Then, he executes the command. [Video description ends]

And that's what we really wanted to see. But if we reference the context property of our variable, it just loves it. So it's created our pics folder.

[Video description begins] He types and executes the following command: new -azstoragecontainer -name "pics" -context $ctx.context. The output displays. It is a table with 3 columns- Name, PublicAccess, and LastModified. The pics folder details show in the table. [Video description ends]

So let's get some content up there. If I change directory into the sample files folder I've prepared here,

[Video description begins] He types and executes the following command: cd .\samplefiles\. The command prompt changes to PS C:\samplefiles. [Video description ends]

I've got a picture of my dog, and the file's called dog.jpg.

[Video description begins] He types and executes the following command: dir. The output displays. It shows the content of directory: C: \ samplefiles. There is a table with 3 columns- mode, lastwritetime, and length name. There is just 1 file dog.jpg in the samplefiles directory. [Video description ends]

Who doesn't like pictures of dogs? So I'm going to go ahead and upload that to the pics container in my newly created storage account. So to do that, I'm going to run the set-azstorage, spell storage correctly this time, blobcontent. And then -file is going to be c:\samplefiles. There's no spaces here around my file name or within my file name, I should say, or within my folder name. So I don't have to put this in quotes because of that reason. And now what I want to do is tell the container I want that to go in, so -container, which in this case is pics. And then what do you want to call the blob? Well, I want to call it dog.jpg, although it could have a different name. And then, of course, once again -context, when this time we know what we're going to do. It's going to be our variable ctx, which points to our storage account and then call upon the .context property of that storage account.

[Video description begins] He types and executes the following command: set -azstorageblobcontent -file c:\ samplefiles\dog.jpg -container pics -blob dog.jpg -context $ctx .context. [Video description ends]

And we can see it looks like it's in the midst of uploading our jpg. So once that completes, we'll just double-check our work by flipping over to the portal, I guess we'll do that right now.

[Video description begins] The Microsoft Azure portal home page displays in a browser window. [Video description ends]

So here in the portal, in the Storage accounts view, indeed, there's the stor1989 storage account. If I click it, and if we scroll down to the Properties blade and

[Video description begins] He scrolls down the menu section and clicks the Storage accounts menu. The window opens on the right and all the storage accounts display there. Stor1989 is also shown here as a link. [Video description ends]

click on Blobs on the left, we can see pics on the right.

[Video description begins] He clicks the stor1989 link and its window opens on the right. This page is also divided into 2 sections- a navigator on the left and the detailed page on the right. He scrolls down the navigator to the Blob service menu group. Here he clicks the Blobs menu and its window display here. There is just one container, pics, shown as a link. [Video description ends]

And within it, we should see dog.jpg.

[Video description begins] She clicks the pics link and its window displays. Dog.jpg is listed in its contents. [Video description ends]


Azure Files
If you've performed IT network administrator duties over the years, you've probably at some point shared a folder on a computer. And then connected to it from other computers.
[Video description begins] Screen title: Azure Files. [Video description ends]
And that's exactly what's going to happen here with Azure files, except that the shared folder's hosted in the Cloud. So it's a cloud-based file share that allows access over the SMB protocol, Server Message Block. Which is really what is used with Windows file and print sharing. You can mount these shares in the Azure Cloud from virtual machines running in the cloud. Or you can do it from on-premises machines and reach into Azure to get to that shared folder, assuming that firewall rules allow that.
So the client devices might be running a Windows operating system, the Mac OS, or even a Linux variant. As long as it supports SMB, it doesn't matter. That also includes apps on smartphones. So let's say you've got an Android smartphone, you could install an app that supports SMB and map a drive into the Azure Cloud to do this. So to manage Azure files, we can use the Azure Portal GUI. We can also manage and work with Azure file shares using the Azure CLI, and also, using Azure PowerShell cmdlets.
[Video description begins] A process infographic displays. It has the three steps to be followed for Azure file management. The first step is Azure Portal. The second step is Azure CLI, and the last step is Azure PowerShell commandlets. [Video description ends]
In order to work with Azure files, what do you need? First, you need a storage account in Azure. Within the storage account you can then configure your Azure file share. So you have to give it a share name and a quota, which is really just a size limit. Now remember, access from SMB, the Server Message Block protocol needs access to TCP port 445. So depending on where the clients are coming from that need to map to this or mount this shared folder. You're going to have to make firewall provisions to allow this to happen.
So from Windows, we might map a drive letter either using the GUI or the net use command. Like we would normally to map to a file server on-premises that has a shared folder. You can connect directly to the UNC path. You could even use a mount point path. Which really just means it's more like the Unix and Linux world. Where you've got a folder that you connect to that points to the other shared folder out in the Azure Cloud, as opposed to a drive letter.
