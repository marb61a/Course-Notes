                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 43


Network Security Group CLI Management
  - Create a network security group using the Azure CLI
    - Ensure that we have downloaded and installed the Azure CLI and I've already run the az login command to authenticate to Azure
    - At this point, I'm going to run az space network space nsg, for network security group, create
    - From here, if we use the help command --help, we will learn about the syntax related to the creation of a network security group
    - Go ahead and bring up that command using my up arrow key and just modify it by removing --help
      - We are going to use -g, then tie this network security group or deploy it into a resource group
      - We can then name it for example call it, with -n for name, Windows_NSG
      - Assuming I need a network security group to control traffic into and out of Windows virtual machines, this will be a good name
      - Go ahead and just do that and once that's finished, we can also get a list of virtual networks
      - So we can see it looks like it created our Windows_NSG, network security group
      - t any point in time I could run az space network space nsg space list
  - What I could do is also run that command, but pipe the result to the find command and tell it to look for name
    - Now we are also going to get the names of rules within the network security groups
    - But at least we can see we have less to look at, and indeed, our Windows Network Security Group lives on
  - The next thing we're going to do is create a rule within that network security group to control traffic
    - So we are going to run az space network space nsg space rule space create
    - This is going to be for a resource group of Rg1 --nsg-name, in this case is Windows_NSG
    - We can set the priority, let's say, for this rule to value of 200, which is relative to the other rules to control the execution
    - We'll use --source-address-prefixes anywhere, so asterisk, --destination-address-prefixes, same thing, going anywhere
    - Then we can specify also the destination port information. So, --destination-port-ranges
    - In this case we want to make an allowance for port 443 --direction is going to be inbound 
    - Because network security groups can also control traffic going out. -- access
    - We can either allow or deny, in this case, allow, the protocol, -- protocol, is tcp. And finally, let's give this thing a name
    - How about AllowInboundHTTPS and then go ahead and press Enter on the assumption that everything was typed in correctly
    - Clear the screen. az space network nsg rule space list and --resource-group Rg1
    - And what's the name of our security group? --nsg-name, it's Windows_NSG, and press Enter
  - We got the same kind of output that we got when we created that rule
    - We can see the destinationPortRange indeed is for port 443, and that this is for an Inbound direction and we're allowing that traffic


Network Security Group PowerShell Management
  - You can also use PowerShell to create and manage network security groups in Azure
    - Here we've already got a PowerShell script that we've opened up in the PowerShell ISE, the integrated scripting environment
    - The first command is Get-AzNetworkSecurityGroup
    - So having our cursor blinking on line 1 where that command exists, we are going to click the Run Selection button
    - This is going to list back, of course, the Azure network security groups and the details that go along with each of them as we can see
  - However, in line 3 we are filtering it out and only showing the name
    - We start by piping it to the select alias in PowerShell, and telling it that the only prop of interested in is name
    - So let's go ahead and run that line, and see how the output differs
    - That is much cleaner looking, because now we see only the names of the network security groups 
    - As opposed to all of the details for each and every one of those network security groups
  - To build a new network security group we would use the New-AzNetworkSecurityGroup cmdlet
    - Where we have to specify a name,- name, we deploy it into a resource group
    - So we use -resourcegroupname for that, and then we specify the Azure region
    - We are going to go ahead and run that line, so select it and run the selection
    - After a moment we'll see that we've got a new network security group here
  - Clear the screen down here in PowerShell, why don't we run that command again where we just select by name
    - How about we do that, let's just clear this up and let's see what we get returned here
    - What we're looking for is that we've got our Linux NSG or network security group that exist
    - And indeed it is returned from that PowerShell cmdlet
  - What are we doing in line 7? we are using the back tick character so that we can have this wrap across three lines, it's really one big statement
    - What we're doing here is we're running Get-AzNetworkSecurityGroup and we are calling it by name
    - We want to get the Linux network security group, and here's the resource group it's in
  - Once we have a handle on that object, we are piping that output to the Add-AzNetworkSecurityRuleConfig cmdlet
    - We're adding a rule that's called AllowSSH, so we're allowing access that's destined from an inbound direction for TCP port 22, as we see way down here
    - We can see all the other details like the priority, the sourceaddressprefix and in this case from anywhere, *the sourceportrange*, destinationaddressprefix*
  - Having done that, that's the middle command as we can see selected here
    - Then we take the result of that and we pipe it to Set-AzNetworkSecurityGroup
    - We can write the settings to the security group that we got from the beginning of the command
    - Does that make sense? We get the network security group, get a handle on it, add a rule and then write it using the Set-AzNetworkSecurityGroup cmdlet
  - Make sure we execute lines 7, 8, 9 here as one expression
    - Select them and then click the Run Selection button
    - After a moment, it looks like it ran which we should check by going into the portal
  - Here in the portal in the All resources view, filter it for things that have NSG in the name
    - There's the Linux network security group, and if you look at our inbound security rules
    - There is the AllowSSH with the priority of 220, port 22, and so on, and of course it is allowed
    - It's pretty easy to work with network security groups using Microsoft PowerShell.


Configure a VM Jump Box
  - Create a jump box which is a machine that you can connect to
    - For example, from the Internet if you're working on premises, so that you have access into the Azure cloud
    - From the jump box you can then make remote connections to other internal Azure resources
    - Like other virtual machines that might not be publicly accessible directly
  - To get started, really we're talking about creating a virtual machine
    - Click Create a resource in the upper left here in the portal, it's going to be Windows Server 2016 Datacenter
    - Deploy this into an existing resource group and for the example call this JumpBox
    - Go ahead and deploy this into a specific Azure region of our choosing
    - Fill in the Username and Password information and then click Next and accept the disks
      - For networking this is going to go and do a virtual network called EastVnet
      - Specifically I'm going to put this in a subnet, let's say, called EastSubnet1, and it's going to make a new public IP.
  - That's fine, let's let it create that, because I need a public IP to get to the jump box
    - From the jump box we get to other internal resources that might not have a public IP
    - We are okay with this, we're just going to basically go through the wizard, we are okay with everything here
    - Then let's make sure validation is passed
    - And it is, so we are going to create this virtual machine
    - While that's happening, if we go look at our other virtual machines
    - We've got one here called eastwindowsvm1, and it's got a private IP allocated but not a public IP
    - This virtual machine is actually in the midst of being started
    - Go back and do a refresh now, in a moment, we'll see that it's actually up and running.
  - After a few moments, we can see that the two virtual machines are up and running
    - Again, we've got a virtual machine here that does not have a public IP, but it does have a private one
    - That's not our JumpBox, our JumpBox, if we click on it, in fact does have a public IP address.
  
  
