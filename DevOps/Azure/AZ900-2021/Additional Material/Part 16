                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 16


Azure VM Backup and the Portal (cont)
  - We are going to pull up the "Backup" blade which is where we initially came to link it to our vault
    - Instead now, of course, we have a status screen and we can see any "Alerts" or "Jobs", we can also see the "Last backup status"
    - It says, "Initial backup pending" because we just enabled them
    - We can also see the affiliation of this VM with the "Recovery services vault" and the "Backup policy" 
    - That's currently in use and any restore points that are available
  - We also have the option to perform an on demand "Backup now"
    - We are going to go ahead and click on that
    - We can specify the retention period for this backup, we'll accept the default value, and click "OK"
    - We don't have to do that because we have it scheduled
    - However, we can perform on demand backups whenever we feel the need
    - We can click the "View all Jobs" link to get to the jobs page, where we can see the configuration of backup for various servers, including "AppServer1"
    - We can also see that currently a backup is in progress
  - What's happening is a snapshot of the VM is being taken and the backup is stemming from that
    - Therefore, production workloads are unaffected when it comes to performing these backups, to protect your data in your Azure VMs.


Azure VM Backup and the CLI
In this demo, I'm going to use the CLI to enable backup of an Azure VM. Before I do that here in the portal, let's go to the VM in question called "AppServer2". We can see its state is that it's currently "Running". So I'm going to click on "AppServer2". The reason is because first of all, I want to check to see that it's not already associated with the recovery services vault because it can only be associated with one vault at a time.
So I'm going to scroll down under "Operations". I'm going to click "Backup". And what we should see is it prompting us to associate it with the vault. And that's great. It's not associated with the vault, but we don't want to do it here in the portal. While we're in here though, I'm going to scroll up and choose "Properties", because what I want to take note of is the ID, the "Resource ID" here for the VM. So I'm just going to copy that. [Video description begins] The host scrolls down to reach the Resource ID and copy it. [Video description ends]
We could acquire that in many different ways, including from the CLI, it doesn't matter. But I'm going to want that information because I'm going to want to check that backup protection was enabled in the CLI. And I'm going to need the ID to do that. So let's go into the CLI. [Video description begins] The host opens up PowerShell. "PS /home/danlachance72> is already written on the screen. [Video description ends]
So to enable VM backup, I'm going to run the "az backup protection", after which I'll then specify I want to enable it for VM. So "enable- for- vm- -resource- group", it is "Rg1". That's where my virtual machine is deployed in my vault as well. "--vault-name". And I'm going to specify my vault which is called "Vaul1 -- VM" and it's called "AppServer2". And I also have to specify the backup policy I want to use. So "--policy-name", the policy is stored within the vault. I'll just use the default one which is called "DefaultPolicy" and I'll press Enter.
Well, if you don't spell the name of the vault correctly, you'll get an error. Let me just spell that correctly and press Enter once again. Okay, and we have our returned JSON output. So all looks good. Let's clear the screen. Now what I want to do is just check the status. And we can do that here with "az backup protection check -vm".
This is where I need the "VM ID", [Video description begins] The host clears the Powershell screen and pastes the vm ID that he copied previously. [Video description ends] you can see from the parameter of the same name. And I've pasted in the resource ID for the VM that we copied from the portal previously. Let's press Enter and see what it returns back. [Video description begins] A message appears in the Powershell that reads "Command group backup is in preview. It may be changed/removed in a future release". [Video description ends]
Okay, this is good. What it's really telling me is yes, that backup protection is enabled for that VM and it's associated with Vault1. We can do the same thing by going back into the GUI and taking a look. So why don't we do that just to make sure? [Video description begins] The host minimizes PowerShell, returns to the Overview blade of the AppServer2. [Video description ends] So I'm just going to flip over to a different blade here in "AppServer2"'s properties.
And let's go all the way back down, yet again, under "Operations", and click "Backup". Because remember last time, what we were seeing is it was prompting us to associate the VM with a vault. Well, now that's no longer the case because we associated it with a recovery services vault for backup purposes using the CLI.


Azure VM Backup and PowerShell
In this demonstration, I'm going to be using PowerShell to enable Azure VM Backup. Now, in order for that to happen, you need a recovery services vault. Let's just take a look for that here in the portal just for a second. So I'm going to go to "All resources", and well, actually, we can just filter it from here, that's just as well. So I'll just type in a couple of letters here to make it unique, there it is, "Vault1". I want to just double check, first of all, that there is a set of "Backup policies" in here.
There always are, there are a couple of default ones, including one called "DefaultPolicy". [Video description begins] The host is on the "Backup policies" tab of Vault1. [Video description ends] Okay, so we know we've got a vault called "Vault1". And we've got a couple of policies, specifically two of them that can be used for backing up Azure VMs. The policies themselves contain a lot of settings related to backup frequency and retention range, I want to keep the backups at the monthly and yearly level, for example.
All right, let's go back and take a look at our VMs. I've got one in this list called "AppServer3", not yet associated with the vault but it will be when we're finished here in PowerShell. [Video description begins] The host opens up PowerShell. It reads PS /home/danlachance72. [Video description ends] So to get started, what I'm going to do is create a policy variable, so "$policy". What I'm going to store in there is the return result of running "Get-AzRecoveryServicesBackupProtectionPolicy", that's a long cmdlet name, that's what it is. And all I'm going to do is specify that the policy name I'm interested in is "DefaultPolicy".
Now, I don't have to put that in a variable, I can just specify it on the command line. So the first thing I'm going to do here in PowerShell, is I'm going to run "Get-AzRecoveryServicesVault". And I'm going to point to a vault named "Vault1". And I'm going to pipe that to the "Set-AzRecoveryServicesVaultContext" cmdlet. We need to set the context so we're essentially pointing to Vault1. [Video description begins] The PowerShell now displays four warning messages. [Video description ends]
Now, you might get some messages that this cmdlet will eventually be deprecated. You also have little note here that says if you want to suppress this message because it's not deprecated yet, then you can go to that web URL and figure out how to do that. I'm not going to suppress the messages, I don't mind it. The next thing I'm going to do is create a policy variable.
Now that we're pointing to the right vault in our context, I'm going to make variable called "$policy". It's going to store the result, retrieving the policy from the vault using the" Get-AzRecoveryServicesBackupProtectionPolicy cmdlet. [Video description begins] The host clears the PowerShell screen and pastes the $ policy again. [Video description ends] That's a mouthful, and I'm going to give it the name, the name of the policy that I want is called "DefaultPolicy".
So I'm going to go ahead and press enter to get that into the variable. Okay, now, that we've got that, we can actually enable protection or backup for an Azure VM using the "Enable-AzRecoveryServicesBackupProtection" cmdlet. I'm going to specify the resource group and the name of the virtual machine that I want to enable protection for. And then finally, "-Policy", I will pass it my "$policy" variable that we've set above.
Let's go ahead and press Enter and get this going. And before too long, we'll see that the operation is completed. So "ConfigureBackup Completed", so looks like it's been done. [Video description begins] The PowerShell screen reads: Workload name appserver3, operation configure backup, status completed, StartTime 4/3/2020 5:38:21 PM and EndTime 4/3/2020 5:38:52 PM. [Video description ends]
Let's just check our work here in the portal. So that was "AppServer3", so if I click on that, and [Video description begins] The host closes PowerShell and returns to the Azure portal. He clicks on Appserver3. [Video description ends] if I scroll down in the navigation bar, if we go down to "Backup", now, "Backup", of course is way, way down underneath the "Operations" section. So under "Operations", I'll click "Backup".
Normally it would be prompting us for associating the VM with a vault but it doesn't here, because it's already associated with the vault because we set it up in PowerShell. We can see here, "Vault1" is what it's associated with using a policy called "DefaultPolicy".


Azure VM Restore
Let's first check out what's there, what kind of backups are there. So it looks like we've got an "Application consistent" backup. And it looks like it was taken on a specific date and time, we can even click the "View All jobs link" and we would see here that a backup was taken and successfully completed. [Video description begins] The host closes the "View all jobs" link and goes back to "Backup". [Video description ends] Okay, that's perfect.
So now what we want to do is restore. Notice that we have a couple of options at the top, we can choose "Restore VM" and we can choose "File Recovery". As you might imagine, restoring the VM restores the entire virtual machine and you have a couple of options when you do that. And you'll see that if we click on it, we have the option of restoring to a new virtual machine or we can overwrite the existing one.
But what if the VM config is good, it's just some of the data within it that we need to restore? [Video description begins] The host closes the "Restore" tab and goes back to "Backup". [Video description ends] That's where file recovery kicks in. So let's click on file recovery, choose a restore point, and the next thing to do is to click "Download Executable". Because this is going to download a script that will let you mount the backup as a local drive where you run the script. And from there you can cherry pick which items you want to restore.
That's exactly what I'm going to do. So I'm going to download this executable. When I click that it generates a script and a password. So I'll see that down here after, which is unique to this mounting session. And after it generates it, the script will be available for download. So I'm going to go ahead and download it. [Video description begins] As soon as the host clicks on "Download", a cmd window pops up. It reads: "Please enter the password form the portal as is and press enter:". [Video description ends]
When I run the script, it asks me to enter the password that's provided in the portal and that was generated down here. So I'm going to go ahead and copy that to the clipboard. And, I'm going to paste it in here, where it's being asked for, and I'm going to press Enter. [Video description begins] A PowerShell window automatically launches. [Video description ends]
Now depending on your machine, you might have to download that script and run it with administrative privileges. But anyways, this is what it's going to look like, "Connection succeeded". It's going to attach the volumes for the recovery point. And then, we can see now here we have a new drive. [Video description begins] As the connection succeeds, a windows notification window pops-up to inform that there is a new drive. [Video description ends]
So let's go ahead and take a look at this in Windows Explorer. [Video description begins] The host is now in File Explorer, in drive F. Various folder directories can be seen. [Video description ends] So now here in the file system, I can see I now have a drive letter F, which is showing me the contents of what was backed up from that VM. So I could cherry pick the items I want to restore by copying and pasting. Back here in PowerShell where the script ran, we can see drive letter E was a system reserved disk and F, the windows partition of our backup VM.
Then says, open up Windows Explorer, browse for your files, copy them, and then go to the portal and go to step three where you need to unmount disks. So back here in the portal that's just down below here, step three, "Unmount the disks after recovery". So I'm going to go ahead and click that. And then we'll get a message after a moment that says that the unmount was successful. So we're done. We were able to restore or recover files from a backup Azure VM.


File Server Backup
You can enable protection for on-premises file servers, whether they're physical or virtual, so that you can back them up to the cloud. The only real requirement is having a recovery services vault and then installing a backup agent on the server that you want to protect. So to get started here, let's go into a vault that we've got defined previously, a recovery services vault here in the portal. And in the left hand navigator, I'm going to go into the "Getting started" section and I'm going to click "Backup".
Now it says, "Where is your workload running?" Well, in this case, it's going to be "On-premises". Then it asks, "What do you want to back up?" Well, we can see there's quite an array of options here. "Files and folders", "VMware", and "Hyper-V virtual machines" that we might be hosting on-premises, SQL servers, SharePoint Exchange, "System State", "Bare Metal Recovery". The list goes on and on.
In this example, we're going to select "Files and folders" that will go under the next step to "Prepare infrastructure". I'll click on that button. So it says you need to download the agent for Windows Server or for the Windows Client. Okay, so I can click that link to download and then install the agent. So I'm going to go ahead and click that link because I want it installed on this local host where I'm running this from and I'm going to click "Run".
Alright, now that the installation is complete, the next phase of the configuration, if you will, is to proceed to registration. [Video description begins] The host clicks on the option "Proceed to registration". A new window opens up called Register Server Wizard. [Video description ends] We need to register this server with the recovery services vault.
For that, we need vault credentials. Well, back here in the background in step two after we've downloaded the" Recovery Services Agent", we can turn a check mark on to that effect after which we can download the vault credentials file, [Video description begins] The host enables the option that says "Already downloaded or using the latest recovery services agent" and the "Download" button is activated. [Video description ends] which we need to complete the registration. And that file is good for two days.
So I'm going to go ahead and download it. [Video description begins] The host clicks on the "Download" button and the Register Server Wizard window opens up again. [Video description ends] Back here during the installation, I'm going to go ahead and click on the "Browse" button to select the vault credentials file that I've just downloaded. [Video description begins] The host clicks on the Browse button, the field "Vault credentials" is filled in automatically and more details about the vault appear. [Video description ends]
So it knows the name of the "Backup Vault", the "Region", the "Subscription identifier", and of course it expires after two days as you know. So now that we've got that in there, let's go to next, we can either enter a "passphrase" or generate one. [Video description begins] The host is now at the next step, called Encryption Setting. [Video description ends] This is for protection of the backed up data.
So I'm going to go ahead and choose "Generate Passphrase" and we can then specify a location to save it. And after you specify that, you can proceed with the "Server registration". [Video description begins] The host is now at the last step. There is a message that reads "Microsoft Azure Backup is now available for this server", along with a warning message. [Video description ends] Alright, and the server has been registered, we just have a warning about storing that generated passphrase locally.
So I'm going to go ahead and "Launch the Microsoft Azure Recovery Services Agent" that's checked on by default. So I'm going to go ahead and click "Close". Okay, so it took us into "Microsoft Azure Backup", where over on the right I'm going to choose "Schedule Backup". And I'm going to go through the "Wizard", I'll click "Next" and I'm going to click "Add Items". And I'm going to select some files on a disk on this local host that I want to back up to Azure.
We have the configuration, now we have the back up actually taking place based on that configuration. [Video description begins] The host clicked on next and the wizard is now transferring the relevant data. [Video description ends] And after a moment, we can see that the job has completed. So I'm going to go ahead and click "Close".
Now back here in the portal, if we go back into our vault and if we look at "Backup items", then notice we have a reference here for "Azure backup agent". We have one listing here. [Video description begins] The host clicks on the listing and is redirected to a new page. [Video description ends] It's for drive D on a computer. Here's the computer name. And we can also see the last backup date and time.


Azure VM Soft Delete
In Azure, the soft delete option as it relates to Azure virtual machines is designed so that if you've enabled backup of Azure VMs, it will protect deleted backup data. So in other words, if you delete a VM and you haven't enabled backup for it already, then soft delete does nothing for you. So notice in this list, we do not see a server by the name of "AppServer1", [Video description begins] The host is at the Virtual Machines tab of the Azure portal. [Video description ends] It starts at "AppServer2" and goes on from there.
Well, if we go into an existing vault, then we're going to see references. [Video description begins] The host clicks on Appserver1 of the Azure portal. [Video description ends] When we go to "Backup items", choose "Azure Virtual Machines", I see a reference to "AppServer1". [Video description begins] Under Protected items, there is the Backup items option and the Replicated items option. The host clicks on Backup items. On the list, the host clicks on Azure Virtual machine option and he is now on a list with server names. [Video description ends]
So that was a virtual machine that at one point did exist, but the virtual machine has been deleted. Luckily for us, a backup was taken prior to it having been deleted. And so what I can do then is select "AppServer1" and I can choose to restore the VM or recover files from it. So for example, let's choose "Restore VM", so from here, I can choose a restore point, "OK".
Well, because in this particular scenario, the VM no longer exists, we would choose to "Create new". Now, that's for the VM, on the data side, if we were to choose "File recovery", [Video description begins] The host closes the window of Restore Configuration and returns to Appserver1. [Video description ends] then we would download the executable script which I'll click on. It's going to generate a password, so that we could mount the backup and still recover files from that backed up VM, even though the VM itself no longer exists.
And we can see it's made a connection and it's provided drive letters E and F to us. So those will show up on my local computer in Windows Explorer. And I can browse through the backup files and copy what I need. And once I'm finished, I can return to the portal and go into step 3. [Video description begins] The hosts minimizes the blue window and goes back to File Recovery on the Microsoft Azure portal. [Video description ends] Which I will do here, so if I scroll down, I can click "Unmount Disks".
And there you have it, that's how we can get data back if it's been backed up already from a VM that no longer even exists.

                    
Azure File Shares and Storage Overview
An Azure storage account can house multiple types of storage, including blobs or binary large objects. In other words, allowing files to be uploaded into the storage account. There are block blobs. Now block blobs are normally what we would use if we are uploading smaller files that might result from office productivity tools. 
Such as word processing apps, or presentation apps, or spreadsheet apps, that type of thing or maybe graphic logo files that would be considered block blobs. Append blobs, as the name implies, are a file that would normally by its nature need to be added to constantly. Think of log files, where they're constantly being written to at the end of the file. Then there are Page blobs. Now these are for larger files to support random access. Now what that means is they're not necessarily read or written to in a sequential format. Think of virtual machine hard disks, they would be uploaded and treated as page blobs in an Azure storage account.
Then the storage account can also house Azure files, which are essentially shared folders in the cloud. The idea is we can allow shared folder access for our cloud based Azure file share, from on premises devices or from devices in the cloud like virtual machines. So the operating system would need to support connecting to shared folders using SMB v3.0.
So it's kind of like what you might use even in UNIX and Linux or the macOS, when you mount a remote mount point to appear locally in your file system. Normally, that's done for NFS type of connections over the network using the NFS protocol, but in this case it would be for SMB compliant shares. The storage account also allows for what's called Azure Table Storage.
This is No-SQL based. What does that mean? Well standard SQL compliant solutions where SQL stands for Structured Query Language would include things like Microsoft SQL Server, Oracle Database Server, MySQL, all kinds of different variations where you have a strict definition of blueprint of what's allowed to be stored. So you'd have table definitions, and in each of those tables you would have columns or field definitions with data types.
And you can link tables together. Well, No-SQL doesn't do any of that. It's an unstructured schema, where the storage of one record can be completely different than the underlying blueprint for storing the next record. So it could be many different types of data. And it uses key and value pairs for storage, much like you might have experience with if you've worked a lot with Azure resource tagging, and key and value pairs.
A storage account can also accommodate storage queues. So we would have queue storage in the Azure cloud. And that's done within a storage account. And software developers can write code for app components, such as in our example app component 1, could write a message into a storage queue in Azure. And then app component 2, if it's busy or unavailable over the network.
When it does become available, it can read messages that it's supposed to read from app component 1. And this way, we have data exchange between different software components.


File Shares and the Portal
In this demonstration, I'm going to configure Azure file share. Azure file share is essentially an SMB compliant shared folder hosted in the cloud environment.  
You don't need your own server to set up a shared folder. So to get started here in the portal, I've navigated to an existing storage account.
And within that storage account, I'm going to scroll down in the navigation bar until I see File service, and I'll click File shares.
Now I don't have any file shares defined yet, but that's going to change in a moment.
So I'm going to click add a File share up at the top. And I want this to be called projects.
And I'll set a maximum Quota for storage, let's say to 5 GiB.
And then I'll click Create.
So we can now see we've got the project's file share here.
Now much like a blob container, you can go into it and start uploading content.
So uploading files, you can add a subdirectory if you really want to, but I'm not going to do that.
I'm just going to click Upload, and I'm going to upload a file or two.
So I specified a couple of file names here.
I'll just upload them and because they're small text files, it won't take long for them to show up.
So we can now see we've got Project_A, B, and C.
They're text files, and they're in the projects share. Now at this point, we need to talk about connectivity. So it's one thing to create the file share.  
But what about making a connection? Well, the connection is available. For example, if we click the Connect button at the top, it gives us instructions depending on the platform in question.
Whether we're mapping a drive letter in Windows, or whether we're making a connection as a Mount point from Linux or the macOS.


File Shares and the CLI
You can use the Azure CLI to configure an Azure file share, so essentially a shared folder in the cloud.
In order to do that, you have to think about the storage account where you want to define that Azure file share.
And you also have to think about an access key that you will use to get permission to create it from the CLI.
So we can see the name of our storage account in this example is storacct333325.
And down below, I can see of course, as is the case with every storage account there are two access keys.
So I'm just going to go ahead and copy the second access key. And I'm going to span a cloud shell environment.
Now, here in the CLI I'm going to run az storage.
So presumably file share are part of the storage nomenclature and -h for help.
After which I can then learn and start guessing at what would be next such as share for managing file shares.
That sounds about right. So if I do an az storage share.
And then specify -h for help, we'll learn more about how to use that syntax such as creating an Azure file share.
Let's get to it, az storage share, create --account-name.
So this is the name of the storage account, and then that in our case is storacct333325 --account-key. Well, this is where I'm going to paste in the key that I copied previously when we were in the portal a moment ago. --name, what I want to call this is budgets. So I'm going to put in budgets as the name of the share. I can also set the quota, --quota in GiB, so maybe I'll just put there 5. And that's pretty much it, I'm going to press Enter to create that azure file share.
And it says "created": true. Now, notice if I try to run other CLI commands like az storage share list it says well, not quite, you need to give us some credentials, such as with account name and account key.
No problem, so we can make that happen. az storage share list, not really should have stored those variables, but that's okay, --account-name. We know what storacct33325 and the --account-key parameter. And I can just see that up there, so why don't I just copy that again, just to make sure I still have it on the clipboard, and we'll Paste it in here, and we'll press Enter.
And now we're seeing everything that's listed but as usual, it's providing all of the metadata. I just want to see the names, okay? Let's clear the screen. Now, because we're in PowerShell, we can get away with either clear, the word clear or cls, it doesn't make a difference.
Up arrow key to bring up that previous command at the end I'm going to add --query, [ ] Because we've got an array of items being returned, multiple shares. And I want to call upon the .name property for each of them to only see the names. And there's the one that we've just created, budgets.
Let's take a look at it from the perspective of the GUI.
So here in my storage account in the portal, I'm going to scroll down in the navigation bar, until I see File service and File shares.
Just give it a moment to update, and there's budgets.


File Shares and PowerShell
In this demonstration, I'll use PowerShell to create an Azure file share.
Remember that a file share is a shared folder hosted in the Azure cloud through a storage account. So that means that we're going to need command line access then to the storage account. And one way to get that access is to use a storage account key.
So I'm going to go ahead and run the Get-AzStorageAccountKey cmdlet. I'm going to specify the resource group and name of an existing storage account. Whose keys I want to return.
Now returns both keys. Every storage account has two keys, you can change one for security purposes while the other one remains intact. Now if I want to get a specific one of these keys, I'll just use the up arrow key to bring the previous command back up. To get a specific key I can ask for example, the first one I'm going to make a variable here called $key equals Get a then contain the rest of the command as per I entered it previously.
But I'm going to change it a little bit, because what I want to do is place that entire command in parentheses. The reason is because I want to treat it as a single statement, after which I then want to call upon the. and then a property or call upon a property specifically in this case, the value property and I want value[0]. So I want the first item.
That's the first key, in other words when I press Enter, and if we return the key variable, you can see indeed that value zero really is the first item in the array.
It's the first item in the value property array.
So we've now got that stored in a variable. Great, next thing I want to do is make a context variable so that we can essentially lump together the name of the storage account and also the key and just refer to the context variable. So I'm going clear the screen cls and make a $ctx that's just for context and that's going to equal New-AzStorageContext and I'm going to give it the storage account name -storage account name which in this case is storeacct33325, that's the name of my storage account. And I also want to specify the -storageaccountkey. Well, we have a variable now so that's too easy. We just refer to $key for that. Alright, we now have a context variable.
Now what I want to do is actually create my file share. So now essentially we have pointers to the storage account. We have a storage account key to be able to do this. So we're good, so I'm going to run New-AzStorageShare. And the name I'm going to assign to this in this case, let's say is East-Logs. And then I'm going to specify my context variable. -context is going to be $ctx, then notice it returns an error.
Well, if I change the name here to reflect lowercase letters, and press Enter, it works.
So you'll find that a lot of items related to storage accounts are case sensitive. In other words, uppercase letters are not accepted. Anyway, it looks like it worked. Let's verify this we can run get-azstorageshare. Now notice it says don't have a storage context.
Well, that's the same thing that we did up here. When we built the share.
We use -context and gave it the variable, no problem. Let's bring the up arrow key up there to bring that previous command up on the screen -context $ctx.
And there it is, now we can see the existence of our new share east-logs.
And of course, we'll see the same thing if we go into the portal.
So if I Refresh my list of file shares for that storage account, there's east-logs.


File Share Mapping and Windows
In this demonstration I'm going to map a drive letter from an Azure Windows virtual machine to an Azure file share.
So here in the portal, let's start by looking at a storage account where the file share's been defined. So I'll scroll down in the navigation bar for the account. Go down under File service and choose File shares where we'll see we've got a projects file share.
And so if I open that up, it's got some files in it.
See Project_A, B, and C, they're text files.
So this is just essentially like a shared folder on a file server that you might have on-premises. Where you've got some content within it. But the connection to it is a little bit different. So I'm going to go ahead and click the Connect button at the top.
Where we can see syntax for making a connection to it by mapping a drive letter in Windows.
In this case, I want to map drive letter P, P for projects. So I'm going to go ahead and choose that from the drop-down list.
We can see it's got some PowerShell code here.  
That's going to be used to test the connection with the Test-NetConnection cmdlet and also actually mapping the drive. So in other words, it's going to actually make the connection by adding the storage account reference here for our shared folder. So I've pasted that.
I've copied and pasted that so we can see it in a bit more detail here in WordPad. So a variable $connectTestResult is going to be the result of running Test-NetConnection against a computer name.
Which is really just the URL of our specific account, and it's trying to connect to Port 445.
So if you were trying, for example, to map a drive letter from a Windows machine on-premises into the Azure cloud. You need to make sure that Port 445 is allowed in an outbound direction. And the fact is, most Internet service providers will not allow that traffic out. So if you don't have access to control outbound ports because maybe you only have a residential Internet connection, then that might be a problem.
Next thing we're doing is we've got an if statement here and we're testing the result. So if the TcpTestSucceeded so we could talk to our storage account and make a connection to Port 445. Then it's going to start saving some information here.
So it's going to store the user storage account name and the generated password here.
That is an actual storage account access key.
And then in PowerShell, the New-PSDrive cmdlet is being used. In this case to map drive letter P, we selected P for projects.
And we can see it's making a reference to the projects folder within the storage account.
And it's setting it as a persistent drive mapping so that drive P will be there every time that we sign in.
So, I'm going to go ahead and copy this again and I'm going to use it within a PowerShell command prompt environment.
Within an Azure virtual machine where I know Port 445 to the storage account is going to work.
So I've opened up here my virtual machine, my Windows virtual machine in Azure and I've copied the public IP address. And I've opened a connection to it using remote desktop client from my on-premises system.
So I'm going to continue going into that machine over RDP so we can map the drive letter to Azure file share.
Now within my remote session to my Azure Windows virtual machine, I'm going to go into the Start menu because I want to start the PowerShell ISE.
The Windows PowerShell ISE where I'm going to paste in that code that we went through that will map the drive letter here from this machine.
So I'm just going to click the new piece of paper icon here for a new script, so to speak, and I'll paste in all of that code.
And I'll just press Ctrl+ sign here so we can kind of zoom in.
So this is exactly what we were looking at to map drive letter P.
So I copied that for our specific configuration.
So I'm just going to go ahead and run all of this.
We can see it's down there. It's attempting the TCP connection. So remember, Port 445 needs to be open between this host and the target for this to work.
And it looks like drive P is probably mapped.
There are a number of ways we could do that here in PowerShell.
Let's navigate to drive P so P:\> dir, there are the project files.  
Of course most people that would use this would access that drive mapping from within Windows Explorer. Or through apps of some kind.
So if we go to This PC, we'll see that drive letter P showing up here.
So projects, and showing up there along with the contents of that.
So there are the files in that location.


File Share Mapping and Linux
You can create a Linux mount point from a Linux machine if you want to mount a remote Azure file share. 
Here in the portal I'm in an existing Storage account, we're going to take a look at an existing file share, so File service, File shares.
We'll see we've got one here called projects, I'll click to open it up to reveal its contents.
So we'll see some files here that have been uploaded, but we also have a Connect button.
When we click Connect, we can choose Linux at the top to get instructions on how to configure a Mount point for our storage account.
Now, I'm going to change the Mount point name here, let's say to projects, and it will change the example code down below, which I will copy to my clipboard.
So this is what we're looking at, if you've written a lot of Linux shell scripts, then this will be familiar to you.
First thing we're doing or it is doing is using the sudo command to raise elevated privileges to make a directory on the root of the Linux machine under mnt called projects, that's the mount point.
And if the directory etc smbcredentials does not exist, and it'll make it.
If there's not a file here to store smbcredentials, it'll make it.
And it's storing the username with the name of the storage account and the password is a storage account access key.
Then it's setting some permissions using change mode as required for the credential file.
And to get right down to it, what it's then doing is writing to the etc/fstab file.
So it's a persistent mount point that will persist between reboots.
And the actual amount command happens way down here, sudo again to an elevated commands mount with a type of the file system here is cifs.
And then we're specifying two forward slashes and then a reference to the storage account using the default file.core.windows.net suffix from the fileshare, /projects. And that is being mounted locally in Linux under /mnt/projects, which has been created way up at the top of this example. And then some permissions modes are being set here as that mount point is created.
So essentially this needs to execute in Linux. So I have a Linux virtual machine running in Azure that I've connected to through SSH using the free PuTTY tool that I'm running on-premises.
So I'm going to go ahead and paste that command in here. When the script tries to run sudo it's going to ask you for which I'll supply.
And then I'm going to go ahead try to run that again by just pasting that in.
And it looks like it's completed, I'm going to clear the screen and do an ls /mnt/projects.
And we can actually see the contents of that Azure file share.


Azure File Sync Overview
You can use Azure File Sync so that your Azure files, in other words, your shared folders defined in an Azure storage account, are made available to your on-premises clients through an on-premises file server.
So the on-prem file server then really acts as an on-premises cache of what exists in the cloud, in your Azure file share. Remember that Azure file shares are defined within an Azure storage account. You can also use this so that any files that are placed into the on-premises file server in a given directory get synchronized to your Azure file share. To get this set up, the first thing you would have to do is for your on-premises file server or file servers, is be sure that you disable Internet Explorer Enhanced Security Configuration or ESC.
Next, Configure Azure files, that means configure your shared folders in the cloud. Next, you would download and install the Azure File Sync Agent on your on-premises servers. This is the link between that on-premises server and your Azure storage account file share. So then you would have to create and configure an Azure File Sync resource. You could even use the portal to create an Azure File Sync resource, in which you would configure what's called a Sync group.
Now what then happens is the on-premises file caching server needs to be registered with the Azure Storage Sync Service. Now that happens at the end of the installation, when you install the file sync agent on your on-premises server, the tail end of that installation is going to guide you through connecting to an Azure account and a subscription, and essentially connecting to an Azure Storage Sync resource. That's part of the File Sync agent.
So of course, that means that you have to have a sync group defined within your Azure File Sync resource. Now when you create your sync group, you will have a cloud endpoint. It's already pointing to the storage account, file share. However, you would have to add a server endpoint after you've installed the agent on the on-premises server. And that way, the server will be associated with it. So you add a server endpoint for the server that's been registered, which occurred at the end of the installation of the on-prem agent.


Configuring Azure File Sync
Azure Files refers to shared folders hosted in the Azure cloud through a storage account.
Well, what we can do with Azure File Sync is have an on-premises Windows Server essentially cache that information for quick on-premises access. The first thing we have to do to make this happen is we need to create an Azure File Sync resource. So here in the portal, let's start with that. I'm going to click Create a resource.
And what I'm going to search for is Azure File Sync, there it is.  
Let's go ahead and select that and let's click on Create.
So I'm going to deploy this into a Resource group I've already got, so I'll select that from the list.
And I need to give this a name, I'm going to call this FileSync1.
And it's going to be, let's say, in the (Canada) Canada Central region, let's put it there.
I'm not going to tag it or anything, so click Next to continue through the wizard.
Now, it says that there's a problem here on Basics.
We can usually tell that when we have an asterisk, which implies that there's something that you need to fill in.
Well, we've already addressed all of the required parameters, so I'm just going to click Review + create, and then I'll choose Create.
It's going to validate the deployment, we filled in everything that needs to be filled in.
So once it says that the Deployment validation succeeded, it's actually submitting it and it's on its way. Now, we're not finished, because what we need to do in that Azure File Sync object is we need to add what's called a sync group.
So we'll go take a look at that now. I'm going to click Go to resource, and within here, we're going to create our sync group.
You can see Sync groups listed over here in the left-hand navigator.
So I'll click the + Sync group button.
And we're going to start by giving it a name, I'll call it SyncGroup1.
I have to associate this with the Storage account, so I'm going to click on the Select storage account button.
And I'm going to choose a storage account that I know has some Azure file shares configured in it already.
So after I've selected it, I'll scroll down.
And from the Azure File Share drop-down list, I'm going to choose one that I've defined previously called projects, and I'll choose Create to create the sync group.
Notice it's in the midst of creating a cloud endpoint for that sync group. But what we're not going to have yet is a server endpoint. Let's open up the SyncGroup1 and take a look at that for just a second. So we can see that we've got a cloud endpoint called projects, but we don't have a server endpoint yet.
And we won't until we download and install the File Sync agent on an on-premises server and then have it registered with this sync group. So notice we have an Add server endpoint button at the top. And when I click it, when I go to the Registered Server list, there's nothing there.
Well, again, we haven't installed the File Sync agent on an on-premises Windows File Server yet. But once we do, we'll be able to come back here and complete this process.
Here on my on-premises server, I've gone into the Server Manager tool.
That normally starts up automatically unless you've disabled it. You can just go to your Start menu if you really want to, and you can start the Server Manager tool. The reason I'm here is if I click on Local Server over on the left, on the right I can see the Internet Explorer, or IE Enhanced Security Configuration is On.
I'm going to click on that and turn it Off for admins and Users because I want to download the Azure File Sync agent.
So I'm going to go ahead and close that up, and I'm just going to fire up a web browser here, let's say Internet Explorer.
Because my server is running Windows Server 2019, I'm going to select the checkbox for that MSI and I'll click Next in the bottom right.
And I'm going to go ahead and click Allow once at the bottom to allow this to download.
I want the pop-up to pop-up. And I'm going to go ahead and actually just click Run, I know it's from a trusted secured location.
And after a moment, we have the Welcome to the Storage Sync Agent Setup Wizard screen, perfect. Let's continue. I'm going to click Next, accept the terms in the license agreement, I'll click Next.
I'll accept the defaults for Azure File Sync and the local installation location.
So I'll just go ahead and click Next on that.
No Proxy Settings on this host to get out to the internet, so I'll just continue, Use Microsoft Update.
And here we can specify if we want to automatically update when new versions become available.
So this is the Azure Storage Sync Agent auto-update settings screen.
So I'm just going to go ahead and accept all that and just basically get the product installed.
Okay, and at the end of the wizard, I'm just going to go ahead and click Finish.
So it's automatically checked for an update for the Azure File Sync agent.
Didn't find anything, so I'll just click OK.
And the next step is to Sign in and register this server so that it will show up within the cloud.
And then we can actually add it as a server endpoint in our sync group. So I'm going to go ahead click Sign in. So after signing into Azure successfully, I can then choose the subscription from the drop-down list. After which I can then choose a Resource Group and ultimately my Storage Sync Service.
And there it is there, FileSync1.
I'm going to go ahead and click Register.
And after a moment, we can see that the registration was successful. So I'm just going to go ahead and click Close. Back here in the portal, I'm still looking at my FileSync1 | Sync groups.
And more specifically, I'm looking at the Sync groups within that resource. So I'm going to open up SyncGroup1.
And previously, when we were in here, we had clicked Add server endpoint, but there were no registered servers that had the agent installed.
But this time, it's showing up, that's the name of my server.
So I'm going to specify that server from the list.
So on my on-premises server, I've got disk Volume (E:) with a folder called 2020_Projects.
And sure enough, I can see a number of files in there.
So I'm going to need to specify that path when I configure my server endpoint.
So I've selected the Registered Server, I have now put in that Path.
I can also enable Cloud Tiering, it says here it'll transform my server endpoint into a cache for your files in the Azure file share.  
I do want to do that, so I'm going to enable that.
You can determine how much space should be preserved locally, and also which files should be preserved locally.
So you can keep only certain frequently accessed files cached on the device.
The rest get tiered into the cloud environment. So based on what our needs are, that's all we have to configure.
I'm going to go ahead and click on Create to create the server endpoint, which will then show up down here.
So the cloud endpoint essentially links to an Azure file share, and that was defined when we created this sync group.
Now we've got our server endpoint. Notice the Health?
Shows that it's currently Provisioning.
So if I were to take a look in my storage account at my projects file share that is part of that sync group, I will see not only the original files that were here, which in this case are Project_A, B, and C.
I can click and see that on March 23rd, they were made part of this.
And I can see two new files, Project_D and E.  
I know they're new only because I know the files names.
And I can see that they were placed there on the 24th.
They were placed there automatically because they were replicated from our on-premises server.



Azure VM Overview
In Azure, virtual machines, or VMs, really provide the underlying horsepower for most services, even those where we don't directly see the correlation with an underlying VM.
What comes to mind with that is serverless computing. When really there is a server involved, it's just not under the control of the cloud tenant. When you plan your virtual machines, there are plenty of things to think about, including the method through which you will deploy it. If you work with infrastructure as a service, or IaaS VMs, it means that you as the cloud tenant or customer, you'd be responsible for things like the deployment of the VM. Configuring it the way you need it to be configured.
And managing it over a time, including applying operating system and app updates. However, it does give you with full configuration control at the virtual machine level. And you might even consider taking advantage of Bring Your Own License, or BYOL, where you can reuse existing licenses that you might have already purchased for the operating system. A managed solution means that the virtual machine creation and management is handled by Microsoft in the Azure Cloud. However, it does allow for quick and easy deployment of a higher-level service.
And the thing to think about is that when you look at the virtual machine, it has a lot of underlying details. Now, if you're working with it from an IaaS standpoint, infrastructure as a service, where you control it all, there are a lot of things to consider, such as the specific OS image that you're going to select, whether its Windows based or Linux based. Or perhaps you have an image that includes not just the operating system but also some additional software.
So that you might have a web server stack of some kind ready to fire up quickly in the case of a virtual machine where you've customized an image. You have to specify the resource group that the VM will be deployed into, and the geographical location. You have to think about sizing. The size of the virtual machine determines its underlying horsepower. So the number of vCPUs, virtual CPUs that are supported, the amount of RAM. The number of data disks supported by that specific VM size. And also, by extension, the disk performance or throughput in IOPS, that's input and output operations per second. So more IOPS is always better, but you pay a premium for that privilege.
The other thing to consider is high availability. If you've got a mission critical workload running in an Azure VM, then you might want to configure it for high availability by replicating it to a secondary region. And then there's user credentials so that you can get in and manage your virtual machines, whether it be Windows based or Linux.
With Windows you specify a username and a password when you deploy a Windows-based virtual machine in Azure, regardless of how you're deploying it. So whether you're doing it using the portal, the CLI, PowerShell, a template, an ARM template, doesn't matter. And of course, you would manage it remotely by making a connection to RDP port 3389. Ideally, you won't expose that directly to the Internet with a public IP address.
Instead, you'll use something like Azure Bastion as a jump box that you go through to remotely manage virtual machines using only their private IP. On the Linux side, we have password-based authentication as well as SSH public key-based authentication, where the public key portion is stored by Microsoft and Azure. But the related private key would be stored by you, the Linux user. And you need that key in your possession to authenticate with the server. Of course, you should take great care in protecting that key. Something as simple as applying a passphrase or password to it to safeguard it would be useful.
And you manage Linux, of course, over SSH port 22. Just like with Windows, you probably shouldn't expose that directly to the Internet for Azure Linux-based VMs. Instead, make it available privately only through something like an Azure Bastion host.
When you work with Azure virtual machines, you're also working with at least one virtual hard disk to host the operating system. So we're talking about disk sizing, really deals with the storage type. So when you work with disks for a virtual machine, you can determine some of these options, like standard HDD. HDD is hard disk drive. Now, hard disk drives are the older disk technology where you have spinning physical metal disk platters and a read-and-write head that goes out over it to read-and-write data as the disk is spinning. So it's very mechanical and slower than today's solid state drives.
But you can use standard HDD for infrequently accessed data. Okay, so if we're going to have a virtual machine with a virtual hard disk and it's only going to be used periodically for testing, for maybe only a few hours a month, maybe standard HDD is acceptable there. The other option would be standard SSD, solid state drive. So there's no spinning disk platters. There's no read-and-write heads and arms, nothing like that, no moving parts. It's all solid state. So you might use standard SSD for testing and dev purposes, basically non-critical usage.
Then you've got premium SSD. This is something that you would use in a production environment when you're running a production-based workload that the business actually depends on, because you get peak performance usage. But as you might imagine, you pay more for premium SSD than you would for standard SSD, standard HDD. And then there's ultra SSD, which provides the highest or the best performance available. And it's definitely suited for intensive database workloads or anything where you need the absolute best possible disk I/O performance. However, you'll only be able to use ultra SSD disks on specific types of Azure virtual machine sizes. So, basically, premium SSD enabled types of items.
At the networking level, when you're planning your virtual machines, you have to think about how many network security groups you'll need. Network security groups contain rules that control traffic flow, inbound or outbound. So either allowing or denying certain types of network traffic based on things like IP addresses, or tag values, or even port numbers. You can associate a network security group with the subnet, which means by extension, all VMs that have network interfaces in that subnet would also get those rules from the network security group. So subnets exist within a VNet.
Network interfaces, as the name implies, are network interface cards in a virtual sense, they're their own separate type of resource in Azure, and you associate them with VMs. And depending on the VM sizing will determine how many additional network interfaces that you can attach. Network security groups can also be assigned directly to network interfaces if you have very specific inbound and outbound traffic requirements for a specific VM network interface. Public IP addresses are again another Azure networking component. This is also its own type of resource that allows public connectivity to a VM. You would only do that for things that are designed to be publicly accessible, like a corporate website, for example.
You also have load balancing configurations. You have to plan for the fact that you might have a workload running in a VM whereby if that VM becomes unavailable, costs a lot of money in terms of downtime until it's up and functional again. So you might consider load balancing using a number of backend servers hosting the same app. And, of course, load balancing between them. So when client requests come in, sending it to the least busy backend server.
Scaling a virtual machine can be done horizontally, which means adding or removing VMs. So scaling out means adding VMs, scaling in means removing. You would do this, for example, in a load balanced auto scaling type of solution. Maybe you would have it automatically set so that when the CPU gets to a certain point of busyness in terms of percentage, VMs begin to be added to handle the increased workload. Now vertical scaling means scaling up by adding more horsepower, or scaling down to reduce the amount of horsepower because you don't need it and you want to save on costs. So vertical scaling deals with the number of virtual CPUs, the amount of RAM, the disk I/O, and so on.
For Linux hosts, you have the option of either password-based authentication or SSH public key authentication. Now this one is considered to be more secure than just a username and password because it involves something that you must have. Now this is the default configuration with Linux VMs unless you change it otherwise, but you can always go in and reset that in an existing Linux VM after the fact. When I say reset that, what I mean is reset a forgotten password if you're using password authentication. Or convert or change from password to public key authentication.
You can change all of that after the fact if you need to. So SSH public key authentication uses a related key pair. So the public key is stored on the server in the cloud. So it's stored by Microsoft. But the mathematical related private key is stored with you, the user. And that's where you need to have that private key. It's stored in a file, should be password protected at minimum. And you use that to authenticate to the server. With SSH public key authentication, we're talking about having this apply to Linux VMs.
It doesn't apply to Windows VMs, unless you install some third-party component that allows it to act as an SSH server or daemon, then of course that would be on the table. So the public key gets specified when you build a new Linux VM if you leave the default of public key authentication. So the user must know the username and password, but they must also possess a related private key.


Azure VMs and the Portal
Virtual machines are the real workhorses that make things happen in cloud computing, that run workloads. Now in some cases in Azure, you have managed services. Where you don't have to worry about deploying and managing the underlying virtual machines. But when it comes to infrastructure as a service or IaaS, that is where you do manually deploy virtual machines and manage them.
So let's go ahead and take a look at how to do that at the portal, I'm going to click Create a resource. Now I could look at some of these popular virtual machine images and deploy virtual machines from them. Such as Windows Server 2016 Datacenter or Ubuntu Server 18.04 LTS.
I could also go to Compute, and from here I have variations of compute services, including virtual machines. I'm just going to choose Virtual machine.
And I'll select all of the details, including the operating system image as I configure it further.
So the first thing I need to do is specify a Resource group where I want this deployed. So I'm going to select a Resource group, I'm going to scroll down, this is going to be a Windows Virtual machine. So I'm going to call it WinSrv2019-1, I'm going to deploy it in the (Canada) Canada Central region.
And in the Image drop-down list is where I get to select exactly what I want, so I've got variations here of Linux. I've also got variations of the Windows platform such as Windows Server 2019 Datacenter, which is what I'm going to choose. The next thing I'm going to do is scroll down and see what else I have as an option such as whether I want to use Azure Spot instances, it defaults to No. Spot instances are useful if you want to perform things like batch processing, something that doesn't need to run all the time.
Because spot instances essentially allows you to use extra compute capacity available in the Azure Cloud at a reduced rate. But there's no guarantee and essentially, your virtual machine could be evicted and it could be stopped if that compute capacity is needed. So I'm not going to use a spot instance I want this virtual machine running when I deem that it should be up and running. Down below, the sizing is very important because the virtual machine size determines the underlying horsepower which of course equates to how much you pay on a monthly basis, depending on how often that virtual machine is running.
Here I've got Standard DS1 v2, which consists of 1 vcpu, 1 virtual CPU, and 3.5 GiB of memory. If I don't like that, I can click Change size so I can better accommodate the work load that will be running in this virtual machine. But I'm going to stick with that. Down below I need to specify the Administrator account credentials for Windows. So I'm going to go ahead and specify a Username and a Password which I will then confirm down below. After I've done that down below, I can determine if I want specific ports to be made available in terms of Public inbound ports.
It defaults to allowing port 3389 for RDP, now this means that it will be publicly visible on the Internet. This is generally not a good idea from a security perspective. You might require that people come in through a jump box, in other words Azure Bastion on or maybe come in through a VPN. And then connect into the private IP of the Windows host for RDP remote management. Now if this is a test virtual machine and there's nothing at stake, then maybe it's okay to leave the public inbound port open. Which I'm going to do in this example.
I'm going to scroll down, I don't Already have a Windows Server license so I can't bring my own license.
I'm going to click on Next : Disks > at the bottom for Disks, and this is where I get to determine the operating system disk type. It's set to Premium SSD, which offers better performance than something like Standard hard disk drive or HDD. So I'm going to leave that as it is, I could also add Data disks down below beyond the OS disk type.
And I can also do that after the fact at any point in time in the future. So I'm going to leave that as it is and I'm going to click Next : Networking > for Networking down at the bottom. Decide which Vnet I want this deployed into, so Vnet1 is selected.
Can also select the Subnet within that Vnet I want this virtual machine deployed into. I'm going to leave it on Subnet1 (10.0.1.0/24).
And, down below, I can determine the Public IP address configuration for this virtual machine. So it's going to build a new public IP address resource, that's perfect, I'm going to let it do that.
Down below, do we want to have a network security group or an NSG applied to the NIC, the network interface card? Now I'm not going to do that only because I know that Subnet1 has a network security group already associated with it. So you can associate network security groups, which are essentially collections of firewall rules to an entire subnet. Or to a specific network interface.
Now, if you've got virtual machines with the same traffic requirements on a subnet. It might make more sense to manage the firewall rules for allowing denying traffic at the subnet level, as opposed to the individual NIC level. So that's fine, having done that, I'm not going to enable Load balancing, I'm going to click Next : Management > for Management.
So Boot diagnostics are turned On, I can also turn on OS guest diagnostics if I wish. And I have another set of options including things like enabling backup, which I can change after the fact. And enabling auto-shutdown such as on a schedule which also I can configure after the fact.
I'm not going to change any of these settings, I'm going to click Next : Advanced > for Advanced. I'm not going to change any of these settings.
For example, I have the option of using an Azure Dedicated Host or controlling an entire physical server in an Azure Data Center. That would run my virtual machines, that of course incurs more costs. I'm not going to do anything like that, so I'm going to accept all of these extra settings, I'll click Next : Tags > for tagging.
And, if this is for a specific project like Project ABC or a cost center or a department or anything like that, I could tag it accordingly. Once I've done that, I can click Next : Review + create >, review and create. It's going to check of course that my selections make sense, I can see that the Validation passed.
And I can also see what the cost is on an hourly basis to run this virtual machine if it's left running. Of course, we should always shut it down when we know we don't need it. And, at this point, I'm going to click Create to build this virtual machine in the cloud. After a moment, we'll see that the deployment is complete. So I could either click Go to resource or I could go to the All resources view at any point in time to view everything, including my virtual machine.
Of course, you could also always open up your left-hand navigation panel and scroll down and choose Virtual machines. In the All resources view, notice that what we get here is we see everything. We see the Virtual machine itself, we see the Public IP address related to that virtual machine.
The Network interface for that virtual machine and the Disk for that virtual machine, so there's a lot of stuff here. So I'm going to click on the virtual machine itself to open up its navigation bar. And of course within the virtual machine we have numerous configuration options.
For example, if I click Networking over on the left for that virtual machine, I'll see network options including the Network Interface. I can also view the effective network security rules.
We can see down here there is an AllowInboundRDP rule that is being applied to this virtual machine. Because there's a network security group called NSG-Windows, which is attached to Subnet1. Which is where this virtual machine has been deployed. I can click Disks in the navigation bar to work with the operating system and also data disks. Here's where we can for example, configure additional data disks, I can click on Size.
If I decide that the current underlying horsepower doesn't properly support the workload. I can change the sizing, either scale up and choose something more powerful.
Or scale down vertically and choose something less powerful to reduce costs if the compute power is not actually needed. So if I were to go, let's say, into the Virtual machines view over on the left, of course, it's filtered to only show me virtual machines. We can also see that the Status of that virtual machine is currently listed as being Running.
Now bear in mind that over time, if you want to manage that virtual machine, you're going to either need to know its private IP address or its public IP. So once again, I'm going to click to open up that virtual machine, I'm going to make sure I'm looking at Networking over on the left. And, when we're looking at Networking, this is where we will see its public IP. So we've got a NIC Public IP address as well as its NIC Private IP.


Azure VMs and the CLI
Here in the Azure CLI, which I've spawned through the Cloud Shell icon in the portal. I'm going to create a Linux-based virtual machine using CLI commands.
The first thing I'm going to do is run az -h for help, because I'm wondering what the next level command is. And I can see right away, vm for virtual machine seems to make sense.
And so I can run az vm -h for help on that, to learn more about how I can use the syntax to manage, or in this case create a new VM.
So I can do az vm create -h to get a level deeper with help, including syntax examples of creating virtual machines.
So now that we're armed with that information, we can start to put together our specific command. So I'm going to use az vm create --resource-group and I'm going to deploy this new virtual machine into an existing resource group named Rg1. The --name parameter, I'm going to give it a value of Ubuntu-1. That's what I want it to appear as in the portal.
And --image, I'm going to specify I want to use the "UbuntuLTS image", --admin-username. I'm going to specify a username of "cbackwell" --admin-password, or admin password to be specific and I've specified a password I want to use. And finally, this virtual machine will be deployed in the canadaeast location. So let’s go ahead and press Enter to get this virtual machine created.
We can now see that it looks like it has successfully created our Linux virtual machine. Let’s check our work here in the portal. So if we go back to the portal, make sure we Refresh our list of virtual machines. Indeed, we’ll see that Ubuntu-1 is listed as Running.
So back in the CLI, I'm going to clear the screen.
We can also take a look at our running virtual machines as in az vm list, now it doesn't really matter if they're running or not. But when we run this command, we're going to get all of the details about the virtual machines.
If we are interested in seeing just a specific property, then we can get to that using the query parameter. So I'm going to scroll back up here and what I'm looking for here is the name property. So using the query parameter, we're going to call upon that.
So in other words, I'm going to bring up the previous command, az vm list. I'm going to add --query because we have an array of virtual machines, more than one. I'm just going to put in open and close square bracket and then call upon the .name property. And when we do that, we'll see in fact Ubuntu-1 is showing up.


Azure VMs and PowerShell
In this demo, I'm going to use PowerShell to deploy a new Windows-based VM. Now, PowerShell can be very handy if you want to automate the creation or deployment of Azure virtual machines. You might have a loop and you might feed it parameters for unique values like the names of virtual machines that could lend itself to quickly creating a sandbox environment, similar to how an ARM template could. So to get started, I'm going to create a variable to store the credentials that will be created for my virtual machines. I'll need them to log into it.
So credentials or $creds is my variable. And I'm going to use the Get-Credential cmdlet. And when I press Enter, it asks for a username, which I will enter and a password of course. So I'm going to go ahead and enter that as well.
So now I've got a credential set for my new virtual machine that I'm about to create in PowerShell. If we were to return that $creds variable, it's not as if it's plain text.
It's treated as System.Security.SecureString, perfect, that's good. So the password's not even resident in memory, although notice, we can clearly see the username that I entered.
Okay, so the next thing to do is to actually create the virtual machine. So now I'll use New-AzVm, I'm going to specify the resource group I want to deploy the virtual machine into. It's going to be called "Winsrv2016-1". It's going to go into "CanadaCentral" region and do a Vnet called "VNet1" and subnet called "Subnet1". We create a security group here, SecurityGroupName called "winsrv-nsg". We're to create a public IP address object for this server. And we're going to specify the image.
Notice what we're referring to here is the publisher, MicrosoftWindowsServer then WindowsServer:2016-Datacenter in this particular case, and we want the latest version. Each of those components is separated with a full colon. Then we're opening port 3389 for RDP management. And our -Credential or username password is simply going to be what we entered in previously into our $creds variable.
You can see now, it's in the midst of creating all of the resources for that VM, including the public IP address.
And after a moment, it looks like it's done. So we can just go ahead and minimize this. And I'm just going to go here in the portal, let's say to my Virtual machines view. And let's just see that our newly created VM is showing here. Should be listed as running as well. That's the default when you create a new virtual machine.
There it is, Winsrv2016-1, it's currently in the state of Running. If we were, let's say to go to the All resources view, we know that there's more than just the VM resource itself.
What about in our case, the public IP address, the OS disk, the network interface, the network security group, all that stuff. So I'm going to filter by winsrv2016 for the name prefix. And again we can see a number of items have been created. We have the Virtual machine, Network interface, Public IP address, the Disk. But when we go back to PowerShell, you might wonder, well, hang on a second. How do I know what to put in for the image? Everything else is pretty self-explanatory, the reference to the subnet, the location and so on. But this -Image parameter value has me scratching my head. How do I know to put that together?
Discovery cmdlets, one of which is Get-AzVMImagePublisher. So you at least have to know some of these discovery cmdlets. So I'm going to say let's -location, and how about "CanadaCentral"? And I'll just pipe it to more just for fun so we can have it stop after the first screen full.
We'll just keep going through here. Basically, what we would be looking for in our particular case, based on our example, is Microsoft Windows Server. So as we go further and further down, we can see all of the variations on the nomenclature. And we do see, in fact, that we do have a publisher name here, MicrosoftWindowsServer, so q for quit. So that's one command you can use to discover these things. You can also run Get-AzVMImageOffer. And -location "CanadaEast" or Central, wherever it is that you want to look. It's not case sensitive. Press Enter.
And what's the PublisherName? Right, that's what we just looked at. That was microsoftwindowserver. Just give it a moment. It doesn't like Microsoft Windows Server. Well, that particular item, guess what?
It's case sensitive. So if I run that command again, and then this time I put in MicrosoftWindows and Server, MicrosoftWindowsServer. So I'm capitalizing each word, so initial caps. It liked it. So watch out for that when it comes to that part of the nomenclature.
Now we then see WindowsServer. So we're going to step deeper, got it? So now the discovery command like Get-AzVMImageSKU, let's put in -location "CanadaCentral". And I'm not going to put any other parameters. It'll just ask me, yeah, what's the publisher?
Well, initial caps, MicrosoftWindowsServer. What's the Offer? Well, the Offer is WindowsServer, again, initial caps. And then here we go. Now we can start to see the actual SKUs that we might want to use.
So let's just scroll back up here, we have 2016 and what we're looking at now is 2019. So maybe we want 2016-Datacenter or 2019-Datacenter or a server core image. So we have all of the options here. And that's how you know what to place in the -image parameter when you're building a new VM in PowerShell.


Azure VMs and Template Deployments
In Azure, ARM stands for Azure Resource Manager. This is the newest model of managing Azure resources. And we can use an ARM template to deploy and manage related resources in a resource group for example.
So to get started here in the portal, I'm going to click Create a resource. I want to deploy a virtual machine from a template.
Now a template is a text file using JSON syntax. You can either create your own or you can go to GitHub and other sources on the Internet to retrieve templates. Or you can use some of them built into Azure right here, which by the way, also lets you query GitHub. So what I want to create here is a template deployment. I'm going to search for template, there's template deployment. Perfect, I'm going to select that.
Then I'll click Create. Now I'm going to get a couple of common templates listed here. But that is by no means all that's available.
So common things like creating a basic Linux virtual machine, a Windows virtual machine, a web application, a SQL database. We can also build our own template in the editor. Now, when you do that, you get to either import an existing template file, but it gives you the skeletal infrastructure for you to begin, the framework.
So it's a JSON file format where we've got the opening and closing curly braces and the details within. Now what you could do is you could load a quick start template in here to see the JSON. Or load a file if you already have a file in your possession for a template. So, for example, if I were to quick click Quickstart template, maybe from the drop-down list I'll choose well, it could be anything. Why don't we search up something like SQL, 101-cosmosdb-sql.
And I'll just click OK, just so we can see that it loads all this information in here. So for example, we can specify the location. Notice that the location parameter here that you would normally specify when deploying a CosmosDB account is something like, East US, West US or Canada Central, or something like that. What's happening here instead of hard wiring it, it's determining the resource location by looking at the resourceGroup. So, if the resource group was in US East, well the location of this Cosmos DB account, which is what's being created here, will also be in that same location.
So as we go down through here, it's pretty readable. The settings or the properties for creating, in this case, my CosmosDB account and SQL and so on. However, we're not going to use this. I'm going to click Discard, but we could do that.
We can also choose one of these predefined common templates, let's say to Create a Linux virtual machine. So when I click on that, it pops up. And unlike when I normally deploy an IaaS, or infrastructure as a service Linux VM, which requires a lot of details, this only requires a handful.
It really depends on the template. When you use an ARM template, it really depends how the template was written. And what's hardwired into it versus what must be passed in as parameters. Like the Resource group, the Vm Name, the Admin Username, and so on. I'm not going to do that either. So I'm going to go back to a template deployment, I know I'm going to lose those changes. I'll click Create, because we have an option at the bottom also to query GitHub.
Down here at the bottom, kind of like what we saw when I went in and started to load a quickstart template in the template editor. So how about I put in apache as in Apache server? Now when we talk about Apache, we really mean the Apache web server. apache2-on-ubuntu-vm. Yeah, that's what I want.
Okay, because I know I want to deploy a web app on that platform. So I'm going to go ahead and select that template. Notice I could have edited it as well.
And again, depending on the template will determine what I need to fill in here. So I'll just fill in some of the details. It wants to make a new storage account. Okay, store account, let's say apache123.
It wants an Admin Username, let's put in cblackwell. This template wants a DNS Name For Public IP. Let's call it quick24x7test and we have options to select the specific Ubuntu OS Version. So that's fine. I'll leave it on the default template. I don't have a reason to change that here. Notice the Location here is the location of the resource group.
That's fine. We can determine if we want to use public key or password authentication for simplicity sake here, password authentication and I'll enter a password. Okay, and I don't really need to specify too much more. Notice that we have a red asterisk or star next to the fields that are mandatory. I'm just going to scroll down.
Choose the check mark for I agree to the terms and conditions stated above which I will have read thoroughly of course, and I'll click Purchase. And it's on its way as we can see in the upper right, Deployment in progress.
Just bear in mind that when you use ARM templates, you're not limited to deploying only one resource. You could deploy numerous different types of resources. Now remember, when you're deploying a virtual machine, you're really deploying a network interface along with it and an OS disk. So you're already deploying a number of resources. And if we switch over, let's say to the Virtual machines view, we'll see that there's a new virtual machine that is in the midst of being deployed. It's called MyUbuntuVM. So notice the status is such that it's currently Creating.
If we were to go to the All resources view, well we know that there's more than just the VM itself. There's the network interface and those other items that we quickly mentioned. So let's take a look at that here.
Let's just filter by the word my, M Y and there's the public IP for the VM, the OS disk, the NIC, and a Vnet. So this is all happening from the template in an automated fashion.


Saving a Deployment as a Template
ARM Templates play an important role when it comes to automation in the Azure automation of the creation and management of Azure resources. When you deploy an Azure Resource, you can go in after the fact and actually export its configuration as a template.
Let's take a look at that here in the portal, so I'm in the All resources view. Let's start, say, with the storage account. Sort by storage accounts or filter by name, but I don't have many resources, so I'll just scroll down and click on an existing storage account.
What I'm interested in doing is taking a look at how to save it as a template. And if you scroll down when you’re looking at an Azure resource, if you go down under the Settings section middle. Now at the bottom of the Settings section, you’ll see that there’s an option to Export template. When you click on that, it will show you the JSON formatted template that was used to create this resource.
So as we scroll through, we can see parameters such as the storage account name, the default value is filled in the type is set as a string. Now, of course, you could save this, or actually let's do that, let's click Download to save this.
Now when you save it, you'll be dealing with a zip file, which I'll just click on Open. And within that, we can just go right ahead and open up the file. Now which file, there's two of them, parameters.json and template. Well, the actual template is called template.json.
If we take a look at that, let me just increase the size a little bit. Then we can see in this template for the storage account as we were seeing, it's got the storage account name with a default value which applies we can pass in parameters.
Okay, as we scroll down through we can see it's adding a cost center tag and a stage tag with the values or respective values for each of those key names. We can see that the sku is Standard GRS.
As we scroll down, we'll see all the options that are required in the creation of a storage account. Now, that's fine, let's close that because we also have our parameters file. There's parameters.json, it's designed to work in conjunction with the template file to pass in parameter values.
So notice here the parameters are being defined are for the storage account name and the virtual network name.
So you can use these together, and the benefit of exporting it as a template is that you can deploy new objects similar to existing objects by tweaking some of the details such as names or regions or whatever you need to do here in Azure. And you could, of course, use CLI commands, you could use PowerShell cmdlets or you could even use the portal to create a new template deployment to use this template file along with the parameters to create resources.


VM Redeployment
There are times when in Azure, you might want to relocate a virtual machine to another physical underlying host in a Microsoft Azure Data Center. Why would you want to do that? Well, if you're experiencing anomalies on your virtual machine and you know everything else is configured correctly maybe it's not starting up correctly, or shutting down correctly, or it can't be reached remotely. Even though everything is in place correctly, maybe that is the solution. Moving it or relocating it to another hypervisor.
Now to do that, first make sure that the virtual machine is Running. I've got one here called Ubuntu-1, so we're going to click on it to open up its navigation bar.
The redeployment option is hidden way down under Support + troubleshooting. So you'll have to scroll down until you see that section, Support + troubleshooting. And under there, you'll very easily see Redeploy.
Now when you are redeploying it, and it tells us as much up at the top, there will be some down time. It's got to bring the VM down, relocate it to another physical host and then fire it back up. So if you've got any temporary drives, you'll loss the contents. And again, you will have a little bit of down time. So I'm going to go ahead and click the Redeploy button. Now, if the VM isn't running, if it's deallocated, you will get a message to that effect.
So you don't have to worry about what happens if I don't have it running already. You'll know very clearly that that is the issue. And after a moment in the Notifications area in the upper right in the portal, we'll see that it Successfully redeployed virtual machine. So I'm just going to click on that.
So we can now see that our virtual machine is back up and running after having been redeployed to a different host. And hopefully, any problems that you might have experienced with it will be remedied by having run this redeployment.


Windows VM Remote Management
If you've deployed virtual machines in the Azure Cloud, you're probably going to want to be able to get to them over the network to manage them, whether they be Linux or Windows based. So to get started here, let's see how we can make an RDP connection to a Windows Virtual machine running in Azure.
I'm going to start by going into my navigation panel on the left and choosing Virtual machines. Here I see I've got a Windows virtual machine that has a status of Running.
And if I click to open up that virtual machine in the navigation panel, I can click on Networking to expose its public and its private IP address.
But depending on how you have things set up will determine whether you need the NIC Public IP to remotely manage this virtual machine over RDP, Remote Desktop Protocol, or whether you need the private IP. Now you can also take a look at connection options.
So if I go back to the overview of this virtual machine, notice at the top, you've got a Connect button. And if I click on Connect, I can select either RDP, so Remote Desktop Protocol for Windows, SSH, Secure Shell for Linux.
Or I can use Azure Bastion, which really serves as a jump point, a jump box, that has both a public and a private IP connection. So public facing, you could connect to the Bastion host and after connecting to it through it, connect to the private IP of a backend virtual machine. However, in this case, I'm just going to choose RDP.
And when I do that, it gives me the options such as the Public IP address and the Port number of that virtual machine, and I can Download RDP File. Now, technically, all you need is the public IP. And as long as you know the credentials, and as long as firewall rules allow traffic to 3389, you'd be able to make the connection.
So I'm going to go ahead and Download RDP File since I have the option right in front of me. And then I'm going to choose to Open it.
That's going to start the RDP client on my machine. So I'm just going to choose Connect, I trust the connection.
And at this point, I'm going to change the credential set. So I'm going to specify a username that I specified upon creation, and also the password. So this was specified when the virtual machine was deployed, and then I'll click OK. You're going to be asked if you want to trust the identity of their computer.
I'm going to choose Don't ask me again for connections to this computer, and I'll choose Yes.
And after a moment, it's taken me into the desktop of that server running in the Azure Cloud. So it really looks and feels like any on-premises virtual machine would. So it's starting up Server Manager automatically because it's running the Windows Server operating system. Now I'm going to flag that so that that doesn't happen anymore. So here in the Server Manager, I'm just going to go up to the Manage menu.
I'm going to go into Server Manager Properties. And I'm going to say Do not start Server Manager automatically at logon. If I want it to start, I will start it.
Let's just take a look at the IP address configuration here of this virtual machine. So I'm going to open up a command prompt here by searching for cmd.
And we want to launch this because we want to use the ipconfig command to view our ipconfiguration.
First, we got to hit the Properties of this screen and go to Font, and just increase the size so it's a little bit more legible than it currently is, kind of hard to see. And if I run ipconfig, we can see here that our private IP address, 10.0.1.4, is showing up.
Notice the public IP address does not show up here. So back here in the portal, if I look at the networking of this virtual machine, indeed it does have a private IP address in the form of 10.0.1.4. But the public IP address is handled on the Azure side, and so it doesn't even show up within that operating system.


Linux VM Password-based Remote Management
There are plenty of SSH clients that you can run. And depending on the operating system you're using such as a Linux variant, SSH is built in as a command line tool already. For my Windows station, so that I can SSH to Linux virtual machines in the Azure Cloud, I'm going to download the free PuTTY tool from putty.org. Now, to use PuTTY to make an SSH connection to my Linux host, I need to be able to connect to it over the network.
In other words, I'm on-premises, I need to connect through the Internet to that virtual machine. Whether it's directly or through a jump box such as Azure Bastion. So I'm just going to go ahead here and click on that Ubuntu Linux virtual machine that I have. And I notice that it does have a Public IP address, so I can connect directly to that. So I'm going to go ahead and copy that IP.
Now here in PuTTY, I've got the IP address here that I've just pasted in for that Linux Azure-based VM, and it's set to Port 22. So SSH, so I'm going to go ahead and Open a connection.
Now because it's the first time I've connected, it asks me if I trust the unique fingerprint of that server. I'm going to choose Yes. And it wants me to log in. So this is where I'm going to specify the credentials for that virtual machine. Now I know what they are because I've created it. So I'm going to pop in those credentials. Now we're using password based authentication here as opposed to SSH public key. And, once we enter the correct password, we will be signed in. So I'm just going to clear the screen here and type in whoami.
We can see we are logged in as user cblackwell. If I were to run the ifconfig command in Linux, notice that we see the 10.0.0.4 private IP address in the local loopback.
However, if we go back here, notice that the Public IP address is not shown within the OS itself. That is a Microsoft Azure configuration. Now, if you forget the password for a Linux virtual machine, if you're using password-based authentication, you can always scroll down here in the properties navigation bar of that VM and choose Reset password.
And, if you're using password based-authentication, then you can reset it by specifying the Username and the new Password.
If you're using SSH public key authentication, you can also reconfigure that as well.


Linux VM Public Key Remote Management
When you deploy a Linux virtual machine in the Azure environment, you get the option of enabling either username and password-based authentication, or public key authentication. You can also change that after the fact which I'm going to do here in the portal.
So I've got an Ubuntu-1 Linux virtual machine that's currently Running. So I'm going to click on it to open up its details.
And what I'm interested in doing is going all the way down to the Reset password option down under Support + troubleshooting. You can also do this for Windows virtual machines if you've forgotten the password. But, in our case, we want to enable public key authentication for an existing Linux VM.
So what I'm going to do is choose Reset SSH public key and enter in a Username, user cblackwell in this case, and I need to paste in an SSH public key.
Well, wait a minute, where do I get that from? There are plenty of ways to generate key pairs, one of which is to use the free PuTTYgen tool.
So I'm going to go ahead and download and run this tool. When you run the PuTTY Key Generator, you'll be able to generate a public and private key pair. When you click Generate it asks you to keep moving the mouse over the blank area to generate randomness. Now after you're finished with that, you can then actually save it.
Now because you're going to be saving a private key in a file, so you have the buttons down here to Save public key and to Save private key. When you Save private key, make sure you assign a passphrase because what makes this secure is not only the possession of the private key file, but making sure that it's at least password protected.
So here's my Generic_SSH_PublicKey file. This is what I need to copy and paste into the Azure portal. So I'm going to go ahead and press Ctrl+C to copy that.
And, back here in the portal, I'm going to paste that into the SSH public key field, after which I'll then click the Update button, that's it. You just need to specify a Username, you need to have a SSH public key. And of course, public key is stored here in Azure. You need to make sure you safeguard the private key on your machine. Let's just test that connectivity. I've fired up the free PuTTY tool. This is another free download that allows remote SSH connectivity, among other things.
And I've specified the public IP address of my Ubuntu Linux VM Port 22, but I have to specify to use a private key.
And, so in PuTTY, I can scroll down to the left-hand navigator, go down under Connection - SSH - Auth. And this is where I've specified my Private key file.
Remember, we generated the public and private keys using the free PuTTYgen tool. So now that's all filled in, I'm going to go ahead and click Open and it asks me who I want to log in as.
Well, when we reset our public key authentication for Linux, we specified the username of cblackwell. And now it wants me to enter the passphrase for my private key file, so I'm going to go ahead and enter that in, and that's it. We are now into our Linux virtual machine using public key authentication.


Just-in-Time VM Access
In Azure, just-in-time virtual machine access, otherwise called JIT, J-I-T, allows you to make sure that ports for managing VMs are only open when management needs to be done. So we know that port 3389 is normally used for RDP remote management of Windows VMs, and that Port 22 is open for SSH management of Linux VMs. And so instead of keeping those ports open all the time, just-in-time access has a specific time that those are open. Basically, when administrators request access, the ports are open, and we can specify whether it's an hour, two hours, three hours that that port is available.
So the first thing we'll do here in the portal, is we're going to go into our left-hand navigator bar and scroll down and go into the Security Center. You can go into the Security Center as an Azure admin to request just-in-time access.
So I'm just going to scroll down here in the navigation bar, and I'm going to click under ADVANCED CLOUD DEFENSE on Just in time VM access.
However, over on the right, we don't have any virtual machines that are configured for just-in-time access. Not a problem, let's make that happen. So I'm going to go Home, I'm going to go into my Virtual machines view, and I'm going to enable just-in-time access for a Linux VM. It doesn't matter if it's Linux or Windows.
But in this example, I'm going to open up a Linux VM. And, when you want to enable just-in-time access at the VM level, you need to go into the configuration of it, Configuration blade. So I'm going to click Configuration on the left.
So for just-in-time access on the right, I'm going to click Enable just-in-time, and it says it was successfully enabled.
And we can actually Open Azure Security Center where we started because that's where, as we know, administrators will request access. So, when the administrators need access to that Ubuntu Linux VM here in the security center, they can put a check mark in the box to the left of it, and they can click Request access. When they do that, notice that port 22 is what will be open, and we can determine the Allowed Source IP range and the Time range for which that port will be open the default of which is set to three hours.
I'm also going to click on On under Toggle to open the ports, and just put in something in the justification field. And then I'll click the Open ports button.
And, after a moment we can see in the upper right that Just-in-time VM access has been enabled, based on our configuration here in the security center.


VM Move
As the name implies, resource groups in Azure are used to group related resources together. That way, they can be treated as a unit and managed as such. So, for example, you might deploy all of the underlying resources in Azure that make a web application work.
Like the web app itself, maybe a back-end database, and so on, you could lump those into a resource group and manage them as one. So, for example, if you were to delete the resource group, all of the resources within it also get deleted. In this case, we're going to move a virtual machine to a target resource group.
Often this is done because you're reorganizing resources. So for example, here I've got an Ubuntu virtual machine called Ubuntu-1. And if I actually click on it to open it up, I'll be able to see its current resource group.
You could also see that in the Virtual machines view under the Resource group column, but we can see it here too. It's Rg1, resource group 1, but we also have a change link next to the resource group, which I'm going to click on. So it's currently in resource group 1, or Rg1. Now what we can see here are the related resources. So we can see there are some items related to the virtual machine itself, let's just scroll down.
We can also select other items that we might want to move along with it, so I'm just going to choose Select all. So we might have disks related to it, other items. Now, you can also cherry-pick and say, well, the only real thing I want to move is things related to that VM. Such as its operating system, disk, and any other items that might make sense, like the network interface, or the NIC.
For that item, maybe the network security group, maybe public IP addresses it might be using, and so on, so it's really up to you.
Now what we have to do at this point is specify the target Resource group from the drop-down list. So I've got another Resource group called Rg3.
I'm going to turn on the check mark that says, I understand that when I do this, some moved resources will, well, they're definitely going to get a new resource ID. Part of the resource ID is the name of the resource group. So if you've got some scripts or some kind of command line tools that refer to the current resource IDs.
You're going to have to change them up after you move these items to the new resource group. It's not a problem, let's go ahead and click OK. It's going to run a validation, and then we'll be able to proceed with moving to a new resource group. And, from the Notifications bell icon in the upper right, I can see it's still in the midst of moving those resources.
After a few minutes, if you check the Notifications area, you'll see, hopefully, that it successfully moved the resources to the new resource group. Let's check it out, we're still looking at outdated information here on the screen. We could, of course, click Refresh to get a refresh of items. Now it says, Not found, well, we've kind of moved the object.
So let's go back one more level to our list of virtual machines, where it still says that Linux Ubuntu Virtual machine is in Rg1. We know that's not the case, so let's just go ahead and do a Refresh.
It's now in Rg3, as we can see, so of course, if we click to open up that object in the Overview blade, it's reflected here. We can see the Resource group is listed indeed as Rg3.
Now, what's interesting is that if we, say, go down to the Properties and if we take a look at some of the details, we can see that some things will not have changed.
The Computer name hasn't changed, the private IP, the virtual machine, Operating system type, that type of stuff doesn't change. And also, if I go back up to Overview once again, the Location or region, in this case, Canada East, does not change, also.
We should actually scroll back down and take a look at the Properties again. Because remember, we had a message about the resource ID being different after the move. And you might have to change any scripts that referenced the old one.
So, if I look at the properties of the VM, if we kind of scroll down further, we'll see the Resource ID. And what will have changed is part of that Resource ID path that refers to the Resource group where that object was deployed.


VHD Deployment Templates
You can reuse existing VHD files, or virtual hard disk files, that you might have created already for VMs on-premises. You can use those again in the Azure Cloud. So you can deploy or create a new virtual machine and reference an existing VHD.

[Video description begins] A browser displays with two tabs. In the first tab, the Storage accounts blade is open in the Microsoft Azure web portal. In the second tab, a web page labeled "azure-quickstart-template" is open. The second tab is selected. It includes a section labeled "Create a virtual machine using Managed Disks from a specialized vhd in a new or existing virtual network". It includes a button labeled "Deploy to Azure". [Video description ends]

Here I've done a search here on GitHub looking for a template, an ARM template for Azure to create a virtual machine using a specialized VHD, which really just means a custom one. So right here, I have a button to link directly to Azure, Deploy to Azure. So I'm going to go ahead and click on that.

[Video description begins] A blade labeled "Create a VM in a new or existing vnet from a custom VHD" opens in the Microsoft Azure web portal. The blade includes sections labeled "TEMPLATE", "BASICS", and "SETTINGS". The TEMPLATE section contains three icons labeled "Edit template", "Edit parameters", and "Learn more". [Video description ends]

Now, from here, I could click Edit template if I wanted to go in and see the actual JSON and work through it. And, of course, we can see that there are a number of variables that we are supplying here, like the network interface card name, the public IP address name, the disk name, and so on.

[Video description begins] He clicks the Edit template icon and its corresponding blade opens. It is divided into three sections: tool bar, navigation pane, and code viewing pane. He points to files labeled "nicName", "publicIPAddressName", and "diskName" under a folder labeled "Variables" in the navigation pane. Several code lines are displayed in the code viewing pane. [Video description ends]

However, I don't want to actually edit that. So I'm going to go back here. And we can see that based on the template, there are some things that we need to specify, such as a Resource group.

[Video description begins] He closes the Edit template blade. [Video description ends]

I'm going to tell it I want to create a new Resource group. Let's just call that Rg7.

[Video description begins] In the BASICS section, he clicks a link labeled "Create new" below a drop-down list box labeled "Resource group". A dialog box opens which includes a text box labeled "Name". He clicks a button labeled "OK" and the dialog box closes. The Resource group drop-down list box displays an option labeled "Rg7". [Video description ends]

And this is going to be to deploy our new virtual machine from an existing disk. I'm going to scroll down and select the appropriate location where I want this deployed.
And maybe I'll call this Ubuntu-1. It's going to be Linux-based. I already have a Linux VHD, or virtual hard disk file uploaded to a storage account.
So I need to copy the URI for that and place it here. So let me flip over to my storage accounts. I'm going to open one up.
I've got a folder I've created in a storage account called vhds. We'll see that when I go under Blob service here and click on Containers.
And in the vhds folder, or container, I've already uploaded an Ubuntu Linux vhdx file, it's about 4.5 gig.
So I'm going to go ahead and click on its name here to open up its properties. Because from there I'll be able to copy the URI. So here it's listed as URL.
I'm going to go ahead and copy that. And I'm going to go back over to our other tab and paste that into the Os Disk Vhd Uri field.
We can also specify things like the VM size, whether we want to build a new VNet, and subnet, or whether we want to use existing ones. So I'm going to let it build all of these new items. We can see here that the DNS name for the public IP resource will concatenate the text VM dash, and then a unique string, based from the resource group ID. And we can see that the Location for this will be the location of the resource, the location to build or deploy the VM.
So down at the bottom, I'm just going to go ahead and say, I agree to the terms and conditions stated above, and I'm going to choose Purchase at which point, it will deploy the virtual machine.


VM Resizing
Resizing a virtual machine means vertically scaling it. Scaling up vertically means adding extra underlying horsepower. So things such as the number of vCPUs to support your workload or the amount of RAM. Of course, scaling down vertically means reducing the amount of underlying horsepower. Because you might not need it for the given workload, and at the same time, you would save on costs. Naturally, having a running virtual machine with four vCPUs and 16 gigs of RAM is going to cost more than something with less.
So to get started here, I’m going to go into an existing virtual machine, it’s an Ubuntu-1 Linux virtual machine, although it is stopped. And I’m going click on it to open up its navigation bar.
One of the things I can see here is the size, I can resize it. When I click Size, I'll see what it's currently configured at. Now, you can monitor the performance of a VM with its workloads running in it to see if the current sizing is adequate or not.
We do have a Resize button that is available here. What it's doing is resizing it based on what is selected in the background. So you can select the appropriate sizing with the number of vCPUs, the amount of RAM, the supported Data disks. The maximum disk IO operations per second, which is an important measure of throughput for the disk subsystem. And of course, if we look in our Notifications area, it resized it. Let's take a look at doing that with one that's already running. We've got a WinSrv2019-1 VM, we can see the status here is shown as Running.
If I click on it in the same way I can go to Size. Now, when I look at the sizing for that virtual machine, we'll see that we have the option of simply selecting a different size. But what's interesting about this before we do that, is if I go up to the Overview part of that virtual machine.
We'll have some details about that virtual machine such as its current sizing.
Here it's set to Standard DS1 v2, which includes one vCPU and about 3.5 gig of memory. Just bear in mind that depending on what your workload needs are, some of the more enhanced virtual machine sizes are only available in specific regions. So you might find that that is a bit of limitation that might dictate the region in which you specify where you want your virtual machine to be deployed. However, let's go back to Size. Now, you have some filters up at the top, for example, we can see the Family here's for general purpose usage. But I can actually change that and say, well, I actually need GPU support. So we can select GPU.
Now, remember that some specialized sizes may not be available in certain regions, GPU is for graphics processing, intensive graphics processing. Now, let's actually keep that open. Let's just duplicate this web browser page. And let's just go back to the Home page and let's choose to create a new virtual machine. We're not actually going to follow through, but let's just check out the sizing as you're creating a VM. I'll just choose Windows Server 2016, it doesn't matter because we're not going to create it.
But I am interested though on the first part of the wizard in taking a look at, first of all, the sizing. But before we do that though, let's specify a resource group and a Region. Notice, currently, it's (Canada) Canada East, okay? Well, let's say we were to switch that to Canada Central, like our other virtual machine, (Canada) Canada Central.
So if you scroll down a little bit, you'll notice that the Size is set to Standard DS1 v2, that's fine. If I click Change size, I get the same type of options that we get for an existing VM.
However, if I were to click on General purpose and uncheck General purpose and select GPU, so filtering by GPU.
Well, you've actually got one here but it's grayed out. We can't even select it. So if I try to select that VM size, and it just doesn't take because it's not available there. However, if I were to choose a different region, let's say, (US) East US, go back into changing the size.
And then why don't we do the same exact type of thing? Let's restore the default filters. Let's go back here and uncheck General purpose. Let's select GPU. And then we can see that there is one available that we could actually select here.
So just bear in mind that when you're resizing, if you don't see the selections you think you should see. It could be because of the region that the VM has been deployed into. So I'm going to close that, we're not going to keep it here.
I'm just going to clear all of the filters. So if we wanted to resize, we're limited to resizing to the size availability within the region. So I can just make a selection and I can resize it. Notice, there is a note here that says, if your VM's running, resizing it's going to cause it to be restarted. That's fine as long as we are aware of that. And there's not a mission critical work load running at the time that needs to be running when we resize it.


VM Data Disks
In this demonstration, I'll use the portal to create a managed disk. A managed disk is really a virtual hard disk that you define in the Azure cloud that can you then attach or associate with virtual machines. And at that point, it's kind of like plugging in a physical disk device into a physical server. It then gets recognized and you partition and format it as you normally would.
So to get started here in the portal, I'm going to click Create a resource. I'm going to search for managed disk. And I'll choose Managed Disks. And I'll click Create.
Now as normal, I'll have to specify things like the resource group where I want this deployed. So I'll choose that from the list and I have to come up with a name. I'm going to call this East-Windows-DataDisk1.
And it seems like it likes the name, so that's good. I'm going to put it in a region where I know I've got a virtual machine that I want to attach it to. So (Canada) Canada East, or actually in my case, I'm going to change that up so that it becomes (Canada) Canada Central. And I'm going to specify down below that the source type is None. So I'm not creating this virtual disk from essentially a blueprint or an image, not from a storage blob that I might have uploaded, not from a snapshot of an existing managed disk.
The default size here is 1024 GiB, which works out to about one terabyte. I can change the size, but I'm going to accept that. I'll just continue through the wizard, no tagging, review, and create. It'll run the validation, which passes, and I'll click Create. And this is only the first part of this because the next part is going to be to attach it to a virtual machine to make it usable.
Okay, so it looks like it's done. So let's go into our Virtual machines view and let's attach this disk to a virtual machine. I've got a Windows Server 2009 VM. It's running, it's in the Canada Central location.
So I'm going to click on that to open up the properties for the virtual machine and I'm going to go down to Disks.
And here I'll see any existing disks associated with this virtual machine. We can see we have an OS disk. However, down under Data disks, it says None.
So I'm going to click the Add data disk button, and from the name drop-down list I'm going to choose the East-Windows-DataDisk1 that we just created. And after I've done that, I'm going to click Save up at the top to add that disk device.
Now this is essentially the second step. The first was creating the managed disk. The second was to attach it or add it to a virtual machine, which we're doing, and it's done now. We can see in our notification area.
So the third thing we need to do then is to go into that operating system. So use RDP to get into that OS to create a file system on that disk device so it's actually usable. So in that server, I'm going to go to the Start menu and search for disk and I'm going to choose Create and format hard disk partitions.
There, it is right there. And what we want to do is make sure we work with the newly added device that pops up automatically, Disk 2.
So I'm going to treat it as an MBR or master boot record type of disk. I'll click OK. And if I just expand this and maximize the window, there's just two down there. So approximately 1,024 gig as we can see, but it's all Unallocated.
We can see the disk is Online. And I can go ahead and right-click on it and do whatever I need to do, for example, convert it to GPT or make it a dynamic disk, put it offline.
But I'm okay with that as it is. I'm just going to right click in that disk area and create a new simple volume.

[Video description begins] He right-clicks on the second section of the Disk 2. A flyout opens which includes an option labeled "New Simple Volume". He clicks the New Simple Volume option and its corresponding wizard opens. [Video description ends]

And I'm just going to go through and accept all of the defaults for this and I'm going to use the whole thing to carve it all up into one big disk partition.

[Video description begins] He clicks a button labeled "Next" to accept all defaults. He then clicks a button labeled "Finish" and the New Simple Volume Wizard closes. [Video description ends]

And we can see it's now in the midst of formatting and it's not going to take very long, then it's done. So we now have a new disk here.

[Video description begins] The first section of Disk 2 displays, Basic 1024.00 GB Online information. The second section of Disk 2 displays, New Volume 1024.00 GB NTFS, Healthy (Primary Partition) information. [Video description ends]

Now, when I went through the wizard and accepted the defaults, it allocated or assigned drive letter E. Let's just check that out here, let's go into Windows Explorer. Here's our New Volume, drive E.


Azure Key Vault
An Azure Key Vault is a resource in the Azure cloud that you can use as a central storage location or repository for secrets, such as encryption keys. You can then build your applications or configure various Azure services to retrieve those secrets like keys from the centralized vault.
So to get started here in the portal, to create the vault, I'll click Create a resource. And I want to create a key vault. So I'm going to search for key vault and I'll choose Key Vault, then I'll click on Create.
The first thing I have to do, which is normally the case when deploying Azure resources, is deploy this into a specific Resource group. So I'll choose Rg1, we'll call this KV1East, key vault one east. So it's going to be in the (US) East US Region.
Down below, I'm going to leave all the defaults such as soft deletion being enabled and 90 days as the Retention period, that's all fine. I'll click Next : Access policy > for Access policy.

[Video description begins] The Access policy page displays. [Video description ends]

So for example, I'm going to turn on, enable access to Azure Virtual Machines for deployment. So if they want to access a key in the key vault and even after the fact down here for disk encryption, so I could add that and I could add additional items, I could Add Access Policy.

[Video description begins] He selects a checkbox labeled "Azure Disk Encryption for volume encryption". Then he points to a link labeled "Add Access Policy". [Video description ends]

And I could change that at any point in time. However for now that's good. I'm going to click Next : Networking >. I'm going to leave this at Public endpoint (all networks) for Connectivity method.

[Video description begins] The Networking page displays. It includes three radio buttons labeled "Public endpoint (all networks)", "Public endpoint (selected networks)", and "Private endpoint". The Public endpoint (all networks) radio button is selected by default. [Video description ends]

And on next, I'm not going to specify any tagging, I'll go to Next : Review + create >. The validation has passed, based on my selections, so I'm going to go ahead and click Create to create the vault.

[Video description begins] He clicks a button labeled "Next: Tags". The Tags page displays. Then he clicks a button labeled "Next: Review + create". The Review + create page displays. [Video description ends]

After a moment, the deployment of the key vault is complete, so I'm going to click Go to resource.

[Video description begins] A blade labeled "KV1East" opens. It is divided into two sections: navigation pane and content pane. An option labeled "Overview" is selected in the navigation pane and its corresponding blade is open in the content pane. The blade displays a message, which reads: Your deployment is complete. It also includes a button labeled "Go to resource". [Video description ends]

Now within the key vault, under Settings we can build or generate, as it's called, Keys.

[Video description begins] A blade labeled "KV1East" opens. He clicks an option labeled "Keys" under a subsection labeled "Settings" in the navigation pane and its corresponding blade opens in the content pane. It includes a button labeled "Generate/Import" and a table with three columns and no rows. The column headers are Name, Status, and Expiration Date. [Video description ends]

You can also actually import any if you have any. For example, I'll click Generate/Import for keys, I want to create a key here. So Generate, I'm going to call it Key1. I can determine whether the Key Type is of RSA or elliptic curve EC, I can choose the RSA Key Size in bits, leave it on 2048.

[Video description begins] A blade labeled "Create a key" opens. He types Key1 in a text box labeled "Name". [Video description ends]

I can set an activation date of one the key becomes valid and can be used and also when it expires and can no longer be used. And it's going to be enabled by default. So I'll just go ahead and click on Create.

[Video description begins] The Create a key blade closes. A row adds in the Keys blade. The row entries under the Name and Status column headers are Key1 and Enabled. [Video description ends]

If I go to Secrets, I can generate or import secrets.

[Video description begins] He clicks an option labeled "Secrets" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a button labeled "Generate/Import" and a table with four columns and no rows. The column headers are Name, Type, Status, and Expiration Date. [Video description ends]

Now a secret would be used, for example, for a password, so you give a Name to it and a Value. And it might be credentials required as part of the connection string for an app to talk to a database or something like that. And so you'd have to configure your app to be able to get into this vault to read that secret.

[Video description begins] He clicks the Generate/Import button and a blade labeled "Create a secret" opens. [Video description ends]

Now, that's fine, having done that, we can also go to Certificates and work with those. We can generate or import, we're talking about PKI security certificates. This will be a central storage repository for those items.

[Video description begins] He switches back to the Secrets blade opened in the KV1East blade. He clicks an option labeled "Certificates" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a button labeled "Generate/Import" and a table with four columns and no rows. The column headers are Name, Thumbprint, Status, and Expiration Date. He clicks the Generate/Import button and a blade labeled "Create a certificate" opens. [Video description ends]

We also have the option besides those three items of configuring the access policy. We saw that when we were deploying this.

[Video description begins] He switches back to the Overview blade opened in the KV1East blade. He clicks the Go to resource button and the KV1East blade opens. He clicks an option labeled "Access policies" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a link labeled "Add access Policy" and a table with six columns and no rows. The column headers include Name, Email, and Key Permissions. [Video description ends]

And so we could Add Access Policy to further determine which entities should have access to these items.

[Video description begins] He clicks the Add access policy link and its corresponding blade opens. [Video description ends]

So we have templates here that we could select from. So maybe Certificate Management, or we could do everything manually.

[Video description begins] He clicks a drop-down list box labeled "Configure from template (optional)" and its corresponding drop-down list displays. It includes options labeled "Key Management" and "Certificate Management". [Video description ends]

We could set Key permissions. Now these are for keys, so Get, List, Update, Create, Import, Delete, Backup, Restore, and all that stuff. But that's just the keys. Then there's Secret permissions, Certificate permissions, you would apply that to a security principle that should have those privileges.

[Video description begins] The Add access policy blade includes a section labeled "Select principal". He clicks the Select principal section and a blade labeled "Principal" opens. It includes a list of members to which principal will be applied. The list includes members labeled "AD Hybrid Health" and "All Enabled Users". [Video description ends]

So it could be a security principal that's been created in Azure AD, that represents a software component or an application. In that way, we're limiting what access is allowed to keep vault secrets for those components.

[Video description begins] He closes the Principal blade. He switches back to the Overview blade opened in the KV1East blade. [Video description ends]


VM Disk Encryption and the Portal
In this demonstration, I'm going to use the portal to encrypt VM disks. Now this is happening at the Azure level. Despite the fact that there are many solutions out there that let you encrypt disk volumes and files on them within the OS. We're talking about doing it here at the Azure level.
So in the portal, I'm going to navigate to an existing virtual machine that's up and running. It's a Windows VM, although you can enable encryption for Linux VMs in the exact same manner.
What we need to do when we open up the navigation bar with the VM properties is we need to scroll down until we see Disks. When we click on Disks, we'll then have the option of encrypting OS or OS and data disks.

[Video description begins] He clicks the Disks option under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. [Video description ends]

Down below, I can see that this VM has an OS disk, and under the Encryption column it currently says Not enabled. Same goes for the one data disk that was associated here. It's also not enabled for encryption.

[Video description begins] The Disks blade includes an OS disk table with five columns and a row. The column headers are Name, Size, Storage account, Encryption, and Host caching. He points to WinSrv2019-1_OsDisk_1 and Not enabled row entries under the Name and Encryption column headers respectively. The blade also includes a Data disks table with six columns and a row. The column headers are LUN, Name, Size, Storage account, Encryption, and Host caching. He points to East-Windows-DataDisk1 and Not enabled row entries under the Name and Encryption column headers respectively. [Video description ends]

So we can click the Encryption button up at the top. The current selection is going to be set to None. It's not encrypted currently, but we can choose to encrypt the OS disk or the OS and data disks, which I'm going to do.

[Video description begins] He clicks a button labeled "Encryption" and its corresponding blade opens. It includes a drop-down list box labeled "Disks to encrypt". He clicks the Disks to encrypt drop-down list box and a drop-down list appears. He selects an option labeled "OS and data disks" from the drop-down list. [Video description ends]

Now the next thing I need to do is click the link to select a key vault and a key within the vault for encryption. So I've already set these up ahead of time. So from the drop-down list, I'm going to select a Key vault.

[Video description begins] He clicks a link labeled "Select a key vault and key for encryption"and its corresponding blade labeled "Select key from Azure Key Vault" opens. [Video description ends]

And, from that key vault, I'll then go down and select a Key within it. I've got a Key already created called Key1. And I can choose a specific Version of the key. I'll choose that, and then I'll click Select.

[Video description begins] He selects an option labeled "KV1East1" in a drop-down list box labeled "Key vault". Then he selects an option labeled "Key1" in a drop-down list box labeled "Key". He clicks a drop-down list box labeled "Version". An alphanumeric key displays. He selects the alphanumeric key in the Version drop-down list box. The Select key from Azure Key Vault blade closes. [Video description ends]

Now, at this point, we get a message that says, well, your key vault isn't enabled for disk encryption. But we do have a button down below where we can enable that in the access policy for the vault. So I'm going to choose Enable key vault for disk encryption, and it says it successfully did it. So I won't be prompted with that again if I want to use that key from that same vault for encrypting other VM disks. So, at this point, I'm going to click Save to save the encryption setting.

And it says, would you like to encrypt and then restart the virtual machine? So this is intrusive in the sense that there will be some downtime after the encryption is complete. That's fine, I'm okay with that, so I'm going to go ahead and click Yes. After a moment in the Notifications area, we can see it successfully updated the disk encryption settings. So let's kind of back out of here and let's just go back to our list of Virtual machines to refresh the view.

[Video description begins] He closes the Encryption blade. [Video description ends]

Let's click back on that same virtual machine. Let's go back and examine the disk configuration.

[Video description begins] He switches back to the Virtual machines blade. Then he refreshes the virtual machines table. Then he double-clicks the WinSrv2019-1 row entry under the Name column header and its corresponding blade opens. Then he opens the Disks blade. [Video description ends]

And, when we do that, we can see that under Encryption, we've got Enabled for both the OS disk and the data disk attached to this Windows virtual machine.
VM Disk Encryption and the CLI

[Video description begins] Topic title: VM Disk Encryption and the CLI. The presenter is Dan Lachance . [Video description ends]

You can use the CLI to enable disk encryption for Azure VM disks.

[Video description begins] The PowerShell command prompt window is open in the Microsoft Azure web portal. The PS /home/danlachance72> prompt is displayed. [Video description ends]

Here, in the Cloud shell, I'm going to start by typing az vm -h for help. What's the next level command after az vm?

[Video description begins] He executes the az vm -h command. The output displays a list of subgroups and commands that can be used with az vm command. [Video description ends]

And I can see in the e's here, encryption shows up. So that would be the next thing that we're interested in. So therefore, az vm encryption, but what's next? Let's figure it out, -h for help again, enable would make sense.

[Video description begins] He clears the screen. The prompt remains the same. He executes the az vm encryption -h. The output displays a list of groups and commands that can be used with az vm encryption command. The prompt remains the same. [Video description ends]

Okay, so up arrow key, az vm encryption enable. Now I'm going to have to specify the resource group where the virtual machine resides. So -g for that, in my case Rg1. And -n for the name of the virtual machine, in this case Winsrv2019-1 is the name of my VM. And then I'm going to specify --disk-encryption-keyvault. I need a key vault and I already have one called KV1East1, Key Vault 1 East 1. Now in this case, I'm not even specifying a key. So this is an alternative way to work with this where the key will be automatically created and placed in the specified key vault. So I'm going to go ahead and press Enter. And, after a moment, it looks like it's completed.

[Video description begins] He executes the following command: az vm encryption enable -g Rg1 -n Winsrv2019-1 --disk-encryption-keyvault KV1East1. No output displays. The prompt remains the same. [Video description ends]

Let's go ahead and run az vm encryption show. And we'll specify the resource group and name of the virtual machine. You can go ahead and press Enter.

[Video description begins] He clears the screen. The prompt remains the same. He executes the following command: az vm encryption show -g Rg1 -n Winsrv2019-1. The output displays a code which includes the properties of the Winsrv2019-1 virtual machine. The prompt remains the same. [Video description ends]

And we can see that encryption is enabled on the disks within that VM.
VM Disk Encryption and PowerShell

[Video description begins] Topic title: VM Disk Encryption and PowerShell. The presenter is Dan Lachance . [Video description ends]

In this demonstration, I'll use PowerShell to enable VM disk encryption.

[Video description begins] The PowerShell command prompt window opens in the Microsoft Azure web portal. The PS /home/danlachance72> prompt is displayed. [Video description ends]

To get started here in Cloud Shell, I'm going to establish a couple of variables.

[Video description begins] He pastes and executes four commands simultaneously. No output is returned for each of the command and the prompt remains the same. [Video description ends]

The first one I'm going to call $keyVault. And essentially it's going to store the result of retrieving a Key Vault that I've already created called kV1East1 in a resource group called Rg1.

Next, I'm creating a variable called $diskEncryptionKeyVaultUrl.

[Video description begins] He highlights the first command, which is as follows: $keyVault = Get-AzKeyVault -VaultName KV1East1 -ResourceGroupName Rg1 [Video description ends]

It's going to use the variable we established above and call upon the .VaultUri property.

[Video description begins] He highlights the second command, which is as follows: $diskEncryptionKeyVaultUrl = $keyVault.VaultUri. [Video description ends]

Then we're going to make a variable called $keyVaultResourceId. It's going to use our variable from above and call upon it .ResourceId property of that variable.

[Video description begins] He highlights the third command, which is as follows: $keyVaultResourceId = $keyVault.ResourceId. [Video description ends]

Then I'm going to create a fourth variable called $keyEncryptionKeyUrl. And, within parentheses because I want to treat it as its own command first, I'm going to run Get-AzKeyVaultKey, specify the name of the vault, and a key within it. The vault already exists and so does the key, the key is called Key1. So that's all within parentheses and I'm calling upon .Key.kid.

[Video description begins] He highlights the fourth command, which is as follows: $keyEncryptionKeyUrl = (Get-AzKeyVaultKey -VaultName KV1East1 -Name Key1).Key.kid. [Video description ends]

So now that we've got that done, we can start to actually enable encryption. To do that, I'm going to use the set -AzVMDiskEncryptionExtension cmdlet. I'm going to specify the resource group where the virtual machine resides, the -VMName parameter will have the name of the VM.

[Video description begins] He executes the following command: Set-AzVMDiskEncryptionExtension -ResourceGroupName Rg1 `. The prompt displays the -VMName "WinSrv2019-1" ` and four variables with their values. Then the prompt asks to enable AzureDiskEncryption on the VM. [Video description ends]

And then we're going to use the four variables that we've defined above for each of their respective four parameters. For -DiskEncryptionKeyVaultUrl, -DiskEncryptionKeyVaultId, -KeyEncryptionKeyUrl and -KeyEncryptionKeyVaultId. So at this point it asks, this command will prepare the VM for encryption and might reboot it which could take 10 to 15 minutes or so.

Save your work in the VM. Would you like to continue? I'm going to choose y for yes. Once the PowerShell cmdlet is finished executing, if in the portal we navigate to our VM and go to the Disks blade, we'll be able to check out whether encryption is enabled or not. And in fact, it is on both the OS disk and the one data disk associated with this VM.

[Video description begins] He minimizes the PowerShell. The WinSrv2019-1 blade opens in the Microsoft Azure web portal. Then he opens the Disks blade. Then he points to Enabled row entries under the Encryption column headers of the OS disk and Data disks tables. [Video description ends]

And, if we flip back to the Cloud Shell, we can see the result of enabling disk encryption has succeeded.

[Video description begins] When he typed y to enable AzureDiskEncryption on the VM, the output displayed a table with four columns and a row. The column headers are RequestId, IsSuccessStatusCode, StatusCode, and ReasonPhrase. The row entries under the IsSuccessStatusCode, StatusCode, andReasonPhrase column headers are True, OK, and OK respectively. The prompt remains the same. [Video description ends]
Azure VM Custom Scripts

[Video description begins] Topic title: Azure VM Custom Scripts. The presenter is Dan Lachance . [Video description ends]

Azure Virtual Machines support extensions. Extensions are essentially small software agents that can run within a VM to add functionality. In our case, it will be to run a custom script. Here on premises, I've got a PowerShell script that's using the Install-WindowsFeature cmdlet to install the IIS web server and the management tools associated with that.

[Video description begins] A file labeled "PowerShell_Install_IIS.ps1" opens in the WordPad application. It displays the following command: Install-WindowsFeature -name "Web Server" -IncludeManagementTools. [Video description ends]

Here in the portal, I've popped up a Windows virtual machine and I'm looking at the Overview blade. So in the navigation bar, what I'm going to do is scroll down and under Settings, I'll click Extensions.

[Video description begins] The WinSrv2019-1 blade opens in the Microsoft Azure web portal. He clicks an option labeled "Extensions" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a button labeled "Add" and a table with three columns and two rows. The column headers are Name, Type, and Version. [Video description ends]

Here we'll see any existing extensions that have been configured for this VM. We've got one here for as AzureDiskEncryption and the MicrosoftMonitoringAgent, but we've got an Add button. I'm going to click Add because I want to add the custom script extensions.

[Video description begins] He points to AzureDiskEncryption and MicrosoftMonitoringAgent row entries under the Name column header. Then he clicks the Add button and a blade labeled "New resource" opens. It includes a list of resources. [Video description ends]

So I'm going to scroll down and we can see from Microsoft Corp, Custom Script Extension. I'm going to select that and choose Create.

[Video description begins] He double-clicks a resource labeled "Custom Script Extension" in the list of resources and its corresponding blade opens. It includes a button labeled "Create". He clicks the Create button and a blade labeled "Install extension" opens. It includes text boxes labeled "Script file (Required)" and "Arguments (Optional)". The Script file (Required) text box is linked with the Browse button. [Video description ends]

I'm going to specify the Script file that we were just looking at. We can see it successfully uploaded our PowerShell file which is used to install IIS.

[Video description begins] The Script file (Required) text box displays an uploaded file labeled "PowerShell_Install_IIS.ps1". [Video description ends]

And, depending on how the script is written, it might require arguments, command line values. This one does not, it's not parameterized, so I'm just going to click OK.

[Video description begins] The Install extension blade closes and the Extensions blade displays. A new row adds in the table. [Video description ends]

We can see in the navigation bar, we can see in our Notifications that the deployment is in progress. And, in the background, we can see that it's already added, the CustomScriptExtension to our VM. And before too long, we can see that the Deployment succeeded. So we can go ahead and click on that link if we want to get more information about what was done.

[Video description begins] A notification message displays, which state: Deployment succeeded. He clicks the notification message and a blade labeled "Microsoft.CustomScriptExtension-20200330055147" opens in which an option labeled "Overview" is selected in the navigation pane and its corresponding page opens in the content pane. [Video description ends]

So custom script extensions then are useful when you want to enable some post deployment configuration for VMs from a script.
                    
                    
Azure Networking Overview
Planning and implementing your Azure network solutions shares a lot of commonalities with what you would have done in the past. 
And currently with your on-premises network environment. You have to think about how many networks you're going to need and how they will be used. Which services will be deployed into those networks? The IP address ranges that will be used by subnets and so on. A lot of that does not change in the Azure cloud. So we're going to talk about components in the Azure virtual networking world. Such as VNets or virtual networks, which contain one or more subnets. Now the subnets are actually where resources get deployed. We'll also talk about virtual private networks or VPNs. VPNs provide a secured encrypted tunnel between two endpoints. And that's another network type of configuration in Azure. Of course, we have to think about the ranges of IP addresses that will be assigned to VNets, and ultimately to the subnets within those VNets.

An Azure virtual network or VNet is a resource that you define in the Azure cloud. You have to allocate an IP address range at the time that you create a VNet. You can also specify DNS server configurations. What that means is you can stick with the default Azure-provided DNS servers, which are used for resolving names to IP addresses. But in some cases, depending on the services you're going to deploy, you might want to have custom DNS servers.

As an example, if you want to manually deploy Microsoft Active Directory Domain Services with domain controllers. Which all requires DNS to locate domain controller records. Then you're going to have to configure your own custom DNS servers, and configure the Azure VNets accordingly. You can also configure an Azure virtual network and think of it as an extension of your on-premises network. Such as when you link the two together with a site-to-site VPN. That's one way to do it. Now each VNet consists of one or more subnets.

And each subnet has to have an IP address range to allocate to resources in that subnet. And that IP address range needs to fall within the VNet range. Now if you're working with Azure VNets and subnets, but you don't have a solid understanding of IP addressing, you're going to have to talk to somebody that does to get the correct values. But really, that shouldn't be an issue because it should be planned ahead of time. We can also associate network interfaces with a subnet. A network interface is its own Azure resource that of course is tied to a virtual machine. We can also associate a Network Security Group or NSG with a subnet.

A Network Security Group is a collection of security rules that either allow or deny traffic coming into the subnet in this case. Or traffic leaving the subnet. Within a subnet, you can also configure a route table association. A route table contains route table entries. So you can control traffic flow, such as forcing it to go through a firewall appliance on its way out to the Internet, for instance. So subnets then are contained within a VNet. You can manage Azure network components through ARM templates, using PowerShell cmdlets, using the CLI, the command line interface. And of course using the GUI web-based portal tool.

[Video description begins] VNet Creation Using PowerShell. [Video description ends]

So here we some PowerShell examples of how to work with VNets. In the first line, we are creating a subnet variable to store subnet configuration before we actually create the VNet that contains this subnet. So, we are using New-AzVirtualNetworkSubnetConfig. Well, we're naming the new subnet subnet1 and we're setting the address prefix here to 10.0.1.0/24. So there are 24 bits in the subnet mask starting from the left. That means that the subnet network address here is 10.0.1. You can't just make this stuff up, it needs to be planned properly first.

Now the next thing I'm doing is actually creating the VNet with New-AzVirtualNetwork. I'm specifying the ResourceGroupName parameter. So I'm deploying this VNet into a resource group called Rg1. The location is CanadaEast. The VNet name is VNet4. And notice that the address prefix here for the VNet is 10.0.0.0/16. 16 bits in the mask, so that means only 10.0 identify VNet4. And so subnet1 falls within that, because subnet1 up above if you take a look, is 10.0.1. So therefore, that range is properly within the VNet IP address range.

[Video description begins] VNet Creation Using the Azure CLI. [Video description ends]

You can also work with VNets in the CLI. Here we see az network vnet create. We're deploying a VNet in Rg1, that's the resource group, the name of it is Vnet5. We're sending the address prefix to 10.0.0.0/16. And we're adding the subnet here when there's no need to set up the subnet config first like we did in PowerShell. So --subnet-name. It's going to be called Subnet1. And then we use the --subnet-prefix parameter, and give it the subnet IP address range in CIDR format. And again, as per our previous example, notice it's 24 bits for the subnet range and it falls within the Vnet5 IP address range.


VNets, Subnets, and the Portal
In this demo, I'm going to use the portal to create a new Azure VNet and a subnet. Now when you plan this on premises, you think about how many networks you will need, what types of services will be deployed into those networks and the IP address ranges that will be used. And in the same way, we have to consider those same factors when we plan our VNets in the Azure cloud.
So to get started here in the portal, I'm going to click Create a resource. And I'm going to search for virtual network and I'll select Virtual Network and Create. I have to make sure that I follow standard naming conventions for the organization.

[Video description begins] A blade called "Create virtual network" opens. It contains tabs called "Basics", "IP Addresses", "Security", "Tags", and "Review + create". The Basics tab is selected. [Video description ends]

So first thing I'll do here is put this in a resource group called Rg1 and I'm going to call this Vnet1. It's going to be in the Canada Central region, so I'll click Next for IP addressing. And for the IP address space, it suggests here 10.0.0.0/16, 16 bits in the subnet mask, which is indicative here that we're going to have a network address of 10.0. I can also add an IPv6 address space, I can also add multiple subnets. There's a default subnet that's automatically selected here, however, I don't want to use that. I'm going to click Add subnet to do my own thing.

[Video description begins] A blade called "Add subnet" opens. [Video description ends]

First, it's going to be called Subnet1, and I'm going to use the IP address range that falls within the address space for the VNet listed over on the left. So for example, 10.0.1.0/24. So I've got a 24-bit subnet mask, which in this case implies that the network address for this subnet is 10.0, which is the VNet range .1, so it's within that range. And at this point I'll click Add, so now Subnet1 shows up down below. Just for fun, let's add a second subnet.

[Video description begins] He clicks a button called "Add" and the Add subnet blade closes. [Video description ends]

And you might need to do this, for example, if you want to have one subnet for testing and another subnet that you might use for production if you're doing software development, for instance. So I'm going to click Add subnet, this is going to be called Subnet2.

[Video description begins] A blade called "Add subnet" opens. [Video description ends]

And for the range, I'll use 10.0.2.0/24, so still a 24-bit subnet mask, yet a different network. The network prefix here is 10.0.2. I'll click Add, the subnets show up at the bottom of the list, that's great.

[Video description begins] He clicks a button called "Add" and the Add subnet blade closes. [Video description ends]

I'll click Next: Security at the bottom.

[Video description begins] An option called "DDos protection" is set to "Basic" and an option called "Firewall" is set to "Disabled". [Video description ends]

I'm not going to change any of the settings for distributed denial of service protection or the Azure firewall option. I'll click Next that's for tagging where I could add key and value pairs. For example, if this is going to be for a Project ABC, I might want to flag it that way, I don't have to.

[Video description begins] He enters the keys called "Project" and "ABC" in the fields "Name" and "Value" respectively. [Video description ends]

I'll click Next for review and create, and after it passes the final validation, I'll click Create to create the VNet and its two subnets.

[Video description begins] He clicks a button called "Create" and a blade called "Microsoft.VirtualNetwork-20200321081017 | Overview" opens. It includes a button called "Go to resource". [Video description ends]

After a moment, we can see our deployment is complete, so we can either click Go to resource here or at any point in time, I could navigate, for instance, to the All resources view to see my newly created VNet, Vnet1.

[Video description begins] He switches back to the Microsoft Azure homepage. He clicks an option called "All resources" under a section labeled "Azure services". A blade called "All resources" opens. It includes a table with five columns and seven rows. The column headers are "Name", "Type", "Resource group", "Location", and "Subscription". [Video description ends]

Now over time, you're going to have a lot of resources shown here of many different types, notice the Type column. And so notice that you can sort these columns either ascending or descending depending on what it is exactly that you might be looking for. And in this case, it will group together different types of resources if you're sorting by the Type column. At any rate, here's Vnet1, I'm going to click on it to open it up.

[Video description begins] A blade called "Vnet1" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. It includes options called "Overview", "Activity log", and "Tags". It also includes a section called "Settings" which includes options called "Connected device", "Subnets", "DDos protection" , and "Firewalls". [Video description ends]

Now in the navigation bar over on the left, we can see the Address space that we configured for this entire VNet. We can see down below there are no connected devices, there's also a Connected devices view on the left, at least not yet.

[Video description begins] He clicks an option called "Subnets" in the navigation pane. A blade called "Vnet1 | Subnets" opens in the content pane. [Video description ends]

And if I click on Subnets, I'll see that I've got the two subnets that we defined upon creation along with their IP address ranges and the available number of IPv4 addresses. Now if you've worked a lot with IPv4, you might realize that well normally there's an extra three IP addresses per subnet, so what's going on? Some of these are used internally by Azure. So this is expected when you have a 24-bit subnet that you would have 251 IP addresses available. Some of the other settings that we saw upon creation like DDoS protection can be configured after the fact, Azure Firewall Settings, and so on. All of this can be changed after we create our initial VNet. So at this point, we've got a VNet with two subnets, and we can start to specify any of that information. So in other words, we can deploy virtual machines into one of these subnets upon deployment.


VNets, Subnets, and the CLI
In this demonstration, I'm going to use the Azure CLI to create an Azure VNet and a subnet. 

[Video description begins] A window called "PowerShell command prompt" is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started I'm going to run az network -h. And from here I can learn about the syntax that would be required to create and manage VNets. So I can see vnet is listed here as a separate item.

[Video description begins] He executes the command and highlights vnet from the displayed output. [Video description ends]

So to get started with this let's run az network vnet create.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

The resource group here is going to be called Rg1. That's the resource group I am deploying this VNet into. The name of the VNet here is going to be Vnet2 --address-prefix. We have to have planned the IP addressing that we're going to use in the VNet. In this case, it's going to be 11.0.0.0/16, 16-bit subnet mask. Which means 11.0 serves as our network address at least at the VNet level. Now the next thing I'm going to do is specify also that I want to create a subnet, so --subnet-name. It'll be called Subnet1. And I'll use --subnet-prefix to specify an IP address range for the subnet that falls within the range used up above here for the VNet. So how about 11.0.1.0/24?

[Video description begins] He highlights 11.0.0.0/16 from the command. [Video description ends]

So 24 bits in the mask means 11.0.1 is our network address, okay? So let's go ahead and press Enter to create the VNet and the subnet within it with those respective IP configurations. And it looks like it's probably good. Now we can also add a second subnet. Why don't we go ahead and do that? So let's go and type in az network vnet subnet create.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

The resource group will be Rg1 -- the vnet-name is going to be Vnet2. That's what we just created. And the name of the new subnet here, let's call this one Subnet2 --address-prefixes.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

 And in this case, how about we use 11.0.2.0/24? Let's create that subnet.

[Video description begins] He executes the following command. The output displays [ "Vnet1 " , "Ubuntu-1VNET" , "Vnet2" ].The prompt does not change. [Video description ends]

All right, and after a moment it will have created it and associated it with Vnet1.

[Video description begins] He switches to the Microsoft Azure web portal. [Video description ends]

 So if we were to run az network vnet list --query [].name, we should see the names of our VNets, including Vnet2. We could also do the same thing here in the portal.

[Video description begins] He selects an option called "Virtual networks" from the left hand navigation menu. A blade called "Virtual networks" opens. It includes a table with four columns and three rows. The column headers are "Name", "Resource group", "Location", and "Subscription". The Name column contains Ubuntu-1VNET , Vnet1 , and Vnet2 . [Video description ends]

 So if I were, let's say in my left-hand navigator, to view my Virtual networks or my VNets, we would see Vnet2 exists.

[Video description begins] A blade called "Vnet2" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. [Video description ends]

So let's just click on it to open it up. And within Vnet2, why don't we check the subnets too? So we should have Subnet1 and Subnet2.

[Video description begins] He clicks an option called "Subnets" in the navigation pane. A blade called "Vnet2"| Subnets" opens in the content pane. [Video description ends]

And of course we can see the IP addressing in accordance with what we specified on the CLI command line.

[Video description begins] The IP Address range for Subnet1 is 11.0.1.0/24 and for Subnet2 is 11.0.2.0/24. [Video description ends]


VNets, Subnets, and PowerShell
PowerShell cmdlets can be used to create and manage VNets and subnets in Azure. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I'm going to do is create a subnet variable because what I want to do is essentially make a new VNet but I also want to add a subnet to it. So the first thing I'll do is take care of defining the subnet in a variable. I'm going to call that variable $subnet, and it will store the result of running New-AzVirtualNetworkSubnetConfig, so that's a long cmdlet name. The name of the subnet I want to create is called Subnet1. And the address prefix I'm setting here as being 30.1.0/24. So you have to have planned what the IP addressing will be for the VNet as well as for each subnet. So here 30.0.1, that's the first 24 bits, identifies my network address for Subnet1.

[Video description begins] The output displays the details of the warnings. [Video description ends]

Now I'm going to press Enter. But notice I get all these warnings about potential future changes that may break how this cmdlet works. If you really want to, you can suppress those messages. I really want to because those are changes that will happen down the road. I don't want to see that. So I'm going to clear the screen and I'm going to run Set-Item.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And essentially I'm setting an environment variable SuppressAzurePowerShellBreakingChangeWarnings, setting that to true.

[Video description begins] He executes the following command: Set -Item Env: \SuppressAzurePowerShellBreakingChangeWarnings " true " [Video description ends]

I want to suppress them. I'm going to press Enter. 

[Video description begins] The prompt does not change. The output displayed is Set - Item Env: \SuppressAzurePowerShellBreakingChangeWarnings " true ". He executes the following command: cls. The output clears and the prompt does not change. [Video description ends]

If I were to bring up, using my up arrow key, my subnet variable declaration line and run it again, we don't get anything returned.

[Video description begins] He executes the following command: $subnet = New- AzVirtualNetworkSubnetConfig -Name Subnet1 -AddressPrefix 30.0.1.0/24. No output returns and the prompt does not change. [Video description ends]

That's how I want it. Now the next thing I want to do though is build a new virtual network based on that subnet config. To do that I'll use New-AzVirtualNetwork. I want to deploy this virtual network into a resource group called Rg1. I want to put it in the CanadaEast location and I want to call it VNet3. I'm going to set the address prefix to be 30.0.0.0/16. Now it's important that subnets always fall within the range of the VNet. And that's certainly the case here because at the VNet level, we've got 16 bits in the subnet mask, which means 30.0 is the VNet range. But we can see that 30.0.1, so we're adding an additional octet, another 8 bits is going to be within that range. So having done that, we're going to finish off that statement by passing it with the -Subnet parameter, our $subnet variable. So we want to create the subnet with those settings in the new VNet, VNet3. So I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: New-AzVirtualNetwork -ResourceGroupName Rg1 -Location CanadaEast -Name VNet3 -AddressPrefix 30.0.0.0/16 -Subnet $subnet [Video description ends]

After a moment, looks good, let's just clear the screen and why don't we run get-azvirtualnetwork?

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And I'm just going to pipe that to select, all I want to see is the name property.

[Video description begins] He executes the command and the following output is displayed: Name ---- Vnet1 Ubuntu-1VNET Vnet2 Vnet3. The prompt does not change. [Video description ends]

Indeed, there's VNet3, the one that we've just created. Now let's carry on and do some more examples.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

I'm going to create a variable here called vnet into which I want to store the result of running get-azvirtualnetwork and it's going to be one called Vnet2. So if I run $vnet, then we'll see what's stored in that variable.

[Video description begins] He executes the following command: $vnet. The output with the details of virtual network is displayed. [Video description ends]

So what I want to do then is check out which subnets currently exist in Vnet2, so I can run get-azvirtualnetworksubnetconfig.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And I can use -virtualnetwork to pass it my $vnet variable which, remember, is pointing to Vnet2.

[Video description begins] He executes the following command: get-AzVirtualNetworkSubnetConfig -virtualnetwork $vnet . [Video description ends]

So let's just scroll up a little bit here, what do we have? We have Subnet3 I see listed here, Subnet2, and of course Subnet1. So there are three subnets there already.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Now what I want to do, well actually, why don't we filter that out? That's a little awkward to really look at. So what we could do is pipe the result of that to select and tell it we only want to see the name and the address prefix for the subnets. That is a little bit easier to digest.

[Video description begins] He executes the following command: get-azvirtualnetworksubnetconfig -virtualnetwork $vnet | select name, addressprefix. The output displays details of address prefix. The prompt does not change. [Video description ends]

Now I want to define a new subnet. To do that, I'm going to need to run a different cmdlet, Add-AzVirtualNetworkSubnetConfig. I want to call this new subnet Subnet4. It's going to be tied to the Vnet2 virtual network. Vnet2, remember, is what the $vnet variable contains. And the address prefix here will be 11.0.4.0/24. So it'll fall in line nicely after the third subnet that we've already got defined in that VNet.

[Video description begins] He executes the following command: Add - AzVirtualNetworkSubnetConfig -Name Subnet4 - VirtualNetwork $vnet - AddressPrefix " 11.0.4.0/24 ". [Video description ends]

I'm just going to go ahead and press Enter. Let's clear the screen.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Let's use the up arrow key to retrieve our list, looking good and looking clear and consistent. 

[Video description begins] He executes the command: get-azvirtualnetworksubnetconfig -virtualnetwork $vnet | select name, addressprefix. The output displays details of address prefix. The prompt does not change. [Video description ends]

Now while that's showing up here, Subnet4 is showing up here in the CLI or rather in PowerShell, what we will notice is that if we go into the GUI, here's Vnet2 and its subnets.

[Video description begins] He switches to the "Vnet2"| Subnets blade. [Video description ends]

Let's go ahead and refresh. I only see subnets 1, 2, and 3. What's going on? We need to make sure that we write those changes to the virtual network. So we've already got our $vnet variable which points to Vnet2.

[Video description begins] He clicks an icon labeled “cloud shell” and switches back to the PowerShell command window. [Video description ends]

I'm going to pipe the result of that to set-AzVirtualNetwork. In other words, to write changes into that VNet. Now when we go back into the GUI and do a refresh, indeed we see Subnet4's definition is actually now truly a part of Vnet2.


IP Addresses and the Portal
Most IT technicians that have experience configuring TCP/IP will of course know that an IP address is a configuration of the TCP/IP protocol stack. However in Azure, it's an actual separate resource unto itself. That we can then associate with IP address configurations which are in turn associated with network interfaces. Which are in turn associated with virtual machines, quite the list of interdependencies. So, let's get started here in the portal creating an IP address. I'm going to click Create a resource, and I'm going to search for IP address.
Now this is where you're going to have to think about what your needs are. You can go with a public IP address, but by its very nature, it's dynamic, which means it can change. If the nature of what you're going to be hosting and associating ultimately with this IP address. Is such that you don't want the IP address to change over time. In other words, you want it to be static, you're going to need to specify a Reserved IP Address. In my example, I'm just going to go with a dynamic Public IP address.
So, we see down here it says it can be dynamic or static depending on what you want to configure it as. So in this case, I'm going to go ahead and click on Create.

[Video description begins] A blade called "Create public IP address" opens. It includes options called "IP Version", "Name", and "DNS name label". [Video description ends]

And the first thing we'll have to do, as we always do when we deploy Azure resources, is specify some details like the name of the object. So here I'm going to call it PubIP5. That would be in accordance with the nomenclature agreed upon within the organization for naming resources such as IP addresses in Azure. So it's going to be IP version 4 although IPv6 is supported. However, notice that when I have IPv4, Dynamic and Static assignment are options. However, with IPv6 we don't have the option of using Static, so some of these things change. We can also choose Both, so we can have an IPv4 as well as an IPv6 address associated with this resource. But I'm going to go back to IPv4, I'm going to leave it on Dynamic, I can specify a DNS name label.

So notice that the default suffix is going to be in this case, because of the region, .canadaeast.cloudapp.azure.com. Now if I scroll down, we can change that location or that region if we wish. I'm going to specify that I want this IP address to be created within Rg1. And, at this point, the DNS name label is not required as indicated by the lack of a red asterisk. So I don't need to fill that in and I can change it after the fact. At this point I'm going to click Create to create that IP address resource.

[Video description begins] He clicks a button called "Create" and a notification pop-up box appears. It includes a button called "Go to resource". [Video description ends]

And after a moment, it'll be completed, I'll click Go to resource. That puts me in the properties of that IP address object.

[Video description begins] A blade called "PubIP5" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. A option called "Overview" is selected in the navigation pane. The content pane includes "Resource group", "IP address", and "Associated to". [Video description ends]

Here is where we also can click Associate to associate the IP address with either a load balancer, we select the Load balancer from the list below, or a Network interface. And in the same way we would select the appropriate network interface down below. So I'm going to go ahead and choose an interface. Now if that interface already has a public IP address associated with it, you're going to see this message. However for now, I'm just going to go ahead and close out of that screen. I'll click on OK when it says your unsaved edits will be discarded. I'm not going to associate this IP address at this point. But when I work with network interfaces down the road. I can then determine that I want to associate this public IP address with that interface if it's needed. If I go to the Configuration blade, I can see that I can select Static.

[Video description begins] He clicks an option called "Configuration" under a section labeled “Setting” in the navigation pane. A blade called "PubIP5 | Configuration" opens in the content pane. [Video description ends]

So if I don't want to stick with the Dynamic assigned IP, I can go with Static. I can also specify down below whether I want to have a DNS name label. So we're seeing a lot of the options that we initially saw when we created the IP address resource. Now back on the Overview blade, notice that the IP address information is not even listed here. Well, let's close out of that.

[Video description begins] He switches back to the Microsoft Azure web portal. [Video description ends]

Let's go to All resources and let's view existing IP addresses that are already been associated with network interfaces. And ultimately with virtual machines. So from the Type drop-down list, I'm going to deselect the Select all box, and I'm going to go into public IP addresses. I'll click outside to filter by that. Let's choose another one here such as PubIP1-East1. So here in the Overview we can see that it is already associated with the network interface.

[Video description begins] He clicks an option called "PubIP-East1" and the corresponding blade opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. An option called "Overview" is selected in the navigation pane. The content pane includes "Resource group", "IP address", and "Associated to". [Video description ends]

We can see the NIC is a link here, and also we can see that it has an IP address. So once we start using these items, the IP address, public IP address objects. Then they'll start being populated with details such as the IP address.

[Video description begins] He clicks an option called "PubIP5" and the corresponding blade opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. A option called "Overview" is selected in the navigation pane. The content pane includes "Resource group", "IP address", and "Associated to". [Video description ends]

Again, if I go back into PubIP5 in the Overview blade, nothing is going to be here because it's not yet been associated with a network interface or a load balancer.

IP Addresses and the CLI

[Video description begins] Topic title: IP Addresses and the CLI. The presenter is Dan Lachance. [Video description ends]

In Azure, IP addresses are their own type of Azure resource. And we can manage them in the GUI or using the CLI or PowerShell. We're going to focus here on the CLI.  

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

First thing I'll do here is run az -h for help. Because the next level command that we're going to want to go into after az is networking. So specifically network.

[Video description begins] He highlights "network" from the output displayed. [Video description ends]

So we can learn about the syntax by running az network, for example, -h for help.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And then from here we'll see that there's more and more we can work with such us public IP address resources. Which is exactly what I want to work with here.

[Video description begins] He highlights "public-ip" from the output displayed. [Video description ends]

So to get started here, az network public-ip. 

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And after that I'm going to follow that with create. And I'm going to put it in a resource group called Rg1. I want to name this PubIP, as in public IP dash, let's say Central1. The location will be CanadaCentral. And after I do this, I'm going to go ahead and press Enter to create that public IP address resource.

[Video description begins] He executes the following command: az network public-ip create -g Rg1 -n PubIP-Central1 -l CanadaCentral. [Video description ends]

Now we'll check our work in the GUI to see if it's there. And also of course back here in the CLI. Why don't we start with the CLI since we're already in here?

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So if I were to run az network public-ip list, I can then run --query [ ].name. I want to see the name property for all of the public IP address resources that were configured. Of course, we'll see our most recent one, PubIP-Central1.

[Video description begins] He highlights "PubIP-Central1" from the output displayed. [Video description ends]

We could also run az network public-ip show. So as opposed to listing them all, I want to show a specific one, one in a group called resource group 1 or Rg1. And by name, so -n it's called PubIP-Central1. That's the name of what we've just created. And it'll return all of the properties associated with that specific resource. Of course we know how to query upon any specific properties we might want to display. Let's go take a look at this here in the portal.

[Video description begins] He switches to the Microsoft Azure web portal. [Video description ends]

Let's go to the All resources view. And we'll start by filtering out the list of resources because currently it's Type == all.

[Video description begins] The All resources blade opens. [Video description ends]

So I'll click on that, I'll uncheck Select all. And of course we're interested in public IP addresses. So I'll select that. Now if you don't see public IP addresses in that list by the way, it's because you don't have any of those types of resources. Now certainly once you start deploying virtual machines and stuff like that. You'll start to see for sure that you're going to have some public IP address resources. So as we scroll down through the list, we can see them all listed here, including the one we just created, PubIP-Central1.

[Video description begins] A blade called "PubIP-Central1" opens. [Video description ends]

And if I click on it in the Overview blade, we see that it does not yet have an IP address. It's not yet been associated with either a load balancer or a virtual machine or specifically a virtual machine and directly through a network interface.

[Video description begins] He clicks a button called "Associate" and a blade called "Associate public IP address" opens. [Video description ends]

So that association has not been made.

[Video description begins] He closes the Associate public IP address blade. [Video description ends]

Therefore we don't see IP address information populated yet in that resource.

[Video description begins] He switches to the PowerShell command window. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

Here in the CLI we could run commands such as az network nic list. Let's say --query and ask for the name.

[Video description begins] He executes the following command: az network nic list - - query [].name. The output displays the details of the nic list and the prompt does not change. [Video description ends]

Here we'll see the names of our NICs like, for example, we've got one here called Nic3-East.

[Video description begins] He highlights "Nic3 - East" from the output displayed. [Video description ends]

And we could also of course view that same type of information here in the portal where we could view the IP configurations for the NIC.

[Video description begins] He switches back to the Microsoft Azure web portal. A blade called "Nic3 - East | IP configurations" is open. [Video description ends]

It's called ipconfig1. So there are many ways to gather that information. But the point is this, we can also perform an association of a network interface card to a public IP address.

[Video description begins] He switches back to the PowerShell command window. He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So to do that I'm going to run az network nic ip-config update. And the name of the config is ipconfig1, which is tied in our case to a nic-name of nic3-east. And that's in a resource group, so --resource-group or -g. You could also do g as well for for that, Rg1, and I'm going to specify the public. So --public-ip-address is PubIP-Central1. Okay, so by doing this we are associating PubIP-Central1 with the ipconfig for a network interface called nic3-east.

[Video description begins] He executes the following command: az network nicip- config update - - name ipconfig1 - - nic - name nic3 - east - g Rg1--public -ip-address PubIP-Central1 [Video description ends]

So I'm going to go ahead and press Enter.

[Video description begins] He switches back to the Microsoft Azure web portal. The Nic3 - East | IP configurations blade is open. [Video description ends]

And after a moment it looks good. We can of course even just verify our work here by looking at Nic3 and the ipconfig for ipconfig1.

[Video description begins] He clicks an option called "ipconfig1" and a blade called "ipconfig1" opens. [Video description ends]

And what we want to do is see that in fact it is associated with PubIP-Central1.

IP Addresses and PowerShell

[Video description begins] Topic title: IP Addresses and PowerShell. The presenter is Dan Lachance. [Video description ends]

You can manage IP address objects using PowerShell. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started here, the first thing I'm going to do is I want to create a new public IP address resource in Azure. So in order to do that, I'm going to have to determine which command line I should be using. So I'm going to run get-command, and I'll use *. I want to create a public IP address resource. So I'll just search for publicip to see by chance if any cmdlets have that in its name. And luckily, there are some.

[Video description begins] He executes the following command: get - command *publicip* . The output displays the details of public IP and the prompt does not change. [Video description ends]

So for example, I can use the New-AzPublicIpAddress cmdlet to build this resource.

[Video description begins] He highlights "New - AzPublicIpAddress"from the output displayed. [Video description ends]

And of course we could get help on it using the get-help cmdlet.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So to get started here, I'm going to run new-azpublicIPaddress. This is not case sensitive. And I'm going to name this, let's say, PubIP-Central3. And I'm going to put this in a resource group called Rg1. And I'm going to set the -allocationmethod parameter to a value of static. I want a static, unchanging IP address. Finally, I have to specify the region or location where I want this deployed into geographically. So I'm going to specify here, CanadaCentral. Okay, so having done that, I'll press Enter.

[Video description begins] He executes the following command: new - azpublicIPaddress -name PubIP - Central3 - resourcegroupname Rg1 - allocationmethod static - location CanadaCentral [Video description ends]

And we're going to check our work both here in PowerShell using the Cloud Shell environment. As well as taking a look at it in the portal. So we can see the output here if we scroll back up through it. It looks like it's created it in our region and in our resource group. It's called PubIP-Central3. Also notice, interestingly, we didn't specify this in the command line. But it somehow decided it was going to add a tag called CostCenter with the value of YHZ, that must be done through an Azure policy. We're going to go double check that in the portal after, just to verify it. Let's just go to the portal here for a second. And let's go to the All resources view.

We'll filter it for public IP address resources, since that's what we want to see. Currently, the type is set to all. I'm just going to click there, uncheck Select all, choose Public IP address. And let's just verify it showing up. There it is, PubIP-Central3. And if we go ahead and take a look at that object, so if I click on it.

[Video description begins] A blade called "PubIP - Central3" opens. [Video description ends]

And if I go to Configuration, pull up that blade, we can see it's Static.

[Video description begins] A blade called " PubIP - Central3 | Configuration" opens. [Video description ends]

And we can see the IP address that has been assigned to it. Let's just go ahead and take a look at policies here for a second. Because it was strange, potentially, for us to see that it automatically tagged our resource. Actually, before we do that, let's double check it here in the portal. Let's go to Tags to pull up that blade for this item.

[Video description begins] A blade called " PubIP - Central3 | Tags" opens. [Video description ends]

And indeed, yes, there's CostCenter: YHZ. Okay, so it did do it. So let's go into the Policy management tool. This isn't really about policies but it nonetheless, it is having an effect on the public IP address resource we just created.

[Video description begins] A blade called "Policy" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. [Video description ends]

And so I'm going to look at Policy > Assignments.

[Video description begins] He clicks an option called "Assignments" under a section labeled “Authoring” in the navigation pane. A blade called "Policy | Assignments" opens in the content pane. [Video description ends]

And sure enough, I see an assignment here called Add Cost Center Tag. I'm just going to open that up for a moment so we can take a look at it.

[Video description begins] A blade called "Add Cost Center Tag" opens. [Video description ends]

And it looks like it's been, it's got an assignment here as we can see, just scroll down here a little bit. It's enforced. I can see at the top, the scope is that it's been assigned to the Pay-As-You-Go subscription. And of course, I can see the policy definition, it's called Add Cost Center Tag. Let's cancel out of here. Let's look at that policy definition just for a second. So I'm going to go to Definitions, and we're going to view that.

[Video description begins] He clicks an option called "Definitions" under a section labeled “Authoring” in the navigation pane. A blade called "Policy | Definitions" opens in the content pane. [Video description ends]

Now of course, I guess what we should do is change the type here to Custom. There it is, Add Cost Center Tag.

[Video description begins] The Add Cost Center Tag blade opens. [Video description ends]

Let's see what it's doing. We know what it's doing, or at least we think we do. And let's just kind of scroll down and see if there's any of this makes sense and adds up. Yeah, it does. It's adding a tag called CostCenter with a value of YHZ. That's been applied at the subscription level. There are no exceptions so it's flowing down to everything, and that's why it did that. However, let's go back into PowerShell here. So now we can explain that one away.

[Video description begins] He switches to the PowerShell command window and executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Let's go back here and let's just run get-azpublicipaddress, and maybe we'll just pipe that to select. Presumably the name property is called Name.

[Video description begins] He executes the following command: get - azpublicipaddress | select name. The output displays the name details of public ip address and the prompt does not change. [Video description ends]

And indeed, we can see our public IP address is listed here.

[Video description begins] He highlights PubIP - Central3 from the output displayed. [Video description ends]

Network Interfaces and the Portal

[Video description begins] Topic title: Network Interfaces and the Portal. The presenter is Dan Lachance. [Video description ends]

As the name implies, in Azure, a network interface resource is just like a network interface would be in the physical world that you would use with a server or a station of some kind.  

[Video description begins] The Microsoft Azure web portal is open. [Video description ends]

It allows network connectivity. And you can have multiple network interfaces tied, for example, to a single Azure virtual machine. You're not limited to just one. Now let's get started here in the portal by clicking on All resources to see what we already might have in place based on our previous deployments for network interfaces. The Type == all, we're going to click there to filter it differently.

[Video description begins] The All resources blade opens. [Video description ends]

I'm going to uncheck Select all, going to choose Network interface, apparently there are 4. And I'll click outside of that, and that reveals that indeed we do have 4 network interfaces that exist. We're going to add another one. Now why would you add a network interface undo itself? Isn't that something that's part of the point of virtual machine? Yeah, it usually is. However, you might change your mind over time and decide, for example, that you would like a given virtual machine to have two or more network interfaces. Why would you do that? Well, why would you normally do it on premises?

Maybe because that host is acting as a firewall appliance of some kind. And so it needs at least two interfaces, one to connect to a private network one to a public. Maybe you want to configure your own custom routing appliance, so you need at least two interfaces. Or maybe you want to have a specific management interface such as SSHing to Linux or RDPing to Windows and you want that kept separate from regular network traffic. So there are a lot of reasons why you might do it. Either way, let's get this done. So we're going to add a new network interface. So I'm going to click the Add button here to add a new resource in the upper left.

[Video description begins] He types network interface in the Search filter box. [Video description ends]

And we're going to tell it that we want to add a network interface.

[Video description begins] A blade called "Network interface" opens. It includes a button called "Create". [Video description ends]

Then we're going to go in and take a look at the properties of it. So I'm going to select Network interface, and then I'll click Create. 

[Video description begins] A blade called "Create network interface" opens. It contains tabs called "Basics", "Tags", and "Review + create". The Basics tab is selected. [Video description ends]

As usual, I have to deploy this into a resource group. And I have to give it a name in accordance with my organization's naming conventions, if there are any. So I'm going to call this NIC2-East, that's going to be in the Canada Central location. And it says here, well which virtual network and subnet would you like to attach this to? Well, ultimately, it's attached to a subnet but can't have a subnet without a VNet. So we've got the VNet selector available and the subnet here. I'm just going to choose Subnet1 and Vnet1. We can determine whether we want Dynamic or Static IP address assignment for the private.

So I'm going to leave it on Dynamic, which means it can change. So depending on how you're going to use this network interface, really how you're going to tie it to a VM and what workloads are running in the VM, would determine whether Dynamic changing IP addresses or Static unchanging addresses are needed. I'm going to leave that as it is. I can also tie this network interface to a specific security group. You could also not do that and realize that a security group can also be assigned to this subnet where you are associating this interface. So it really depends on, again, how you're going to be using this network interface, specifically the workload in a VM that this interface will be attached to.

I'm going to leave network security group on None, then I can always change it after if I need to. I'll click Next. I'm not going to tag this network interface. I'll click Next: Review + create. It's going to check that my settings are valid. And now that they are I'm going to click Create to create the network interface. And after a moment the deployment is complete. So I'm going to click Go to resource so we can open up the properties of our newly created network interface, there it is, NIC2-East.

[Video description begins] A blade called "NIC2 - East" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. An option called "Overview" is selected in the navigation pane. [Video description ends]

So a network interface in Azure, then, consists of one or more IP configurations. You can see we have one there called ipconfig by default, but we can add another one.

[Video description begins] He clicks an option called "IP configurations" under a section labeled “Setting” in the navigation pane. A blade called "NIC2 - East| IP configuration" opens in the content pane. It includes a table with five columns and one row. The column header "Name" includes an option called "ipconfig1". [Video description ends]

What's in the IP configuration? Well, the configuration of IP, let's take a look at what that means. It means addressing, public and private IP addressing.

[Video description begins] He clicks theipconfig1 option and the corresponding blade opens. [Video description ends]

Notice that public IP addressing is Disabled by default. We could enable it and we could go out and specify a public IP address resource to associate with this interface. But I'll leave it on Disabled. We can also see the private IP address configuration and the subnet affiliation. So we've got a Dynamic private IP, we can see it down below. Here it's 10.0.1.6. And this interface is tied to Subnet1 within Vnet1. All right, well, that's fine.

[Video description begins] He closes the blade. [Video description ends]

We can also specify DNS server settings here.

[Video description begins] He clicks an option called "DNS servers" under a section labeled “Setting” in the navigation pane. A blade called "NIC2 - East| DNS server" opens in the content pane. [Video description ends]

Here it's set to inherit it from the virtual network. But we could go ahead and override that. Well, we could add custom DNS servers. Otherwise you're using Azure supplied DNS servers for name resolution.

[Video description begins] He clicks an option called "Network security group" under a section labeled “Setting” in the navigation pane. A blade called "NIC2 - East| Network security group" opens in the content pane. [Video description ends]

As we saw during creation, we can also specify a Network security group here for the specific network interfaces, which controls inbound and outbound traffic, its security rules. But you can also apply network security groups at the subnet level. And if you've got a bunch of virtual machines and ultimately network interfaces, with the same in and outbound traffic flows, it's easier to manage it at a higher level, such as at the subnet level. We can also scroll down here and see any effective routes that might be applicable here for this network interface.

[Video description begins] He clicks an option called "Effective routes" under a section labeled “Support + Troubleshooting” in the navigation pane. A blade called "NIC2 - East| Effective routes" opens in the content pane. [Video description ends]

Now here it says I couldn't get any effective routes because this isn't attached to a virtual machine. Now, if I go back to the Overview here, notice we do not have the option of associating this with the virtual machines because it's done from the virtual machines perspective. So, I'm going to go into my Virtual machines view.

[Video description begins] He switches back to the Microsoft Azure homepage. He clicks an option called "Virtual machines" under a section labeled "Azure services". A blade called "Virtual machines" opens. It includes a table with eight columns and two rows. The column header "Name" includes options called "Ubuntu-1" and "WinSrv2019-1". [Video description ends]

I've got a Linux virtual machine that I've already deployed called Ubuntu-1. And I'm going to go ahead and click on it.

[Video description begins] The Ubuntu-1 blade opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. An option called "Overview" is selected in the navigation pane. [Video description ends]

Because when you're in the navigation bar, the properties essentially, for a virtual machine in Azure, you can go down to Networking.

[Video description begins] He clicks an option called "Networking" under a section labeled “Setting” in the navigation pane. A blade called "Ubuntu-1 | Networking" opens in the content pane. It includes an option called "Attach network interface". [Video description ends]

And among many other things, you'll be able to see any network interfaces. We can see currently the network interface here is Ubuntu-1VMNic, that's great. But we do have an option up above to attach other network interfaces for a variety of reasons, as we've mentioned already. And so I'm going to click Attach network interface. We can either create one or we can choose one to attach. Notice it says No network interfaces available to attach.

[Video description begins] He switches to the All resources blade. [Video description ends]

 If I go back and take a look at my network interfaces in the All resources view, notice that they're all in Canada Central, other than the one that's already associated with it, Canada East. Well no wonder it's not selectable. So let's go back and look at our virtual machines once again. Because we do have a Windows virtual machine already deployed here in Azure.

[Video description begins] He switches back to the Virtual machines blade. [Video description ends]

And it is in the Canada Central location or region.

[Video description begins] The WinSrv2019-1 blade opens. [Video description ends]

So when we go to it and do the same thing, so when I say the same thing I mean when we go into Networking and we go to attach a network interface, it's going to be a different story this time because it's in the same region.

[Video description begins] He clicks an option called "Networking" under a section labeled “Setting” in the navigation pane. A blade called "WinSrv2019-1 | Networking" opens in the content pane. It includes an option called "Attach network interface". [Video description ends]

Well, we have other network interfaces, including the one we just created. So if I go to Attach network interface, here is the list.

[Video description begins] He clicks a drop-down list. It includes options called "NIC - East" and "nic3 - east". [Video description ends]

So if I choose nic3-east, for example, and choose OK, it's going to add or attach that second network interface because this virtual machine already has one. Let's just click on something else here in the navigation bar, and back on Networking. So we can see any updates to the screen. And what we're going to see, once it's completed, is that we're going to have another tab to switch between network interfaces. So we'll just give it a moment to finish this operation. Well, looks like it just did it so we don't have to wait any longer.

Let's just click somewhere else again, and come back, just to make sure it's up to date now. Now once it's up to date, and if you have to go all the way back to Virtual machines and navigate back in, then so be it, for it to update. But you're going to see now that you've got links up here at the top for each NIC. So I'm now looking at the settings related to nic3-east. But I could click on the original network interface to view the settings related to it.

Network Interfaces and the CLI

[Video description begins] Topic title: Network Interfaces and the CLI. The presenter is Dan Lachance. [Video description ends]

In this demonstration, I'm going to use the Azure CLI to create a new network interface. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

Now before I do that, I'm going to choose to create a public IP address resource. Only because I want to associate it with the network interface. You don't have to associate a public IP address resource with the network interface. But if you know that you're going to assign or associate the network interface, if you're going to attach it to a virtual machine and in the end you want to make sure it's got a public IP, then you would do this. But it's certainly not required.

So to get started to build the public IP address resource, I'm going to type az network public-ip create -g and I'm going to put this in a resource group called Rg1 -n. The name of this will be PubIP-East4 in this case. -l for the location, otherwise known as the Azure region, and I'm going to put it in canadacentral and I'll press Enter. Now after a moment, it'll be created. We'll get the standard returned JSON output.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

I'm just going to go ahead and run az network public-ip list --query [].name. So I want to see the names of the public IP address resources. And there's the one I just created. It's called PubIP-East4. So that part is complete. Now what I want to do is actually create a network interface, but I want it to be linked or associated with that public IP. So let's make that happen by typing az network nic, this time, Network Interface Card, create -g. I want to create this network interface in resource group 1, then I have to tie it to a VNet and ultimately a subnet. So --vnet-name, let's say vnet1. I'm also going to tie this to the subnet within that VNet.

Let's say --subnet is going to be subnet2. I want to associate the public IP with it that we just created. So --public-ip-address, I'm actually not sure if there's a dash between ip and address but I guess we'll find out in a second, it's no problem. Let's reference the name here pubip-east4. And the next thing that we're going to do is give this a name. We haven't even defined a name for this NIC yet or this network interface, -n. I'm going to call this NIC-East4. And if I wanted to assign a network security group to it I could with --network.

Actually, let's not do that, because unless you have a specific need for a virtual machine that ultimately this interface will be attached to. You might be better off using network security groups that are associated with subnets that apply the same security rules for in and outbound traffic to all VMs in the subnet. Of course, could have a specific need for one VM, but I'm not going to do that in this case.

So we're going to leave that alone. I guess I need to specify the location though. Let's say we want this NIC or this network interface to be in the canadacentral region or location. Let's press Enter to see if that works. We were wondering if we needed a dash between IP and address for the public IP address reference. So far it looks good. Okay, it looks good. Looks like the network interface was created. Of course, we can verify this by running az network nic list --query [].name. Let's just see what we have here. So it should return just the names. So we've got NIC-East4, let's just view that in the GUI just for fun.

[Video description begins] He switches to the All resources blade. [Video description ends]

So I'm going to refresh my All resources view that's filtered for network interfaces. So I'm going to click Refresh.

[Video description begins] He clicks an option called "NIC - East4" and the corresponding blade opens. [Video description ends]

There's NIC-East4. 

[Video description begins] He clicks an option called "IP configuration" under the section labeled "Settings" in the navigation pane. A blade called "NIC - East4 | IP configurations" opens. [Video description ends]

 Let's open that up and let's go into its IP configuration, because in there, we'll see if it's been associated with a public IP address or not. And it has been, PubIP-East4.

[Video description begins] He clicks an option called "ipconfig1" and a blade called "ipconfig1" opens. [Video description ends]

Network Interfaces and PowerShell

[Video description begins] Topic title: Network Interfaces and PowerShell. The presenter is Dan Lachance. [Video description ends]

In this demonstration, I'm going to use PowerShell cmdlets to work with network interfaces. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So the first thing I'm going to do is run get-aznetworkinterface, so we can get a list of network interfaces, and I'm going to pipe that to select, tell it I want to see only the name Property.

[Video description begins] He execute the following command: get - aznetworkinterface | select name. The output displays the names of network interface and the prompt does not change. [Video description ends]

Now that returns the names of network interfaces, which is fine. Now, the next thing that I want to do is I want to create a new network interface. But to do that, there's going to be some preliminary work I'll begin with, the first of which is going to be getting a handle on a network, a VNet. And then within that subnet that I'm going to use to associate the network interface. So the network interface then can be associated with a specific subnet. So to get started, I'm going to create a variable that I'm going to call $vnet. Now the vnet variable will store the result of running Get-AzVirtualNetwork, and I'm going to look for a VNet called Vnet1 in a resource group called resource group 1.

[Video description begins] He executes the following command: $vnet = Get - Azvirtualnetwork - Name Vnet1 - ResourceGroupName Rg1. [Video description ends]

So I'm going to go ahead and press Enter, and if I just type in $vnet and press Enter, we can see it's got a pointer or a handle to that VNet in the Azure Cloud, it's returning some information.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Now the next thing I want to do is create a subnet variable, and to do that I'm going to have to return some subnet configuration information. I'm going to do that by running the Get-AzVirtualNetworkSubnetConfig cmdlet. I'm going to give it the name of the subnet. So the -Name is Subnet1, and then I'm going to point to the vnet variable we just set up a moment ago, $vnet, because the subnet is contained within the VNet. The return result of this I want stored in a variable called $subnet.

[Video description begins] He executes the following command: $subnet = Get - AzVirtualNetworkSubnetConfig - Name Subnet1 - VirtualNetwork $vnet. [Video description ends]

Okay, so we've got $vnet, our virtual network, and we've got $subnet, these are two variables that I've created. Now the next thing I want to do is start getting some IP configuration information within a network interface. So there's a bunch of ways that we can do this of course. The next thing I'm going to do is create a public IP address.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

I'm going to put that in a variable called $pubIP. And this is going to store the result of running New-AzPublicIpAddress, and I'm going to name this PubIP-, let's say, East5, I'm creating a new one. And the resource group association where I want that deployed is going to be called Rg1, the allocation method, let's say I want this to be a static public IP address. And the next thing I'll specify is the location, -location canadacentral, can't forget about that one. And then I'm going to just make sure that looks like the variable contains the right kind of information, so $pubIP.

[Video description begins] He executes the following command: $pubIP = New - AzPublicIpAddress - Name PubIP - East5 - resourcegroupname Rg1 - allocationmethod static - location canadacentral . [Video description ends]

Okay, so we've got a vnet variable, a subnet variable, and a public IP variable.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So now what I want to do is I want to create a network interface IP configuration. Because remember, network interfaces contain one or more IP configurations that in turn are linked to things like public IP addresses. So I'm going to make another variable called $ipconfig. It's going to store the result of running New-AzNetworkInterfaceIpConfig, that's a long one. The name is let's say going to be ipconfig-east1. The subnet association here, -subnet, is going to be our variable $subnet and -publicipaddress. And in the same way as we do with subnet, we're going to reference here, our pubIP variable, so $pubIP, And I want this to be the primary configuration, so -primary. So I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: $ipconfig = New -AzNetworkInterfaceIpConfig - name ipconfig - east1 $subnet -publicipaddress $pubIP -primary. [Video description ends]

Now we've got that variable. So again, we've got the $vnet variable, we've got the $subnet variable. We've got the public IP variable, we used that up above. Now we've got the ipconfig variable. So we have a lot of stuff going on, lots of variables. Now having done that, now we can put it all together, because I want to create a new network interface.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

To do that I'm going to run New-AzNetworkInterface. So there was some preamble work that had to be taken care of ahead of time. So New-AzNetworkInterface -name, let's say we call this, East-, or actually, how about NIC-East5 and I'm going to put this in a resource group. That's going to be Rg1, the location here, let's say canadacentral. And then this is the key here, at this point is I'm going to use the -ipconfiguration parameter, and I'm going to pass it our $ipconfig variable that we set up previously. And let's see, that looks correct. I'm going to press Enter, and we got our returned output.

[Video description begins] He executes the following command: New - AzNetworkInterface - name NIC - East5 - resourcegroup Rg1 - location canadacentral - ipconfiguration $ipconfig. [Video description ends]

So at this point if I were to get-aznetworkinterface, and we'll just pipe that to select, again and just ask for the name.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Then we're going to see the NIC that we just created, that would be NIC-East5. Let's take a look at that in the portal for a second.

[Video description begins] He switches to the All resources blade. [Video description ends]

So I'm going to go to All resources, network interfaces.

[Video description begins] He clicks an option called "NIC - East5" and the corresponding blade opens. [Video description ends]

Well, let's just refresh that filtered list.

[Video description begins] He clicks an option called "IP configuration" under the section labeled "Settings" in the navigation pane. A blade called "NIC - East5 | IP configurations" opens. [Video description ends]

There it is, NIC-East5. I'm going to click on that and I'm going to go and do IP configurations,   where we can see there it is, ipconfig-east1 as we named it.

[Video description begins] He clicks an option called "ipconfig-east1" and a blade called "ipconfig-east1" opens. [Video description ends]

And if I open that up we'll see it's associated with the public IP address we created in PowerShell as well, which was called if you recall PubIP-East5. So it worked.

Azure Routing and the Portal

[Video description begins] Topic title: Azure Routing and the Portal. The presenter is Dan Lachance. [Video description ends]

Routing tables are used to control network traffic flow, to route packets to the intended destination with the most efficient route possible. 

[Video description begins] The Microsoft Azure web portal is open. [Video description ends]

And so a routing table, in the physical network infrastructure world, is in memory on a routing device. However, in Azure, we can create a route table resource in which we then configure routing table entries. And then we can associate it with a subnet so that services on that subnet can use that routing table entry. Let's get started by creating a route table, so I'm going to click Create a resource here in the portal. And I'm going to search for route table, and we're going to get started with it in this manner.

[Video description begins] A blade called "Route table" opens. It includes a button called "Create". [Video description ends]

So I'm going to go ahead and choose Route table, and then I'm going to click Create. I'm going to call this RouteTable1.

[Video description begins] A blade called "Create route table" opens. It includes options called "Name", "Resource group", and "Location". [Video description ends]

I will deploy it into a resource group that exists already called Rg1, location Canada East. And that looks okay, I'll click Create. After a moment, we see that the deployment succeeded.

[Video description begins] He clicks a button called "Create" and a notification pop-up box appears. It includes a button called "Go to resource". [Video description ends]

So I'm going to click Go to resource to open it up.

[Video description begins] A blade called "Route Table1" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. [Video description ends]

Because what we need to do now is we need to add a routing table entry or a route. So I'm going to go down to Routes, we can see there are none, and I'm going to click Add.

[Video description begins] He clicks an option called "Routes" under the section labeled "Settings" in the navigation pane. A blade called "Route Table1 | Routes" opens. It includes a table of three columns and zero row. It also includes a button called "Add". [Video description ends]

So you have to have a reason to do this, you have to have a need to route traffic to a specific destination.

[Video description begins] A blade called "Add route" opens. [Video description ends]

In our example, let's say that we want to route traffic to a firewall appliance for further inspection. So for this route name or route table name, how about I call it FirewallInspection? And for the address prefix, I want this to be the default route. Because what I'm going to end up doing is associating this route table with a subnet. And so I want every service on the subnet to use this routing table entry as the default route. So 0.0.0.0/0 is how you specify the default route in IPv4. For the next hop type, in this example, I'm going to choose Virtual appliance. You could choose Internet, Virtual network, Virtual network gateway, I'm going to put in Virtual appliance. And let's say that we have a specific virtual appliance at a specific IP address. So I'm going to go ahead and put in that address, and then I'm going to click OK. So at this point, we're going to have a single route added to this route table resource.

[Video description begins] The Add route blade closes. The previous table now displays three columns and one row . [Video description ends]

And we can see it now shown in the list. What I'm then going to do is go to the Subnets blade within the route table, and I'm going to click the Associate button.

[Video description begins] A blade called "RouteTable1 | Subnets" opens. [Video description ends]

And I want to associate this with a particular subnet.

[Video description begins] A blade called "Associate subnet" opens. [Video description ends]

So from the list, what I'm seeing are virtual networks that are in the same region or location as the route table. You always have to watch out for this in Azure. So for example, if I go to the Overview blade, notice this is in Canada East.

[Video description begins] The location is Canada East. [Video description ends]

Well, let's just take a look at our virtual networks here. I'm going to duplicate the current browser page.

[Video description begins] He opens a duplicate window of the Microsoft Azure web portal. [Video description ends]

Except the difference is that we're going to browse here and look at VNets. So I'm going to go home, and let's just click Virtual networks.

[Video description begins] The Virtual networks blade opens. It includes a table with four columns and four rows. [Video description ends]

The point here is, for example, look at Vnet1, it's in Canada Central, yet Vnets 2 and 3 are in Canada East. Well, our route table is in Canada East.

[Video description begins] He switches back to the original window of the Microsoft Azure web portal. [Video description ends]

And so when we go to associate subnets, we're not going to see Vnet1 because it's in a different region or location.

[Video description begins] The RouteTable1 | Subnets blade opens. It includes a table with four columns and zero row. [Video description ends]

Okay, so having gone over that, let's choose Vnet2 and a particular subnet that we want this route table to be associated with.

[Video description begins] The Associate subnet blade opens. [Video description ends]

So in this case, I'm going to choose Subnet1, okay, so let's click OK for that, and we'll save that association.

[Video description begins] The previous table now displays four columns and one row . [Video description ends]

And we can now see it is listed here.

[Video description begins] The Virtual networks blade opens. [Video description ends]

Now another way to look at this is to go, let's see, into the virtual network and the subnet itself to see the association with the route table.

[Video description begins] The Vnet 2 blade opens. [Video description ends]

So in this case, I'll click Vnet2, and then I'm going to look at the subnets for this VNet, so for example, there's Subnet1.   

[Video description begins] He clicks the Subnets option and the Vnets2 | Subnets blade opens. [Video description ends]

If I click on that to pull up the settings for the subnet, one of the many things I'll see here is the association with the route table.

[Video description begins] A blade called "Subnet1" opens. [Video description ends]

And notice, of course here, it has RouteTable1. This isn't read-only, though, I could have selected it from here. You can enable that association between subnet and route table from multiple points.

Azure Routing and the CLI

[Video description begins] Topic title: Azure Routing and the CLI. The presenter is Dan Lachance. [Video description ends]

In this example, the goal is going to be to create an Azure route table and a route table entry. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So to get started with this, I'm going to use the az network route-table create command. Now I'm going to first specify -g, I want this to be in a resource group called Rg1 dash alpha location will be canadacentral let's say, and the name of this will be RouteTable2. So that's going to give me a new route table resource in Azure, although it's kind of useless as it is because there are no routing table entries within it, nor is it associated with a subnet. Okay, looks good, so the provisioning status we can see quite clearly such that it has succeeded. Let's clear the screen and let's do this, let's do az network route-table list. Let's query so we only see the name property, we don't need to see anything else. Just to verify it's there, we know it's there, but here it is for sure, RouteTable2, looks good.

[Video description begins] He execute the following command: az network route - table list - - query [] .name . The output displayed is ["RouteTable2","RouteTable1"]. The prompt does not change. [Video description ends]

So the next thing I want to do is create an entry. Now to do that, I have to run az network route-table route create. So kind of a longer bit of syntax there, the resource group is Rg1, the route, so --route-table-name, what was it called? It was called RouteTable2, that's what we've just created. And I want to add a new route, now what do you want to call this one? Let's call it Firewall, that's just the name of the routing table entry in the route table, that's what we're setting up here. And I'm going to set --next-hop, --next-hop, that looks correct. Then I'm going to specify the type as being a virtual appliance, and I'm going to set --address-prefix. And this is going to be for the default routes 0.0.0.0/0.

And finally the --next-hop, and this is where we're going to have -ip-address. And I'm going to put in the IP address of that virtual appliance, let's say it's 10.0.1.250. Well, I've got an ambiguous option error, it's not a problem, when you get these errors don't sweat it, just take a look at the exact message to first find out where the problem lies. Next hop type, okay so it's a syntax error on my part. I have for the parameter after Firewall up here --next-hop and I forgot the dash and type has two ts, it's just horrible. No problem, we can fix that, clear the screen, up arrow key to that command and let's make it right. So, it could have told me what to do, so next-hop-type. Becomes a little harder to read when it wraps lines, but that's okay, we can get around it.

[Video description begins] He execute the following command: az network route - table route create - g Rg1 - - route - table - name RouteTable2 - n Firewall - - next - hop - type VirtualAppliance - - address - prefix 0.0.0.0/0 - - next - hop - ip - address 10.0.1.250. The output displays the details of route creation. [Video description ends]

So now it's going to create the routing table entry, and let's just check our work so far in the portal. So I'm going to minimize this, and what we want to do is go to All resources so we can filter it for route table types of objects.

[Video description begins] He switches to the Microsoft Azure web portal and opens the All resources blade. [Video description ends]

So the Type here is set to all, let's filter it. I'm going to click there, uncheck Select all go down to the R's, Route table or route, depending how you want to pronounce it, it's the same thing. And there's RouteTable2 so I'm going to go ahead and click on that to open it up and I want to go look at the routes.

[Video description begins] A blade called "RouteTable2" opens. [Video description ends]

So we've just added a route in the CLI, so let's go to Routes and check it out.

[Video description begins] He clicks an option called "Routes" under the section labeled "Settings" in the navigation pane. The blade called "RouteTable2 | Routes" opens in the content pane. [Video description ends]

And we can see it's showing up here, so it was called Firewall as we specified in our command line. Once I corrected the error, there's the address prefix, so that's the default route and there's the next hop the traffic will be sent to.

Azure Routing and PowerShell

[Video description begins] Topic title: Azure Routing and PowerShell. The presenter is Dan Lachance. [Video description ends]

You can use PowerShell cmdlets as well as the GUI and CLI to create a route table resource. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

And within it configure routing table entries, and you would do this because you want to control the traffic flow. And often this is done, for example, if you want to control the flow of traffic between VNets, cross a VPN. Or perhaps to allow traffic to flow first to a firewall appliance for inspection before going elsewhere. So to get started, I'm going to go ahead and create a new route. I'm going to create a variable first called route, and I'm going to store the result of running new-azrouteconfig.

And I'm going to name this Firewall, and I'm going to set the address prefix -addressprefix to be the default route. 0.0.0.0/0, it doesn't have to be the default route, you can build a routing table entry for specific target networks. It doesn't have to be every network, but that's what I'm doing here. The next thing I want to do is specify -nexthoptype, just like you would see in the GUI. And in this case, I'm going to set it to a virtualappliance, as in I have a firewall. I want to route traffic to, for further inspection but I have to give it the IP address of it, and that would be a private IP address, right? Not a public facing IP address if it had one, so this, I'm going to specify as nexthopipaddress.

[Video description begins] He executes the following command: $route=new - azrouteconfig - name Firewall - addressprefix 0.0.0.0/0 - nexthoptype virtualappliance - nexthopipaddress 10.0.1.240. No output returns and the prompt does not change. [Video description ends]

And let's say it's at 10.0.1.240, so I've created a route variable, the next thing I want to do is I want to create a new route table. So to do that, I'm going to run new-azroutetable and I'm going to call this RouteTable3 because I know I've already got two. It's going to go into a resource group named Rg1. Location here, let's say, will be canadacentral. And I want to add a route to it, so -route $route, and I can also add a comma and keep adding multiple routes if I wanted to. But I've only got the single variable, and that's going to be fine in this case for this example.

[Video description begins] He executes the following command: new - azroutetable - name RouteTable3 - resourcegroupname Rg1 - location canadacentral1 - route $route. The output displays the creation details of route table 3. He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And at this point I could run get-azroutetable and, of course, what I probably should do is select just the name, so I'm going to pipe that to select and say I only want to see the names of them.

[Video description begins] He executes the following command: get - azroutetable | select name. The output displayed is Name RouteTable2 RouteTable3 RouteTable1. The prompt does not change. [Video description ends]

And we see the existence of RouteTable3, let's just check that on the portal for a second. So if we go in to All resources, let's filter it out for route table objects just so we can look at it from this perspective.

[Video description begins] He switches to the Microsoft Azure web portal and opens the All resources blade. [Video description ends]

We don't have to do this, but it's kind of fun to do it, so let's go into Route table.

[Video description begins] A blade called "RouteTable3" opens. [Video description ends]

 Let's go find RouteTable3, there it is and I want to see if we have a route in it. That's really what I'm doing here because we defined a route at the command line in PowerShell but did it take? There's only one way to find out.

[Video description begins] He clicks an option called "Routes" under the section labeled "Settings" in the navigation pane. The blade called "RouteTable3| Routes" opens in the content pane. [Video description ends]

Well, actually there's more than one way but this is one of the ways. So there it is, Firewall, default route, and we can see the Next Hop is set to 10.0.1.240 but we're not finished.

[Video description begins] He switches back to the PowerShell command window. [Video description ends]

There's more to the fun, what I want to do now is associate this with a subnet.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So we can do that in a number of ways, such as here in PowerShell. I'm going to use a variable that I'm calling vnet to start and, essentially, all I want to do is point to an existing VNet called Vnet1, so I', going to store that in the vnet variable.

[Video description begins] He executes the command: $vnet = Get - AzVirtualNetwork - Name VNet1 - ResourceGroupName Rg1. No output returns and the prompt does not change. [Video description ends]

Now the next thing that I want to do is I want to make sure I modify the configuration of a subnet in Vnet1. And specify that I want to add a routing table or associate a route table. To actually associate the route table with the subnet, I'm going to use the Set-AzVirtualNetworkSubnetConfig cmdlet. I'm going to tell it that my virtual network is my vnet variable and that the subnet is called Subnet1.

And I've got the IP address prefix for the subnet, I know it's 10.0.1.0/24, I don't want to change it, so that's what it is currently. And I'm going to keep it that way, I'm then going to use -RouteTable and specify our $routetable variable. And I'm going to pipe the whole thing to the Set-AzVirtualNetwork cmdlet to write the change to the network, essentially to commit it.

[Video description begins] He executes the command: Set - AzVirtualNetworkSubnetConfig - VirtualNetwork $vnet - Name 'Subnet1' - AddressPrefix 10.0.1.0/24 - RouteTable $routetable | Set - AzVirtualNetwork. [Video description ends]

After that's done, I'm going to go take a look at it in them, so I'm just going to minimize this.

[Video description begins] He switches to the Microsoft Azure web portal and opens the Virtual networks blade. [Video description ends]

We're going to go look at our Virtual networks, in this case, I want to take a look at Vnet1 and Subnet1 within it. So Vnet1, there it is, let's wait for this to pop up,

[Video description begins] He clicks an option called "Vnet1" under the Name header and a blade called "Vnet1" opens. [Video description ends]

I'm going to click Subnets, we want Subnet1.

[Video description begins] He clicks an option called "Subnets" under the section labeled "Settings" in the notification pane. A blade called "Vnet1 | Subnets" opens in the content pane. it contains a table with four columns and two rows. A column header called "Name" contains options called "Subnet2" and "Subnet1". [Video description ends]

There's Subnet1, I'm going to click on it and let's see if it took the association with RouteTable3. And after a second, we can see indeed that change has been taken place.

[Video description begins] A blade called "Subnet1" opens. [Video description ends]

Azure VNet Peering Overview

[Video description begins] Topic title: Azure VNet Peering Overview. The presenter is Dan Lachance. [Video description ends]

VNet peering allows you to connect Azure VNets together. Now why would you want to do this? You might do this because you know you've got services deployed on each of the VNets or even on just one of them that needs access to resources on another VNet. Now that already will work, however, we're talking about doing this with reduced network latency. When you peer VNets together, the two VNets might be in the same Azure region or they might be in different regions, but if they're in the same region, you end up with reduced network latency. Now one of the things about this also is that inter-VNet traffic is private and this is because it's not being sent over the Internet. So sending traffic from VNet1 to VNet2, for example instead, traverses Microsoft's backbone network.

In our diagram, we have two VNets, on the left we've got VNet1, on the right, we've got VNet2. Whether they're in the same region or not, is not relevant in terms of connectivity. Although in the same region as we know, there's even more reduced network latency. But what's happening in this particular example instead of pairing the two VNets together directly, which is certainly an option, this is yet another thing to consider. You might link them to a centralized what I'm going to call a hub VNet, where you've got a VPN gateway defined. So by doing this, you can peer VNets to the Hub VNet, and as long as using gateway transit is enabled, it's a checkbox when you're configuring, the VNet peered connection in the GUI if you enable that option. Then you'll be able to go through the centralized VPN gateway when you peer a VNet to the hub VNet and have access to other VNets.

[Video description begins] VNet Peering - PowerShell. [Video description ends]

You can also configure VNet peering besides the GUI, besides the portal, using PowerShell.

[Video description begins] The command reads: $vnet1 = Get - AzVirtualNetwork - Name VNet1 `- ResourceGroupName Rg1 . [Video description ends]

So here we're creating a variable called VNet1, which is really just using the Get-AzVirtualNetwork cmdlet to retrieve VNet1 from from a resource group called Rg1. We're doing the same thing for a VNet called VNet2.

[Video description begins] The command reads:$vnet2= Get - AzVirtualNetwork - Name VNet2 ` - ResourceGroupName Rg1 . [Video description ends]

And then we are starting to add the virtual network peering connection. So we're creating one called VNet1 to VNet2, and our virtual network is our VNet1 variable.

[Video description begins] The command reads: Add - AzVirtualNetworkPeering - Name VNet1 - VNet2 ` - VirtualNetwork $vnet1 -RemoteVirtualNetworkld ` $vnet2.Id . [Video description ends]

And the remote virtual network ID is our VNet2 variable .Id, so calling upon the property of it. And then we would do the same thing in the reverse direction so that we can link VNet2 to VNet1's ID.

[Video description begins] The command reads: Add - AzVirtualNetworkPeering - Name VNet2 - VNet1 ` - VirtualNetwork $vnet2 -RemoteVirtualNetworkld ` $vnet1.Id . [Video description ends]

As you might imagine, you can also set up VNet peering using the Azure CLI.

[Video description begins] VNet Peering - CLI. [Video description ends]

So in our first statement, we'll be creating a variable called VNet1 and it's going to store the result of running az network vnet show.

[Video description begins] The command reads: vnet1 - $(az network vnet show - - resource - group Rg1 - - name VNet1 - - query id - out tsv) . [Video description ends]

So vnet show is used to return the details about a specific VNet. So telling it to go into resource group 1, the VNet is named VNet1, and we're using query so we can return just the ID property. And we're setting the output to tsv, which stands for top separated values.

[Video description begins] The command reads: vnet2 - $(az network vnet show - - resource - group Rg1 - - name VNet2 - - query id - out tsv) . Code ends. [Video description ends]

We're doing the same thing for VNet2, so basically we want to make sure we store the IDs in these two respective variables. The next thing we're doing is running az network vnet peering create.

[Video description begins] The command reads: az network vnet peering create - - name VNet1-VNet2 \ - - resource - group Rg1 - - vnet - name vnet1 \ - - remote - vnet - id $vnet2 - - allow - vnet - access. [Video description ends]

And we're naming this first one VNet1 to VNet2. We're specifying the resource group and the VNet name here VNet1, and then the remote VNet which is VNet2. Remember VNet2 is a variable that will contain the ID. And we're allowing VNet access and we do the same type of thing in reverse.

[Video description begins] The command reads: az network vnet peering create - - name VNet2-VNet1 \ - - resource - group Rg1 - - vnet - name vnet2 \ - - remote - vnet - id $vnet2 - - allow - vnet - access. [Video description ends]

So what we're doing is simply setting up a peered connection between two VNets.


Configuring VNet Peering
In this demonstration, I'm going to use the portal to enable a VNet peering connection between two VNets. 
The overall purpose being reduced network latency, especially when those VNets are within the same Azure region. So we get started here in the portal, I'm going to go to the Virtual networks view.
I've got two virtual networks, Vnet2 and Vnet3, that are both in the Canada East region. And because I know I've got services deployed on both of those VNets that need to communicate with services on the other respective VNet, I'm going to create a peered connection between them.

[Video description begins] He clicks an option called "Vnet2" under the Name header and a blade called "Vnet2" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. It includes sections labeled "Settings" and "Monitoring". [Video description ends]

So I'm going to start in Vnet2, now when I click to open that up, I'm going to scroll down in the navigation bar until I get to the Peerings blade.

[Video description begins] He clicks an option called "Peerings" under the section labeled "Settings". A blade called "Vnet 2 | Peerings" opens. It includes a table with three columns and zero row. The column headers are "Name", "Peering status", and "Peer". It also includes a button called "Add". [Video description ends]

So when I open the Peerings blade, there currently are no peering connections. So I'm going to go ahead and create one by clicking the Add button, and there are some details I'll have to specify.

[Video description begins] A blade called "Add peering" opens. [Video description ends]

First thing is the name of the peering from Vnet2 to the remote network. Well, I'm going to call this Vnet2 to Vnet3, because that's ultimately what I'm going to do. However, it doesn't like the name, and the reason is because I need to remove the spaces from it, after which it has no problem with it. There's no problem with uppercase letters or anything like that. Down below, I need to choose the target virtual network. So we're in Vnet2 right now, so the peered virtual network, I'm going to select here as Vnet3. And I have to give a name for the peered connection from Vnet3 back to Vnet2, it's a two-way street. Why don't we be consistent, call that Vnet3toVnet2? Then I have a number of options about connectivity.

So do we want to allow virtual network access from services on Vnet2 to Vnet3? Probably, so I've got that Enabled, and what about the reverse direction, from Vnet3 to Vnet2? I'm going to leave that Enabled as well. But you really have to know which services are on the VNets and what they need to communicate with on the respective VNet that they're peered with. So I'm going to leave it Enabled in both directions. What about traffic that's forwarded or routed to Vnet3? Do we want to allow that traffic that doesn't originate from Vnet3, but forwarded to it, to come into Vnet2? We can either enable that or disable it, the default is Disabled. And the same thing, do we want to allow forwarded traffic from Vnet2, so it didn't originate on Vnet2, to come into VNet3?

That's also disabled by default. Now if you are setting up a peered connection, let's say, for this VNet to a centralized hub VNet that has a VPN gateway, you could choose to allow gateway transit. You might do this if you have a number of VNets that you want to link together through a centralized hub location. I don't have that, so I'm not going to turn that on. So I'm going to go ahead and click OK.

[Video description begins] The Add peering blade closes. The previous table now displays three columns and one row. [Video description ends]

After a moment, it looks like it's completed. So here in Vnet2, we have the Vnet2toVnet3 peered connection with the status of Connected. Let's look at this from the perspective of Vnet3.

[Video description begins] He clicks an option called "Vnet3" under the Name header and a blade called "Vnet3" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. He clicks the Peerings option and a blade called "Vnet 3 | Peerings" opens. It includes a table of three columns and one row. [Video description ends]

So if we go into Vnet3 and take a look at its Peerings, there's one, Vnet3toVnet2, and it also is Connected.

VNet Peering and PowerShell

[Video description begins] Topic title: VNet Peering and PowerShell. The presenter is Dan Lachance. [Video description ends]

You can use PowerShell to configure VNet peering. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The thing you need to consider are the VNets you're going to peer together because you're going to need variables that point to each of those VNets. I'm going to start by creating a variable called $vnet1. And it's simply going to store the return result of Get-AzVirtualNetwork where I'm giving the name of the VNet I'm interested in, and the resource group into which it was deployed. So that's my first VNet that I want to peer.

[Video description begins] He executes the command: $vnet1 = Get - AzVirtualNetwork - Name VNet1- ResourceGroupName Rg1. No output returns and the prompt does not change. [Video description ends]

I'm going to do the same type of thing with the up arrow key, but I'll change a few references here. Notably, I'm going to call the variable VNet2, and I'm going to point to a VNet I have that's actually called VNet2, and it's in resource group 1.

[Video description begins] He executes the command: $vnet2= Get - AzVirtualNetwork - Name VNet2 - ResourceGroupName Rg1. No output returns and the prompt does not change. [Video description ends]

So I've got two variables here then that point to the VNets I want to peer together. So all you really need to do is peer the VNets by specifying the source and target, virtual networks and given name for the peering connection, of course. So I'm going to go ahead and start with Add-AzVirtualNetworkPeering, and I'm going to call this one VNet1-VNet2, so that's the direction. So the source, VirtualNetwork with the -VirtualNetwork parameter is going to be my $vnet1 variable. And the -RemoteVirtualNetwork parameter is going to refer to $vnet2.Id. So I'm calling upon the ID property to get the ID of the second virtual network. I'll just go ahead and press Enter.

[Video description begins] He executes the command: Add - AzVirtualNetworkPeering - Name VNet1 - VNet2 - VirtualNetwork $vnet1 -RemoteVirtualNetworkld $vnet2.Id. The output displays the details of creating a peering between two virtual networks and the prompt does not change. [Video description ends]

And after a moment, it will make that peering connection in that direction from VNet1 to VNet2.

[Video description begins] He switches to the Virtual networks blade. [Video description ends]

And we can go ahead and check our work. 

[Video description begins] He clicks an option called "Vnet1" under the Name header and a blade called "Vnet1" opens. [Video description ends]

So if I go into VNet1 here in the portal, and if we were to take a peek at our peerings, so I'll pop up the Peerings blade.

[Video description begins] He clicks an option called "Peerings" under the section labeled "Settings". A blade called "Vnet 1 | Peerings" opens. [Video description ends]

There it is, VNet1-VNet2 but the peering status is Initiated. Well, it's not finished because we have to do the same thing in the opposite direction. Now in the GUI, you're really killing two birds with one stone, aren't you? Because you configure the VNet connection and both sides of the connection are done. But that's not the case here in PowerShell, but it's not a big deal.

[Video description begins] He switches back to the PowerShell command window. [Video description ends]

We just have to add the connection basically in the opposite direction.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So to do that, I'm going to use the same cmdlet again, Add-AzVirtualNetworkPeering. I'm going to call this one though, VNet2-VNet1, so for that direction. And then this particular perspective, the virtual network, the source virtual network is VNet2 and the remote virtual network is VNet1. So specifically, the ID property of the $vnet1 variable. Let's go ahead and press Enter to finish this peering connection. After which, we'll just go ahead and check our work in the portal.

[Video description begins] He executes the following command: Add - AzVirtualNetworkPeering - Name VNet2 - VNet1 - VirtualNetwork $vnet2 -RemoteVirtualNetworkld $vnet1.Id. [Video description ends]

Okay, so it looks like it took. Let's go. 

[Video description begins] He switches back to the Vnet 1 | Peerings blade. [Video description ends]

Well, first of all, let's actually refresh what we already have here. Notice now the peering status shows Connected. That makes sense, because it's done in both directions now.

[Video description begins] The Vnet 2 | Peerings blade opens. [Video description ends]

If we go to VNet2 and look at the Peerings, we can see that we've got the VNet2-VNet1 peered connection that has a peering status of Connected. Notice now that VNet2 of course has more than one VNet peering connection to different VNets. We can see the peer from this one's perspective, this is VNet2. And that's perfectly normal.


Azure ExpressRoute Overview
Microsoft Azure ExpressRoute gives you a private dedicated network circuit that you can use to link an on-premises data center or network directly into the Azure cloud. 
So it gives you a dedicated private network link that does not traverse the Internet, as a site-to-site VPN solution would, as an example. And you might even use both side by side, you might have a site-to-site VPN linking your on-prem network into Azure. You might also have an ExpressRoute circuit for redundancy purposes. With ExpressRoute, you have really two primary billing models. You can select metered, which means that you will be paying per gigabyte of outbound data transfer. However, you also have an unlimited option where you pay a flat fee per month which means what it says, it's unlimited in terms of data transfer.
You can also provision more than a single circuit. So this might be useful if you've got different geographical locations that you want to provision a configuration for a private dedicated link that connects into the Azure cloud. With ExpressRoute, you can have a service key. The service key gets generated automatically when you provision an ExpressRoute resource in Azure. So we see an example of what the key might look like. And this is a key that you would provide to your service provider. Now that usually comes in the form of you using the service provider, like a telecom or a network provider locally. You would have an account with them, you would sign into the web portal, and configure the Azure ExpressRoute circuit by pasting this key in there. You can get from 50 megabits per second up to 10 gigabits per second for an Azure ExpressRoute circuit.
So the way that we provision this, from beginning to end, is we start by creating an ExpressRoute resource in Azure. We then would copy the service key. The service key is generated automatically, and it's going to be in the Overview blade of your ExpressRoute resource. So you'll copy that and enter it into your service provider portal to provision ExpressRoute. After which, if you give it a bit of time, the provider status, when you look at the ExpressRoute resource in Azure. In the Overview blade, the provider status will change to Provisioned. And after we've done that, then we can configure specific peering connections, such as Azure private peering connections. Perhaps to link on-premises resources, such as individual virtual machines, even. To our Azure environment through the ExpressRoute circuit.
There are some variations to Azure ExpressRoute to think about, such as ExpressRoute Direct and ExpressRoute Global Reach. With ExpressRoute Direct, it doesn't use a service provider. Clients can make direct connections to Microsoft ExpressRoute Direct routers. And this way, we can have dual links up to 100 gigabits per second. In order for you to take advantage of ExpressRoute Direct, though, you have to send an enrollment email to Microsoft. Specifically to ExpressRouteDirect@microsoft.com. With a couple of details, including your subscription ID and the locations in question that you want to use to make an ExpressRoute Direct connection. ExpressRoute Global Reach is used to link ExpressRoute circuits together.
Now, why would we do this? Well, what you could do as an Azure customer is you could use basically the Microsoft Azure backbone. To allow connectivity from one on-premise location to another. But instead of using a standard WAN over the Internet. You're linking each of those on-premises networks to the Microsoft backbone through ExpressRoute Global Reach. So it allows you to form, then, your own private overlay network between on-premises networks, which sits upon the global Microsoft network. And you're making that connection to Microsoft through ExpressRoute.


Configuring ExpressRoute
In Azure, an ExpressRoute connection gives you a dedicated private network link from your on-premises network or data center directly into the Azure cloud as opposed to going over the Internet through a site-to-site VPN. 

[Video description begins] A web page called "Connect to Microsoft Azure | Megaport" is open. It includes a button called "Create an Account". [Video description ends]

Now, part of configuring this will be to know which provider you're going to use in a region that supports ExpressRoute. In this example, I'm looking at the megaport.com website. And from there, if you don't have an account, creating an account with your provider so that you have a web portal where you can configure part of the ExpressRoute connection. But the first thing we have to do in Azure in the portal is actually create an ExpressRoute resource.

[Video description begins] He switches to the Microsoft Azure web portal. [Video description ends]

So I'm going to start by clicking Create a resource. I'll type in expressroute, and I'll select ExpressRoute, and I'll click Create.

[Video description begins] A blade called "ExpressRoute" opens. It includes a button called "Create". [Video description ends]

I'll have to fill in a few details here, the first of which is the name of the circuit. 

[Video description begins] A blade called "Create ExpressRoute circuit" opens. [Video description ends]

So for example, I'm just going to call this first circuit, Circuit1. And I would choose the appropriate provider from the list or depending on where I am in the world, will determine which type of provider I'm going to use. So for example, let's say I select Megaport and I have a peering location. I'll just select here Dallas as an example. And then I can select the bandwidth I want for this particular circuit. So from 50Mbps all the way up to 10. I'm going to start at 50Mbps. But naturally, think about the workloads that will be using this ExpressRoute circuit when you're finished configuring it, to determine what you really need for bandwidth. The default SKU is Standard. I can go for Premium if I'm going to have more than 4000 routes as we see here in the helper screen, or if I need the ability to connect more than 10 virtual networks, and so on.

[Video description begins] He hovers the cursor over a help icon beside the SKU option. [Video description ends]

So I'm going to leave it on Standard for my requirements. The billing model is either Unlimited. So that means what it says, you get a flat monthly charge. Or it's Metered, where you pay per gigabyte of outbound data transfer. I'm going to leave it on Metered, actually. I'm going to switch that over. And I'm going to deploy this into an existing resource group.

[Video description begins] He selects Rg1 from the Resource group drop-down list. [Video description ends]

And I can specify the location where I want this to be deployed. So, maybe I'll choose (US) West Central US. Okay, and I'm going to go ahead and click Create.

[Video description begins] The Create ExpressRoute circuit closes. [Video description ends]

And after a moment, we can see in our notification area that it succeeded, the deployment of the ExpressRoute circuit.

[Video description begins] He clicks a button called "Notifications". [Video description ends]

So I'm going to click Go to resource so we can take a quick little peek at it.

[Video description begins] A blade called "Circuit1" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. The Overview option is selected in the navigation pane. The content pane includes Circuit status, Provider status, and Service key. [Video description ends]

What's important here in the Overview blade is the service key. This is what you would need to enter when you are configuring your ExpressRoute circuit on the provider side in the web portal interface. You get to specify the key among some other details. Once that's been done, you'll see that the provider status here will change from Not provisioned to Provisioned, at which point we can then look at things like Connections and Peerings.

[Video description begins] A blade called "Circuit1 | Peerings" opens. It contains a table with five columns and three rows. The column headers are "Type", "Status", "Primary subnet", "Secondary subnet", and "Last modified by". [Video description ends]

For example, if I go down to Peerings, we might want to create an Azure private peered connection. 

[Video description begins] He click an option called "Azure private" under the Type header. A blade called "Private peering" opens. [Video description ends]

Now by doing that, I might for example, want to link my on-premises environment such as maybe even a specific on-premises virtual machine that I want connected to an Azure VNet using the ExpressRoute dedicated circuit. So instead of traversing the Internet to make that VM on-premises talk to Azure, we could do it through the circuit. So we could fill out these types of peering connections. However, because our circuit is not provisioned on the provider side, we can't follow through. But this is normally what you would do. And you can even specify a shared key to authenticate the on-premises environment with the Azure environment through ExpressRoute.                    
                    
Azure Policies Overview
Microsoft Azure policies are all about controlling access to Azure resources.
So we can use built-in policies or, if they don't suit our needs, we can use custom policies that we've created to control resource access.
A policy is really a JSON rule file that we can apply to the creation of new resources in Azure. You can also apply policies to existing ones, maybe to determine if they're compliant with the security baseline. Now, custom policies can be created manually. You could copy an existing policy and tweak it. You can even get policy documents from GitHub repositories. So Azure Policies are considered to be more granular than RBAC. Consider the fact that with role-based access control, or RBAC, you can determine if a technician can or cannot create Azure virtual machines. However, with policies we can get much more granular. And determine which types of virtual machines are allowed to be deployed. And into which regions and so on. So we specify things like locations. Maybe Canada east is an acceptable location where virtual machines can be deployed but not anywhere else.
We can also specify that a default tag value be applied if it's not been applied by the user. Policies can also accept parameter values. This way you don't have to hard-code things like names into the policy itself. So it lends itself to be modular and reusable. So parameter values then can be fed into a policy. The policy would have been assigned either to a subscription, which means it flows down to everything in that subscription like resource groups and ultimately resources. Also, it could be tied to a specific resource group. It could be tied to a management group. A management group is used to organize multiple subscriptions. And you can also configure an exclusion. So let's say that you've assigned a policy to check for virtual machine disk encryption to the subscription. That flows down to everything in that subscription. But you might want to exclude a resource group where there are virtual machines used for testing purposes. And so they don't need their disks to be encrypted. So you don't want the policy applied there. So you could exclude a resource group within the subscription.
There are a number of Azure Policy effects, such as audit. Which is used for logging where it generates a warning. Or AuditIfNotExists. So this means that if a resource doesn't exist, then auditing would be enabled. DeployIfNotExists, so if a resource doesn't exist, create it. And then deny. So this would be used, for example, to mark non-compliant items as being non-compliant. Now, they wouldn't be deleted, they'd just show up as non-compliant. Such as our example, of using a policy to check for virtual machine disk encryption. So all the machines that are specified as being non-compliant are easily identified.
Then there's the notion of Azure Policy initiatives. This really is essentially a group of policies lumped together. Now why would we do that? Well, because they're related. The policy group or initiative then is assigned just as normally would be done, to a subscription, or a resource group, and so on. So as an example, imagine that we want to be able to harden regional Azure resources. So that might be an initiative. Then we could organize policies within that that would make that happen. Such as to ensure VM disk encryption is enabled. And also ensuring that endpoint protection is enabled. So the initiative would contain those two policies in this example. So it's all about, in this case, security compliance.
You can manage Azure Policies using the portal. You can also do it using the CLI and using PowerShell cmdlets.


Policy Assignment and the Portal
There are many different reasons you would apply policies in an Azure environment. Policies either control what other Azure technicians can do. Such as limiting where certain types of virtual machines can be deployed in terms of regions. Or you might want to check for security compliance for your existing deployed resources. So to get started, here in the portal, I'm going to search for Policy.
And then, I'm going to click on Policy to open up the Policy area.
The first thing I want to do is just take a look at some existing policy Definitions.
There are plenty of pre-built or built-in definitions. Of course, you could also build your own. And they're all listed here, but we can filter them such as by type, whether it's custom or built-in, or by category. For example, if I deselect everything here, and if I were to choose, let's say, Network, then I see policies related only to networking. Or of course, I could select everything in terms of category, and then filter by words, such as the word encrypt. So for example, here we see, we've got options for checking whether or not disk encryption should be applied on virtual machines. That is actually what we're going to do here.
So under the Assignments view on the left, we'll see any policies that were assigned to part of the Azure hierarchy. Whether it's a management group, which is used to organize multiple subscriptions, whether you've assigned a policy to a subscription, or even to a resource group. And of course, if you've assigned a policy to a subscription, it flows down to all resource groups in the subscription. Now, we're going to click Assign policy up at the top here.
And we're going to work with this checking for disk encryption at the VM level. First thing we have to do is determine the scope where we want this policy assignment to take place. It's set by default at the subscription level, but if I click on my options button, the Launch scope selector button on the far right, if I have a management group, which I do, I could assign the policy to a management group.
And we haven't selected the policy yet, but that means the policy, whatever it is, would be applied to all subscriptions that are under the management group. Or we could tie it to a subscription. Or even a specific resource group within the subscription. I want this to be applied at the subscription level. So the policy assignment will flow down to all resource groups under my Pay-As-You-Go subscription, that's fine.

[Video description begins] He clicks a button called "Select" and the Scope blade closes.[Video description ends]

That was the default selection. Now, I could exclude specific resource groups. 

[Video description begins] He clicks a button called "Options" adjacent to a text box called "Exclusions". A blade called "Exclusions" opens. [Video description ends]

So if I have a resource group that should not have this policy, which we haven't yet selected, applied, I could choose a Resource Group to exclude. I'm not going to do that.

[Video description begins] He clicks a button called "Cancel" and the Exclusions blade closes. [Video description ends]

Now, we have to specify the policy definitions. So I'm going to click the selector button to do that.

[Video description begins] He clicks a button called "Options" adjacent to a text box called "Policy definition". A blade called "Available Definitions" opens. It includes a filter box labeled “Search” [Video description ends]

Now from here, I can filter. So I'm going to type in the word encrypt. And I'm interested in the one that we looked at previously, Disk encryption should be applied on virtual machines. So basically, in this particular example, I'm assigning a policy that's really used to check for compliance, in this case, at the security configuration level. I'm going to go ahead and select that.

[Video description begins] He types encrypt in the Search filter box and its corresponding list appears under a section labeled “Policy Definition” [Video description ends]

There are many other policies we could have chosen, but this is what I'm using in this example.

[Video description begins] He clicks a button called "Select". The value "Disk encryption should be applied on virtual machines" is displayed in the Policy definition and Assignment name text boxes. [Video description ends]

So I want to make sure that this policy is enforced, and I'm going to click the Review + create button.

[Video description begins] The Review + create tab opens. [Video description ends]

There's really nothing else I want to do here, so I'm going to create this assignment by clicking the Create button. We can now see that the assignment succeeded.

[Video description begins] The Policy | Assignments page opens. It displays Total Assignments as 1. It includes a table with five columns and one row. The column headers are name, Scope, Type, Policies, and Category. [Video description ends]

So we now have our disk encryption being checked on virtual machine disks being applied to the subscription scope, the Pay-As-You-Go subscription. And at this point, we can then wait for that to happen. Now, how long does that take to happen? Can we force it along? No, you cannot. So we can take a minimum of 15 minutes, and depending on how many virtual machines you have in your subscription, actually, really depends on how many objects you have deployed in your subscription, it can take longer. So the more objects, the longer it takes. But at any point in time, you can come back and you could check the Compliance view to see if it's yet completed doing its search for virtual machines. And we can see here, our assignment is listed here, hasn't even started.

[Video description begins] He clicks an option called "Compliance" in the navigation pane. A page called "Policy | Compliance" opens in the content pane. It displays Overall resource compliance as 100%.It includes a table with five columns and one row. The column headers include Name, Scope, and Compliance state. He points to row entries labeled “Disk encryption should be applied on virtual machines” and “Not started” under the Name and Compliance column headers respectively [Video description ends]

So it hasn't even checked virtual machines to look at their compliance state.


Policy Assignment and the CLI
You can use the Azure CLI to manage policies.

[Video description begins] The Microsoft Azure web portal opens. The Policy page is open. [Video description ends]

Here in the Azure portal, I've already opened up policies, where we can go and take a look at policy Definitions.

[Video description begins] He clicks the Definitions option under the Authoring section in the navigation pane. The Policy | Definitions page opens. [Video description ends]

Now this is in the GUI console. Of course, we can view policy definitions as well in the CLI. But before we do that, here in the portal we can also view policy Assignments, of which we have one for disk encryption being checked at the Pay-As-You-Go subscription Scope level.

[Video description begins] He clicks the Assignments option under the Authoring section in the navigation pane. The Policy | Assignments page opens. It includes the table with five columns and one row. The column headers are name, Scope, Type, Policies, and Category. [Video description ends]

Let's open up Cloud Shell and let's explore this just a little bit.

[Video description begins] He clicks an icon labeled “cloud shell” and a command prompt window called "PowerShell" opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I'll do here in the Cloud Shell is I'm going to type az policy -h for help to see what the next level commands would be.

[Video description begins] He executes the following command: az policy - h. The output displays various commands. The prompt does not change. [Video description ends]

Such as assignment, if I want to create a policy assignment as opposed to working with policy definitions. So I'm going to run cls to clear the screen and az policy assignment -h.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. He executes the following command: az policy assignment - h. The output displays various commands. The prompt does not change. [Video description ends]

From here, we'll then see the next level commands after that, such as creating an assignment.

[Video description begins] He clears the screen and the prompt does not change [Video description ends]

So we can learn more about that, I'll just use the up-arrow key here, by changing this to az policy assignment create -h for help once again. And then we're seeing some details about what we would do to actually create a policy assignment, along with some examples of how that would actually be done.

[Video description begins] He executes the following command: az policy assignment create - h. The output displays various command details with examples. The prompt does not change. [Video description ends]

Now having done that, let's take a look at a few other things related to policies, such as az policy definition list.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So I want to list policy definitions the way we looked at the policy definitions view in the GUI.

[Video description begins] He executes the following command: az policy definition list. The output displays detailed listing of code. The prompt does not change. [Video description ends]

Now there are quite a few of them and each of them has quite a few properties, as we can see here, so the listing can be somewhat long. What we can do is query the output of this using the cli --query parameter.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So in other words, let's bring up that previous command, let's use the up-arrow key, az policy definition list. But this time, what I'm going to do is use --query. And I'm going to put in open and closing square bracket, which indicates that we have an array of items. There's multiple policy definitions. Dot. And the property I'm interested in is displayName, where name has a capital N. This is only going to show me the names of the policies as opposed to all of the details for each of them.

[Video description begins] He executes the following command: az policy definition list --query [].displayName. The output displays names of the policies. The prompt does not change. [Video description ends]

And we can see as we scroll back up through the output that there are quite a few of them. Now having done that, I'm just going to clear the screen here for one second. We can also view policy assignments.

[Video description begins] He clears the screen and the prompt does not change [Video description ends]

So I could run az policy assignment list. We'll see any assigned policies.

[Video description begins] He executes the following command: az policy assignment list. The output displays details of assigned policy. The prompt does not change. [Video description ends]

Here we've got one that's assigned for checking disk encryption, and we can see when it was created, who was it assigned by, and we have all of those details. Now we could also specifically ask for that information, meaning we could ask for specific assignments at a specific scope level.

[Video description begins] He clears the screen and the prompt does not change [Video description ends]

So for example, we're going to run az policy assignment list and I'm going to use --scope. And what I've put in double quotes here is a reference to my subscription ID. So I want to see any assignments made at the subscription level.

[Video description begins] He executes the following command: az policy assignment list --scope "/subscriptions/048b82ac-4519-403b-ab05-6b4305502109". The output displays details of assigned policy. The prompt does not change. [Video description ends]

Now we're going to see the same kind of output because I only have one assignment. But nonetheless, it is showing us our disk encryption should be applied on virtual machines assignment. Let's just minimize the Cloud Shell here and verify this.

[Video description begins] The Policy | Assignments page opens. [Video description ends]

So we do see that we have our disk encryption policy here, this assignment made at the Pay-As-You-Go subscription level.

Policy Assignment and PowerShell

[Video description begins] Topic title: Policy Assignment and PowerShell. The presenter is Dan Lachance. [Video description ends] 

Here in the Azure portal, we know that we can go into the Policy tool and go to the Assignments view to assign a policy at a given scope, whether it's a subscription, resource group, and whatnot.

[Video description begins] The Microsoft Azure web portal opens. The Policy | Assignments page is open. [Video description ends] 

However, we can also do that in PowerShell.

[Video description begins] He clicks the cloud shell icon and the Powershell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So the first thing I'm going to do here is I'm going to create a variable called $rg for resource group. And I'm going to store in that the result of get-azresource group, and the name is going to be rg1. So if I do $rg, we can see it's got a reference to my resource group.

[Video description begins] He executes the following command: $rg = get-azresourcegroup -name rg1. No output is displayed and the prompt does not change. [Video description ends]

The next thing I want to do is create a variable to store the definition of a policy.

[Video description begins] He executes the following command: $rg. The output displays details of resource group Rg1. The prompt does not change. [Video description ends]

So to do that, I've created a $definition variable, and it will store the result of running Get-AzPolicyDefinition, which I am then piping to Where-Object.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Now I've got the space backtick here to wrap that to the next line. Where-Object then has an expression, where we're looking at the display name of each policy definition until we find one that equals Audit VMs that do not use managed disks.

[Video description begins] He executes the following command: $definition = Get-AzPolicyDefinition | ` >> Where-Object { $_.Properties.DisplayName -eq "Audit VMs that do not use managed disks" }. The output displays warning messages and the prompt does not change. [Video description ends]

So Where-Object is a filtering type of cmdlet, so I've got the open and the closing curly brace and within my expression. The $_ is a built-in PowerShell variable. It's a placeholder that allows you to process a collection of items. Here the collection of items is the collection of policy definitions. And then from there, we can call upon the .Properties.DisplayName property. Now after we've done that, we should have the policy definition for Audit VMs that do not use managed disks stored in our dollar sign definition variable. There are some warning messages here about some changes taking place with these PowerShell cmdlets, and that's fine. What I want to do then is clear the screen and let's just see what's in $definition.

[Video description begins] He clears the screen and the prompt does not change. He executes the following command: $definition. The output displays details of the definition and the prompt does not change. [Video description ends]

Looks good. Looks like we've got the definition of a policy. So the next order of business is to assign that policy.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

To do that, I'm going to use the New-AzPolicyAssignment cmdlet. And I'm going to assign a name. It's going to be called VMs-ManagedDisks, and the DisplayName, Check for VM Managed Disks, then -Scope. And I'm going to reference my variable $rg. It points to resource group one. And within that, I'll call upon the ResourceID property. So that's what I'm going to do to set the scope of where that policy should be applied. And then, of course, I have to tell it the policy definition using -PolicyDefinition and I'll use our $definition variable. Again, we've got a few warnings as these cmdlets are always changing.

[Video description begins] He executes the following command: New-AzPolicyAssignment -Name "VMs-ManagedDisks" -DisplayName "Check for VM Managed Disks" ` >> -Scope $rg.ResourceId -PolicyDefintion $definition. The output displays warning messages and assignment details. The prompt does not change. [Video description ends]

But in the end, the assignment should have taken place. Now, we can take a look at that even in the portal to see if that's true. So we're already in the Assignments view.
If I do a Refresh, then we should see that there it is right there, Check for VM Managed Disks. And it's applied not just to the subscription, but rather to a resource group, Rg1, within the subscription.


Custom Policies
Although there are many built-in policies that you can assign in Azure, such as for checking security compliance, like checking if virtual machines have disk encryption enabled. Or for doing other things like limiting which types of virtual machines can be created in certain regions. There are times you might need to build your own custom policy. 
To do that here in the portal, I'm going to search for Policy to open up the Policy tool.
Now in the Policy tool, if I go to Definitions, I'll see a list of all of the policy definitions that are available.

[Video description begins] He clicks the Definitions option under the Authoring section in the navigation pane. The Policy | Definitions page opens. [Video description ends]

I can filter it so that, for example, I can view only Custom policies. Now there are none, at least not yet. We're going to add a custom policy definition by clicking the add Policy definition button up above.

[Video description begins] He clicks a drop down list box called “Type” and a list opens. He selects an option labeled “Custom”. A blade called "Policy definition" opens. [Video description ends]

Now when I do that, I have to fill in a few items. Notably, I have to specify the actual policy rule in JSON format.

[Video description begins] He enters the following code under a section called "POLICY RULE", code starts: { “policyRule”: { “if”: { “field”: “tags”, “exists”: “false” }, “then”: { “effect”: “append”, “details”: [ { “field”: “tags”, “value”: { “costCenter”: “yhz” } } ] } }, “parameters”: {} }. Code ends. [Video description ends]

So I've placed my own custom JSON text here. So I've got a policyRule and what we're looking at is when we have a resource deployment occurring, we want to check to see if any tags have been applied. So if tags haven't been applied, so exists false, then the effect is going to be append, we want to append some tags. So to the tags field, I want to add costCenter with a value of yhz. Now this is a way that we could enforce some consistency to a degree when it comes to adding tags to newly created resources. 

[Video description begins] He clicks a button called "Options" adjacent to a text box called "Definition location" under a section called “BASICS”. A blade called "definition location" opens.[Video description ends]

So to create this custom policy, first of all, I'm going to define the location at the top, as let's say subscription level.  

[Video description begins] He clicks a drop-down list box called "Subscription" and selects an option called "Pay-As-You-Go". He clicks a button called "Select" and the blade closes. [Video description ends]

And I'm going to call this name, Add Cost Center Tag. And down below, I'm going to apply it to an existing category. These are categories of policy definitions, let's say Tags.

[Video description begins] He selects a radio button called "Use existing". [Video description ends]

And of course, we have our rule listed down below.

[Video description begins] He clicks a drop-down list box called "Category" and selects and option called "Tags". [Video description ends]

And that's it. I'm going to scroll down at the bottom, and I'm going to click Save to save this custom policy definition. which, as we can see now, is clearly shown here.

[Video description begins] The Policy definition blade closes. The Policy | Definitions page opens. [Video description ends]

Now we can use this for assignments. 

[Video description begins] He clicks the Assignments option under the Authoring section in the navigation pane and the Policy | Assignments page opens. It displays Total Assignments as 2. [Video description ends]

So for example, if I go to the Assignments view, we can then actually assign that custom policy. 

[Video description begins] He clicks the Assign policy button and its corresponding blade opens. It includes Basics, Parameters, Remediation, and Review + create tabs. The Basics tab is selected. [Video description ends]

So I could choose Assign policy, just like we normally would with a built-in policy. The only difference is, we're going to select our custom policy. So for Policy definition down below because you might have quite a large list, you might want to filter it by Custom.

[Video description begins] He clicks the Options button adjacent to the Policy definition text box. A blade called "Available Definitions" opens. [Video description ends]

 There it is, Add Cost Center Tag.

[Video description begins] He clicks a drop-down list box called "Type" and selects an option called "Custom". [Video description ends]

I can select that and I can decide where I want that applied.

[Video description begins] He clicks a button called "Select" and the Available Definitions blade closes. A value Add Cost Center Tag is displayed in the Policy definition and Assignment name text boxes. [Video description ends]

So let's say for example, we want to change it from the subscription to a resource group.

[Video description begins] He clicks the Options button adjacent to the Scope text box and its corresponding blade open. [Video description ends]

So I can go back to my Scope selector. And within my subscription, maybe I'll apply that to a specific resource group where we might deploy resources.

[Video description begins] He clicks a drop-down list box called "Resource Group" and selects an option called "Rg1". [Video description ends]

And I'll go ahead and select that.

[Video description begins] He clicks the Select button and the Scope blade closes. [Video description ends]

And at this point, I'm going to click Review + create and then I will create the policy assignment.

[Video description begins] The Review + create tab opens. [Video description ends]

Now the next thing we'll do is just test that out by creating something in that resource group.  

[Video description begins] He clicks the Create button and the Assign policy blade closes. The Policy | Assignments page opens. It displays Total Assignments as 3. [Video description ends]

So let's just go Home, let's choose Create a resource.

[Video description begins] The Microsoft Azure home page opens. [Video description ends]

Let's say it's going to be a storage account, so I'm going to type in storage account.

[Video description begins] He enters storage account in a search box called "Search the Marketplace". The search list includes an option labeled “Storage account – blob, file, table, queue”. He selects the option. [Video description ends]

We'll select that. We're going to choose Create, and at this point we're going to go through and just basically create a very simple storage account.

[Video description begins] A blade called "Storage account - blob, file, table, queue" opens. He clicks a button called "Create". [Video description ends]

 I'll deploy it into resource group 1 because that's where a policy applies.

[Video description begins] A blade called "Create storage account" opens. It includes tabs called "Basics", "Networking", "Advanced", "Tags", and "Review + create". The Basics tab is selected.[Video description ends]

And I'll just give it a unique name that I know won't be used by anything else.

[Video description begins] He clicks a drop-down list box called "Resource group" and selects an option called "Rg1". [Video description ends]

And really that's about it.

[Video description begins] He enters storacct333325 in a text box called "Storage account name". [Video description ends]

 All I really want to do is create the storage account. 

[Video description begins] He clicks a button called "Review + create" and the Review + create tab opens.[Video description ends]

So I'm just going to go right to the review and create it.  

[Video description begins] He clicks a button called "Create" and the Create storage account blade closes. [Video description ends]

Now back here in the Policy tool, if I look at the Compliance view, make sure you track that assignment.

[Video description begins] The Policy | Compliance page opens. It includes a table with six columns and three rows. The column headers include Name, Scope, and Compliance state. [Video description ends]

Right now, it currently says it's not yet been started. These things can take a little bit of time before they kick in. So as we keep clicking Refresh, we can see for our Add Cost Centre Tag policy that we've got a Compliance state now of Non-compliant.

[Video description begins] He clicks the Refresh button and the Overall resource compliance value changes to 71%. [Video description ends]

Currently, it's 18 out of 24 resources, so 75%. However, if we keep clicking Refresh, that will change as it keeps evaluating the resources in our subscription to see which ones do not have that specific cost center tag. 

[Video description begins] He clicks value "Add Cost Center Tag" under the Name column header. A blade called "Assignment Details" opens. [Video description ends]

So, we can click directly on that custom assignment to open that up and view the details about it. Such as scrolling down to see a list of the non-compliant resources. In this case, that do not have the cost center tag applied.


Policy Compliance
While you can use Azure Policies to limit resource management in the Azure environment, you can also use it to check for compliance, such as with security standards.
To get started here in the portal, I'm going to search for Policy up in the top bar. And I'm going to open up the Policy tool, where the first thing we should do is look at any existing policy assignments.
Now bear in mind that when you make a policy assignment, such as at the subscription level for that type of scope.

[Video description begins] He clicks the Assignments option under the Authoring section in the navigation pane and the Policy | Assignments page opens. It displays Policy Assignments as 3. It also includes the table with five columns and three rows. The column headers include name, Scope, Type, Policies, and Category. [Video description ends]

Depending on how many objects are in your subscription will determine how long it takes before you can expect compliance reports. So for example, we've got an assignment here for a policy called Disk encryption should be applied on virtual machines. That's been applied at the Pay-As-You-Go subscription level.

[Video description begins] He clicks the Compliance option in the navigation pane and the Policy | Compliance page opens. It includes the table with six columns and three rows. The column headers include Name, Scope, and Compliance state. [Video description ends]

So when we go to the Compliance view, if it's not yet had time to run we have to just wait and click on Refresh until such time we start getting some information. So for example, we can see the Disk encryption should be applied on virtual machines compliance report here for the Pay-As-You-Go subscription. And currently the Compliance state is Non-compliant. So 0 out of 1. So it means we have zero out of one applicable item that are compliant with that.

[Video description begins] He clicks a second row which includes row entry labeled "Disk encryption should be applied on virtual machines" under the Name column header. A blade called "Assignment Details" opens. It includes a table with seven columns and one row. The column headers include Name, Compliance state, Resource Type, Location, and Scope. [Video description ends]

So if we take a look at that by opening it up, opening up the assignment details. Then when we scroll down towards the bottom, we'll see the offender. So what is the one item that was not compliant? Well, in this case we're talking about disk encryption, which applies to a virtual machine, shows us the name of the virtual machine. And we can see the Compliance state for it is that it's Non-compliant.

[Video description begins] He points to a row entry labeled "winsrv2019-1" under the Name column header. [Video description ends]

Now if we click on the Details link for that, we'll get a bit more insight as to what's going on.

[Video description begins] A blade called "Compliance details" opens. [Video description ends]

So here it says, No related resources match the effect details in the policy definition. In this case, looking for encrypted disks.

[Video description begins] He closes the Compliance details blade. [Video description ends]

So by viewing these compliance reports, we can determine whether certain machines are compliant with security standards such as this one. And if not, we know where to focus our energy to bring those devices into compliance.


Policy Remediation
You can configure remediation tasks for certain types of Azure Policies when it comes to non-compliant resources.
An example of this would be a custom policy that uses the modify policy effect. Let's take a look at this here in the portal. I'm going to start by going to the Azure Policy tool.
And we'll first start by looking at an existing definition for a custom built policy.
So I'm going to change the Type drop-down list here on the right to Custom, there it is. Add Cost Center Tag, going to click to open up that custom policy definition, and let's take a look at the definition down below.

[Video description begins] He clicks the Add Cost Center Tag row entry under the Name column header and its corresponding blade opens. It includes tabs called "Definition" and "Assignments". [Video description ends]

What's happening is we're looking for a tag in resources called CostCenter.

[Video description begins] The Definition tab includes a code. He refers to the following code snippet, code starts: "parameters": {}, "policyRule": { "if": { "field": "tags['CostCenter']", "exists": "false" }, "then": { "effect": "modify", "details": { "roleDefinitionsIds": [ “/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c” ], “operations”: [ { “operation”: “add”, “field”: “tags[‘CostCenter’]”, “value”: “YHZ” } ] } } } },. Code ends. [Video description ends]  

Now, depending on where we assign this policy will determine what it's going to look at.

[Video description begins] He highlights the following line of code: "field": "tags['CostCenter']",. [Video description ends]  

Is it going to look at all resources in the subscription or just certain ones in a resource group? Depends on where this custom policy is assigned at which scope level. So if there is not a CostCenter tag, so if that works out to be false, what should we do?

[Video description begins] He highlights the following line of code: "exists": "false". [Video description ends]

Well, we want to add a CostCenter tag with an appropriate value. So then the effect is modify. 

[Video description begins] He highlights the following line of code: "then": { "effect": "modify",. [Video description ends]

And what we want to do is make sure that we add a specific tag, in this case the CostCenter tag, with the value of YHZ.

[Video description begins] He highlights the following lines of code, code start: “operation”: “add”, “field”: “tags[‘CostCenter’]”, “value”: “YHZ”. Code ends. [Video description ends]

Now, this will certainly apply to newly created resources, they will automatically have this tag added. But for existing ones, we'd have to check the compliance. So let's see what that looks like. 

[Video description begins] The Add Cost Center Tag blade closes. [Video description ends]

Let's close out of here, and let's go back to our Compliance view over here on the left, where we can see our Add Cost Center Tag has been applied to the Pay-As-You-Go or subscription scope.

[Video description begins] He clicks the Compliance option in the navigation pane and the Policy | Compliance page opens. It includes the table with six columns and several rows. The column headers include Name, Scope, and Compliance state. [Video description ends]

And we can see that currently the state is Non-compliant, 0 out of 34 resources are compliant with that. So if we click on that, we'll be able to see the resources in question. In this case, it's going to be any resource that does not have that tag value.

[Video description begins] He clicks the row with row entry labeled “Non-compliant” under the Compliance state column header. The Assignment Details blade opens. It includes tabs called "Resource compliance", "Events", "Remediation tasks". The Resource compliance tab is selected. It includes a table with seven columns and several rows. The column headers include Name, Compliance state, Resource Type, Location, Scope, and Last evaluated. [Video description ends]

So, CostCenter with a value of YHZ. We can scroll down and we can see the identity of those specific resources. So for example, the first one is a virtual machine called winsrv2019-1. Over on the far right, if I click the three dots button, I can select the Compliance reason to see why it's not compliant.

[Video description begins] A blade called "Compliance details" opens. [Video description ends]

It's not compliant because the CostCenter tag doesn't even have a value, so there's nothing there. It needs to have a value of YHZ. 

[Video description begins] He closes the Compliance details blade. [Video description ends]

So what I can do is create a remediation task by clicking that button of the same name up here at the top. 

[Video description begins] A blade called "New remediation task" opens. It includes table with four columns and several rows. The column headers are Name, Resource Type, Location and Scope. [Video description ends]

When you create a remediation task, you are remediating in alignment with what that policy says should exist. In this case, that's the Add Cost Center Tag policy that wants the CostCenter tag with the value of YHZ to be applied. So we have a list of the resources here in our subscription that really need to be remediated and have that item added, that tag. So I'm going to go ahead and click the Remediate button at the bottom. And we can see a remediation task has successfully been created.

[Video description begins] The New remediation task blade closes. The Assignment Details blade opens. The Remediation tasks tab is open. It includes a table with six columns and several rows. The column headers include Last Updated, Remediation State, Policy Definition, Scope, Locations, and Remediated Resources. [Video description ends]

And it shows it here, when we're looking at our Policy compliance, we can see under the Remediation tasks tab that it's currently In Progress. So back here in our Compliance view, if we click Refresh, we can see that for our Add Cost Center Tag custom policy, the non-compliant state is changing.

[Video description begins] The Policy | Compliance page opens. [Video description ends]

 It will take a bit of time, we can keep on clicking the Refresh button. But now we've got 86% resource compliance. 

[Video description begins] He clicks the Add Cost Center Tag row entry under the Name column header. The Assignment Details blade opens. [Video description ends]

So if I click to open that up, let's go back and take a peek at the status of our remediation task. So if go to the Remediation tasks, we can see its Complete.

[Video description begins] He clicks the Remediation tasks tab. [Video description ends]

And if I clicked on it, then we'll be able to see some further detail.

[Video description begins] A blade called "Remediation task" opens. It includes a table with seven columns and several rows. The column headers include Name, Resource Type, Location, Scope, Deployment Id, and Related events. [Video description ends]

Now just because it's complete, it doesn't mean that every resource in the subscription has been modified to be compliant. It means that it's complete in that the instructions have been sent, it just might not completely be done. So here we can see the resources against which that modify effect for adding that tag value has succeeded. So for example, for vnet1, a virtual network, let's take a look at that. If we actually click to open up that resource, did it or did it not automatically tag it?

[Video description begins] He clicks a row entry labeled “vnet1” under the Name column header. A page called "Vnet1" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. [Video description ends]

Let's take a look. So I'm going to go Tags.

[Video description begins] He clicks an option called "Tags" in the navigation pane and a page called "Vnet1 | Tags" opens. [Video description ends]

Now if there were any tags here already, we'll see those in addition to the new one. And it looks good. We apparently had a tag here called Project with the value of ABC. And now we can see CostCenter: YHZ has been added. And this is a result of having created a remediation task.

                    
Azure AD Role Overview
In Azure Role-Based Access Control, otherwise called RBAC is a way to delegate permissions to others to manage Azure resources.  

[Video description begins] Azure Role-based Access Control (RBAC). [Video description ends]

There are a number of built in roles that you can select from or you can define your own custom roles if they don't suit your needs. Some examples of built in roles include the owner role.

[Video description begins] Azure Built-in RBAC Roles. [Video description ends]

Now if you have the owner role, you have full resource management control of all resources in Azure. We haven't yet talked about the scope of where that applies, but unto itself that's what it means. Think of an RBAC role as being a collection of related permissions. You've got the contributor role. So resource control, other than changing RBAC access. Reader role, which implies read-only access. Other examples would include CDN endpoint reader for Content Delivery Network endpoint reader. So you can read endpoints. But that's it, can you configure them. Cost Management contributors you can read and write Azure cost configurations including working with budgets, virtual machine administrator login as it implies. You can read VMs in the portal and login with admin credentials.

[Video description begins] Azure Custom RBAC Role Process. [Video description ends]

Now there are many more built in roles than that, that's just to give us a sampling of what we might expect. But you can also work with custom roles. Maybe you need one role that combines virtual machine and cost management permissions for example. So what you would do is create a custom JSON role file, this is just a text file that uses JSON syntax. You have to know what that syntax is to properly define the role, and then you can create the role from that file. For example in PowerShell, you can do that with the New-AzRoleDefinition cmdlet, or in the CLI you might use AZ role definition create.

[Video description begins] Azure Custom RBAC Role JSON File. Several lines of code are displayed. [Video description ends]

Working with a custom RBAC role file uses JSON syntax, you could even type this into your favorite text editor, it doesn't matter. But notice we've got the opening and closing curly braces at the very top and the very bottom. And the first item we see defined here is the "Name": custom VM roles It's got its own ID, the IsCustom flag third line down is set to true. We have a Description, and then we have a collection of actions. What are the permissions grouped together here within this role? So it looks like we have a bunch of read access to all items indicated with the asterisk in storage, network and compute, and then the ability to start and restart virtual machines. So this is what we would see within a custom RBAC role definition file.

[Video description begins] RBAC Role Assignment. [Video description ends]

Now we can assign roles, whether they're built in or custom at a variety of levels within the hierarchy in Azure. But before we get to that, let's talk about which principals we can assign it to. You can assign roles to users individually, but it's normally easier to do it on a group level. So you just add members to the group, they get the permissions for the roles assigned to the group. You could also do it for service principles. Think of a service principle as being kind of a dummy user account used by software. It's not actually user logging in, it's a software component that might require access, let's say, to some other resource like a storage account.

Then you've got managed identities. Now, this is something this is a built in type of security principle that's managed automatically by Azure. So this would be used for example, when if you're a software developer, you building custom solutions in Azure that need to authenticate to certain Azure services. So depending on what you're working with, will determine whether Azure creates the managed identity or not. So let's say that we've assigned a role to a group.

[Video description begins] RBAC Assignment Scopes. [Video description ends]

Where does that apply in the Azure hierarchy? Well, we can assign that at the subscription level, which means that the group members would have those permissions from the role for everything in the entire subscription, it flows down through the hierarchy down to resource groups and down to individual resources in resource groups. However, you could also assign RBAC roles to a specific resource group. And naturally those permissions would only apply for resources in the resource group. And if you need to be very granular, you can also assign it to a specific resource. So let's say you need to allow a virtual machine login for a group for one particular virtual machine. You can certainly do that by assigning the scope for that particular virtual machine resource.

[Video description begins] Inherited RBAC Assignments. [Video description ends]

Pictured on the screen we have a screenshot that shows us how inheritance works in the portal. So in the upper left, notice that we're looking at a resource group called Rg1. And if you look in the navigation panel, the Access Control (IAM) blade has been selected. That's what we're seeing on the right, we are viewing the permissions. And over on the right we can see Network Contributor which is a role has been assigned to a Group. That's called Central_Region_Canada and that was applied at this resource. Remember this resource is the Rg1 resource group. So the members of that group will have the network contributor role for resources in Rg1. Down below notice the Owner role, which was assigned to the Azure_Admins Group. Now, these groups are Azure AD groups. Notice over to the far right it says that that was (Inherited) from the Subscription level. So it's inherited from above but it's still applies here.


Azure AD Role Portal Assignment
You can use the Azure Portal to assign roles and also to view where the roles are effective. 

[Video description begins] A web portal called "Microsoft Azure" opens. [Video description ends]

We're talking about Role-Based Access Control, or RBAC. So to get started here in the portal, I'm going to search for subscription, and I'm going to go to the subscription level, because I want to start by applying a role there.

[Video description begins] He selects an option called “Subscriptions” from the search result and a page called "Subscriptions" opens. It includes a table with five columns and one row. The column headers are Subscription name, Subscription ID, My role, Current cost, and Status. [Video description ends]

Then we can examine how those permissions flow down the hierarchy, that means to resource groups within the subscription and within resource groups to individual resources. So let's start by opening up a subscription.

[Video description begins] He clicks a row entry called "Pay-As-You-Go" under the Subscription name column header and its corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Now when you want to assign RBAC roles, regardless of which level you're doing it at, you always go into the properties of the item, in this case, the Subscription. And in the navigation bar, you click on Access control (IAM). Now from here, you'll be able to see any role assignments.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

You can choose to View role assignments.

[Video description begins] A tab called “Role assignments” opens. [Video description ends]

So if I click View, I can see that listed over here on the right, but I can also +Add role assignments, which we're going to do. So I'm going to click +Add, Add a role assignment. And the first thing I need to do is select the appropriate Role.

[Video description begins] From a list of options, he selects an option called “Add role assignment” and a blade called "Add role assignment" opens. [Video description ends]

I can choose from the alphabetical list of role names. And bear in mind that a role is really just a collection of related permissions. So what I'm going to do is type in the word virtual just to filter this out. And we'll see here we've got a Virtual Machine Contributor role, which allows with the creation of virtual machines and management of them. So I'm going to leave that as the Role.

[Video description begins] He clicks a drop-down list box called "Role" and selects an option called "Virtual Machine Contributor". [Video description ends]

Now I can assign the access to Azure AD users, groups, or service principals.

[Video description begins] He types, “east” in a text box called “Select”. [Video description ends]

So what I'm going to do here is take a look for a group by the name of east. And sure enough, I have an existing Azure AD group I've created previously called EastAdmins. I want to assign this role to that group. So EastAdmins is now showing up down below as a selected member.

[Video description begins] He selects an option called “EastAdmins”. [Video description ends]

I'm going to save that.

[Video description begins] He clicks a button called "Save" and the Add role assignment blade closes. [Video description ends]

Now at this point, we want to check our work right here at this level, at the subscription level. So I'm just going to scroll over a little bit to the right so we can kind of see everything, including our scroll bar. And at the subscription level, notice for the Virtual Machine Contributor role, EastAdmins is part of that. And we can see that that is a Group and that it was assigned at the Scope of This resource. Now why don't we take a look at a resource group somewhere within the Subscriptions.

[Video description begins] He clicks a link called “Home” and the corresponding page opens. [Video description ends]

So for that I'm just going to go to Home, actually, I'll just open up my navigation bar on the left, and I'll just choose Resource groups.

[Video description begins] A page called "Resource groups" opens. It includes a table with three columns and five rows. The column headers are Name, Subscription, and Location. [Video description ends]

I'm going to open up the properties of an existing Resource group.

[Video description begins] He clicks a row entry called “Rg1” under the Name column header and its corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And we know that to get to the RBAC portion of that item, we need to click on Access control (IAM), so I'm going to do that.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

Now I don't want to make a role assignment here, what I want to do is View role assignments, so I'm going to click the View button. And I'm just going to scroll over just a little bit so we can see what's happening here.

[Video description begins] The Role assignments tab opens in the content pane. [Video description ends]

And as I scroll down, notice that EastAdmins has the Virtual Machine Contributor role that is effective here in my resource group. However, it says Inherited, and it was inherited from the Subscription level. So why don't we go into an object within this resource group to take a peek.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

So for example, if I click on Overview here for the resource group, one of the things I'll be able to do is see the resources down below that are in that resource group. It doesn't matter which one I pick. I'm just going to click on this network security group to open it up.

[Video description begins] He clicks a row entry called “NSG-Windows” and its corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And as is the case with what we've been looking at so far to get to the RBAC section, we click Access control (IAM), so this is for an individual resource.

[Video description begins] The corresponding page opens. [Video description ends]

Let's View the role assignments over on the right, and we'll see, of course, that Virtual Machine Contributor EastAdmins is shown here with inheritance coming from the Subscription level.

[Video description begins] The Role assignments tab opens. [Video description ends]

So that's all that we need to do to be able to grant permissions to Azure resources through the use of roles in the portal.


Azure AD Role CLI Assignment
RBAC roles can be assigned using the Azure CLI.
Here in the portal I'm going to click on Cloud Shell to start up the CLI, and I'm going to start by creating a role assignment using az role assignment create.

[Video description begins] A command prompt window called "PowerShell" opens in the web portal. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I have to do is specify the name of the role that I want to grant, in this case --role and in quotes, "SQL DB contributor". I then have to determine who the assignee is with the --assignee parameter who you assigning this to. Now it could be a service principle and Azure AD group, in this case, it's an Azure AD user, specifically jhill. And then I've got the full email address or user name of that account. I want to make sure that the SQL DB contributor role is assigned to jhill, and I want the scope to be a resource group. So --resource-group, and Rg1. Could go ahead and press Enter to create that role assignment.

[Video description begins] He executes the following command: az role assignment create --role "SQL DB Contributor" --assignee jhill@quick24x7test.onmicrosoft.com --resource-group Rg1. The output displays several lines of code. The prompt does not change. [Video description ends]

And it looks like it's good. We've got some returned JSON, and we can check our work here in the portal. Let's just minimize this.

[Video description begins] He switches back to the Microsoft Azure web portal. He clicks an option called "Resource groups" and a page called "Resource groups" opens. [Video description ends]

Let's go into the Rg1 Resource group to see if user J Hill is shown there with the SQL DB Contributor role.

[Video description begins] He clicks a link called "Rg1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

 So I'm going to go to Access control (IAM) for Rg1.

[Video description begins] He clicks an option called "Access control (IAM)" in the navigation pane. The corresponding page opens in the content pane. [Video description ends]

And what we want to do in there is View the role assignments, so I'll just go ahead and click on that, scroll over a little bit and let's go down and take a peek.

[Video description begins] He clicks a button called "View" in the content pane. The Role assignments tab opens. [Video description ends]

Sure enough their SQL DB Contributor and Jen Hill is a member of that role at this level, This resource. It wasn't inherited from the subscription, so let's go back into the CLI.

[Video description begins] He switches back to the PowerShell command prompt window. [Video description ends]

So I can also view assignments from within here, of course as you might imagine, so az role assignment list --, let's say resource group rg1 since that's what we just looked at in the portal.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And we can see here that user principalName J Hill is assigned here.

[Video description begins] He executes the following command: az role assignment list --resource-group rg1. The output displays several lines of code. The prompt does not change. [Video description ends]

And we can also see that the roleDefinitionName is SQL DB Contributor, and this is for the resource group of course Rg1 that we asked for, up above in the command line.

[Video description begins] He points to the output. [Video description ends]

We can also remove role assignments from here as well.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

To do that I would use the az role assignment delete command syntax. I need to specify the assignee, so --assignee, and it's going to be the user we just added here in this example, jhill. And have to specify the role because she might be assigned with multiple roles at that level, so --role SQL DB Contributor. And the scope where that was applied, that I want to remove it from, is the Rg1 resource group. So let's go ahead and press Enter. Now, that's going to remove that role assignment.

[Video description begins] He executes the following command: az role assignment delete --assignee jhill@quick24x7test.onmicrosoft.com --role "SQL DB Contributor" --resource-group Rg1. No output is displayed and the prompt does not change. [Video description ends]

So I'm just going to use the up arrow key, back to where we were listing role assignments for resource group 1, or Rg1. And notice now nothing is returned.


Azure AD Role PowerShell Assignment
PowerShell cmdlets can be used to manage RBAC role assignments. Here in the portal, I'm going to launch the Cloud Shell to access those PowerShell cmdlets.

[Video description begins] The Microsoft Azure web portal opens. He clicks an icon called “Cloud Shell” and the PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I'm going to do is create a new role assignment. Now to do that, I'm going to use the New-AzRoleAssignment PowerShell cmdlet. I'm going to use the -SignInName parameter. And I'm going to assign this to an Azure AD user jhill@quick24x7test.onmicrosoft.com. Now I could also apply this to a service principle in Azure AD or a group. But in this case, it's an individual Azure AD user. I have to specify the RoleDefinitionName, so I'll specify that parameter. In this example, it's going to be the SQL DB Contributor. And as we know when we work with RBAC, we have to determine the scope where the assignee can exercise those privileges. In this case -ResourceGroupName, Rg1. I could specify a subscription or an individual resource, here I want it done at the resource group level. So I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: New-AzRoleAssignment -SignInName jhill@quick24x7test.onmicrosoft.com -RoleDefinitionName "SQL DB Contributor" -ResourceGroupName Rg1. The output displays the details of the role assignment. The prompt does not change. [Video description ends]

Now we can verify this using PowerShell cmdlets. So I'm just going to clear the screen and what we're going to do, is we're going to retrieve role assignments for Rg1 for that user.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

To do that, I'm going to use Get-AzRoleAssignment -ResourceGroupName is Rg1, that's where we just assigned it. -SignInName is going to be our user J Hill. Let's go ahead and press Enter and see what it returns.

[Video description begins] He executes the following command: Get-AzRoleAssignment -ResourceGroupName Rg1 -SignInName jhill@quick24x7test.onmicrosoft.com. The output displays the details of the role assignment. The prompt does not change. [Video description ends]

So we're seeing that user Jen Hill has been assigned the SQL DB Contributor role. And of course we asked for this at the Rg1 resource group level so she has those permissions for SQL database deployments within the Rg1 resource group. Now naturally, we need to know how to be able to remove role assignments using PowerShell.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

We know how to add them and check them, what about removing them? We do that with the Remove-AzRoleAssignment PowerShell cmdlet. As you might expect, in this case, we're going to use -SignInName and specify our Azure AD user sign in name, the email address. I'm going to specify the role with -RoleDefinitionName. It's going to be SQL DB Contributor. And I have to apply that to a scope. Where do you want to remove that from? Well, that would be -ResourceGroupName of Rg1, so I'm going to go ahead and press Enter to remove the role assignment.

[Video description begins] He executes the following command: Remove-AzRoleAssignment -SignInName jhill@quick24x7test.onmicrosoft.com -RoleDefinitionName "SQL DB Contributor" -ResourceGroupName Rg1. No output is displayed and the prompt does not change. [Video description ends]

We're going to check our work. I'll use the up arrow key to bring up previous commands.

[Video description begins] He executes the following command: Get-AzRoleAssignment -ResourceGroupName Rg1 -SignInName jhill@quick24x7test.onmicrosoft.com. No output is displayed and the prompt does not change. [Video description ends]

Up to where we get back to Get-AzRoleAssignment and when I press Enter, nothing is returned because user J Hill no longer has that role assigned in Rg1.

Azure AD Custom Roles

[Video description begins] Topic title: Azure AD Custom Roles. The presenter is Dan Lachance. [Video description ends]

If the built in roles for RBAC in Azure don't meet your needs, you can then define your own custom roles in a JSON formatted file as I've got open here. So it's a JSON formatted file, it's just a text file really.

[Video description begins] He opens a WordPad file called "Create_Custom_Role.json". It contains several lines of code. [Video description ends]

I've got the opening and the closing curly braces. And here, I'm defining the Name of my custom role to be Custom - Network Resource Reader. IsCustom is set to true and I've also got a description here that says, Ability to view network resources. Then you have to define what this role's actions are, what can someone do in terms of permissions if they are assigned this role. So here for actions, I'm specifying Microsoft.Network/*, so all Microsoft Network types of resources in Azure, but the ability to only read them, read.

There are no definitions for NotActions, only actions that we want to allow. And for the AssignableScopes here, I've set it at the subscription level with the ID of my Azure subscription. So now, how do we take this and create a custom role? Well, there are a number of ways that that can be done. We can do this in PowerShell and that's actually what I'm going to do here. So the next thing I need to do is launch the Cloud Shell so I can get to a place where I can issue PowerShell commands.

[Video description begins] He opens the Microsoft Azure web portal. He clicks the Cloud Shell icon and the PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So I'm going to go ahead and launch Cloud Shell. Now, the first thing I have to think about is that the file that we just looked at for our custom JSON role definition was on-premises. I need to get it up here in the cloud in Cloud Shell. So I've got this button at the top here in the bar where I can upload and download files. I'm going to go ahead and click Upload/Download files, and then I'll choose Upload. So I've specified my file and it looks like the upload has completed. So the first time you open Cloud Shell, you're asked to set up storage. And this is one of the reasons so you can have persistent storage of items that you might deal with, in this case, a file I've uploaded. If I do dir, I can see indeed, there's the Create_Custom_Role.json file that we were just looking at in WordPad just a few minutes ago.

[Video description begins] He executes the following command: dir. The output displays a list of files in the directory. The prompt does not change. [Video description ends]

So what I want to do then is I want to make sure I create a new role from this. So I'm going to do that with the new-azroledefinition PowerShell cmdlet. I'm going to pass it the -inputfile parameter with the value of, in this case, create. And I can even use my tab completion to spell out the rest of it since I'm in the same subdirectory. Let's see what happens. I'm going to go ahead and press Enter to create this custom role, and it should be done.

[Video description begins] He executes the following command: new-azroledefinition -inputfile ./Create_Custom_Role.json. The output displays the details of the newly created role. The prompt does not change. [Video description ends]

Now, we can check this here in the portal. So again, it's called Custom - Network Resource Reader. So let's say we were going to go to the subscription level and apply that role.

[Video description begins] He switches back to the Microsoft Azure web portal. He clicks an option called "Subscriptions". A page called "Subscriptions" opens. [Video description ends]

So I'm going to go into my subscription.

[Video description begins] He clicks a row entry labeled "Pay-As-You-Go". A blade called "Pay-As-You-Go" opens. [Video description ends]

We know that in the GUI when you want to work with RBAC, you go into Access control (IAM). So I'm going to do that.

[Video description begins] He clicks an option called "Access control (IAM)" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

And one of the things that we're going to do here is click +Add, Add role assignment.

[Video description begins] The corresponding page opens. [Video description ends]

And, we have a unified drop down list here of both built in and custom roles. Now remember, our role starts with the word custom. And you can actually select it from the list, or you can even filter the list if you so choose.

[Video description begins] He clicks a drop-down list box called “Role”. [Video description ends]

So if I type in custom, we can see right away, Custom - Network Resource Reader. That's the role we just created. And we can see the description here, Ability to view network resources. That's what we've just created. Now, you can also remove that from PowerShell. So let me just go back here into PowerShell.

[Video description begins] He closes the page. He switches back to the PowerShell command prompt window. [Video description ends]

Let's get rid of that.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

I'm going to run get-azroledefinition, and I'm going to specify the name of it, which is going to be Custom - Network Resource Reader, the spaces between those items. Now when I do that, all it does is return that yes, that role is there, that definition exists. So I'm going to bring up that command again with the up arrow key.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader". The output displays the details of the role. The prompt does not change. [Video description ends]

What I want to do is pipe the result of that to the remove-azroledefinition cmdlet. So we're going to retrieve that specific role and pass it through and delete it. Are you sure you want to do, or we can actually suppress that message.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader" | remove-azroledefinition. A confirmation message appears. [Video description ends]

Let me just Control+C out of there.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So, if I bring back that full command again, I can just add -force, if I could spell that over correctly over here. And it will suppress that message so it will remove that role.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader" | remove-azroledefinition -force. No output is displayed and the prompt does not change. [Video description ends]

So if we use our up arrow key to go back a little bit, where we were getting that role definition, it no longer exists.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader". No output is displayed and the prompt does not change. [Video description ends]

Resource Locking Overview

[Video description begins] Topic title: Resource Locking Overview. The presenter is Dan Lachance. [Video description ends]

The purpose of Microsoft Azure resource locks is to control when others can modify or delete Azure resources of any type, whether that's intentional or unintentional.

[Video description begins] Azure Resource Locks. [Video description ends]

So it's a way to basically check out a resource, so to speak. And while it's checked out, in a manner of speaking, it can't be either modified or it can't be entirely deleted. We can set resource locks at the subscription level. And similar to how you apply RBAC roles at the subscription level and it flows down to everything in the subscription, like resource groups and resources, the same thing is true with Azure resource locks. If you set a resource lock at the subscription level, it will flow down to resource groups and resources. You could, of course, apply an Azure resource lock initially at the resource group level, or you might lock an individual resource such as a storage account, to prevent the modification of its properties. Now you can set the Azure resource lock to be read-only.

[Video description begins] Azure Resource Lock Levels. [Video description ends]

What that means is you are allowing read-only access to the item, so that it can't be reconfigured, so to speak. Or you could set it to not allow deletion or to prevent deletion of the resource.

[Video description begins] Azure Resource Lock Inheritance. [Video description ends]

So the inheritance, as we've mentioned, starts at the subscription level, then applies to resource groups, and then applies to individual resources. Now if you don't want that, in other words, you don't want the locking applying everywhere, simply specify the lock at the resource group or the individual resource level.

[Video description begins] VM and storage account are displayed as the individual resources. [Video description ends]

And you can disable or unlock the subscription, the resource group or the resource, at any point in time, once you've deemed it appropriate to allow modifications or the potential for deletion. Bear in mind that modification and deletion of an Azure resource is only possible anyways if somebody has the appropriate permissions to do so, which is usually granted through RBAC roles.

Resource Locking and the Portal

[Video description begins] Topic title: Resource Locking and the Portal. The presenter is Dan Lachance. [Video description ends]

In Microsoft Azure, a resource is an object that you define in the cloud, such as a virtual machine or a disk that you would attach to a virtual machine or a storage account or a SQL server. Any of those things are resources. And so we have the ability to use the portal to lock resources. Why would you do that? You would do it because you want to prevent either a modification of a resource, you want it to be read-only, or you want to prevent the deletion of it.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

So we can set locking at various levels in the Azure hierarchy, such as at the subscription level. Now, that's what I'm going to do.

[Video description begins] He clicks the Subscriptions option and the corresponding page opens.[Video description ends]

For example, here if I go into the subscription, I'll be able to open it up, to reveal its properties, and I am interested primarily in resource locking.

[Video description begins] He clicks the Pay-As-You-Go row entry and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

So I'm going to scroll all the way down under Settings where I see Resource locks.

[Video description begins] He clicks an option called "Resource locks" and the corresponding page opens. [Video description ends]

Any existing resource locks at this level will be shown. It says This resource has no locks. Okay, well, I could click +Add, and I could add a lock at this level.

[Video description begins] A section called "Add lock" opens. [Video description ends]

And when I do that, I specify a name and I can determine if it should be a Read-only lock, so to prevent modifications, or if I want to prevent deletions.

[Video description begins] He clicks a button called "Cancel". [Video description ends]

 I'm not going to do that though I could, but I'm not going to. Instead, I'm going to navigate to Resource groups.

[Video description begins] He clicks an option called "Resource groups" from the left-hand navigator and a page called "Resource groups" opens. [Video description ends]

So what I want to do then is take a look at the resource locking options at the Resource group level, which would be inherited by the resources in the Resource group. I'm going to click on my resource group Rg1.

[Video description begins] The corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And in the Overview blade, one of the things you'll see over on the bottom right are the resources in that resource group. So let's scroll down in the navigation bar and let's take a look at resource locks. So it's listed a little bit differently here. Under Settings, it just says Locks.

[Video description begins] He clicks an option called “Locks” and the corresponding page opens. [Video description ends]

If we take a look, we'll see if there are any locks that have been made here. Now, we've got the Subscription icon where we could take a look at subscription level locks.

[Video description begins] He clicks an icon called "Subscription" and a page called "Resource locks" opens. [Video description ends]

We were just there a few moments ago.

[Video description begins] He clicks a link called “Rg1 | Locks” and the Locks page opens. [Video description ends]

It's just a shortcut to get there. However, we can also add locks at this specific level for this particular Resource group.

[Video description begins] He points to Rg1. [Video description ends]

So that's what I'm going to do. I'm going to click Add. And I'm going to call this, let's say Lock1. And I'm going to set it as a Read-only lock here.

[Video description begins] He clicks a drop-down list box called “Lock type” and selects an option called “Read-only”. [Video description ends]

I could add Notes if I so chose, I don't choose to so I'm just going to click OK. And after a moment, we can see that Lock1 shows up here as Read-only for resource group 1. If I click Subscription once again, then we can see that it shows up at the subscription level and we can see the Scope that it's applied to is only rg1.

[Video description begins] The Resource locks page opens. [Video description ends]

Notice, you can Edit it to change any settings related to that or Delete that lock.

[Video description begins] He switches back to the Locks page. [Video description ends]

 If I go back to the Resource group, you can see the lock here.

[Video description begins] He clicks a link called "Lock1" and a page called "Edit lock" opens. [Video description ends]

And if you click on it, it'll pull up the items where you can modify its settings. But you can't delete it from here, you'd have to go to the subscription level and that's to be expected. Now, let's take a look at some of the resources within Rg1.

[Video description begins] He closes the page. [Video description ends]

We can do that by just scrolling up, clicking Overview. We'll see any resources deployed into this resource group, as we mentioned previously, listed in the bottom right.

[Video description begins] The corresponding page opens. [Video description ends]

For example, here's a resource group called, or pardon me, here's a network security group NSG called NSG-Windows.

[Video description begins] A blade called "NSG-Windows" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

If I click to open it up, we'll be able to look at the Locks for that particular individual resource.

[Video description begins] He clicks an option called "Locks" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

When I click Locks here, notice we can see Lock1 is applied Read-only. And it says Parent resource locks, can't edit them here. Click on the locks scope to go to that scope. Okay, so we'd have to go up to in this case rg1 to take a look at it. But interestingly, if we try to delete this resource, so let's say go back to Overview and normally we'll just go to Delete here.

[Video description begins] He clicks an option called "Overview" in the navigation pane and the corresponding page opens in the content pane. He clicks a button called "Delete" and a message box labeled “Delete network security group” opens. [Video description ends]

And normally, if you have the role permissions to do this it would succeed. Let's go ahead and say, Yes get rid of it.

[Video description begins] He clicks a button called “Yes”. [Video description ends]

It says, I can't do it, cannot do it because there is a lock.

[Video description begins] Another message box opens. [Video description ends]

And it's at the Rg1 level. So therefore, that's not going to happen. It's read-only, which will also prevent modifications here to this particular object.

[Video description begins] He clicks an option called "Inbound security rules" and the corresponding page opens. [Video description ends]

So for example, if I go to Inbound security rules, let's say I go to +Add a new rule, we'll just fill in a couple of blanks here really quickly.

[Video description begins] He clicks a button called "Add" and a page called "Add inbound security rule" opens. [Video description ends]

So I'm just going to accept all of the defaults and I'm going to click Add.

[Video description begins] The page closes and a message box opens. [Video description ends]

Well, it didn't even like that. So I can't even modify it, let alone delete it. Bear in mind, we set a read-only type of lock at the resource group level and it's flowing down at the resource level. So to get rid of all of this, what I could do is go up to the subscription level, as we saw because that's where it allows us to actually delete locks.

[Video description begins] He switches back to the Subscriptions page. [Video description ends]

So I'm going to do that, I'm going to go back into my Pay-As-You-Go subscription. And I'm going to scroll down and look at Resource locks.

[Video description begins] He clicks the "Pay-As-You-Go" row entry and the corresponding blade opens. [Video description ends]

And we'll see the resource lock applied at the resource group level.

[Video description begins] He clicks an option called “Resource locks” and the corresponding page opens. [Video description ends]

So I'm just going to take a look at that.

[Video description begins] He clicks the "Lock1" link and the "Edit lock" page opens. [Video description ends]

Now of course, we can only edit what's there, but if we scroll to the right to see what's over on the far end, there's the Delete option.

[Video description begins] He clicks the Cancel button and the page closes. [Video description ends]

So I'm going to press Delete, and now it's gone.

[Video description begins] The Lock1 link is deleted. [Video description ends]

Resource Locking and the CLI

[Video description begins] Topic title: Resource Locking and the CLI. The presenter is Dan Lachance. [Video description ends]

Resource locking can be managed using CLI commands just as well as it can be done using the portal.

[Video description begins] The Microsoft Azure web portal opens. He clicks the Cloud Shell icon and the PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So I'm going go into the Azure CLI and I'm going to start by using the az -h command because I don't know what the syntax is. So there's a lot of stuff here, the next level commands after az.

[Video description begins] He executes the following command: az -h. The output displays a group and various commands with their description. The prompt does not change. [Video description ends]

I'm going to guess it might be in the Rs for resource lock, but I don't see anything like that. Okay, not that. I'm going to next guess that it's somewhere in the Ls. Here it is, lock, Manage Azure locks.

[Video description begins] He highlights the following text in the output: lock: Manage Azure locks. He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So therefore, I can do az lock -h to try to figure out how to proceed from here.

[Video description begins] He executes the following command: az lock -h. The output displays the help on the az lock command. The prompt does not change. [Video description ends]

So, to Create a lock, Delete a lock, list locks, and so on. Got it. So, I'm going to run az lock create, and I'm going to create a lock here called Lock2.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

And I'm going to set it at the resource group level. I don't have to, I could set it at the subscription level. I could even set it at an individual resource level. But commonly, you would find it would be done at the resource group level, in this case, Rg1. I'm going to specify --lock-type and I'm going to set it to readonly. So I want to prevent modification, which also includes preventing deletion. So it's called Lock2, this looks good.

[Video description begins] He executes the following command: az lock create --name Lock2 --resource-group Rg1 --lock-type readonly. The output displays the details of the lock created. The prompt does not change. [Video description ends]

Let's check it out in the portal to see what it looks like in Rg1. So let's see.

[Video description begins] He switches back to the Microsoft Azure web portal. [Video description ends]

I'm going to go to my navigator up here on the left and go to the Resource groups view, where we are going to see Rg1.

[Video description begins] A page called "Resource groups" opens. [Video description ends]

I'm just going to go ahead and click to open that up.

[Video description begins] A blade called "Rg1" opens. The blade is divided into two parts: navigation pane and content pane. [Video description ends]

Let's go down and check the locks for it shall we. So scroll down and we're going to take a look at the locks, there it is, Locks. And we can see that Lock2 Read-only has been set here.

[Video description begins] He clicks an option called “Locks” under a section called “Settings” in the navigation pane and its corresponding blade opens in the content pane. It includes a table with four columns and one row. The column headers are Lock name, Lock type, Scope, and Notes. [Video description ends]

And again, it's been set at this level rg1. Now of course, if we scroll over to the far right, we can choose to Edit or Delete it. We could also go up to the Subscription level, where we'll see all the locks in the subscription, even if they weren't tied to the subscription levels.

[Video description begins] He clicks a button called "Subscription" and the corresponding page opens. It includes a table with four columns and one row. The column headers are Lock name, Lock type, Scope, and Notes. [Video description ends]

There it is. And from here, we can also Edit and Delete it at that level. But of course, we can also do that in the CLI.

[Video description begins] He switches back to the PowerShell command prompt window. The following prompt is displayed: /home/danlachance72>. [Video description ends]

Back here in the CLI, for example, we might run az lock list.

[Video description begins] He executes the following command: az lock list. The output displays the list. The prompt does not change. [Video description ends]

And here, we'll see that we do have a lock that's applied it's called Lock2, it's been applied to Rg1, and the locking level has been set to ReadOnly.

Resource Locking and PowerShell

[Video description begins] Topic title: Resource Locking and PowerShell. The presenter is Dan Lachance. [Video description ends]

You can use PowerShell cmdlets to manage resource locking in Azure.

[Video description begins] The PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started here in PowerShell, I'm going to run get command and I'm going to search for any cmdlets that have resourcelock in their name. So I'm going to pad the string resource lock with an asterisk on either end. So as long as it's got resource lock in the name, I want to see the cmdlet.

[Video description begins] He executes the following command: get-command *resourcelock*. The output displays the list of the commands with the word resourcelock in tabular format. It include four column and eight rows. The column headers are CommandType, Name, Version, and Source. The prompt does not change. [Video description ends]

And right away we can see for instance, New-AZResourceLock to create a new lock, or Get-AZResourceLock to retrieve a list of locks through Azure. We even have the option to remove or set a lock.

[Video description begins] He highlights the row entries under the Name column header in the output. [Video description ends]

And if I wanted more details on any one of these, I could run get-help, let's say a new-azresourcelock. I could ask for detail, and maybe pipe it to more to stop after the first screen full of output.

[Video description begins] He executes the following command: get-help new-azresourcelock -detail | more. The output displays the details and syntax of the command. The prompt does not change. [Video description ends]

Here I can see the syntax for this cmdlet, including the parameters, such as -LockId, -LockLevel and so on, even to the point where I'll see an example of how I can actually create a resource lock.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

Let's get started by retrieving resource locks with get-azresourcelock. I'm going to press Enter.

[Video description begins] He executes the following command: get-azresourcelock. The output displays the details related to resource lock. The prompt does not change. [Video description ends]

So it looks like we already have a lock called Lock2 that has been applied to a resource group called Rg1. And the level we can see here has been set as ReadOnly. So what I want to do is remove that lock. In order to do that, I need to get this LockId.

[Video description begins] He highlights the LockId value in the output. [Video description ends]

So in order to do that through variables, I'm going to create a variable called $lock.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So the variable's $lock and it's going to equal the return value of running get-azresourcelock. I'll specify a lock name of lock2 and we know that that applies to a resource group called rg1. But I need the lockid property. Notice I've enclosed that expression within opening and closing parentheses. That's because .lockid will be a property of us retrieving that lock with that statement. Otherwise it'll think we're looking at lockid as being a property of rg1.

[Video description begins] He executes the following command: $lock=get-azresourcelock -lockname lock2 -resourcegroupname rg1.lockid. The output reads: Get-AzResourceLock: LockNotFound : The lock 'lock2' could not be found. The prompt does not change. [Video description ends]

Actually, let's see what that would look like in terms of an error if we didn't have those parenthesis there, what would it look like? Okay, well, we're getting some kind of a message about lock2 could not be found. So it's having a problem finding all of this. However, if I bring up the previous command where we did have our open and close parentheses, it didn't give us any complaints.

[Video description begins] He executes the following command: $lock=(get-azresourcelock -lockname lock2 -resourcegroupname rg1).lockid. No output displayed and the prompt does not change. [Video description ends]

And so if we just run $lock to see what's in the variable, looks like it's got the lockid because that's what we asked for, that's the property that's stored in the variable.

[Video description begins] He executes the following command: $lock. The output reads: /subscriptions/048b82ac-4519-403b-ab05-6b4305502109/resourceGroups/Rg1/providers/Microsoft.Authorization/locks/Lock2. The prompt does not change. [Video description ends]

Then given that we have that it's at this point that we are able to remove that resource locks. We have a lockid. We can do that with remove-azresourcelock -lockid, and we'll just pass it my variable now $lock. And actually if I don't tell them anything, it asks me for confirmation which I'll Ctrl C to that and then I'll clear the screen and bring up that command again, I'm just going to add -force to suppress it asking me and after a moment looks like it's done.

[Video description begins] He executes the following command: remove-azresourcelock -lockid $lock -force. The output reads: True. The prompt does not change. [Video description ends]

We can verify this with get -azresourcelock.

[Video description begins] He executes the following command: get-azresourcelock. No output displayed and the prompt does not change. [Video description ends]

Previously it showed us lock2 for rg1, the resource group but now it shows nothing because it's been successfully removed.

Resource Locking and Templates

[Video description begins] Topic title: Resource Locking and Templates. The presenter is Dan Lachance. [Video description ends]

Not only can you use the CLI PowerShell and the portal to manage resource tags in Azure, but you can also apply tagging from an ARM template. ARM standing for Azure Resource Manager. I've got an example here in WordPad, where essentially what we're looking at here is the type.

[Video description begins] A WordPad file called “Resource_Lock_Azure_ARM_Template.json” opens. It contains the following code, code starts: { “$schema”: "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#", “contentVersion”: “1.0.0.0”, “parameters”: {}, “variables”: {}, “resources”: [ { “type”: “Microsoft.Authorization/locks”, “apiVersion”: “2015-01-01”, “name”: “Rg3Lock”, “properties”: { “level”: “ReadOnly”, “notes”: “my notes” } } ], “outputs”: {} }. Code ends. [Video description ends]

This is Microsoft.Authorization/locks. I've got a name here. So I'm going to create a resource lock here, and I'm going to name it Rg3Lock. The level will be ReadOnly, and we can specify any additional notes.

[Video description begins] He highlights "my notes". [Video description ends]

What we don't see in here is the scope to which the resource lock will be applied. That happens at deployment time when the template is deployed.

[Video description begins] He opens the Microsoft Azure web portal. [Video description ends]

So let's go ahead and see that. Here in the portal, I'm going to click Create a resource because I want to create a template deployment from my template.

[Video description begins] A page called "New" opens. [Video description ends]

So I'm going to search for template, I'll choose Template deployment.

[Video description begins] A blade called "Template deployment (deploy using custom templates)" opens. [Video description ends]

 I'll choose Create, there are a bunch of ways that this could be done, I could have created this template deployment from the CLI or PowerShell.

[Video description begins] He clicks a button called "Create" and a blade called "Custom deployment" opens. [Video description ends]

I've decided I want to do it this way. So I can choose for example, Build your own template in the editor, now we already have it so I can just click Load file.

[Video description begins] He clicks a link called "Build your own template in the editor". A page called "Edit template" opens. [Video description ends]

So I've specified the template file that we looked at a moment ago in WordPad.

[Video description begins] A dialog box called "Open" opens. He selects the file. [Video description ends]

So it's going to create a lock called Rg3Lock. It's going to be ReadOnly. So I'm going to go ahead and Save that.

[Video description begins] He clicks a button called "Save". The Custom deployment blade opens. [Video description ends]

And it automatically pops up into the Custom deployment for that template where we can choose the Resource group where you want that applied.

[Video description begins] He clicks a drop-down list box called "Resource group" and selects an option called "Rg3". He selects a checkbox below a section called “TERMS AND CONDITIONS”. [Video description ends]

Let's say Rg3, and I'm going to have to go down and agree to the terms and conditions and I can click Purchase. So now the template deployment has begun. In other words, the lock to resource group Rg3 is in the midst of being applied. Now once it says it's done, which it just did, we're going to go to the resource group and take a look at the locks. So in the Resource group navigation bar, I'm going to click down on Locks and lo and behold there's our lock Rg3 and it's set as Read-only.


Resource Tagging Overview
In Azure, we know that a resource is something that can be deployed in the cloud, whether it's a SQL database or whether it's a virtual machine, a storage account, a network interface, and so on.

[Video description begins] Azure Resource Tagging. [Video description ends]

Well, we can tag resources and what that really means we're doing is we're adding metadata to them. Now why would you want to do that? You want to add tagging to resources because it allows you to add meaningful additional information to them. Such as related to a department, that that resource might have been deployed by, or a client, that resource should be billed to, or a project it should be billed to, or a cost center.

And you can organize or filter out resources and track them for billing purposes by tags. Wouldn't it be great if we could ask for anything related to project A, in terms of billing, so we can see the costs associated to that project. That's where resource tagging might be used. So it's metadata such as project with the value of XYZ or department, human resources or cost center, YHZ, or state testing as opposed to production. Now the thing about this is that a resource tag is a name and value pair. And you can use it as we know for searching, filtering, to group resources, and for billing purposes.

You can also use policies in Azure to enforce tagging. For example, you could set a policy so that any new resources deployed let's say in a particular resource group will automatically have a cost center tag applied with a specific value. That can be automated. Each resource can have up to a maximum of 50 tags. Now not every single type of Azure resource will support tags, but the vast majority of what you're going to want to do it to, they will support it. The other thing about this is that resource group tags are not inherited. So if you add a tag to a resource group, that does not mean it will automatically flow down and set that tag for all of the resources in the resource group. If you want to do that, look at working with Azure policies that have a modify effect for tagging purposes. You can use the CLI to work with resource tagging.

[Video description begins] Azure Resource Tagging - CLI. [Video description ends]

In our first example, we've got az tag list that's being piped to the line filtering grep tool in UNIX and Linux. And we're asking to display the tagName property.

[Video description begins] The following command is displayed: az tag list | grep "tagName". [Video description ends]

What that will do is give you a list of all of the tags in the entire Azure subscription. You can create a tag with az tag create, here we're naming it DeptID.

[Video description begins] The following command is displayed: az tag create --name DeptID. [Video description ends]

We can also add tag values with az tag add-value.

[Video description begins] The following command is displayed: az tag add-value --name DeptID --value 1234. [Video description ends]

So here we're adding it to DeptID, the value is 1234. You can even apply to a specific resource such as az network vnet update.

[Video description begins] The following command is displayed: az network vnet update -g rg1 -n vnet1 --set tags.DepID=4555. [Video description ends]

So we're applying a tag to a specific VNet in a resource group called rg1. And the name of that is vnet1. And we're using --set tags. and then Dept ID equals in this case the values of 4555. Resource tagging is also possible using PowerShell.

[Video description begins] Azure Resource Tagging - PowerShell. [Video description ends]

In our first example, we're creating a variable called $storaccount. And it's essentially going to point to a storage account. Now we get that by running get-azresource.

[Video description begins] The following command is displayed: $storacct=get-azresource -resourcename storacct3345 -resourcegroupname rg3. [Video description ends]

We specify the name of the resource, in this case, the storage account name and the resource group it's deployed into. So then our variable can be used to refer to that storage account. And in our second example, that's exactly what's being done. We're calling upon our variable. Then we're calling upon .tags and .add, because we want to add the CostCenter tag with the value of YHZ to the storage account.

[Video description begins] The following command is displayed: $storacct.tags.add("CostCenter","YHZ"). [Video description ends]

Then to commit that to the resource to the storage account, we run set-azresource. We use the -tag parameter.

[Video description begins] The following command is displayed: set-azresource -tag $storacct.tags -resourceid $storacct.resourceid -force. [Video description ends]

And in this case, we refer to the $storacct variable .tags property. And we use the -resourceid parameter and give the ID, the resource ID of our storage account variable to write to. And I'm using -force here just to suppress any messages that might pop-up asking you for sure here in PowerShell. The next thing I can do is retrieve resources.

[Video description begins] The following command is displayed: (Get-AzResource -Tag @{"CostCenter"="YHZ"} ).Name. [Video description ends]

Here, I'm using Get-AzResource with the -Tag parameter. And I refer to the tag within curly braces after the @ symbol. So in quotes, I've got CostCenter, it's the name of the tag, equals and then in quotes, I've got the value I'm looking for, YHZ. Now all of that is enclosed within open and close parentheses because if I don't do that, it's going to try to use .Name as a property of YHZ. That's not quite it. We need .Name to be a property of the return result of what executes first within the parentheses, in other words, retrieving the tags. We want to make sure we get the name of the resource. So what that command will really do is it's going to show us the names of all Azure resources in the subscription that have "CostCenter" = "YHZ". So it could potentially be a pretty long listing. In our last example, we can also remove tags.

[Video description begins] The following command is displayed: $storacct.tags.remove("CostCenter"). [Video description ends]

So in this case, we've already got our storage account pointing to in this case to storage account. Doesn't have to be a storage account, could be pretty much any type of resource that supports tagging. But we're calling upon the variable .tags.remove. And in parentheses and double quotes, I'm just giving it the name of the tag I want to remove, in this case CostCenter.


Resource Tagging and the Portal
Tagging resources in Azure is useful because tags are metadata. It's key and value pairs up to 50 that you could add for each individual Azure resource. You might want to tie a resource to a cost center, or a department, or a project, or something like that. Which facilitates searching, grouping, and even looking at things on a per billing basis for specific tags.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

 So I'm going to go ahead here and get started in Azure by going to the All resources view where I'm going to open up an existing resource.

[Video description begins] He clicks an option called "All resources" and the corresponding page opens. [Video description ends]

It doesn't matter which one it is, let's say I scroll down and open up a virtual machine.

[Video description begins] He clicks a resource name called "WinSrv2019-1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

When you click on an Azure resource, in the navigation panel, you'll see Tags. And when you click Tags, you'll see any existing tags or key and value pairs that have been assigned to that resource. And you can make changes to them up to having 50 key and value pairs.

[Video description begins] He clicks an option called “Tags” and its corresponding page opens in the content pane. [Video description ends]

Currently this virtual machine has two. Project : ABC is the first tag and CostCenter with the value of YHZ is the second one. And I can even add a third one here. So for example, I might tie it to a department. So I'm going to put it Department. Now if I've already created that, as I start typing it'll show up.

[Video description begins] He enters Department in a text box under a column name called "Name". [Video description ends]

However, nothing's popping up so this is a brand new tag I'm creating. And I'm going to set the Value to IT.

[Video description begins] He enters IT in a text box under a column name called "Value". [Video description ends]

So we've now got a third tag that we are adding here to this particular resource. Now we can go back and remove any one of these at any point in time. However, I'm going to click Save. So now that we've got those listed, we see the third one has been added at the bottom. If I were to go to another resource, let's close out of this virtual machine. Let's just pick a storage account and let's look at the tags for it.

[Video description begins] He clicks a resource name called "storacct333325" in the All resources page and the corresponding blade opens. [Video description ends]

And when I click on Tags, I'll see whatever it's been tagged with already.

[Video description begins] He clicks the Tags option and its corresponding page opens. [Video description ends]

And bear in mind, Azure administrators can apply policies that can add default tags. So there might be times when you're creating a resource and you don't add tags. And after you check it, after it's been created, there are tags. That's because of a policy. Anyway, here we can see this storage account has CostCenter : YHZ. If I were to type department, we'll notice it already knows it exists. And in the same way, it knows it's already got a value that's been typed in for another resource. And that's fine, we can go ahead and work with that.

[Video description begins] He enters Department under the Name column and IT under the Value column. [Video description ends]

When I click that, it's kind of like a little filter, Now, notice that we've also got a little square icon also over here, and it allows me to show resources with this tag. So let's do it for the first one here, CostCenter : YHZ.

[Video description begins] A page called "Resource with tag CostCenter : YHZ" opens. It includes a table with five columns and several rows. The column headers are Name, Type, Resource group, Location, and Subscription. [Video description ends]

it'll show me resources that have been tagged with that item. So specifically, we can see that all of these items are listed here. And let's just kind of move over a little bit so we can see them all. So they're all listed here as being items that are tagged with that same value. So we can see at the top here, Resources with tag CostCenter : YHZ. Now when you're creating a new resource, for example, let's just get out of here, we're not going to save that. I'm going to click Create a resource.

[Video description begins] He closes the Resource with tag CostCenter : YHZ page. The New page opens. [Video description ends]

Let's say we were going to create a brand new storage account. It could be anything but let's say that's what it was.

[Video description begins] He enters Storage account in the Search box and selects the corresponding option. A blade called "Storage account - blob, file, table, queue" opens. [Video description ends]

Now when you're in the midst of creating a new resource in Azure, during the creation, whether in the GUI or at the command line, you can specify tags.

[Video description begins] He clicks a button called "Create" and a blade called "Create storage account" opens. It includes tabs called "Basics", "Networking", "Advanced", "Tags", and "Review + create". [Video description ends]

We can see the Tags part of the wizard right here.

[Video description begins] He clicks the Tags tab. [Video description ends]

And when you go there, it's going to look familiar, you can put in the name and value, up to 50 of them. Okay, so we can do that as well. Let's go back to our All resources view.

[Video description begins] The All resources page opens. [Video description ends]

Because another aspect of working with tags in the GUI here in the portal, is that you can modify a selection of objects in terms of tagging. What that means is if I were to, let's say, put check marks by a couple of these resources, I can then click the Assign tags button up at the top of the view.

[Video description begins] A blade called "Assign tags" opens. [Video description ends]

Now within here, I'll see each of the selected items listed and I can delete tags and make changes. But I can also add one up here. So for example, if I wanted to, I could put in a tag, let's call it Stage. And for Value I'm going to put in Testing.

[Video description begins] He enters Stage under the Name column header and Testing under the Value column header. [Video description ends]

So it's the testing stage that I'm applying to this and I'm going to go ahead and click Save.

[Video description begins] The blade closes. [Video description ends]

So if I look at any one of these items, let's say this storage account, this second one here that was part of our initial selection.

[Video description begins] A blade called "cs210037ffe9de77ec8" opens. [Video description ends]

We can also see it says it assigned it to three resources. But let's just check this one anyway. If I go to Tags, I'll see whatever was already applied previous to my last action.

[Video description begins] He clicks the Tags options and its corresponding page opens. [Video description ends]

But I will also see that Stage was added with the value of Testing.

Resource Tagging and the CLI

[Video description begins] Topic title: Resource Tagging and the CLI. The presenter is Dan Lachance. [Video description ends]

The CLI can prove very handy when it comes to manipulating tags in an Azure environment. 

[Video description begins] The PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started here, I'm going to type in az tag list. Now when I do that, it should show me details about all of the tags in this entire subscription, but there's too much metadata here.

[Video description begins] He executes the following command: az tag list. The output displays details of all tags. The prompt does not change. [Video description ends]

All I really want to see are the names of tags. So I'm going to clear the screen, I'm going to use the up arrow key to bring up that previous command.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And I'm going to use --query [ ] because it's an array or list of items. And for each of them, we want to see tagName, where Name has a capital N.

[Video description begins] He executes the following command: az tag list --query [].tagName. The output reads: [ "CostCenter", "ms-resource-usage", "Stage", "Project", "Department" ]. The prompt does not change. [Video description ends]

That's better. So now I can see the names of tags, not the values that have been applied in my entire subscription. I want to add a new one. So I'm going to run az tag create. And I want to create one, --name, called ClientID. We might want to do this if we want to track resources based on clients, for doing projects for clients, for billing purposes, for chargeback to clients.

[Video description begins] He executes the following command: az tag create --name ClientID. The output displays the details of the newly created tag. The prompt does not change. [Video description ends]

So what I've done is created the tag called ClientID.

[Video description begins] He executes the following command: clear. The screen gets cleared and the prompt does not change. [Video description ends]

And we can verify this, of course, if we bring up, using the up arrow key, our az tag list command where we're querying for tagName.

[Video description begins] He executes the following command: az tag list --query [].tagName. The output displays the lists of tags. The prompt does not change. [Video description ends]

There's ClientID shown at the bottom of the list, perfect. Now I want to add a value for the ClientID tag and then we can apply it to a resource. So to add a value, I'm going to run az tag add-value --name, well, the name of the tag is ClientID and --value. I'm going to set it to a value of 1234.

[Video description begins] He executes the following command: az tag add-value --name ClientID --value 1234. The output displays the details of the value added to the tag. The prompt does not change. [Video description ends]

Now I want to apply that to a resource. So to do that, I'm going to use, let's say, az network vnet update. I'm going to apply this to a VNet, a virtual network, that's deployed in a group, -g, called rg1, resource group 1. -n for the name of the VNet, is Vnet1, and --set tags. in this case ClientID. And of course, I could also specify the value here, 1234, that I want to add to that VNet.

[Video description begins] He executes the following command: az network vnet update -g rg1 -n Vnet1 --set tags.ClientID=1234. [Video description ends]

So by adding the value up above, what we're really simply doing is making it available to be assigned to individual resources.

[Video description begins] He opens the Microsoft Azure web portal. A blade called "Vnet1 | Tags" is open. [Video description ends]

And if we flip over here into the portal where I've pulled up the tags for Vnet1, we indeed will see that ClientID with a value of 1234 has been successfully added.


Resource Tagging and PowerShell
You can use PowerShell cmdlets to manage tags in an Azure environment.
So to get started, I want to make sure I get a handle on a specific storage account that I've already created. And I want to store that in a variable that I'm going to call storacct. So we can see here $storacct. And I'm going to tell it I want to run get-azresource-resourcename. Here's the name of the storage account I have. And it's in a resource group called rg1. Now I want to do this because I want to apply tags to that storage account.

[Video description begins] He executes the following command: $storacct=get-azresource -resourcename storacct333325 -resourcegroupname rg1. No output is displayed and the prompt does not change. [Video description ends]

So now let's just run $storacct to make sure we have a handle on that storage account. Looks good and currently we can see the tags for it CostCenter YHZ.

[Video description begins] He executes the following command: $storacct. The output displays the details of the variable storacct. The prompt does not change. [Video description ends]

Now what I want to do is add something new. So I'm going to go ahead in terms tags and run $storacct. We have that variable the points to the $storacct.tags.add. And in parenthesis and I will start double quotes. I want to set the Stage key with the value of Development and I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: $storacct.tags.add("Stage", "Development"). No output is displayed and the prompt does not change. [Video description ends]

Now let's just clear the screen with cls and use the up arrow key to bring up our $storacct variable. Notice that Stage and Development the key and value pair have been added as a tag for that storage account. I can also do other stuff like this.

[Video description begins] He executes the following command: $storacct. The output displays the details of the variable storacct. The prompt does not change. [Video description ends]

So in parenthesis get-azresource -tag. And I'm going to specify here an @ symbol with an open curly brace, and in quotes I'm going to say Stage and = Development put all of the each of these items in quotes. And the next thing I'm going to do is close off my curly bracket and my parentheses and .Name. What does this mean? Well, it means that what I want to do is I want to show the names of any Azure resources that have that listed tag name and value. So "Stage"="Development". When I press enter, we still don't see anything here.

[Video description begins] He executes the following command: (get-azresource -tag @{"Stage"="Development"}).Name. No output is displayed and the prompt does not change. [Video description ends]

Well, that's strange because when we looked at our variable, it returned Stage Development. Well, that's the variable. It's not been committed to Azure yet. So what we need to do is run set-azresource to apply the change -tag, and then $storeacct.tags the tags property. Because we know that the tags property here contains what we just modified plus what was already there to begin with. So, $storeacct.tags -resourceid give it the resource ID that's going to be $storeacct.resourceid. Great working with variables isn't it makes things much easier. I'll just use -force to suppress any questions. And after that's done, it will have committed that change to that resource.

[Video description begins] He executes the following command: set-azresource -tag $storacct.tags -resourceid $storacct.resourceid -force. The output displays the details of the changes made. The prompt does not change. [Video description ends]

So I'm going to clear the screen we're going to use the up arrow key to get-azresource once again. And now we can see our storage account storacct333325.

[Video description begins] He executes the following command: (get-azresource -tag @{"Stage"="Development"}).Name. The output reads: storacct333325. The prompt does not change. [Video description ends]

Indeed is tagged with "Stage"="Development".                    


Azure Monitoring Overview
In order to keep your Azure environment secure and running optimally, you should perform monitoring.
Now in order to monitor something to determine if something is abnormal, you need to know what is normal. And that's where monitoring baselines kick in. Whether it's for determining what normal activity looks like at the network level, for the amount of network transmissions, for example. What is normal when it comes to activity on a host. Such as how much memory is usually used within normal workload conditions, or how busy the CPU is. And that also goes for an application, which could be spread out across multiple virtual machine hosts. Monitoring baselines will vary from one company to another, even from one department within an organization to another. Depending on how technology is being used. So an anomaly from the normal usage could indicate a security incident. It could just be a normal spike in activity. But if we gather enough activity over time, we'll know that that occurs.
So a security baseline then can be used to detect anomalies. And performance baselines can also be used simply to detect that things are busy or that they have slowed down. And in response we might resize virtual machine instances. Or configure autoscaling accordingly to accommodate the increase or decrease in those workloads. So baseline anomalies could show up as busy CPU utilization. Which could be indicative beyond of just a busy workload of cryptocurrency mining, if the machine has been infected, or ransomware. If we have excessive network traffic way beyond normal that could be indicative of a distributed denial of service or a DDoS network attack. Or we might have device operating system changes while the hardware is the same. Now that would mean that we might have a Windows host that is all of a sudden a Linux host, but everything else about it looks the same. So that could be indicative of someone having infected the machine or maybe booted it from a USB drive into a different OS, and so on. The other thing to think about is system and data access outside of regular work hours at irregular times. So there are a lot of different aspects of Azure resources that we might monitor to determine if there's an anomaly of some kind.
Now Azure monitoring gives us a number of options to track this stuff, including centrally. So we can monitor Azure resource activity logs. Now these activity logs are essentially audit logs of management tasks applied to Azure resources. Such as starting and stopping a VM or reconfiguring a VM or a web app. We can also look at the Azure Performance Diagnostics Windows VM extension. If you enable performance diagnostics, then you're getting more details on metrics like CPU utilization and traffic in and out, and disk I/O activity, for monitoring purposes. You can also pin a lot of these items to custom dashboards. So that you can pull up a dashboard and see what's of relevance for you when it comes to monitoring your Azure environment. You can also work with Azure Application Insights if you want to track activity and performance metrics for a specific web app. So that's really what that one is about.
Here on the screen we have a screenshot of monitoring some performance metrics for an individual VM or virtual machine. So we can see the CPU average utilization, the network traffic total, the disk bytes total, the disk operations per second on average. These are important metrics to monitor. However, we can also monitor things centrally instead of doing this and going to an individual Azure resource, in this case a VM.
And that's where Log Analytics workspaces kick in. This is centralized monitoring of Azure log data and also performance metric data. So configuration and log data feeds into Azure Monitor from the Log Analytics workspace. You can also run log queries in the Log Analytics workspace. Or from Azure Monitor, again, because Azure Monitor gets a lot of its data from Log Analytics workspaces. Your alert notifications can be configured in the Log Analytics workspace.
Now, there are a number of data sources that Log Analytics workspaces draw upon. Including storage account logs, Azure activity logs, physical and virtual servers. And you can even link it to your existing System Center Operations Manager or SCOM environment, if you have one. Now by adding servers to the Log Analytics workspace. It means that their performance metrics and log data can be collected centrally in the Log Analytics workspace.


Individual Resource Monitoring
There's a wealth of information available for each and every Azure resource whether you're interested in monitoring the performance of an item or auditing who did what to it from a management perspective or viewing things like operating system log details for VMs. 
All of this is available here in the portal. So I'm going to start in the portal by clicking to open up an existing virtual machine.

[Video description begins] He clicks a virtual machine called "WinSrv2019-1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And the first thing we're going to do is click on the Activity log on the left.

[Video description begins] He clicks an option called "Activity log" in the navigation pane and the corresponding page opens in the content pane. It includes a table with six columns and three rows. The column headers are Operation name, Status, Time, Time Stamp, Subscription, and Event initiated by. [Video description ends]

This is a log that really only relates to the management of this resource in Azure. And so on the right the default Timespan is the Last 6 hours. Let's get more stuff shown here by changing that, let's say, to the Last month and I'll click Apply.

[Video description begins] He clicks a drop-down list box called "Timespan" and selects an option called "Last month". He clicks a button called "Apply". [Video description ends]

Now we'll see that there are quite a few other operations related to the management of this VM. When we filter in that way we can see the name of the operation, whether it succeeded or not, the date and time stamp, the subscription it applies to and the user that initiated it. We can also further filter this. So for example, for Event severity, let's say the only thing I'm really interested in are Critical and Error messages, I'm not interested in seeing Warning or Informational.

[Video description begins] He clicks a drop-down list box called "Event severity". [Video description ends]

So I can unselect those or deselect them and now I've got a really small filtered list. And I can click on any one of these specific activity log entries to get more detail.

[Video description begins] He clicks an Operation name called "VirtualMachines" and the corresponding blade opens. [Video description ends]

Now, we also have other options for monitoring here.

[Video description begins] He closes the blade. [Video description ends]

I'm going to scroll way down in the navigation bar down to the Monitoring section where I'm going to click on Metrics. This is more related to the performance in this case of the VM.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

So we can select a metric from the drop-down list. For example, I'll just go down in this list and choose Percentage CPU.

[Video description begins] He clicks a drop-down list box called "Metric" and selects an option called "Percentage CPU". [Video description ends]

Now the Percentage CPU item is added here and we can see its value. We can see it's been plotted against the timeline on the bottom, and the percentage going across the top, from the bottom to the top.

[Video description begins] He points to a graph. [Video description ends]

We can also add metrics, you have more than one thing shown at the same time.

[Video description begins] He clicks a button called "Add metric". The options called "Scope", "Metric Namespace", "Metric", and "Aggregation" are displayed. [Video description ends]

So I'm going to go ahead and maybe and add Disk Read Bytes/second. And when you do that it will be plotted.

[Video description begins] He clicks a drop-down list box called "Metric" and selects an option called "Data Disk Read Bytes/Sec (Deprecated)". [Video description ends]

You'll see it might have a value. So we can see the values are being plotted but notice in the legend it's a different color. So this could be very important as well.

[Video description begins] He points to the graph. [Video description ends]

So we can monitor these metrics to track how this is doing. So performing well, do we maybe need to resize the VM, maybe scale it up so it can handle the workload better? That type of thing. We can also go to Logs over on the left.

[Video description begins] He clicks an option called “Logs” and its corresponding page opens in the content pane. [Video description ends]

Now it's not enabled by default, so I'm going to go ahead and click the Enable button. Now when you do that, you're going to have to select the subscription and a Log Analytics workspace that you want this associated with. So I'm okay with the default selection for the Log Analytics workspace. So I'm going to go ahead and click Enable.

[Video description begins] He clicks a button called "Enable" and a message box called "Submiting deployment" is displayed. [Video description ends]

Once that's enabled and you're still in the Logs blade, over on the right you'll see that things have changed.

[Video description begins] A tab called "New Query 1" is displayed. It is divided into two parts: navigation pane and content pane. [Video description ends]

You've got a query builder tab at the top here, it's called New Query 1. So this is a log query and down the left, you have a bunch of table names that you can select from.

[Video description begins] He points to the navigation pane. [Video description ends]

 Now if you expand any of these table names, what you will be exposing are the fields or columns within those tables.

[Video description begins] He expands a table name called "SecurityEvent". [Video description ends]

And you can see the data type is string or whatever it happens to be depending on the nature of what you're looking at. You can actually start selecting items.

[Video description begins] He expands a table name called "AzureActivity". [Video description ends]

So for example, if I double-click on one of these items, such as a column, I could see it puts it in here over on the right.

[Video description begins] He double-clicks a column name called "ActivityStatus (string)". The ActivityStatus column name is displayed in a text box called "Type your query here or click one of the example queries to start" in the content pane. A section called "Get started with sample queries" is also displayed in the content pane. It includes tabs called "History", "Performance and availability", and "3 more". [Video description ends]

But of course you can also select from some example query. So if I go to Performance and availability, I could start scrolling down and saying maybe I want to view Virtual Machine available memory and I could run that.

[Video description begins] He clicks a button called "Run" in a section called "Virtual Machine available memory". A code snippet is displayed. [Video description ends]

It puts in the query statement here, where for example, the name of the table which is case sensitive is Perf. And then I'm piping that to where and I'm asking for TimeGenerated over an hour ago and so on and you can run the query by clicking Run. If there are no results, then you're going to get a message that says there are no results. Otherwise, you'll see some of the details. So this is one thing that we can do here, work with log queries within an individual resource. Let's go up to Diagnostic settings here for this Windows virtual machine.

[Video description begins] He clicks an option called “Diagnostic settings” and its corresponding page opens in the content pane. [Video description ends]

So I've got a storage account selected here for storage.

[Video description begins] He points to a storage account called "storacct333325" in a drop-down list box called "Diagnostics storage account". [Video description ends]

And I'm going to choose Enable guest-level monitoring.

[Video description begins] He clicks a button called "Enable guest-level monitoring". The corresponding page opens in the content pane. It includes tabs called "Overview", "Performance counters", "Logs", "Crash dumps", "Sinks", and "Agent". [Video description ends]

The next thing I can do is determine under Overview, for example, which performance counters I'm interested in gathering. There are some default selections.

[Video description begins] He clicks a link called "Configure performance counters" and the Performance counters tab opens. He points to a table with two columns and six rows. The column headers are Performance counter and Sample rate (seconds). [Video description ends]

I can go to Logs and determine which operating system logs I'm interested in and some details.

[Video description begins] He clicks the Logs tab. [Video description ends]

So for example, I'm interested in the Application log with Critical, Error, Warning types of events, severities. And I could do the same type of thing for the Security and System logs. And I can even ask for additional items like IIS web server logs if there is one available there.

[Video description begins] He selects a checkbox called "IIS logs" and a value called "wad-iis-logfiles" is displayed in a text box called "Storage container name". [Video description ends]

And I can save all of these settings.

[Video description begins] He clicks a button called "Save". [Video description ends]

So when you enable the diagnostic settings, you're really saying I want to start to get more details of the inner workings of the workloads running in those, well, in this case in this VM.
Log Analytics Workspaces

[Video description begins] Topic title: Log Analytics Workspaces. The presenter is Dan Lachance. [Video description ends]

In Azure, a Log Analytics workspace is a resource that you can create and configure in the Azure environment.

[Video description begins] The Microsoft Azure web portal opens. A blade called "All resources" is open. It includes a table with four columns and several rows. The column headers are Name, Type, Resource group, Location, and Subscription. [Video description ends]

To get started here in the portal, I'm going to look at my All resources view. And I'm going to filter it for objects that are Log Analytics workspaces because I already have some here.

[Video description begins] He clicks a drop-down list box called "Type" and deselects an option called "Select all". He further selects an option called "Log Analytics workspace". [Video description ends]

So I'm going to filter for Log Analytics workspaces, click outside of it. Here I can see I've got a couple of them. Now why would you have more than one Log Analytics workspace? Here I've got some for different regions or locations, Canada Central I see under the Location heading and East US.

[Video description begins] He points to the table. [Video description ends]

Well that's one reason, you might want to have your centralized logging through the Log Analytics workspace per region. But you could have multiple Log Analytic workspaces within the same region. Maybe because you have different monitoring requirements for different resources within the same region. So to get started to add a new Log Analytics workspace, I'm going to click the Add button.

[Video description begins] A blade called "New" opens. [Video description ends]

And I'm going to search up log analytic, and there it is.

[Video description begins] He clicks an option called "Log Analytics" and the corresponding blade opens. [Video description ends]

Now I'm going to select Log Analytics and choose Create.

[Video description begins] He clicks a button called "Create" and a blade called "Log Analytics workspace" opens. [Video description ends]

First thing I have to do is create a name for it or specify a name. So I'm going to call it LogAnalytics-2.

[Video description begins] He enters LogAnalytics-2 in a text box called "Log Analytics Workspace". [Video description ends]

I'm going to deploy this into an existing resource group.

[Video description begins] He clicks a drop-down list box called "Resource group" and selects an option called "Rg1". [Video description ends]

Now, up above, it's kind of outlined my name in red, in a red outline, because that name is taken. And so I'm going to put in some characters to make that a unique name and I'll kind of click outside of it. And now the name is unique.

[Video description begins] He enters LogAnalytics-2yhz76 in the Log Analytics Workspace text box. [Video description ends]

So make sure you adhere to your naming standards within your organization when you change some of these names. I'm going to specify the location where I want this specific Log Analytics workspace. So I'm going to choose Canada Central.

[Video description begins] He clicks a drop-down list box called "Location" and selects an option called "Canada Central". [Video description ends]

I'm going leave it with my Pay-as-you-go subscription for the pricing tier and I'm going to choose OK.

[Video description begins] He clicks a button called "OK". The All resources blade opens. [Video description ends]

And now back here in the All resources view, I can see my newly created Log Analytics workspace.

[Video description begins] He points to LogAnalytics-2yhz76 in the table. [Video description ends]

So I'm going to go ahead and click on it to open it up. Because one of the first things that you really should contend with is which data sources are connected. To your newly created Log Analytics workspace.

[Video description begins] He clicks LogAnalytics-2yhz76 under the Name column header and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Because remember, this serves as a centralized performance metric and log data feed. Where's that coming from? Well, we can scroll down and go under Workspace Data Sources. Here we can click Virtual machines and we're going to see all of the virtual machines that we've got deployed.

[Video description begins] The corresponding page opens in the content pane. It includes a table with six columns and several rows. The column headers are Name, Log Analytics Connection, OS, Subscription, Resource group, and Location. [Video description ends]

But I can see here that they are connected to other workspaces.

[Video description begins] He points to the Log Analytics Connection column. [Video description ends]

So I could go in and click on a specific virtual machine and disconnect it from that workspace, and then connect it to this one.

[Video description begins] He clicks a resource name called "WinSrv2019-1" and the corresponding blade opens. [Video description ends]

Now, they may not already be connected to other Log Analytics workspaces if you don't have any already defined.

[Video description begins] He clicks a button called "Disconnect" and a dialog box called "Disconnect" opens. He clicks a button called "Yes" and the dialog box closes. [Video description ends]

That would be one thing that we would do.

[Video description begins] He switches back to the LogAnalytics-2yhz76 | virtual machines blade. [Video description ends]

The other thing is to look at Storage account logs and add storage account logs as well.

[Video description begins] He clicks an option called "Storage account logs" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

And if you go to Azure Activity log, you'll also be able to link a subscription or connect your subscription here into your Log Analytics workspace.

[Video description begins] He clicks an option called "Azure Activity log" in the navigation pane and the corresponding page opens in the content pane. It includes a table with two columns and one row. The column headers are Subscription and Log Analytics Connection. [Video description ends]

So that that type of activity, that would be the management of Azure resources, shows up centrally here in your Log Analytics workspace.

[Video description begins] He clicks a subscription called "Pay-As-You-Go" and the corresponding blade opens. He clicks a button called "Connect". [Video description ends]

Also, if you go in the navigation bar in your workspace to Workspace summary.

[Video description begins] He closes the blade and returns to the LogAnalytics-2yhz76 | Azure Activity log blade. [Video description ends]

Here you can add components such as Network Performance Monitor.

[Video description begins] He clicks an option called "Workspace summary" in the navigation pane and a blade called "Overview" opens. [Video description ends]

So if I were to click Add, I could search in the Azure Marketplace for Network Performance Monitor.

[Video description begins] He clicks a button called "Add" and a blade called "Marketplace" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And I would add this one, this is from Microsoft.

[Video description begins] He selects an option called "Network Performance Monitor" and the corresponding page opens in the content pane. [Video description ends]

 If I wanted to be able to monitor connectivity, let's say between virtual machine endpoints or different subnets in my environment.


Log Analytics Workspace Data Sources
A Log Analytics workspace in Azure is created automatically.

[Video description begins] The Microsoft Azure web portal opens. The home page is open. It includes a table with three columns and several rows. The column headers are Name, Type, and Last Viewed. [Video description ends]

It is automatically created for the region in which you deploy resources. So notice here in my example, I have two default workspaces, one for the Canada Central region because I've deployed resources there. And also another for Eastern US because I've also deployed resources there.

[Video description begins] He points to the Name column in the table. [Video description ends]

So you can build your own manual Log Analytics workspace or work with the ones that are created automatically. You can think of it as a centralized way as the name implies to analyze logged information. So instead of going to view the log details for each and every Azure resource, instead you can have it collected in one location. So, for example, let's open up one of these default Log Analytics workspaces.

[Video description begins] He clicks a row entry and the corresponding blade open. It is divided into two parts: navigation pane and content pane. [Video description ends]

What's important is determining the data sources attached to the workspace. So, you can see that when you open up the workspace, if you scroll down in the navigation bar on the left. And you go to the Workspace Data Sources section. You can see that we can click on Virtual machines to pull up that blade.

[Video description begins] He clicks an option called "Virtual machines" in the navigation pane and the corresponding page opens in the content pane. It includes a table with six columns and several rows. The column headers are Name, Log Analytics Connection, OS, Subscription, Resource group, and Location. [Video description ends]

This will give me a list of all of my VMs and I'll see which ones are attached to this workspace. As opposed to other workspaces or just not connected to any workspace at all.

[Video description begins] He points to the Log Analytics Connection column. [Video description ends]

So we have a number of them here that are connected. Now you can select and click on an individual, in this case, virtual machine, and either disconnect or connect it at any point in time.

[Video description begins] He clicks a row entry called "AppServer2" under the Name column header and the corresponding blade opens. [Video description ends]

Now Connect is unavailable because this VM AppServer2 is already connected to this Log Analytics workspace. 

[Video description begins] He closes the blade. [Video description ends]

But let's say we went to this other virtual machine which is showing us Not connected to any workspace, well, then I have the option to click Connect.

[Video description begins] He clicks a row entry called "WinSrv2019-2" under the Name column header and the corresponding blade opens. [Video description ends]

So we've got a number of options available from that perspective.

[Video description begins] He closes the blade. [Video description ends]

 And by connecting the virtual machine here, you are allowing yourself to have a centralized place here in the Log Analytics workspace. To view all of the log information for all of these attached items.

[Video description begins] He points to the Name column. [Video description ends]

Now those are just Virtual machines. Other data sources include Storage accounts logs.

[Video description begins] He clicks an option called "Storage accounts logs" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

So in the same way you can go there and you can click Add if there are none there already added.

[Video description begins] He clicks a button called "Add" and a blade called "Add storage account log" opens. [Video description ends]

And you can specify storage accounts that you want to add to this centralized Log Analytics workspace.

[Video description begins] He clicks an option called "Storage account Please select a storage account" and a blade called "Choose storage account" opens. [Video description ends]

So if I were to select a Storage account, I can then specify the Data Type.

[Video description begins] He selects a storage account called "storacct333325" and the Choose storage account blade closes. [Video description ends]

So what type of stuff is stored in that storage account in terms of logging that you want it connected here.

[Video description begins] He clicks an option called "Data Type Please select a data type" and a blade called "Data Type" opens. [Video description ends]

So maybe, for example, I know I've got some IIS logs stored there.

[Video description begins] He selects an option called "IIS logs" and the Data Type blade closes. [Video description ends]

So I could go ahead and select that and add it here.

[Video description begins] He clicks a button called "OK" and the Add storage account log blade closes. [Video description ends]

You can also take a look at Azure activity logs.

[Video description begins] He clicks an option called "Azure Activity log" in the navigation pane and the corresponding page opens in the content pane. It includes a table with two columns and one row. The column headers are Subscription and Log Analytics Connection. [Video description ends]

Now activity logs are essentially kind of like audit logs that give you information about the management of Azure resources themselves. As opposed to what's happening within them, such as for a virtual machine. And so you can link or connect your subscriptions. 

[Video description begins] He clicks a row entry called "Pay-As-You-Go" under the Subscription column header and the corresponding blade opens. [Video description ends]

So if I go to my subscription, I could choose Connect to connect that here to have that information here as well.

[Video description begins] He closes the blade. [Video description ends]

 So you have a number of different data sources then so that you can centrally collect logged information from your Azure environment.
Log Queries

[Video description begins] Topic title: Log Queries. The presenter is Dan Lachance. [Video description ends]

In Azure, it's important to have the skills to properly create log queries and also to be able to interpret the results for the general overall well being and improved performance, perhaps, of your workloads running in Azure. Now you can work with log queries for an individual resource.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

For example, I can open up an individual virtual machine and in the navigation bar on the left, if I scroll all the way down, under Monitoring, I can then go to Logs.

[Video description begins] He clicks a Virtual machine called "WinSrv2019-1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Now from here I can start to conduct log queries.

[Video description begins] He clicks an option called "Logs" in the navigation pane and the corresponding page opens in the content pane. It includes a tab called "New Query1". It is divided into two parts: navigation pane and content pane. [Video description ends]

So I can start typing in things where I can refer over on the left here to table names. There's a table, for example, called Event, and if I expand that I can see the fields within it, I can start referring to them.

[Video description begins] He expands a table name called "Event" in the navigation pane. [Video description ends]

So for example, if I want to see everything in the Event table, I can simply say Event and I can continue on and tell it I want to count, or sort, and so on.

[Video description begins] He enters Event in a text box called "Type your query here or click one of the example queries to start". [Video description ends]

But if all I want to do is just take a look at that table, then I could just run that query.

[Video description begins] He clicks a button called "Run" and the result is displayed in the content pane. [Video description ends]

And if there are results, I would see them here. And you also have the option of using a number of Example queries.

[Video description begins] He clicks an option called "Example queries". A new tab called "New Query 2" opens. In the content pane tabs called "History" and "Performance and availability" are displayed. [Video description ends]

If I click that up at the top, so for example, maybe I'll look at Performance and availability and I could scroll through and there are numerous items here.

[Video description begins] He selects the Performance and availabilty tab. [Video description ends]

So such as Virtual Machine free disk space, when I click Run, it puts those query statements in here up above.

[Video description begins] He clicks a button called "Run" in a section called "Virtual Machine free disk space". [Video description ends]

And I can go ahead and run the query. Of course, I can select the Time range.

[Video description begins] He clicks a button called "Run". [Video description ends]

It doesn't have to be the Last 24 hours, maybe the Last 7 days, and that type of thing.

[Video description begins] He clicks a drop-down list box called "Time range" and selects an option called "Last 7 days" and clicks a button called "Run". [Video description ends]

So when you're working with these types of queries, that's what you can do.

[Video description begins] He selects the New Query 1 tab. [Video description ends]

Now, you can also do this from the perspective if I go Home here of a Log Analytics workspace in Azure.

[Video description begins] He clicks a link called "Home" and the Microsoft Azure home page opens. [Video description ends]

So if I open up a specific Log Analytics workspace, then I can go to Logs, and I can pretty much do the same type of thing.

[Video description begins] He clicks a Log Analytics workspace and a corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Now, when you first enable logging in your Azure environment, it might take time before it starts to populate this and you can start to use it.

[Video description begins] He clicks an option called "Logs" and the corresponding page opens in the content pane. It includes a tab called "New Query 1". [Video description ends]

And that's why up here I've got another browser window open, where to learn how to work with log queries, this is very useful. You've got a Demo environment made available by Microsoft.

[Video description begins] He opens a new tab and a page called "Get started with log queries in Azure Monitor" is open. [Video description ends]

Now when you select it, you can sign in using your normal Azure credentials, and then start to work with log queries.

[Video description begins] A web page called "Logs - Microsoft Azure" opens. It includes a tab called "New Query 1". It is divided into two parts: navigation pane and content pane. [Video description ends]

So we could see on the left, we're in the Demo environment where we can see a number of interesting categories. 

[Video description begins] He expands an option called "Security" in the navigation pane. [Video description ends]

For example, if I go under Security, then I'll start to see a number of table names. These are table names. So for example, there's SecurityAlert. If I expand that, I then see the fields or columns if you wish within the SecurityAlert table.

[Video description begins] He expands a table name called "SecurityAlert". [Video description ends]

So interesting. So if I start typing in, watch it, let's put in securityalert, but I'm going to put it in all lowercase letters.

[Video description begins] In the content pane, he enters securityalert in the Type your query here or click one of the example queries to start text box. He clicks the Run button. [Video description ends]

If I try to run this query, I'm going to get a SYNTAX ERROR. And that's because the table names are case sensitive. So if I were to put in SecurityAlert in proper or initial caps and then run it, now we have some results showing up down there. Now when you're constructing these log queries, you can start to type things in, I'm going to put in a space. I'm going to type in a vertical pipe, which is a pipe symbol. I want to take the result of what's on the left and feed it into something on the right such as counting the number of occurrences or ordering them or summarizing them or doing something of that nature. So let's say, for example, that we want to run a search. So I'm going to type in the word search in and then I'm going to specify the name of the table. And we know that the name of the table is going to be case sensitive. So SecurityAlert. It would tell it I'm looking for ssh. And I could even, if I really wanted to, I could pipe it and tell it I want to only take, let's say, 5 entries.

[Video description begins] He enters search in (SecurityAlert) "ssh" | take 5 in the Type your query here or click one of the example queries to start text box. He clicks the Run button. [Video description ends]

And then, of course, what I'm going to do is click Run to run that query. We can see the result of the query is now showing down below. We've got some security alerts for Failed SSH brute force attacks. In your environment, you'll be able to click the Save button to save the query so you can run it in the future. Now, this is not a complicated query that we've got here. It's a one liner, but sometimes it can get quite complex and you're going to want to reuse them as opposed to recreating them every time. You'll find them by going into the Query explorer under Saved Queries.

[Video description begins] He clicks an option called "Query explorer" and the corresponding blade opens. [Video description ends]

You can also go into Azure Monitor. So Azure Monitor up at the top, I'll just click Monitor.

[Video description begins] A blade called "Monitor | Overview" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Monitor is simply a way to bring together a lot of your different log information throughout your entire subscription, for example. So let's say here in Monitor, I were to click on Logs over on the left.

[Video description begins] He clicks an option called "Logs". A blade called "Select a scope" opens. It includes a table with three columns and several rows. The column headers are Scope, Resource type, and Location. [Video description ends]

Or from here I can select a scope. So let's say, I select my Pay-As-You-Go subscription and I click Apply.

[Video description begins] He clicks a button called "Apply" and the blade closes. A blade called "Monitor | Logs" opens. It includes the New Query 1 tab. [Video description ends]

And so now we're in the very familiar interface where we can begin running our queries. We can also navigate different types of tables. And of course we can see the columns so we can start building our queries and working with the results and saving them and getting to them from the Query explorer.
Dashboard Queries

[Video description begins] Topic title: Dashboard Queries. The presenter is Dan Lachance. [Video description ends]

You can run Azure log queries from within specific resources or from a Log Analytics workspace, or even from Azure Monitor.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

So I'm going to go into Monitor by searching for that in the portal here in the top search bar and I'll choose Monitor.

[Video description begins] He clicks an option called "Monitor" and a blade called "Monitor | Overview" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Azure Monitor brings everything together in one location. So that you can query Logs for items, for example, in the scope of your entire subscription, or it could be a resource group.

[Video description begins] He clicks an option called "Logs" and the corresponding page opens in the content pane. The New Query 1 tab is open in the content pane. [Video description ends]

But at any rate here, I've got a default workspace Log Analytics workspace object selected here.

[Video description begins] He clicks a link called "Select Scope" and the Select a scope blade opens. [Video description ends]

I could choose Select Scope and change that up if I so chose, but I'm going to leave it as it is because what I want to do is just run a basic query here.

[Video description begins] He closes the blade. [Video description ends]

I'm going to look in the Heartbeat table and let's say we run it.

[Video description begins] He enters Heartbeat in the Type your query here or click one of the example queries to start text box. He clicks the Run button. [Video description ends]

Well, there are no results found for the Last 24 hours, but how about we go back 7 days and run that again?

[Video description begins] He clicks the Time range drop-down list box and selects the Last 7 days option. He clicks the Run button. [Video description ends]

Think of a Heartbeat as being a "I am alive" type of message sent by computers in Azure. And we can see down below, we do have some activity related to that, including showing the ComputerIP addresses. Now, we know that we can save log queries, I could click the little Save button here.

[Video description begins] A blade called "Save" opens. [Video description ends]

And I can give this a name and save it as either a Query or a Function.

[Video description begins] He clicks a drop-down list box called "Save as". [Video description ends]

If you save it as a Function, then you could call that from another query using the short name of the function. But at any rate, and then you can specify a Category. Now, that's fine, but we can also pin this to a dashboard.

[Video description begins] He closes the Save blade. [Video description ends]

So I'm going to go ahead and click the Pin to dashboard button here.

[Video description begins] A blade called "Pin to another dashboard" opens. It includes tabs called "Select existing" and "Create new". [Video description ends]

We could choose an existing one or create a new one, I'm going to create a new one.

[Video description begins] He clicks the Create new tab. [Video description ends]

And I'm going to call it Dashboard1.

[Video description begins] He enters Dashboard1 in a text box called "Dashboard name". [Video description ends]

It's going to be for my Pay-As-You-Go subscription and I can specify the Location, let's say Canada Central for this.

[Video description begins] He clicks a drop-down list box called "Location" and selects an option called "Canada Central". [Video description ends]

And then I'm going to choose Apply.

[Video description begins] He clicks a button called "Apply" and the blade closes. The home page of the Microsoft Azure opens. [Video description ends]

Now, here in the portal, you can search for dashboard at any time up in the bar and I'm going to choose Shared dashboards.

[Video description begins] A blade called "Shared dashboard" opens. It includes a table with four columns and one row. The column headers are Name, Go to dashboard, Location, and Subscription. [Video description ends]

And I can see Dashboard1 listed here, so I'm going to click to open that up.

[Video description begins] He clicks a row entry called "Dashboard1" and the corresponding blade opens. [Video description ends]

However, it says No data for the given query. And if I try to refresh the update, still no joy. Now, that's because it's the Past 24 hours by default, so there's no data to show for that. So let's choose the Past 7 days, I'll click Apply.

[Video description begins] He clicks a drop-down list box called "UTC Time" and selects an option called "Past 7 days". [Video description ends]

And after a moment we should see that we have our result for Heartbeat messages sent from computers. Now at this point, it says This dashboard has unpublished changes. We just changed the time range filter. So I'm going to go ahead and choose Publish changes.

Video description begins] He clicks a button called "Publish changes". [Video description ends]

So this way, we can put the types of resultant log query information that's relevant to us at the time on a dashboard for quick access.
    
                    
Performance Metrics
Using performance metrics and monitoring them in Azure helps you optimize the performance of resources. For things like virtual machines or for web applications. If you're using, for example, Application Insights to track the performance of a web app.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

Let's open up an existing virtual machine here in the portal to view its individual performance metrics. 

[Video description begins] He clicks a virtual machine called "WinSrv2019-1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Now we can do that by scrolling down in the navigation bar or the properties for that VM. All the way down under the Monitoring section where we can click on Metrics.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

Now over here on the right, we can select a metric from the drop-down list. So for example, I'm going to go down, let's say into the P's and choose Percentage CPU. And we can see that the CPU performance metric has been mapped on a chart.

[Video description begins] He clicks a drop-down list box called "Metric" and selects an option called "Percentage CPU". [Video description ends]

We can see the percentages going up on the left. And it's plotted against a timeline going across the bottom from left to right.

[Video description begins] He points to the graph. [Video description ends]

But you can also click the Add metric button to add more than one metric on a single graph. So for example, maybe I'm interested in some other metric like Disk Write Bytes if I'm interested in disk performance.

[Video description begins] He clicks the Metric drop-down list box and selects an option called "Disk Write Bytes". [Video description ends]

So now I've got both items plotted. And I can see by the legend that in this particular case, the Disk Write Bytes is shown in red. So I can track that performance metric separately from my Percentage CPU. If I hover over any of those metrics, it allows me to zoom in on that specific metric. Because it's highlighted and everything else is dimmed on the graph. We can also pin this to a dashboard so that we have an easy convenient way to look at this. Instead of coming in each time we're interested in this and setting it up from scratch. 

[Video description begins] He clicks an option called "Overview" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

Now if I go back to the Overview blade for this VM over on the right, if I scroll down. 

[Video description begins] The content pane includes graphs called "CPU (average)", "Network (total)", "Disk bytes (total)", and "Disk operations/sec (average)". [Video description ends]

I can also see some standard performance metrics, which by default shows me activity for the last hour. But I could choose, let's say last 7 days.

[Video description begins] He selects an option called "7 days". [Video description ends]

Where I can see the CPU usage average, the network traffic total, I can see the disk bytes total, disk operations per second. So we've got a lot of these items that are here automatically by default. But let me search here in the search bar in the portal for monitor.

[Video description begins] He clicks the Monitor option and the Monitor blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Azure Monitor is a centralized tool that allows you to also view performance metrics from here, instead of from an individual resource.

[Video description begins] He selects an option called "Metrics" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

Now from here I have to select a scope.

[Video description begins] He opens the Select a scope blade. it includes tabs called "Browse" and "Recent". The Browse tab is selected. It includes a table with three columns and several rows. The column headers are Scope, Resource type, and Location. [Video description ends]

So this is different because we're not already in a resource like a VM, so it doesn't know what to show us. We have to select a scope. So I can drill down within a subscription and then ultimately within a resource group.

[Video description begins] He points to a subscription called "Pay-As-You-Go" under the Scope column header. [Video description ends]

And I could even select, for example, a Log Analytics workspace.

[Video description begins] He expands a resource group called "defaultresourcegroup-cca". [Video description ends]

So what we could do here is we have the ability because notice that we can expand and collapse our subscriptions. This is a way for you to be able to monitor performance metrics across different subscriptions by adding different scopes. So I'm going to add a Log Analytics workspace here and I'll click Apply.

[Video description begins] He clicks a button called "Apply" and the Select a scope blade closes. [Video description ends]

Now what you have to think about is the data sources attached to that Log Analytics workspace. So the specific virtual machines or storage account logs. Because from there you'll be able to then determine which specific metrics you might be interested in. 

[Video description begins] He clicks a drop-down list box called "Metric" and selects an option called "Disk Writes/sec". [Video description ends]

So for example, if I were to choose, let's say Disk Writes/sec, then I will have some information plotted that is available based on all of the information that's made available to that Log Analytics workspace.


Action Groups and Alert Rules
Instead of going to each and every resource in Azure to monitor the performance, you can configure instead alerts. Alerts can send you notifications through your configuration of what are called action groups. And this way, you are notified when there are issues based on your configured thresholds, instead of you having to go through and peruse all of your Azure resources, which is much more time consuming.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

So let's get started with this. First thing I want to do here is open up an existing Log Analytics workspace.

[Video description begins] He clicks a Log Analytics workspace called "LogAnalytics-2yhz76" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

The reason I'm doing this is because a Log Analytics workspace is a centralized logging hub. Where if I scroll down in the navigation bar, we have a number of different types of data sources that can feed their performance metric and log data into this Log Analytics workspace. And so as a result, we can configure some alerting here within the Log Analytics workspace. So if I scroll down under the Monitoring section in the left-hand navigator, there's Alerts.

[Video description begins] He clicks an option called "Alerts" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

Now these are alerts that will be specific to this Log Analytics workspace. So before I create an alert rule, I'm going to first click on Manage actions.

[Video description begins] He clicks a button called "Manage actions" and the corresponding blade opens. It includes a table with five columns and one row. The column headers are Action group name, Short name, Resource group, Status, and Actions. [Video description ends]

When I do that, I can create a new action group, I can add an action group. There might be some that are here already based on what you might have configured previously, but I'm going to add a new action group.

[Video description begins] He clicks a button called "Add action group" and a blade called "Add action group" opens. [Video description ends]

And this action group is going to be used for notification for administrators. I'm going to call it AdminNotify.

[Video description begins] He enters AdminNotify in a text box called "Action group name". [Video description ends]

The short name will be the same because the Short name field is required. The next thing down below is I'm going to add an action type, you can add multiple action types to this action group. We can see here we can trigger an Automation Runbook or an Azure Function, or we can have an e-mail message sent or in my case I want an SMS text message sent. 

[Video description begins] He clicks a drop-down list box called "Action Type" and selects an option called "Email/SMS/Push/Voice". A blade called "Email/SMS/Push/Voice" opens. [Video description ends]

So I'm going to select that item, that's going to open up a new blade where I'm going to turn on the check mark for SMS and I'm going to specify a phone number.

[Video description begins] The Email/SMS/Push/Voice blade closes. [Video description ends]

Now the next thing I need to do is supply a name, so I'm going to call it TextITDirector.

[Video description begins] He enters TextITDirector in a text box called "Action name". [Video description ends]

And then I'm going to click OK. So I've got my action group configuration created and it now shows up in the list, it says AdminNotify.

[Video description begins] He clicks a button called "OK" and the Add action group blade closes. [Video description ends]

Let's go back into the Alerts for our Log Analytics workspace. And in the Alerts blade or view, I'm going to click New alert rule.

[Video description begins] He clicks a button called "New alert rule" and a blade called "Create rule" opens. [Video description ends]

I want to create an alert to be notified when something happens. In this case, specifically be notified through an SMS text message based on the phone number we've configured. So the resource here in the alert rule is already specified. It's a specific Log Analytics workspace. It could be based on something else. I mean we could have done this, we could have configured an alert for a specific virtual machine for example. But in this case, the resource is the Log Analytics workspace. Now we have to add a condition. So under CONDITION, I will click Add.

[Video description begins] He clicks a button called "Add" and a blade called "Configure signal logic" opens. It includes a table with three columns and several rows. The column headers are Signal name, Signal type, and Monitor service. [Video description ends]

So for the Monitor service in the upper right in that drop-down list, I'm going to choose Platform. I'm going to see platform-specific items and I'm going to filter the list for processor and there we go, % Processor Time.

[Video description begins] He clicks a drop-down list box called "Monitor service" and selects an option called "Platform". [Video description ends]

So I'm going to select that item to configure a condition.

[Video description begins] He clicks a row entry % Processor Time under the Signal name column header. [Video description ends]

I want to look for busy or overburdened processor utilization. Then I'm going to scroll down and I can select a specific dimension if I want to filter or zoom into a specific Computer or an ObjectName and so on.

[Video description begins] He enters 80 in a text box called "Threshold value". [Video description ends]

But I don't, I just want it overall. So what I want to do is essentially I want to be notified when we've got an 80% Greater than, 80% on Average of CPU utilization. Now we can see the frequency of evaluating this type of condition which is going to be every minute. And we can see the Aggregation granularity (Period) is set to 5 minutes. So I'm going to go ahead and click Done.

[Video description begins] He clicks a button called "Done" and the Configure signal logic blade closes. [Video description ends]

So we've now got our condition whenever the CPU processor utilization is above a certain amount. Then we have to go down and apply this to an action group. We don't have an action group selected, but we just created one recently. So I'm going to go ahead and click on Add.

[Video description begins] He clicks a button called "Add" and a blade called "Select an action group to attach to this alert rule" opens. It includes a table with two columns and two rows. The column headers are Action group name and Contain actions. [Video description ends]

There's the AdminNotify action group where we've got 1 SMS text message that will be sent, and I'm going to go ahead and choose Select.

[Video description begins] He selects a checkbox for a row entry called "AdminNotify" under the Action group column header and clicks a button called "Select". The blade closes. [Video description ends]

Then all the way down at the bottom, I have to give this a name. So I'm going to call this alert rule BusyCPU, and I'm going to scroll down further and just click outside of that, and then I can click Create alert rule.

[Video description begins] He enters BusyCPU in a text box called "Alert rule name". [Video description ends]

Now if we have any issues related to that alert rule, they will show up here in the Alerts blade or the Alerts view.

[Video description begins] He clicks a button called "Create alert rule" and the Create rule blade closes. [Video description ends]

Now we can also use our action groups and configure alerts for an individual resource as we've alluded to.

[Video description begins] He clicks the Home link and the home page of the Microsoft Azure opens. [Video description ends]

So let's say I opened up an individual virtual machine here in the portal.

[Video description begins] He clicks the WinSrv2019-1 virtual machine and the corresponding blade opens. [Video description ends]

What I could do is scroll down in its navigation bar on the left, and go down under Monitoring and there's Alerts.

[Video description begins] He clicks the Alerts option in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

When I go into Alerts, it's the same type of interface that we just saw.

[Video description begins] He clicks a button called "Manage alert rules" and a blade called "Rules" opens. [Video description ends]

For example if I click Manage alert rules, I will see any alert rules created for this specific resource of which there are none. Now I could click New alert rule, and I could go through and configure the same type of thing we did.

[Video description begins] He clicks the New alert rule button and the Create rule blade opens. [Video description ends]

The difference being that the resource is a specific VM as opposed to a Log Analytics workspace. So I could go through the same types of motions and add a condition for it. 

[Video description begins] He clicks the Add button and the corresponding blade opens. [Video description ends]

And when it comes to the action groups, if I were to click Add, then I would see my global list of action groups including AdminNotify.


Application Insights
One common use of Microsoft Azure is the deployment of customized web applications. And so developers will always be interested in monitoring how the app is being used and how it's performing. And we can do that by enabling Application Insights.
So here in the portal, to do that, I'm going to create a new web application.
And during the creation I'm going to make sure I enable Application Insights, you can also turn it on after the fact.
So when I go to create a web app, there are some common things I need to fill in.
Including the resource group it will be deployed into, a name for it.
So I'm just going to put in a unique name here, custom name.
And I'm going to use a code-based application, I'll just choose here, let's say ASP.NET.
I'm going to deploy this in Canada Central as a region.
And it's going to create a new application service plan, App Service Plan. That's fine, it determines the underlying horsepower and the pricing tier, I'm going to accept the default for the sizing. I'm going to click Next on monitoring, so Next: Monitoring.
This is where we want to make sure that Application Insights is enabled. And it is, it's set to Yes. And it's going to create a new Application Insights resource. And here, it's pretty much got the name of my web application. That's fine, perfect. 
So I'm going to go ahead and choose Next, and continue all the way through accepting defaults by clicking the Next button.
Finally, I'll click the Create button to create this web app where App Insights is actually enabled now.
We can now see our deployment is complete, I'm going to click Go to resource to go into the web application.
Where in the left-hand navigation bar, if I scroll down under the Settings section, I'll see Application Insights. I'm going to click to open up that blade.
We're over on the right, I can see it's enabled, this is where you can enable or disable it. And I can see that it's connected to my Application Insights resource. So there's a separate resource that's created and there's a link to it here, which I will click on.
In the Overview blade of the App Insights object, so that's what we're looking at now, over on the right. I can see some performance metrics such as Failed requests for the app, Server response time, Server requests, and overall Availability. 
If I click Live Metrics over on the left, after a moment I'll get some new live metrics related to my application. So Incoming Requests, Request Duration, failure rates, and so on. So for developers, this is going to be absolutely crucial so that they might know what to tweak within the application to optimize performance.


Network Performance Monitor
In Azure, the Network Performance Monitor tool allows you to monitor and identify network problems. Whether they're related to firewall issues or maybe they're related to routing configuration errors.
Either way, here in a Log Analytics workspace, when you want to work with the Network Performance Monitor, you have to add it here. Here's what that means. If I scroll down in the left-hand navigation bar for this Log Analytics workspace, I can then click on Workspace summary over on the left.
Now you're not going to see the Network Performance Monitor listed here by default. It's showing up here because I've already added it.  

[Video description begins] A blade called "Marketplace" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

What you would normally do is click the Add button up at the top and you would search for Network Performance Monitor.

[Video description begins] He selects an option called "Network Performance Monitor". [Video description ends]

And you could add it by selecting it from the marketplace, here it is. Network Performance Monitor from Microsoft, but I've already got that done. So I'm going to go back here to the Overview where the Network Performance Monitor panel is listed here.

[Video description begins] He switches to the Overview blade. He clicks an option called "Network Performance Monitor" and a blade called "Network Performance Monitor" opens. [Video description ends]

So, when you first go into that, you're going to be configuring it. So I'm going to go ahead and click on the Configure link up at the top.

[Video description begins] A blade called "Network Performance Monitor Configuration" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And then on the left I'm going to click SETUP.

[Video description begins] He clicks an option called "SETUP" in the navigation pane and the corresponding page opens in the content pane. It includes tabs called "Common Settings", "Performance Monitor", "Service Connectivity Monitor", and "ExpressRoute Monitor". The Common Settings tab is selected. [Video description ends]

This is what you're going to see the first time you come in. It wants you to install the OMS agents, the monitoring agents within your hosts. Now if you added virtual machines to this Log Analytics workspace. They automatically already have the Microsoft monitoring agent extension installed. So it's already done. You can also tweak and configure performance monitoring.

[Video description begins] He selects the Performance Monitor tab. [Video description ends]

You can also tweak and configure service connectivity monitoring such as for Office 365, Microsoft Dynamics.

[Video description begins] He selects the Service Connectivity Monitor tab. [Video description ends]

You can also monitor ExpressRoute dedicated circuit connections.

[Video description begins] He selects the ExpressRoute Monitor tab. [Video description ends]

So over on the left, I'm going to click NETWORKS.

[Video description begins] He clicks an option called "NETWORKS" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

I've already added a couple of networks here. I've got my default network and I can see the subnetwork range for that VNet is 10.0.1.0. But I've also already added VNet9 here. You can click the Add network button and just fill in the details for the network name. And you'll be able to select an unallocated subnet that it's detected down below here. So I've done that and I've called it VNet9. 

[Video description begins] He clicks an option called "SUBNETWORKS" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

IThen if I click on SUBNETWORKS over on the left, 'll see the subnets that stem from those virtual networks.  

[Video description begins] He clicks an option called "NODES" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

And if I click on NODES, I can see here I've got three virtual machines in Azure. They're up and running. The AGENT STATUS shows as being Healthy. Now these three virtual machines in my case are added to this Log Analytics workspace. And as we've mentioned, they automatically get the monitoring agent installed, so they're good and ready to go. 

[Video description begins] He clicks an option called "PERFORMANCE MONITOR" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

And if I click PERFORMANCE MONITOR on the left, I can click add a rule.

[Video description begins] He clicks a drop-down list box called "Select a network" and selects an option called "VNet9". [Video description ends]

Now when I add a rule over on the right, I can select a network, I can select a subnet, and I can choose connectivity to another subnet.

[Video description begins] He clicks a drop-down list box called "Select a subnetwork" and selects an option called "13.0.1.0/24". [Video description ends]

I can add exceptions and I can tell it I want to use ICMP versus TCP to test the connectivity.

[Video description begins] He clicks a drop-down list box called "Select a network" and selects an option called "Default". He clicks a drop-down list box called "Select a subnetwork" and selects an option called "10.0.1.0/24". [Video description ends]

And I can determine when it will generate an alert if the connectivity between those subnets is not available. So the default is to autodetect sudden changes. But we can say if there is a loss, a packet condition loss, greater than or equal to a certain percentage. Or latency, network latency, speed greater than or equal to a certain number of milliseconds. So network latency means network slow down issues. So we can have that trigger. So once we've got that done, then our rule will show up. And if I go back to the overview here for my workspace summary.

[Video description begins] He opens the Overview blade. [Video description ends]

That's when, when you come into Network Performance Monitor, you get to see here that you've got some problems.

[Video description begins] He opens the DefaultWorkspace-048b82ac-4519-403b-ab05-6b4305502109-CCA blade. [Video description ends]

Potentially, hopefully not. So we know that within a Log Analytics workspace. If we scroll down and look at the workspace data sources that virtual machines can serve as a data source.

[Video description begins] He clicks an option called "Virtual machines" and the corresponding page opens in the content pane. [Video description ends]

And I've got a couple of them here, WinSrv2019-1, -2 and 3, they're added to this workspace. Of course, we can just click on it to open it up and connect or disconnect it.

[Video description begins] He clicks a Virtual machine called "WinSrv2019-1" and the corresponding blade opens. [Video description ends]

But once you actually connect a virtual machine to a workspace, the Microsoft monitoring agent is automatically installed in the VM.

[Video description begins] He closes the blade. [Video description ends]

And that way the VM can report back to this Log Analytics workspace. So let's just flip over and take a look at one of those virtual machines.

[Video description begins] He opens a new Microsoft Azure web portal. The Virtual machines blade is open. He clicks the WinSrv2019-1 virtual machine and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

If I actually click to open it up, and if we take a look at the virtual machine extensions.

[Video description begins] He clicks an option called 'Extensions" in the navigation pane and the corresponding page opens in the content pane. it includes a table with three columns and three rows. The column headers are Name, Type, and Version. [Video description ends]

What will have been added because it won't have been there before is the Microsoft Azure monitoring dependency agent. That gets installed when you connect or link that VM to a workspace. Now in the case of Network Performance Monitoring, that's going to be important.

[Video description begins] He switches back to the DefaultWorkspace-048b82ac-4519-403b-ab05-6b4305502109-CCA | Virtual machines blade in the previous Microsoft Azure web portal. [Video description ends]

If we take a look at the result of our configuration. If we go under Workspace summary here in the Log Analytics workspace.

[Video description begins] He clicks the Workspace summary option in the navigation pane and the Overview blade opens. [Video description ends]

We could see that now that it's had time for those servers to start reporting back information about network connectivity. We're going to start seeing some potential alerts. I can see there's an alert here. There's 1 of 1 subnetwork link that is considered unhealthy. 

[Video description begins] He clicks the Network Performance Monitor option and the Network Performance Monitor blade opens. [Video description ends]

So if I click on that panel to open it up, then I can read more details about exactly what the issue is. So we can see that that health event was generated by a rule called Rule1. And if I kind of click on that rule to see what it's about, we've got a 100% transmission loss.

[Video description begins] He clicks a link called "Rule 1" and a blade called "Affected Subnetworks Link" opens. [Video description ends]

And we can see it's between subnets within the rule that were specified. And in this case, those subnets are the 10.0.1.0 subnet, and the 13.0.1.0 subnet. There's a link on the right that says View affected node links. So I could also click on that to get even further detail.

[Video description begins] A blade called "Node Links" opens. [Video description ends]

And from here I can see the node links where on the left I have the name of a virtual machine. And it's pointing to another one listed to the right of it. And I can see the IP address interfaces, and I can see in this case we have a 100% packet loss. Now, that often might be due to routing problems between subnets and so on. But this is one of the overall purposes of using Network Performance Monitor or NPM in Azure. To identify these types of network connectivity issues.
Network Watcher

[Video description begins] Topic title: Network Watcher. The presenter is Dan Lachance. [Video description ends]

Before you can troubleshoot network connectivity issues in Azure, you need to be aware of the network configuration. You've got to know what's there. How many VNets, subnets, VNet peering is enabled and so on.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

So here in the portal, I'm going to search for network and I'm going to select Network Watcher from the list.

[Video description begins] A blade called "Network Watcher" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

One of the things I can do here is click on Topology over in the left-hand navigation bar to open up the Topology blade.

[Video description begins] He clicks an option called "Topology" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

Now on the right, it's got my subscription automatically selected from the Resource Group drop-down list. I'm going to choose a resource group I'm interested in here.

[Video description begins] He clicks a drop-down list box called "Resource group" and selects an option called "Rg1". [Video description ends]

And I can also select a VNet to further filter my topology map.

[Video description begins] He clicks a drop-down list box called "Virtual Network" and selects an option called "VNet1". The Topology map is displayed. [Video description ends]

It draws a topology map in a hierarchy, where at the top, we have our virtual network. In this case, it's called VNet1 under which we then see the subnets. And this is part of knowing what you have. If you're called in to troubleshoot something and you didn't set it up, it's helpful to know what's there. So we can see we have a number of subnets, including a GatewaySubnet, an AzureFireWallSubnet, an AzureBastionSubnet. And under each subnet we can then see the associated network interfaces and ultimately the public IP addresses associated with those interfaces and of course the virtual machines. So this is one of the things we can do with the Network Watcher tool, is learn a bit about our topology in the Azure environment. Over on the left, I can also click on Connection monitor.

[Video description begins] He clicks an option called "Connection monitor" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

So I can click the Add button over on the right to add a connection monitor.

[Video description begins] A blade called "Add connection monitor" opens. [Video description ends]

I'm going to call this Monitor1.

[Video description begins] He enters Monitor1 in a text box called "Name". [Video description ends]

And I'm going to select a virtual machine here that would be a virtual machine that is the source I want to monitor from and then I want to select a destination virtual machine.

[Video description begins] He clicks a drop-down list box called "Virtual machine" and selects an option called "WinSrv2019-1". [Video description ends]

I can also specify a port number on which I want that connectivity to be checked.

[Video description begins] He clicks a drop-down list box called "Virtual machine" and selects an option called "WinSrv2019-2". [Video description ends]

So I'll put in Port 80 and I'll just click Add to add that connection monitor.

[Video description begins] He enters 80 in a text box called "Port". [Video description ends]

And we can now see the monitor has been added to the list and under the Status column it says it is currently running.

[Video description begins] He clicks a button called "Add" and the Add connection monitor blade closes. [Video description ends]

Now we can actually click on that connection monitor configuration and that'll open up another panel down below where we can scroll down and see some details over the last hour, six hour all the way up to the last 30 days. And down below according to the legend, we can see that we've got percentage of probes that have failed is 100. That's not good. Well, that could be due to a number of reasons. Perhaps the target virtual machine isn't reachable due to routing problems, but if they're in the same subnet, it's not a routing issue. Or it could be a network security group preventing connectivity to a port. Or perhaps Port 80 simply isn't in a listening state on that machine, there's no web server. So there are plenty of reasons that could happen, but we can identify that this is happening here using Network Watcher. We can also run a Packet capture as we can see over here on the left, we can view our Effective security rules, network security group security rule.

[Video description begins] He clicks an option called "Effective security rules" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

So from here we can select the subscription, a resource group and ultimately a virtual machine.

[Video description begins] He clicks a drop-down list box called "Resource group" and selects an option called "Rg1". [Video description ends]

So when I do that I can see a network interface for that virtual machine and the association with the network security group here at the subnet level that says as opposed to linked directly to the network interface, and we can see any rules that might be applicable.

[Video description begins] He clicks a drop-down list box called "Virtual machine" and selects an option called "WinSrv2019-1". [Video description ends]

We can also click on Packet capture on the left and click the Add button to add a packet capturing session.

[Video description begins] He clicks an option called "Packet capture" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

Sometimes you'll create a packet capturing session because you want to be able to actually examine the detailed specific network traffic that is occurring on a network.

[Video description begins] A blade called "Add packet capture" opens. [Video description ends]

Now specifically what you're going to do is to choose the target virtual machine that you're interested in and you can select to store the resultant packet file name, the packet capture file name in a storage account. Or you can have it stored in a file within the virtual machine in question, the target virtual machine that we have to select above or you can have it stored in both places. The packet capture file will use a .cap format. So you can open it up with standard tools like Wireshark.

                    
Azure Subscription Overview
There is a relationship between Azure AD tenants and Azure subscriptions. 
Pictured in our diagram on the left, we see our Azure AD tenant. Azure AD or Azure Active Directory is a centralized directory service in the cloud. And it allows us to create user accounts for authentication, organize them into groups, assign permissions. We can register devices in Azure AD, so users can sign in on those devices with their Azure AD credentials. That's essentially what it is. It's an identity provider. And we can associate a subscription with our Azure AD tenant, listed here as Subscription 1.

A subscription is really a way that we get features that allow us, for example, to deploy resources in Azure. It's also used for billing purposes. But what you can do is you can add multiple subscriptions to your Azure AD tenant. However, the opposite is not true. You can't have a given subscription used by multiple AD tenants. So we see here that subscriptions are related to billing.

[Video description begins] Azure Subscription Limits. [Video description ends]

Now there are some limits to what you can do within an Azure subscription, such as how many resources can be deployed and so on. As an example, our first item here is the number of subscriptions per Azure AD tenant. This is one of those items where there is no limit. But there is a number of resource tags that can be specified to an Azure resource, and it maxes out at a value of 50. The maximum number of group owners maxes out at 100. The maximum number of storage accounts per region maxes out at 250. Now, this is only to list a tiny portion of some of these limits. There are many other ones that are published online, clearly, in the Microsoft Azure documentation.

[Video description begins] Azure Subscriptions. [Video description ends]

So we have the option with our subscription to also increase any of these limits should they be a little bit too constraining. You can do this once you sign into the Azure portal by creating a customer support request. Now limits for some things, such as the number of vCPUs, virtual CPUs available for a given virtual machine instance, those limits are quoted per Azure region. Now, you also have to bear in mind that if you're using an Azure free trial subscription, that you won't have the option of creating a customer support request, at least not in it succeeding in increasing any of those limits.

The other thing to think about is that when it comes Azure subscriptions, don't forget about how it is related to both the Azure AD tenant and also your Azure account in the first place. So you can have your Azure account in which you build your Azure AD tenants, and of course, you can have multiple subscriptions. Billing is done separately for each of your subscriptions. And if you do have a free try, you can actually convert it to a paid subscription.

[Video description begins] Azure Subscription Types. [Video description ends]

Now there are a number of different types of Azure subscriptions, such as pay-as-you-go, where all of your resource usage is tracked and you pay based on what you use. But then depending on the type of support you need, will determine if you select some of the other types of subscriptions, like Professional Direct support or Developer support. Developer support would allow you to get support but only during business hours, not 24/7. Then we also have Standard support. So, if you do need full support, 24/7, then you would look at choosing the appropriate type of Azure subscription, such as Professional Direct.


Azure Subscriptions and the Portal
You can view your Azure subscriptions in the Azure portal. 

[Video description begins] The Microsoft Azure portal is open. It is divided into two parts. The first part includes a search box and a navigator button and the second part is a content pane. [Video description ends]

You can view your Azure subscriptions in the Azure portal. One way to do this is by searching for subscriptions in the search bar at the top center which I will do.

[Video description begins] A blade called "Subscriptions" opens. It includes a button labeled "Add" and a table with several columns and one row. The column headers include "Subscription name", "Subscription ID", and "Current cost". Under the blade name, there is text: Quick24x7. [Video description ends]

Now bear in mind that when you search up subscriptions you will see any subscriptions associated with your current Azure AD tenant, which is shown here as Quick24x7. So I can see I have a Pay-As-You-Go active subscription. I can even see the Current cost.

[Video description begins] He points to the following row entry, which includes: Subscription name: Pay-As-You-Go and Current cost: CA$1.48. [Video description ends]

Now in the upper right, if I click on my sign in account information area and click Switch directory and, if I choose some other Azure AD tenant, let's say EarthFarm in this example.

[Video description begins] A blade called "Directory + subscription" opens. It includes a section called 'Switch directory" under which there is a list of all the directories. He selects the following directory: EarthFarm. [Video description ends]

Then when I go to take a look at subscriptions, I can expect to see something different potentially.

[Video description begins] The Microsoft Azure portal gets refreshed. In a section called "Azure services" he selects the "Subscriptions" option. The "Subscriptions" blade opens. There are no row entries in the table. [Video description ends]

So because I've visited subscriptions recently, I can just click it from Azure services, of course, I could once again search for it in the top center. Either way, I want to look at the subscriptions for this different Azure AD tenant. Notice it says, "You don't have any subscriptions". So at this point, we have the option of clicking Add where we'll be presented with a list of subscription options.

[Video description begins] He clicks the "Add" button. The login page opens in a new tab. [Video description ends]

So at this point, I'm just going to authenticate so I can get to that screen. So now I get the option to SELECT AN OFFER.

[Video description begins] A page called "Add subscription" opens. It includes a list of offers. [Video description ends]

If I want to add a Pay-As-You-Go subscription or Pay-As-You-Go Dev/Test, Developer support, Professional Direct support, and Standard support where I can see some of the details about these. So we have some options here. And, if I were to choose one of these, it would then continue on to the point where I have to make sure I add a payment method, and so on. But I'm going to close out of that. And I'm going to switch back to my first initial directory that in this case would be the Quick24x7 Azure AD tenant where I know, I have an active subscription.

[Video description begins] He clicks the account details section and then clicks the "Switch directory" option. The "Directory + subscription" blade opens. He selects the following directory: Quick24x7. The Microsoft Azure portal gets refreshed. [Video description ends]

And once again, I'm going to go look in the subscriptions associated with that Azure AD tenant. Now I'm going to click directly on that existing subscription.

[Video description begins] He selects the "Subscriptions" option. The "Subscriptions" blade opens. There is one row entry in the table. [Video description ends]

Now I'm going to click directly on that existing subscription. 

[Video description begins] He clicks the row entry, which includes: Subscription name: Pay-As-You-Go and Current cost: CA$1.48. A blade called "Pay-As-You-Go" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

Because when you do that, it opens up a plethora of options in the navigation bar on the left. For example, we can go to Cost analysis to analyze costs, to see exactly for example, where the lion's share of our charges are coming from.

[Video description begins] He selects an option called "Cost analysis" in the navigation pane and its corresponding page opens in the content pane. [Video description ends]

We could click on Budgets, so we can configure alert notifications when our costs reach a certain point.

[Video description begins] He selects an option called "Budgets" in the navigation pane and its corresponding page opens in the content pane. [Video description ends]

We can even go through and see our Invoices over on the left under the Billing section. But at the same time, we also have some other things that we can do, when I go back to the Overview part of this.

[Video description begins] He selects the "Overview" option in the navigation pane and its corresponding page opens in the content pane. It includes the following buttons: Manage, Cancel subscription, Rename, and Change directory. [Video description ends]

We have some buttons across the top. I can cancel the subscription. I can Rename it, so, if I want to rename it from Pay-As-You-Go to something different, I can do that. I can Change directory. That means I can associate this subscription with a different Azure AD tenant. So I've got a number of options. So, I can even click on Manage to open up a new browser window where I can further manage my Azure subscription. So we have a summary for our Pay-As-You-Go subscription, where we're looking currently at the OVERVIEW.

[Video description begins] The following page opens in a new tab: Summary for Pay-As-You-Go. It includes the following tabs: OVERVIEW and BILLING HISTORY. The OVERVIEW tab is selected. [Video description ends]

And we can see a lot of options available on the right to Manage payment methods or to Download usage details for the subscription or to change the subscription address information. Or I want to switch to a different type of subscription offer. Again, I have some other options here such as canceling the subscription and so on.


Azure Subscriptions and the CLI
You can use the Azure CLI to learn about Azure subscriptions and also to determine which subscription is active. To get started here in the Azure portal, I'm going to launch the Cloud Shell.

[Video description begins] The Microsoft Azure portal is open. [Video description ends]

Now in the Cloud Shell, I'm going to start by running az account list.

[Video description begins] He clicks a button labeled "Cloud Shell" in the first part of the screen. A PowerShell window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

And when I press Enter, it'll return some details.

[Video description begins] He executes the following command: az account list. The output displays details of the azure account. The details include cloud name, id, and tenant id. The prompt does not change. [Video description ends]

So we can see the name of the cloud, AzureCloud, as opposed to Azure Cloud for Government or anything like that. And we can also see the id. Now, it doesn't say subscription ID, but this is the id of our current Azure subscription. We can also see our Azure AD tenant ID. Let's examine the subscription ID for a second by jumping into the portal to take a look at that. So, notice here it starts with 048b and ends with 2109. So let's just minimize the shell here. Let's go in to Subscriptions, let's see what we've got attached to our current AZ tenant.

[Video description begins] In the Microsoft Azure portal, the "Subscriptions" blade opens. The table has one row entry. He points to the following row entry, which includes: Subscription name: Pay-As-You-Go and Current cost: CA$1.48. [Video description ends]

Now it should be a Pay-As-You-Go subscription. And notice the Subscription ID indeed starts with 048b and ends with 2109. So we can learn a bit of that information from the az account list command in the CLI.

[Video description begins] He points to the entry under the "Subscription ID" column header. He switches back to the PowerShell window. [Video description ends]

Let's clear the screen. Let's also run az account set --subscription. And here, I'm going to put in the name of it which is Pay-As-You-Go, each word separated by a dash. Now in my case, it doesn't really matter that I do that.

[Video description begins] He executes the following command: cls. No output returns and the prompt does not change. He executes the following command: az account set --subscription "Pay-As-You-Go". No output returns and the prompt does not change. [Video description ends]

Because if we go back and take a look, we've only got a single subscription here associated with our Azure AD tenant. Which is shown here by name in the form of Quick24x7.

[Video description begins] He switches back to the Microsoft Azure portal. He points to the following row entry, which includes: Subscription name: Pay-As-You-Go. He switches back to the PowerShell window. [Video description ends]

But when you have multiple subscriptions, this can be an important command. Essentially you're setting the context to that subscription. And so following commands after you do that will run in the context of that set or selected subscription. The other thing to bear in mind is that you can also, instead of setting the subscription when you have multiple subscriptions, you can also do it per command. What I mean by that as an example, is let's say we were going to use az vm create to create new VM. And normally you would specify things like --resource-group and then Rg1, let's say.

And then maybe the name, let's call it Linux1, and then maybe the --image would be based on something Ubuntu. But the key here is that we can also use the --subscription command line parameter. And so, for this individual single command, you can say, well, I want this tied to the Pay-As-You-Go, just type that in, subscription. So you can do that if you know you have to work with a number of resources and different subscriptions. You might choose to just do it at the command-line instead of keeping on setting it as up above. It really depends on what you want to do and how many commands you have to issue. But either way, it's important to have this knowledge if you're going to be working with Azure subscriptions through the CLI.


Azure Subscriptions and PowerShell
When you're working in PowerShell, you might be working with an Azure AD tenant that is associated with multiple subscriptions. And, so you can control the subscription that is going to be used as you issue PowerShell cmdlets. Such as the deployment of resources like virtual machines. To get started here in the portal, I'm going to launch the Cloud Shell, and I'm in PowerShell here.
And I go to start by running get-command. And I'll put in asterisk subscription. So basically, I'm trying to discover which cmdlets are available that relate to subscriptions.
And there are bunch of them as you can see. For example, Get-AzSubscription. Okay, so if we were to do that, get-azsubscription, when we press Enter, we get some returned information.
We can see that we have a Pay-As-You-Go subscription, which is currently active and being used. So, if we start deploying virtual machines and storage accounts and so on, it's going to be tied to this currently active subscription. We can see the subscription ID. We can also see the Azure Active Directory tenant with which the subscription is associated.
Now, when you have multiple subscriptions available for your Azure AD tenant, you may want to be able to switch between them. And you can do that using select-azurermsubscription. So for example, in quotes here I could do it by name, pay-as-you-go, close the quotes.
What this means is, I'm setting that as the current context or active subscription. Any commands that follow will be tied to it. Such as deploying virtual machines, storage accounts and so on. And I can verify that, that's the current context by running get-azurermcontext.
And we can see it returns that we are using our Pay-As-You-Go subscription. And of course, we can see the subscription identifier being listed there as well along with our Azure AD tenant ID. So now that we've done that, any PowerShell cmdlets that I run from this point forward in this session will be applied to that subscription.


Management Group Overview
Azure management groups are really all about centralized governance. Now we can apply this to multiple subscriptions, it allows us to organize subscriptions within a management group. Think if it as a hierarchy. Because at the top, you have your tenant root group. Under which you can then create multiple management groups and organize your subscriptions accordingly within them. Now you would organize them for policy and compliance reasons.

For example, you might have a policy that requires SQL database encryption. And you want to check all SQL database instances in multiple subscriptions. So, you might organize those subscriptions into a management group and then assign that policy to the management group. You can have up to six levels deep of subordinate management groups. If you so need that change. So down here, we see we have the management group hierarchy.

[Video description begins] Management Group Hierarchy. A diagram is displayed. [Video description ends]

At the top you have your tenant Root Management Group, by default. And underneath it on the left we have Management Group 1 where we could organize subscriptions. We see here Subscription 1 and Subscription 2. But then on the right we have another management group, Management Group 2, under which we have a different subscription, Subscription 3. So we can apply or assign policies to Management Group 1.

And whatever that policy says should happen, such as checking for SQL database encryption, will flow down and be inherited. And be applied to all SQL database deployments in Subscription 1, and Subscription 2 in all resource groups. And the same thing would be true, if we applied a policy to Management Group 2, it would only apply to, in this case, Subscription 3. Now, we've really only got one level in our hierarchy here of management groups that we've created. Bear in mind, you could have up to six. So, the way that this works is we would add subscriptions as per usualto our Azure account and associate them with Azure AD tenants.

[Video description begins] Azure Management Groups. [Video description ends]

We can then create one or more management groups. Then we can move subscriptions under the appropriate management groups. And then we can apply our governance options, in other words, assign policies to management groups. Which in turn means that the subscriptions in the management groups will inherit that policy assignment.


Configuring a Management Group
If your organization's use of Azure includes the use of multiple Azure subscriptions it can be a little bit cumbersome to apply permissions at the policy level to resources in multiple subscriptions.
For example, if you want to limit something such as virtual machine types that can be deployed in certain regions. Instead of doing that per subscription, if you have the same requirements for the subscriptions. You might organize those subscriptions first into a management group and apply that policy to the management group. It'll flow down and be inherited by all of the subscriptions. So it works well in that sense. So let's go ahead and see how that works in the portal. I'm going to go ahead and search the portal for management and I'll choose Management groups.
Now you always will have your default Tenant Root Group under which subscriptions exist. Here I can see my Pay-As-You-Go subscription.
But you can organize a hierarchy, kind of like how you would organize a hierarchy of organizational units or a use in on-premises Active Directory, to organize resources. In this case, we would be creating management groups to organize our subscriptions. Now even though, I only have a single subscription, I'm still going to go through create a management group and then move that subscription into that management group part of the hierarchy. The first thing I'm going to do. I'm going to click Add management group in the upper left.
I need an ID for it. I'm going to call it mgmt1111 and I'm going to call this MgmtGroup1, then I'm going to click Save.
Now, if you've got multiple subscriptions, let's say tied to a particular business unit, you might name your management group in relation to that business unit name. 
Or if it's for particular project, maybe name the management group the name of the project or something along those lines. After a moment, we'll see that our management group down below is listed.

[Video description begins] A new row entry gets added to the table, which includes: Name: MgmtGroup1. [Video description ends]

And if I click on it and open it up, there's nothing in it because we haven't moved any subscriptions there yet. So I'm going to go back to my Tenant Root Group where I see my subscription

[Video description begins] He clicks the row entry under the Name column: MgmtGroup1. A section called "MgmtGroup1" appears in place of the "Tenant Root group" section. [Video description ends]

Pay-As-You-Go. And over on the far right, I'm going to click the more context menu, so the three dots and I'm going to choose Move. It's as simple as choosing the target management group that you want to move the subscription under.

[Video description begins] A blade called "Move" opens. It includes a drop-down list box labeled "New parent management group" and a button labeled "Save". [Video description ends]

Well, there's only one there MgmtGroup1, that we've just created a moment to go.

[Video description begins] He selects the following option in the "New parent management group" drop-down list box: MgmtGroup1. [Video description ends]

So I'm going to select that and choose Save.

[Video description begins] The table now has only one row entry, which includes: Name: MgmtGroup1. [Video description ends]

In after a moment the subscription disappears here from the Tenant Root Group and if I drilled on into MgmtGroup1, well we're going to see that our subscription is now listed there.

[Video description begins] He clicks the row entry, which includes:Name: MgmtGroup1. The section "MgmtGroup1" section appears in place of the "Tenant Root group" section. It includes a table with four columns and one row. The row entry includes: Name: Pay-As-You-Go. [Video description ends]

So the reason we would do this is, so that we can essentially apply centralized governance across multiple subscriptions in Azure. Let's see how that would work. So let me search for policy up here in the search bar. I'll choose Policy.

[Video description begins] A blade called "Policy" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

So what I'm going to do is take a look at assigning a policy to a management group. So I'm going to click Assignments over on the left. Any assignments that we already have will be shown.

[Video description begins] He selects an option called "Assignments" in the navigation pane and its corresponding page opens in the content pane. It includes a button labeled "Assign policy". [Video description ends]

I'm going to click the Assign policy button. Now the first thing we'd have to deal with is the Scope.

[Video description begins] A blade called "Assign policy" opens. It is divided into two sections. The first section includes steps: Basics, Parameters, Remediation, and Review + Create. The "Basics" step is selected and its corresponding page is open in the second section. It includes a "Policy definition" text box and a "Launch policy definition picker" button adjacent to it. It also includes a "Scope" text box. [Video description ends]

Where do you want this policy assigned? Well, let's go down and choose a policy definition, so we at least have something to think about here. Maybe I'll search for encrypt.

[Video description begins] He clicks the "Launch policy definition picker" button. A blade called "Available definitions" opens. It includes a search box and a button labeled "Select". [Video description ends]

And I want to make sure a disk encryption is applied on virtual machines. 

[Video description begins] He types "encrypt" in the search box and a list of 13 policy definitions appears. [Video description ends]

Now if your organization has six policies, well, then you potentially would have to configure this six times for each policy scope. The scope would be the subscription level. But here we can go one level above that, because subscriptions can be organized into management groups. So I'm going to select that policy.

[Video description begins] He selects the following policy from the list: Disk encryption should be applied on virtual machines. He then clicks the "Select" button. The "Available Definitions" blade closes. [Video description ends]

 And up above, notice it automatically assumes that we want to apply this policy definition and scour VMS looking for disk encryption within only the Pay-As-You-Go subscription.

[Video description begins] The following text gets populated in the "Scope" text box. Adjacent to this there is a "Launch scope selector" button. He clicks the button and a "Scope" blade opens. It includes two drop-down list boxes labeled "Subscription" and "Resource Group" and a button labeled "Select". It also includes a "Management Group" section under which there is an option called "MgmtGroup1". [Video description ends]

But I'm going to click the scope selector button over on the right. Now I could choose a different subscription, if I had others or even on a Resource group within the subscription where I want this policy applied, but that's not what we're talking about here. We're talking about management groups which we see at the top. So here's MgmtGroup1, I can select it, and then choose Select. And we are now applying this policy definition to scour all subscriptions under MgmtGroup1, looking for machines where disk encryption has not been applied. They'll then show up in compliance reports.


Azure Cost Analysis
One important aspect of cloud computing is being able to manage costs, even though it's often pay-as-you-go, you get charged for your resource consumption. You want to make sure that you are tracking it and identifying where most of those charges are coming from. So we can do that by looking at Azure cost analysis.
To get started here in the portal, I'm going to go into Subscriptions, because billing occurs at the subscription level.
So I've got a Pay-As-You-Go subscription listed here, I can see the Current cost, and I can see that it's Active.

[Video description begins] He points to the following row entry, which includes: Subscription name: Pay-As-You-Go, Current cost: CA$1.48, and Status: Active. [Video description ends]

So I'm going to click directly on the subscription.
Because when I do that, I get this new navigation bar on the left, and one of the things I see is Cost analysis, which is precisely what I want to do right now.
Knowing that I have a specific dollar amount based on my Azure usage is not enough. I want to know how it's broken down. So here for example, we can see it's Canadian dollars. It's only $1 and 48 cents. And we can see that it's charted here. I'll just scroll little bit over to the right according to days of the month as we can see, and it looks like the usage has been increasing since about March 4th. Now, if I scroll down a little bit, we can also see the Service name breakdown. Well, where is that money being spent? Is it virtual machines? Is it storage? Is it databases? Well, we can see by looking under Service name at this graph, that we've got the bulk of it coming from SQL database.
Little bit coming from virtual machines and storage. And we can also then see it's broken down here by Location, well, which regions. We might have different Azure administrators using our Azure account to deploy resources in different Azure regions. So I can see the cost here per region that looks like all of the cost is stemming from the US East region. Now, depending on how you use resource groups to organize related Azure resources it will determine how useful it is to look at the cost per resource group.
Often many organizations will create resource groups for specific apps that might have multiple components like a web server type of app. And it might have some custom code. It might have a back-end database. All of those resources might be organised in one resource group and then you can see the charges per resource group. So basically, in that example, you'd be able to see the charges per web application. Or you might have resource groups for different departments, if that make sense in your organization or different projects, and then deploy resources into them accordingly. And again, you'll then be able to see the cost breakdown per resource group. It really depends on what your requirements are. And you can also click the Export button to export this information as a PNG type of graphic file or as Excel data or as a CSV file.
And then you can download the charts. You can also schedule the export of this information on a periodic basis maybe to a storage account for business analysts that might require this type of cost breakdown.
Now, we can also get a little more granular at the top by clicking Cost by resource.
Now, why is this useful? Because it's showing us the individual Azure resources, like specific SQL servers that were deployed specific virtual machines, disks for virtual machines, storage accounts, and so on.
And we have a cost associated with it over in the right hand column.
So it's just a way to really drill right down to the specific deployed resources that are incurring costs in your Azure account through your subscription.


Azure Budgets
While it's important to analyze costs and pore over the numbers, it's also equally important to save time and get notified when costs on a monthly basis exceed a certain value. And that's where Azure budgets come in as being useful.
So I'm going to click here in the portal on Subscriptions. I see, I have a Pay-As-You-Go subscription, which I'm going to click on.
Now we know that we can click on Cost analysis, and of course, that is very important.
But we're talking here about getting notified when a certain threshold value is exceeded. So for that, we're going to go to Budgets over here on the left.
Now we don't have any budget shown on the right.
So I'm going to go ahead and click Add. The first thing you have to think about is the scope to which you want the budget applied. What do you want to look at costs for, do you want to look at it for your entire subscription?
I can click Change scope and from here, I could switch to a different directory.

[Video description begins] A blade called "Select scope" opens. It includes a button labeled "Cancel" and a list of items. The list contains the following node: Quick24x7 (root). [Video description ends]

Right now, I'm using the Quick24x7 Azure AD tenant. And we could also drill down, for example, under our root management group for our tenant. So I can click that.

[Video description begins] He clicks the node "Quick24x7 (root)" and a subnode called "MgmtGroup1" appears. [Video description ends]

I can then click down on a management group, perhaps that's the level where I want to apply my budget.

[Video description begins] He clicks the subnode "MgmtGroup1" and a subnode called "Pay-As-You-Go" appears. [Video description ends]

But I can also click on the management group and then go down under my subscription, and even go down into a specific resource group.

[Video description begins] He clicks the subnode "Pay-As-You-Go" and several subnodes appear. [Video description ends]

So you have all of these scopes that you can apply your budget to. I'm just going to Cancel out of there. We're going to leave it directly on our Pay-As-You-Go subscription.

[Video description begins] Two drop-down list boxes appear adjacent to the "Add filter" button. [Video description ends]

I could also click Add filter, because maybe what I want to do is filter by something specific. So for example, I could specify that I want to look at a type of service I want to filter on. Or maybe a ResourceLocation, so we can choose a specific region if we wanted to filter on that.

[Video description begins] In the first drop-down list box he selects the "ResourceLocation" option. [Video description ends]

However, I'm going to click the x to remove the filter, I don't want to apply that.

[Video description begins] He removes the filters. [Video description ends]

Next thing I need to do here is, I need to specify a unique name for the budget.

[Video description begins] The "Create budget" page also includes a section called "BUDGET DETAILS". This section includes a text box labeled "Name", a drop-down list box labeled "Reset period", and another text box labeled "Amount ($)". [Video description ends]

So I'm going to call this Budget1.

[Video description begins] He types the following text in the "name" text box: Budget1. [Video description ends]

Now the Reset period will be on a monthly basis, but I could change that to whatever time period makes the most sense for me. I could set an Expiration date.

[Video description begins] The following option is preselected in the "Reset period" drop-down list box: Billing month. [Video description ends]

I'm going to leave those default settings, and I'm going to set the budget amount. For example, I want to know once we're exceeding $500 a month. Now to help along with this, down below, I can see last month's costs. And I can see the past six months' cost, and the maximum monthly forecast cost. So based on those small values, perhaps 500 is a little large. So maybe for example, if we get above a 100, which might be indicative of abnormal cloud usage in our particular case, then we can put that value in.

[Video description begins] He types the following text in the "Amount ($)" text box: 100. [Video description ends]

Now having done that, I'm going to scroll down and click on the Next> button. Now up at the top, if I scroll back up, we can set alerts.

[Video description begins] A page called "Set alerts" opens. It includes a table with several columns and one row entry. The column headers include "% of budget" and "Action group". Under the "% of budget" column header the row entry is a text box. Under the "Action group" column header the row entry is a drop-down list box. Under the table there is a link called "Manage action group". [Video description ends]

So when we get to a percentage of that value, let's see when we get to 80% of our $100, then we want to have something happen.

[Video description begins] He types the following text in the row entry under the "% of budget" column header: 80. [Video description ends]

So we can work with an Action group. Now the Action group allows me to specify things like, what you want to occur. Now, do you want to trigger some kind of code, or do you want to trigger some kind of a notification? And I even have a Manage action group option here. If I click on that, it'll take me in where I can see what I could do, what could be triggered when 80% of our budget is reached.

[Video description begins] A blade called "Manage actions" opens. It includes a button labeled "Add action group" and a table with several columns and one row. The column headers include "Action group name" and "Short name". [Video description ends]

So I could click Add action group, maybe what I want to do send something like an SMS text message.

[Video description begins] A blade called "Add action group" opens. It includes two text boxes labeled "Action group name" and "Short name" and a button labeled "OK". [Video description ends]

So I'm going to call this AG1 for action group 1. Same thing for the Short name, which is a required field, as indicated by the red asterisk.

[Video description begins] He types the following text in the "Action group name" and "Short name" text boxes: AG1. [Video description ends]

And down below, what I want to do is Select an action type.

[Video description begins] The blade also includes a table with several columns and one row. The column headers include "Action name" and "Action type". The row entry in the "Action name" column is a text box. The row entry in the "Action type" column is a drop-down list box. [Video description ends]

In this case, it's going to be Email/SMS/Push/Voice.

[Video description begins] He selects the following option in the drop-down list box in the "Action type" column: Email/SMS/Push/Voice. A blade called "Email/SMS/Push/Voice" opens. It includes an "OK" button and a radio button labeled "SMS". He selects the radio button and the following text boxes get enabled: Country code and Phone number. [Video description ends]

And let's say that I want to send SMS text notifications. So it's country code, and I could just fill in the number. After I've done that, I would then go down and click OK. Now, of course, it wants me to fill in a valid phone number. So we'll just change it into something else. All 5s in a phone number is actually reserved and used for works of fiction like movies and television shows. So I'm just going to go ahead and leave that as it is for SMS. So we're just basically adding this specific type of notification. And I'm just going to call this TextMsgNotify. This is in my action group AG1, and I'll click OK.

[Video description begins] He types the following text in the text box in the "Action name" column: TextMsgNotify. [Video description ends]

And essentially, we want to be able to use that within our budget.

[Video description begins] The table on the "Manage actions" blade now has two row entries. [Video description ends]

So it's showing up in the list. I'm just going to go ahead and select it to get back to where we were in configuring our notifications.

[Video description begins] He clicks the new row entry, which includes: Action group name: AG1. A blade called "AG1" opens. [Video description ends]

So I'm just going to scroll back here, we've got AG1, and let's just go back here. So that's where we want this to be showing up.

[Video description begins] He navigates back to the "Set alerts" page in the "Pay-As-You-Go" blade. He points to the drop-down list box in the "Action group" column of the table. He then selects the "AG1" option in the drop-down list box. [Video description ends]

And after a moment, you might have to go to the previous screen and back, you'll see the group. So here it is, AG1. Down below, I can also specify, of course, the recipients' email. So I'm just going to scroll over to the right so I can see my scroll bar, there it is.
So maybe, I've got a group called admins@quick24x7.com, and I want them to receive notifications, so in addition to our SMS text messaging. Okay, so having done that, I'm just good to go down and create the budget.
And there you have it, the budget creation succeeded, we now have our budget called Budget1.
And we can expect to be notified when we get to 80% of our budgeted value in the currency specified for the subscription, in this case, CA$100.00.


Azure Invoices
While the use of cloud computing can mean less capital expenditures for IT services. Such as, not having to acquire a lot of on-premises physical computing hardware. We still have to be able to track charges in the cost on a per-use basis by reviewing invoices.
So to get started here in the Azure portal, I'm going to click on Subscriptions.
Now, the subscription of course is tied to an Azure AD tenant which is shown here as being Quick24x7. My subscription is called Pay-As-You-Go. I'm going to go ahead and click on it to open up this navigation bar which gives me options related to my subscription.
One of which, if I scroll down under Billing, is Invoices.
Now, we can see on the right that we have the Last 3 months worth of invoices shown. We can see the Billing Periods, starting and ending. We can see the date of the invoice. And we can also see the Amount. And we can see the Type, in this case it's for Azure Services. Now we also, if we scroll to the right, have the option of downloading each of these. Now, if I click on the download link, it's a CSV file format download or it could be a PDF.

[Video description begins] He clicks the download link of the third row entry and its corresponding blade opens. [Video description ends]

Now, this could be important for accounting reasons and certainly for business expense or taxation reasons. So this is something that we can do by looking at the invoices. But notice also that each of these specific dollar amounts for each invoice is a hyperlink, it's blue.

[Video description begins] He points to the row entries in the "Amount" column. [Video description ends]

And so, if I were to click directly on it, I could actually jump into the Cost analysis for that particular invoice.

[Video description begins] He clicks the third row entry in the "Amount" column and a blade called "Cost analysis" opens. It includes a table with several columns and several rows. The column headers include "Service name", "Service tier", and "Cost". The blade also includes a date drop-down list box. [Video description ends]

So I can see for example, looks like premium solid state drive or ssd managed disks. Were really the bulk of the cost for that particular invoice within that time frame.

[Video description begins] He points to the first row entry in the table. [Video description ends]

Followed by, it looks like, virtual machines. So we can see how this breaks down. We can even filter it.

[Video description begins] He points to the second row entry in the table. [Video description ends]

If I want to click on Filter items, we could start typing things in and then filtering based on that.

[Video description begins] He points to a text box labeled "Filter items". [Video description ends]

So for example, if I put in ssd, all we're doing now is looking at SSD charges related to the time frame listed up above.

[Video description begins] He types "ssd" in the "Filter items" text box and the row entries in the table get filtered. [Video description ends]

So I'm just going to go ahead and click the X to close out of that. Now, it's one thing to come here and view the invoices. But we want to try to avoid having to do things in the sense of thinking of doing it. We want to automate things. And we can click the Email Invoice option up at the top.

[Video description begins] A blade called "Email invoice" opens. It includes a button labeled "Opt In". [Video description ends]

Currently it says, You are not receiving emailed invoices. Well, that's something I want to do. So I'm going to click on Opt In to make that happen.

[Video description begins] A blade called "Email statement notice" opens. It includes a button labeled "Agree". [Video description ends]

I acknowledge that it's going to be sent via non-encrypted email. That's fine, I Agree.

[Video description begins] The following pop-up box appears: Opt-in Complete. He closes the "Email invoice" blade. [Video description ends]

So this could be an important aspect of your configuration when it comes to having your invoices emailed to you automatically. The other thing to think about is we have this Access Invoice button up at the top. Now, this is currently On.

[Video description begins] A blade called "Access to invoice" opens. [Video description ends]

 And it would apply for example to users in your subscription that would have roles such as the the billing reader role. So we have that option available as well.

[Video description begins] He closes the "Access to invoice" blade. [Video description ends]

Also notice that the default here, Timespan is listed as being 3 months. But you can click on that and change it.
So for example, I can set it to the Last year if that's what I want to see.
And sure enough, we now see our invoices for the Last year.


Azure Resource Groups and the Portal
In Microsoft Azure, a resource group is a way to organize related resources together, such as creating a resource group for a web application and deploying all of the underlying resources that make that web app work within the resource group. Or maybe creating a resource group for a department. And when that department in the organization deploys resources, they deploy them into that resource group, or you might do it for a project. Either way, it allows us to track billing for resources in that resource group. It also allows us to track usage of items or see deployments within that resource group.
So here in the portal, let's get started by creating a resource group, we're going to do that by beginning within the Resource groups view. So in the upper left, I'll open up the navigator and I'll click Resource groups.
And you're going to see any existing resource groups, you'll see any subscriptions that they may be tied to, and their geographical location.
Now, if you click on a specific resource group and open up its properties blade, you'll be able to see things like Tags, you could tag it.
You can also see any deployments that were made into that resource group and the state of them, whether they succeeded or whether they failed. 
You can also even see Cost analysis and Cost alerts and Budgets per resource group, so at the resource group level.
However, in this case, we're going to create a new resource group, so back here at my main Azure portal page, I'll click Create a resource.
Now from here, I'm just going to search for resource group, and there it is, Resource group. So, I'm going to go ahead and click the Create button, and then I have to fill in a few little details.
Basically I have to give it a name and specify the region where I want to create it.
And, of course, tie it to a particular Subscription, of which I have only one, the Pay-As-You-Go subscription.

[Video description begins] He selects the "Pay-As-You-Go" option in the "Subscription" drop-down list box. [Video description ends]

I'm going to call this Rg2, Resource group 2, and it's going to be, let's see, in a different location, I'm going to put this one in Canada Central.

[Video description begins] He types the following text in the "Resource group" text box: Rg2. [Video description ends]

I'm doing that because I know that most of my resources will be deployed in that same type of region.

[Video description begins] He selects the "(Canada) Canada Central" option in the "Region" drop-down list box. [Video description ends]

Then I'll click next for tags.

[Video description begins] The "Tags" step gets selected in the first section and its corresponding page opens in the second section. It includes a table with three columns and one row and a button labeled "Next : Review + create >". The column headers include Name and Value. The row entries under both these column headers are text boxes. [Video description ends]

Now we could specify a tag key and value pair. For example, if this is going to be tied to a project, we can specify a Project and a Value, let's say project ABC.

[Video description begins] He types the following text in the row entry in the "Name" column: Project. He types the following text in the row entry in the "Value" column: ABC. [Video description ends]

 But bear in mind, depending on how you plan on using this, you might just name the resource group project ABC, so really depends how you want to use it.

[Video description begins] The "Review + create" step gets selected in the first section and its corresponding page opens in the second section. It includes a button labeled "Create". [Video description ends]

At any rate, I'm going to click the next button, validation is passed, I'm going to click Create, and after a moment it will create our resource group.

[Video description begins] The following pop-up box appears: Resource group created. It includes a button labeled "Go to resource group". [Video description ends]

I'm going to click the Go to resource group link.

[Video description begins] A blade called "Rg2" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

Well, actually, before we do that, let's go back to the Resource groups view, just to shows up there.

[Video description begins] He navigates to the "Resource groups" blade. [Video description ends]

We know it will, so we just have to, click Refresh, maybe a few times, and wait a moment and then we'll see resource group show up, resource group 2, Rg2 show up.

[Video description begins] A new row entry for Rg2 gets added to the table. He clicks this row entry and the "Rg2" blade opens again. [Video description ends]

We can click on it and then start to explore it.

[Video description begins] He selects an option called "Deployments" in the navigation pane and its corresponding page opens in the content pane. It includes a table with several columns and no rows. [Video description ends]

Now, of course, it's not really being used at this point, you could go under Deployments and you would see that there's no deployments that have been sent here because it's newly created. But when you deploy new resources, for example, if I were to go, let's say to the All resources view, not that we have to do it this way, but we can.

[Video description begins] He opens the navigator and selects an option called "All resources". The "All resources" blade opens. It includes a button labeled "Add". [Video description ends]

And, if I were to click the Add button, let's say we want to add a virtual machine, Windows Server 2016 Datacenter.

[Video description begins] A blade called "New" opens. He selects an option called "Windows Server 2016 Datacenter". A blade called "Create a virtual machine" opens. It includes a "Resource group" drop-down list box. [Video description ends]

Part of that deployment is going to be specifying the resource group into which we want to deploy it. So, I can see I've got a drop-down list here for resource groups, and I could specify the Resource group, in this case, Rg2, where I want this resource deployed.


Azure Resource Groups and the CLI
In this demonstration, I'm going to use the Azure CLI to manage Azure resource groups.
But first, here in the portal, I've navigated to the Resource groups view where I can see, I currently have two resource groups.

[Video description begins] He clicks the second row entry, which includes: Name: Rg1. A blade called "Rg1" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. He selects an option called "Deployments" in the navigation pane and its corresponding page opens in the content pane. It includes a table with several columns and two rows. The column headers include "Deployment name" and "Status". [Video description ends]

And if I click on any one of them to open them up, I could click on Deployments to open up that blade to see any items that were deployed into that resource group. Whether it Succeeded or whether it failed.

[Video description begins] He points to the "Status" column. [Video description ends]

And I can even perform a Cost analysis against the resource deployments inside of this resource group and so on.

[Video description begins] He selects an option called "Cost analysis" in the navigation pane and its corresponding page opens in the content pane. [Video description ends]

So let's go to the CLI and let's start managing resource groups. The first thing I'll do is run az group -h.

[Video description begins] He opens the command prompt window. The following prompt is displayed: D: \>. [Video description ends]

Now on help, I'm working with resource groups.

[Video description begins] He executes the following command: az group -h. The output displays a list of groups, subgroups, and commands. The prompt does not change. [Video description ends]

And it does say here that this allows me to Manage resource groups and template deployments. Perfect. So the next thing I'm going to do is get the next level command, which in this case to create a resource group would be create, so az group create. Now, if I need more help, I can run az group create -h to learn more about any parameters that I might need to pass on the command line to work with this. So such as --location or -l to specify the location or the region.

[Video description begins] He clears the screen. He executes the following command: az group create -h. The output displays a list of arguments and global arguments. The prompt does not change. [Video description ends]

And it even says, if you want to know how to type in those items, you could see the values by typing in az account list-locations. Of course, we'll have to specify the name and so on. So I'm going to go ahead and clear the screen with cls and I'm going to do this. I'm going to run az group create -l for location, in my case canadaeast. And I'm going to call this resource group -n Rg2.

[Video description begins] He executes the following command: az group create -l canadaeast -n Rg2. The output displays that the provisioning succeeded. The prompt does not change. [Video description ends]

Now after I've done that, I should get some returned JSON output which is indicative of the fact the provisioning succeeded, which it says it did. So I'm going to go ahead and run az group to list my resource groups.

[Video description begins] He executes the following command: az group list. The output displays a list of resource groups and their properties. The prompt does not change. [Video description ends]

However, it lists all of the properties and it's a little hard to digest that output. So what I could do is run az group list, I could pipe it to the grep line filtering tool. And I could tell it I'm looking for the name property.

[Video description begins] He clears the screen. He executes the following command: az group list | grep name. The output reads: 'grep' is not recognized as an internal or external command, operable program or batch file. The prompt does not change. [Video description ends]

But here it says 'grep' is not recognized. Well, that's because I'm running the Azure CLI locally on my Windows machine as opposed to within a Cloud Shell. This is not a Linux host. I don't have the Linux subsystem for Windows installed, there's no way to grep this. So what I could do is also pipe that instead to the Windows find command. Now, in this case I'd have to specify that the name be within quotations in order for that to work correctly.

[Video description begins] He executes the following command: az group list | find "name". The output displays the names of 3 resource groups. The prompt does not change. [Video description ends]

And once I do that, it will show me just the names of the accounts. Now the next thing I could do also is use the az group list, I could use the --query parameter. This is built into the Azure CLI, it's probably the best way to do it. And because we have an array of items, in this case, we have three resource groups, we have to refer to the fact that we have more than one. And I can specify that we have an array or a collection of them by specifying open and close square brackets. Then I separate that reference from the property, in this case, name with a dot so .name. And now we'll see just the names of those specific resource groups.

[Video description begins] He executes the following command: az group list --query [].name. The output displays the names of 3 resource groups within square brackets. The prompt does not change. [Video description ends]

Now the thing is though, you can also delete a resource group. For example, here I'm going to run az group delete, and in this case, -n for name. Let's delete our first one, resource group 1, Rg1. But let's go back and check it out in the portal before we actually press Enter.

[Video description begins] He switches back to the Microsoft Azure portal. [Video description ends]

So back here in the portal, I want to go Home and I'm going to go to the All resources view. And I see that I've got two storage account here deployed in the Rg1 Resource group.

[Video description begins] He opens the "All resources" blade. It includes a table with several columns and three rows. He points to the second and third row entries. [Video description ends]

Okay, so they still exist. Now I could have seen that of course by going into Rg1, the Resource group, and then going into Deployments. I would see that those two storage accounts had successfully been deployed here. All right, having that in mind, let's go back to the CLI.

[Video description begins] He switches back to the command prompt window. [Video description ends]

And I'm going to press Enter to delete resource group 1 or Rg1, are you sure you want to do it?

[Video description begins] He executes the following command: az group delete -n Rg1. The screen prompts to confirm if you want to perform this operation. [Video description ends]

Yes, put in the letter y, and I'll press Enter, and it says it's Running. Now even while that's in the midst of running here back here in the portal, I've refreshed my All resources view. And notice that our two storage accounts have been removed.

[Video description begins] He switches back to the Microsoft Azure portal. The table on the "All resources" blade now has only one row entry. [Video description ends]

So the message here is clear, when you delete a resource group, you're also removing all of the resources deployed into it.

Azure Resource Groups and PowerShell

[Video description begins] Topic title: Azure Resource Groups and PowerShell. The presenter is Dan Lachance. [Video description ends]

In this demonstration, I'm going to use PowerShell to create an Azure resource group.

[Video description begins] The PowerShell window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So to get started here, I'm going to run get-command in my Cloud Shell, and I'm going to use an * followed by the text resourcegroup. And then after that, I'm going to put in another *. So in other words, showing PowerShell cmdlets that contain the text resource group in their name. And we can see that we have quite a few of them.

[Video description begins] He executes the following command: get-command *resourcegroup*. The output displays a list of cmdlets that contain 'resource group' in their name. The prompt does not change. [Video description ends]

I'm interested in building a new one, and I can see we have the New-AzureRmResourceGroup PowerShell cmdlet, so I'm going to go ahead and use that. And, I am going to clear the screen, I'm going to run new-azurermresourcegroup. I'm going to specify the name. In this case, I want to build a resource group called Rg2, resource group 2. And I'm going to set the location with -location in this case to the canada east region. So I'm going to use the new-azurermresourcegroup cmdlet -name. I want to call this Rg1 for resource group 1, and -location, I'm going to set in quotes to canada east. I'm using quotes because there's a space between canada and east within that region name, and I'll press Enter.

[Video description begins] He executes the following command: new-azurermresourcegroup -name Rg1 -location "canada east". The output displays that the provisioning has succeeded. The prompt does not change. [Video description ends]

After a moment we can see the ProvisioningState of having created resource group one or Rg1, is that it Succeeded. We can verify this by retrieving information get-azurermresourcegroup. When we do that it returns our resource groups including the one that we just created, Rg1.

[Video description begins] He executes the following command: get-azurermresourcegroup. The output displays the three resource groups and information about them. The prompt does not change. [Video description ends]

Notice the property tied to that is ResourceGroupName at least as it's labeled here. So I'm going to clear the screen, we're going to use the up arrow key to bring up our get command line. I'm going to pipe this to select and we are going to tell we want to select only the resourcegroupname property. So then all we are seeing are the names of our specific resource groups.

[Video description begins] He executes the following command: get-azurermresourcegroup | select resourcegroupname. The output displays three resource group names. The prompt does not change. [Video description ends]

Now we also have the option of removing a resource group. But before we do that, why don't we minimize our Cloud Shell here in the portal, and let's go to the Resource groups view where we will see any resource groups, there are three here.

[Video description begins] He switches to the Microsoft Azure portal. He opens the "Resource groups" blade. It includes a table with several columns and three rows. He points to the second and third row entries. [Video description ends]

Including Rg1 and Rg2. So what I want to do is issue a command to delete Rg2 using PowerShell. So back in our command shell, we're going to go ahead and do that by using the remove-azurermresourcegroup cmdlet. And I'm going to tell it the name in this case is going to be Rg2. It says are you sure you want to remove that resource group?

[Video description begins] He executes the following command: remove-azurermresourcegroup -name Rg2. The screen prompts to confirm the removal of the resource group 'Rg2'. [Video description ends]

I'll type in the letter y for yes, just bear in mind that when you are removing a resource group, you are also removing the resources deployed into it.

Moving Azure Resources

[Video description begins] Topic title: Moving Azure Resources. The presenter is Dan Lachance. [Video description ends]

You can use the portal to move Azure resources from one resource group to another. And remember that resource groups allow us to organize related cloud components, such as all of those underlying items required to support a web app. Or maybe we simply want to deploy virtual machines into a resource group called Project X, and so that we can track it by project, including at the building level. Either way, let's go ahead and do a move.

[Video description begins] The Microsoft Azure portal is open. [Video description ends]

To get started here, let's go to the Resource groups view. I've got two resource groups, Rg1 and Rg3.

[Video description begins] In the "Azure services" section he clicks the "Resource groups" option. The "Resource groups" blade opens. It includes a table with three columns and three rows. The column headers are Name, Subscription, and Location. He points to the second and third row entries, which include: Name: Rg1 and Name: Rg2. [Video description ends]

Let's go look at our Storage accounts, because we're going to move a storage account from one resource group to another.

[Video description begins] He navigates to the home page. In the "Azure services" section he clicks an option called "Storage accounts". A blade called "Storage accounts" opens. It includes a table with several columns and two rows. The column headers include Name, Resource group, and Location. [Video description ends]

It doesn't have to be a storage account, that just happens to be what we're using as our example. So I've got a storage account, and we can see right here, it's in a Resource group named Rg1, we're going to move it to Rg3.

[Video description begins] He points to the second row entry, which includes: Name: storacct33445, Resource group: Rg1, and Location: Canada Central. [Video description ends]

We might do this as part of a reorganization effort. So I'm going to click on the name of the storage account to open up its details.

[Video description begins] He clicks the second row entry and a blade called "storacct33445" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. It includes a button labeled "Move". [Video description ends]

And in the Overview blade, I have a Move button. So I could choose Move and move it to another resource group within the current subscription, or in another subscription.

[Video description begins] He clicks the "Move" button and two options appear: Move to another resource group and Move to another subscription. [Video description ends]

I'm going to choose Move to another resource group.

[Video description begins] A blade called "Move resources" opens. It includes a drop-down list box labeled "Resource group" and a button labeled "OK". [Video description ends]

All I have to do here at the bottom is specify the target Resource group that I would like to move this item to, the Storage account. So I'm going to select Rg3.

[Video description begins] He selects the "Rg3" option in the "Resource group" drop-down list box. [Video description ends]

I'll turn on the checkmark that says, I understand that tools and scripts associated with move resources might not work because I'm moving it to a different location. And I also might have to update them with the new resource ID.

[Video description begins] He switches to a new tab in the browser. The Microsoft Azure portal is open. The "storacct33445" blade is open. An option called "Properties" is selected in the navigation pane and its corresponding page is open in the content pane. It includes a field labeled "Storage account resource ID". [Video description ends]

So I've opened up another browser window here for my storage account, the one that we're moving, and I've gone to the Properties blade, where we can see the Storage account resource ID. Now, we're going to go ahead and verify that it is changed after we move it to our new resource group. Notice that part of that account resource ID includes the resource group name in the path. So let's go back over, we've checked that checkmark. Let's click OK to actually perform the move. Just make sure you're patient as the move occurs, especially if you're moving more than one resource at a time.

[Video description begins] He switches to the previous tab where the "Move resources" blade is open in the Microsoft Azure portal. He clicks the "OK" button. [Video description ends]

So if I click my notification bell icon in the upper right, we can still see it's moving that storage account resource. While that's happening, let's go back into our Resource groups view. And I'm going to open up an existing resource group, because what you can also do is choose to move at the resource group level.

[Video description begins] He opens the "Resource groups" blade. He selects the second row entry, which includes: Name: Rg1. The "Rg1" blade opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. It includes a button labeled "Move". [Video description ends]

What does this do? This will allow you to move all of the deployments associated with the resource group.

[Video description begins] He clicks the "Move" button and two options appear: Move to another resource group and Move to another subscription. He selects the "Move to another resource group" option. A blade called "Move resources" opens. It includes a drop-down list box labeled "Resource group" and a button labeled "OK". It also includes a table with two columns and one row. The column headers include "Resources to move" and "Type". The row entry includes, Name: storacct33445. [Video description ends]

And we can see currently, it still registers that our storage account is a part of this resource group. If you had many resources deployed here, they would all be listed. And you can see, you can select or deselect the ones and choose the target resource group to move them to. So you can do it at the resource group level or from the individual resource level.

[Video description begins] He closes the "Move resources" blade. [Video description ends]

Okay, before too long, we'll see that the moving of the resource is now complete. So we looked at the original storage account ID prior to the move. So the ID itself will not be changed, this numeric value, it starts with the 048b, it ends with 2109. I've opened up another web browser window after the move, so looking at the same resource, and the ID itself in terms of the numeric value portion has not changed. What's changed is the reference in the overall resource ID for the storage account. The reference to the resource group, here it's Rg3, and originally, it existed in Rg1. So as was suggested when we were doing this, you know, if you have any programmatic code or scripts that refer to the old resource ID, make sure they change to the new one.


Resource Group Deployments
You can view past resource deployments into an Azure resource group by opening up its properties in the portal, which we're going to do here. 
So to start with, let's go to the Resource groups view where we're going to see the resource groups within this subscription.

[Video description begins] In the "Azure services" section he clicks the "Resource groups" option. The "Resource groups" blade opens. It includes a table with three columns and three rows. The column headers are Name, Subscription, and Location. [Video description ends]

So for example, Rg1, resource group 1. If I click to open that resource group in the Overview blade, I'll see any resources currently deployed in that resource group.

[Video description begins] He clicks the second row entry, which includes: Name: Rg1. The "Rg1" blade opens. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. It includes a table with two columns and no rows. The column headers are Name and Type. It also includes a button labeled "Redeploy". [Video description ends]

Now here it says there are No resources to display. However, if I click on the Deployments item in the navigation bar, I can see that there have been deployments to this resource group in the past. So either those resources were deleted, or they were moved to another resource group.

[Video description begins] He selects an option called "Deployments" in the navigation pane and its corresponding page opens in the content pane. It includes a table with several columns and two rows. The column headers include "Deployment name" and "Status". [Video description ends]

So let's close this resource group for a moment and let's go into our second resource group here called Rg3.

[Video description begins] He navigates to the home page and opens a blade called "Rg3". It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. It includes a table with three columns and one row. [Video description ends]

So again in the Overview part of that, we do see there is an active object here within this resource group. It's a storage account.

[Video description begins] He points to the row entry, which includes: Name: storacct33445 and Location: Canada Central. [Video description ends]

And in the same way, if we go to the Deployments part, we'll see see that there are no deployments listed to this.

[Video description begins] He selects an option called "Deployments" in the navigation pane and its corresponding page opens in the content pane. It includes a table with several columns and no rows. The column headers include "Deployment name" and "Status". [Video description ends]

Well, how can that be when we can see there's a storage account currently assigned to Rg3? That would be because it must have been moved from another one. So let's go back into our initial resource group, Rg1, let's go the Deployments section.

[Video description begins] He navigates to the home page and opens "Rg1" blade. He selects an option called "Deployments" in the navigation pane and its corresponding page opens in the content pane. [Video description ends]

Now here I can see that there was a template deployment for one or more resources. We don't quite know yet, into this resource group on a specific date and time.

[Video description begins] He points to the first row entry, which includes: Deployment name: Microsoft.Template. He clicks the row entry, which includes: Deployment name: Microsoft.Template. A blade called "Microsoft.Template" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. It includes a "download" link. [Video description ends]

Now if I click on the link for that template, I can actually Download the details related to that template, it's a zip file.

[Video description begins] The zip file opens in the file explorer window. It includes a file called "deployment.json". [Video description ends]

I'm just going to choose Open to open it up directly, and it going to open up the deployment.json file. This gives you the details about what in that template was deployed to the resource group.

[Video description begins] The file contains several lines of code. [Video description ends]

Unless we scroll down through here, it looks like it was a storage account, that looks like the only thing that was deployed here. So we can learn that quite easily by viewing that information.

[Video description begins] He closes the deployment.json file. He switches back to the browser. [Video description ends]

Now what's equally interesting about that, if I go back here to the Deployments, is if I select an existing deployment.

[Video description begins] He navigates back to the Deployments page in the "Rg1" blade. [Video description ends]

So we're here have a deployment of the storage account into this resource group. We have a Redeploy button up at the top.

[Video description begins] He selects the second row entry in the table, which includes: Deployment name: Microsoft.StorageAccount. [Video description ends]

And it means what it says, based on the selection, you can deploy that item again. Now you would only do that if it doesn't already exist. So for example, I'm going to click Redeploy. So this is what you would normally see if you were deploying from a template.

[Video description begins] A blade called "Custom deployment" opens. It includes a drop-down list box labeled "Resource group", a text box labeled "Storage Account Name", and a button labeled "Purchase". The following text is populated in the "Storage Account Name" text box: storacct33445. [Video description ends]

So I can select a Resource group where I want to deploy this item. So for example, Rg3 or I can create a new resource group, whatever the case might be. Now interestingly, even though it was originally deployed into Rg1, this storage account was moved to another resource group. And so it doesn't actually exist here anymore. So I'm going to deploy it back into Rg1. What I'm doing is creating a new storage account from that original deployment. I would do that if I want to use a lot of the settings from it as opposed to deploying a brand new storage account from scratch.

[Video description begins] He selects the "Rg1" option in the "Resource group" drop-down list box. [Video description ends]

It's the only reason you would do this. So assuming I'm okay with all of these settings as per my original deployment. Then down at the bottom, I could choose that I agree to the terms and conditions stated above. The only thing I'll have to account for though is the name of the storage account. If that storage account is still being used somewhere, then the name isn't unique. So I'll just add a 2, let's say to the end of it, to make sure that the Storage Account Name is unique. I'll choose Purchase.
And let's see if it validated, excellent. So the deployment is currently in progress. What we're doing is redeploying a storage account into this resource group based on a past deployment. Of course, the original storage account is no longer here. It's in Rg3. And after a moment, if I go look at my notification bell icon in the upper right, it looks like the resource deployment succeeded. Let's go back and look at the deployments here for our resource group.
And let's take a look at the Overview here where we can see active current items here. And we can see that there is now a storage account that was deployed into Rg1 and we redeployed it from a past deployment.


Resource Group Cost Analysis
In Azure, you can view and track your costs based at the subscription level.
So for example, here in the portal if I go to my Subscriptions, and if I click on an active subscription, when I open it up, I'll have the option of clicking Cost analysis over on the left.
And then I'll see all the costs associated with this subscription. Of course, I can change the time period or time frame for which that is representative of, but we have the option of doing that. But what we're talking about here is doing a cost analysis at the resource group level. Now think about how you might use a resource group in Azure, you might use it for a project, so you might have a project called Project X. So you'd create a resource group with that same name and deploy project resources into it. That way you have a single unit of management in the resource group and also for tracking costs. Let's take a look at that.
So I'm going to go into my Resource groups view here in Azure, and I'm going to open up an existing resource group I've got named Rg1, so I'll click on it.
And what I want to do is scroll down in the navigation bar and click on Cost analysis to open that blade.
So what's going to happen is we're going to see a cost breakdown for resources deployed only into this resource group. And we can see it's coming up with the numbers listed here. So we have our standard charts where we can scroll down below and see it broken down by service. So it looks like we've got SQL databases eating up the lion share of the cost in this particular case for this time frame, the location here, Canada East. So we have all the normal stuff that we would normally see we can even filter. I could add a filter here for anything that I'm interested in such as a specific service type or Service name in this case. So I could open up the list and choose that I'm only interested in sql database.
And I could filter based only on sql database. So then the cost analysis will update to show me only that. And as usual, we also have the option of exporting. So for example, I could choose to Export.
Let's see a PNG graphic file. Let's go ahead and do that. And I'll click Download charts. And once that's done, I'll just click Open down at the bottom of the screen. And we can see here it's opened it up in Paint on my machine, but we essentially have the same type of information that we can see visually directly in the Azure portal. Let's go back and export that as, let's say a, document in the format of Excel. So I'm going to choose Excel and choose Download data. And then I'll just go ahead and click on Open. So when you open it in Excel, you're going to have two sheets. You could have a worksheet, which is the summary that you're looking at here and also the actual data itself.
So not only can we work with our cost analysis at this level at the resource group level, but we can also go into Cost alerts over on the left and Add an alert and notification when the costs for resources deployed into this resource group get to a certain level.
So I could add a filter. I'm just going to leave it on Rg1, I'm not going to change the scope. And I'm going to call this Rg1Budgets1.
Now, the idea here is that we want to be alerted when costs exceed a certain value. So I can specify the period. I'm going to leave it on Billing month but I could specify quarter here, and so on. And I'm going to set the amount here to 50. So as I scroll down, I can see here that the max over the past five months has been about $25 specifically in Canadian dollars.
So, it depends on your subscription and how it's configured for the currency. So that's been specified. So now that I've done that, I'm going to go ahead and click on Next>. So, we scroll back up to the top.
Basically, I'm going to say when we get to 75% of our budgeted amount, I want to use an existing Action group if we have any, in order to send a notification. Now if we don't have any existing action groups that are available in the list, then we can click the Manage action group link.
Down below, we can also specify an alert recipient email address, such as for a group, which I've specified here. And then I can just click Create.
So I didn't create an Action Group, I could have, if I wanted as an alternative alert notification method like SMS text or something like that. So at this point, we now have a budget created. So, if I go into the Budgets.
Portion here, I can see our budget is listed here for the resource group. So the key is that we can work with cost analysis at the resource group level.


Resource Group Budgets
In Azure, you create budgets so that you can be notified when a certain percentage of a given value has been reached. For example, if you set a budget for $500 per month, you might want to be notified when you get to 80% of that $500.
So I can go in and take a look to make sure that issues such as leaving virtual machines or databases running by mistake hasn't occurred, and that's why you have an increase in cost. So we can do this at the subscription level.
If I were to go into an Azure subscription, I can click on the subscription to open it up, and I can click Budgets and manage the budgets from there.
But what we're talking about in this particular case is doing same type of thing but at the resource group level.
So it only applies to charges for resources deployed to a specific resource group. So in my Resource groups view, I'm going to click on a resource group I have called Rg1.
And in the Overview blade over on the right, I can see any resources currently deployed there. In this case, it's only a single storage account. However, as I scroll down in the navigation bar for the resource group, I can see Cost analysis, Cost alerts, and Budgets. Well, Cost alerts allows me to add an alert which ends up creating a budget. I'm just going to go here to the Budgets view. I don't have any budgets currently.
So I'm going to go ahead and click the Add button to add a new budget. Now remember again, the budget is really about sending a numeric threshold value for costs.

[Video description begins] A page called "Create a budget" opens. It includes a button labeled "Next >" and a section called "BUDGET SCOPING". In this section there is a Scope label, adjacent to which the "Rg1" option appears. Under this option there is a link called "Change scope". Under this link there is a button labeled "Add filter". [Video description ends]

And then setting up some kind of an alert notification mechanism. So Rg1 is the current scope. I'm not going to change that. I could click Add filter, if I want to filter within the resource group by something else.

[Video description begins] Two drop-down list boxes appear adjacent to the "Add filter" button. [Video description ends]

So maybe for example, by ServiceName. Maybe, I'm only interested in looking at sql database costs within Rg1 and sending alerts for that, so I could do that. However, I'm going to remove that filter by clicking the little x.

[Video description begins] The "Create budget" page also includes a section called "BUDGET DETAILS". This section includes a text box labeled "Name", a drop-down list box labeled "Reset period", and another text box labeled "Amount ($)". [Video description ends]

And down below, I'm going to call this Rg1Budget1All, indicating it's for all costs, not by particular service or anything like that.

[Video description begins] He types "Rg1Budget1All" in the "Name" text box. [Video description ends]

I'm going to leave it on billing month, but you can change the period to be something different, like monthly, maybe you only want to track this and be notified from a quarterly perspective or annual. But I want it done every Billing month.

[Video description begins] The following option is preselected in the "Reset period" drop-down list box: Billing month. [Video description ends]

I can see the start and ending date for that. I'll leave those set as they are, so two years into the future, pretty much. I'm going to set my BUDGET AMOUNT to 500, so $500 and that will be in the currency specified with my subscription, in my case, Canadian dollars.

[Video description begins] He types the following text in the "Amount ($)" text box: 500. [Video description ends]

I can see my past five month maximum costs, which can help me sometimes gauge what I should be putting in for my budget amount. However, I'm going to leave mine at $500. Could go down to the bottom, I'm going to click Next>.

[Video description begins] A page called "Set alerts" opens. It includes a table with several columns and one row entry. The column headers include "% of budget" and "Action group". Under the "% of budget" column header the row entry is a text box. Under the "Action group" column header the row entry is a drop-down list box. Under the table there is a link called "Manage action group". [Video description ends]

And I'll scroll back up here because I can specify the percentage of that budget amount, then I want to trigger an alert. So let's say it's 80% of that $500, which works out as we can see here to be $400.

[Video description begins] He types the following text in the row entry under the "% of budget" column header: 80. [Video description ends]

I could select an existing Action group, if I have one, I don't, or I could create one by going to Manage action group. Action groups let you define targets that should receive things like notifications. Whether it's through email, or SMS text messages, or push notifications and so on. However, I already have the option built-in here when I'm creating a budget to send an alert message to a group. So I'm going to specify a group here for my organization. And they were the ones that will receive a notification when we get to 80% of our budget on a monthly billing basis.

[Video description begins] He types the following text in a text box labeled "Alert recipients": admins@quick24x7.com. [Video description ends]

And having done that, I'm going to go ahead and click on Create. So it's going to validate my selections, after which it will create the budget.

[Video description begins] He clicks a button labeled "Create". [Video description ends]

After a moment, we get a notification in the upper right that the Budget was created. And here, in the Rg1, navigation panel under the Budgets blade, we can see our budget now exists.

[Video description begins] A new row entry gets added to the table on the "Budgets" page of the "Rg1" blade. [Video description ends]

So at any point in time, we can click on the Name of the budget and open it up and either edit it to change any of the items within it, such as the Amount, or we can delete the budget.


Azure ARM Template Editor
Azure Resource Manager templates, otherwise called ARM, for Azure Resource Manager, allow you to define your resources as code. It's often referred to as Infrastructure as Code.
So you could use a template or a blueprint to specify that you want to create a storage account, a virtual machine, a web application, a public IP address, all of these things together. It allows for the automation for the deployment and management of resources. So here in the portal, I can create a template deployment by choosing Create a resource, and I could type in template, and I'm going to select Template deployment.
Now a template is technically just a text file that uses json syntax.
Now from this screen, we can select from Common templates that are available here in Azure.
So to create a Linux virtual machine, Windows virtual machine, a web app, a SQL database. You could also, down below, select a GitHub quickstart template from the list. So whether you want to start working with things like Azure container services or kubernetes, which is kind of an orchestration platform for containerized applications. Or we might go down and choose things like an Azure DNS zone that we want to create. It could be any type of resource, a backup vault to be created, content delivery networks, on and on and on. Or you could Build your own template in the editor. When I do that, it takes me into an editor environment where we have the base skeletal format for the JSON.
Now we can also specify Variables. If you want to allow for template reusability, you shouldn't be hard coding values, things like storage account names or virtual machine names. Instead, those should be variables, and you can specify those parameters to pass in values to those variables. Now, at this point, we could load an existing file. When I choose Load file, it allows me to search for file on-premises, on my local computer that I'm doing this from, that is a template that I want to bring in here. Or I could choose Quickstart template, for example.
I'm going to go through and select just a very simple template. How about we search for storage, and we'll take a look here for storage account. Now, what I want to do is basically create a very basic storage account using a template, so that we can at least see the code here. So I'll choose storage-account-create, from the template list, OK.
And what it's done is populated all of the json syntax here in my ARM template for the creation of a storage account.
Now notice there are some variables here. A variable is being defined here for the storageAccountName. And, If I click Variables over here on the left and expand it by clicking little triangle, I can see storageAccountName.

[Video description begins] He highlights the following line of code, code starts: "name": "[variables('storageAccountName')]". Code ends. [Video description ends]

Of course, when I click it, it takes me to that line. So I can use this template editor to tweak what I've just essentially imported from a Quickstart template. I can make changes, if I know what I'm doing. And once I'm happy with this, I can actually save it. So if I click Save, at this point it's saved my changes here in the GUI. And what I can then do is actually run a deployment from that template.

[Video description begins] The "Custom deployment" blade includes a drop-down list box labeled "Resource group" and a drop-down list box labeled "Storage Account Type". [Video description ends]

So, for example, I want to deploy a storage account into Rg1, that's a Resource group.

[Video description begins] He selects the "Rg1" option in the "Resource group" drop-down list box. [Video description ends]

And based on the template definition will determine what you need to specify. If pretty much everything is hardwired and there are no variables, then you might not have much to specify at all. But here we can specify the Storage Account Type. And the Location will be determined by looking at the Resource group up above, and calling upon its .location property.

[Video description begins] He selects the "Standard_LRS" option in the "Storage Account Type" drop-down list box. [Video description ends]

So that's going to be taken care of. Notice what's missing is the name. What will the name of the storage account be? Well, in the template the storage account name is going to be determined by concatenating some text items together. Let's just go back here for a moment in our web browser, and let's step through what we just did to create that template. We created a Template deployment, we chose Create, we wanted to use the template editor here in the GUI, and we clicked on Quickstart template. And essentially what we searched for here was storage. We want to create a storage account using the template. So, storage-account-create, we did OK. Now if we take a look here at the code within the template, when it comes to dealing with the storage account name, it's concatenating the word store, so that's going to be the prefix. Then it's going to generate a unique string from the resource group ID. And so, that is how the name will be derived.

[Video description begins] He highlights the following line of code, code starts: "storageAccountName": "[concat('store', uniquestring(resourceGroup().id))]". Code ends. [Video description ends]

Okay, let's get back to where we were. Let's Save that. Let's deploy this into Rg1. And let's go ahead and agree with it and click Purchase.

[Video description begins] He clicks a button labeled "Purchase". [Video description ends]

And after a moment, our template deployment has succeeded for a storage account. So we can go to the resource group, that's one way to navigate here. And in the Overview blade, we'll see any items deployed in this location. Now we might have to click Refresh, a time or two until we see new items. Here's our new storage account. Notice, it's got store as part of the prefix of the name followed by what looks like some kind of a unique string. Now the same thing would appear, of course, if we were to go to the Storage accounts view. Creating a storage account is the same, regardless of how you actually do it, the end result is the same. So our storage account is now showing up as having been created from a template that we pulled up in the template editor.

                    
Azure AD Overview
Azure Active Directory is otherwise called Azure AD or sometimes AAD, but it all means the same thing. It means that we have an Active Directory instance in the Azure Cloud. It's managed. We don't have to set up a server and install the domain, controller, components, and so on. So what this means is that we have a centralized identity provider in the cloud. It can contain users, groups, application registrations, and security principles. Security principles are often used to make sure that software components have specific permissions to needed cloud resources. You can also link Azure Active Directory to your on-premises Active Directory if you wish. There are many configurations such that users authenticate to cloud apps using their familiar on-prem apps, and password changes are synchronized between both locations.
You can manage Azure Active Directory and everything within it using the GUI. So using the portal, you can also use command-line management tools, like PowerShell cmdlets, and the Azure CLI. Identity in Access Management or IAM, is all about authentication in authorization. So authentication is the proving of identity. Single factor authentication, for users for instance, would include items in the same category, such as something you know as a username and password would be. So it's single factor. But multi-factor meshes categories. So username and password fall under the something you know category, but the possession of a smartcard falls under the something you have category. Hence, we would have Multifactor Authentication or MFA in that instance.
The authorization is controlled access to resources that occurs after successful authentication, such as having the appropriate permissions to a SharePoint site, or perhaps the ability to deploy specific virtual machines only within a specific geographical region. So it's permissions or policies that get assigned to groups. So with Identity and Access Management or IAM, we are talking about controlling the authentication and then the authorization related to users and groups and even devices, such as Windows 10 computers joined to Azure AD, or Android smartphones registered with Azure AD for centralized control. And we know that IAM also deals with software permissions, specifically in the form of security principles.
So Azure AD then is a centralized repository of credentials, you could say, among other things. There are other security things that we have to consider, like RBAC roles. RBAC stands for Role Based Access Control. A role is a collection of related permissions, such as the ability to manage Azure virtual machines. And we could assign that role to certain users, or groups, that would apply to either the entire subscription in Azure, or a resource group, or just a single virtual machine for that matter. Conditional access is an important option. You can build policies that basically check conditions that must be met before allowing access to something.
So an example is that, if we have a sales associate that needs access to some kind of a Sales Cloud based application, then they can only do that, they can only access it if they sign in using Multifactor Authentication. Then we've got access reviews. This is something that you can schedule or run whenever you wish to take a look at things like group memberships in Azure AD, or permissions granted to enterprise applications registered in Azure AD. Because sometimes these permissions are granted and left, even though they may no longer be required, and that presents a security risk. So access reviews are good from a security perspective.
Then there's Privileged Identity Management, otherwise called PIM, P-I-M. The purpose of PIM is really to only provide administrative access to administrators when they need it. So you could think of this as, just-in-time or J-I-T, JIT administrative access. And of course, we can enable Multifactor Authentication or MFA to enhance user sign in security. So for instance, instead of Azure AD users only being required to enter a username and password, in addition to that, they might have to enter a six-digit PIN that gets texted to their smartphone.


Azure AD and the Portal
To properly manage Microsoft Azure, it's important to have a clear understanding of the association of an Azure AD tenant and a subscription. Now, an Azure AD tenant is essentially an instance of Azure Active Directory in the cloud, where you have users and groups, and devices and so on.

[Video description begins] A web portal labeled "Home - Microsoft Azure" opens. It is divided into two parts: menu bar and content pane. The menu bar includes a search box and some icons such as, Settings, Help, and User's login information. The content pane is divided into three sections labeled "Azure services", "Navigate", and "Tools". [Video description ends]

And you can associate a subscription with a tenant, for example, here in the portal in the upper right along with my sign in information, I can see the name of the Azure AD tenant I'm currently switched to it's called QUICK24X7.

[Video description begins] He points to the User's login information labeled "danlachance72@hotmail.com QUICK24X7". An information box opens which contains information labeled "Name", "Email", "Directory", and "Domain". [Video description ends]

And so here, I can click Subscriptions on my screen, I can also search for subscriptions if it wasn't there, to view any subscriptions associated with this Azure AD tenant. And I see I've got one it's a Pay-As-You-Go subscription. So I'm just going to click Home here in the upper left.

[Video description begins] He points to an option labeled "Subscriptions" in the Azure services section. Then he types sub in the search box and its search result includes a link labeled "Subscriptions". He clicks the Subscription link and its corresponding blade opens. It includes a subscriptions table with multiple columns and a row. The column headers include Subscription name and Status. Their respective row entries are Pay-As-You-Go and Active. [Video description ends]

So if I were to view for example, All resources, it takes me to the All resources view but I have not yet created anything so I don't really see anything, but at least it did take me to the view. Now let me switch over to a different Azure AD tenant.

[Video description begins] The Home - Microsoft Azure web portal opens. He clicks an option labeled "All resources" in the Azure services section and its corresponding blade opens. It includes an all resources table with multiple columns and no rows. The column headers include Name and Type. [Video description ends]

So I'm going to click in the upper right and choose Switch directory, and maybe I'll choose the one by the name of EarthFarm.

[Video description begins] He clicks the User's information and a drop-down box with two sections displays. The first section contains a user ID and two links labeled "My Microsoft account" and "Switch directory". He clicks the Switch directory link and its corresponding blade labeled "Directory + subscription" opens. It includes a tab labeled "All Directories" which is selected by default. It contains a search box and a list of directories. Some of the directories are labeled "Default Directory" and "EarthFarm". [Video description ends]

So this is a separate Azure AD tenant or separate instance of Azure AD Directory Services.

[Video description begins] The Home - Microsoft Azure web portal with the EARTHFARM AD tenant opens. It is divided into various sections. Some of the sections are labeled "Azure services" and "Navigate". The Navigate section includes an option labeled "Subscriptions". [Video description ends]

Now when I take a look here, I have a different looking screen. And if I were to try, for example, to look about why don't we start by trying to see which subscriptions are associated with this tenant. So when I go to Subscriptions for EarthFarm, there are none although I do have the ability to add one, let me just go back Home.

[Video description begins] He clicks the Subscriptions option and its corresponding blade opens. It includes a button labeled "Add" and the subscriptions table. [Video description ends]

If I were to try to go to the All resources view, well, it just won't let me do it. Because you need to at least have a subscription associated with the Azure AD tenant to be able to do anything.

[Video description begins] The Home - Microsoft Azure web portal opens. He clicks the All resources option in the Azure services section. A web page labeled "Welcome to Azure" opens. It includes buttons labeled "Start", "View" and "Explore". [Video description ends]

So let's switch back to our active tenant, but when I say that what I really mean is the one that has an associated subscription, that was Quick24x7. 

[Video description begins] He clicks the User's information. Then he clicks the Switch directory link and the Directory + subscription blade opens. Then in the All Directories tab, he selects a directory labeled "Quick24x7" from the directory list. The Home - Microsoft Azure web portal opens. [Video description ends]

Now when I look at Quick24x7, we can go to Azure Active Directory from the main screen, we could also search for it and choose it from the resultant list.

[Video description begins] He points to an option labeled "Azure Active Directory" in the Azure services section. Then he types azure in the search box displayed in the menu bar and its result includes a link labeled "Azure Active Directory". He points to the Azure Active Directory link. [Video description ends]

I could click on my left-hand navigation bar to open it up, and scroll down and choose Azure Active Directory, it doesn't matter. But at this point I can start actually doing something meaningful with Azure AD.

[Video description begins] A navigation pane opens. It is divided into various sections labeled "All Services" and "FAVORITES". The FAVORITES section includes an option labeled "Azure Active Directory". He clicks the Azure Active Directory option and its corresponding blade labeled "Quick24x7 | Overview" opens. It is divided into two sections: navigation pane and content pane. The navigation pane includes an option labeled "Overview". The Overview option is selected by default and its corresponding blade is displayed in the content pane. [Video description ends]

For example, I could go to the Users view, I can see any existing users, or begin creating users, or inviting users, or bulk creating them from a CSV file.

[Video description begins] The navigation pane includes a section labeled "Manage" which further includes an option labeled "Users". He clicks the Users option and its corresponding blade labeled "Users | All users" opens. It is divided into two sections: navigation pane and content pane. The navigation pane includes an option labeled "All users" and its corresponding blade is displayed in the content pane. It includes buttons labeled "New user", "Bulk create", and "Bulk invite". [Video description ends]

I'll just click back on Quick24x7 in the breadcrumb trail in the upper left, I can also view Groups and also Devices.

[Video description begins] He opens the Quick24x7 | Overview blade. Then he points to options labeled "Groups" and "Devices" under the Manage section in the navigation pane. Then he clicks the Devices option and its corresponding blade opens. It is divided into two sections: navigation pane and content pane. The navigation pane includes an option labeled "All devices" and its corresponding blade is displayed in the content pane. [Video description ends]

So Azure AD then is a centralized cloud-based identity provider that can have one or more Azure subscriptions associated with it.


Azure AD and the CLI
While you can use the Azure portal to manage and navigate through your Azure AD tenant, you can also do that using the Azure CLI.

[Video description begins] The Quick24x7 | Overview blade opens in the Home - Microsoft Azure web portal. [Video description ends]

In this case in the portal, I'm going to click the Cloud Shell icon at the top where I'm going to run CLI commands.

[Video description begins] He clicks an icon labeled "Cloud Shell" in the menu bar and a PowerShell command prompt displays in the web portal. The PS /home/danlachance72> prompt is displayed. [Video description ends]

The first thing I'm going to do is run az account list and I'll press Enter.

[Video description begins] He executes the az account list command. The output displays several properties of the live.com#danlachance72@hotmail.com user account. The prompt remains the same. [Video description ends]

So the first thing I see is the homeTenantId, so it starts here with 96421. Now as a matter of fact, if I just minimize that, we can see that 96421 is actually the tenant ID for my Azure AD tenant which is named, Quick24x7.

[Video description begins] He highlights home Tenant Id user account property starting with 96421 in the output. Then he minimizes the PowerShell command prompt and the Quick24x7 | Overview blade displays. He highlights an information labeled "Tenant ID" in the content pane. [Video description ends]

So we can see that information. As we go further down, we can also see the name of the subscription associated with that Azure AD tenant, because there can be one or more subscriptions.

[Video description begins] He opens the PowerShell command prompt. Then he highlights Pay-As-You-Go subscription property of the user account in the output. [Video description ends]

So I'm going to go ahead and minimize Cloud Shell for a second. And I'm going to search up subscriptions in the bar at the top center here. And when I do that, I'll be able to see which Subscriptions are associated with the Quick24x7 tenant. There's one, it's called Pay-As-You-Go.

[Video description begins] He types sub in the search box displayed in the menu bar and clicks the Subscriptions link in the result. Its corresponding Subscriptions blade opens which includes the subscriptions table in the content pane. He points to the Pay-As-You-Go row entry under the Subscription name column header. [Video description ends]

We can see the Subscription ID for that is 048b82 and so on. Well, let's go back and take a look here.

[Video description begins] He opens the PowerShell command prompt. [Video description ends]

We can also see Pay-As-You-Go is shown here. The state of our subscription is that it's Enabled, okay. So this looks good. We're getting a bit of information simply from the az account list about our Azure AD tenant. I'm going to go ahead and just clear the screen with cls. Let's take a look at a few other things that we could do.

[Video description begins] He executes the cls command and the screen gets clear. The prompt remains the same. [Video description ends]

For example, I'm going to run az space ad space -h for help. What can I do in Azure Active Directory here from the CLI?

[Video description begins] He executes the az ad -h command. The output displays a list of Group's command and Subgroups' keywords with their definitions. The Group's command is labeled "az ad". The Subgroups' keywords are labeled "app", "group", "signed-in-user", "sp", and "user". The prompt remains the same. [Video description ends]

So we can manage applications that are registered, groups. We can get information about the signed-in-user. We can manage service principals which is often used when you have software components that need authorization to resources in Azure, like storage accounts for instance. And we can manage of course Azure AD users. So if I were to run az ad user -h, tells me the next level commands about users I can work with.

[Video description begins] He executes the az ad user -h command. The output displays a list of commands with their definitions. The Group's command is labeled "az ad user". The other commands are labeled "create", "delete", "get-member-groups", "list", "show", and "update". The prompt remains the same. [Video description ends]

So create, delete, get-member-groups, list, show, update, and so on. So there's a lot we can learn from within the help system. So for example, if I were to run az ad signed-inuser -h, just talks a little bit about what that would do.

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the az ad signed-inuser -h command. An error message displays. [Video description ends]

Well, looks like I have the wrong name here, so signed-in-user. So make sure you have the command syntax spelled out correctly, that's a little bit better.

[Video description begins] He executes the az ad signed-in-user -h command. The output displays three commands labeled "az ad signed-in-user -h", "list-owned-objects", and "show". The prompt remains the same. [Video description ends]

So show graph information about the current signed-in user in the CLI, okay, so we can either run list-owned-objects after that or show. Let's just do show. So I'm going to use the up arrow key and our full command that is going to be az ad signed-in-user show. Just to get some information about who we're currently signed in as here in the CLI.

[Video description begins] He highlights a definition of the az ad signed-in-user command. Then he points to the show command. Then he clears the screen. The prompt remains the same. Then he executes the az ad signed-in-user show command and its output displays several properties of the user account. The prompt remains the same. [Video description ends]

So as we scroll up, it's a lot of details because it's showing me the properties of my user account. So things like the companyName, the country, department, employeeId, displayName, givenName, all of those types of things. And as we go further and further down, we can also see all the details all the way down. So it's just showing me details about the user that I'm currently signed in as here in the CLI. Now of course, we can do other things here, navigating through our Azure AD tenant for example, az ad group list. So this will show me all my groups, but the problem if you consider it a problem is that it's telling me too much. It's giving me all of the detail. I'm really only interested in the displayName property.

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the az ad group list command. The output displays a list of user account properties. The prompt remains the same. [Video description ends]

So what can we do about that? We can do a few things. One thing I could do is run az ad group list again and pipe that to grep. That's the grep line filtering tool built into Linux. And I can tell it what I want to see, and it's case sensitive by default. So I want to see the displayName, name with capital N, I can ask for that and that seems to work. Those are the names of my Azure AD groups.

[Video description begins] He executes the following command: az ad group list | grep displayName. The output displays four user account properties that are labeled "EastAdmins", "Off365Group" "All Enabled Users", and "Group1". The prompt remains the same. [Video description ends]

I can also alternatively use the --query parameter built in to the Azure CLI. So for example, I could do az ad group list, and instead of grep and grep is fine. But instead of that I could use --query and I can tell it I want to see the displayName. 

[Video description begins] He executes the following command: az ad group list --query displayName. No output displays. The prompt remains the same. [Video description ends]

Now the problem is that it won't work by default because what we have is a collection of items. We have an array of items and those items are the multiple groups. So we have to tell it here in our syntax after query, open and close square bracket. In other words, array element dot and for each item I want to see the displayName property. And when I do that, I get what I expect, the names of the groups.

[Video description begins] He executes the following command: az ad group list --query [].displayName. The output displays the same display names without the displayName label. The prompt remains the same. [Video description ends]

And it's a little bit cleaner, if you take a look at than what do you get when you use a grep line filtering. Because grep displays everything on the line, so displayName colon all that stuff. All we're seeing here are the actual value. So depending on what your need is, it might be easier to parse this text down below that results from using --query than it would from trying to parse the text that results up above here by piping to grep.


Azure AD and PowerShell
Not only can we use the Azure portal to manage our Azure AD tenant, as well as the Azure CLI, we can also use PowerShell cmdlets.

[Video description begins] The Quick24x7 | Overview blade opens in the Home - Microsoft Azure web portal. [Video description ends]  

Whether you're running PowerShell on-premises with the Azure module, or whether you're doing it here in the portal through Cloud Shell, which is what I'm going to do. So I'm going to point to Cloud Shell here, which allows me to run PowerShell cmdlets and Azure CLI commands.

[Video description begins] He points to the Cloud Shell icon in the menu bar. Then he clicks it to open the PowerShell command prompt. The PS /home/danlachance72> prompt is displayed. [Video description ends]

So I'm using PowerShell here. And to get started here, let's just navigate a little bit around Azure AD. Let's figure out what we can type in, begin with. So get-command, and let's say I want to retrieve information about Azure AD. So I know that the verb part of that cmdlet, the prefix, is going to be get. Don't know what would be after that so how about a wildcard symbol, an asterisk. And probably azad and then something else.

[Video description begins] He executes the get -command get*azad* command. Its output displays a table with four columns and multiple rows. The column headers are CommandType, Name, Version, and Source. The prompt remains the same. [Video description ends]

Looks pretty good. Here I can use Get-AzADGroup to get groups from my directory, or group members. I can get users, I can get applications that might have been registered in Azure AD. So this isn't bad, we're learning a bit. So I'm going to clear the screen, I'm going to run get-azadgroup.

[Video description begins] He highlights the following commands under the Name column header: Get-AzADGroup, Get-AzADGroupMember, Get-AzADUser, and Get-AzADApplication. [Video description ends]

Let's see what groups we have.

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the get -azadgroup command. The output displays a list of groups and their properties. The prompt remains the same. [Video description ends]

Okay, looks like it's showing us the groups with the default selection of properties. However, if we really wanted to, we could also run get-azadgroup. I know there's more about groups than just those list of properties. So what I could do is, tell it that I want to pipe that, to select, and I'll tell it I want to select all properties, select *.

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the get -azadgroup | select * command. The output displays a list of groups and their properties. The prompt remains the same. [Video description ends]

Now what we could also do is pipe that command to the select alias and select specifically the properties that we want. So get-azadgroup, let's say, and pipe that to select and say I only want to see the displayname. So we can ask it for which properties we are interested. So that's all we see. Now you might wonder, how do you know it's called DisplayName?

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the get -azadgroup | select displayname command. The output displays four group names. The prompt remains the same. [Video description ends]

Well, if you're not sure what these properties are called, you can pipe the result of a cmdlet in PowerShell to get-member. And you can ask it for properties, so -type property, otherwise it'll show you properties and methods. And here I can see, indeed, there is a property called DisplayName, and MailNickname, and so on and so forth.

[Video description begins] He executes the following command: get -azadgroup | get-member -type property command. The output displays a table with three columns and multiple rows. The column headers are Name, MemberType, and Definition. The prompt remains the same. In the output, he highlights DisplayName and MailNickname row entries under the Name column header. [Video description ends]

So we can learn about that quite easy. Now another thing that I might be interested in doing is running get-azureadcurrentsessioninfo, it's a long one.

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the get -azureadcurrentsessioninfo command. The output displays an error message which reads, You must call the Connect-AzureAD cmdlet before calling any other cmdlets. The prompt remains the same. [Video description ends]

Well, it's actually telling me I need to first run connect-azuread. Okay, let's do that, up arrow. Let's go back to get-azureadcurrentsessioninfo. All right, this is telling me some interesting stuff.

[Video description begins] He executes the connect-azuread command. No output displays. The prompt remains the same. Then he executes the get -azureadcurrentsessioninfo command. The output displays a table with five columns and a row. The column headers are Account, Environment, TenantId, TenantDomain, and AccountType. The prompt remains the same. [Video description ends]

So I can see here the tenant ID for my Azure AD tenant starts with 96421. And if we go back here and check that in the portal, yeah, that looks right, that's correct.

[Video description begins] He highlights the Tenant ID starting with 96421 and minimizes the PowerShell command prompt. The Quick24x7 | Overview blade displays. Then he highlights 96421 in the Tenant ID displayed in the content pane. [Video description ends]

We can also see our domain name. So we aren't using a custom DNS domain here because we've got the .onmicrosoft.com DNS suffix.

[Video description begins] He opens the PowerShell command prompt. Then he highlights onmicrosoft.com in the quick24x7test.onmicrosoft.com row entry under the TenantDomain column header. [Video description ends]

We can also run cmdlets here in PowerShell, like get-azureadtenantdetail. And when I do that it's just giving me a little bit of the same type of listing from above, just presented in a different format.

[Video description begins] He executes the get -azureadtenantdetail command. The output displays a table with three columns and a row. The column headers are ObjectId, DisplayName, and VerifiedDomain. The prompt remains the same. [Video description ends]

Now, of course, if I want to manage Azure AD objects such as building users, I could also do that by searching up what the appropriate cmdlets are, so get-command. Let's see, I'm assuming it starts with new, and it's probably got user in the name. Looks about right, such as new-AzADUser. And I can take that further, say well, what else can I do with users?

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the get-command new *user* command. The output displays a table with four columns and multiple rows. The column headers are CommandType, Name, Version, and Source. The prompt remains the same. He highlights New-AzADUser row entry under the Name column header. [Video description ends]

get-command *azaduser*, okay. So I can build a new one. I can retrieve Azure AD users. I can update something about them. I can remove them, and so on.

[Video description begins] He executes the get-command *azaduser* command. The output displays a table with four columns and multiple rows. The column headers are CommandType, Name, Version, and Source. The prompt remains the same. He points to Get-AzADUser, New-AzADUser, Remove-AzADUser, and Update-AzADUser row entries under the Name column header. [Video description ends]

So if I were to run, get-azaduser, then we can see in fact, it's showing me the user accounts. And just like with the groups, if I really want to, I can pipe that.

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the get-azaduser command. The output displays user accounts and their properties. The prompt remains the same. [Video description ends]

For example, to select and tell it what I want to see, which properties. I want displayname.

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the get-azaduser | select displayname command. The output displays user account names. The prompt remains the same. [Video description ends]

And in the same way, I can also discover which properties are there with get-member. So piping to get-member -type property. And we can see some of those properties listed there.


Azure AD Users and the Portal
You can use the Azure portal to create Azure AD user accounts.
Now why would you create an Azure AD user account? You would do this so that you have a way to allow people to authenticate, so they can access things like cloud-based apps, and in some cases, depending on your configuration, also on-premises apps. So to get started here in the portal, I'm going to go to Azure Active Directory. I could also launch that from my left-hand navigation menu, it doesn't matter how I get there.
And within my Azure AD tenant, I'm going to click on Users. From here, I'll get a list of existing user accounts.
Now I've got my initial Microsoft Account that reflects my Azure account that I initially set up. However, I'm going to click the New user button to build a new user. Now this user is going to be an Azure AD user, I'm not going to invite them, they are an external user. So I'm going to leave it on Create user.
And for the identity here, I'm going to specify that the username is cblackwell, so Codey Blackwell. And after the add symbol here, it's going to use my DNS domain suffix for my Azure AD tenant, so that's already filled in.
So I'm going to leave that as it is, and then scroll down and just fill in a couple of other details. So Codey Blackwell, that's the full name, and I'll just fill in the first name, the last name.
And down below because we're creating a new account, it asks whether we want to auto-generate the password, or do we want to specify it? I'm going to let it Auto-generate it. I'm just going to choose Show Password and copy it, so I can communicate that to the user.
At this time, we can also determine if the user is going to be a member of a group, and which roles they have, which gives them certain permissions. However, I'm not going to change any of that, I certainly don't want a Block sign in for this user. And I'm not going to fill in any other details. So let's go ahead and click Create to create user Codey Blackwell. And before you know it, the user shows up here in the list of Azure AD users, we're going to go ahead and test logging in as Codey Blackwell.
Now one way to do that is to connect to account.activedirectory.windowsazure.com/, which I will do now.
So I'm going to specify the full email address of the new user, so cblackwell@ and then of course my Azure AD tenant DNS domain name. Now the default is that it will always end with.onmicrosoft.com unless you create custom DNS domain names, but that's the default setting. Let me go ahead and click Next, it's going to ask me for the password. So I'm going to go ahead and put in the auto-generated password that I previously copied and I'll choose Sign in.
Now, of course it wants me to change the passwords, so I'll put in the existing auto-generated password, and I will specify a new password and confirm it. And then I'll click Sign in. And when it asks me to stay signed into my web browser, I'll just choose No.
And we can now see that we are successfully signed in as user Codey Blackwell as part of the QUICK24X7 Azure AD tenant.


Azure AD Users and the CLI
Not only can you use the Azure portal to create and manage Azure AD user accounts, but you can also do this using the Azure CLI.
The CLI can also be spawned here in the Azure portal as opposed to running it on-premises, and that's how I'm going to run it. So here in the portal, I'm going to click the Cloud Shell icon at the top in the bar. And I'm going to make sure I'm in a PowerShell session which allows me to run PowerShell cmdlets as well as Azure CLI commands.
And the first thing I'm going to want to do here is, create an account in Azure AD. So to do that, I'm going to run az ad user, now there is a space between each of those words. Now if I'm not sure where to progress from here I can use the -h to get help with the next level commands.
It looks like create as opposed to add or new. And I could also use the up arrow key, to bring up the previous command and we know that creates the next level part of the syntax, okay. But what after that, I don't know what to put in. Well, we could use -h and we can learn more about the various parameters that we could specify to create the user.
So we can see arguments like display-name, password, user-principal-name, force-password-change-next-login, and so on. So this gives us enough to get started. So az ad user create --display-name and in this case, let's say I'm going to create a user whose name will be "Jen Hill" -- user-principal-name. It's going to be jhill@ and then I have to put in the DNS domain suffix for my tenant. Now if I'm not sure what that is, I can, for example, let's minimize this, click to open up my left-hand navigator menu.
Go to Azure Active Directory, there's much ways to view this, of course. And in the Overview, I'll see the entire name.
So in this case, it's quick24x7test.onmicrosoft.com. So, .onmicrosoft.com is the default DNS suffix unless you've created a custom DNS domain name for your tenant, which I haven't. Let's go back into the CLI here. I'm just going to go ahead and paste that right in there. So we're just going to right click and choose Paste. Okay, that part is in there. Next thing I want to do is, specify the passwords. So I can do that with --password and I'm going to tell that within double quotes, a specific password that I want to use. Okay, and once I've done that, I can press Enter to create the user account.
Now if I don't have a password that complies with password complexity requirements, as we can see has not been done here, then I'm going to have to come up with something different. So I'm going to use the up arrow key and specify a different password for this account. Now once I filled in that password, we can go ahead and try to see if it will accept our newly created password.
This time, we didn't get the red error message, so it looks good. And as a matter of fact, let's just minimize Cloud Shell for a second. Let's just check our work here in the GUI.
So in my Quick24x7 Azure AD tenant, if I go to the Users view, among other users that already might have been there, we'll see the newly created Jen Hill.
So let's go back into the CLI and poke around a little bit. I'm going to clear the screen. So if I were to run az ad user list, it'll list my Azure AD users, but notice what we get returned all of the properties.
And at this level, we'd have to scroll through to find exactly what we wanted to see. I don't want to have to do that, there's got to be a better way. So let me clear the screen with the clear command. I could do stuff like this. I could say az ad user list. And if you're a UNIX or a Linux shell scripting person or just a command line person, you could pipe it to the grep line filtering command and tell it what you want to see. For example, all I want to see is the mailNickname property. So only show me those lines. And sure enough, it looks like it's working.
However, you could also do some CLI-specific stuff. What I mean by that is you could run, for example, az ad user list and you could use --query. This will work with anything in the CLI to query something out. Now, the problem is, it's not a problem, but if I were to just assume I could put in the property name, mailNickname, then I would get a whole lot of nothing.
However, you may say well maybe it's case sensitive, it's not going to make a difference. So if I just put it all lowercase, still nothing.
And the reason is because if you think about the command output, it's returning more than one item. It's returning an array or a collection of users and you need to reference that before the property names. So up arrow key to bring up previous command and I'm going to put an open and close square bracket to reference the fact that we're dealing with an array. Dot, to separate the array item, the user, from the property, in this case mailnickname. And I'll go ahead and press Enter.
Now, again, if I change the n in nickname to a capital N because it is case sensitive, we can now see that it's returning the mailNickname. So there are a few things then, that we can do using the Azure CLI to work with user accounts in Azure AD.


Azure AD Users and PowerShell
You can use PowerShell cmdlets to create and manage Azure AD user accounts.
Of course, you could also use the portal, as we see here to create new users, or to click on existing users to make changes to any properties and so on. Now, here I'm going to click on Cloud Shell at the top of the bar here in my Azure Portal screen.
And I'm going to make sure I'm in PowerShell, where I can run both PowerShell cmdlets and Azure CLI commands.
Now I could download PowerShell locally on my computer, but I'm going to choose to use the Cloud Shell here instead. Now, the first thing I need to figure out is what might the name of the cmdlet be if I want to add a new Azure Active Directory user? So I can figure that out using get-command. For example, get-command. Maybe I'll use an asterisk. And maybe I'll put in azaduser. That's a guess, I'm assuming that would be part of the name. Otherwise I could try different variations.
But luckily this looks reasonable. I've got a New-AzADUser cmdlet as opposed to add or anything like that or create.
Well, that's good news, because now I can get help about that cmdlet now that I know what it's called. So I might run get-help and I might ask for help for the new-azaduser cmdlet, maybe even ask for details, -details. Or detail in singular rather not details. And here I can see that it's returned back the information that I wanted for this, so it gives me a brief synopsis, creates a new active directory user.
Now, that's true specifically in Azure and I get a sense of how the syntax would be used. And what's important here because there could be a lot of parameters is that it explains each and every one of them. And even more handy, as I go way down. I have some examples of how we might actually create, a new Azure Active Directory user. We can see here, they are converting a regular string for a password to a secure string using the ConvertTo-SecureString cmdlet, before they actually build the new user and pass the password with the -Password priority.
You can see the variable they're using here is $SecureStringPassword.
Variables in PowerShell, are always prefixed with a dollar sign. So we have some great help here.
So let's clear the screen, let's make it happen. First thing I want to do, is make a password very long. So going to call it $pw for password. And I'm going to put in =, and I'm going to run the convertto-securestring cmdlet. And I'm going to use the -string parameter. And I'm going to specify the password that I want to use for this. Let's say it's something like this. So I'm specifying the password here within double quotation marks. It's plain text, so -asplaintext and I'm going to -force this, and I'm going to press Enter.
So if I just do $pw to see what's in that variable, it doesn't even return the actual password, that's the point, it's been converted to a secure string item, and I can pass that, to the new-azaduser cmdlet.
So I'm going to set -displayname, let's say here -displayname to a user Sharon Bishop. Creating Sharon Bishop the -userprincipalname will be determined by well first of all it's going to be determined by organizational naming conventions but in this case it's going to be sbishop@ and then the DNS name of my Azure AD tenant. And I'll just close the double quotes after that and I'll specify -password and this is where we're I'm going to pass it my variable. So $pw, which we know from above is a secure string representation of the password I specified up above.
Now it requires the MailNickname parameters. So because I did not supply it, it asks for it. Let's cancel out of that just for fun.
And I'll clear the screen. If I were to use the up arrow key to bring up the new-azaduser cmdlet, we could add the -MailNickname parameter. So -mailnickname. Let's say it's just going to be sbishop. And if I press Enter, it creates the account and doesn't ask me anything. Now that's going to be an important thing to consider mandatory parameter values when it comes to trying to automate some of these things.
Let's just check our work. First of all here, directly in the portal since we have it opened up, let's go to the users view of our Azure AD tenant. Indeed we can see Sharon Bishop has been created.
But let's go back into PowerShell for a second. Because there are some cmdlets that we can use, for example, get-azaduser to check to see what's in our Azure AD tenant.
We can see the last user here, of course, is user Sharon Bishop. Of course in PowerShell, we can start filtering out what we want to see. So for example, get-azaduser, we can pipe the result of a PowerShell command using the pipe symbol, the vertical bar symbol. Now most keyboards you can get that symbol by shifting your backslash key. I can then refer to select and tell it what I want to see. Let's say I want to see the display name property. You have to know what the properties are called comma, and the id.
So there's the display name and there's the internal Id identifier for the Azure AD user accounts. So we have the option then of using a number of PowerShell cmdlets for managing. Azure AD users, and we can take that a step further. So let's clear the screen. Remember how we ran get-command. So I'm going to use wildcards here and going to put azaduser. We used New-AzADUser and Get-AzADUser.
But if you want to make modifications to a user account, you could use Set-AzADUser. You could also remove accounts also using Remove-AzADUser. So there are a lot of options that are available. So for example, let's say we wanted to change Sharon Bishop's last name, I could use update -azaduser and I could specify the -objectId. So we're going to have to go back to a previous command to see what Sharon Bishop's ID is, there it is right there.
I'm going to go ahead and copy that to my clipboard, let's clear the screen here and let's try this, let's run update-azaduser-objectid.
And here I'll just right-click and paste Sharon Bishop's ID. And let's say I want to change the display names, so -displayname. And now I want it to be Sharon and for lack of a better choice, just so we can illustrate the example, her last name will now say changed. So Sharon Changed. And if we do that looks like, it took let's kind of use our up arrow key to go back to get-azaduser. And indeed we can see Sharon's last name is now changed.


