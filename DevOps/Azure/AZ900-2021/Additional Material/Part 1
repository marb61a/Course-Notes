                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 1


Azure Storage Account Overview
  - Azure storage accounts provide cloud storage, whether you interface directly with the storage account using the GUI
    - Or command-line tools to put content into the storage account, so files or to retrieve them
    - But you might also have other services like a web application that talk to the storage account in the background
    - Maybe to read or write data, including perhaps even writing to logs stored in the storage account
    - Storage accounts can accommodate blobs, binary large objects, whether these are office productivity type of files
    - Like spreadsheets, or Word processing documents or whether they're virtual machine hard disk files
    - Storage accounts can also accommodate storage queues
  - This is going to be of interest primarily to software developers because they could use the queue 
    - As an intermediate messaging mechanism between software components
    - So that the software components don't all have to be running at the same time to exchange messages 
    - Because we've got a queue that can store it until a component becomes available
    - We can also configure Azure file, Azure files are file shares, they're SMB type of file shares
    - For example, that you might connect to or map to from Windows, from the UNIX and Linux perspective
    - When you mount that remote file system locally, it would happen over NFS, we can also work with table storage
    - In storage account, Azure table storage is NoSQL type of storage where we have key attribute stores to store data
    - It's considered to be a less rigid schema than you would find with a standard SQL type of database 
    - Where every single field within a table is defined with the data type and a length and so on
  - Azure storage accounts support many features, one of which is replication for high availability of the data
    - For example, LRS or locally-redundant storage means that within a locality, such as even within an Azure data center in some cases
    - You will have three copies of the data. But, if there is a regional problem or outage that data is inaccessible, it doesn't exist anywhere else
    - But it would if you use one of the variants of geo-replication. So when we talk about geo-redundancy, GR, we have GRS verses RA, read-access GRS
    - The difference is that with read-access GRS, you don't have to initiate a failover to make the secondary copy usable
    - It is automatic, but with GRS, either Microsoft or you, the cloud tenant, have to initiate a failover to use that secondary copy of the data.
  - You can also host static web sites through an Azure storage account
    - What this really means is that you've got a static site where the content isn't changing often
    - If you need a lot of more complex and intricate support for dynamically generated server side pages and so on
    - Then you should look at actually deploying an Azure app service, which is designed for that sort of thing
    - You can also integrate Azure CDN endpoints, that's content delivery network endpoints, into your storage account
  - A content delivery network is interesting in that the purpose is to copy content
    - Think of web site content for example, PDF documents, sound files, video files, graphic files
    - Whatever it is that's on the site, you can copy that to alternate locations around the world to put that content close to users that will access them
    - So that it improves the user experience, it can be configured within the properties of a storage account as well
    - Just like Azure Search can, if you want to enable search indexing for storage account contents
    - You can also configure blob lifecycle management
    - For example, after a certain number of days, you might determine that some blob files should be automatically archived
    - Hardening a storage account means applying security mechanisms to essentially reduce the attack surface
  - One way to do this is using our back roles for other Azure administrators to limit their access to storage accounts
    - For example, you might want an Azure administrator to perhaps be able to upload content into an Azure storage account but not manage the account itself
    - There are different roles, role-based access controls or RBAC roles available for that
    - Every storage account has two storage account keys and you can, at any point in time, regenerate either of those two keys
  - There are two keys because first of all, the key gives access to everything in the storage account
    - So you want to safeguard those keys, you would use them for programmatic access or for command-line access, if you've scripted something
    - The idea is that you can refresh keys periodically, which is a security measure
    - Instead of keeping the same key, you change it every now and then
    - You've got two keys, so while one key continues to be used programmatically or by scripts
    - The other one can be refreshed and then after period of time, you can do that for the first key, you can refresh it
  - Bear in mind, you'd have to change any references to the keys when they both become refreshed
    - Instead of giving access to the whole Azure storage account through a storage account key
    - You could also generate a shared access signature for the whole account or for an individual blob in the account
    - This provides limited access to content in the storage account, it can even have an activation date and time and an expiration date and time
    - So it can be controlled in that manner as well
    - You can also limit which networks that have services or users perhaps issuing commands
    - You can limit from which networks access to the storage account is allowed
  - You can configure storage account access policies to limit exactly what can be done
    - Such as perhaps only having the ability to read messages from a storage queue in the account as opposed to doing anything else with those messages
    - You can designate custom encryption keys under your control to encrypt the storage account contents
    - The default is that Microsoft-managed keys are used
    - Encryption is enabled by default, it's just that the keys aren't entirely under your control, but they can be.
  - Now, other than using graphical tools like the Azure portal and Storage Explorer to interface with storage accounts, you can also use PowerShell cmdlets
    - Here we have an example of creating a storage account using the New-AZStorageaccount cmdlet
    - Where we specify a resource group name to deploy the account into, a name for the storage account, a location
    - And the SkuName which specifies the type of replication. In this case, standard, locally-redundant storage or LRS
    - You can get a list of storage accounts with Get-AzStorageAccount.
    - You can also use the CLI to manage Azure storage accounts such as creating them.
    - That's been done with az storage account create where the name of the storage account is specified, the resource group affiliation, the location, and the sku
  - We can also list storage accounts with az storage account list
    - Here we are adding the --query parameter and telling it we want to query on the .name property
    - The open and closed square bracket identify that we have an array of storage accounts, more than one
    - And that we want to gather the .name property from that array.
  - We can also show detailed information about a specific storage account with the az storage account show
    - We give it the name of the storage account, and the resource group association, notice in our last example, we are using --resource-group.
  - Alternatively, so instead of that, you can also choose to use -g as in our first example to refer to the resource group
    - Really doesn't make a difference which one you use.


Storage Accounts and the Portal
  - Using the portal to create an Azure storage account.  
  - As the name implies, an Azure storage account is used for cloud-based storage
    - Whether you want to store files used by a web app or files that users upload from their desktops
    - Or whether you want to set up shared folders or whether developers want to create message queues to allow communication between software components
    - There are so many uses for Azure storage accounts, first of all in the portal, click Create a resource
  - Type in storage account, and choose Storage account from the resultant list, and then click Create
    - There's a lot of details you have to consider when you deploy a new storage accounts, you have to have planned for this ahead of time
    - For starters, we need to deploy this into a Resource group, we are going to choose an existing one called Rg1
  - Remember that resource groups are used to keep items that are related under one management unit, and that would be the resource group
    - Whether it's for billing purposes or tagging purposes, that type of thing then scroll down, and give the storage account a name
    - If we just put in a generic type of name like storacct, it says that name is already taken, not by me but by another Microsoft Azure tenant
    - The name needs to be unique, so as long as we adhere to organizational naming standards
    - We will be able to specify another name, we see this because the red text is no longer visible 
    - And we also have a green check mark to the far right end of the field
  - What next? We have to specify the geographical location where we want this storage account to reside
    - Leave it on the previously chosen account
    - You ideally want to place this storage account as close geographically as possible to where you think it will be most accessed from, if that's possible
    - They might be accessed from many different worldwide locations
