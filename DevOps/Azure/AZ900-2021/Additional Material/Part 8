                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 8


Storage Account Replication
  - When you create an Azure storage account, at creation time you can determine whether or not you want a specific type of replication enabled for that account.
  - Replication allows you to increase the data availability for whatever you have stored in the account
    - First of all, we can change this after the fact and we are going to do that in the portal
    - We've got the properties of an existing Storage account displayed and the navigation bar
    - The first thing we'll do is go down to Geo-replication, but when we click there, what we will see is a map with our Primary location
  - Where is the option to add additional locations for replication? Well, there's nothing, not even down at the bottom
    - All we see is that our current primary location is Canada Central
    - Well, that's because we have to enable replication, if it wasn't enabled when the account was created, by going to Configuration over on the left
    - We are going to go ahead and do that so we'll be able to select the type of replication that we're interested in
  - If we take a look, currently it's set to Locally-redundant storage (LRS)
    - What this means is that we've got three copies of data within an Azure location
    - If we've got a problem such as fire in an Azure data center, we might lose all access to those three copies
    - For additional availability, you might select either Geo-redundant storage (GRS), or Read-access geo-redundant storage (RA-GRS).
  - The difference being that with geo-redundant storage if there's a failure in the primary region, you've got to initiate a failover to the secondary region where data was copied to in order to be able to access it. So I'm going to choose in this case, Geo-redundant storage (GRS).
  - We going to Save that config change here. So we're changing the configuration of an existing Storage account. It says it successfully updated it, perfect.
  - Go back and let's look at the Geo-replication screen
    - Previously, we had only the blue indicator on the map which according to the legend of what was our Primary location
    - It's automatically determined that geo-replication will be enabled for the green listed item on the map, which is a different location
    - It's another region but it is reasonably close to the primary, which ever is nearest in your case 
    - So now, your region will be replicated to another nearby
    - At this point at the bottom, it says, well you can't even enable failover because replication is happening, you've just enabled this
    - As you might imagine, depending on the amount of data in the account will determine how long it takes for this to complete
    - But at this point, we've increased the availability of the data by replicating it to an alternate or secondary Azure region


Azure Storage Explorer Connectivity
  - Microsoft Azure Storage Explorer is a free GUI tool that lets you connect to various aspects of an Azure storage account
    - Such as, if you want to manage blobs, or queues, or tables, and so on
  - In my browser, I've navigated to the Azure Storage Explorer download page
    - You can search this up quite easily using your favorite search engine
    - We are going to go ahead and download and install Azure Storage Explorer for the Windows platform on my on-premises Windows 10 station
    - You can then start Microsoft Azure Storage Explorer from your Start menu like you would with any app
    - Now, the first thing we need to do here is determine how we are going to make a connection to a storage account in Azure
    -So for example, I can expand Storage Accounts here and I can right-click and choose Connect to Azure storage.
  - We have a number of ways I can do that using my Azure account credentials, or via Azure AD credentials, using a connection string, a shared access signature, a storage account name and a key to it, or I can attach to a local emulator for testing purposes. In this case, let's say I want to connect to a storage account using its name and key. We'll go ahead and click Next.
You'll want a Display name. Now, I'm going to give it the name of the storage account StorAcct333325. And I have to give it an Account name that would be for the storage account and also the Account key. So I'm going to pop in the actual name of it, storacct333325. But I also need an Account key.
So here in the portal in my storage account, I'm going to scroll down to Access keys of which there are two. Now, it doesn't make a difference which one I copy. So I'll just take the first one and click the copy icon. And I'll go ahead and paste that in the Account key field.
And that's all I'm going to change here. So I'm going to go ahead and click Next and then Connect.
So now we can see the storage account listed in the navigator and in parentheses the word Key, since that is how we gained access to the account. So now I can check out what's in the account. I can drill down into it, expand Blob Containers. Here's all of the different blob containers we have. I can click on each one of those and see files, download, upload, content.
I can also see any Azure File Shares that might have been created, of course, the contents of those file shares.
I can see any Queues that might have been defined, and those items are shown here and so on.
So really, the Azure Storage Explorer is another way to make a connection to a storage account. In our case, with the storage account access key, which gives access to the whole storage account from which we can then work with the content in the storage account.


Storage Account Blob Soft Delete
  - One of the many options you have when you create a storage account in Azure is whether or not you want the blob soft delete option enabled.
It's disabled by default. Now you can check this out on an existing Storage account in the portal by going into the navigation bar, scrolling down under Blob service, and choosing Data protection.
You will see that the current state is as it was by default Disabled. I'm going to choose Enabled. And I've got a retention policy set for a default value of 7 days. This means that any data, blob data, that is overwritten or deleted can be recovered for up to 7 days. Now this doesn't apply, if we're talking about a container, essentially a folder that is deleted. You can't get those contents back after 7 days. It also doesn't apply if any of the metadata, such as tagging and so on related to blob items is modified. So I'm going to go ahead and click Save to save that change. And let's navigate to our Blob service Containers, and I'm just going to open a Container called eastprojects.
In here, I have a file named Project_A.txt. So I'm going to select that file and I'm going to choose to Delete it. It also asks would you also like to delete any blob snapshots, if there are any. Well, I don't have any, so I'm going to just choose OK. And we can now see that our blob is deleted, the file is gone, Project_A.txt.
Now notice within this view here over on the far right I have the option to Show deleted blobs. If I turn that on, we can clearly see Project_A.txt was deleted because the Status says as much.
Now, what I can do is click directly on that blob. And when I'm in the properties of it over on the right I can click Undelete. So it says it successfully undeleted it.
Let's just take a quick little peek here.
  - If we close that current property window or blade, so close that out, we can now see Project_A.txt
    - Instead of having a Status of deleted is now back at being Active
    - And we have the ability then to do this for the retention period, which by default is 7 days.


Storage Account Encryption
  - Encryption of data at rest has become more and more important over time
    - As we keep hearing media reports about compromised customer information for example, due to the fact that data was not stored in an encrypted format.
  - Really, in this day and age, that's completely unacceptable as there are so many freely available encryption tools out there
    - In many cases, it's enabled by default, such as with an Azure storage account
    - To explore that a little bit in the portal, we are going to go into Storage accounts and open an existing Azure Storage account
    - What we want to do is scroll down in the navigation bar and click Encryption
    - When we do this, we'll see that it's set currently to Microsoft Managed Keys.
  - Yes, it is server-side encryption. It is enabled but the keys are controlled by Microsoft. Depending upon your regulatory compliance requirements, that might not work. You might need to have control of them. So we do have the option, as we can see here, to enable Customer Managed Keys. So down below, I can select a Key vault.
Now a Key vault is a centralized Azure resource. I say centralized only meaning it serves as a central repository for you to store secrets like PKI certificates, passphrases, and of course, as in our case, keys. And so other Azure resources or software code that you might develop can refer to this centralized storage location for secrets and call upon things. And in this case, I'm going to go and select a key vault. Because I want to choose a key from it that will be used to encrypt the storage account and it will be under my control.
So from the drop-down list, I have a key vault I've created called KV1East1. And within it, I've got a key called Key1, that's something I created, I generated.
So I'm going to go ahead and choose Select. And at this point, we've now got the required information to enable Customer Managed Keys here for our storage account.
Now that that's filled in, I'm just going to go up at the top and choose Save. And it says it's updating the server-side encryption for the storage account. So at this point, it's now been enabled. So from this point forward, newly added items to the storage account will be encrypted.
And of course, any existing items will be retroactively encrypted with the background encryption process.


Blob SAS Token
  - In the Microsoft Azure environment, a shared access signature is usually associated with the storage account.
  - In the portal, I'm looking at a Storage account, and if I scroll down and look under Settings, I'll see Shared access signature.
And the purpose of this is to allow limited, time-based access to some contents of the storage account, whereas the access keys provide full access to everything in the storage account. But we not only have the option of setting up a Shared access signature, for example, to allow access to blobs, but we can get even more specific to individual blobs. So for example, I'm going to scroll down further under Blob service and choose Containers. And I'm going to pick on a container called eastprojects, let's say, where I've got some sample files uploaded. One of which is called Project_A.txt.
I want to set a Shared access signature for that specific blob as opposed to all blobs.
So when I open up the properties on the right, I need to click on the Generate SAS option.
Now from here, I can choose the Permissions that would apply here. It's set to Read by default, which is it what I want, so I'm going to leave it at that. And I can see the Start date and time, and the time zone. And of course, the idea is that we can have an Expiry date and time as well for when this is good for, this Shared access signature. So I'm going to leave it as it is. I could also specify IP addresses from which access is allowed. And I'm just going to scroll down a little bit by scrolling over to the far right, and see everything.
And then finally, we have to specify some finalized details here, such as whether we're going to allow HTTPS or HTTP. Of course, HTTPS encryption makes sense. And Key 1 in our storage account will be used to generate the signature. So Generate SAS token and the URL. And I'm just going to scroll down here to reveal those items. So we have both a Blob SAS token and a Blob SAS URL.
So I'm going to copy the Blob SAS URL by pointing to the copy icon to the far right of it and choosing the copy option, so click, and it says it was Copied. So now, when I paste that blob SAS URL on my web browser, it will allow me to access the file. Now because it's a no MIME type in the browser, it's just the text file, it actually shows us the contents of the file as opposed to prompting us to download it.


Azure App Service Overview
  - Azure App Service is all about deploying web applications in the Azure cloud as a managed service
    - We can do this by deploying a code based web application or a Docker image based application
  - When you select a Docker imaged based application, you can select between the underlying VM running Windows or Linux
    - Docker allows us to containerize applications, in other words to have a logical boundary around all of the application components
    - That container can be moved to different Docker hosts to run the application
    - The great thing about it as opposed to running an entire VM is that, it relies on the underlying operating system that's already running
    - So loading up a dockerized application is very quick comparing to firing up a VM supporting your app
  - Let's talk about the web app as well as the app service plan. So these are two different types of resources in Azure
    - The web application lets you configure custom DNS domain names, so you don't have to stick with the default DNS suffix
    - Depending on what type of app service plan that you configure, will determine how many custom DNS domain names you can use
    - You can also work with deployment slots, the purpose of a deployment slot is for staging
  - You could have a production deployment slot with the production version of a web app, and as you are making changes and testing them
    - You could have a separate testing slot, then essentially once that comes through as testing successful
    - You can switch it to production so it's visible, for example, to the public once again
    - Deployment slots are a great way to work with a staging environment when you're making changes to a web app, essentially it's changing around domain names
    - We can also configure TLS/SSL settings for a web application, SSL is deprecated so it should never be used.
  - We should be using TLS, Transport Layer Security, to secure network connections. Vertical scaling allows us to increase compute power for underlying VMs. Horizontal scaling allows us to scale up by adding multiple VMs to handle a busy workload environment for a web app. You can also configure WebJobs. WebJob is essentially a tool that lets you schedule or run whenever you want some kind of a script or a program to perform some kind of maintenance on a web app. The app service plan, as we said, is a separate type of resource in Azure. And with it, it determines which resources are available to the web app, so the actual underlying horsepower.
You can also link multiple web apps with the single app service plan. The only thing about this to be careful is that if you have one very, very busy application, then it can starve other apps using that app's service plan. So you have to be careful about the planning and monitor the performance of the web apps. So you can view performance metrics at the app service plan level. So you can look at CPU metrics, memory, traffic in and out. You can also view file system usage per web application that's linked to that app service plan.
There are a couple of pricing tiers you should be aware of. First of all, they refer to Azure Compute Units or ACUs, ACUs are really just about CPU performance. So more ACUs means better performance. Now you can have a tier of dev/testing, or for production environments, production. You also have this option called isolated. The purpose of the isolated app service plan pricing tier is to have all of your web resources to support your app deployed into your own Virtual Private Network in Azure.
  - There are many different runtime services supported, so when it comes to languages for your application
    - It's pretty much anything that you might want to use like .NET Core, ASP.NET, Java, PHP, Node.js, Ruby, and so on
    - When you go to the Azure Marketplace to create a new resource, there are plenty of apps available, essentially preconfigured web applications
  - That's another option to consider when you're deploying a web app
    - Sometimes it might be quicker to look through the marketplace and select something and maybe tweak it to your own liking as required
  - You can manage Azure app service web apps using the portal, using ARM templates, using PowerShell
    - Or the CLI, and also using development tools of course, such as Microsoft Visual Studio
    - Where you might write the code for the app and then push it up into the Azure Cloud


Code Web App Deployment
  - Using the portal to deploy a code based web application.
  - To get started, click Create a resource and search for web then choose Web App
    - Now there are a number of things we'll have to specify,  just click Create.
    - Remember that a web application needs to be linked with an app service plan in Azure, that's a separate resource.
  - Either you can create one along with the web app here at this time, or you can use an existing one, you can link multiple web apps to a single app service plan. So let's deploy this into a specific resource group. And let's give this a Name.
I'm going to call this webapptest172yhz. It needs to be unique. And notice it's using the .azurewebsites.net DNS suffix by default. But you can change that. You can configure a custom DNS domain name or multiple DNS domain names if you wish.
Down below, we can select from either a Code based application where we can select the Runtime stack. So for the language support, notice the variances here of .NET, ASP, Java, Node.js, PHP, Python, Ruby.
A lot of options. And notice that we cannot choose between Linux and Windows when we select a Code based type of application. But if we choose a Docker containerized type of application, we can select from either Linux or Windows for the underlying host that supports that Docker container.
I'm going to go to code-based. And I'm going to put this in a specific region. How about in this particular example since it's near me, I'll select Canada Central. Down below, here's the App Service Plan affiliation. We can either select an existing one if we have it, we don't because there are none showing up in the list.
And so it's selected to create a new one automatically. And it's got a name for it, which is fine. Now I could change that but I'm going to go with that. Down below, the sku and the size. Looks like we have 210 total ACUs. An ACU is an Azure Compute Unit. That's the unit of measurement that's used to reference CPU compute power here for your app service plan. You can change the size, if I click Change size.
Then depending upon what I suspect the workload will be, not only for a specific web app, but if you're having multiple web apps linked with the app service plan, that might dictate how much horsepower you need. So at the top, notice we're looking at some Production pricing tiers. We also have Dev / Test and also Isolated. However I'm not going to change that. I'm just going to close that by clicking the x. I'll leave it as it is. I'm going to click Next: Monitoring> . Now, I'm not going to Enable Application Insights at this point.
But if you really want to track the performance of a web app, especially as you're testing it, to push it into production, you're going to want to do that. But we can turn that on later. Now, if it's not supported for our specific type of configuration, then you'll see that we can't turn it on. So it says Application Insights is not supported for your current selection here, Runtime Stack, Operating System, and so on.
So if we go back, if we were to make a change to some of the selections, let's go choose a Runtime stack. Let's say ASP.NET V4.7.
Okay, now let's go to Next: Monitoring > and notice that Application Insights is now available.
And so it wants to create a new configuration for Application Insights.
So we can choose to either not do that or do it. I'm going to choose No at this point.
Then I'm going to click Next for tags. I'm not going to add any tagged information so I'll click Next: Review + create >. It's going to verify that my selections make sense and that they will work.
And everything looks good. There's nothing that stands out here. So I'm going to go ahead and click Create to build this web application. And remember, it's also going to build our app service plan. We'll take a look at both of those in a moment once they're deployed.
Okay, so what we're going to do is go back home here and go to All resources, only because I want to make sure that we look at both the app service plan and the web app.
So I'm going to deselect all types here, and I'm going to choose App Service and App Service plan.
So we can see our app service plan resource and our web app or app service.
Let's start then by going into the app service plan and just poking around for a minute. So here in the Overview blade for the App Service plan, we can see some common metrics like CPU Percentage, Memory Percentage, Data In, Data Out.
This is all very relevant stuff to look at to determine the performance level of the apps that are linked to your service plan. Now, by the way, if you click on the Apps blade over on the left, you'll see the apps that are part of the service plan.
Currently, as we know, there is only one, our web app or our web app service. We can also take a look at the scaling up blade. So if we decide that, well, maybe we need less horsepower.
We're paying too much and we don't need the power, or we need more juice to be able to accommodate the web application workload.
This is the stuff that we saw when we were creating our web application and service plan. And also choose to scale out horizontally so we can configure auto scaling.
Now that's the app service plan. Let's go back to All resources and let's open up our actual app service or web application.
Because in here, we'll get a lot of details much like we did for the app service plan, but it's much more specific to our app.
So for example, we've got a URL here using the standard default DNS suffix. We've got a Browse button here we can click.
This is what the default page looks like based on my selections.
Naturally, you would change that, of course. But if we scroll down, we'll see some things that are available such as the Configuration blade.
There's a lot of stuff that you can configure here to tweak how your app behaves.
So we've got Connection strings such as for databases, the Default documents that'll be pulled up for different things such as the homepage. You've got Authentication / Authorization options.
So if you choose On here, you can select from quite a wide array of authentication providers such as Azure AD or Facebook, Google, Microsoft account, because by default, it's anonymous access. So we have a number of items here, Custom domains, TLS/SSL settings. We can also see here's where our WebJobs option is, and so on.
So at this point, we have deployed a simple code-based web application.


Docker Web App Deployment
  - Many developers these days deploy applications in containers.
  - A container is a logical isolation boundary in which you will find all of the application components. Now a larger application might consist of multiple containers with different modules or micro services. So luckily, we have an easy way to deploy containerized apps here in Azure. Whether you want to use a public container image, or you have your own private one that's tweaked to your needs.
Let's get started here in the portal. I'll click Create a resource. And just as if you were creating a regular web app as in not container based, you search up web, you click Web App, you click Create.
Now it's during the wizard, during creation, that we'll get to specify that we want a containerized application.
Now when you deploy this into a resource group, in this case, it's, let's say, I want to have a Linux-based VM hosting my containerized app. What I need to do is think carefully about the resource group placement.
I already have a resource group called Rg1 that already has a Windows-based web app. And mixing Windows and Linux when it comes to web apps and Docker containers and so on can cause problems in Azure. So in other words, you should have a separate resource group to deploy a Linux-based containerized app. So that's why I'm going to choose Rg7. There's nothing in there. And down below I have to specify the web app name. I'm going to call this dockerwebapptestyhz. And it's going to use the .azurewebsites.net DNS suffix, I can always change that later with the custom domain.
Now, here Code is the default, we don't want that. But before we switch it, notice we can select a Runtime stack depending on the language we want to use to write the code for our web app. But when you switch to Docker Container, you don't get that. So you have to put everything in the Docker Container. You get to choose whichever language or languages you want to use. So I can choose whether I want Linux or Windows as the back end VM engine. I'm going to leave it on Linux, let's say. And I'm going to put this in Canada Central.
And down below we've got an App Service Plan, it's going to create the App Service Plan. It contains the details about the sizing. We can see here it wants to use Premium V2 P1v2. 210 ACUs, an ACU is an Azure Compute Unit. It's a measure of the compute power that's available. Now that's fine. Having done that, I'm going to click Next to go to Docker. And this is where I can specify if I want to have just a single container.
So for a very small app, or maybe testing a single component, or a single microservice. Or I could have Docker Compose.
Docker Compose is a way to manage multiple related application containers. And you'll find that larger apps consist of multiple containers. In this case, though, I'm going to just go back to the simpler Single Container. And we have to choose where the container image comes from. A container image, you can think of is kind of like an operating system image.
Where it already has an operating system then the files and perhaps some configurations for that OS. And maybe even some apps and configurations. In the same way, a container image has all the software required to run a given piece of software. And maybe any tools and configuration settings available. So we can elect to pull an image from Quickstart. So we've got a couple of standard basic examples here.
This one's based on NGNIX. Or you can go to an Azure container registry that you might have created, where you've got your own private customized images, or maybe you want to go out to Docker Hub.
Docker Hub here lets you store publicly visible images.
And also you can store private ones up there if you have a Docker Hub account.
So let's say I go to Docker Hub. Now when I go to Docker Hub, I can search for something.
Let's say I'm looking for a WordPress type of website. So when I search for WordPress I'll have a lot of different container images.
And specifically here I've got the WordPress official image. And I can see the Docker command on a Docker host to pull down that container image locally would be docker pull wordpress. So wordpress is the name of that image.
That's important because back here in Azure, I need to specify that name here. And there are thousands upon thousands of container images available on Docker Hub.
You can optionally specify a start up command when the container starts. But the container does not house an operating system. That's one of the reasons containerized apps fire up so quickly. It's because they use the underlying OS already running. And in our case that's going to be Linux.
So the validation has passed. Let's go ahead and click Create to deploy our containerized web application. And after a moment, we can see the deployment is complete.
So let's click Go to your resource and let's check it out. So we will have created both a web app service as well as an app service plan.
Let's actually check that out, let's Duplicate this web page in the portal.
Now, we deploy this into a resource group called Rg7, so why don't we open up our navigation bar on the left, check out Resource groups.
And let's just click on Rg7, because in the Overview blade if we look towards the bottom right, we'll see the resources in that resource group.
And there's two of them, there's an App Service plan and an App Service, so that's our application.
All right, so that's fine, let's close the extra windows down we don't need them. So we're browsing our application. Now, depending on the container image you've selected will determine if there's a default webpage within that container.
So if I click Browse, don't be surprised if you don't get anything depending on the image you selected. So if you were to choose, let's say something like MySQL type of container image which is designed for the back end database, not for the front end web app. Well then you wouldn't get a webpage, it would pop-up. Because we selected the WordPress web app, then we do have this sample webpage that did pop-up.
But you can change this at any time, meaning you can change the container image that you're using. If you scroll down, you'll see that you can click on Container settings on the left because this is a containerized type of application.
So we can select the Image source, the same type of stuff we saw when we were creating this app. And we can see it's wordpress here.
You can simply type in the name of a different image, and optionally a tag. So a specific version if you want. And when you do that and Save the change, if you kind of look at the log at the bottom, you'll see new entries about it pulling down your new container. It may take a moment or two but it will do it. So it can pull down the container image and you can change it after the fact. But we have a lot of the same types of settings that we would for a regular web app.
Deployment slots for staging. So you're going to have a default production one that's always running when you build a web app.
You can change from anonymous to some kind of authentication, whether it's through Azure Active Directory, Facebook, Google, and so on.


App Service Plans and PowerShell
In this demonstration, I'm going to use PowerShell to deploy and manage an Azure website. So to get started, I've launched the Cloud Shell here in the portal. I'll just clear the screen.
To build our application, I'm going to use the New-AzWebApp cmdlet. And I'm going to specify the resource group that it will be deployed into. So -resourcegroup name, I've already got one called Rg7, specify that. And I have to specify a name for this. I'm going to call it lob, as in line of business, app1, and I'll just give it a couple of characters to make it unique.
I'm going to specify a location of CanadaEast, or actually how about we put in Canada Central. And next thing I'm going to do is specify an existing app service plan. You can build an app service plan. And remember, web apps are associated with an app service plan. I've already got one called AppSp1 as in service plan 1, let's go ahead and press Enter to see what happens.
And after a moment, we can see our web app has been created and it's currently listed as Running. Let's go ahead and run Get-AzWebApp, and we're going to specify that we want to see them in the resourcegroup Rg7. And we might as well just pipe that to select and tell it, we only want to see the Name instead of all the other details.
I can see there was already an existing web app in that resource group, but our newly created one is now showing up.
And we can also make changes, as well to some settings related to the web app.
Let's just flip over to the portal for a second here.
I'm just going to view my app services or web apps.
And I want to open up the line of business app that we just created.

[Video description begins] He clicks an option labeled "App Services" and a blade called "App Services" opens. It includes a list of web apps. [Video description ends]

So I'm just going to click to open that one up.

[Video description begins] He clicks a web app labeled "lobapp1yhz123" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

Now once that opens up, we can see that indeed, we do have a sample web application. If we browse, it just got the standard welcome page the temporary or default web app page.

[Video description begins] He clicks a button labeled "Browse" and a web page opens in a new tab. It includes the text, "Hey, App Service developers!". [Video description ends]

So this is what it looks like. Let's just close that out.

[Video description begins] He closes the new tab. [Video description ends]

And also, let's just go down to the Configuration of this newly created web app, just to verify that there are no connection strings because we're about to add one by modifying this through PowerShell.

[Video description begins] In the navigation pane, he selects the Configuration option and its corresponding page opens in the content pane. [Video description ends]

So database Connection strings down at the bottom, there's nothing there. So let's go ahead and do that from PowerShell.

[Video description begins] He clicks a button labeled "Cloud Shell" and the PowerShell page opens. The prompt "PS /home/danlachance72>" is displayed. [Video description ends]

So the first thing I'm doing is establishing a variable called $cs for connection string and I'm initializing it as essentially an empty array or hash table. So we do that after the equal sign with an @ symbol, and then open and close curly brace. Next thing we're going to populate it. So $cs and in [ ] I'm creating an item called CustDb. Now I need to configure the value and type for that entry. So after that I'll put an = @{ I'm going to set the value to a sample connection string.

And then I'm going to set the Type to mysql and then I'll close the curly brace. So that's been done. Now we want to use that with the Set-AzWebApp cmdlet. So we're modifying your web app, we want to add that connection string to it. -resourcegroupname, it's Rg7, and the name of the app here was lb and so on. So I've got that there and then I'm going to use the -connectionstrings property and give it our variable $cs, let's press Enter.

[Video description begins] He executes the following command: Set-AzWebApp -resourcegroupname Rg7 lobapp1yhz123 -connectionstrings $cs. The output displays the lobapp1yhz123 web app and its properties. The prompt does not change. [Video description ends]

And it looks like it took so we can verify this by going back to the portal. Let's just Refresh our page here. And let's see if the connection string shows up now, and indeed, it does.
We can click on hidden value to actually see the connection string and the type here is listed as MySQL


Web App Container Image
In this demonstration, I'm going to change the container image used by a Docker based web application.

[Video description begins] The Microsoft Azure portal is open. In the portal, the App Services blade is open. [Video description ends]

So, here in the portal, I'm going to click on an existing web application that uses a Docker container.

[Video description begins] He clicks a web app called "dockerwebapptestyhz". Its corresponding blade opens. [Video description ends]

Now, we know this because if I scroll down in the navigation bar, we'll see Container settings. And that's actually where we want to go.

[Video description begins] In the navigation pane, he selects an option labeled "Container settings" and its corresponding page opens in the content pane. [Video description ends]

When you go to Container settings, you'll see the current association with this app with a container source. So at the top here we can see Azure Container Registry could be used. But what's selected as Docker Hub out on the Internet, or you might have your own private container registry that you've created on-premises. So I'm going to leave it on Public Repository Access for Docker Hub. Currently, it's using a wordpress container image.
However, I can change it to any valid name and version of anything that's available on Docker Hub.
So if I were to open up a new web browser window and go to Docker Hub, we would be able to specify what it is that we want to search for.
So if you search for mysql, you'll have to spell it correctly, of course. Then we'll get a lot of different search results.
And if we were to select, let's say, the first one we would see the Docker CLI command to reference that image to pull it down. docker pull mysql, so we know what's called mysql. So we can learn of the names and the tag information for images in this case, mysql.
We can learn of that easily in this case by going to Docker Hub. Now that I've made that change, I'm going to go ahead and Save it.
Now, it might take a moment or two before that actually gets applied. Because that would have to be then downloaded from Docker Hub. But that's going to be automatic. So if you scroll down and start looking at the date and time stamps.
So you can see where it initially pulled down the WordPress Docker image from the public Docker repository.
That's when it was set up initially. We go that way down towards the end, we'll be able to see that it's going to make a reference eventually that it's downloaded and applied the mysql container image from Docker Hub. And we can see here that we're starting to get messages. Now, I've clicked Refresh here to refresh the log where it downloaded the newer image for mysql. So mysql:latest is how it was tagged. And so we know that that is actually being used now within our web application.


Visual Studio App Deployment
As a software developer, you might use a tool such as Microsoft Visual Studio to create and upload your web application to the Azure Cloud.
Have already downloaded and installed the free Microsoft Visual Studio Community Edition. I've already gone to manage my accounts to specify my credentials to log into Azure.
And I can see my Azure subscription Pay-As-You-Go shown here. And if I examine that further by drilling down under it, I can see for example App Services. In other words, web applications and app service plans.

[Video description begins] In the Cloud Explorer pane, he points to a subnode labeled "dockerwebapptestyhz" under a node labeled "App Services". [Video description ends]

Remember that applications' web apps are tied to a service plan, and you can have multiple apps for a single service plan.

[Video description begins] He points to a subnode labeled "APPSP1" under a node labeled "App Service Plans". [Video description ends]

You can start to examine specific app services.

[Video description begins] He expands the dockerwebapptestyhz subnode. [Video description ends]

And look at the Deployment Slots that might be available for it, such as a testing one we see here and so on.

[Video description begins] Under a subnode labeled "Deployment Slots", he points to a subnode labeled "dockerwebapptestyhz(Testing)". [Video description ends]

But you can also create web applications directly here in Visual Studio and then publish them to Azure. So to get started, I'm going to go to File > New Project.

[Video description begins] A wizard opens. A page called "Create a new project" is open in the wizard. It is divided into two parts. The first part contains several recent project templates. The second part includes a list of templates. [Video description ends]

So in this example for ASP.NET Core web app, I'm going to select that and I'll click Next.

[Video description begins] In the second part, he selects a template labeled "ASP.NET Core Web Application". [Video description ends]

It's going to be called WebApplication4 I've got a local location, that's fine.

[Video description begins] A page called "Configure your new project" opens in the wizard. [Video description ends]

I'm okay with all of that. So I'm going to click the Create button to create this.

[Video description begins] A page called "Create a new ASP.NET Core Web Application" opens in the wizard. [Video description ends]

I'm going to deselect the Docker support. This isn't going to be a containerized app. It could be but I'm choosing not to here. I'll click Create and let it create my project.

[Video description begins] The wizard closes and a tab labeled "WebApplication4" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Publish" is selected and a page called "Publish" is open in the content pane. [Video description ends]

Now realistically, I would then start building my application and making changes to it. However, what I'm going to do here is publish it. So let's assume that we've made changes to our WebApplication4. So over the Solution Explorer towards the upper right, I'm going to right click on it and I'm going to choose Publish.

[Video description begins] He right-clicks a root node labeled "WebApplication4" and a list of options appears. [Video description ends]

I want to publish this as an Azure web application. So here in the main window, I'm going to click Start. And I want this to be App Service.

[Video description begins] He clicks a button labeled "Start" in the Publish page and a wizard opens. A page called “Pick a publish target” is open in the wizard. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "App Service" is selected and its corresponding page is open in the content pane. [Video description ends]

I want to create a new app service in the Azure environment.

[Video description begins] He points to a radio button labeled "Create New" in the content pane. [Video description ends]

So we'll go ahead and click on Publish.

[Video description begins] Another page called “App Service Create new” opens in the wizard. [Video description ends]

And here's the web application name it wants to use, it wants to use a unique name in Azure.

[Video description begins] He points to the name. [Video description ends]

Let's assume that that adheres to our company naming policy for applications in the Azure Cloud. Here's the subscription it will be tied to.

[Video description begins] He points to an option labeled "Pay-As-You-Go". [Video description ends]

And I can specify a resource group one that already exists, or I could let it create one if I really want to.

[Video description begins] He clicks a drop-down list box labeled "Resource group" and a drop-down list opens. [Video description ends]

But what I'm going to do is select an existing resource group, we do have the New button otherwise.

[Video description begins] He selects an option labeled "Rg3 (Canada East)". [Video description ends]

With the hosting plan, we can use an existing type of hosting plan or again, build a new one.

[Video description begins] He points to an existing hosting plan. [Video description ends]

So I'm going to go ahead and click Create.

[Video description begins] He points to a link labeled "New". [Video description ends]

So really all we're looking at here is yet another way to deploy a web app in Azure. The difference being that, as a developer, of course, you have the tools available in front of you to actually make core changes to the functionality of the app.
After a moment, if we look at the output window here at the bottom center of the screen in Visual Studio, we can see the Build succeeded. Looks like everything has been done successfully restart a web app. Let's check it out in the portal. Here are the portal I'm viewing my App Services.
And indeed, there's our newly created web application.
And if we were to click the Browse button at the top of the Overview blade, it would link to the URL and give us our sample page for this application.


App Services Custom Domains
When you deploy a web application or app service in Azure, you get a default DNS domain suffix. Let's take a look at that, because you'll often want to change that.
And that's the purpose of what we're doing here, to configure a custom DNS domain. I'm going to click on an existing web app.
And in the Overview blade over on the right, when it pops up, I will see the URL, the default suffix of which is azurewebsites.net. And I can click the URL, I can click the Browse button, same thing. And depending on the nature of the app will determine what you see next.

[Video description begins] In a new tab, a WordPress web page opens. [Video description ends]

This is an app that has a web front end and it's a simple WordPress page. So that's what I'm seeing. So it is working but it's using the azurewebsites.net name. What if we want to use something different, we want to call it something different.

[Video description begins] He closes the new tab. [Video description ends]

So what I'm going to do then is scroll down in the navigation bar for the web app, and I'm going to go to Custom domains.

[Video description begins] He clicks an option called “Custom domains” and the corresponding page opens in the content pane. [Video description ends]

Any existing custom domains will be shown, we don't have any here, so I want to click Add custom domain.

[Video description begins] A blade called "Add custom domain" opens. [Video description ends]

I want this web app referred to as www.lanchanceit3.com.

[Video description begins] In a text box labeled "Custom domain", he enters the text, "www.lachanceit3.com". [Video description ends]

Where lanchanceit3.com is a DNS domain that I already own and have registered to a public DNS registrar outside of Azure. But I need to make sure or Azure needs to make sure that I really own that. So I'm going to click Validate.

[Video description begins] Several options appear in the blade. [Video description ends]

Here, I can select either CNAME or an A record and down below, it gives me instructions on what needs to be created in my DNS zone.

[Video description begins] He clicks a drop-down list box called “Hostname record type” and points to a list of options. [Video description ends]

Now this is all validated. It says the hostname is available and you own the domain.

[Video description begins] He switches to a tab in which a web page labeled "Domain Manager" is open. [Video description ends]

Well, how did it know? Well, I've already gone ahead and created a CNAME record that is instructed with the value of www and then the actual value of this current name.

[Video description begins] He highlights "dockerwebapptestyhz.azurewebsites.net". [Video description ends]

And now that that's there, it checked for that and that's why we have domain ownership.

[Video description begins] He switches to the Microsoft Azure portal. [Video description ends]

So I'm going to click Add custom domain.

[Video description begins] He points to www.lachanceit3.com in the Custom domains page. [Video description ends]

And we can see now, it's been added here to the list. However, it says Not Secure. It's not been secured with SSL. But that's a whole separate issue. Let's just see here. What happens if we go back to the Overview page.

[Video description begins] In the navigation pane, he selects the Overview option and its corresponding page opens in the content pane. [Video description ends]

And we used to have the default azurewebsites.net suffix, but notice now, we have our custom domain name, lachanceit3.com and then www.

[Video description begins] He points to a URL: "http://www.lachanceit3.com". [Video description ends]

So we can browse to that to make sure that it responds and it works perfectly.

[Video description begins] The WordPress web page opens in a new tab. [Video description ends]

The only thing is that it's not currently secured over HTTPS. But again, that's a separate issue. At this point, we've configured a custom DNS domain name for an Azure Web App.


App Services SSL/TLS Bindings
It's important to secure communications over the Internet to web app by using HTTPS. The S is for secure versus just plain old HTTP. But to do that, you need a PKI certificate. And you need to configure a binding to use that with your web application.

[Video description begins] The Microsoft Azure portal is open. In the portal, the All resources blade is open. [Video description ends]

We're going to do that. So we're going to start by generating a PKI certificate here in Azure. To do that, we need a Key Vault. Luckily, I've got a bunch of them.

[Video description begins] In a search box, he enters the text, "kv" and the search result displays two options. [Video description ends]

So I'm going to filter my list of all resources here for kv, and I've got one called KV1East1, that's Key Vault.

[Video description begins] He clicks an option labeled "KV1East1" and a blade called "KV1East1" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

You can store many different types of secrets in a Key Vault, including certificates. So I'm going to click Certificates.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

I can choose to generate or import one. I'm just going to generate a PKI certificate.

[Video description begins] He clicks a button labeled "Generate/Import" and a blade called "Create a certificate" opens. [Video description ends]

The idea being that I want to use it with an Azure hosted web application. It wants a certificate name. I'm going to call it CustomWebSite1. It's going to be a Self-signed certificate. The subject name will be cn, common name, so cn=www.lachanceit3.com. I've already configured this as a custom DNS domain name for my web application.

[Video description begins] He highlights the text, "www.lachanceit3.com". [Video description ends]

Now, that's important because what people are connecting to in the browser, for example, must match what's in the certificate. Otherwise, it's not going to work properly. It won't be secured.

[Video description begins] He clicks an option labeled "DNS Names" and a blade called "DNS Names" opens. [Video description ends]

For DNS Names, I'm going to click that and over on the right for the DNS Name, I'm going put in the same thing, www.lachanceit3.com. That's my custom DNS domain name. I'll click OK.

[Video description begins] The DNS Names blade closes. [Video description ends]

And that's really all I'm going to do here. So let's get this certificate created. I'll click Create. We're going to reference it in a minute when we go to the web app to enable our TLS or SSL binding.

[Video description begins] The Create a certificate blade closes. [Video description ends]

Now, SSL is deprecated. We should never use it. We should only be using newer versions of TLS for security reasons. Okay, I'm going to go into my navigation bar on the left. Go to choose App Services because I want to go to my web app where I want to use that certificate.
I've got one here, it's called dockerwebapptestyhz
If I click on that, notice in the Overview blade, we'll see the current URL.
It's only using HTTP.
But it is using a custom DNS domain name. And that has to match the subject name in our certificate, the common name, which it does. So let's get this working. I'm going to scroll down on the left, got to go to TLS/SSL settings.
And the first thing that I want to do is make sure I go to Private Key Certificates.
And I need to make sure that I bring one in. I'm going to import a Key Vault Certificate.
Basically, the one we just created.
So I need to select the Key vault, KV1East1.
There's our certificate, CustomWebSite1.
So I'm going to go ahead and choose Select. So after we've imported the Key Vault Certificate here, that's fine.
But the next thing is we can then actually use it for an SSL, or TLS in our case, type of binding.
So to do that, over on the left, I'm going to go to Custom domains where I'm going to see the existing custom domain I have here. But it's not secured.
All we have to do is click Add binding over here on the right.
And we've already brought that certificate in here. So there's my custom domain, Choose certificate.
There it is.
And I'll just choose SNI.
And then I'll choose Add Binding. So what we're doing is binding this self-signed certificate to our custom DNS domain name. And now it says SSL state secure. Well, it shouldn't really say SSL. Because whether you're using SSL or TLS, technically is defined by how your web browsers are configured and how your web server stack is configured. But at any rate, we'll let it go. Let's go up to Overview. Let's just check out what's going on here with the URL to our web application.
Now it says HTTPS. And if we click that to browse to it, it says the site's not secured.
Well, of course, that's expected. It's a self-signed certificate. You can install the public root certificate for the signer if we really wanted to in all our devices to suppress this. I'm going to click Details and say no, it's good. Go on to the web page. We know this.
And there's my web page, which is now being served up over HTTPS.


App Service Deployment Slots
In this demonstration, I'm going to use the Azure Portal to create a deployment slot. You can create deployment slots for testing purposes, so that you can keep a production version of your web app available while having a different URL, so different DNS name, for your deployment slot as you do testing.
And then you can swap out deployment slots. So once your testing is successful, you can make that the production version of the web app. So here's how it's done.
Here in the portal, I'm going to click on an existing web app, open up its navigation bar, and the first thing I'll do is scroll down and choose Deployment slots.
We'll see that there is a default deployment slot for every web app and it's called PRODUCTION, we can see it's currently Running. So what I'm going to do then, is I'm going to click Add slot up at the top.
I'm going to call this one Testing. And I'm going to choose to Clone settings from the original app that we're in in the first place.
When you clone settings, you're cloning things like connection strings, HTTP version settings, and so on. So I'm going to choose to Clone settings from our source web application. Now after a moment, it says it successfully created the slots.
So I'm going to go ahead and click Close, and sure enough we can see the slot is listed here as Running and it shows up as a link. Now that's because we are currently in the PRODUCTION slot.
If I click that link to open up our Testing slot, and in it, it looks and feels just like the whole web application.
But notice at the top, we're in our Testing version of the app, a different deployment slot.
And so when I go down to the Deployment slots from within it, notice that neither shows as a link because we're actually looking at it from the perspective of the deployment slot.
So I'm going to click the X to close out of here.
And I want to make sure we're back on the original app.
Now when I say original app, I mean the real App Service. We can see by looking at the name that we are in the real App Service.
Notice the URL happens to be a custom DNS domain name with an SSL binding.
But notice that if we go back into the Deployment slots, let's do this once again. I'm going to click on the link for the deployment slot. Let's look at its URL in the Overview blade so always keep your eye on the naming up here at the top.
So notice that what we're looking at here is we have a different name for the deployment slot. It doesn't use our custom DNS name at all.
So you get a different DNS name then for that purpose. And if you start making configuration changes, you would do it, for example, in your testing deployment slot. So let's say I go down to Configuration.
And maybe I'll go down and make a change to a connection string used for a database or something like that. So down below, there are no connection strings. Let's say, we want to add one, and I'm doing this in the deployment slot.

[Video description begins] He clicks a button labeled "New connection string" and a blade called "Add/Edit connection string" opens. [Video description ends]

So I'm going to call this BackendDB, and maybe the value is just going to be testdbstring, it's going to be for MySQL. We also can turn on this Deployment slot setting. When we do that, it means that this setting is only for the deployment slot. But I don't want to do that. So it's part of my testing, I'm going to click OK, and I'm going to Save that change.

[Video description begins] He clicks a button labeled "Save" and a pop-up box labeled "Save changes" appears. [Video description ends]

So I'll click Continue. Now the reason I didn't want that to be a sticky setting for the deployment slot only is because based on our testing, if it works out well, then we might want to make sure that that setting is propagated to our production slot. So let's close out of this one. And when I say this one, I'm referring to, if you look at the name, our deployment slot for testing.

[Video description begins] He clicks the "X" icon and the Testing (dockerwebapptestyhz/Testing) blade closes. [Video description ends]

And let's go back to our primary one. So we're in our primary web application.

[Video description begins] He points to the dockerwebapptestyhz blade, in which a page called "Deployment slots" is open. [Video description ends]

What I want to do, actually, we can do it either here in the Deployment slots view, we can Swap, or we can do it from the Overview page. It doesn't make a difference. You could have a swap option there.

[Video description begins] In the navigation pane, he selects the Overview option and its corresponding page opens in the content pane. [Video description ends]

Swapping means you want to take another Deployment slot and make it production, for example. So I'm going to click the Swap button.

[Video description begins] A blade called "Swap" opens. [Video description ends]

And what I want to do is I want the source to be testing, and I want to swap it with the target of production.

[Video description begins] He points to the text, "dockerwebapptestyhz-Testing" in a field labeled "Source". [Video description ends]

Notice down below, it picks up the change, the source change. The source, of course, is our deployment testing slot. That's great. So I'm going to swap this out. So I'm going to click Swap. And essentially, after you've tested your testing deployment slot and the web app store works correctly, by swapping it to production, it results in no downtime.
And so this is as opposed to as in the old days in the 90s and early 2000s, when you might visit a site and see a site under construction webpage, there's no longer a need for that when using Deployment slots. So we can see it successfully completed the swap. I'm going to close out here. So we're still looking at our main application as in not looking at it from the perspective of within a deployment slot.
And if I were to scroll down, let's say, and just go down to Settings and Configuration, I want to take a look at the connection string.
And so when I scroll over to the right, and then of course scroll down, let's see what's going on. Notice that our connection string has been brought over from our testing deployment slot.
So that's just an example of a setting, as opposed to actually change the content in the site, that comes across when you perform the swap.


App Service Scaling
  - When you deploy an application in the Azure Cloud, sometimes you won't know how much underlying horsepower you're going to need
    - Or how many virtual machines you'll need to support the workload
  - We're talking here both about vertical scaling with horsepower, and horizontal scaling with the number of nodes supporting an application
    - Luckily, we can change that after the fact
    - Remember that when you deploy a web app in Azure, it needs to be associated with an App Service plan
    - The App Service plan is actually where you configure the scaling
  - Take a look at this first from the perspective of an application, a web application service. So when I click on the web app to open it up, if I scroll down in the options, I'll see that I have Scale up and Scale out.
Now, it says, App Service plan, here in parentheses. So, what I could also do is look at this from the perspective of the App Service plan.
Let me open up an existing App Service plan here called APPSP1.
We'll see the exact same thing here.
Under Settings, we'll see Scale up and Scale out.
The scaling up or down means you're either increasing or decreasing respectively the horsepower, like number of CPU compute units, or ACUs, Azure Compute Units, as they're called for web apps.
Scaling out would be for horizontal scaling, adding or removing virtual machine nodes.
Let's start here with scaling up. Currently we can see our current pricing tier, 210 total ACU, 3.5 gig of RAM.
Let's say that we've determined that for the web apps associated with this App Service plan, remember, when you go to Apps, you will see one or more apps associated with this service plan.
We also see we have a deployment slot here too.
So they are all consuming the resources that you would see here under Scale up, they are all together consuming the ACUs, the Azure Compute Units, and the 3.5 gig of RAM.
So you might find over time that it's just not enough, and if that's the case, you can Scale up.
So let's say we're going to switch it over to 420 total ACU 7 gigs of RAM.
So I just simply select that and choose Apply.
Now as you might guess, you're going to pay more for this. So only do this, if you need it. Also, if you're just experimenting with these web applications in Azure, make sure you delete them when you're finished.
Of course, not if you're using them for business purposes, but, because if you don't remove them, and they're left running constantly, you are paying for that, even though you might not be using it.
So be very careful with that. So at this point, if we're looking at our notification bar, it currently updated our service plan.
We are now using the P2V2 pricing tier for production.
We also have scaling out options.
Currently, we can manually scale, pretty now we've got an instance count of 1.
So we could manually drag the slider over to determine how many underlying instances are available for our applications.
Now this is the number of instances of course that are available for the apps associated with this App Service plan, we looked at that under the Apps blade.
We could also choose auto scaling instead of just manually setting a fixed number of virtual machine workers.
So we can go down here and we could specify a metric.

[Video description begins] He points to a drop-down list box labeled "Metric name", in which an option labeled "CPU Percentage" is preselected. [Video description ends]

And we might say that after a metric has been violated or exceeded, we'll say, let's Add a rule here for that.

[Video description begins] He scrolls down through the blade and points to a text box labeled "Metric threshold to trigger scale action" with the text "70". [Video description ends]

Then we can add or remove virtual machine nodes.

[Video description begins] He points to a text box labeled "Instance count" with the text "1". [Video description ends]

So we could specify after the CPU percentage gets to a specific value, CPU percentage, then we could specify that we want to start adding items.

[Video description begins] He clicks an icon labeled "X" and the blade closes. [Video description ends]

So when it's greater than 70%, duration of 10 minutes, then we can tell it we want it increased by a single instance.
    - So we do have the option to enable horizontal scaling as well.
    - I'm just going to Discard those settings.
  - Currently, all we've really done here is juiced up the underlying Azure Compute Units or ACUs, and the amount of RAM available to the apps associated with this App Service plan.


App Service Backup
  - You can easily configure backup for an Azure web application using the portal, in the portal we've already navigated to an existing web application
And in the navigation bar, I'm just going to scroll down under Settings and choose Backups.
Backup has not been enabled here. So we can see it says, Backup is not configured. Click here to configure it. So we could do it there or we could click the Configure button at the top, it makes no difference. We have to think about where we want the backups stored.
So it says, Storage not configured. We're going to change that, so I'm going to click right on that.
I'm going to select an existing storage account where I want backups to be stored.
And I'm going to add a Container.
I have to create a container here with the name of my web app, -backup. And I'll leave the Public access level to Private.
And I'm going to Create this container.
That's where I want these backups for this app to be stored.

[Video description begins] He selects the lobapp1yhz123s-backup container. [Video description ends]

So I'm going to go ahead and select that container and click the Select button at the bottom. So now it has that.
Next is scheduling. Do you want to backup manually or do you want it to be on an automated schedule? I'd like an automated schedule. So I'll click On.
And down below, we can see it's set to backup once every day.
Now having done that, that's fine. But I'm going to scroll down exactly when. So we can tell it when, on which date, we want to start the schedule. And the timing, well, I can change the timing or I can leave it as it is.
So let's say we want this to happen at, 7 o'clock PM. And of course, we have to select the appropriate time zone when we want that backup to kick in. The default retention value is 30 days, I'm going to leave that. And if we have backups of databases, then that would be probably a good idea if your application consists of them. But we don't have any within this web application. So we don't have to worry about selecting databases to be backed up.
At this point, I'll click Save and our Backup Configuration is now saved.
Now we can see the schedule is reflected here when the backup will next occur. However, what we can also do is start the backup.
So I'm going to do that by clicking directly on the Backup button. And it says, Successfully submitted backup request. Excellent, so now we've got both a scheduled backup, and at the same time we've manually started one.
Back here on this main page where we clicked the Backup button, notice at the bottom the status says that the backup is currently in progress for our web application. So depending on how much content there is, and whether there are backend databases that contain a lot of data, will determine the size, which we see here is currently 0 MB, and how long it takes for the backup to occur.
And you can click the Refresh button and eventually you'll see that the backup Succeeded. We can see the backup date and time. We also have the option of clicking Restore. So there's no point in taking backups if you're not at least going to periodically test that Restore works correctly.
So for the Restore source, I'm going to choose App backup and we can select the backup. We only have one here.
And we can determine the target App Service application or the web app where we wanted to restore this to. Let's just scroll over just a little bit so we can see a little bit more of what's happening. So the default is to Overwrite the destination.
But we could tell it that we want to select a new or another existing app to restore this backup to. And we can determine if we want to ignore conflicting host names when we restore or ignore the databases as part of the restore. And then we would go ahead and click OK to begin restoring from the backup.


Azure Batch Overview
Azure Batch is a cloud service in Azure that's used for automation and job scheduling. So what it's really about is Batch processing for on-demand jobs against a pool of computers.
So parallel processing or High-Performance Computing, HPC, you could say. Azure Batch requires you to first create an Azure Batch account. Next, within that, you can define a pool, which is the configuration for the operating system details related to the virtual machines that will run your batch jobs. You can then define a job and associate it with a pool.
So Azure Batch begins with uploading scripts or apps that will handle your workloads, whether it's for some kind of engineering application, or climate modeling, or some kind of medical model of some kind. The next thing that you need to do is make sure you create a job, after which you can add job tasks.
The job tasks, and you can get away with one task within a job, is what actually triggers running things like scripts or executables. Finally, you can schedule this to occur, either one time or on a recurrent interval. Now bear in mind, that you're going to need to make sure your Azure Batch account is associated with the storage account.


Azure Batch Accounts
  - In this demonstration, I'm going create an Azure Batch account. I'll create a Batch account so that I can define jobs I want to run on demand or on a schedule basis against a pool of VMs.
So this is for batch processing of jobs. You don't need the compute power all the time.
So to start, I'll click Create a resource and I'm going to search for Batch.
And then, I'm going to choose Batch Service. And then I'll click Create.
Okay, first thing I need to do is select a Resource group I want to deploy this Batch account into and give it a name.
I'm going to call this BatchEast1. Now notice it says it's not valid, it's because of the uppercase letters.
So let's just go ahead, put lowercase letters and it loves it. We'll put this in Canada East. I'll just click Next for Advanced.
Pool allocation mode, the pool is the collection of VMs that will process your Batch jobs.
I'm going to let it be handled by the Batch service, so that's fine. Next, no tags.
Let's make sure the validation has passed, it has.
Let's create the Batch account by clicking Create.
And after a moment that deployment is complete. Let's click, Go to resource and let's poke around a little bit.
Now the first thing that we want to really do here actually is link this Batch account with an Azure Storage account. So I'm going to click Storage account over on the left.
Now you do this because depending on the nature of your job tasks that you're going to have running through Azure Batch. They might reference resources stored in the storage account, such as data files if you're doing big data processing.
Or you might need a storage account to store the output or the result of running your Batch jobs. Either way, I'm going to click Select a storage account. And I'm going to go ahead and choose one that I've already got created.

[Video description begins] He selects a storage account labeled "storacct333325" and the blade closes. [Video description ends]

All right, even though it's in a different region, it's okay. It still adds it, it's all good to go. So now that we've got the storage account associated with it, let's just go back to the Overview for a moment.

[Video description begins] He opens a window called "BatchExplorer: Login to Azure Public(Default)". [Video description ends]

You can also download the BatchExplorer GUI tool for free if you want to manage your Batch account using this interface instead of the portal. So I'm just going to go ahead and sign in with my Azure credentials so we can at least see it.

[Video description begins] A page called "Batch Explorer" opens in the window. In the window, several tabs are displayed. A tab labeled "Dash" is open. It is divided into two parts: navigation pane and content pane. [Video description ends]

So when I sign in, I can see over on the left, it's discovered in my pay-as-you-go subscription that we've got a Batch account called batcheast1 in canadaeast. We can also create a New Batch account over here. So I'm just going to go ahead and double-click on it.

[Video description begins] In the navigation pane, he double-clicks a batch account labeled "batcheast1" and its corresponding information is displayed in the content pane. [Video description ends]

And here I have all these great little metrics, Failed tasks, core number of minutes, things we're running, Task states, Current node states. I can also view Jobs, Job schedules, and Pools.

[Video description begins] He opens a tab labeled "Certificate". [Video description ends]

Packages for applications, perhaps PKI certificates that would be used for each pool virtual machine to authenticate to an external service. Back here in the portal we can also see we have the Open in Batch Explorer button here on the Overview blade.

[Video description begins] He switches to the Microsoft Azure portal, in which the batcheast1 blade is open. [Video description ends]

And we also have a few metrics here that we can see like the vCPU and Failed tasks, and so on. If you're going to be creating custom software that you want to run in Azure Batch, then you'll probably want to know which key to use.

[Video description begins] In the navigation pane, he selects an option labeled "Keys" and its corresponding page opens in the content pane. [Video description ends]

You've got Keys here that you use to authenticate, you've got a primary and a secondary key, it doesn't matter which one.

[Video description begins] He points to fields labeled "Primary access key" and "Secondary access key". [Video description ends]

You've also got the Batch account name and the URL and the ID and so on for the storage account. But the primary and secondary access keys can be used when you require programmatic access using the Batch API for Azure.


Azure Batch Applications
When you configure Azure Batch you need to configure job tasks. And a task can reference scripts or programs such as executable programs that are used to do some kind of Batch processing, whether it's big data analytics, or whether it's looking at genetic engineering research, or climate modeling, or financial model, could be anything. So here on-premises, I've got a custom app executable.

[Video description begins] The File Explorer window is open. In the window, a folder labeled "Tmp" is open. It contains a file labeled "CustomApp1.exe". [Video description ends]

And what I need to do is zip it up. So I can just right-click and use tools such as 7-Zip to add it to an archive, which I'm going to do.

[Video description begins] He right-clicks the CustomApp1.exe file and a shortcut menu opens. [Video description ends]

It's going to be CustomApp1.zip, and I'll click OK.

[Video description begins] A dialog box labeled "Add to Archive" opens. [Video description ends]

Because that is what I can then upload as an app into my Azure Batch account.

[Video description begins] The dialog box closes. A folder labeled "CustomApp1.zip" appears. [Video description ends]

So here in the portal, I've navigated into my Batch account where I'm going to start by scrolling down and choosing Applications.

[Video description begins] He opens the Microsoft Azure portal. In the portal, the batcheast1 blade is open. [Video description ends]

From here, I'm going to click the Add button.

[Video description begins] A corresponding page opens in the content pane. [Video description ends]

I have to give this a couple of details, I've got to fill in an Application id a Version number, and then I have to select the Application package.

[Video description begins] A blade called "New application" opens. [Video description ends]

In this case, it's our on-prem zip file. So the Application id, I'm going to call this CustomApp1, Version number let's say, 1.0 and I'm going to select the file. So there it is CustomApp1.zip. Let's go ahead and Submit that.

[Video description begins] He clicks a button labeled "Submit". An application labeled "CustomApp1" appears in the page. [Video description ends]

Back here, my on-premises system, if you've got other files, here I've got a PowerShell Script called AnalyzeData.

[Video description begins] He switches to the File Explorer window. In the window, the Tmp folder is open. [Video description ends]

Well, you can zip that up as well.

[Video description begins] He points to the CustomApp1.exe file and another file labeled "AnalyzeData.ps1". [Video description ends]

And we could have zip them both up at the same time and put them in one zip file, but I'm going to go ahead and zip this up separately.

[Video description begins] He points to the CustomApp1.zip folder. [Video description ends]

So I'll just add it to an archive again.

[Video description begins] He right-clicks the AnalyzeData.ps1 file and a shortcut menu opens. He selects an option labeled 7-Zip. A flyout opens. He then selects an option labeled "Add to archive". The Add to Archive dialog box opens. [Video description ends]

And it's going to be called AnalyzeData.zip.

[Video description begins] He clicks a button labeled "OK" and a folder labeled "AnalyzeData.zip" appears. [Video description ends]

As you might guess back here in the portal, I'm going to click the Add button to add that as another application.

[Video description begins] He switches to the Microsoft Azure portal. In the portal, the batcheast1 blade is open. In the navigation pane, an option labeled "Applications" is selected and its corresponding page is open in the content pane. [Video description ends]

Now you might not want the package together if you plan on using them separately.

[Video description begins] The New application blade opens. [Video description ends]

But if you plan on using them together, make sense put them in the same zip file. This is going to be called Analyze Data PowerShell Script. I'm going to call it and Version will be 1.0 again. It doesn't like my spaces. So I'm just going to replace that with underscores.

[Video description begins] In a text box labeled "Application id", he enters the text, "Analyze_Data_PowerShell_Script". [Video description ends]

That's fine and then I'll select that Application package here.

[Video description begins] He selects a file labeled "AnalyzeData.zip" under a field labeled “Application package ” [Video description ends]

Once that's done, I'll click Submit and we'll have two applications added to add our Azure Batch account as we can see listed here.

[Video description begins] The New application blade closes. An application labeled "Analyze_Data_PowerShell_Script" appears in the page. He points to the Analyze_Data_PowerShell_Script and CustomApp1 applications. [Video description ends]

You can also click on an application you've added to the Batch account here and you can add more items within it.

[Video description begins] He clicks the Analyze_Data_PowerShell_Script application and a blade called "Analyze_Data_PowerShell_Script" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. It includes a table with a single row and several columns. [Video description ends]

What I could do there, I'll be adding versions.

[Video description begins] He points to a button labeled "Add". [Video description ends]

Currently we can see we've got version 1.0 of our zip file, and we can see the last activation time so when it was brought into the Batch account.

[Video description begins] In the table, he points to row entries labeled “1.0” ,“zip” and “Mar 31, 17:24:43” under column headers labeled “name” ,“Format” and “Last activation time” respectively. [Video description ends]

And you can use the menu on the right to either Delete that version or even Update it.

[Video description begins] Adjacent to the row, he clicks an icon labeled "Context menu" and a menu opens. [Video description ends]

If you've got a new version for example of the PowerShell Script with changes that were required, or you could keep multiple versions because you could add a version 2.0, if you need to run an old version of something in a new version of something.

[Video description begins] In the menu, he clicks an option labeled "Update" and the New application blade opens. [Video description ends]

Remember, these are applications that will be used for Batch job processing.

[Video description begins] He clicks an icon labeled "X" and the New application blade closes. [Video description ends]

You might need an older version for handling certain types of file formats, for example, and a newer version to handle newer versions of those files that might need to be processed.
So maybe I'll put in version 2.0.
And I could upload another application package which I will do and I'll Submit it.
So what we'll see then is that we've got if I just click Refresh that we've got two versions of that app within a single application.
That's how it's stored.
So there's a bit of a hierarchy here, when you're working with these applications.
The applications ultimately get used when you start creating pools of virtual machines.
You can associate many items with a pool, including these application packages.


Azure Batch Pools
Here in the portal, I've already got an Azure Batch account created.
And I've already added a couple of applications such as scripts or custom apps, maybe executables that'll be used for job processing.
So now what I'm going to do is configure a pool within this Azure Batch account. The pool defines some details related to the horsepower that's actually going to get the job done.
In other words, virtual machine nodes. So under Pools, I'm going to click Add.

[Video description begins] A blade called "Add pool" opens. [Video description ends]

And I'll have to fill in well, quite a few details to be honest. The first of which is a Pool ID. Let's call it poolab567, just an ID. And the Display name here will be Pool1. Down below, I have to choose the location where I want to grab virtual machine images from.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Image Type", and a drop-down list opens. [Video description ends]

So the standard Azure Marketplace, or maybe a Custom Image. I might have a Shared Image Gallery, or just a pure Custom Image, not shared at all. Or I might want to use a virtual machine image designed or optimized rather for Graphics and rendering, if that's the nature of my Batch jobs. But here I'm just going to choose Marketplace.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Publisher", and a drop-down list opens. [Video description ends]

Publisher, in this case, microsoftwindowsserver, the offer's filled in with windowsserver. And then I choose the details here, let's say 2016-datacenter with a smalldisk.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Sku", and a drop-down list opens. [Video description ends]

Maybe I know that the nature of the VM itself is that it won't need a lot of storage space. Because maybe my running task, whether it's a script or an exe is coded to maybe retrieve data feeds from a storage account, or something like that. So that's fine. So I don't need any additional data disks for that. And as I scroll down, I can select the sizing for each individual VM node within the pool that we're defining right now.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "VM size (View full pricing details)", and a drop-down list opens. [Video description ends]

And I could even Auto scale this.

[Video description begins] He sets a toggle button to an option labeled "Auto scale" adjacent to a field labeled "Mode". [Video description ends]

So I could write a formula to determine when items should be auto scaled, when we should start adding nodes.

[Video description begins] He points to a text box adjacent to a field labeled "Formula". [Video description ends]

For help, you can click the link down below to view some samples of what those formulas might look like.

[Video description begins] He clicks a link labeled "Click here to view sample autoscale formulas" and a blade called "Sample autoscale formulas" opens. [Video description ends]

So we see an example over here on the right where we can see it's setting the target dedicated nodes, or you can just leave it at Fixed.

[Video description begins] In the blade, he points to a line of code "$TargetDedicatedModes = $isWorkingWeekdayHour ? 20:10;". [Video description ends]

We aren't actually going to be running this, but you should have at least a minimum of 1.

[Video description begins] In the Add pool blade, he sets the toggle button to an option labeled "Fixed" adjacent to the Mode field. He then closes the Sample autoscale formulas blade. [Video description ends]

Well actually, let's do that. Let's set 1 target dedicated node. You'll see why in a moment. We can also determine if there should be a Start task that we want to configure here which would be executed when a new VM joins the pool.

[Video description begins] He opens a drop-down list box adjacent to a field labeled "Start task" and selects an option labeled "Enabled". [Video description ends]

But that doesn't apply here. So I'm just going to choose Disabled. And I'm going to go down and associate this pool with an existing application package.

[Video description begins] He selects an option labeled "Application packages" and a blade called "Application packages" opens. [Video description ends]

Now the application package will have software, whether it's scripts, or what not, or executables that we want to use for job processing.

[Video description begins] He clicks a drop-down list box under a field labeled "Application" and a drop-down list opens. [Video description ends]

So let's say I've got a PowerShell Script here, maybe I want the second version of it, and maybe I've got custom app here.

[Video description begins] In the drop-down list, he selects an option labeled "Analyze_Data_PowerShell_Script". A new drop-down list box appears under the Application field. [Video description ends]

Let's see what we got for only version 1.0, okay.

[Video description begins] He clicks a drop-down list box under a field labeled "Version" and a drop-down list opens. He then selects an option labeled "2.0". A new drop-down list box appears under the Version field. [Video description ends]

So version 1.0 of that, these were already created here within the Azure Batch account.

[Video description begins] He clicks the new drop-down list box under the Application field and a drop-down list opens. He then selects an option labeled "CustomApp1". A new drop-down list box appears under the Application field. [Video description ends]

So I'm going to Select that.

[Video description begins] He clicks the new drop-down list box under the Version field and a drop-down list opens. He then selects an option labeled "1.0". A new drop-down list box appears under the Version field. [Video description ends]

And I have to associate this with the virtual networks.

[Video description begins] He points to the Analyze_Data_PowerShell_Script and CustomApp1 options selected in the drop-down list boxes. [Video description ends]

So, because really, we are going to be running virtual machines, it's just that this is a managed service.

[Video description begins] He clicks a button labeled "Select" and the blade closes. [Video description ends]

It'll take care of a lot of the underlying work for us.

[Video description begins] In the Add pool blade, he selects an option labeled "Network Configuration Select a virtual network" and a blade called "Choose virtual network" opens. [Video description ends]

We're just giving it some details.

[Video description begins] He selects an option labeled "Vnet2" and the blade closes. [Video description ends]

So Vnet2, let's say I want the VMs to run in Subnet1.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Subnet" and a drop-down list opens. He then selects an option labeled "Subnet1". [Video description ends]

I don't want the VMs to have public IPs unless they need them perhaps to access an external service to perhaps ingest data. And I don't have any existing Server licenses, No.

[Video description begins] He points to a toggle button labeled "Already have a Windows Server license?", which is set to "No". [Video description ends]

So I'll click OK.

[Video description begins] The Add pool blade closes. A message appears with the text, "Pool 'poolab567' was created successfully". A pool labeled "poolab567" appears and adjacent to it, an icon labeled "X" is present. [Video description ends]

Well, the pool was created successfully, but this little red circle with an X doesn't look good.

[Video description begins] He clicks the poolab567 pool and a blade called "poolab567" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

What's up with that? Let's click and let's read. The specified account has reached core quota. Click here for details.

[Video description begins] He clicks a link labeled "The specified account has reached core quota. Click here for more details" and a blade called "Resize errors - poolab567" opens. [Video description ends]

Okay, doesn't really tell us much. Alright, remember how we set the fact that we wanted one node, we didn't use auto scaling. Well, let's take a look here.

[Video description begins] He clicks an icon labeled "X" and the blade closes. [Video description ends]

Let's go back into our Batch account here, and let's scroll up here and go into Quotas.

[Video description begins] He switches to the batcheast1 blade. [Video description ends]

There are some default quota values here for a number of items.

[Video description begins] A corresponding page opens in the content pane. [Video description ends]

Such as the maximum Active jobs and schedules, the maximum number of Pools you can create in this account. And if we look down below, how many Low-priority vCPUs for VMs can we have, 0. Total dedicated VCPUs, 0. No wonder we have a problem. Okay, so that's not a good thing, but it's not a big deal. All we have to do is request a quota increase from Microsoft. To do that, I just click the link, I'm just following what's there in front of me with the messages.

[Video description begins] He clicks a button labeled "Request quota increase" and blade called "New support request" opens. In the blade, a tab labeled "Basics" is open. [Video description ends]

And for the selected option, it's Azure services, the issue here would be a Service and subscription limit quota increase.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "What is your issue related to?" and a drop-down list opens. He then selects an option labeled "Azure services". [Video description ends]

And there are few other details to specify, the quota type here is going to be for Azure Batch.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Issue type" and a drop-down list opens. [Video description ends]

So I'll click the Next Solutions button.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Quota type" and a drop-down list opens. [Video description ends]

We just have to then target a specific Batch account in a region where this is an issue for us.

[Video description begins] A tab labeled "Details" opens in the blade. [Video description ends]

So to do that, I'll have to click Enter details first.

[Video description begins] A blade called "Quota details" opens. [Video description ends]

And for the location here, let's just choose Canada East, only because I know that's where my Batch account is located.

[Video description begins] He clicks a drop-down list box labeled "Location" and a drop-down list opens. [Video description ends]

And I can tell it that look, I know I'm going to want to use D Series VMs in my pool.

[Video description begins] He then clicks a drop-down list box labeled "Batch account" and a drop-down list opens. He then selects an option labeled "batcheast1". [Video description ends]

So it really depends on your pool config, the sizing. But assuming that that was applicable, the Current limit is 0.

[Video description begins] He clicks a drop-down list box labeled "Select Quotas to Update (current values shown in parenthesis)" and a drop-down list opens. He then selects a checkbox labeled "D Series (0)". [Video description ends]

We could say, I want the New limit to be 2, or whatever the value is. However, we would click Save and continue, but I'm not going to I do that because I don't actually want to request that quota increase. So at this point, we've got the pool created within the Azure Batch account.
Azure Batch Jobs and Schedules

[Video description begins] Topic title: Azure Batch Jobs and Schedules. The presenter is Dan Lachance . [Video description ends]

When you want jobs to be processed through Azure Batch, you have to define jobs and schedules. So here in the portal, I'm looking at an existing Batch account.

[Video description begins] The Microsoft Azure portal is open. In the portal, the batcheast1 blade is open. [Video description ends]

And in the navigation bar, I'm going to scroll down under Jobs. I've already got an application in a pool configured a pool of VMs.

[Video description begins] In the navigation pane, he points to the Applications and Pools options. [Video description ends]

So I'm going to go to Jobs.

[Video description begins] A corresponding page opens in the content pane. [Video description ends]

So we're going to add a job and then within that, we're going to add at least one task. So I'm going to start by clicking Add.

[Video description begins] A blade called "Add job" opens. [Video description ends]

Let's get the job defined first. So job, put in a unique value here.

[Video description begins] In a text box labeled "Job ID", he enters the text "jobyhz56". [Video description ends]

And I'm going to select a pool, I have to associate the job with the pool.

[Video description begins] He clicks an option labeled "Pool Select a pool to run the job on" and a blade called "Select pool" opens. [Video description ends]

We've already got a pool created.

[Video description begins] He points to a pool labeled "poolab567". [Video description ends]

So I'm going to select it from the list and choose Select. There it is.

[Video description begins] The Select pool blade closes. The Pool Select a pool to run the job on option changes to "Pool poolab567". [Video description ends]

And that's it. I don't need any advanced settings or anything like that. I'm going to click OK. So there's the job.

[Video description begins] The Add job blade closes. A job labeled "jobyhz56" appears in the page. [Video description ends]

However, I need to go into the job and within it, add at least one task to actually get something done.

[Video description begins] He clicks the jobyhz56 job and a blade called "jobyhz56" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Tasks" is selected and its corresponding page is open in the content pane. [Video description ends]

So I'm going to click Add.

[Video description begins] A blade called "Add task" opens. [Video description ends]

And I'm going to enter a Task ID, and then a Display name, Run PowerShell, actually Run custom app, let's say Run custom app.

[Video description begins] He enters the text, "taskyhz24" in a text box labeled "Task ID". [Video description ends]

And let's say I've got a custom app called customapp1.exe.

[Video description begins] He enters the text, "customapp1.exe" in a text box labeled "Command line". [Video description ends]

Now that, of course, would be pulled from an application package. So customapp1.exe and I can determine how long it's allowed to run.

[Video description begins] He clicks the Application packages option and the Application packages blade opens. [Video description ends]

And down below, I'm going to associate with an application package that I've already uploaded with that executable can be found, so that would be in CustomApp1.

[Video description begins] Under the Application field, he clicks the drop-down list box and the drop-down list opens. He then selects the CustomApp1 option. [Video description ends]

And I want version 1.0, and I'll choose Select.

[Video description begins] Under the Version field, he clicks the drop-down list box and the drop-down list opens. He then selects the 1.0 option. [Video description ends]

Okay, so, at that point, we're ready to go, ready to Submit the task at least.

[Video description begins] The Application packages blade closes. [Video description ends]

So we've got a task within the job.

[Video description begins] He clicks a button labeled "Submit" and the Add task blade closes. A task labeled "taskyhz24" appears in the page. [Video description ends]

Let's go back here, because now I want to schedule a job.

[Video description begins] He switches to the batcheast1 blade. [Video description ends]

I don't need Certificates here because I don't have any of my scripts or custom apps that will need to authenticate with specific types of services.

[Video description begins] In the navigation pane, he selects an option labeled "Job schedules" and its corresponding page opens in the content pane. [Video description ends]

So I'm going to need to do that.

[Video description begins] In the navigation pane, he points to an option labeled "Certificates". [Video description ends]

Job schedules. Let's Add a schedule.

[Video description begins] He clicks a button labeled "Add" and a blade called "Add job schedule" opens. [Video description ends]

So I need a Job schedule ID. So I'm just going to fill in some details here.

[Video description begins] He enters the text, "job123567" in a text box labeled "Job schedule ID". [Video description ends]

The Display name, I'm just going to call it Job1. And sometimes, you might need to specify metadata for, well, it really depends on your scripts or your applications that you're running and what services they're talking to. However, I'll leave that empty for now. And I'm going to tell it I want it to run on a particular day.

[Video description begins] In a text box labeled "Do no run until", he clicks an icon and a calendar opens. He then selects a date "03/31/2020". The text, "12:00 AM" is populated in a text box adjacent to the Do not run until text box. [Video description ends]

Now it says here it has to run after certain date and time based on the current time right now.

[Video description begins] An error message appears with the text, "The value must be on or after 03/31/2020 5:41:21 PM. [Video description ends]

So I'm just going to put here, let's say 5:43 PM and it likes that.

[Video description begins] In the text box, he alters the text to "5:43 PM". [Video description ends]

It's going to be a Recurrence interval of Disabled. I just want it run one time and I have to click Update here to associate it with an existing pool. So I'm going to go ahead and choose that from the list.

[Video description begins] The Select pool blade opens. He selects the poolab567 pool. [Video description ends]

And then I'll choose Save. There's the pool it's selected.

[Video description begins] The Select pool blade closes. In a text box labeled "Pool ID", the text, "poolab567" is populated. [Video description ends] \

I can determine down below things like if I want an unlimited of time for this to run or retry count.

[Video description begins] He points to a toggle button labeled "Max wall clock time" set to "Unlimited" and then point to a toggle button labeled "Max task retry count" set to "None". [Video description ends]

And maybe what to do when tasks complete. However, I'm just going to go ahead and click Save to save the schedule.

[Video description begins] The Add job schedule blade closes. A job schedule labeled "job123567" appears in the page. [Video description ends]

So now we've got a job schedule, I can click on it.

[Video description begins] He clicks the job123567 job schedule and a blade called "job123567" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

Now I can check up on it to see if it's run by going under Execution info. Now there's no end time here, it says n/a so it's not yet run. So I can click Refresh if it's suppose to run soon to make sure that I see the results of running that job.

[Video description begins] He points to a link labeled "job123567:job-1" adjacent to a field labeled "Recent job id". [Video description ends]

And so after a few minutes, we can see here we've got a Recent job id, it's a link. I'm going to click on it to open it up and here we can get some stats as to where there's an active job currently it's running, what succeeded and what failed.

[Video description begins] A blade called "job123567:job-1" opens. [Video description ends]

Now, if we don't have anything that succeeded or fail, what does that mean? It could mean the job is still in the midst of running.

[Video description begins] He clicks a button labeled "Refresh" and the blade refreshes. [Video description ends]

Or it could mean that there's a problem.

[Video description begins] He clicks an icon labeled "X" and the blade closes. [Video description ends]

Now you can follow this link with the recent job URL here.

[Video description begins] He highlights a URL labeled "https://batcheast1.canadaeast.batch.azure.com/jobs/job123567:job-1" adjacent to a field labeled "Recent job url". [Video description ends]

Just paste that into another web browser window, which I'll do here. And you might gain some insight here we can see, well, it's not a big deal.

[Video description begins] A web page opens in a new tab. It includes several lines of code. [Video description ends]

We're just missing some items here. So the parameter value for api-version, for example, has not been supplied.

[Video description begins] He highlights a line of code, "key":"QueryParameterName","value":"api-version". [Video description ends]

So depending on your scripts or your code. If it's not using this specific value, such as in an HTTP request header, then you might get this kind of result.


Azure Container Solutions
Azure Kubernetes Service, otherwise called AKS, deals with application containers in plural. It's an orchestration solution, if you've got an application or some kind of dependency between multiple containers. You can even migrate existing application containers that you might have on-premises into the Azure cloud, or you can define your AKS cluster and work with brand new containers.
So it's clusters of containers, which means you'll have to specify some details about things like sizing for the nodes within the cluster. AKS replaces the older Azure Container Service or ACS that you might see some literature reference.

[Video description begins] Application Containers. [Video description ends]

An application container, as we see in the diagram, is a logical boundary in which we run an application, or an application component. I say that because you might have a larger app that uses multiple containers, each container runs its own specialized task or micro service. They all work together. So pictured in the diagram, we've got application containers running across the top, labeled as APP A, B, C, all the way through to G. Now, this runs on top of an operating system, a host OS, as we see labelled here, that would be running, for example, the Docker Engine.

And the binaries and libraries that might be referenced by our APP Components within the containers. Some of those might be within the container themselves, or they can be referenced by the container. Containers really show up as processes running in the host OS. So unlike a virtual machine, they don't contain the OS. They use the underlying existing OS it's already running. So containers start up very quickly because of this. So containers are based on container images, just like you might use an OS image to reimage a computer, if it's not behaving correctly.

The image itself contains software, and perhaps settings for running a container. So you could say that a container is a runtime instance of an image. In the container, you'll have application software components and settings, whether it's custom software or commercial off the shelf software. Maybe some app-specific libraries, maybe a runtime environment, and also some tools. All of this can exist within a single container.

[Video description begins] Azure Kubernetes Service. [Video description ends]

AKS, then, can be deployed using the CLI, using the portal. You can also manage it using Azure Cloud Shell, including using the kubectl, or kube control command line tool. You'll be used to that if you already have experience running Kubernetes outside of the Azure environment.


Azure Kubernetes Service
Azure Kubernetes Service is a container orchestration service. Now, often instead of saying Azure Kubernetes Service, we'll call it AKS. Where we can have individual containers that run applications or application components, what if we have multiple containers, maybe a big app consists of multiple micro services, each of which is in a container.
You need a way to schedule when they should load up, and when to monitor them, and what kind of state they should be running in. And that's where Azure Kubernetes Service comes in. Let's click Create a resource, and I'm going to search for kubernetes.

[Video description begins] The New blade opens. [Video description ends]

And I'm going to choose Kubernetes Service, and then I'll click Create.

[Video description begins] A blade called "Kubernetes Service" opens. [Video description ends]

This is something that was developed at Google.

[Video description begins] A blade called "Create Kubernetes cluster" opens. In the blade, a tab labeled "Basics" is open. [Video description ends]

So I'm going to have to specify some details to build this, such as the Resource group into which I want to deploy this because we're going going to be building a cluster essentially of Linux virtual machines to handle our containerized application, or applications.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Resource group" and a drop-down list opens. He then selects an option labeled "Rg1". [Video description ends]

So I'm going to call this AKS, so that's an Azure Kubernetes Service, Cluster1. Okay, after doing that, I specify the Region, the version of Kubernetes, the DNS name prefix. I will accept the defaults for that, and then I get to determine the node sizing for each node, and I can specify how many nodes I want in the cluster.

[Video description begins] He points to a slider adjacent to a field labeled "Node count". [Video description ends]

Notice that you can't get any lower than 1 but you can drag it way, way up.

[Video description begins] An error message appears with the text, "The maximum node count you can select is 4 due to the remaining quota in the". [Video description ends]

However, you're going to get to a point where you exceed the quota in your subscription. You can always request, like make a service request or support requests to ask for an increase, but I'm just going to go back and leave this down at, let's say, at 2.

[Video description begins] A tab labeled "Scale" opens in the blade. [Video description ends]

I'll click Next for scaling, I'm going to leave the default or VM scale sets being enabled here for scaling. I'll click Next for authentication.

[Video description begins] A tab labeled "Authentication" opens in the blade. [Video description ends]

We are going to let it create a new default service principle and we'll leave RBAC enabled if we want to use RBAC to control access to Kubernetes cluster resources.

[Video description begins] He points to a toggle button labeled "Enable RBAC", which is set to "Yes". [Video description ends]

And then I'll click Next.

[Video description begins] A tab labeled "Networking" opens in the blade. [Video description ends]

I want this to be a Private cluster, so I'm going to enable that only using private IP addresses. I can also determine if I want to have a customized network configuration by choosing Advanced, but I'm just going to let it do it itself, so I'll leave it on Basic.

[Video description begins] He clicks a button labeled "Next: Monitoring" and a tab labeled "Monitoring" opens in the blade. [Video description ends]

Next, I've got some monitoring options, which I'm going to leave as the default settings, Tags, and finally, we can validate this configurational.

[Video description begins] He clicks a button labeled "Next: Tags" and a tab labeled "Tags" opens in the blade. [Video description ends]

I'll click Next to review and create.

[Video description begins] A tab labeled "Review + create" opens in the blade. [Video description ends]

There was a quick message, it said I was creating the service principle, now it's running the final validation, it passed. Let's create our Azure Kubernetes cluster, so I'll click Create to do that.

[Video description begins] A blade called "AKSCluster1" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

Now that our cluster has been deployed in the Overview page, we can see over on the right for example that we've got 1 node pool. We can even monitor any containers, although there are none by default.

[Video description begins] He clicks an option labeled "Monitor containers" and a page called "Insights" opens in the content pane. [Video description ends]

Put any containers, after we get our containerized app running in the cluster, we'll be looking at things like CPU utilizations, and we can kind of monitor the health of it. Over on the left, I'm going to pull up the Node pools blade, we defined a node pool when we deployed the cluster.

[Video description begins] A corresponding page opens in the content pane. It includes a table with one row and several columns [Video description ends]

And we can see it's listed here, it's of type Linux, and there are two nodes. Now, I can either click the link for the 2, in this case, 2 nodes in the cluster. Or I can click the context menu, either way, we'll have an option for Scale.

[Video description begins] Adjacent to the row, he clicks an icon labeled "Context menu" and three options appears. He then points to an option labeled "Scale". [Video description ends]

So if I click on the 2, for example, we can configure manual as well as autoscaling.

[Video description begins] Under a column header labeled "Node count", he clicks a row entry labeled "2" and a blade called "Scale" opens. [Video description ends]

If we decide that we want to make sure the cluster accommodates our container workload properly, I'm just going to cancel that.

[Video description begins] He clicks a button labeled "Cancel" and the blade closes. [Video description ends]

But what we don't see are settings related to actually getting a container, an existing container in here. What if we already have containerized applications, how do we get them in the cluster? Let's move on the development side, but basically, you should really create an Azure Container Registry, upload container images to it. You're also going to need a Kubernetes manifest file, a YAML file, in order to get your apps in here. We do have the option here of Dev Spaces over on the left.

[Video description begins] In the navigation pane, he selects an option labeled "Dev Spaces" and its corresponding page opens in the content pane. [Video description ends]

So you can use Dev Spaces here to start to build solutions and debug them that'll run in containers within the cluster.


Azure Container Instance
You can deploy Azure Container Instances, or ACIs, when you have a single container that you want to run.
Now if you have multiple containers and you need to manage them as a unit, then you're better off looking at AKS, Azure Kubernetes Service. But for a single container, ACI or Azure Container Instances is fine. So here in the portal, let's get this configured.
I'm going to click Create a resource.

[Video description begins] A blade called "Container Instances" opens. [Video description ends]

And I'm going to search for container instance, and I'll choose Container Instances, and I'll click Create.

[Video description begins] A blade called "Create container instance" opens. [Video description ends]

So I'm going to deploy this into an existing Resource group.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Resource group" and a drop-down list opens. He then selects an option labeled "Rg1". [Video description ends]

And I'm going to call this, for lack of a better name, Container1. Now, the only thing is it won't like the uppercase letters, so let's put lowercase c and this time, it's good, passes all the validations for the nomenclature.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Region", and a drop-down list opens. [Video description ends]

For the Region, I'm going to go ahead and specify something in Canada that's near me such as Canada Central. And now what do I use as the source for this application container image, it can be a quick start image.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Image", and a drop-down list opens. [Video description ends]

So whether we want to use a standard helloworld example to get started, running in Linux, or using nginx as the HTTP engine, or Microsoft IIS web server, we have the choice of that. We can also point to an Azure Container Registry, or ACR.

[Video description begins] He selects a radio button labeled "Azure Container Registry" adjacent to a field labeled "Image source". [Video description ends]

You can build an ACR in Azure as a repository where you store your own custom container images and you can reference them from here. Or you can go online to Docker Hub and look at either public or private images that are available up there.

[Video description begins] He selects a radio button labeled "Docker Hub or other registry" adjacent to the Image source field. [Video description ends]

I'm just going to go ahead and choose Quickstart images and I'm going to use, let's see, well actually, let's use the helloworld Linux variant.

[Video description begins] He clicks the drop-down list box adjacent to the Image field, and the drop-down list opens. [Video description ends]

I can also choose the sizing here, the horsepower I need to support the workload running in the container.

[Video description begins] In the drop-down list, he selects an option labeled "microsoft/aci-helloworld (Linux)". [Video description ends]

I'm not going to change that, but I am going to click Next for networking.

[Video description begins] He points to an option labeled "1vpcu 1.5 Gib memory, 0 gpus" adjacent to a field labeled "Size". [Video description ends]

So I can make this publicly available, so I need a DNS name label.

[Video description begins] A tab labeled "Networking" opens in the blade. [Video description ends]

So let's call this containeryhztest, and it's going to use the .canadacentral.azurecontainer.io DNS suffix by default. And depending on what is running in that container instance, will determine which ports need to be open. It's already got port 80 open for this quick start sample, that's fine. I'm going to click Next for Advanced.

[Video description begins] A tab labeled "Advanced" opens in the blade. [Video description ends]

I'm not going to configure anything here, I'm just going to click Next, no tags.

[Video description begins] A tab labeled "Tags" opens in the blade. [Video description ends]

So after that, we're just going to have it validate our selections.

[Video description begins] He clicks a button labeled "Next : Review + create" and a tab labeled "Review + create" opens in the blade. [Video description ends]

So it's running the final validation we see in the upper left. We can see the validation has passed, let's click Create to build our container instance.

[Video description begins] A blade called "Microsoft.ContainerInstances-20200331181558" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

And with the deployments complete, I'm going to click Go to resource and let's check it out.

[Video description begins] A blade called "container1" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

So I'm in the Overview blade of our container instance, we can see a few details. We can see some metrics, how busy is it? Well, there's not very much going on here in terms of CPU utilization, not a lot of memory is really being used. And down below, network transfer for bytes received versus transmitted is minimal. Now the next thing we should do though, is take a look at the containers. Let's click Containers.

[Video description begins] In the navigation pane, he selects an option labeled "Containers" and its corresponding page opens in the content pane. It includes a container labeled "container1". [Video description ends]

Here we're going to see a reference for the container that was deployed. In this case it was our helloworld, and it's called container1, and notice the state of it is such that, it's currently Running.

[Video description begins] In the page, a tab labeled "Events" is open. It includes a table with several rows and columns. [Video description ends]

And down below we can see some events, the container was Created, Started, and it pulled the image here from a repository.

[Video description begins] He points to the row entries in the table. [Video description ends]

And also what's interesting, we can even view some log information here about what's been happening in the background.

[Video description begins] He opens a tab labeled "Logs" in the page. [Video description ends]

So we can see our container, in this case is listening on port 80. Containers won't always do that, it depends on the nature of what's inside it.

[Video description begins] A tab labeled "Connect" opens. A pop-up box labeled "Choose Start Up Command" is open in the tab. [Video description ends]

Here I can click Connect as well, if I want to interact with the contents of the container, such as, I'll use /bin/sh S-H, make a connection, and here we go. Now we can see we're in the file system.

[Video description begins] He selects a radio button labeled "/bin/sh" and clicks a button labeled "Connect". The prompt "/usr/src/app #" is displayed. [Video description ends]

So if I do an ls, for example, I can even see index.html.

[Video description begins] He executes the following command: ls. The output displays several files. The prompt does not change. [Video description ends]

So if we go back to Overview, speaking of index.html, we're going to see the URL here, the Fully Qualified Domain Name, FQDN.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

I'm going to copy that and we're going to open that app in another web browser window.

[Video description begins] He points to a URL adjacent to a field labeled "FQDN". [Video description ends]

And here we can see it's pulling up the contents of the web page within that container. But again, containers don't have to serve up a web application.

[Video description begins] He clicks an icon labeled "Copy to clipboard" adjacent to the URL and the icon name then changes to "Copied". [Video description ends]

It could be a background component that does anything, it doesn't even have to expose port 80.

[Video description begins] A web page opens in a new tab. It includes an image and the text, "Welcome to Azure Container Instances!". [Video description ends]

But in this case, based on our container image that we selected, it does.

                    
Azure DNS Overview
  - Domain Name System, or DNS, is used as primarily a name lookup service. [Video description begins] The following information is displayed on screen: Name resolution service. [Video description ends] So if we have a name like www.skillsoft.com, DNS can resolve that to the IP address so that we can make a connection to that website in that particular example.

Well, you can host DNS zones in Azure. A zone isn't the same as a domain name though because the domain name in DNS is just that – it's just a name, it's a text string. When we say "zone," a zone is related to a domain name and it handles its records. So we'll see a little bit about that.

Now in Azure, you can host private or public zones. What's the difference? Well, a private zone is one that essentially you can make up the name for. You don't have to ensure that it's globally unique. You don't have to have registered it through an external registrar or anything like that. Now a public zone is one that you have already registered externally with a DNS domain name provider because you can't do that directly through Azure – but you can host it in Azure.

You will just have to sign in to your DNS registrar tool – usually it's web browser based – where you can modify records and just modify the name servers to point to Azure DNS name servers. There are plenty of different types of DNS records. The first here is an A record. This one is used to resolve a friendly name, as we mentioned, like www.skillsoft.com to the related IPv4 address. In IPv6, IP addresses are four times as long as with IPv4. IPv4 uses 32-bit IP addresses. With IPv6, we're looking at 128-bit addresses. So a quad A record is four As. And it's used to resolve a friendly name to an IPv6 address.

MX records. This stands for Mail Exchanger. It's used for SMTP mail transfer between servers. CNAME records. It stands for Canonical Name. This is an alias type of record. Basically, you can have multiple names for essentially the same host. [Video description begins] The slide displays the following as the utilization scenario for the CNAME component type: Canonical Name - an alias to another DNS record. [Video description ends]

A PTR is a reverse lookup record. Now normally we have a name and we need to resolve it to an IP. Well, a pointer record is the opposite. I already have the IP, I would like to get the name for this IP; so IP address to name type of lookup in a reverse lookup zone. You can configure Azure-provided DNS name resolution. Now this uses Azure-provided DNS service. This is actually set up by default, or you could change that default and use your own custom DNS servers.

Let's talk about the default Azure-provided DNS name resolution. That's the default config, and it resolves public DNS names and virtual machine names within the VNet. And you can configure, whether you're using Azure-provided or custom DNS servers, at the virtual network level, the VNet level, and also within a network interface.

You'll see there's a DNS servers option. The default behavior is that the network interface will inherit the DNS server configuration from the VNet it's in. So that's through the subnet affiliation. So with custom DNS options, you might use this if you want virtual machine name resolution across VNets or if you're deploying IaaS virtual machines manually as Active Directory domain controllers. Because Active Directory needs DNS. You need to configure DNS so that it can locate domain controllers. So you'd have to set up your own. And so you might use that as a custom DNS server configuration option for your VNet or your network interfaces.

DNS forwarding to Azure is supported so that even though you're using custom DNS configuration – it's a custom DNS server basically that you are specifying the IP address of – that custom DNS server can be configured to forward to Azure name servers. So you still get the benefit of the Azure name resolution.

So we can see here in the screenshot that we are looking at the DNS servers blade or the setting within a VNet. And on the right, the Default (Azure-provided) DNS servers is normally what you'll see. That's normally how it is unless you change it otherwise to Custom, which has been done here. And the IP addresses of two custom DNS servers has been specified.

Now the other thing to think about is that if you want to host a public domain name, you've gone out and you've purchased a specific DNS domain name, you have to have control of that already through an external DNS registrar before you can create it in Azure and create the record sets and actually have it work. Now you can manage DNS using your normal Azure credentials, either using tools such as the Portal or PowerShell or the CLI. Just bear in mind that depending on your Azure environment, RBAC, or role-based access control, will really determine if you have the correct permissions to manage DNS or not.


DNS Zones and the Portal
Using the portal, you can create private or public DNS zones in Azure and also manage the record sets within them. [Video description begins] Azure Home is open. It includes the following sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual machines, Virtual networks, etc.. [Video description ends]

So what we're going to do here is we're going to add a private DNS zone. When I say "private," what I mean is it's not a publicly unique DNS domain name that I've registered already. So basically I can make it up, it's only going to be used internally. So I'm going to go ahead and click Create a resource here in the portal. [Video description begins] A "New" blade opens. It includes a Search box. [Video description ends]

And I know I want to create a DNS zone. So I'm going to search for DNS zone. And I'm going to choose DNS zone. And I'll click Create. [Video description begins] The DNS zone blade that opens includes a "Create" button. [Video description ends]

Now you have to have planned ahead of time, well, for sure, the name of this if you're creating a private one. [Video description begins] A "Create DNS zone" blade opens. It has the following steps in the navigation pane: Basics, Tags, and Review + create. Currently, Basics is selected. It includes two sections: Project details and Instance details. The "Project details" section has a "Subscription" drop-down list, which is set to "Pay-As-You-Go." The drop-down list has an associated "Resource group" drop-down list. The "Instance details" section has a "Name" field. [Video description ends]

So I'm going to put this in the Rg1 resource group. And in this case, I'm going to call this quick24x7test.local. [Video description begins] After selecting Rg1 from the "Resource group" drop-down list, the presenter types quick24x7test.local in the "Name" field. [Video description ends]

So that's what I've planned I want to name this DNS zone. Now that in itself is a DNS domain name. The zone is the configuration that supports the records for that domain name. That's what we're really going to be getting into here. So I'm going to click Next. I'm not going to tag it although, of course, I could. [Video description begins] The "Tags" step is now selected. [Video description ends]

I'm just going to go to the review and create screen. [Video description begins] He clicks the "Next : Review + create" button. [Video description ends] Validation has passed. Excellent. I'm going to click the Create button. And it's going to create the zone with a couple of default records, which we'll take a look at. So it won't take very long before you can click Go to resource [Video description begins]

The DnsZones-Arm | Overview blade opens. It includes a "Go to resource" button. [Video description ends] and jump directly into your newly created DNS zone. [Video description begins] The quick24x7test.local blade that opens has the following categories in the resource menu: Overview, Activity log, Access control (IAM), etc.. Currently, Overview is selected. It includes a "Record set" button, a listing of four name servers, and a table with the following columns: Name, Type, TTL, Value, etc. Two record sets, with Type listed as NS and SOA, respectively, appear in the table. [Video description ends]

We can see over here on the right, even in the Overview blade, that we've got a name, a couple of name server records here in a record set, NS. These are the name servers that actually are handling this particular zone and also a start of authority, or SOA, record with some details. [Video description begins] He first points to the name servers that display in the "Value" column for the first record set and then to the corresponding details that display for the second record set. [Video description ends]

Now what I can do here is add my own record set. So my goal here is to have a record, an A record, for www, which means if I put it as the prefix within this DNS zone, I end up with www.quick24x7test.local. That's what I want and I want it to resolve to a specific IP address. So I'm going to click add record set up at the top. And I know I want to call it www. We would plan all this stuff ahead of time and not make it up as you're filling it in, of course.

[Video description begins] An "Add record set" pane appears. It includes a "Name" field; a "Type" drop-down list, which is set to A; a TTL field with an associated TTL unit drop-down list, which is set to Hours; and an "IP address" field. The following text displays at the bottom right-hand corner of the "Name" field: .quick24x7test.local. The number one displays in the TTL field. He types www in the "Name" field. [Video description ends]

And here I want to create an A record. A records are used to resolve friendly names or fully qualified domain names like www.quick24x7test.local to an IP address. But I might also want to create a quad A record for IPv6 resolution; a CNAME alias record and MX, mail exchanger, record; and so on. So it's going to be an A record here. [Video description begins] He points to some of the options listed in the "Type" drop-down list. [Video description ends]

I also have a time to live, or TTL, value here. So the TTL here determines how long that the information related to these records is cached when they're being queried by clients. So it's set here to one hour. That's fine. I'm not going to make a change there. What I am going to put here is the IP of a host, let's say, that I know is running a web service and it's ready for www.quick24x7test.local. So 10.0.1.100 is what I'm putting in. [Video description begins] He clicks the "OK" button. [Video description ends]

Okay, so it's creating the record set. It says it did it. So let's just scroll down and double-check. And there it is. There's our www. Of course, that's in our DNS zone. So put the whole thing together. It's an A record and we can see the value of it. [Video description begins] The www record set with Type listed as A and Value listed as 10.0.1.100 now appears in the table in the quick24x7test.local blade. [Video description ends]

Now I'm going to scroll up. And we can see here we have four name servers listed for this DNS zone. So I can copy any one of these using the Copy to clipboard button over on the far right. And the reason I would do this is because I want to test that this DNS zone is working correctly for name resolution. [Video description begins] He copies the following name server: ns1-09.azure-dns.com. [Video description ends]

So the way I'll do that here in my virtual machine that I've got running in Azure, I'm going to use the nslookup or name server lookup command. This is built into Windows. It's also built into the Unix and Linux operating systems as well. [Video description begins] He shifts to the command prompt. [Video description ends]

I'm going to give it the name I want to check or test – in this case, www.quick24x7test.local. And then I'm going to paste in the first name server that I just copied from the Overview blade in my DNS zone. And I'm going to press Enter. So I know here that it's returning the proper result. We can see the full DNS name. And we can see it returned the correct IP address, 10.0.1.100.


DNS Zones and the CLI
In this demonstration, I'm going to create a private DNS zone in Azure using the CLI. [Video description begins] The Microsoft Azure PowerShell application is open. [Video description ends] So to get started, I'm going to run az network dns zone create. The first thing I have to do is determine which resource group that should be deployed into. So I'm going to specify that with -g. And it's going to be resource group 1.

And I have to determine what nomenclature I want to use – what's the name of the zone. So in this case, it's going to be callinsure.com. [Video description begins] The presenter types the following command: az network dns zone create -g Rg1 -n callinsure.com. [Video description ends] And I'll go ahead and press Enter to create that. So it looks like it's created the DNS zone. We can see the four Azure DNS name servers that are allocated by default.

And if we take a look at it in the portal, let's go back here and take a look by going to our All resources view. And we should see that we've got the callinsure.com zone. There it is right there. So I'm going to click and open it up. [Video description begins] He shifts to the "All resources" blade. It includes a table with the following columns: Name, Type, Resource group, etc.. Several record links, including callinsure.com, appear in the table. [Video description ends]

Sure enough, it's looking like it's ready to go. There's the four name servers. [Video description begins] The callinsure.com blade that opens has the following categories in the resource menu: Overview, Activity log, Access control (IAM), etc.. Currently, Overview is selected. It includes a "Refresh" button, a listing of the four name servers, and a table with the following columns: Name, Type, TTL, Value, etc.. Two record sets with Type listed as NS and SOA, respectively, appear in the table. [Video description ends]

We've got the name server and start of authority records listed here. So let's go back to the CLI because now we're going to add a record set. [Video description begins] He points to the four name servers and the details that display in the "Value" column for the first and the second record sets, respectively. [Video description ends]

So I'm going to clear the screen and I'm going to run az network dns record-set A. That's a A record I want to add. And I'm going to tell it I want to add that record – add-record. The resource group is going to be Rg1, the zone with -z we just created. It's called callinsure.com. And the name, -n, is www. Finally, the address associated with that is going to be 10.0.1., let's say, 100. [Video description begins] He types the following command: az network dns record-set A add-record -g Rg1 -z callinsure.com -n www -a 10.0.1.100. [Video description ends]

And I'm going to go ahead and press Enter to create that. There's just a little message that says the record set doesn't exist and will be created. In future., an extra argument will be supported on the command line. That's all fine. We can see from the returned JSON output, it looks like it's been created. And of course, we can verify that in a number of ways, one of which is by refreshing our record sets here within our DNS zone in the portal. And if I just scroll down a little bit, there's our A record for www. [Video description begins] He returns to the callinsure.com blade and clicks the "Refresh" button. [Video description ends]

We could see it's pointing to 10.0.1.100. [Video description begins] The www record set with Type listed as A and Value listed as 10.0.1.100 now appears in the table. [Video description ends] Of course, we can do the same type of thing in the CLI. So from here, I could do az network dns record-set. This time list -g is resource group, Rg1, and the zone is callinsure.com.

And if we press Enter, we'll get a sense of some of the record sets that are actually available here. And for example, we can see the IPv4 address of 10.0.1.100 for the record that we just created. And if we kind of scroll back up, we can read more about all of the records that are available within that DNS zone.

Now if we go through the output, we'll see that the arecords property here contains the IPv4 addressing information. So what I'm gong to do then is run the az network dns record-set list syntax, -g for the resource group, -z for the zone name. So that's all the same as we've done previously. But now we're going to use --query.

Now I've got a list of record sets. So it's an array; so open and close square bracket; dot. And in this case, I want to return not only the name but also the arecords property. So because I've got multiple properties I want returned, they're enclosed themselves within square brackets and separated with a comma. So I'm going to press Enter. And what we should see is that we've got, for example, what we want from our zone, the www A record with the listed IPv4 address. So this output makes it a little bit easier to digest what it is that we're looking at and asking the command to return.


DNS Zones and PowerShell
In this demonstration, I'm going to use PowerShell to create an Azure-hosted DNS zone and also a record set. So let's start with the zone. To do that, I'm going to run new-azdnszone. And I want to name this permacan.com. Now I don't have to have registered that publicly if I just want to use it internally in my Azure name resolution environment. I'm going to specify -resourcegroupname. I want this deployed in a resource group named Rg1. Let's go ahead and press Enter to get that part completed. And it looks like it created it. It returned the default for NameServers that every Azure-hosted DNS zone gets.

And if we check our work here in the portal and go to All resources, and we'll just do a little refresh here. If we filter it, let's say, for perma, we will see after a moment indeed there's the permacan zone. And if we look at the Overview blade for it, we'll see the four name servers that are always assigned. And we'll also see the name server and start of authority records, which are always automatically assigned.

[Video description begins] The "All resources" blade includes a "Refresh" button, a Search box with the inline text "Filter by name...," and a table with the following columns: Name, Type, Resource group, etc.. Several record links are listed in the table. And when the presenter clicks the "Refresh" button and types perma in the Search box, only the permacan.com record link displays in the table. Next, he clicks the link, and a permacan.com blade opens. It has the following categories in the resource menu: Overview, Activity log, Access control (IAM), etc. Overview, which is selected, includes a "Refresh" button, a listing of the four name servers, and a table with the following columns: Name, Type, TTL, Value, etc. Two record sets with Type listed as NS and SOA, respectively, appear in the table. [Video description ends]

So it looks good. Next thing that we're going to do is add a record set. And we can do that in PowerShell with the new-azdnsrecordset cmdlet. And the first thing I'll have to do is specify the name of the record I want to create here. It's going to be called www. Now I want that to be an A record. So I'll tell it that with -recordtype. I want it to resolve to an ipv4 address. And the record type here will be A -zonename. Now we want that to be a part in our case of the zone we just created. And it's called permacan.com.

The resource group, the resource group name is Rg1. And I also can set a TTL value, time to live value, for caching for this particular DNS record set. So I'll set that, let's say, to a value of 3600. Now that's the number of seconds for caching. So 3,600 seconds equates to one hour. The next thing I'm going to do is use the -dnsrecords parameter. And the way I'm going to do this, you could've put it in a variable. But within parentheses here,

I'm going to use new-azdnsrecordconfig -ipv4address. I'll type that in and I'll specify the IP address I want to use – 10.0.1., let's say, 100 or whatever the IP address you want the ww record to resolve to. And of course, I'm going to have to close the parenthesis. [Video description begins] He types the following command: new-azdnsrecordset -name www -recordtype A -zonename permacan.com -resourcegroupname Rg1 -ttl 3600 -dnsrecords (new-azdnsrecordconfig -ipv4address "10.0.1.100"). [Video description ends]

Putting parentheses around this because I want this treated as returned result value that we'll use as the value of the -dnsrecords parameters. Let's go ahead and press Enter. Well, that was quick, looks like it's good. It says the provisioning state is such that it succeeded. So well, we can check our work back here in the portal. Let's just refresh the screen we already had opened. [Video description begins] He clicks the "Refresh" button, and the www record set with Type listed as A, TTL listed as 3600, and Value listed as 10.0.1.100 now appears in the table in the blade. [Video description ends]

And there it is. There's the www A record. There's the TTL of 3600 seconds. And we can see the IP address that it's going to resolve to. Back into PowerShell, just going to clear the screen here and I'm going to use the get-azdnsrecordset cmdlet, so we can return some of these items here in the PowerShell environment; -zonename is permacan.com in this particular case at least. And I'll specify the resource group name. And then the resource group name value is Rg1 in this particular case. [Video description begins] He enters the following command: get-azdnsrecordset -zonename permacan.com -resourcegroupname Rg1. [Video description ends]

And it looks like it's returned everything here. But I could ask for certain properties. Maybe I'm only interested in the RecordType and the Records and also the Name. So why not bring up that previous command and pipe it to select and tell it that we want the name, we want the recordtype, and we want the records properties? [Video description begins] He enters the following command: get-azdnsrecordset -zonename permacan.com -resourcegroupname Rg1 | select name, recordtype, records. [Video description ends]

When we do that, we have a pretty nice, neat list. For example, we can see here www is an A record and we can see the IP address that it actually resolves to. [Video description begins] The application displays a table with the following columns: Name, RecordType, and Records. Three record sets are listed in the table, including www with RecordType listed as A and Records listed as {10.0.1.100}. [Video description ends]

Now if I use the nslookup command here in the Cloud Shell and give it the name, the fully qualified domain name, for what I've created – so www permacan.com. [Video description begins] He pastes the following command: nslookup www.permacan.com ns1-05.azure-dns.com. [Video description ends] And here I've pasted in one of the name server records and all I did there, you can see it's ns1-05.

I've gone back here to the Overview blade of my DNS zone. And I've simply copied one of these name server entries. [Video description begins] He points to the listing of the four name servers that displays in the permacan.com blade. [Video description ends] Basically, that's the name server I want to query against. And it returns the www.permacan.com fully qualified domain name, or FQDN, with the IP address that we configured. So in other words, the DNS zone is functional for using it for name resolution.


VNet Custom DNS Settings
When you create a VNet in Azure, by default, the VNet uses Azure-provided DNS name resolution. Let's verify this fact. [Video description begins] The "Virtual networks" blade is open. It includes a table with the following columns: Name, Resource group, Location, etc.. Four record links, including Vnet1, appear in the table. [Video description ends] So let's go into an existing VNet.

And what I want to do when the properties area shows up on the left is I want to click on DNS servers. [Video description begins] The presenter clicks the Vnet1 link, and the corresponding blade opens. It includes a "Settings" section in the resource menu. The section includes a DNS servers category. And when he selects the category, the corresponding blade that opens includes a "Save" button and a DNS servers section. The section has two options: Default (Azure-provided) and Custom. Currently, Default (Azure-provided) is selected. [Video description ends]

You've got two options, either the Default (Azure-provided) DNS name resolution, or you can use Custom. So what I'm going to do here is specify Custom where I must add the IP address of a DNS server that I want to use as my custom name resolution solution. [Video description begins] When he selects the "Custom" option, a field displays below it featuring the inline text: Add DNS server. [Video description ends]

You can also add multiple IP addresses here. You'll be able to add as many as you need here. [Video description begins] He points to the field that displays below the "Custom" option. [Video description ends] For example, you're probably never going to need more than five, six, or seven custom DNS server IP addresses here, where the additional ones only really get used if the first one doesn't respond.

But before we fill this in, let's take a look at what we have for our own DNS server, which I've actually deployed into an Azure VNet, specifically in Vnet1. [Video description begins] He shifts to the DNS Manager application, which has the following category in the navigation pane: DNS. The category has a single node: WinSrv2019-1. The node, which is expanded, includes a "Forward Lookup Zones" node. The node, which is expanded, comprises a quick24x7custom.local folder, which is selected. It contains a table with the following columns: Name, Type, and Data. Three records appear in the table. These include www with Type listed as Host (A) and Data listed as 10.0.1.1. [Video description ends]

So I can see here in Windows, I've got a DNS zone called quick24x7custom.local. It's got a record for www that points to 10.0.1.1. And so we can use the IP address of this host as our DNS server. So I'm going to go ahead and go into a command prompt. And I'm going to run ipconfig. [Video description begins] The output includes an "IPv4 Address" heading. The following address displays against the heading: 10.0.1.4. [Video description ends]

And I can see that this server's address is 10.0.1.4. That's what I'm going to set as my DNS server. And you want to make sure that this private IP address, in this case, it's the private one, public ones don't show up here in the OS, you want to make sure that it's unchanging if you rely on this server for name resolution.

So I'm going to go ahead and specify that as my custom DNS server IP address and I'm going to Save it. [Video description begins] He returns to the Vnet1 | DNS servers blade, types 10.0.1.4 in the field that displays below the "Custom" option, and clicks the "Save" button. [Video description ends] Now this is going to apply to resources that I've deployed in Vnet1.

And in this case, if I look at the subnets for Vnet1, we can see that there are two of them, subnets 1 and 2. [Video description begins] He selects the "Subnets" category that displays in the "Settings" section in the resource menu. The category includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Two subnets, Subnet2 and Subnet1, appear in the table. [Video description ends]

So what I want to do is verify that this works. And I'm going to do it on my server. And you don't have to do it directly on the DNS server. But I don't want to have to fire up another VM just to test it. So I've restarted my virtual machine in that VNet, so it will pick up the new VNet custom DNS server setting, which it is pointing to itself. But that's good enough for testing purposes.

When you're within a virtual machine operating system in Azure, you can do an ipconfig /all. [Video description begins] He returns to the command prompt and enters the command: ipconfig /all. The output includes a DNS Servers heading. The following address displays against the heading: 10.0.1.4. [Video description ends]

And you'll see the DNS server that was assigned by Azure. So you don't want to configure DNS server IP addresses where possible within the OS. Let it be handled by Azure. So we now know it's pointing to the correct DNS server, 10.0.1.4. Again, that happens to be the server I'm sitting at itself. But again, it'll be fine for testing.

So we can test this by pinging www.quick24x7custom.local. And it should return back 10.0.1.1. [Video description begins] When he enters the command, ping www.quick24x7custom.local, the application displays the following message: Pinging www.quick24x7custom.local [10.0.1.1] with 32 bytes of data:. [Video description ends] I don't have a host listening at that IP, which is why it's timing out. [Video description begins]

He points to the following output that now displays: Request timed out. [Video description ends] But if we go in and look at DNS again just to verify our work, we're going to see, in fact, that that is correct. [Video description begins] He types dns in the Search box and selects DNS from the search results that display. The DNS Manager application reopens. [Video description ends] It is resolving now correctly because we've modified our VNet DNS settings. So there's quick24x7custom.local, there's www, there's 10.0.1.1. So it's working.


Network Security Group Overview
Most of us already have experience configuring some type of firewall whether it's a network perimeter firewall such as one built into a router or a specific firewall appliance or even in a host operating system like Windows or Linux. Firewalls limit network traffic based on our configuration of firewall rules.

And that's really what network security groups, or NSGs, are all about in Azure. It's considered a Layer 4 firewall. Layer 4 is referring to the fourth layer in the OSI model. The OSI model is a seven-layer conceptual model used to explain network communications related to both software and hardware. So Layer 4 is the transport layer – so has the ability to deal with things like IP addresses and port numbers.

So with network security groups in Azure, you can create Allow rules. So you can can specify the traffic that should be allowed into or out of a subnet or a network interface. Or you can define it as a Deny rule if you specifically want to deny something, again, whether it's coming into or out of a subnet or a network interface.

There are also default rules that we'll take a look at here, both for the inbound direction and outbound direction, again, as it applies to subnet or a network interface. So we configure the details within a network security group in rules. And the rules will have details such as the source and destination IP address, the source and destination application group when it comes to applications, source and destination port numbers, the protocol, whether it's TCP, UDP, ICMP. You can even use source and destination tagging information.

And you can specify a priority number to control the order in which rules are processed. Because once a rule matches a packet, then after that whatever the rule says to do, Allow or Deny occurs. And then rule processing stops. So ordering these rules within the network security group is very important.

So we have an example here of the default inbound rules. [Video description begins] A screenshot displays. It contains two buttons: Add and Default rules. Below these is a table with the following columns: Priority, Name, Port, etc.. The following rules appear in the table: AllowVnetInBound with Priority listed as 65000, AllowAzureLoadBalancerInBound with Priority listed as 65001, and DenyAllInBound with Priority listed as 65500. [Video description ends]

You can turn off the display of these if you don't want to see them by clicking the Default rules button up at the top. So we've got three rules here automatically available, one that allows inbound VNet traffic, load balancer traffic, and then third one is a DenyAllInBound rule if the first two don't kick in. Notice that priority numbers in the left-hand column. So rule number 65000 gets read before rule 65500. So that's how this works.

In the same way, we have default outbound rules. Really, the same type of discussion. We've got a Default rules button at the top if we don't want to see these. And we can see that we've got AllowVnetOutBound. Notice that this one's a little bit different. The second default rule for outbound is to allow Internet traffic outbound. That's allowed by default. Other than that, everything else is denied. So you need to associate the network security group with an Azure resource. The network security group itself is, unto itself, a resource that you create in Azure. And you associate it with either a specific VM network adapter, so a network interface, or a subnet.

So think strategy. If you've got a bunch of Linux virtual machines organized on the same subnet, there's nothing else on it, and they have the same firewall rules, they need to allow port 22 SSH traffic in, for example, well, instead of associating the network security group with each network interface for each Linux VM in that subnet, since they all have the same need and they're on the same subnet, why not just associate the network security group once with the subnet? Because then that applies to all of the network interfaces in that subnet.

Now when you build your own inbound rule or outbound, it's going to look similar to this. [Video description begins] A screenshot of an "Add inbound security rule" pane displays. It contains a "Source" drop-down list, a "Source IP addresses/CIDR ranges" field, a "Source port ranges" field, a "Destination" drop-down list, a "Destination port ranges" field, a "Protocol" section, an "Action" section, a "Priority" field, and a "Name" field. The "Protocol" section contains three options: Any, TCP, and UDP. The "Action" section contains two options: Allow and Deny. [Video description ends]

You specify the source at the top, such as being a specific IP address or it could be from anywhere. You can then specify the source port ranges, the destination such as a virtual network. Or it could be a specific host. You specify things like a destination port number. Here it's port 80 over the protocol of TCP. And the action is either Allow or Deny. In this case, it's Allow. Don't forget that the priority number, in this case listed as 100, is important because it controls the order that the rules are processed in.

And remember, when there's a rule match, no more rule processing occurs. And then, finally, we have a name for the rule. When you manage network security groups, you can do this using the Azure portal GUI, you can use the PowerShell cmdlets such as New-AzNetworkSecurityGroup, Get-AzNetworkSecurityGroup, Remove-AzNetworkSecurityGroup, to name just a few. In the CLI, you could use ccommand syntax, including az network nsg – for network security group – create, az network nsg list, az network nsg delete, again, to name just a handful of NSG, or network security group, related CLI commands.


NSGs and the Portal
In Azure, network security groups, or NSGs, are essentially a collection of firewall rules that either allow or deny traffic. [Video description begins] Azure Home is open. It includes the following sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, All resources, Monitor, etc.. [Video description ends] Let's create one here in the portal by clicking Create a resource where I'm going to search for network security and I'll choose Network security group.

And then I'll choose Create. [Video description begins] A "New" blade opens. It includes a Search box. When the presenter searches for and selects the "Network security group" option, the corresponding blade opens. The blade includes a "Create" button. And with the button being clicked, a "Create network security group" blade opens. It contains three steps: Basics, Tags, Review + create. Currently, Basics is selected. It contains two sections: Project details and Instance details. The "Project details section contains a "Subscription" drop-down list, which is set to Pay-As-You-Go and an associated "Resource group" drop-down list. The "Instance details" section has a "Name" field and a "Region" drop-down list, which is set to (Canada) Canada Central. [Video description ends]

First thing I have to do is deploy this into a specific resource group. So I'll make a selection from the list. And I'm going to call this NSG-Windows. [Video description begins] After selecting the Rg1 option from the "Resource group" drop-down list, he types NSG-Windows in the "Name" field. [Video description ends]

So I will have planned this ahead of time so that I might have a number of Windows virtual machine instances. And I want to control traffic to them through this network security group. I'm going to specify that this will be deployed in the Canada Central region. I'll click next: tagging. And I'm not going to specify any key/value pairs for tags. I can do that at any time thereafter if I choose. So I'll click Next to review and create. The validation has passed. [Video description begins] The application displays the message: Validation passed. [Video description ends]

So I'll click Create to create the network security group. Now all we've done is essentially created a shell. We haven't yet defined any of the rules in the network security group. And there are some default rules as you'll see. [Video description begins] A Microsoft.NetworkSecurityGroup-20200321082526 blade opens. It has the following categories in the resource menu: Overview, Inputs, Outputs, etc.. Currently, Overview is selected. It includes the message: Your deployment is underway. [Video description ends]

So once this is created, we're going to go in and take a look at some of those default rules and then we'll add some of our own. Once it's created, I'll click the Go to resource button. And here in our network security group, notice on the left, we can view inbound security rules.

[Video description begins] When the blade displays the "Your deployment is complete" message, a "Deployment succeeded" pop-up appears. It includes a "Go to resource" button. When he clicks the button, an NSG-Windows blade opens. It includes a "Settings" section in the resource menu. The section includes the categories: Inbound security rules, Outbound security rules, Network interfaces, Subnets, etc.. And when he selects the "Inbound security rules" category, the corresponding blade that opens includes an "Add" button, A "Default rules" button, and a table with the following columns: Priority, Name, Port, Protocol, Source, Destination, and Action. The following rules appear in the table: AllowVnetInBound with Priority listed as 65000, Port and Protocol listed as Any, Source and Destination listed as VirtualNetwork, and Action listed as Allow; AllowAzureLoadBalancerInBound with Priority listed as 65001, Port and Protocol listed as Any, Source listed as AzureLoadBalancer, Destination listed as Any, and Action listed as Allow; DenyAllInBound with Priority listed as 65500, Port listed as Any, Protocol listed as Any, Source listed as Any, Destination listed as Any, and Action listed as Deny. [Video description ends]

And there are three of them. We can turn them on or off from display by clicking the Default rules button. The same type of thing is true with Outbound security rules. [Video description begins] When he clicks the "Default rules" button, the table displays the message: No results.. And when he reclicks it, the three rules reappear. [Video description ends]

So for example, if we go to Inbound security rules, notice that these priority numbers are ordered, they're sorted. In other words, the firewall rule here with a Priority of 65000 will be checked before 65001, which is checked before 65500. Now that's going to be important once we start adding our own inbound security rules. You get to determine the order that they get checked in. Because after a rule is checked and there's a match, then no further rule processing takes place.

So what do we have here by default anyway? Well, the first rule is called AllowVnetInBound. So any port, any protocol, from a virtual network, to a virtual network, we are allowing that traffic. Then we have the same type of thing but for allowing Azure load balancer inbound traffic. So the source can be from an AzureLoadBalancer. Any destination, we're allowing it. Then we've got a final rule at the bottom called DenyAllInBound for everything, any source, any destination, any port, any protocol, denying traffic. So if the first two rules don't match incoming traffic, then the DenyAllInBound rule would kick in. It's at the bottom of the list.

Now when managing Windows virtual machines, you're probably going to want to manage them remotely using Remote Desktop Protocol, port 3389. So we're going to add a rule to allow that. Now that's not something that you want to make visible on the Internet publicly, just on the private network side of things for security reasons.

So I'm going to go ahead and click the Add button to add a new rule. We're going to add one for Remote Desktop Protocol. [Video description begins] An "Add inbound security rule" pane appears. It includes a "Source" drop-down list, which is set to Any; a "Source port ranges" field; a "Destination" drop-down list; a "Destination port ranges" field; a "Protocol" section; an "Action" section; and the following field: Priority (given as 100). The "Protocol" section contains the following options: Any, TCP, UDP, and ICMP. The "Action" section contains two options: Allow and Deny. [Video description ends]

The Source is set to Any, but we could specify an IP address, a tag, or an application security group. For example, if I go to IP Addresses, I could specify my public IP address as it's known on the Internet if I'm managing or will be managing these virtual machines from an on-premises environment. [Video description begins] When he selects the "IP Addresses" option from the "Source" drop-down list, a "Source IP addresses/CIDR ranges" field replaces the "Source port ranges" field. [Video description ends]

However, for now I'm going to leave that on Any. The source port range, I'll leave as an asterisk. Normally, when you are making a connection to a service like RDP on port 3389, the destination port is going to be specified, for example, as 3389. But that service talks back to your machine on a much higher level port that's randomly generated. At any rate, so the destination here can be a specific IP address or a virtual network, whatever the case might be. So I'm going to leave it on Any Destination.

I can specify the port range. In this case, it's just a single port number, 3389. I could specify a TCP or a UDP or a ICMP. In this case, I'm going to specify TCP. Down below, I can either Allow or Deny. And notice the default rule number or Priority value is 100. Remember, this is important because that numbering or that priority determines in which order each rule is checked for incoming traffic. Now I'm going to give this a name. It's going to be called AllowInboundRDP. And I'm going to click Add.

So after a moment, notice here that we've got an AllowInboundRDP rule. But we've got a little yield kind of symbol here – some kind of a warning. [Video description begins] The AllowInboundRDP rule now appears in the table in the NSG-Windows | Inbound security rules blade. [Video description ends]

And the reason that we have this is because we are allowing traffic from any source as opposed to locking it down to a particular IP address range. So if we wanted to change that, we could. [Video description begins] He selects the AllowInboundRDP rule, and the corresponding pane appears. He points to the "Source" drop-down list and returns to the blade. [Video description ends]

Now notice if I turn off the default rule viewing, all we see is the rule that we created. We can also do the same type of thing for an outbound security rule. So if I want to control outbound traffic, I could add a rule and configure it in the same manner. Now we can associate network security groups with network interfaces, which are, of course, associated with virtual machines or subnets.

So I could go, for example, here to Subnets and I could click Associate. And I could add a subnet that I want this applied to. [Video description begins] When he selects the "Subnets" category, the corresponding blade that opens includes an "Associate" button. And when he clicks the button, an "Associate subnet" pane appears. It contains a "Virtual network" drop-down list. [Video description ends]

Of course, I first choose the virtual network or the VNet and then I choose the subnet, let's say, Subnet1 and Vnet1. [Video description begins] When he selects the Vnet1 option from the "Virtual network" drop-down list, a "Subnet" drop-down list also displays in the pane. [Video description ends] I'll click OK. And then it will have been associated. So now we're looking at controlling inbound and outbound traffic from a perspective of a specific subnet. Now let's close out of here.

Let's go to All resources and let's look at this from the subnet's perspective. [Video description begins] He returns to Azure Home and selects the "All resources" option. The corresponding blade includes a table with the following columns: Name, Type, Resource group, etc.. A few record links, including Vnet1, appear in the table. [Video description ends]

Now the subnet itself is not its own resource. It's contained within a VNet. So I'm going to open up Vnet1. I'm going to click on Subnets on the left. That shows me Subnet1 and Subnet2. [Video description begins] The Vnet1 blade includes a "Settings" section in the resource menu. The section includes a "Subnets" category. And when he selects the category, the corresponding blade includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Two subnets, Subnet2 and Subnet1, appear in the table. [Video description ends]

If I click on Subnet1, that opens up a whole other set of options just for that subnet. [Video description begins] The "Subnet1" blade includes an "Address range (CIDR block) field, an NAT gateway drop-down list, and a "Network security group" drop-down list, which is set to NSG-Windows. [Video description ends]

You can see the IP address range, whether we've got a NAT gateway associated with it and our current topic, network security group association. Here it is, NSG-Windows. So we could have also set that association here. There are a number of ways of doing it. But in this way, we can control the traffic flow into and out of, in our particular example, a Vnet subnet.


NSGs and the CLI
We know that network security groups are basically collections of rules that control traffic flow into or out of a subnet or a network interface. And the rules can be set to allow or deny that traffic. Well, we can work with those network security groups and their rules using the CLI. And that's what we're going to do here in this example. I'm going to start by using az network nsg, for network security group, create -g. [Video description begins] The Microsoft Azure PowerShell application is open. [Video description ends] 

And I'm going to deploy this into a resource group called Rg1, and I have to give it a name. I'm going to call this in this example App3_Firewall_Rules. [Video description begins] The presenter enters the following command: az network nsg create -g Rg1 -n App3_Firewall_Rules. [Video description ends]

Now the next thing I'm going to do is verify that that was created. We can do that in the portal, in the GUI, of course, but we can also do that using the – there it looks like it's done – using the az network nsg list command. That's consistent in the CLI. You can always use list to list back items. It's kind of like in PowerShell how you could always use the get prefix in the name of a command LIB in order to retrieve something. Now when I do this, it's going to return, of course, all of the properties, all of the details.

So as usual, what we can do in the CLI here is that --query at the end and ask for a specific property like .name. [Video description begins] He enters the following command: az network nsg list --query [].name. [Video description ends] So here we can see that we've got three network security groups, including the one that we just created, App3_ Firewall_Rules.

But the creation of the network security group itself is nothing. It's kind of like a skeletal infrastructure, a container. We need to put a rule in it. And then of course, it needs to be associated with either a subnet or a network interface, so it's actually effective. [Video description begins] He enters the following command: az network nsg rule create -g Rg1 --nsg-name App3_Firewall_Rules -n Rule1 --priority 500 --source-address-prefixes 71.4.56.0/24 --destination-port-ranges 80 443 --destination-address-prefixes '*' --access Allow --protocol Tcp --description "allow inbound HTTP and HTTPS traffic". [Video description ends]

Next, I'm going to create a rule within that network security group. And to do that, I will use the az network nsg rule create syntax. I'll have to specify the resource group where that network security group was deployed. That would be Rg1. And I'll have to use the --nsg-name parameter and give it the name of our newly created security group – that's called App3_Firewall_Rules. Then I have to give a name for the current rule with -n. We're going to call the current rule Rule1.

I'm going to give it a priority value of 500 with --priority. Remember, the priority determines the ordering of the rules. So a rule with a priority of 400 would be checked before our rule, which has a priority of 500. And if there's a match with the rule, that rule applies and no further rules are processed after the matching rule. So it's important to think very carefully about the relative priority value.

Then I'm going to use the --source-address-prefixes parameter. And in here, I'm going to specify an IP address range in CIDR format, which would reflect, for example, a network from which I want to allow access to an application. Then I'm going to use the --destination-port ranges parameter. And I'm going to specify that I want to allow the destination ports, so traffic going to port 80 or to port 443. So a web application would use HTTP port 80 and HTTPS for a secured connection through port 443.

The destination address prefixes, perhaps if I've got a number of application servers, I could set to an asterisk; so in other words, any destination address prefix. And I'm going to use --access to specify Allow. Because remember, a rule within a network security group could also be set to Deny; --protocol is Tcp; and --description, in this case, I'll just put in whatever I think makes sense to describe this rule. And I'm going to go ahead and press Enter to create it within that network security group.

And after a moment, we can see that the provisioning succeeded for this rule. We can check our work here in the portal. [Video description begins] The "All resources" blade is open. It includes a table with the following columns: Name, Type, Resource group, etc.. Several record links, including App3_Firewall_Rules, are listed in the table. [Video description ends]

So if I open up the App3_Firewall_Rules network security group and if we go to Inbound security rules, well, we could probably see without doing that anyway, but there it is – rule 500, Rule1, and ports 80 and 443. And we can see all the details are filled in in accordance with what we specified at the command line.
Now the next thing I'm going to do is simply list rules within that network security group. So az network nsg rule list. So the network security group is in a resource group called Rg1; --nsg-name. It's called App3_ Firewall_ Rules. [Video description begins] He types the following command: az network nsg rule list -g Rg1 --nsg-name App3_Firewall_Rules. [Video description ends] Let's go ahead and press Enter. And we can see the rules that are available within that. In this case, we can see our description for our rule. We can see our destinationAddressPrefix, which is an asterisk. And if we scroll down further, we'll also see the priority and the name of the rule, Tcp. We can see the sourceAddressPrefix and so on.


NSGs and PowerShell
In this demonstration, I'm going to use PowerShell to build a network security group. And within that I'm going to define a rule so that we can control traffic flow. Specifically, I'm going to build a rule that will allow RDP traffic to Windows Host Remote Desktop Protocol. So I've launched Cloud Shell here in the portal. [Video description begins] The Microsoft Azure PowerShell application is open. [Video description ends] The first thing I'm going to do, I don't have to do it this way, but sometimes, when you're working with longer commands, and parameters and values in PowerShell, it's easier to store things in variables.

So the first thing I'm going to do here is build a variable called $rdp_allow_rule, that's the name of my variable. [Video description begins] He enters the following command: $rdp_allow_rule= [Video description ends] And what I want to store in that variable, so after the equal sign, I've got New-AzNetworkSecurityRuleConfig -Name. I want to call my rule allow-inbound-rdp -SourcePortRange. [Video description begins] He highlights the following rule: "allow-inbound-rdp" [Video description ends] It's an asterisk, so any port. -Protocol will be TCP -SourceAddressPrefix, I'm going to use the reserved keyword of internet. I want to allow inbound-RDP traffic to VMs running in Azure sourced from the Internet. -Access is either allow or deny here. I want to allow the traffic -Priority. I'm going to give this rule of priority value of 110, bearing in mind that the priority value's used to determine the order in which rules within the NSG are processed.

So rule 110 is checked before rule 111. The direction here with -Direction, I will specify as inbound. I don't want an outbound rule in this case, just inbound RDP traffic. -DestinationPortRange because we're talking about Remote Desktop Protocol RDP, the port number there will be 3389. And the -DestinationAddressPrefix,

I'm going to use a wildcard symbol in the form of an asterisk. So any destination address. So I'm going to press enter to create that variable, that's all we have done is to create a variable. Nothing has been done with the network security group, or anything like that. So in order to build a network security group, we have to use the New-AZNetworkSecurityGroup PowerShell cmdlet. I'm going to use -Name and I'm going to call this windows-common-NSG. Then, I can add one or more security rules. We've only got one variable, so -SecurityRules. The value of that parameter will be our variable up above, $rdp_allow_rule.

Now, I have to build this network security group and deploy it into a resource group so -ResourceGroupName is Rg1. I have to specify a location so -Location in this example will be Canada East. Let's go ahead and press enter to create that network security group along with the rule within it. Next thing I'll do is run get-aznetworksecuritygroup. And maybe, we'll pipe that to select and tell it we only want to see the names of the security groups. [Video description begins] Several Security Group names display, including WindowsNSGEast, App3_Firewall_Rules and windows-common-NSG [Video description ends] Here's the one we've just created windows_, or rather windows-common-NSG. I'm going to minimize Cloud Shell and I'm just going to refresh my All Resources view in the background, which is filtered currently for only network security groups.
And just give it a moment to update. After a moment of waiting and clicking Refresh, I now see our windows-common-NSG, network security group. Let's click on it and go to the inbound rules just to check out our work. There's rule 110 to allow inbound RDP that we specified on the PowerShell command line.


Security Rule Troubleshooting
When you work with network security groups, they consist of rules that can be applied to subnets or network interfaces to control traffic flow. And so it can be tricky in a larger environment to trace exactly why we might have a problem making a connection to a given virtual machine workload. And that's where effective security rules comes in for security rule troubleshooting.

Here in the portal, I'm looking at my existing virtual machines, one of which is a Windows one called WinSrv2019-1. [Video description begins] The "Virtual machines" blade is open. It includes a table with the following columns: Name, Type, Status, etc.. Two virtual machine links, including WinSrv2019-1, appear in the table. [Video description ends] 

Notice, though, the state is that it's currently stopped. I leave it that way for now. Let's click on that virtual machine to open it up. [Video description begins] The WinSrv2019-1 blade includes an Overview category, which is currently selected, and a "Settings" section in the resource menu. The "Settings" section includes a "Networking" category. [Video description ends]

What I want to do is go to the Networking blade. Because in the Networking blade, aside from things like the network interfaces, we'll also see any relationship to inbound and outbound port rules. We can see down below the priority numbers. [Video description begins] The WinSrv2019-1 | Networking blade includes an "Effective security rules" link and the following options: Inbound port rules, Outbound port rules, Application security groups, etc. Currently, Inbound port rules is selected and includes a table with the following columns: Priority, Name, Port, etc. Four rules appear in the table. [Video description ends]

So they're ordered by priority. And of course, when there's a match on a rule, it doesn't process any further rules with a lower priority. Now lower priority here means a higher numeric value. But notice, we've got effective security rules because rules can be applied at the subnet level and the network interface level. So let's go to Effective security rules. Now because the virtual machine isn't running, it says it couldn't retrieve them. Not a problem.

Let's start that virtual machine. So we're going to go back here in the breadcrumb trail at the top so that I can pull up the Overview blade of that VM just so I can start it up. [Video description begins] The presenter clicks the WinSrv2019-1 | Networking link in the breadcrumb and selects the "Overview" category in the resource menu of the corresponding blade. [Video description ends]

So I'm going to go ahead and click the Start button and just wait a moment as that happens. Okay, so now that our virtual machine has been started, we can go back to the Networking blade. [Video description begins] He selects the notifications control that displays at the top of the portal. The menu that opens includes a "Started virtual machine" link. [Video description ends]

Let's check out the effective security rules. Now this time when we click Effective security rules, there won't be a message about it not being running. Obviously, the virtual machine is running. [Video description begins] The winsrv2019-1439 | Effective security rules blade includes the following headings: Scope and Associated NSGs. Network interface (winsrv2019-1439) and an NSG-Windows (Subnet) link display against these controls, respectively. [Video description ends]

So if we take a look here, we can see a reference to the network interface used by this virtual machine and also the associated network security group, which in this case comes from the subnet. But if you think about it, you could have a network security group associated to the subnet and also the network interface. And you could have rules that then conflict with one another or at the least make it difficult to determine which one is effective.

What we're going to do is explore the network interface here. We know that we've got a network security group associated with the subnet. We're going to associate one with the network interface and come back here. So I've gone back to my home page here in the portal where I'm going to create a resource. It's going to be another network security group that we're going to associate with a particular interface, so we can see how that works; so Network security group. And then I'll click on Create. And we'll be on our way.

[Video description begins] He shifts to Azure Home, which includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual machines, All resources, etc.. He selects the "Create a resource" option, and a "New" blade opens. It includes a Search box. He types network security in the Search box and selects Network security group from the options that display. A "Network security group" blade that opens includes a "Create" button. When he clicks the button, the corresponding blade that opens has the following steps in the navigation pane: Basics, Tags, and Review + create. Currently, Basics is selected. It contains two sections: Project details and Instance details. The "Project details" section contains a "Subscription" drop-down list, which is set to Pay-As-You-Go, and an associated "Resource group" drop-down list. The "Instance details" section contains a "Name field and a "Region" drop-down list, which is set to (Canada) Canada Central. [Video description ends]

I will select the resource group association. And I'm going to call this NSG, let's say, winInt, for Windows interface. [Video description begins] He selects Rg1 from the "Resource group" drop-down list and types NSG-WinInt in the Name field. [Video description ends] And it's going to be in Canada Central.

So I'm going to review and create that. Of course, we'll have to create at least a rule in it. So let's create that network security group. Once that's done, I'm going to click Go to resource and we can add our rule. [Video description begins] He clicks the "Review + create" button, and the "Review + create" step, which is selected, includes a "Create" button. When he clicks the button, the corresponding blade that opens includes a "Go to resource" button. And when he clicks the button, the NSG-WinInt blade that opens includes an "Overview" category and a "Settings" section in the resource pane. The "Settings" section includes an "Inbound security rules" category. [Video description ends]

So I'm going to go to Inbound security rules. We know that there are default rules. That's fine. I'm just going to click the Add button, so we can add another one. And we'll make it different so that we can easily identify it when we look at the effective security rules.

[Video description begins] The NSG-WinInt | Inbound security rules blade includes an "Add" button, a "Refresh" button, and a table with the following columns: Priority, Name, Port, etc.. Three rules appear in the table. When he clicks the "Add" button, an "Add inbound security rule" pane appears. It includes a "Destination port ranges" field, a "Protocol" section, a "Priority" field, a "Name" field, and an "Add" button. The "Protocol" section contains four options: Any, TCP, UDP, and ICMP. Currently, Any is selected. [Video description ends]

So for example, let's say this is going to be for TCP port 389 and that would be an LDAP type of thing. So 389 up here for the port. The priority, let's say, is going to be 120. I'm just going to scroll down. And we'll call this, let's say, LDAP. Okay, so we've got an LDAP rule, priority of 120. And it's for port 389. [Video description begins] He selects the "TCP" option in the "Protocol" section and types 389, 120, and LDAP in the "Destination port ranges" field, the "Priority" field, and the "Name" field, respectively. [Video description ends]

Let's click Add. That's an Allowed rule. And we'll make sure it just shows up as it normally should directly here in the network security group. So I'll just click Refresh. There it is. There's our LDAP rule. All good. [Video description begins] The LDAP rule now appears in the table in the NSG-WinInt | Inbound security rules blade. [Video description ends]

Let's go back to the virtual machine and let's check out the effective security rules again. Now we got to make sure, of course, actually before we do that that we associate that with a network interface. Let's go to the All resources view first and make sure you filter it not for all but, let's say, just network interfaces.

[Video description begins] He returns to Azure Home and selects the "Virtual machines" option. The corresponding blade opens. He returns to Azure Home and selects the "All resources" option. The corresponding blade that opens includes a "Type == all" filter option and a table with the following columns: Name, Type, Resource group, etc.. Several record links appear in the table. He selects the "Type == all" filter and a drop-down list opens. It contains the following checkboxes, all of which are selected: Select all, Disk, DNS zone, Network interface, etc. Currently, all the checkboxes are selected. He deselects the "Select all" checkbox and selects the "Network interface" checkbox. Two record links, including winsrv2019-1439, now appear in the table. [Video description ends]

We know we've got a Windows network interface here used by the Windows VM. Let's just go to Network security group here. Let's set that association. So I'll just go ahead and click Edit. Select from the list and there it is, NSG-WinInt, the Windows interface. Save that change. And once that's done, then we'll go to the virtual machine and check the effective security rules again.
Okay, so it's done. This time, we'll be able to see it – so Virtual machines. [Video description begins] He returns to Azure Home. [Video description ends] We're going to open up the same Windows virtual machine. We're going to do precisely what we did the first time. We're going to click on Networking to open the networking blade. And then we're going to be interested in looking at the effective security rules.

So let me go ahead and click Effective security rules. [Video description begins] The winsrv2019-1439 | Effective security rules blade now also displays the following link against the Associated NSGs heading: NSG-WinInt (Network interface). It also includes two tabs: NSG-WinInt and NSG-Windows. The NSG-WinInt tab is selected and includes an "Inbound rules" section. The section has a table with the following columns: Name, Priority, Source, etc.. Four rules, including LDAP, appear in the table. [Video description ends]

This time if you look at the Associated NSGs,  we used to only have NSG-Windows, which is associated at the subnet level. Now we've got a network interface association. And look at the list down below. It now includes our LDAP rule. Now that's from the NSG-WinInt. If we go to NSG-Windows, we'll see the rules available through it. Now this is going to be an important tool to use if you're troubleshooting connectivity to a virtual machine.

But always bear in mind, beyond network security rules, it could also be another type of problem that's preventing you to connect such as if you're trying to RDP into an Azure Windows VM. It could also be a routing table configuration error that doesn't allow traffic back out to the Internet, as an example.


VPN Overview
There are a few options for configuring VPN connectivity to the Azure cloud. So a VPN allows for an encrypted point-to-point network tunnel. So any traffic sent through that tunnel is encrypted, such as from an on-premises VPN appliance to a cloud-based appliance in Azure. We have point-to-site connectivity, or P2S. This is for individual remote users that might be working from home or that might be traveling that need an encrypted connection to Azure.

Then we've got site-to-site, or S2S, connections or site-to-site VPN. It's kind of what we describe where an entire on-premises network makes a connection over the Internet, for example, to the Azure cloud through an encrypted VPN tunnel. And so that would require an on-premises VPN appliance.

And we can also even have a VPN connection over a private dedicated ExpressRoute circuit. Site-to-site VPNs in Azure require a local network gateway. This is an Azure resource that you define that represents the on-premises VPN appliance. So you have to know something about it, such as its public IP address. We then can have an encrypted IPsec VPN tunnel to the Azure cloud.

But you also need to configure a resource that represents the Azure VPN side of things. And that's called an Azure virtual network gateway. With a point-to-site configuration, you are allowing individual clients to have an encrypted VPN connection over the Internet, for example, to Azure. So that means that each client is using a VPN client configuration to make that connection. And that can be an encrypted SSTP or OpenVPN IPsec type of connection. And you still need the Azure virtual network gateway in this case on the Azure side. You just don't need a client VPN appliance since it's for individual client devices.

With a point-to-site VPN, you don't need an on-premises VPN public IP address. You can also have the client device authenticate to the Azure VPN gateway using a PKI certificate. So you'd have to generate a certificate to be used by the device if you don't have one for it already. You can also use centralized RADIUS server authentication. And when you configure a point-to-site VPN, you can also specify a VPN client IP address pool that will be used by connecting clients.

The PKI certificate is a digital security certificate. It gets issued by a certificate authority and it has an expiration date. So we need to think then carefully about our PKI certificate configuration. Because it needs to be uploaded to Azure. We have to upload the root certificate public key. So then client certificates would be able to authenticate to the VPN using their configured client certificate.

You can generate a self-signed root certificate in many different ways, including using PowerShell. In this example, we're creating a variable called $cert for certificate. And we're using the New-SelfSignedCertificate cmdlet to create a self-signed root certificate. Now you don't have to do this. You can acquire a client certificate from a publicly trusted certificate authority. But if you want to do your own thing, you can do this as well.

Notice that with the -Subject parameter, we're setting the common name in this example to FakeRootCert. And we're telling it where we want to store it here with the -CertStoreLocation parameter. In PowerShell, the certificate store in Windows is available as a drive letter, so in other words, Cert:. [Video description begins] The following code displays: $cert = New-SelfSignedCertificate -Type Custom -keySpec Signature -Subject "CN=FakeRootCert" -KeyExportPolicy Exportable -HashAlgorithm sha256 -KeyLength 2048 -CertStoreLocation "Cert:\CurrentUser\My" -KeyUsageProperty Sign -KeyUsage CertSign. [Video description ends]

Now the next thing we're going to look at is what you might do to generate a client certificate, particularly from our previous example where we have a self-signed root certificate. So we're using the New-SelfSignedCertificate PowerShell cmdlet again. But a couple of things are different. We're setting in a DNS name; so calling this VPNClient1. And the subject parameter has a common name here of P2SChildCert – could be anything – P2S meaning point-to-site.

And as we go further down, at the end, notice that the signer of this certificate with the -signer parameter, notice that the signer of this client certificate is our $cert variable from our previous example. [Video description begins] The following code displays: New-SelfSignedCertificate -Type Custom -DnsName VPNClient1 -KeySpec Signature -Subject "CN=P2SChildCert" -KeyExportPolicy Exportable -HashAlgorithm sha256 -KeyLength 2048 -CertStoreLocation "Cert:\CurrentUser\My" -Signer $cert. [Video description ends]


Point-to-Site VPN Configuration
In this demonstration, I'll be using PowerShell to begin to create a self-signed root certificate and then a client PKI certificate that will be used to configure a Point-to-Site VPN. So to get started, I'm going to create a variable called $cert, which will store the result of running New-SelfSignedCertificate.
There's a bunch of parameters here, but notably, we have to pay attention to the -Subject parameter because it establishes the common name of the actual root certificate. Here I'm just calling it RootCert. It's going to use a sha256 hashing algorithm. That's going to be used to digitally sign client certificates issued from this. The key length is 2,048 bits. And with -CertStoreLocation, we're specifying where in the certificate store on the local Windows machine this root certificate will be stored.

In PowerShell, the certificate store is accessible as a drive. So instead of a drive letter, it's Cert:. It's going to go under CurrentUser\My. And the key can be used for signing, including certificate signing. So I'm going to go ahead and press Enter to generate that. And we're going to check our work. So let's change directory to the cert drive. [Video description begins] The presenter types the command: cd cert:. [Video description ends]

We're currently in currentuser\my. If I type dir, here I can see the RootCert that we've just created. That's what we specified as the common name up above. Now let's generate a PKI client certificate from the RootCert. So to do that, I'm going to use the same PowerShell cmdlet again, except what's going to be different is that we're going to sign it using our newly generated root certificate.

[Video description begins] He pastes some code comprising five lines. The following is the code per line: Line 1: New-SelfSignedCertificate -Type Custom -DnsName ClientCert -KeySpec Signature `, line 2: -Subject "CN=ClientCert" -KeyExportPolicy Exportable `, line 3: -HashAlgorithm sha256 -KeyLength 2048 `, line 4: -CertStoreLocation "Cert:\CurrentUser\My" `, and line 5: -Signer $cert. [Video description ends]

So I'm using New-SelfSignedCertificate. It's a custom type of certificate. I'm setting a DNS name here to ClientCert. And I'm using -Subject to specify that the common name of this certificate will simply be ClientCert. We can see the hashing algorithm, the key length, the certificate store location. So it's going to be in the same place that the RootCert is currently stored in.

And what's different here is I'm using -Signer and I'm passing it my variable, $cert, which contains the information for the root certificate. So let's go ahead and press Enter. And let's just do a dir here. We're still on the Cert drive in PowerShell, and we're under currentuser\my. So we can see not only the RootCert that was established previously but also the client certificate.

We can also view this on this machine in the Microsoft Management Console, or MMC, by adding the certificate snap-in. [Video description begins] He opens a "Console1 - [Console Root]" application. It includes a menu bar, and an empty "Console Root" folder displays in the navigation pane. [Video description ends] So from my Start menu, I launched MMC. I'm going to maximize it. I'm just going to go to the File menu, Add/Remove Snap-in..., Certificates, Add. It's for the current user. And I'll click OK.

[Video description begins] When he selects the "Add/Remove Snap-in..." command from the File menu, an "Add or Remove Snap-in" dialog box appears. It includes an "Available snap-ins:" section and a "Selected snap-ins:" section with an "Add" button displaying between the two. The "Available snap-ins:" section has a table with the following columns: Snap-in and Vendor. Several snap-ins, including Certificates, appear in the table. The "Selected snap-ins:" section displays a selected "Console Root" folder. And when he selects the "Certificates" snap-in and clicks the "Add" button, a "Certificates snap-in" dialog box appears. It includes a "My user account" option, a "Service account" option, a "Computer account" option, and a "Finish" button. The "My user account" option is selected. He clicks the "Finish" button and then clicks the "OK" button in the "Add or Remove Snap-ins" dialog box. A "Certificates - Current User" node now displays in the "Console Root" folder in the "Console1 - [Console Root]" application. [Video description ends]

And if I drill down under Personal, Certificates, we're going to see that we've got the client certificate and the root certificate. Of course, both are issued by the root certificate that we generated in PowerShell. [Video description begins] He expands the "Certificates - Current User" node to reveal, among others, a "Personal" node. He expands the node to reveal a "Certificates" folder, which he selects. The folder contains a table with the following columns: Issued To, Issued By, Expiration Date, etc. A few certificates appear in the table. These include ClientCert with Issued By listed as RootCert and RootCert with Issued By listed as RootCert. [Video description ends]

Now here in the portal, I'm going to go to the All resources view where I'm going to filter it for virtual network gateways. I've already got one created. A virtual network gateway represents the VPN side in Azure. So I'm going to choose Virtual network gateway. If you don't have one, you need to create it. But it might take a few minutes for it to be created initially. So here it is, it's called AzureVPN1. We need this because when you open up the properties of it, you need to click

[Video description begins] He shifts to Azure Home, which includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual networks, All resources, etc.. When he selects the "All resources" option, the corresponding blade that opens includes a "Type == all" filter option and a table with the following columns: Name, Type, Resource group, etc.. Several record links appear in the table. He selects the "Type == all" option, and the corresponding drop-down list expands to reveal several checkboxes, including a selected "Select all" checkbox. He deselects the "Select all" checkbox and selects the "Virtual network gateway" checkbox. The application now displays a single record link, AzureVPN1, in the table. [Video description ends]

Point-to-site configuration to configure a point-to-site VPN configuration. [Video description begins] The AzureVPN1 blade includes a selected "Overview" category and a "Settings" section in the resource menu. The "Settings" section includes a "Point-to-site configuration" category, which he selects. [Video description ends]

So we can see it says, Point-to-site is not configured. So I'm going to go ahead and click the Configure now link. [Video description begins] The "Azure VPN1 | Point-to-site configuration" blade includes a "Save" button; a "Download VPN client" button; an "Address pool" field; a "Tunnel type" drop-down list, which is set to OpenVPN (SSL); and a "Root certificates" section, which contains a table with the following columns: Name and Public certificate data. A single certificate, RootCert, appears in the table. [Video description ends]

Now at this point, I'm going to specify an IP address pool for the addresses I want assigned to VPN clients. And I need to make sure it doesn't overlap with my VNet range. I'm going to select this as an IKEv2 and SSTP type of connection. [Video description begins] He selects the "IKEv2 and SSTP (SSL)" option from the "Tunnel type" drop-down list. [Video description ends]

I've already typed in the name of the root certificate here. I've called it RootCert, and I've pasted in the public certificate data. Now how do you get that public certificate data? Well, back here in MMC, remember how we could see the client and the root certificate. Well, we need the root certificate's public key.

So I'm going to go ahead and right-click on the root certificate, choose All Tasks, Export..., Next. [Video description begins] When he points to All Tasks in the RootCert context menu and clicks Export, a Certificate Export Wizard appears. It includes a "Next" button, which he clicks. The wizard now displays two options: Yes, export the private key and No, do not export the private key. The second option is selected. [Video description ends]

I don't want to export the private key, but the public key is implied. So I'll click Next. I'm going to use Base-64 encoded as the file format. I'll click Next. And then I need to save this to a file. [Video description begins] The wizard includes the following options: DER encoded binary X.509 (.CER) and Base-64 encoded X.509 (.CER). The first option is selected. And when he selects the second option and clicks the "Next" button, the wizard displays a "File name:" field, which has an associated "Browse" button. [Video description ends] Public key files look something like this. [Video description begins] The contents of RootCert.cer display in the Notepad. These include some data that displays between a "BEGIN CERTIFICATE" text and an "END CERTIFICATE" text. [Video description ends]

What I want to do is copy everything between BEGIN CERTIFICATE and END CERTIFICATE. And that's what you would use to paste into our point-to-site configuration in the portal. So that's what was done here. So I'm going to go ahead and save this configuration. Once that's done, I can go ahead and download the VPN client. [Video description begins] He returns to the "Azure VPN1 | Point-to-site configuration" blade and points to the data that displays in the "Public certificate data" column of the table in the "Root certificates" section. Next, he points to the "Download VPN client" button. [Video description ends]

This is a zip file that I can extract and install locally on my Windows computer to make the VPN connection to Azure. Now once I've extracted it, I'll have a couple of subdirectories. [Video description begins] An AzureGW (2) folder displays in the Downloads folder of Windows Explorer. It includes a WindowsAmd64 folder. [Video description ends]

I'm interested in WindowsAmd64 for 64 bit. And notice, I've got a VPN client setup executable. [Video description begins] He double-clicks the WindowsAmd64 folder. [Video description ends] So I'm going to go ahead and right-click on that and run that install as administrator. I'm then asked if I want to install a VPN client configuration for VNet1. So I'm going to to choose Yes.

So on my machine now where I've run that, if I go to my Control Panel and then go into Network & Internet – so I'm looking at my Windows settings – then we'll be able to check whether or not we've got the appropriate type of connection, which means that if I go to VPN, for example, we'll see we've got a connection here that's been added when we installed that, called VNet1.

And if I click on it, I can then choose to connect. [Video description begins] The "Network & Internet" setting includes a VPN category in the navigation pane. And when he selects the category, the corresponding view includes a VPN section. The section includes a VNet1 option. [Video description ends]

So in the dialog box for Azure Virtual Network, I will click the Connect button. And after a moment, we'll see that VNet1 is now showing up here as Connected. In other words, this Windows 10 client is now connected to the Azure VPN. [Video description begins] The VNet1 option now features the word: Connected. [Video description ends]


Site-to-Site VPN Configuration
You can use a site-to-site VPN to link an entire on-premises network to the Azure cloud. This way, you have an encrypted tunnel through which transmissions travel over the Internet to get to Azure. So it's protected. To do this, we need to create two primary objects here in Azure. We need a local network gateway, which represents your on-premises VPN configuration. And we also need a cloud equivalent called a virtual network gateway.
So I'm going to call this On-prem_Site1. And I'm going to put in an IP address. This would be a public-facing IP address for that device. So you have to know this information. I have to specify the IP address space or spaces that I want to allow connectivity through the VPN front. So for example, if we're using 192.168.0.0, let's say, /24, then I could specify that that is being used in the internal network on-premises. We could add multiple items. [Video description begins] When he types an address range in the "Address space" field, an additional field displays below the field. [Video description ends]

If your VPN appliance supports the Border Gateway Protocol for sharing the routing information, so BGP, you could also configure BGP settings such as the Autonomous system number, the BGP peer IP addressing, and so on. I'm going to turn that off. I'm going to deploy this configuration. This is the local network gateway. I'm going to deploy that into a resource group called Rg1. And in this case, I'm going to leave the location at Canada East. [Video description begins] He selects the Rg1 option from the "Resource group" drop-down list. [Video description ends]

And I'll choose Create. So all we're doing is creating a reference to what our on-premises VPN environment is. Now the next thing we need to do, and we can continue while that's being deployed, is we need to do the Azure side. We need to deploy a virtual network gateway configuration. [Video description begins] He returns to Azure Home and points to the notifications control that displays at the top of the portal. [Video description ends]

So in order to do that, I first need to think about the VNet in Azure that I want to allow VPN connectivity to. Because in that VNet, I need to create what's called a gateway subnet. Let's go to our Virtual networks view. And I've got a VNet here called Vnet1. So I want to allow VPN access to that. [Video description begins] He selects the "Virtual network" option, and the corresponding blade that opens includes a table with the following columns: Name, Resource group, Location, etc.. Four record links, including Vnet1, appear in the table. [Video description ends]

So when I click on Vnet1, I need to start by looking at its existing subnets to see if we already have a gateway subnet or not. Now I don't. [Video description begins] The Vnet1 blade includes an "Overview" category and a "Settings" section in the resource pane. The "Settings" section includes a "Subnets" category. Currently, Overview is selected. And when he selects the "Subnets" category, the corresponding blade that opens includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Two subnets appear in the table. [Video description ends]

I just have two standard subnets, Subnet1 and Subnet2. I know I don't have a gateway subnet because it literally needs to be called gateway subnet. And we have a button up at the top here to add one. So I'm going to click the add Gateway subnet button. There's nothing else I'm going to configure here. [Video description begins] An "Add subnet" pane appears. It includes the drop-down lists: Network security group and Route table. Both the drop-down lists are set to None. [Video description ends]

I could associate this with a network security group if I were to control traffic flow or a route table object. But at this point, I'm going to go ahead and just click OK. So I'm creating a gateway subnet then, and notice it's literally called GatewaySubnet – no spaces – and it's part of Vnet1. [Video description begins] GatewaySubnet now appears in the table in the Vnet1 | Subnets blade. [Video description ends]

So what have we've done? We've got the local network gateway for the on-prem VPN appliances. We've got the gateway subnet. We still have to define our virtual network gateway, the Azure VPN side of things. [Video description begins] He returns to Azure Home. [Video description ends] So I'm going to click Create a resource. And I'm going to type virtual network. And here it is – Virtual network gateway.

I'm going to click Create. [Video description begins] The "Create virtual network gateway" blade has three steps: Basics, Tags, and Review + create. Currently, Basics is selected. It includes an "Instance details" section and a "Public IP address" section. The "Instance details" section includes a "Name" field; a "Region" drop-down list; a "Gateway type" heading; a VPN type heading; an "SKU" drop-down list, which is set to VpnGw1; and a "Virtual network" drop-down list. The "Gateway type" heading has two options: VPN, which is selected, and ExpressRoute. The VPN type heading has two options: Route-based, which is selected, and Policy-based. The "Public IP address" section includes a "Public IP address" heading, a "Public IP address name" field, an "Enable active-active mode" heading, and a "Configure BGP ASN" heading. The "Public IP address has two options: Create new, which is selected, and Use existing. The "Enable active-active mode" heading has two options: Enabled and Disabled, which is selected. The "Configure BGP ASN" heading has two options: Enabled and Disabled, which is selected. [Video description ends]

So I'm going to call this AzureVPN1. [Video description begins] He types AzureVPN1 in the "Name" field. [Video description ends] And I'm going to specify this. It doesn't have to be in the same region, but I'm going to specify, well actually, let's leave it where it is – Canada Central. Let's say, that's where we want to deploy that. This is going to be a VPN type of gateway. It's not going to be used for an ExpressRoute-dedicated connection. And that's why sometimes people will call this object we're configuring not a virtual network gateway but an Azure VPN gateway. So that's really what they're referring to when they say that.

The next item is the VPN type, whether it's Route-based or Policy-based. Notice, the default here is Route-based. So with the route-based VPN type, what we're talking about is the fact that most routers that aren't specifically dedicated VPN appliances would use this type of configuration. And that's because the router can actually be configured with what are called multiple virtual tunnel interfaces. And this is used for VPN connections. And so you can make multiple VPN tunnel interfaces or virtual tunnel interfaces on the router, which allows connectivity to multiple sites.

Then you've got Policy-based. Now this is what was traditionally used with Cisco ASA appliances, which were used for VPN connectivity, among other things. And what it allows is the connectivity for one VPN link to an Azure subnet. So in this case, I'm going to use the more common and default setting of Route-based.

Next, you can choose from the SKU drop-down list. Now as you go up through the list, you start increasing things like the supported bandwidth and also the number of supported Point-to-Site connections and so on. [Video description begins] He shifts to the VPN Gateway Documentation web page. It has an "Overview" category in the navigation pane. The category has an "About VPN Gateway" subcategory, which is selected and which includes a table with the following columns: SKU, P2P IKEv2/OpenVPN Connections, Aggregate Throughput Benchmark, BGP, etc.. Several SKUs appear in the table. [Video description ends]

Here in the Microsoft documentation, we can see the VPN gateway SKUs such as VpnGw1. And we can see here that we start to see changes in the number of Point-to-Site supported connections and the supported throughput and so on and whether Border Gateway Protocol for route sharing, BGP, is supported or not. Next, I have to tie this virtual network gateway or VPN gateway to an Azure VNet.

So I can go through in the drop-down list and I'll select Vnet1. [Video description begins] When he selects the Vnet1 option from the "Virtual network" drop-down list, a "Subnet" drop-down list, which is unavailable and which is set to the GatewaySubnet option, displays below the "Virtual network" drop-down list. [Video description ends]

It knows it's got a gateway subnet. That's why we did that first ahead of time. So that's good. Next thing I have to do is determine whether I want to use an existing or create a new public IP address resource. I'm going to create a new one here. And I'm going to call it AzureVPNSite1_PubIP. We need a public IP address, so it's reachable over the Internet. [Video description begins] He types AzureVPNSite1_PubIP in the "Public IP address name" field. [Video description ends]

For high availability, you can enable active-active mode. And when you do that, down below, you'll be creating a secondary public IP address for connectivity. For true high availability, your on-premises VPN appliance should have two interfaces for this high availability. And each one of those should go through a different Internet service provider for true availability of the network connection in case there's a problem with one provider.

[Video description begins] When he selects the "Enabled" option that displays against the "Enable active-active mode" heading, a "Second public IP address" section displays below the heading. The section contains a "Second public IP address" heading and a "Public IP address name" field. The "Second public IP address" heading has two options: Create new and Use existing. [Video description ends]

However, I'm not going to do that. So I'm going to disable active-active mode. I'm also going to leave the default of Disabled for configuring Border Gateway Protocol autonomous system numbers. I'm going to click review and create. And this can take a bit of time to create in Azure. So the validation is passed. [Video description begins] He points to the message that the application displays. [Video description ends]

I'm going to go ahead and click the Create button. After a few minutes, the virtual network gateway will be deployed. So then we can click Go to resource because we need to now add the site-to-site connection. [Video description begins] The AzureVPN1 blade that opens includes an Overview category, which is selected, and a "Settings" section in the resource pane. The "Settings" section includes a "Connections" category. [Video description ends]

So to do that, in the properties bar that's opened up, I'm going to click to open the Connections blade. [Video description begins] The AzureVPN1 | Connections blade includes an "Add" button, a "Refresh" button, and an empty table with the following columns: Name, Status, Connection type, etc.. [Video description ends]

We don't have anything listed. So I'm going to click the Add button. Because I want to add a site-to-site link basically linking the local network gateway on-premises to the Azure network gateway in the cloud. [Video description begins] An "Add connection" blade opens. It includes a "Name" field; a "Connection type" drop-down list, which is set to VNet-to-VNet; a "Virtual network gateway" heading (given as AzureVPN1); a "Local network gateway" heading; and a "Shared key (PSK)" field. [Video description ends]

So I'm going to call this Site1VPN. And from the Connection type, it's going to be Site-to-site (IPsec). The Azure virtual network gateway is already selected. So I have to select the local network gateway, which we created previously. It's called On-prem_Site1. [Video description begins] When he clicks the "Local network gateway" heading, a "Choose local network gateway" blade opens. It includes an On-prem_Site1 option. [Video description ends]

So we're going to go ahead and select that. And I'm going to specify a pre-shared key value that would have to be configured on the client-side device to establish the link. And at this point, I'm going to click OK to create site-to-site connection. [Video description begins] The application returns to the AzureVPN1 | Connections blade. [Video description ends] And after a second, we can see our Site1VPN connection has been added. Now the Status is Unknown because it was just created. And we can keep clicking Refresh until such point that it makes a connection to the on-premises VPN appliance.


Azure Virtual WAN
Azure Virtual WAN is a wide-area network solution as the name implies. Now it's a wide-area network solution in the sense that we can interconnect different sites, for example, or VNETs using the Microsoft backbone, which serves as the wide-area network infrastructure. So we can have VPN links, site-to-site links, or point-to-site links to Azure. We can also have connections over dedicated private circuits through ExpressRoute.

Either way, we've got connectivity coming from different locations into the Azure cloud. It could even be within the Azure cloud between VNETs. So it's kind of a hub and spoke type of topology where the hub would be the Azure cloud and its locations around the world where there is network connectivity.

And the spokes are the different types of connection points that we'll discuss further. Spoke types include virtual networks, or VNets, in Azure; Point-to-site VPN connections for individual clients making a connection into Azure; site-to-site VPNs where we've got entire networks that are linked into Azure; and ExpressRoute dedicated circuits.

When you configure Virtual WAN, there were two types. There's Standard and there's Basic. The Standard type supports a number of different types of spokes like point-to-site, or P2S, VPNs; site-to-site, or S2S, VPNs; ExpressRoute; and also even interconnectivity between multiple Virtual WAN hubs. And VNets, of course, can also be connected as part of the Virtual WAN. Now the Basic only supports site-to-site VPN connectivity. Now if you've got Basic configured, then you can upgrade it to Standard. But you can't do the opposite. You can't revert from Standard and go all the way back down to Basic.

Now pictured in our diagram, we see a sample Azure Virtual WAN configuration where we've got two Azure VNets at the top and we've got two branch offices down at the bottom. And those branch offices would be using site-to-site VPN links to Azure. Well, the Azure Virtual WAN hub serves as a central connectivity point to interlink all of these devices.

And again, we can even link multiple Azure Virtual WAN hubs together for even further connectivity. Remember, this is like a wide-area network infrastructure that sits on top of Microsoft's network backbone. So how do I go about configuring this? Well, the first thing to do is to create a Virtual WAN resource in Azure, after which you add a virtual hub to it. Then you add a VPN gateway. And then you start linking your various spokes, whether they're VNets or VPN connections to the centralized hub.


Azure Firewall Overview
Azure Firewall is a managed service. And what that means in the cloud, of course, is that we don't have to set up the underlying infrastructure to support the solution. It's already taken care of for us by the cloud service provider. So Azure Firewall is a managed service, and it's also a stateful firewall. A stateful firewall means that it understands more than just looking at individual packets. It understands sessions such as if we have an inbound allowance to a web server, then the stateful firewall will know, well, I need to make sure I allow the outbound-related traffic out through that firewall.

So you might say, well, a network security group in Azure or NSG is a managed service and it's also a stateful firewall just like Azure Firewall is. So what is the difference? Well, there is a difference. Azure Firewall applies up to Layer 7 of the OSI model, up to the application layer. So beyond IP addresses and port numbers, which is important and which is supported by network security groups, Azure Firewall takes it further and can look at the payload of the transmission, meaning it can look at URLs that people, for example, are trying to connect to.

And so we can build application rules in that example to address that. Azure Firewall, when it's configured, needs a static or unchanging public IP address. And just like the rules in a network security group, the rules in Azure Firewall control traffic flow, either allowing or denying it. You can also configure threat intelligence in conjunction with Azure Firewall. And what it can do is it can look to see if there are any known malicious IP addresses or DNS domains that are involved with transmissions and it can alert on that and even block it.

There are three types of firewall rules with Azure Firewall that you can configure – network rules, which we'll talk about here; application rules; and Network Address Translation, or NAT, rules. We'll talk about each of those three types. Let's start with network rules. So network rules apply up to Layer 4 of the OSI model. So you can deal with TCP, UDP, ICMP, or any of those protocols. You can make decisions on what's allowed or not based on source and destination IP addresses or destination port number. And you can have an Allow or a Deny action. Those are network rules.

Application rules go higher in the OSI model, up to Layer 7, the application layer. It's for outbound connectivity when users are connecting to Fully Qualified Domain Names, FQDNs, such as www.skillsoft.com. So you can use wildcards if you want when you configure application rules. So you could use asterisks as wildcard symbols and specify parts of domain names, such as *.domain.com. [Video description begins] The following information is displayed on screen: Wildcards are allowed, such as *.domain.com or *. [Video description ends]

You can also specify the protocol that would be used, whether it's HTTPS:443 or something different. And of course, you can either allow or deny that type of connection. [Video description begins] The following information is displayed on screen: Protocol:port, such as HTTPS:443. [Video description ends] For example, you might want to deny access to social media sites like Facebook and Twitter. So you can do that with application rules.

Then we have NAT rules of which there are two types. The first is Source Network Address Translation, or SNAT. This means that traffic leaving your virtual network subnets in Azure assume the public IP address of the Azure Firewall. And that's why it needs to have a public IP address.

But then you've got, kind of, the opposite for traffic coming in. You've got Destination Network Address Translation rules, or DNAT rules. So you can use DNAT to translate public IP address and port numbers to private IP addresses and port numbers.Now what does that mean exactly? We'll talk about that in a moment when we have another screenshot. Now when you deploy Azure Firewall into a VNet, you'll be doing that with a subnet called AzureFirewallSubnet.

But let's examine DNAT just a little bit further. So we're looking at a DNAT type of rule here. So we have a rule that's being added to the NAT collection. The name here is Incoming. It's got a priority value of 100. And so the priority value is used to order the rules. So a rule with a priority of 100 gets checked before a rule with the priority of 101. And if there is a match with the traffic for rule, the priority of 100, that's what applies and rule processing stops. So NAT rules, and that's what we're looking out here, these get applied based on the order of the priority value.

Then network rules would go through the same thing and then application rules. So what we have here is we have a rule called Incoming HTTP. So the protocol is TCP and the destination here is 40.80.251.142. That's the public IP address of the Azure Firewall. It's called Destination because that's the destination endpoint that, for example, users think that they're connecting to. Well, really they're connecting to a DNS name, but that name gets resolved to this public IP.

What will happen then is Azure Firewall will say, okay, someone is connecting to that IP – port 80 in this case. I'm going to forward that inside of Azure to a translated IP address of 10.1.1.1 on port 80. So it's a way that we could publish or make available a web application while hiding its true internal address.

[Video description begins] A screenshot of an application displays. It includes the following fields: Name (given as Incoming) and Priority (given as 100). The screenshot also includes a "Rules" section, which contains a table with the following columns: NAME, PROTOCOL, SOURCE ADDRESSES, DESTINATION ADDRESSES, DESTINATION PORTS, TRANSLATED ADDRESS, and TRANSLATED PORT. A couple of rules appear in the table. These include Incoming HTTP with PROTOCOL listed as TCP, SOURCE ADDRESSES listed as *, DESTINATION ADDRESSES listed as 40.80.251.142, DESTINATION PORTS listed as 80, TRANSLATED ADDRESS listed as 10.1.1.1, and TRANSLATED PORT listed as 80. [Video description ends]


Deploying Azure Firewall
In this demo, I'm going to use the portal to configure Azure Firewall. Now Azure Firewall is its own separate type of Azure resource. And so to get started with it here in the portal, I'm going to click Create a resource. And I'm going to search for Firewall. [Video description begins] Azure Home is open. It includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, All resources, Virtual networks, etc.. With the presenter clicking the "Create a resource" option, the "New" blade that opens includes a Search box. [Video description ends]

And we see Firewall in the list. So I'm going to click on that. Then I'll choose Create. [Video description begins] The "Firewall" blade that opens includes a "Create" button. [Video description ends] I'm going to deploy this into an existing resource group. [Video description begins] A "Create a firewall" blade opens. It includes a "Subscription" drop-down list that has an associated "Resource group" drop-down list. It also contains an "Instance details" section. The section includes a "Name" field; a "Region" drop-down list, which is set to (Canada) Canada Central; a "Choose a virtual network" heading; a "Virtual network name" field; an "Address space" field; and a "Subnet" heading. The "Choose a virtual network" heading has two options: Create new, which is selected, and Use existing. [Video description ends]

And I'm going to call this AzureFW1, Azure Firewall 1. [Video description begins] After selecting the Rg1 option from the "Resource group" drop-down list, he types AzureFW1 in the "Name" field. [Video description ends] I'll deploy it in the Canada Central region. And I have to specify a virtual network I want this applied to.

I'm going to use an existing one. [Video description begins] When he selects the "Use existing" option that displays against the "Choose a virtual network" heading, a "Virtual" network" drop-down list, a "Firewall public IP address" drop-down list, and a "Forced tunneling (preview)" heading replace the "Virtual network name" field, the "Address space" field, and the "Subnet" heading. [Video description ends]

From the list, I'll choose Vnet1. Now notice, it says this virtual network needs to have a subnet named [Video description begins] He selects the Vnet1 (Rg1) option from the "Virtual network" drop-down list. [Video description ends] AzureFirewallSubnet. We don't have that. So let's go back and let's build a subnet with that name in Vnet1. So to get started with that, I'm going to go ahead and right-click and duplicate our web browser tab up at the top. [Video description begins] Azure Home opens in the new web browser tab. [Video description ends]

So we're going to navigate to Virtual networks. [Video description begins] When he selects the "Virtual networks" option, the corresponding blade that opens includes a table with the following columns: Name, Resource group, location, etc.. Four record links, including Vnet1, appear in the table. [Video description ends]

And I'm going to be opening up Vnet1 where we can then see the subnets within that virtual network. [Video description begins] The Vnet1 blade includes an "Overview" category, which is selected, and a "Settings" section in the resource menu. The "Settings" section includes a "Subnets" category. He clicks the category, and the corresponding blade that opens includes a "Subnet" button and a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Three subnets appear in the table. [Video description ends] We can see we've got Subnet1, Subnet2. We have a GatewaySubnet, but we don't have an Azure Firewall subnet.

So I'm going to click add a Subnet. And I'm going to specify that it's going to be called AzureFirewallSubnet. [Video description begins] An "Add subnet" pane appears. It includes the following fields: Name and Address range (CIDR block) (given as 10.0.3.0/24). He types AzureFirewallSubnet in the "Name" field. [Video description ends] And I'm going to specify that it's 10.0.3.0/24 44-bit subnet mask. And that's it. That's all I need to do. So I'm going to go ahead and click OK. We'll just give it a moment to add that subnet. And we can now see that it exists in the list for Vnet1.

So let's go back to where we were creating the firewall. Let's just back out. We know we're not going to save our settings – they were wrong anyways. I'll click Create. [Video description begins] He returns to the first web browser tab and clicks the "Firewall" link in the breadcrumb navigation to return to the corresponding blade. [Video description ends]

And let's step through this again. So I'll just deploy this into the same resource group and basically do the same stuff I just did previously. The difference is this time we've got the correct subnet. So Rg1. We're going to call it AzureFW1, like I did previously with the firewall. It's going to be in Canada Central. And I'm going to use an existing VNet. Let's choose that from the list. This time we don't have the message about Azure Firewall subnet because we created it.

Next thing you have to do is specify a public IP address. Azure Firewall needs to have a static public IP. Now I don't have one that I can select that's not already in use. So I'm going to go ahead and click Add new to make a new one. And I'm going to call it AzureFW1PubIP. [Video description begins] When he clicks the "Add new" link associated with and which displays below the "Firewall public IP address" drop-down list, an "Add a public IP" dialog box appears. It includes a "Name" field and an "Assignment" heading. The heading has two options: Dynamic and Static. [Video description ends]

And I will choose OK. Notice, the assignment, of course, is going to be static. It needs to be static. Okay, so now we've got the public IP address for the firewall. Perfect. So I'm going to go ahead and click review and create in the bottom left. And after the validation has passed, I will then click Create to actually create the Azure Firewall resource. Before too long, we can see that the deployment is complete.

So I'm going to click Go to resource. Because what we want to do is take note of the private IP address. [Video description begins] The AzureFW1 blade that opens includes an "Overview" category in the resource pane. The category is selected and includes a "Firewall public IP" heading and a "Firewall private IP" heading. [Video description ends]

Now we know it's got a public IP, but we're interested in the private IP address of the firewall, which I'm going to copy. Because we need to make a routing table entry for the subnets where we want to route traffic through the firewall, for example, on the way out to the Internet. So I've just copied the private IP of it. [Video description begins] He clicks the "Copy to clipboard" icon associated with the Firewall private IP address. [Video description ends]

So what I want to do then is go back, let's see, into our virtual network list. [Video description begins] He returns to Azure Home and selects the "Virtual networks" option. [Video description ends] And I'm interested in Vnet1. And in particular, I'm interested in making sure that resources like virtual machines on Subnet1 – so let's go to Subnets – send their traffic out through that firewall. So Subnet1. It means we have to look at the route table entries related to Subnet1. So what is it configured with? Well, it's not configured with any routing table.

Okay, so what I want to do then is get a routing table created so that we can link Subnet1 to it. [Video description begins] When he selects the "Subnet1" record in the table in the Vnet1 | Subnets blade, the corresponding blade opens. It includes a "Route table" drop-down list, which contains only a "None" option. [Video description ends]

So I'm going to go home. I'm going to click Create a resource. And as you might guess, I'm going to create a route table. [Video description begins] He types "route" in the Search box in the "New" blade, and "Route table" is among the results that display. [Video description ends] There it is – Route table. And let's go ahead and click Create. We're going to add a route within the route table. So let's call this RouteTable1. And let's deploy it into a resource group.

As I was saying, we're going to create a route in the route table for 0.0.0.0/0. That's the default route for IPv4. So we want to funnel all traffic in Subnet1 out through the firewall on its way out to the Internet. [Video description begins] A "Create route table" blade that opens includes a "Name" field and a "Resource group" drop-down list. And after typing RouteTable1 in the "Name" field and selecting an Rg1 option from the "Resource group" drop-down list, he clicks the "Create" button. [Video description ends]

So we'll be able to do that once the route table resource is created here. [Video description begins] A pop-up, which appears, includes a "Deployment succeeded" message and a "Go to resource" button. [Video description ends] And it's done. So deployment succeeded. I'll click Go to resource to open up the route table. [Video description begins] The RouteTable1 blade includes an "Overview" category, which is selected, and a "Settings" section in the resource pane. The "Settings" section includes a "Routes" category. [Video description ends]

And naturally, we want to create a route entry. So I'm going to click Routes over on the left. And we're going to click the Add button. And we have to fill out a few details here such as the name – so SendToAzureFirewall. The address prefix here is going to be 0.0.0.0/0. [Video description begins] An "Add route" blade opens. It contains a "Route name" field, an "Address prefix" field, and a "Next hop type" drop-down list, which is set to Virtual network gateway. [Video description ends]

So that's the default route for IPv4. The next hop is going to be a virtual appliance. And this is where I'm going to paste in the private IP address of the Azure Firewall. And I'll click OK. And it's done. [Video description begins] When he selects the "Virtual appliance" option from the "Next hop type" drop-down list, a "Next hop address" field appears below the drop-down list. And when he pastes the Firewall private IP address in the field and clicks the "OK" button, a pop-up appears. It includes the message: Adding route. [Video description ends]

So at this point, we've got Azure Firewall configured. So let's go back and check that out and we'll go home here. There's Azure Firewall 1. [Video description begins] After returning to Azure Home, when he clicks the AzureFW1 resource link that displays in a table in the "Recent resources" section, the corresponding blade that opens includes an "Overview" category, which is selected, and a "Settings" section in the resource menu. The "Settings" section includes a "Rules" category. [Video description ends]

Now we're not going to configure them right now. But notice that what we can do is go into Rules where we can create and manage NAT rules, network rules, and application rules. [Video description begins] The AzureFW1 | Rules blade includes the following tabs: NAT rule collection, Network rule collection, and Application rule collection. [Video description ends]
