                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 20


Policy Assignment and the CLI (Cont)
  - In other words, let's bring up that previous command, let's use the up-arrow key, az policy definition list
    - But this time, what we are going to do is use --query
    - We are going to put in open and closing square bracket, which indicates that we have an array of items
    - There's multiple policy definitions. Dot. And the property we are interested in is displayName, where name has a capital N
    - This is only going to show me the names of the policies as opposed to all of the details for each of them.
  - We can see as we scroll back up through the output that there are quite a few of them
    - Having done that, we are just going to clear the screen here for one second. We can also view policy assignments.
    - We could run az policy assignment list. We'll see any assigned policies.
  - We've got one that's assigned for checking disk encryption, and we can see when it was created, who was it assigned by, and we have all of those details
    - Now we could also specifically ask for that information, meaning we could ask for specific assignments at a specific scope level.
  - For example, we're going to run az policy assignment list and we are going to use --scope
    - What we've put in double quotes here is a reference to our subscription ID
    - We want to see any assignments made at the subscription level.
  - We're going to see the same kind of output because we only have one assignment
    - But nonetheless, it is showing us our disk encryption should be applied on virtual machines assignment
    - We will just minimize the Cloud Shell here and verify this.
    - We do see that we have our disk encryption policy here, this assignment made at the Pay-As-You-Go subscription level.


Policy Assignment and PowerShell
  - In the Azure portal, we know that we can go into the Policy tool and go to the Assignments view to assign a policy at a given scope
    - Whether it's a subscription, resource group, and whatnot
    - However, we can also do that in PowerShell
  - The first thing we are going to do here is to create a variable called $rg for resource group
    - We are going to store in that the result of get-azresource group, and the name is going to be rg1
    - If we do $rg, we can see it's got a reference to the resource group
  - The next thing we want to do is create a variable to store the definition of a policy
    - To do that, we've created a $definition variable, it will store the result of running Get-AzPolicyDefinition, which we are then piping to Where-Object
  - We've got the space backtick here to wrap that to the next line
    - Where-Object then has an expression, where we're looking at the display name of each policy definition 
    - Until we find one that equals Audit VMs that do not use managed disks
  - Where-Object is a filtering type of cmdlet, we've got the open and the closing curly brace and within the expression
    - The $_ is a built-in PowerShell variable, it's a placeholder that allows you to process a collection of items
    - Here the collection of items is the collection of policy definitions
    - Then from there, we can call upon the .Properties.DisplayName property
    - After we've done that, we should have the policy definition for Audit VMs that do not use managed disks stored in our dollar sign definition variable.
    - There are some warning messages here about some changes taking place with these PowerShell cmdlets, and that's fine
    - What we want to do then is clear the screen and let's just see what's in $definition.
    - Looks good. Looks like we've got the definition of a policy, the next order of business is to assign that policy.
  - To do that, we are going to use the New-AzPolicyAssignment cmdlet
    - We are going to assign a name. It's going to be called VMs-ManagedDisks, and the DisplayName, Check for VM Managed Disks, then -Scope
    - We are then going to reference my variable $rg, it points to resource group one
    - Within that, we'll call upon the ResourceID property
    - That's what we going to do to set the scope of where that policy should be applied
    - Then, of course, we have to tell it the policy definition using -PolicyDefinition, use our $definition variable
    - Again, we've got a few warnings as these cmdlets are always changing.
  - In the end, the assignment should have taken place, we can take a look at that even in the portal to see if that's true
    - We're already in the Assignments view.
    - If we do a Refresh, then we should see that there it is right there, Check for VM Managed Disks
    - And it's applied not just to the subscription, but rather to a resource group, Rg1, within the subscription


Custom Policies
  - Although there are many built-in policies that you can assign in Azure, such as for checking security compliance
    - Like checking if virtual machines have disk encryption enabled
    - Or for doing other things like limiting which types of virtual machines can be created in certain regions
    - There are times you might need to build your own custom policy. 
    - To do that here in the portal, we are going to search for Policy to open up the Policy tool.
  - In the Policy tool, go to Definitions, we'll see a list of all of the policy definitions that are available.
    - We can filter it so that, for example, we can view only Custom policies
    - There are none, at least not yet so we're going to add a custom policy definition by clicking the add Policy definition button up above.
    - When we do that, we have to fill in a few items. Notably, we have to specify the actual policy rule in JSON format.
  - We've placed my own custom JSON text here
    - We've got a policyRule and what we're looking at is when we have a resource deployment occurring
    - We want to check to see if any tags have been applied
    - If tags haven't been applied, so exists false, then the effect is going to be append, we want to append some tags
    - To the tags field, we want to add costCenter with a value of yhz
    - This is a way that we could enforce some consistency to a degree when it comes to adding tags to newly created resources. 
  - To create this custom policy, first of all, we are going to define the location at the top, as let's say subscription level.  
    - We are going to call this name, Add Cost Center Tag, and apply it to an existing category
    - These are categories of policy definitions, let's say Tags and of course, we have our rule listed down below.
    - That's it we are going to scroll down at the bottom, and click Save to save this custom policy definition
    - Now we are able to use this for assignments
    - For example, if we go to the Assignments view, we can then actually assign that custom policy. 
  - We could choose Assign policy, just like we normally would with a built-in policy
    - The only difference is, we're going to select our custom policy
    - For Policy definition down below because you might have quite a large list, you might want to filter it by Custom.
    - There it is, Add Cost Center Tag, we can select that and we can decide where we want that applied.
  - Say for example, we want to change it from the subscription to a resource group.
    - We can go back to the Scope selector, within our subscription, we'll apply that to a specific resource group where we might deploy resources
    - Then we'll go ahead and select that.
    - At this point, we are going to click Review + create and then we will create the policy assignment.
  - The next thing we'll do is just test that out by creating something in that resource group.  
    - So let's just go Home, let's choose Create a resource.
    - Let's say it's going to be a storage account, so I'm going to type in storage account.
    - We'll select that and choose Create, at this point we're going to go through and just basically create a very simple storage account.
  - We'll deploy it into resource group 1 because that's where a policy applies.
    - We'll also just give it a unique name that we know won't be used by anything else.
    - All that we really want to do is create the storage account. 
    - We are just going to go right to the review and create it.  
    - Back in the Policy tool, if we look at the Compliance view, make sure you track that assignment.
  - Right now, it currently says it's not yet been started
    - These things can take a little bit of time before they kick in
    - So as we keep clicking Refresh, we can see for our Add Cost Centre Tag policy that we've got a Compliance state now of Non-compliant
  - Currently, it's 18 out of 24 resources, so 75%. However, if we keep clicking Refresh
    - That will change as it keeps evaluating the resources in our subscription to see which ones do not have that specific cost center tag
  - So, we can click directly on that custom assignment to open that up and view the details about it
    - Such as scrolling down to see a list of the non-compliant resources
    - In this case, that do not have the cost center tag applied


