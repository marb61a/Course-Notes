                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 25


Resource Locking and PowerShell (cont)
  - Actually, let's see what that would look like in terms of an error if we didn't have those parenthesis there, what would it look like? 
    - Okay, well, we're getting some kind of a message about lock2 could not be found
    - It's having a problem finding all of this, however if we bring up the previous command where we did have our open and close parentheses
    - Then it did not give us any complaints.
  - If we just run $lock to see what's in the variable, looks like it's got the lockid because that's what we asked for
    - That's the property that's stored in the variable.
  - Then given that we have that it's at this point that we are able to remove that resource locks
    - We have a lockid, we can do that with remove-azresourcelock -lockid, and we'll just pass it my variable now $lock
    - Actually if we don't tell them anything, it asks me for confirmation which we'll Ctrl C to that
    - Then we'll clear the screen and bring up that command again,just add -force to suppress it asking us, after a moment looks like it's done.
    - We can verify this with get -azresourcelock.
    - Previously it showed us lock2 for rg1, the resource group but now it shows nothing because it's been successfully removed.


Resource Locking and Templates
  - Not only can you use the CLI PowerShell and the portal to manage resource tags in Azure, but you can also apply tagging from an ARM template
    - ARM standing for Azure Resource Manager. we've got an example here in WordPad, where essentially what we're looking at here is the type.
  - This is Microsoft.Authorization/locks, we've got a name here
    - We are going to create a resource lock here, and name it Rg3Lock
    - The level will be ReadOnly, and we can specify any additional notes
  - What we don't see in here is the scope to which the resource lock will be applied
    - That happens at deployment time when the template is deployed.
    - Go ahead and see that, in the portal, click Create a resource because we want to create a template deployment from the template
    - We are going to search for template and choose Template deployment.
    - We'll choose Create, there are a bunch of ways that this could be done, we could have created this template deployment from the CLI or PowerShell.
  - We've decided that want to do it this way, we can choose for example, Build your own template in the editor
    - As we already have it so we can just click Load file.
  - We've specified the template file that we looked at a moment ago in WordPad.
    - It's going to create a lock called Rg3Lock, st's going to be ReadOnly so go ahead and Save that
    - It automatically pops up into the Custom deployment for that template where we can choose the Resource group where you want that applied.
  - Let's say Rg3, and I'm going to have to go down and agree to the terms and conditions and click Purchase
    - So now the template deployment has begun, in other words, the lock to resource group Rg3 is in the midst of being applied
    - Once it says it's done, which it just did, we're going to go to the resource group and take a look at the locks
      - In the Resource group navigation bar, click down on Locks and lo and behold there's our lock Rg3 and it's set as Read-only


Resource Tagging Overview
  - In Azure, we know that a resource is something that can be deployed in the cloud
    - Whether it's a SQL database or whether it's a virtual machine, a storage account, a network interface, and so on.
  - Well, we can tag resources and what that really means we're doing is we're adding metadata to them
    - Why would you want to do that? You want to add tagging to resources because it allows you to add meaningful additional information to them
    - Such as related to a department, that that resource might have been deployed by
    - Or a client, that resource should be billed to, or a project it should be billed to, or a cost center
  - You can also use policies in Azure to enforce tagging. For example, you could set a policy so that any new resources deployed 
    - Let's say in a particular resource group will automatically have a cost center tag applied with a specific value
    - That can be automated. Each resource can have up to a maximum of 50 tags
    - Now not every single type of Azure resource will support tags, but the vast majority of what you're going to want to do it to, they will support it
    - The other thing about this is that resource group tags are not inherited
    - So if you add a tag to a resource group, that does not mean it will automatically flow down 
    - And set that tag for all of the resources in the resource group
    - If you want to do that, look at working with Azure policies that have a modify effect for tagging purposes
    - You can use the CLI to work with resource tagging.
  - In our first example, we've got az tag list that's being piped to the line filtering grep tool in UNIX and Linux
    - And we're asking to display the tagName property.
  - What that will do is give you a list of all of the tags in the entire Azure subscription
    - You can create a tag with az tag create, here we're naming it DeptID.
    - We can also add tag values with az tag add-value.
    - Here we're adding it to DeptID, the value is 1234. You can even apply to a specific resource such as az network vnet update.
  - We're applying a tag to a specific VNet in a resource group called rg1
    - And the name of that is vnet1, we're using --set tags. and then Dept ID equals in this case the values of 4555
    - Resource tagging is also possible using PowerShell.
  - In our first example, we're creating a variable called $storaccount
    - It's essentially going to point to a storage account, we get that by running get-azresource
  - We specify the name of the resource, in this case, the storage account name and the resource group it's deployed into
    - Then our variable can be used to refer to that storage account
    - In our second example, that's exactly what's being done, we're calling upon our variable
    - Then we're calling upon .tags and .add, because we want to add the CostCenter tag with the value of YHZ to the storage account
    - Then to commit that to the resource to the storage account, we run set-azresource. We use the -tag parameter
  - In this case, we refer to the $storacct variable .tags property
    - We use the -resourceid parameter and give the ID, the resource ID of our storage account variable to write to
    - We are using -force here just to suppress any messages that might pop-up asking you for sure here in PowerShell
    - The next thing then that we can do is retrieve resources  
  - Here, we are using Get-AzResource with the -Tag parameter
    - We refer to the tag within curly braces after the @ symbol
    - In quotes, we've got CostCenter, it's the name of the tag, equals and then in quotes, we've got the value I'm looking for, YHZ
    - Now all of that is enclosed within open and close parentheses because if we don't do that, it's going to try to use .Name as a property of YHZ
    - That's not quite it. We need .Name to be a property of the return result of what executes first within the parentheses, in other words, retrieving the tags
    - We want to make sure we get the name of the resource
    - What that command will really do is it's going to show us the names of all Azure resources in the subscription that have "CostCenter" = "YHZ"
    - It could potentially be a pretty long listing, in the last example, we can also remove tags.
  - In this case, we've already got our storage account pointing to in this case to storage account
    - Doesn't have to be a storage account, could be pretty much any type of resource that supports tagging
    - But we're calling upon the variable .tags.remove
    - And in parentheses and double quotes, we are just giving it the name of the tag we want to remove, in this case CostCenter.


Resource Tagging and the Portal
  - Tagging resources in Azure is useful because tags are metadata
    - It's key and value pairs up to 50 that you could add for each individual Azure resource
    - You might want to tie a resource to a cost center, or a department, or a project, or something like that
    - Which facilitates searching, grouping, and even looking at things on a per billing basis for specific tags
  - We are going to go ahead here and get started in Azure by going to the All resources view where we open up an existing resource.
    - It doesn't matter which one it is, scroll down and open up a virtual machine.
  - When you click on an Azure resource, in the navigation panel, you'll see Tags
    - When you click Tags, you'll see any existing tags or key and value pairs that have been assigned to that resource
    - And you can make changes to them up to having 50 key and value pairs
