                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 23


Azure AD Role PowerShell Assignment (Cont)
  - The first thing we are going to do is create a new role assignment
    - To do that, we are going to use the New-AzRoleAssignment PowerShell cmdlet
    - We are going to use the -SignInName parameter and assign this to an Azure AD user jhill@quick24x7test.onmicrosoft.com
    - I could also apply this to a service principle in Azure AD or a group, in this case, it's an individual Azure AD user
    - We have to specify the RoleDefinitionName, so specify that parameter
    - In this example, it's going to be the SQL DB Contributor
    - As we know when we work with RBAC, we have to determine the scope where the assignee can exercise those privileges
    - In this case -ResourceGroupName, Rg1, we could specify a subscription or an individual resource
    - Here we want it done at the resource group level then go ahead and press Enter.
  - Now we can verify this using PowerShell cmdlets., we are just going to clear the screen
    - Then what we're going to do, is we're going to retrieve role assignments for Rg1 for that user.
    - To do that, we are going to use Get-AzRoleAssignment -ResourceGroupName is Rg1, that's where we just assigned it
    - -SignInName is going to be our user J Hill, press Enter and see what it returns
  - We're seeing that user Jen Hill has been assigned the SQL DB Contributor role
    - Of course we asked for this at the Rg1 resource group level so she has those permissions for SQL database deployments within the Rg1 resource group
    - Now naturally, we need to know how to be able to remove role assignments using PowerShell.
  - We know how to add them and check them, what about removing them? 
    - We do that with the Remove-AzRoleAssignment PowerShell cmdlet
    - You might expect, in this case, we're going to use -SignInName and specify our Azure AD user sign in name, the email address
    - We are going to specify the role with -RoleDefinitionName, it's going to be SQL DB Contributor
    - We have to apply that to a scope. Where do you want to remove that from? Well, that would be -ResourceGroupName of Rg1
    - We are going to go ahead and press Enter to remove the role assignment.
    - We're going to check our work, use the up arrow key to bring up previous commands.
    - Up to where we get back to Get-AzRoleAssignment and when I press Enter, nothing is returned because user J Hill no longer has that role assigned in Rg1.


Azure AD Custom Roles
  - If the built in roles for RBAC in Azure don't meet your needs
    - You can then define your own custom roles in a JSON formatted file which just a text file really.
  - We've got the opening and the closing curly braces
    - We are defining the Name of my custom role to be Custom - Network Resource Reader
    - IsCustom is set to true and we've also got a description here that says, Ability to view network resources
    - Then you have to define what this role's actions are, what can someone do in terms of permissions if they are assigned this role
    - Here for actions, we are specifying Microsoft.Network/*, so all Microsoft Network types of resources in Azure, but the ability to only read them, read
  - There are no definitions for NotActions, only actions that we want to allow
    - For the AssignableScopes here, we've set it at the subscription level with the ID of my Azure subscription
    - Now, how do we take this and create a custom role?, there are a number of ways that that can be done
    - We can do this in PowerShell and that's actually what we are going to do here
    - The next thing we need to do is launch the Cloud Shell so we can get to a place where we can issue PowerShell commands.
  - We are going to go ahead and launch Cloud Shell
    - The first thing to think about is that the file that we just looked at for our custom JSON role definition was on-premises
    - We need to get it up here in the cloud in Cloud Shell
    - We've got this button at the top here in the bar where we can upload and download files
    - We are going to go ahead and click Upload/Download files, and then choose Upload
    - We've specified my file and it looks like the upload has completed
    - The first time you open Cloud Shell, you're asked to set up storage
    - This is one of the reasons so you can have persistent storage of items that you might deal with, in this case, a file we've uploaded
    - If we do dir, we can see indeed, there's the Create_Custom_Role.json file that we were just looking at in WordPad just a few minutes ago.
  - What we want to do then is to make sure that we create a new role from this
    - We are going to do that with the new-azroledefinition PowerShell cmdlet
    - We are going to pass it the -inputfile parameter with the value of, in this case, create
    - We can even use my tab completion to spell out the rest of it since we are in the same subdirectory
    - Let's see what happens, press Enter to create this custom role, and it should be done.
  - We can check this here in the portal, again, it's called Custom - Network Resource Reader
    - Let's say we were going to go to the subscription level and apply that role.
    - We are going to go into our subscription.
    - We know that in the GUI when you want to work with RBAC, you go into Access control (IAM)
    - One of the things that we're going to do here is click +Add, Add role assignment
  - We have a unified drop down list here of both built in and custom roles
    - Remember that our role starts with the word custom
    - You can actually select it from the list, or you can even filter the list if you so choose.
  - If we type in custom, we can see right away, Custom - Network Resource Reader
    - That's the role we just created. And we can see the description here, Ability to view network resources
    - That's what we've just created. Now, you can also remove that from PowerShell
    - Go back here into PowerShell and let's get rid of that.
  - We are going to run get-azroledefinition and specify the name of it
    - Which is going to be Custom - Network Resource Reader, the spaces between those items
    - When we do that, all it does is return that yes, that role is there, that definition exists
    - We are going to bring up that command again with the up arrow key.
  - What we want to do is pipe the result of that to the remove-azroledefinition cmdlet
    - So we're going to retrieve that specific role and pass it through and delete it
    - Are you sure you want to do, or we can actually suppress that message, just Control+C out of there.
  - If I bring back that full command again, I can just add -force, if I could spell that over correctly over here
    - And it will suppress that message so it will remove that role.
    - If we use our up arrow key to go back a little bit, where we were getting that role definition, it no longer exists.


Resource Locking Overview
  - The purpose of Microsoft Azure resource locks is to control when others can modify or delete Azure resources of any type
    - Whether that's intentional or unintentional.
  - So it's a way to basically check out a resource, so to speak
    - While it's checked out, in a manner of speaking, it can't be either modified or it can't be entirely deleted
    - We can set resource locks at the subscription level, similar to how you apply RBAC roles at the subscription level 
    - And it flows down to everything in the subscription, like resource groups and resources, the same thing is true with Azure resource locks
    - If you set a resource lock at the subscription level, it will flow down to resource groups and resources
    - You could, of course, apply an Azure resource lock initially at the resource group level
    - Or you might lock an individual resource such as a storage account, to prevent the modification of its properties
    - Now you can set the Azure resource lock to be read-only.
  - What that means is you are allowing read-only access to the item, so that it can't be reconfigured, so to speak
    - Or you could set it to not allow deletion or to prevent deletion of the resource.
  - So the inheritance, as we've mentioned, starts at the subscription level
    - Then applies to resource groups, and then applies to individual resources
    - If you don't want that, in other words, you don't want the locking applying everywhere
    - Simply specify the lock at the resource group or the individual resource level.
  - You can disable or unlock the subscription, the resource group or the resource, at any point in time
    - Once you've deemed it appropriate to allow modifications or the potential for deletion
    - Bear in mind that modification and deletion of an Azure resource is only possible anyways if somebody has the appropriate permissions to do so
    - Which is usually granted through RBAC roles.


