                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 23


Azure AD Role PowerShell Assignment (Cont)
  - The first thing we are going to do is create a new role assignment
    - To do that, we are going to use the New-AzRoleAssignment PowerShell cmdlet
    - We are going to use the -SignInName parameter and assign this to an Azure AD user jhill@quick24x7test.onmicrosoft.com
    - I could also apply this to a service principle in Azure AD or a group, in this case, it's an individual Azure AD user
    - We have to specify the RoleDefinitionName, so specify that parameter
    - In this example, it's going to be the SQL DB Contributor
    - As we know when we work with RBAC, we have to determine the scope where the assignee can exercise those privileges
    - In this case -ResourceGroupName, Rg1, we could specify a subscription or an individual resource
    - Here we want it done at the resource group level then go ahead and press Enter.
  - Now we can verify this using PowerShell cmdlets., we are just going to clear the screen
    - Then what we're going to do, is we're going to retrieve role assignments for Rg1 for that user.
    - To do that, we are going to use Get-AzRoleAssignment -ResourceGroupName is Rg1, that's where we just assigned it
    - -SignInName is going to be our user J Hill, press Enter and see what it returns
  - We're seeing that user Jen Hill has been assigned the SQL DB Contributor role
    - Of course we asked for this at the Rg1 resource group level so she has those permissions for SQL database deployments within the Rg1 resource group
    - Now naturally, we need to know how to be able to remove role assignments using PowerShell.
  - We know how to add them and check them, what about removing them? 
    - We do that with the Remove-AzRoleAssignment PowerShell cmdlet
    - You might expect, in this case, we're going to use -SignInName and specify our Azure AD user sign in name, the email address
    - We are going to specify the role with -RoleDefinitionName, it's going to be SQL DB Contributor
    - We have to apply that to a scope. Where do you want to remove that from? Well, that would be -ResourceGroupName of Rg1
    - We are going to go ahead and press Enter to remove the role assignment.
    - We're going to check our work, use the up arrow key to bring up previous commands.
    - Up to where we get back to Get-AzRoleAssignment and when I press Enter, nothing is returned because user J Hill no longer has that role assigned in Rg1.


Azure AD Custom Roles
  - If the built in roles for RBAC in Azure don't meet your needs
    - You can then define your own custom roles in a JSON formatted file which just a text file really.
  - We've got the opening and the closing curly braces
    - We are defining the Name of my custom role to be Custom - Network Resource Reader
    - IsCustom is set to true and we've also got a description here that says, Ability to view network resources
    - Then you have to define what this role's actions are, what can someone do in terms of permissions if they are assigned this role
    - Here for actions, we are specifying Microsoft.Network/*, so all Microsoft Network types of resources in Azure, but the ability to only read them, read
  - There are no definitions for NotActions, only actions that we want to allow
    - For the AssignableScopes here, we've set it at the subscription level with the ID of my Azure subscription
    - Now, how do we take this and create a custom role?, there are a number of ways that that can be done
    - We can do this in PowerShell and that's actually what we are going to do here
    - The next thing we need to do is launch the Cloud Shell so we can get to a place where we can issue PowerShell commands.
  - We are going to go ahead and launch Cloud Shell. Now, the first thing I have to think about is that the file that we just looked at for our custom JSON role definition was on-premises. I need to get it up here in the cloud in Cloud Shell. So I've got this button at the top here in the bar where I can upload and download files. I'm going to go ahead and click Upload/Download files, and then I'll choose Upload. So I've specified my file and it looks like the upload has completed. So the first time you open Cloud Shell, you're asked to set up storage. And this is one of the reasons so you can have persistent storage of items that you might deal with, in this case, a file I've uploaded. If I do dir, I can see indeed, there's the Create_Custom_Role.json file that we were just looking at in WordPad just a few minutes ago.
So what I want to do then is I want to make sure I create a new role from this. So I'm going to do that with the new-azroledefinition PowerShell cmdlet. I'm going to pass it the -inputfile parameter with the value of, in this case, create. And I can even use my tab completion to spell out the rest of it since I'm in the same subdirectory. Let's see what happens. I'm going to go ahead and press Enter to create this custom role, and it should be done.
Now, we can check this here in the portal. So again, it's called Custom - Network Resource Reader. So let's say we were going to go to the subscription level and apply that role.
So I'm going to go into my subscription.
We know that in the GUI when you want to work with RBAC, you go into Access control (IAM). So I'm going to do that.
And one of the things that we're going to do here is click +Add, Add role assignment.
And, we have a unified drop down list here of both built in and custom roles. Now remember, our role starts with the word custom. And you can actually select it from the list, or you can even filter the list if you so choose.
So if I type in custom, we can see right away, Custom - Network Resource Reader. That's the role we just created. And we can see the description here, Ability to view network resources. That's what we've just created. Now, you can also remove that from PowerShell. So let me just go back here into PowerShell.
Let's get rid of that.
  - We are going to run get-azroledefinition and specify the name of it
    - Which is going to be Custom - Network Resource Reader, the spaces between those items
    - When we do that, all it does is return that yes, that role is there, that definition exists
    - We are going to bring up that command again with the up arrow key.
  - What we want to do is pipe the result of that to the remove-azroledefinition cmdlet
    - So we're going to retrieve that specific role and pass it through and delete it
    - Are you sure you want to do, or we can actually suppress that message, just Control+C out of there.
  - If I bring back that full command again, I can just add -force, if I could spell that over correctly over here
    - And it will suppress that message so it will remove that role.
    - If we use our up arrow key to go back a little bit, where we were getting that role definition, it no longer exists.


Resource Locking Overview
  - The purpose of Microsoft Azure resource locks is to control when others can modify or delete Azure resources of any type
    - Whether that's intentional or unintentional.
  - So it's a way to basically check out a resource, so to speak
    - While it's checked out, in a manner of speaking, it can't be either modified or it can't be entirely deleted
    - We can set resource locks at the subscription level, similar to how you apply RBAC roles at the subscription level 
    - And it flows down to everything in the subscription, like resource groups and resources, the same thing is true with Azure resource locks
    - If you set a resource lock at the subscription level, it will flow down to resource groups and resources
    - You could, of course, apply an Azure resource lock initially at the resource group level
    - Or you might lock an individual resource such as a storage account, to prevent the modification of its properties
    - Now you can set the Azure resource lock to be read-only.
  - What that means is you are allowing read-only access to the item, so that it can't be reconfigured, so to speak
    - Or you could set it to not allow deletion or to prevent deletion of the resource.
  - So the inheritance, as we've mentioned, starts at the subscription level
    - Then applies to resource groups, and then applies to individual resources
    - If you don't want that, in other words, you don't want the locking applying everywhere
    - Simply specify the lock at the resource group or the individual resource level.
  - You can disable or unlock the subscription, the resource group or the resource, at any point in time
    - Once you've deemed it appropriate to allow modifications or the potential for deletion
    - Bear in mind that modification and deletion of an Azure resource is only possible anyways if somebody has the appropriate permissions to do so
    - Which is usually granted through RBAC roles.


Resource Locking and the Portal
  - In Microsoft Azure, a resource is an object that you define in the cloud, such as a virtual machine 
    - Or a disk that you would attach to a virtual machine or a storage account or a SQL server
    - Any of those things are resources, we have the ability to use the portal to lock resources
    - Why would you do that? You would do it because you want to prevent either a modification of a resource
    - You want it to be read-only, or you want to prevent the deletion of it.
    - We can set locking at various levels in the Azure hierarchy, such as at the subscription level. Now, that's what we are going to do.
For example, here if I go into the subscription, I'll be able to open it up, to reveal its properties, and I am interested primarily in resource locking.
So I'm going to scroll all the way down under Settings where I see Resource locks.
Any existing resource locks at this level will be shown. It says This resource has no locks. Okay, well, I could click +Add, and I could add a lock at this level.
And when I do that, I specify a name and I can determine if it should be a Read-only lock, so to prevent modifications, or if I want to prevent deletions.
 I'm not going to do that though I could, but I'm not going to. Instead, I'm going to navigate to Resource groups.
So what I want to do then is take a look at the resource locking options at the Resource group level, which would be inherited by the resources in the Resource group. I'm going to click on my resource group Rg1.
And in the Overview blade, one of the things you'll see over on the bottom right are the resources in that resource group. So let's scroll down in the navigation bar and let's take a look at resource locks. So it's listed a little bit differently here. Under Settings, it just says Locks.
If we take a look, we'll see if there are any locks that have been made here. Now, we've got the Subscription icon where we could take a look at subscription level locks.
We were just there a few moments ago.
It's just a shortcut to get there. However, we can also add locks at this specific level for this particular Resource group.
So that's what I'm going to do. I'm going to click Add. And I'm going to call this, let's say Lock1. And I'm going to set it as a Read-only lock here.
I could add Notes if I so chose, I don't choose to so I'm just going to click OK. And after a moment, we can see that Lock1 shows up here as Read-only for resource group 1. If I click Subscription once again, then we can see that it shows up at the subscription level and we can see the Scope that it's applied to is only rg1.
Notice, you can Edit it to change any settings related to that or Delete that lock.
 If I go back to the Resource group, you can see the lock here.
And if you click on it, it'll pull up the items where you can modify its settings. But you can't delete it from here, you'd have to go to the subscription level and that's to be expected. Now, let's take a look at some of the resources within Rg1.
We can do that by just scrolling up, clicking Overview. We'll see any resources deployed into this resource group, as we mentioned previously, listed in the bottom right.
For example, here's a resource group called, or pardon me, here's a network security group NSG called NSG-Windows.
If I click to open it up, we'll be able to look at the Locks for that particular individual resource.
When I click Locks here, notice we can see Lock1 is applied Read-only. And it says Parent resource locks, can't edit them here. Click on the locks scope to go to that scope. Okay, so we'd have to go up to in this case rg1 to take a look at it. But interestingly, if we try to delete this resource, so let's say go back to Overview and normally we'll just go to Delete here.
And normally, if you have the role permissions to do this it would succeed. Let's go ahead and say, Yes get rid of it.
It says, I can't do it, cannot do it because there is a lock.
And it's at the Rg1 level. So therefore, that's not going to happen. It's read-only, which will also prevent modifications here to this particular object.
So for example, if I go to Inbound security rules, let's say I go to +Add a new rule, we'll just fill in a couple of blanks here really quickly.
So I'm just going to accept all of the defaults and I'm going to click Add.
Well, it didn't even like that. So I can't even modify it, let alone delete it. Bear in mind, we set a read-only type of lock at the resource group level and it's flowing down at the resource level. So to get rid of all of this, what I could do is go up to the subscription level, as we saw because that's where it allows us to actually delete locks.
So I'm going to do that, I'm going to go back into my Pay-As-You-Go subscription. And I'm going to scroll down and look at Resource locks.
And we'll see the resource lock applied at the resource group level.
So I'm just going to take a look at that.
Now of course, we can only edit what's there, but if we scroll to the right to see what's over on the far end, there's the Delete option.
So I'm going to press Delete, and now it's gone.


Resource Locking and the CLI
Resource locking can be managed using CLI commands just as well as it can be done using the portal.
So I'm going go into the Azure CLI and I'm going to start by using the az -h command because I don't know what the syntax is. So there's a lot of stuff here, the next level commands after az.
I'm going to guess it might be in the Rs for resource lock, but I don't see anything like that. Okay, not that. I'm going to next guess that it's somewhere in the Ls. Here it is, lock, Manage Azure locks.
So therefore, I can do az lock -h to try to figure out how to proceed from here.
So, to Create a lock, Delete a lock, list locks, and so on. Got it. So, I'm going to run az lock create, and I'm going to create a lock here called Lock2.
And I'm going to set it at the resource group level. I don't have to, I could set it at the subscription level. I could even set it at an individual resource level. But commonly, you would find it would be done at the resource group level, in this case, Rg1. I'm going to specify --lock-type and I'm going to set it to readonly. So I want to prevent modification, which also includes preventing deletion. So it's called Lock2, this looks good.
Let's check it out in the portal to see what it looks like in Rg1. So let's see.
I'm going to go to my navigator up here on the left and go to the Resource groups view, where we are going to see Rg1.
I'm just going to go ahead and click to open that up.
Let's go down and check the locks for it shall we. So scroll down and we're going to take a look at the locks, there it is, Locks. And we can see that Lock2 Read-only has been set here.
And again, it's been set at this level rg1. Now of course, if we scroll over to the far right, we can choose to Edit or Delete it. We could also go up to the Subscription level, where we'll see all the locks in the subscription, even if they weren't tied to the subscription levels.
There it is. And from here, we can also Edit and Delete it at that level. But of course, we can also do that in the CLI.
Back here in the CLI, for example, we might run az lock list.
And here, we'll see that we do have a lock that's applied it's called Lock2, it's been applied to Rg1, and the locking level has been set to ReadOnly.


Resource Locking and PowerShell
You can use PowerShell cmdlets to manage resource locking in Azure.
To get started here in PowerShell, I'm going to run get command and I'm going to search for any cmdlets that have resourcelock in their name. So I'm going to pad the string resource lock with an asterisk on either end. So as long as it's got resource lock in the name, I want to see the cmdlet.
And right away we can see for instance, New-AZResourceLock to create a new lock, or Get-AZResourceLock to retrieve a list of locks through Azure. We even have the option to remove or set a lock.
And if I wanted more details on any one of these, I could run get-help, let's say a new-azresourcelock. I could ask for detail, and maybe pipe it to more to stop after the first screen full of output.
Here I can see the syntax for this cmdlet, including the parameters, such as -LockId, -LockLevel and so on, even to the point where I'll see an example of how I can actually create a resource lock.
Let's get started by retrieving resource locks with get-azresourcelock. I'm going to press Enter.
So it looks like we already have a lock called Lock2 that has been applied to a resource group called Rg1. And the level we can see here has been set as ReadOnly. So what I want to do is remove that lock. In order to do that, I need to get this LockId.
So in order to do that through variables, I'm going to create a variable called $lock.
So the variable's $lock and it's going to equal the return value of running get-azresourcelock. I'll specify a lock name of lock2 and we know that that applies to a resource group called rg1. But I need the lockid property. Notice I've enclosed that expression within opening and closing parentheses. That's because .lockid will be a property of us retrieving that lock with that statement. Otherwise it'll think we're looking at lockid as being a property of rg1.
Actually, let's see what that would look like in terms of an error if we didn't have those parenthesis there, what would it look like? Okay, well, we're getting some kind of a message about lock2 could not be found. So it's having a problem finding all of this. However, if I bring up the previous command where we did have our open and close parentheses, it didn't give us any complaints.
And so if we just run $lock to see what's in the variable, looks like it's got the lockid because that's what we asked for, that's the property that's stored in the variable.
Then given that we have that it's at this point that we are able to remove that resource locks. We have a lockid. We can do that with remove-azresourcelock -lockid, and we'll just pass it my variable now $lock. And actually if I don't tell them anything, it asks me for confirmation which I'll Ctrl C to that and then I'll clear the screen and bring up that command again, I'm just going to add -force to suppress it asking me and after a moment looks like it's done.
We can verify this with get -azresourcelock.
Previously it showed us lock2 for rg1, the resource group but now it shows nothing because it's been successfully removed.


Resource Locking and Templates
Not only can you use the CLI PowerShell and the portal to manage resource tags in Azure, but you can also apply tagging from an ARM template. ARM standing for Azure Resource Manager. I've got an example here in WordPad, where essentially what we're looking at here is the type.
This is Microsoft.Authorization/locks. I've got a name here. So I'm going to create a resource lock here, and I'm going to name it Rg3Lock. The level will be ReadOnly, and we can specify any additional notes.
What we don't see in here is the scope to which the resource lock will be applied. That happens at deployment time when the template is deployed.
So let's go ahead and see that. Here in the portal, I'm going to click Create a resource because I want to create a template deployment from my template.
So I'm going to search for template, I'll choose Template deployment.
I'll choose Create, there are a bunch of ways that this could be done, I could have created this template deployment from the CLI or PowerShell.
I've decided I want to do it this way. So I can choose for example, Build your own template in the editor, now we already have it so I can just click Load file.
So I've specified the template file that we looked at a moment ago in WordPad.
So it's going to create a lock called Rg3Lock. It's going to be ReadOnly. So I'm going to go ahead and Save that.
And it automatically pops up into the Custom deployment for that template where we can choose the Resource group where you want that applied.
Let's say Rg3, and I'm going to have to go down and agree to the terms and conditions and I can click Purchase. So now the template deployment has begun. In other words, the lock to resource group Rg3 is in the midst of being applied. Now once it says it's done, which it just did, we're going to go to the resource group and take a look at the locks. So in the Resource group navigation bar, I'm going to click down on Locks and lo and behold there's our lock Rg3 and it's set as Read-only.


Resource Tagging Overview
In Azure, we know that a resource is something that can be deployed in the cloud, whether it's a SQL database or whether it's a virtual machine, a storage account, a network interface, and so on.
Well, we can tag resources and what that really means we're doing is we're adding metadata to them. Now why would you want to do that? You want to add tagging to resources because it allows you to add meaningful additional information to them. Such as related to a department, that that resource might have been deployed by, or a client, that resource should be billed to, or a project it should be billed to, or a cost center.
You can also use policies in Azure to enforce tagging. For example, you could set a policy so that any new resources deployed let's say in a particular resource group will automatically have a cost center tag applied with a specific value. That can be automated. Each resource can have up to a maximum of 50 tags. Now not every single type of Azure resource will support tags, but the vast majority of what you're going to want to do it to, they will support it. The other thing about this is that resource group tags are not inherited. So if you add a tag to a resource group, that does not mean it will automatically flow down and set that tag for all of the resources in the resource group. If you want to do that, look at working with Azure policies that have a modify effect for tagging purposes. You can use the CLI to work with resource tagging.
In our first example, we've got az tag list that's being piped to the line filtering grep tool in UNIX and Linux. And we're asking to display the tagName property.
What that will do is give you a list of all of the tags in the entire Azure subscription. You can create a tag with az tag create, here we're naming it DeptID.
We can also add tag values with az tag add-value.
So here we're adding it to DeptID, the value is 1234. You can even apply to a specific resource such as az network vnet update.
So we're applying a tag to a specific VNet in a resource group called rg1. And the name of that is vnet1. And we're using --set tags. and then Dept ID equals in this case the values of 4555. Resource tagging is also possible using PowerShell.
In our first example, we're creating a variable called $storaccount. And it's essentially going to point to a storage account. Now we get that by running get-azresource.
We specify the name of the resource, in this case, the storage account name and the resource group it's deployed into. So then our variable can be used to refer to that storage account. And in our second example, that's exactly what's being done. We're calling upon our variable. Then we're calling upon .tags and .add, because we want to add the CostCenter tag with the value of YHZ to the storage account.
Then to commit that to the resource to the storage account, we run set-azresource. We use the -tag parameter.
And in this case, we refer to the $storacct variable .tags property. And we use the -resourceid parameter and give the ID, the resource ID of our storage account variable to write to. And I'm using -force here just to suppress any messages that might pop-up asking you for sure here in PowerShell. The next thing I can do is retrieve resources.
Here, I'm using Get-AzResource with the -Tag parameter. And I refer to the tag within curly braces after the @ symbol. So in quotes, I've got CostCenter, it's the name of the tag, equals and then in quotes, I've got the value I'm looking for, YHZ. Now all of that is enclosed within open and close parentheses because if I don't do that, it's going to try to use .Name as a property of YHZ. That's not quite it. We need .Name to be a property of the return result of what executes first within the parentheses, in other words, retrieving the tags. We want to make sure we get the name of the resource. So what that command will really do is it's going to show us the names of all Azure resources in the subscription that have "CostCenter" = "YHZ". So it could potentially be a pretty long listing. In our last example, we can also remove tags.
So in this case, we've already got our storage account pointing to in this case to storage account. Doesn't have to be a storage account, could be pretty much any type of resource that supports tagging. But we're calling upon the variable .tags.remove. And in parentheses and double quotes, I'm just giving it the name of the tag I want to remove, in this case CostCenter.


Resource Tagging and the Portal
Tagging resources in Azure is useful because tags are metadata. It's key and value pairs up to 50 that you could add for each individual Azure resource. You might want to tie a resource to a cost center, or a department, or a project, or something like that. Which facilitates searching, grouping, and even looking at things on a per billing basis for specific tags.
So I'm going to go ahead here and get started in Azure by going to the All resources view where I'm going to open up an existing resource.
It doesn't matter which one it is, let's say I scroll down and open up a virtual machine.
When you click on an Azure resource, in the navigation panel, you'll see Tags. And when you click Tags, you'll see any existing tags or key and value pairs that have been assigned to that resource. And you can make changes to them up to having 50 key and value pairs.
Currently this virtual machine has two. Project : ABC is the first tag and CostCenter with the value of YHZ is the second one. And I can even add a third one here. So for example, I might tie it to a department. So I'm going to put it Department. Now if I've already created that, as I start typing it'll show up.
However, nothing's popping up so this is a brand new tag I'm creating. And I'm going to set the Value to IT.
So we've now got a third tag that we are adding here to this particular resource. Now we can go back and remove any one of these at any point in time. However, I'm going to click Save. So now that we've got those listed, we see the third one has been added at the bottom. If I were to go to another resource, let's close out of this virtual machine. Let's just pick a storage account and let's look at the tags for it.
And when I click on Tags, I'll see whatever it's been tagged with already.
And bear in mind, Azure administrators can apply policies that can add default tags. So there might be times when you're creating a resource and you don't add tags. And after you check it, after it's been created, there are tags. That's because of a policy. Anyway, here we can see this storage account has CostCenter : YHZ. If I were to type department, we'll notice it already knows it exists. And in the same way, it knows it's already got a value that's been typed in for another resource. And that's fine, we can go ahead and work with that.
When I click that, it's kind of like a little filter, Now, notice that we've also got a little square icon also over here, and it allows me to show resources with this tag. So let's do it for the first one here, CostCenter : YHZ.
it'll show me resources that have been tagged with that item. So specifically, we can see that all of these items are listed here. And let's just kind of move over a little bit so we can see them all. So they're all listed here as being items that are tagged with that same value. So we can see at the top here, Resources with tag CostCenter : YHZ. Now when you're creating a new resource, for example, let's just get out of here, we're not going to save that. I'm going to click Create a resource.
Let's say we were going to create a brand new storage account. It could be anything but let's say that's what it was.
Now when you're in the midst of creating a new resource in Azure, during the creation, whether in the GUI or at the command line, you can specify tags.
We can see the Tags part of the wizard right here.
And when you go there, it's going to look familiar, you can put in the name and value, up to 50 of them. Okay, so we can do that as well. Let's go back to our All resources view.
Because another aspect of working with tags in the GUI here in the portal, is that you can modify a selection of objects in terms of tagging. What that means is if I were to, let's say, put check marks by a couple of these resources, I can then click the Assign tags button up at the top of the view.
Now within here, I'll see each of the selected items listed and I can delete tags and make changes. But I can also add one up here. So for example, if I wanted to, I could put in a tag, let's call it Stage. And for Value I'm going to put in Testing.
So it's the testing stage that I'm applying to this and I'm going to go ahead and click Save.
So if I look at any one of these items, let's say this storage account, this second one here that was part of our initial selection.
We can also see it says it assigned it to three resources. But let's just check this one anyway. If I go to Tags, I'll see whatever was already applied previous to my last action.
But I will also see that Stage was added with the value of Testing.


Resource Tagging and the CLI
The CLI can prove very handy when it comes to manipulating tags in an Azure environment. 
To get started here, I'm going to type in az tag list. Now when I do that, it should show me details about all of the tags in this entire subscription, but there's too much metadata here.
All I really want to see are the names of tags. So I'm going to clear the screen, I'm going to use the up arrow key to bring up that previous command.
And I'm going to use --query [ ] because it's an array or list of items. And for each of them, we want to see tagName, where Name has a capital N.
That's better. So now I can see the names of tags, not the values that have been applied in my entire subscription. I want to add a new one. So I'm going to run az tag create. And I want to create one, --name, called ClientID. We might want to do this if we want to track resources based on clients, for doing projects for clients, for billing purposes, for chargeback to clients.
So what I've done is created the tag called ClientID.
And we can verify this, of course, if we bring up, using the up arrow key, our az tag list command where we're querying for tagName.
There's ClientID shown at the bottom of the list, perfect. Now I want to add a value for the ClientID tag and then we can apply it to a resource. So to add a value, I'm going to run az tag add-value --name, well, the name of the tag is ClientID and --value. I'm going to set it to a value of 1234.
Now I want to apply that to a resource. So to do that, I'm going to use, let's say, az network vnet update. I'm going to apply this to a VNet, a virtual network, that's deployed in a group, -g, called rg1, resource group 1. -n for the name of the VNet, is Vnet1, and --set tags. in this case ClientID. And of course, I could also specify the value here, 1234, that I want to add to that VNet.
So by adding the value up above, what we're really simply doing is making it available to be assigned to individual resources.
And if we flip over here into the portal where I've pulled up the tags for Vnet1, we indeed will see that ClientID with a value of 1234 has been successfully added.


Resource Tagging and PowerShell
You can use PowerShell cmdlets to manage tags in an Azure environment.
So to get started, I want to make sure I get a handle on a specific storage account that I've already created. And I want to store that in a variable that I'm going to call storacct. So we can see here $storacct. And I'm going to tell it I want to run get-azresource-resourcename. Here's the name of the storage account I have. And it's in a resource group called rg1. Now I want to do this because I want to apply tags to that storage account.
So now let's just run $storacct to make sure we have a handle on that storage account. Looks good and currently we can see the tags for it CostCenter YHZ.
Now what I want to do is add something new. So I'm going to go ahead in terms tags and run $storacct. We have that variable the points to the $storacct.tags.add. And in parenthesis and I will start double quotes. I want to set the Stage key with the value of Development and I'm going to go ahead and press Enter.
Now let's just clear the screen with cls and use the up arrow key to bring up our $storacct variable. Notice that Stage and Development the key and value pair have been added as a tag for that storage account. I can also do other stuff like this.
So in parenthesis get-azresource -tag. And I'm going to specify here an @ symbol with an open curly brace, and in quotes I'm going to say Stage and = Development put all of the each of these items in quotes. And the next thing I'm going to do is close off my curly bracket and my parentheses and .Name. What does this mean? Well, it means that what I want to do is I want to show the names of any Azure resources that have that listed tag name and value. So "Stage"="Development". When I press enter, we still don't see anything here.
Well, that's strange because when we looked at our variable, it returned Stage Development. Well, that's the variable. It's not been committed to Azure yet. So what we need to do is run set-azresource to apply the change -tag, and then $storeacct.tags the tags property. Because we know that the tags property here contains what we just modified plus what was already there to begin with. So, $storeacct.tags -resourceid give it the resource ID that's going to be $storeacct.resourceid. Great working with variables isn't it makes things much easier. I'll just use -force to suppress any questions. And after that's done, it will have committed that change to that resource.
So I'm going to clear the screen we're going to use the up arrow key to get-azresource once again. And now we can see our storage account storacct333325.
Indeed is tagged with "Stage"="Development".                    


Azure Monitoring Overview
In order to keep your Azure environment secure and running optimally, you should perform monitoring.
Now in order to monitor something to determine if something is abnormal, you need to know what is normal. And that's where monitoring baselines kick in. Whether it's for determining what normal activity looks like at the network level, for the amount of network transmissions, for example. What is normal when it comes to activity on a host. Such as how much memory is usually used within normal workload conditions, or how busy the CPU is. And that also goes for an application, which could be spread out across multiple virtual machine hosts. Monitoring baselines will vary from one company to another, even from one department within an organization to another. Depending on how technology is being used. So an anomaly from the normal usage could indicate a security incident. It could just be a normal spike in activity. But if we gather enough activity over time, we'll know that that occurs.
So a security baseline then can be used to detect anomalies. And performance baselines can also be used simply to detect that things are busy or that they have slowed down. And in response we might resize virtual machine instances. Or configure autoscaling accordingly to accommodate the increase or decrease in those workloads. So baseline anomalies could show up as busy CPU utilization. Which could be indicative beyond of just a busy workload of cryptocurrency mining, if the machine has been infected, or ransomware. If we have excessive network traffic way beyond normal that could be indicative of a distributed denial of service or a DDoS network attack. Or we might have device operating system changes while the hardware is the same. Now that would mean that we might have a Windows host that is all of a sudden a Linux host, but everything else about it looks the same. So that could be indicative of someone having infected the machine or maybe booted it from a USB drive into a different OS, and so on. The other thing to think about is system and data access outside of regular work hours at irregular times. So there are a lot of different aspects of Azure resources that we might monitor to determine if there's an anomaly of some kind.
Now Azure monitoring gives us a number of options to track this stuff, including centrally. So we can monitor Azure resource activity logs. Now these activity logs are essentially audit logs of management tasks applied to Azure resources. Such as starting and stopping a VM or reconfiguring a VM or a web app. We can also look at the Azure Performance Diagnostics Windows VM extension. If you enable performance diagnostics, then you're getting more details on metrics like CPU utilization and traffic in and out, and disk I/O activity, for monitoring purposes. You can also pin a lot of these items to custom dashboards. So that you can pull up a dashboard and see what's of relevance for you when it comes to monitoring your Azure environment. You can also work with Azure Application Insights if you want to track activity and performance metrics for a specific web app. So that's really what that one is about.
Here on the screen we have a screenshot of monitoring some performance metrics for an individual VM or virtual machine. So we can see the CPU average utilization, the network traffic total, the disk bytes total, the disk operations per second on average. These are important metrics to monitor. However, we can also monitor things centrally instead of doing this and going to an individual Azure resource, in this case a VM.
And that's where Log Analytics workspaces kick in. This is centralized monitoring of Azure log data and also performance metric data. So configuration and log data feeds into Azure Monitor from the Log Analytics workspace. You can also run log queries in the Log Analytics workspace. Or from Azure Monitor, again, because Azure Monitor gets a lot of its data from Log Analytics workspaces. Your alert notifications can be configured in the Log Analytics workspace.
Now, there are a number of data sources that Log Analytics workspaces draw upon. Including storage account logs, Azure activity logs, physical and virtual servers. And you can even link it to your existing System Center Operations Manager or SCOM environment, if you have one. Now by adding servers to the Log Analytics workspace. It means that their performance metrics and log data can be collected centrally in the Log Analytics workspace.


Individual Resource Monitoring
There's a wealth of information available for each and every Azure resource whether you're interested in monitoring the performance of an item or auditing who did what to it from a management perspective or viewing things like operating system log details for VMs. 
All of this is available here in the portal. So I'm going to start in the portal by clicking to open up an existing virtual machine.

[Video description begins] He clicks a virtual machine called "WinSrv2019-1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And the first thing we're going to do is click on the Activity log on the left.

[Video description begins] He clicks an option called "Activity log" in the navigation pane and the corresponding page opens in the content pane. It includes a table with six columns and three rows. The column headers are Operation name, Status, Time, Time Stamp, Subscription, and Event initiated by. [Video description ends]

This is a log that really only relates to the management of this resource in Azure. And so on the right the default Timespan is the Last 6 hours. Let's get more stuff shown here by changing that, let's say, to the Last month and I'll click Apply.

[Video description begins] He clicks a drop-down list box called "Timespan" and selects an option called "Last month". He clicks a button called "Apply". [Video description ends]

Now we'll see that there are quite a few other operations related to the management of this VM. When we filter in that way we can see the name of the operation, whether it succeeded or not, the date and time stamp, the subscription it applies to and the user that initiated it. We can also further filter this. So for example, for Event severity, let's say the only thing I'm really interested in are Critical and Error messages, I'm not interested in seeing Warning or Informational.

[Video description begins] He clicks a drop-down list box called "Event severity". [Video description ends]

So I can unselect those or deselect them and now I've got a really small filtered list. And I can click on any one of these specific activity log entries to get more detail.

[Video description begins] He clicks an Operation name called "VirtualMachines" and the corresponding blade opens. [Video description ends]

Now, we also have other options for monitoring here.

[Video description begins] He closes the blade. [Video description ends]

I'm going to scroll way down in the navigation bar down to the Monitoring section where I'm going to click on Metrics. This is more related to the performance in this case of the VM.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

So we can select a metric from the drop-down list. For example, I'll just go down in this list and choose Percentage CPU.

[Video description begins] He clicks a drop-down list box called "Metric" and selects an option called "Percentage CPU". [Video description ends]

Now the Percentage CPU item is added here and we can see its value. We can see it's been plotted against the timeline on the bottom, and the percentage going across the top, from the bottom to the top.

[Video description begins] He points to a graph. [Video description ends]

We can also add metrics, you have more than one thing shown at the same time.

[Video description begins] He clicks a button called "Add metric". The options called "Scope", "Metric Namespace", "Metric", and "Aggregation" are displayed. [Video description ends]

So I'm going to go ahead and maybe and add Disk Read Bytes/second. And when you do that it will be plotted.

[Video description begins] He clicks a drop-down list box called "Metric" and selects an option called "Data Disk Read Bytes/Sec (Deprecated)". [Video description ends]

You'll see it might have a value. So we can see the values are being plotted but notice in the legend it's a different color. So this could be very important as well.

[Video description begins] He points to the graph. [Video description ends]

So we can monitor these metrics to track how this is doing. So performing well, do we maybe need to resize the VM, maybe scale it up so it can handle the workload better? That type of thing. We can also go to Logs over on the left.

[Video description begins] He clicks an option called “Logs” and its corresponding page opens in the content pane. [Video description ends]

Now it's not enabled by default, so I'm going to go ahead and click the Enable button. Now when you do that, you're going to have to select the subscription and a Log Analytics workspace that you want this associated with. So I'm okay with the default selection for the Log Analytics workspace. So I'm going to go ahead and click Enable.

[Video description begins] He clicks a button called "Enable" and a message box called "Submiting deployment" is displayed. [Video description ends]

Once that's enabled and you're still in the Logs blade, over on the right you'll see that things have changed.

[Video description begins] A tab called "New Query 1" is displayed. It is divided into two parts: navigation pane and content pane. [Video description ends]

You've got a query builder tab at the top here, it's called New Query 1. So this is a log query and down the left, you have a bunch of table names that you can select from.

[Video description begins] He points to the navigation pane. [Video description ends]

 Now if you expand any of these table names, what you will be exposing are the fields or columns within those tables.

[Video description begins] He expands a table name called "SecurityEvent". [Video description ends]

And you can see the data type is string or whatever it happens to be depending on the nature of what you're looking at. You can actually start selecting items.

[Video description begins] He expands a table name called "AzureActivity". [Video description ends]

So for example, if I double-click on one of these items, such as a column, I could see it puts it in here over on the right.

[Video description begins] He double-clicks a column name called "ActivityStatus (string)". The ActivityStatus column name is displayed in a text box called "Type your query here or click one of the example queries to start" in the content pane. A section called "Get started with sample queries" is also displayed in the content pane. It includes tabs called "History", "Performance and availability", and "3 more". [Video description ends]

But of course you can also select from some example query. So if I go to Performance and availability, I could start scrolling down and saying maybe I want to view Virtual Machine available memory and I could run that.

[Video description begins] He clicks a button called "Run" in a section called "Virtual Machine available memory". A code snippet is displayed. [Video description ends]

It puts in the query statement here, where for example, the name of the table which is case sensitive is Perf. And then I'm piping that to where and I'm asking for TimeGenerated over an hour ago and so on and you can run the query by clicking Run. If there are no results, then you're going to get a message that says there are no results. Otherwise, you'll see some of the details. So this is one thing that we can do here, work with log queries within an individual resource. Let's go up to Diagnostic settings here for this Windows virtual machine.

[Video description begins] He clicks an option called “Diagnostic settings” and its corresponding page opens in the content pane. [Video description ends]

So I've got a storage account selected here for storage.

[Video description begins] He points to a storage account called "storacct333325" in a drop-down list box called "Diagnostics storage account". [Video description ends]

And I'm going to choose Enable guest-level monitoring.

[Video description begins] He clicks a button called "Enable guest-level monitoring". The corresponding page opens in the content pane. It includes tabs called "Overview", "Performance counters", "Logs", "Crash dumps", "Sinks", and "Agent". [Video description ends]

The next thing I can do is determine under Overview, for example, which performance counters I'm interested in gathering. There are some default selections.

[Video description begins] He clicks a link called "Configure performance counters" and the Performance counters tab opens. He points to a table with two columns and six rows. The column headers are Performance counter and Sample rate (seconds). [Video description ends]

I can go to Logs and determine which operating system logs I'm interested in and some details.

[Video description begins] He clicks the Logs tab. [Video description ends]

So for example, I'm interested in the Application log with Critical, Error, Warning types of events, severities. And I could do the same type of thing for the Security and System logs. And I can even ask for additional items like IIS web server logs if there is one available there.
And I can save all of these settings.
So when you enable the diagnostic settings, you're really saying I want to start to get more details of the inner workings of the workloads running in those, well, in this case in this VM.


Log Analytics Workspaces
In Azure, a Log Analytics workspace is a resource that you can create and configure in the Azure environment.
To get started here in the portal, I'm going to look at my All resources view. And I'm going to filter it for objects that are Log Analytics workspaces because I already have some here.
So I'm going to filter for Log Analytics workspaces, click outside of it. Here I can see I've got a couple of them. Now why would you have more than one Log Analytics workspace? Here I've got some for different regions or locations, Canada Central I see under the Location heading and East US.
Well that's one reason, you might want to have your centralized logging through the Log Analytics workspace per region. But you could have multiple Log Analytic workspaces within the same region. Maybe because you have different monitoring requirements for different resources within the same region. So to get started to add a new Log Analytics workspace, I'm going to click the Add button.
And I'm going to search up log analytic, and there it is.
Now I'm going to select Log Analytics and choose Create.
First thing I have to do is create a name for it or specify a name. So I'm going to call it LogAnalytics-2.
I'm going to deploy this into an existing resource group.
Now, up above, it's kind of outlined my name in red, in a red outline, because that name is taken. And so I'm going to put in some characters to make that a unique name and I'll kind of click outside of it. And now the name is unique.
So make sure you adhere to your naming standards within your organization when you change some of these names. I'm going to specify the location where I want this specific Log Analytics workspace. So I'm going to choose Canada Central.
I'm going leave it with my Pay-as-you-go subscription for the pricing tier and I'm going to choose OK.
And now back here in the All resources view, I can see my newly created Log Analytics workspace.
So I'm going to go ahead and click on it to open it up. Because one of the first things that you really should contend with is which data sources are connected. To your newly created Log Analytics workspace.
Because remember, this serves as a centralized performance metric and log data feed. Where's that coming from? Well, we can scroll down and go under Workspace Data Sources. Here we can click Virtual machines and we're going to see all of the virtual machines that we've got deployed.
But I can see here that they are connected to other workspaces.
So I could go in and click on a specific virtual machine and disconnect it from that workspace, and then connect it to this one.
Now, they may not already be connected to other Log Analytics workspaces if you don't have any already defined.
That would be one thing that we would do.
The other thing is to look at Storage account logs and add storage account logs as well.
And if you go to Azure Activity log, you'll also be able to link a subscription or connect your subscription here into your Log Analytics workspace.

[Video description begins] He clicks an option called "Azure Activity log" in the navigation pane and the corresponding page opens in the content pane. It includes a table with two columns and one row. The column headers are Subscription and Log Analytics Connection. [Video description ends]

So that that type of activity, that would be the management of Azure resources, shows up centrally here in your Log Analytics workspace.

[Video description begins] He clicks a subscription called "Pay-As-You-Go" and the corresponding blade opens. He clicks a button called "Connect". [Video description ends]

Also, if you go in the navigation bar in your workspace to Workspace summary.

[Video description begins] He closes the blade and returns to the LogAnalytics-2yhz76 | Azure Activity log blade. [Video description ends]

Here you can add components such as Network Performance Monitor.

[Video description begins] He clicks an option called "Workspace summary" in the navigation pane and a blade called "Overview" opens. [Video description ends]

So if I were to click Add, I could search in the Azure Marketplace for Network Performance Monitor.

[Video description begins] He clicks a button called "Add" and a blade called "Marketplace" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And I would add this one, this is from Microsoft.
If I wanted to be able to monitor connectivity, let's say between virtual machine endpoints or different subnets in my environment.
