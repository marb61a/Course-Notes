                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 11


- Now, we deploy this into a resource group called Rg7, so why don't we open up our navigation bar on the left, check out Resource groups
    - Just click on Rg7, because in the Overview blade if we look towards the bottom right, we'll see the resources in that resource group
    - There's two of them, there's an App Service plan and an App Service, so that's our application.
    - That's fine, let's close the extra windows down as we don't need them and continue browsing the application
    - Depending on the container image you've selected will determine if there's a default webpage within that container
  - If we click Browse, don't be surprised if you don't get anything depending on the image we selected
    - If we were to choose, let's say something like MySQL type of container image which is designed for the back end database
    - Not for the front end web app. Well then you wouldn't get a webpage, it would pop-up
    - Because we selected the WordPress web app, then we do have this sample webpage that did pop-up
  - You can change this at any time, meaning you can change the container image that you're using
    - Scroll down, you'll see that you can click on Container settings on the left because this is a containerized type of application
    - We can select the Image source, the same type of stuff we saw when we were creating this app, in the example see it's wordpress
  - You can simply type in the name of a different image, and optionally a tag
    - So a specific version if you want. And when you do that and Save the change
    - If you look at the log at the bottom, you'll see new entries about it pulling down your new container
    - It may take a moment or two but it will do it. So it can pull down the container image and you can change it after the fact
    - But we have a lot of the same types of settings that we would for a regular web app
    - Deployment slots for staging. So you're going to have a default production one that's always running when you build a web app
    - You can change from anonymous to some kind of authentication, whether it's through Azure Active Directory, Facebook, Google, and so on


App Service Plans and PowerShell
  - We are going to use PowerShell to deploy and manage an Azure website
    - To get started, we've launched the Cloud Shell here in the portal and just clear the screen
  - To build our application, we will use the New-AzWebApp cmdlet
    - We are going to specify the resource group that it will be deployed into
    - So -resourcegroup name, we've already got one called Rg7, specify that
    - We have to specify a name for this, we are going to call it lob, as in line of business, app1
    - It maybe an idea to add just a couple of characters to make it unique
  - Specify a location of CanadaEast, anywhere will do to be honest
    - The next thing that we are going to do is specify an existing app service plan
    - You can build an app service plan, remember web apps are associated with an app service plan
    - We've already got one called AppSp1 as in service plan 1, let's go ahead and press Enter to see what happens.
  - After a moment, we can see our web app has been created and it's currently listed as Running
    - Go ahead and run Get-AzWebApp, and we're going to specify that we want to see them in the resourcegroup Rg7
    - We might as well just pipe that to select and tell it, we only want to see the Name instead of all the other details
    - We can see there was already an existing web app in that resource group, but our newly created one is now showing up
  - We can also make changes, as well to some settings related to the web app
    - Let's just flip over to the portal for a second here
    - We are just going to view our app services or web apps
    - We want to open up the line of business app that we just created
    - We are just going to click to open that one up.
  - Once that opens up, we can see that indeed, we do have a sample web application
    - If we browse, it just got the standard welcome page the temporary or default web app page
    - So this is what it looks like. Let's just close that out.
  - Just go down to the Configuration of this newly created web app
    - Just to verify that there are no connection strings because we're about to add one by modifying this through PowerShell
    - Database Connection strings down at the bottom, there's nothing there, do that from PowerShell
  - The first thing that we are doing is establishing a variable called $cs for connection string 
    - We are then initializing it as essentially an empty array or hash table
    - We do that after the equal sign with an @ symbol, and then open and close curly brace
    - The next thing we're going to populate it, so $cs and in [ ] and we are creating an item called CustDb
    - We now need to configure the value and type for that entry, after that put an = @{ we are going to set the value to a sample connection string
  - Then we are going to set the Type to mysql and then close the curly brace
    - Now we want to use that with the Set-AzWebApp cmdlet
    - So we're modifying your web app, we want to add that connection string to it. -resourcegroupname, it's Rg7 and the name of the app here was lb and so on
    - We've got that there and then I'm going to use the -connectionstrings property and give it our variable $cs, let's press Enter.
    - It looks like it took so we can verify this by going back to the portal, just Refresh our page here
    - Let's see if the connection string shows up now, and indeed, it does.
    - We can click on hidden value to actually see the connection string and the type here is listed as MySQL


Web App Container Image
  - We are going to change the container image used by a Docker based web application.
    - In the portal, we are going to click on an existing web application that uses a Docker container.
  - We know this because if I scroll down in the navigation bar, we'll see Container settings, that's actually where we want to go.
  - When you go to Container settings, you'll see the current association with this app with a container source
    - At the top here we can see Azure Container Registry could be used
    - What's selected as Docker Hub out on the Internet, or you might have your own private container registry that you've created on-premises
    - So we are going to leave it on Public Repository Access for Docker Hub, currently it's using a wordpress container image
    - We can change it to any valid name and version of anything that's available on Docker Hub.
    - If we were to open up a new web browser window and go to Docker Hub, we would be able to specify what it is that we want to search for
    - If you search for mysql, you'll have to spell it correctly, of course, then we'll get a lot of different search results.
  - If we were to select, let's say, the first one we would see the Docker CLI command 
    - To reference that image to pull it down. docker pull mysql, so we know what's called mysql
    - So we can learn of the names and the tag information for images in this case, mysql
    - We can learn of that easily in this case by going to Docker Hub
    - Now that we have made that change, we are able go ahead and Save it
  - It might take a moment or two before that actually gets applied
    - Because that would have to be then downloaded from Docker Hub. But that's going to be automatic
    - So if you scroll down and start looking at the date and time stamps
    - You can see where it initially pulled down the WordPress Docker image from the public Docker repository
  - When it was set up initially. We go that way down towards the end, we'll be able to see that it's going to make a reference 
    - Eventually that it's downloaded and applied the mysql container image from Docker Hub
    - We can see here that we're starting to get messages
    - We've clicked Refresh here to refresh the log where it downloaded the newer image for mysql
    - So mysql:latest is how it was tagged and so we know that that is actually being used now within our web application


Visual Studio App Deployment
  - As a software developer, you might use a tool such as Microsoft Visual Studio to create and upload your web application to the Azure Cloud.
  - We have already downloaded and installed the free Microsoft Visual Studio Community Edition
    - We've already gone to manage my accounts to specify my credentials to log into Azure.
  - We can see our Azure subscription Pay-As-You-Go shown here
    - If we examine that further by drilling down under it, we can see for example App Services, in other words, web applications and app service plans
    
