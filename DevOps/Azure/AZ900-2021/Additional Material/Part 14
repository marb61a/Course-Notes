                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 14
   
   
App Service Backup
  - You can easily configure backup for an Azure web application using the portal, in the portal we've already navigated to an existing web application
    - In the navigation bar, just going to scroll down under Settings and choose Backups.
  - Backup has not been enabled here. So we can see it says, Backup is not configured
    - Click here to configure it, we could do it there or we could click the Configure button at the top, it makes no difference
    - We have to think about where we want the backups stored.
    - It says, Storage not configured. We're going to change that, so I'm going to click right on that.
I'm going to select an existing storage account where I want backups to be stored.
And I'm going to add a Container.
I have to create a container here with the name of my web app, -backup. And I'll leave the Public access level to Private.
And I'm going to Create this container.
That's where I want these backups for this app to be stored.
So I'm going to go ahead and select that container and click the Select button at the bottom. So now it has that.
Next is scheduling. Do you want to backup manually or do you want it to be on an automated schedule? I'd like an automated schedule. So I'll click On.
And down below, we can see it's set to backup once every day.
Now having done that, that's fine. But I'm going to scroll down exactly when. So we can tell it when, on which date, we want to start the schedule. And the timing, well, I can change the timing or I can leave it as it is.
So let's say we want this to happen at, 7 o'clock PM. And of course, we have to select the appropriate time zone when we want that backup to kick in. The default retention value is 30 days, I'm going to leave that. And if we have backups of databases, then that would be probably a good idea if your application consists of them. But we don't have any within this web application. So we don't have to worry about selecting databases to be backed up.
At this point, I'll click Save and our Backup Configuration is now saved.
Now we can see the schedule is reflected here when the backup will next occur. However, what we can also do is start the backup.
So I'm going to do that by clicking directly on the Backup button. And it says, Successfully submitted backup request. Excellent, so now we've got both a scheduled backup, and at the same time we've manually started one.
Back here on this main page where we clicked the Backup button, notice at the bottom the status says that the backup is currently in progress for our web application. So depending on how much content there is, and whether there are backend databases that contain a lot of data, will determine the size, which we see here is currently 0 MB, and how long it takes for the backup to occur.
And you can click the Refresh button and eventually you'll see that the backup Succeeded. We can see the backup date and time. We also have the option of clicking Restore. So there's no point in taking backups if you're not at least going to periodically test that Restore works correctly.
So for the Restore source, I'm going to choose App backup and we can select the backup. We only have one here.
And we can determine the target App Service application or the web app where we wanted to restore this to. Let's just scroll over just a little bit so we can see a little bit more of what's happening. So the default is to Overwrite the destination.
But we could tell it that we want to select a new or another existing app to restore this backup to. And we can determine if we want to ignore conflicting host names when we restore or ignore the databases as part of the restore. And then we would go ahead and click OK to begin restoring from the backup.


Azure Batch Overview
Azure Batch is a cloud service in Azure that's used for automation and job scheduling. So what it's really about is Batch processing for on-demand jobs against a pool of computers.
So parallel processing or High-Performance Computing, HPC, you could say. Azure Batch requires you to first create an Azure Batch account. Next, within that, you can define a pool, which is the configuration for the operating system details related to the virtual machines that will run your batch jobs. You can then define a job and associate it with a pool.
So Azure Batch begins with uploading scripts or apps that will handle your workloads, whether it's for some kind of engineering application, or climate modeling, or some kind of medical model of some kind. The next thing that you need to do is make sure you create a job, after which you can add job tasks.
The job tasks, and you can get away with one task within a job, is what actually triggers running things like scripts or executables. Finally, you can schedule this to occur, either one time or on a recurrent interval. Now bear in mind, that you're going to need to make sure your Azure Batch account is associated with the storage account.


Azure Batch Accounts
  - In this demonstration, I'm going create an Azure Batch account. I'll create a Batch account so that I can define jobs I want to run on demand or on a schedule basis against a pool of VMs.
So this is for batch processing of jobs. You don't need the compute power all the time.
So to start, I'll click Create a resource and I'm going to search for Batch.
And then, I'm going to choose Batch Service. And then I'll click Create.
Okay, first thing I need to do is select a Resource group I want to deploy this Batch account into and give it a name.
I'm going to call this BatchEast1. Now notice it says it's not valid, it's because of the uppercase letters.
So let's just go ahead, put lowercase letters and it loves it. We'll put this in Canada East. I'll just click Next for Advanced.
Pool allocation mode, the pool is the collection of VMs that will process your Batch jobs.
I'm going to let it be handled by the Batch service, so that's fine. Next, no tags.
Let's make sure the validation has passed, it has.
Let's create the Batch account by clicking Create.
And after a moment that deployment is complete. Let's click, Go to resource and let's poke around a little bit.
Now the first thing that we want to really do here actually is link this Batch account with an Azure Storage account. So I'm going to click Storage account over on the left.
Now you do this because depending on the nature of your job tasks that you're going to have running through Azure Batch. They might reference resources stored in the storage account, such as data files if you're doing big data processing.
Or you might need a storage account to store the output or the result of running your Batch jobs. Either way, I'm going to click Select a storage account. And I'm going to go ahead and choose one that I've already got created.
All right, even though it's in a different region, it's okay. It still adds it, it's all good to go. So now that we've got the storage account associated with it, let's just go back to the Overview for a moment.
You can also download the BatchExplorer GUI tool for free if you want to manage your Batch account using this interface instead of the portal. So I'm just going to go ahead and sign in with my Azure credentials so we can at least see it.
So when I sign in, I can see over on the left, it's discovered in my pay-as-you-go subscription that we've got a Batch account called batcheast1 in canadaeast. We can also create a New Batch account over here. So I'm just going to go ahead and double-click on it.
And here I have all these great little metrics, Failed tasks, core number of minutes, things we're running, Task states, Current node states. I can also view Jobs, Job schedules, and Pools.
Packages for applications, perhaps PKI certificates that would be used for each pool virtual machine to authenticate to an external service. Back here in the portal we can also see we have the Open in Batch Explorer button here on the Overview blade.
And we also have a few metrics here that we can see like the vCPU and Failed tasks, and so on. If you're going to be creating custom software that you want to run in Azure Batch, then you'll probably want to know which key to use.
You've got Keys here that you use to authenticate, you've got a primary and a secondary key, it doesn't matter which one.
You've also got the Batch account name and the URL and the ID and so on for the storage account. But the primary and secondary access keys can be used when you require programmatic access using the Batch API for Azure.


Azure Batch Applications
When you configure Azure Batch you need to configure job tasks. And a task can reference scripts or programs such as executable programs that are used to do some kind of Batch processing, whether it's big data analytics, or whether it's looking at genetic engineering research, or climate modeling, or financial model, could be anything. So here on-premises, I've got a custom app executable.
And what I need to do is zip it up. So I can just right-click and use tools such as 7-Zip to add it to an archive, which I'm going to do.
It's going to be CustomApp1.zip, and I'll click OK.
Because that is what I can then upload as an app into my Azure Batch account.
So here in the portal, I've navigated into my Batch account where I'm going to start by scrolling down and choosing Applications.
From here, I'm going to click the Add button.
I have to give this a couple of details, I've got to fill in an Application id a Version number, and then I have to select the Application package.
In this case, it's our on-prem zip file. So the Application id, I'm going to call this CustomApp1, Version number let's say, 1.0 and I'm going to select the file. So there it is CustomApp1.zip. Let's go ahead and Submit that.
Back here, my on-premises system, if you've got other files, here I've got a PowerShell Script called AnalyzeData.
Well, you can zip that up as well.
And we could have zip them both up at the same time and put them in one zip file, but I'm going to go ahead and zip this up separately.
So I'll just add it to an archive again.
And it's going to be called AnalyzeData.zip.
As you might guess back here in the portal, I'm going to click the Add button to add that as another application.
Now you might not want the package together if you plan on using them separately.
But if you plan on using them together, make sense put them in the same zip file. This is going to be called Analyze Data PowerShell Script. I'm going to call it and Version will be 1.0 again. It doesn't like my spaces. So I'm just going to replace that with underscores.
That's fine and then I'll select that Application package here.
Once that's done, I'll click Submit and we'll have two applications added to add our Azure Batch account as we can see listed here.
You can also click on an application you've added to the Batch account here and you can add more items within it.
What I could do there, I'll be adding versions.
Currently we can see we've got version 1.0 of our zip file, and we can see the last activation time so when it was brought into the Batch account.
And you can use the menu on the right to either Delete that version or even Update it.
If you've got a new version for example of the PowerShell Script with changes that were required, or you could keep multiple versions because you could add a version 2.0, if you need to run an old version of something in a new version of something.
Remember, these are applications that will be used for Batch job processing.
You might need an older version for handling certain types of file formats, for example, and a newer version to handle newer versions of those files that might need to be processed.
So maybe I'll put in version 2.0.
And I could upload another application package which I will do and I'll Submit it.
So what we'll see then is that we've got if I just click Refresh that we've got two versions of that app within a single application.
That's how it's stored.
So there's a bit of a hierarchy here, when you're working with these applications.
The applications ultimately get used when you start creating pools of virtual machines.
You can associate many items with a pool, including these application packages.


Azure Batch Pools
Here in the portal, I've already got an Azure Batch account created.
And I've already added a couple of applications such as scripts or custom apps, maybe executables that'll be used for job processing.
So now what I'm going to do is configure a pool within this Azure Batch account. The pool defines some details related to the horsepower that's actually going to get the job done.
In other words, virtual machine nodes. So under Pools, I'm going to click Add.
And I'll have to fill in well, quite a few details to be honest. The first of which is a Pool ID. Let's call it poolab567, just an ID. And the Display name here will be Pool1. Down below, I have to choose the location where I want to grab virtual machine images from.
So the standard Azure Marketplace, or maybe a Custom Image. I might have a Shared Image Gallery, or just a pure Custom Image, not shared at all. Or I might want to use a virtual machine image designed or optimized rather for Graphics and rendering, if that's the nature of my Batch jobs. But here I'm just going to choose Marketplace.
Publisher, in this case, microsoftwindowsserver, the offer's filled in with windowsserver. And then I choose the details here, let's say 2016-datacenter with a smalldisk.
Maybe I know that the nature of the VM itself is that it won't need a lot of storage space. Because maybe my running task, whether it's a script or an exe is coded to maybe retrieve data feeds from a storage account, or something like that. So that's fine. So I don't need any additional data disks for that. And as I scroll down, I can select the sizing for each individual VM node within the pool that we're defining right now.
And I could even Auto scale this.
So I could write a formula to determine when items should be auto scaled, when we should start adding nodes.
For help, you can click the link down below to view some samples of what those formulas might look like.
So we see an example over here on the right where we can see it's setting the target dedicated nodes, or you can just leave it at Fixed.
We aren't actually going to be running this, but you should have at least a minimum of 1.
Well actually, let's do that. Let's set 1 target dedicated node. You'll see why in a moment. We can also determine if there should be a Start task that we want to configure here which would be executed when a new VM joins the pool.
But that doesn't apply here. So I'm just going to choose Disabled. And I'm going to go down and associate this pool with an existing application package.
Now the application package will have software, whether it's scripts, or what not, or executables that we want to use for job processing.
So let's say I've got a PowerShell Script here, maybe I want the second version of it, and maybe I've got custom app here.
Let's see what we got for only version 1.0, okay.
So version 1.0 of that, these were already created here within the Azure Batch account.
So I'm going to Select that.
And I have to associate this with the virtual networks.
So, because really, we are going to be running virtual machines, it's just that this is a managed service.
It'll take care of a lot of the underlying work for us.
We're just giving it some details.
So Vnet2, let's say I want the VMs to run in Subnet1.
I don't want the VMs to have public IPs unless they need them perhaps to access an external service to perhaps ingest data. And I don't have any existing Server licenses, No.
So I'll click OK.
Well, the pool was created successfully, but this little red circle with an X doesn't look good.
What's up with that? Let's click and let's read. The specified account has reached core quota. Click here for details.
Okay, doesn't really tell us much. Alright, remember how we set the fact that we wanted one node, we didn't use auto scaling. Well, let's take a look here.
Let's go back into our Batch account here, and let's scroll up here and go into Quotas.
There are some default quota values here for a number of items.
Such as the maximum Active jobs and schedules, the maximum number of Pools you can create in this account. And if we look down below, how many Low-priority vCPUs for VMs can we have, 0. Total dedicated VCPUs, 0. No wonder we have a problem. Okay, so that's not a good thing, but it's not a big deal. All we have to do is request a quota increase from Microsoft. To do that, I just click the link, I'm just following what's there in front of me with the messages.
And for the selected option, it's Azure services, the issue here would be a Service and subscription limit quota increase.
And there are few other details to specify, the quota type here is going to be for Azure Batch.
So I'll click the Next Solutions button.
We just have to then target a specific Batch account in a region where this is an issue for us.
So to do that, I'll have to click Enter details first.
And for the location here, let's just choose Canada East, only because I know that's where my Batch account is located.
And I can tell it that look, I know I'm going to want to use D Series VMs in my pool.
So it really depends on your pool config, the sizing. But assuming that that was applicable, the Current limit is 0.
We could say, I want the New limit to be 2, or whatever the value is. However, we would click Save and continue, but I'm not going to I do that because I don't actually want to request that quota increase. So at this point, we've got the pool created within the Azure Batch account.
   
    
Azure Batch Jobs and Schedules
When you want jobs to be processed through Azure Batch, you have to define jobs and schedules. So here in the portal, I'm looking at an existing Batch account.
And in the navigation bar, I'm going to scroll down under Jobs. I've already got an application in a pool configured a pool of VMs.
So I'm going to go to Jobs.
So we're going to add a job and then within that, we're going to add at least one task. So I'm going to start by clicking Add.
Let's get the job defined first. So job, put in a unique value here.
And I'm going to select a pool, I have to associate the job with the pool.
We've already got a pool created.
So I'm going to select it from the list and choose Select. There it is.
And that's it. I don't need any advanced settings or anything like that. I'm going to click OK. So there's the job.
However, I need to go into the job and within it, add at least one task to actually get something done.
So I'm going to click Add.

[Video description begins] A blade called "Add task" opens. [Video description ends]

And I'm going to enter a Task ID, and then a Display name, Run PowerShell, actually Run custom app, let's say Run custom app.

[Video description begins] He enters the text, "taskyhz24" in a text box labeled "Task ID". [Video description ends]

And let's say I've got a custom app called customapp1.exe.

[Video description begins] He enters the text, "customapp1.exe" in a text box labeled "Command line". [Video description ends]

Now that, of course, would be pulled from an application package. So customapp1.exe and I can determine how long it's allowed to run.

[Video description begins] He clicks the Application packages option and the Application packages blade opens. [Video description ends]

And down below, I'm going to associate with an application package that I've already uploaded with that executable can be found, so that would be in CustomApp1.

[Video description begins] Under the Application field, he clicks the drop-down list box and the drop-down list opens. He then selects the CustomApp1 option. [Video description ends]

And I want version 1.0, and I'll choose Select.

[Video description begins] Under the Version field, he clicks the drop-down list box and the drop-down list opens. He then selects the 1.0 option. [Video description ends]

Okay, so, at that point, we're ready to go, ready to Submit the task at least.

[Video description begins] The Application packages blade closes. [Video description ends]

So we've got a task within the job.

[Video description begins] He clicks a button labeled "Submit" and the Add task blade closes. A task labeled "taskyhz24" appears in the page. [Video description ends]

Let's go back here, because now I want to schedule a job.

[Video description begins] He switches to the batcheast1 blade. [Video description ends]

I don't need Certificates here because I don't have any of my scripts or custom apps that will need to authenticate with specific types of services.

[Video description begins] In the navigation pane, he selects an option labeled "Job schedules" and its corresponding page opens in the content pane. [Video description ends]

So I'm going to need to do that.

[Video description begins] In the navigation pane, he points to an option labeled "Certificates". [Video description ends]

Job schedules. Let's Add a schedule.

[Video description begins] He clicks a button labeled "Add" and a blade called "Add job schedule" opens. [Video description ends]

So I need a Job schedule ID. So I'm just going to fill in some details here.

[Video description begins] He enters the text, "job123567" in a text box labeled "Job schedule ID". [Video description ends]

The Display name, I'm just going to call it Job1. And sometimes, you might need to specify metadata for, well, it really depends on your scripts or your applications that you're running and what services they're talking to. However, I'll leave that empty for now. And I'm going to tell it I want it to run on a particular day.

[Video description begins] In a text box labeled "Do no run until", he clicks an icon and a calendar opens. He then selects a date "03/31/2020". The text, "12:00 AM" is populated in a text box adjacent to the Do not run until text box. [Video description ends]

Now it says here it has to run after certain date and time based on the current time right now.
So I'm just going to put here, let's say 5:43 PM and it likes that.
It's going to be a Recurrence interval of Disabled. I just want it run one time and I have to click Update here to associate it with an existing pool. So I'm going to go ahead and choose that from the list.
And then I'll choose Save. There's the pool it's selected.
I can determine down below things like if I want an unlimited of time for this to run or retry count.
And maybe what to do when tasks complete. However, I'm just going to go ahead and click Save to save the schedule.
So now we've got a job schedule, I can click on it.
Now I can check up on it to see if it's run by going under Execution info. Now there's no end time here, it says n/a so it's not yet run. So I can click Refresh if it's suppose to run soon to make sure that I see the results of running that job.
And so after a few minutes, we can see here we've got a Recent job id, it's a link. I'm going to click on it to open it up and here we can get some stats as to where there's an active job currently it's running, what succeeded and what failed.
Now, if we don't have anything that succeeded or fail, what does that mean? It could mean the job is still in the midst of running.
Or it could mean that there's a problem.
Now you can follow this link with the recent job URL here.
Just paste that into another web browser window, which I'll do here. And you might gain some insight here we can see, well, it's not a big deal.
We're just missing some items here. So the parameter value for api-version, for example, has not been supplied.
So depending on your scripts or your code. If it's not using this specific value, such as in an HTTP request header, then you might get this kind of result.


Azure Container Solutions
Azure Kubernetes Service, otherwise called AKS, deals with application containers in plural. It's an orchestration solution, if you've got an application or some kind of dependency between multiple containers. You can even migrate existing application containers that you might have on-premises into the Azure cloud, or you can define your AKS cluster and work with brand new containers.
So it's clusters of containers, which means you'll have to specify some details about things like sizing for the nodes within the cluster. AKS replaces the older Azure Container Service or ACS that you might see some literature reference.
An application container, as we see in the diagram, is a logical boundary in which we run an application, or an application component. I say that because you might have a larger app that uses multiple containers, each container runs its own specialized task or micro service. They all work together. So pictured in the diagram, we've got application containers running across the top, labeled as APP A, B, C, all the way through to G. Now, this runs on top of an operating system, a host OS, as we see labelled here, that would be running, for example, the Docker Engine.
And the binaries and libraries that might be referenced by our APP Components within the containers. Some of those might be within the container themselves, or they can be referenced by the container. Containers really show up as processes running in the host OS. So unlike a virtual machine, they don't contain the OS. They use the underlying existing OS it's already running. So containers start up very quickly because of this. So containers are based on container images, just like you might use an OS image to reimage a computer, if it's not behaving correctly.
The image itself contains software, and perhaps settings for running a container. So you could say that a container is a runtime instance of an image. In the container, you'll have application software components and settings, whether it's custom software or commercial off the shelf software. Maybe some app-specific libraries, maybe a runtime environment, and also some tools. All of this can exist within a single container.
AKS, then, can be deployed using the CLI, using the portal. You can also manage it using Azure Cloud Shell, including using the kubectl, or kube control command line tool. You'll be used to that if you already have experience running Kubernetes outside of the Azure environment.


Azure Kubernetes Service
Azure Kubernetes Service is a container orchestration service. Now, often instead of saying Azure Kubernetes Service, we'll call it AKS. Where we can have individual containers that run applications or application components, what if we have multiple containers, maybe a big app consists of multiple micro services, each of which is in a container.
You need a way to schedule when they should load up, and when to monitor them, and what kind of state they should be running in. And that's where Azure Kubernetes Service comes in. Let's click Create a resource, and I'm going to search for kubernetes.
And I'm going to choose Kubernetes Service, and then I'll click Create.
This is something that was developed at Google.
So I'm going to have to specify some details to build this, such as the Resource group into which I want to deploy this because we're going going to be building a cluster essentially of Linux virtual machines to handle our containerized application, or applications.
So I'm going to call this AKS, so that's an Azure Kubernetes Service, Cluster1. Okay, after doing that, I specify the Region, the version of Kubernetes, the DNS name prefix. I will accept the defaults for that, and then I get to determine the node sizing for each node, and I can specify how many nodes I want in the cluster.

[Video description begins] He points to a slider adjacent to a field labeled "Node count". [Video description ends]

Notice that you can't get any lower than 1 but you can drag it way, way up.

[Video description begins] An error message appears with the text, "The maximum node count you can select is 4 due to the remaining quota in the". [Video description ends]

However, you're going to get to a point where you exceed the quota in your subscription. You can always request, like make a service request or support requests to ask for an increase, but I'm just going to go back and leave this down at, let's say, at 2.

[Video description begins] A tab labeled "Scale" opens in the blade. [Video description ends]

I'll click Next for scaling, I'm going to leave the default or VM scale sets being enabled here for scaling. I'll click Next for authentication.

[Video description begins] A tab labeled "Authentication" opens in the blade. [Video description ends]

We are going to let it create a new default service principle and we'll leave RBAC enabled if we want to use RBAC to control access to Kubernetes cluster resources.

[Video description begins] He points to a toggle button labeled "Enable RBAC", which is set to "Yes". [Video description ends]

And then I'll click Next.

[Video description begins] A tab labeled "Networking" opens in the blade. [Video description ends]

I want this to be a Private cluster, so I'm going to enable that only using private IP addresses. I can also determine if I want to have a customized network configuration by choosing Advanced, but I'm just going to let it do it itself, so I'll leave it on Basic.

[Video description begins] He clicks a button labeled "Next: Monitoring" and a tab labeled "Monitoring" opens in the blade. [Video description ends]

Next, I've got some monitoring options, which I'm going to leave as the default settings, Tags, and finally, we can validate this configurational.

[Video description begins] He clicks a button labeled "Next: Tags" and a tab labeled "Tags" opens in the blade. [Video description ends]

I'll click Next to review and create.
There was a quick message, it said I was creating the service principle, now it's running the final validation, it passed. Let's create our Azure Kubernetes cluster, so I'll click Create to do that.
Now that our cluster has been deployed in the Overview page, we can see over on the right for example that we've got 1 node pool. We can even monitor any containers, although there are none by default.
Put any containers, after we get our containerized app running in the cluster, we'll be looking at things like CPU utilizations, and we can kind of monitor the health of it. Over on the left, I'm going to pull up the Node pools blade, we defined a node pool when we deployed the cluster.
And we can see it's listed here, it's of type Linux, and there are two nodes. Now, I can either click the link for the 2, in this case, 2 nodes in the cluster. Or I can click the context menu, either way, we'll have an option for Scale.
So if I click on the 2, for example, we can configure manual as well as autoscaling.
If we decide that we want to make sure the cluster accommodates our container workload properly, I'm just going to cancel that.
But what we don't see are settings related to actually getting a container, an existing container in here. What if we already have containerized applications, how do we get them in the cluster? Let's move on the development side, but basically, you should really create an Azure Container Registry, upload container images to it. You're also going to need a Kubernetes manifest file, a YAML file, in order to get your apps in here. We do have the option here of Dev Spaces over on the left.
So you can use Dev Spaces here to start to build solutions and debug them that'll run in containers within the cluster.


Azure Container Instance
You can deploy Azure Container Instances, or ACIs, when you have a single container that you want to run.
Now if you have multiple containers and you need to manage them as a unit, then you're better off looking at AKS, Azure Kubernetes Service. But for a single container, ACI or Azure Container Instances is fine. So here in the portal, let's get this configured.
I'm going to click Create a resource.
And I'm going to search for container instance, and I'll choose Container Instances, and I'll click Create.
So I'm going to deploy this into an existing Resource group.
And I'm going to call this, for lack of a better name, Container1. Now, the only thing is it won't like the uppercase letters, so let's put lowercase c and this time, it's good, passes all the validations for the nomenclature.
For the Region, I'm going to go ahead and specify something in Canada that's near me such as Canada Central. And now what do I use as the source for this application container image, it can be a quick start image.
So whether we want to use a standard helloworld example to get started, running in Linux, or using nginx as the HTTP engine, or Microsoft IIS web server, we have the choice of that. We can also point to an Azure Container Registry, or ACR.
You can build an ACR in Azure as a repository where you store your own custom container images and you can reference them from here. Or you can go online to Docker Hub and look at either public or private images that are available up there.
I'm just going to go ahead and choose Quickstart images and I'm going to use, let's see, well actually, let's use the helloworld Linux variant.
I can also choose the sizing here, the horsepower I need to support the workload running in the container.
I'm not going to change that, but I am going to click Next for networking.
So I can make this publicly available, so I need a DNS name label.
So let's call this containeryhztest, and it's going to use the .canadacentral.azurecontainer.io DNS suffix by default. And depending on what is running in that container instance, will determine which ports need to be open. It's already got port 80 open for this quick start sample, that's fine. I'm going to click Next for Advanced.
I'm not going to configure anything here, I'm just going to click Next, no tags.
So after that, we're just going to have it validate our selections.
So it's running the final validation we see in the upper left. We can see the validation has passed, let's click Create to build our container instance.
And with the deployments complete, I'm going to click Go to resource and let's check it out.
So I'm in the Overview blade of our container instance, we can see a few details. We can see some metrics, how busy is it? Well, there's not very much going on here in terms of CPU utilization, not a lot of memory is really being used. And down below, network transfer for bytes received versus transmitted is minimal. Now the next thing we should do though, is take a look at the containers. Let's click Containers.
Here we're going to see a reference for the container that was deployed. In this case it was our helloworld, and it's called container1, and notice the state of it is such that, it's currently Running.
And down below we can see some events, the container was Created, Started, and it pulled the image here from a repository.
And also what's interesting, we can even view some log information here about what's been happening in the background.
So we can see our container, in this case is listening on port 80. Containers won't always do that, it depends on the nature of what's inside it.
Here I can click Connect as well, if I want to interact with the contents of the container, such as, I'll use /bin/sh S-H, make a connection, and here we go. Now we can see we're in the file system.
So if I do an ls, for example, I can even see index.html.
So if we go back to Overview, speaking of index.html, we're going to see the URL here, the Fully Qualified Domain Name, FQDN.
I'm going to copy that and we're going to open that app in another web browser window.
And here we can see it's pulling up the contents of the web page within that container. But again, containers don't have to serve up a web application.
It could be a background component that does anything, it doesn't even have to expose port 80.
But in this case, based on our container image that we selected, it does.

                    
Azure DNS Overview
  - Domain Name System, or DNS, is used as primarily a name lookup service. [Video description begins] The following information is displayed on screen: Name resolution service. [Video description ends] So if we have a name like www.skillsoft.com, DNS can resolve that to the IP address so that we can make a connection to that website in that particular example.
Well, you can host DNS zones in Azure. A zone isn't the same as a domain name though because the domain name in DNS is just that – it's just a name, it's a text string. When we say "zone," a zone is related to a domain name and it handles its records. So we'll see a little bit about that.
Now in Azure, you can host private or public zones. What's the difference? Well, a private zone is one that essentially you can make up the name for. You don't have to ensure that it's globally unique. You don't have to have registered it through an external registrar or anything like that. Now a public zone is one that you have already registered externally with a DNS domain name provider because you can't do that directly through Azure – but you can host it in Azure.
You will just have to sign in to your DNS registrar tool – usually it's web browser based – where you can modify records and just modify the name servers to point to Azure DNS name servers. There are plenty of different types of DNS records. The first here is an A record. This one is used to resolve a friendly name, as we mentioned, like www.skillsoft.com to the related IPv4 address. In IPv6, IP addresses are four times as long as with IPv4. IPv4 uses 32-bit IP addresses. With IPv6, we're looking at 128-bit addresses. So a quad A record is four As. And it's used to resolve a friendly name to an IPv6 address.
MX records. This stands for Mail Exchanger. It's used for SMTP mail transfer between servers. CNAME records. It stands for Canonical Name. This is an alias type of record. Basically, you can have multiple names for essentially the same host. [Video description begins] The slide displays the following as the utilization scenario for the CNAME component type: Canonical Name - an alias to another DNS record. [Video description ends]
A PTR is a reverse lookup record. Now normally we have a name and we need to resolve it to an IP. Well, a pointer record is the opposite. I already have the IP, I would like to get the name for this IP; so IP address to name type of lookup in a reverse lookup zone. You can configure Azure-provided DNS name resolution. Now this uses Azure-provided DNS service. This is actually set up by default, or you could change that default and use your own custom DNS servers.
Let's talk about the default Azure-provided DNS name resolution. That's the default config, and it resolves public DNS names and virtual machine names within the VNet. And you can configure, whether you're using Azure-provided or custom DNS servers, at the virtual network level, the VNet level, and also within a network interface.
You'll see there's a DNS servers option. The default behavior is that the network interface will inherit the DNS server configuration from the VNet it's in. So that's through the subnet affiliation. So with custom DNS options, you might use this if you want virtual machine name resolution across VNets or if you're deploying IaaS virtual machines manually as Active Directory domain controllers. Because Active Directory needs DNS. You need to configure DNS so that it can locate domain controllers. So you'd have to set up your own. And so you might use that as a custom DNS server configuration option for your VNet or your network interfaces.
DNS forwarding to Azure is supported so that even though you're using custom DNS configuration – it's a custom DNS server basically that you are specifying the IP address of – that custom DNS server can be configured to forward to Azure name servers. So you still get the benefit of the Azure name resolution.
So we can see here in the screenshot that we are looking at the DNS servers blade or the setting within a VNet. And on the right, the Default (Azure-provided) DNS servers is normally what you'll see. That's normally how it is unless you change it otherwise to Custom, which has been done here. And the IP addresses of two custom DNS servers has been specified.
Now the other thing to think about is that if you want to host a public domain name, you've gone out and you've purchased a specific DNS domain name, you have to have control of that already through an external DNS registrar before you can create it in Azure and create the record sets and actually have it work. Now you can manage DNS using your normal Azure credentials, either using tools such as the Portal or PowerShell or the CLI. Just bear in mind that depending on your Azure environment, RBAC, or role-based access control, will really determine if you have the correct permissions to manage DNS or not.


DNS Zones and the Portal
Using the portal, you can create private or public DNS zones in Azure and also manage the record sets within them. [Video description begins] Azure Home is open. It includes the following sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual machines, Virtual networks, etc.. [Video description ends]

So what we're going to do here is we're going to add a private DNS zone. When I say "private," what I mean is it's not a publicly unique DNS domain name that I've registered already. So basically I can make it up, it's only going to be used internally. So I'm going to go ahead and click Create a resource here in the portal. [Video description begins] A "New" blade opens. It includes a Search box. [Video description ends]

And I know I want to create a DNS zone. So I'm going to search for DNS zone. And I'm going to choose DNS zone. And I'll click Create. [Video description begins] The DNS zone blade that opens includes a "Create" button. [Video description ends]

Now you have to have planned ahead of time, well, for sure, the name of this if you're creating a private one. [Video description begins] A "Create DNS zone" blade opens. It has the following steps in the navigation pane: Basics, Tags, and Review + create. Currently, Basics is selected. It includes two sections: Project details and Instance details. The "Project details" section has a "Subscription" drop-down list, which is set to "Pay-As-You-Go." The drop-down list has an associated "Resource group" drop-down list. The "Instance details" section has a "Name" field. [Video description ends]

So I'm going to put this in the Rg1 resource group. And in this case, I'm going to call this quick24x7test.local. [Video description begins] After selecting Rg1 from the "Resource group" drop-down list, the presenter types quick24x7test.local in the "Name" field. [Video description ends]

So that's what I've planned I want to name this DNS zone. Now that in itself is a DNS domain name. The zone is the configuration that supports the records for that domain name. That's what we're really going to be getting into here. So I'm going to click Next. I'm not going to tag it although, of course, I could. [Video description begins] The "Tags" step is now selected. [Video description ends]

I'm just going to go to the review and create screen. [Video description begins] He clicks the "Next : Review + create" button. [Video description ends] Validation has passed. Excellent. I'm going to click the Create button. And it's going to create the zone with a couple of default records, which we'll take a look at. So it won't take very long before you can click Go to resource [Video description begins]

The DnsZones-Arm | Overview blade opens. It includes a "Go to resource" button. [Video description ends] and jump directly into your newly created DNS zone. [Video description begins] The quick24x7test.local blade that opens has the following categories in the resource menu: Overview, Activity log, Access control (IAM), etc.. Currently, Overview is selected. It includes a "Record set" button, a listing of four name servers, and a table with the following columns: Name, Type, TTL, Value, etc. Two record sets, with Type listed as NS and SOA, respectively, appear in the table. [Video description ends]

We can see over here on the right, even in the Overview blade, that we've got a name, a couple of name server records here in a record set, NS. These are the name servers that actually are handling this particular zone and also a start of authority, or SOA, record with some details. [Video description begins] He first points to the name servers that display in the "Value" column for the first record set and then to the corresponding details that display for the second record set. [Video description ends]

Now what I can do here is add my own record set. So my goal here is to have a record, an A record, for www, which means if I put it as the prefix within this DNS zone, I end up with www.quick24x7test.local. That's what I want and I want it to resolve to a specific IP address. So I'm going to click add record set up at the top. And I know I want to call it www. We would plan all this stuff ahead of time and not make it up as you're filling it in, of course.

[Video description begins] An "Add record set" pane appears. It includes a "Name" field; a "Type" drop-down list, which is set to A; a TTL field with an associated TTL unit drop-down list, which is set to Hours; and an "IP address" field. The following text displays at the bottom right-hand corner of the "Name" field: .quick24x7test.local. The number one displays in the TTL field. He types www in the "Name" field. [Video description ends]

And here I want to create an A record. A records are used to resolve friendly names or fully qualified domain names like www.quick24x7test.local to an IP address. But I might also want to create a quad A record for IPv6 resolution; a CNAME alias record and MX, mail exchanger, record; and so on. So it's going to be an A record here. [Video description begins] He points to some of the options listed in the "Type" drop-down list. [Video description ends]

I also have a time to live, or TTL, value here. So the TTL here determines how long that the information related to these records is cached when they're being queried by clients. So it's set here to one hour. That's fine. I'm not going to make a change there. What I am going to put here is the IP of a host, let's say, that I know is running a web service and it's ready for www.quick24x7test.local. So 10.0.1.100 is what I'm putting in. [Video description begins] He clicks the "OK" button. [Video description ends]

Okay, so it's creating the record set. It says it did it. So let's just scroll down and double-check. And there it is. There's our www. Of course, that's in our DNS zone. So put the whole thing together. It's an A record and we can see the value of it. [Video description begins] The www record set with Type listed as A and Value listed as 10.0.1.100 now appears in the table in the quick24x7test.local blade. [Video description ends]

Now I'm going to scroll up. And we can see here we have four name servers listed for this DNS zone. So I can copy any one of these using the Copy to clipboard button over on the far right. And the reason I would do this is because I want to test that this DNS zone is working correctly for name resolution. [Video description begins] He copies the following name server: ns1-09.azure-dns.com. [Video description ends]

So the way I'll do that here in my virtual machine that I've got running in Azure, I'm going to use the nslookup or name server lookup command. This is built into Windows. It's also built into the Unix and Linux operating systems as well. [Video description begins] He shifts to the command prompt. [Video description ends]
I'm going to give it the name I want to check or test – in this case, www.quick24x7test.local. And then I'm going to paste in the first name server that I just copied from the Overview blade in my DNS zone. And I'm going to press Enter. So I know here that it's returning the proper result. We can see the full DNS name. And we can see it returned the correct IP address, 10.0.1.100.


DNS Zones and the CLI
In this demonstration, I'm going to create a private DNS zone in Azure using the CLI. [Video description begins] The Microsoft Azure PowerShell application is open. [Video description ends] So to get started, I'm going to run az network dns zone create. The first thing I have to do is determine which resource group that should be deployed into. So I'm going to specify that with -g. And it's going to be resource group 1.

And I have to determine what nomenclature I want to use – what's the name of the zone. So in this case, it's going to be callinsure.com. [Video description begins] The presenter types the following command: az network dns zone create -g Rg1 -n callinsure.com. [Video description ends] And I'll go ahead and press Enter to create that. So it looks like it's created the DNS zone. We can see the four Azure DNS name servers that are allocated by default.

And if we take a look at it in the portal, let's go back here and take a look by going to our All resources view. And we should see that we've got the callinsure.com zone. There it is right there. So I'm going to click and open it up. [Video description begins] He shifts to the "All resources" blade. It includes a table with the following columns: Name, Type, Resource group, etc.. Several record links, including callinsure.com, appear in the table. [Video description ends]

Sure enough, it's looking like it's ready to go. There's the four name servers. [Video description begins] The callinsure.com blade that opens has the following categories in the resource menu: Overview, Activity log, Access control (IAM), etc.. Currently, Overview is selected. It includes a "Refresh" button, a listing of the four name servers, and a table with the following columns: Name, Type, TTL, Value, etc.. Two record sets with Type listed as NS and SOA, respectively, appear in the table. [Video description ends]

We've got the name server and start of authority records listed here. So let's go back to the CLI because now we're going to add a record set. [Video description begins] He points to the four name servers and the details that display in the "Value" column for the first and the second record sets, respectively. [Video description ends]

So I'm going to clear the screen and I'm going to run az network dns record-set A. That's a A record I want to add. And I'm going to tell it I want to add that record – add-record. The resource group is going to be Rg1, the zone with -z we just created. It's called callinsure.com. And the name, -n, is www. Finally, the address associated with that is going to be 10.0.1., let's say, 100. [Video description begins] He types the following command: az network dns record-set A add-record -g Rg1 -z callinsure.com -n www -a 10.0.1.100. [Video description ends]

And I'm going to go ahead and press Enter to create that. There's just a little message that says the record set doesn't exist and will be created. In future., an extra argument will be supported on the command line. That's all fine. We can see from the returned JSON output, it looks like it's been created. And of course, we can verify that in a number of ways, one of which is by refreshing our record sets here within our DNS zone in the portal. And if I just scroll down a little bit, there's our A record for www. [Video description begins] He returns to the callinsure.com blade and clicks the "Refresh" button. [Video description ends]

We could see it's pointing to 10.0.1.100. [Video description begins] The www record set with Type listed as A and Value listed as 10.0.1.100 now appears in the table. [Video description ends] Of course, we can do the same type of thing in the CLI. So from here, I could do az network dns record-set. This time list -g is resource group, Rg1, and the zone is callinsure.com.

And if we press Enter, we'll get a sense of some of the record sets that are actually available here. And for example, we can see the IPv4 address of 10.0.1.100 for the record that we just created. And if we kind of scroll back up, we can read more about all of the records that are available within that DNS zone.

Now if we go through the output, we'll see that the arecords property here contains the IPv4 addressing information. So what I'm gong to do then is run the az network dns record-set list syntax, -g for the resource group, -z for the zone name. So that's all the same as we've done previously. But now we're going to use --query.

Now I've got a list of record sets. So it's an array; so open and close square bracket; dot. And in this case, I want to return not only the name but also the arecords property. So because I've got multiple properties I want returned, they're enclosed themselves within square brackets and separated with a comma. So I'm going to press Enter. And what we should see is that we've got, for example, what we want from our zone, the www A record with the listed IPv4 address. So this output makes it a little bit easier to digest what it is that we're looking at and asking the command to return.


DNS Zones and PowerShell
In this demonstration, I'm going to use PowerShell to create an Azure-hosted DNS zone and also a record set. So let's start with the zone. To do that, I'm going to run new-azdnszone. And I want to name this permacan.com. Now I don't have to have registered that publicly if I just want to use it internally in my Azure name resolution environment. I'm going to specify -resourcegroupname. I want this deployed in a resource group named Rg1. Let's go ahead and press Enter to get that part completed. And it looks like it created it. It returned the default for NameServers that every Azure-hosted DNS zone gets.

And if we check our work here in the portal and go to All resources, and we'll just do a little refresh here. If we filter it, let's say, for perma, we will see after a moment indeed there's the permacan zone. And if we look at the Overview blade for it, we'll see the four name servers that are always assigned. And we'll also see the name server and start of authority records, which are always automatically assigned.

[Video description begins] The "All resources" blade includes a "Refresh" button, a Search box with the inline text "Filter by name...," and a table with the following columns: Name, Type, Resource group, etc.. Several record links are listed in the table. And when the presenter clicks the "Refresh" button and types perma in the Search box, only the permacan.com record link displays in the table. Next, he clicks the link, and a permacan.com blade opens. It has the following categories in the resource menu: Overview, Activity log, Access control (IAM), etc. Overview, which is selected, includes a "Refresh" button, a listing of the four name servers, and a table with the following columns: Name, Type, TTL, Value, etc. Two record sets with Type listed as NS and SOA, respectively, appear in the table. [Video description ends]

So it looks good. Next thing that we're going to do is add a record set. And we can do that in PowerShell with the new-azdnsrecordset cmdlet. And the first thing I'll have to do is specify the name of the record I want to create here. It's going to be called www. Now I want that to be an A record. So I'll tell it that with -recordtype. I want it to resolve to an ipv4 address. And the record type here will be A -zonename. Now we want that to be a part in our case of the zone we just created. And it's called permacan.com.

The resource group, the resource group name is Rg1. And I also can set a TTL value, time to live value, for caching for this particular DNS record set. So I'll set that, let's say, to a value of 3600. Now that's the number of seconds for caching. So 3,600 seconds equates to one hour. The next thing I'm going to do is use the -dnsrecords parameter. And the way I'm going to do this, you could've put it in a variable. But within parentheses here,

I'm going to use new-azdnsrecordconfig -ipv4address. I'll type that in and I'll specify the IP address I want to use – 10.0.1., let's say, 100 or whatever the IP address you want the ww record to resolve to. And of course, I'm going to have to close the parenthesis. [Video description begins] He types the following command: new-azdnsrecordset -name www -recordtype A -zonename permacan.com -resourcegroupname Rg1 -ttl 3600 -dnsrecords (new-azdnsrecordconfig -ipv4address "10.0.1.100"). [Video description ends]

Putting parentheses around this because I want this treated as returned result value that we'll use as the value of the -dnsrecords parameters. Let's go ahead and press Enter. Well, that was quick, looks like it's good. It says the provisioning state is such that it succeeded. So well, we can check our work back here in the portal. Let's just refresh the screen we already had opened. [Video description begins] He clicks the "Refresh" button, and the www record set with Type listed as A, TTL listed as 3600, and Value listed as 10.0.1.100 now appears in the table in the blade. [Video description ends]

And there it is. There's the www A record. There's the TTL of 3600 seconds. And we can see the IP address that it's going to resolve to. Back into PowerShell, just going to clear the screen here and I'm going to use the get-azdnsrecordset cmdlet, so we can return some of these items here in the PowerShell environment; -zonename is permacan.com in this particular case at least. And I'll specify the resource group name. And then the resource group name value is Rg1 in this particular case. [Video description begins] He enters the following command: get-azdnsrecordset -zonename permacan.com -resourcegroupname Rg1. [Video description ends]

And it looks like it's returned everything here. But I could ask for certain properties. Maybe I'm only interested in the RecordType and the Records and also the Name. So why not bring up that previous command and pipe it to select and tell it that we want the name, we want the recordtype, and we want the records properties? [Video description begins] He enters the following command: get-azdnsrecordset -zonename permacan.com -resourcegroupname Rg1 | select name, recordtype, records. [Video description ends]

When we do that, we have a pretty nice, neat list. For example, we can see here www is an A record and we can see the IP address that it actually resolves to. [Video description begins] The application displays a table with the following columns: Name, RecordType, and Records. Three record sets are listed in the table, including www with RecordType listed as A and Records listed as {10.0.1.100}. [Video description ends]

Now if I use the nslookup command here in the Cloud Shell and give it the name, the fully qualified domain name, for what I've created – so www permacan.com. [Video description begins] He pastes the following command: nslookup www.permacan.com ns1-05.azure-dns.com. [Video description ends] And here I've pasted in one of the name server records and all I did there, you can see it's ns1-05.

I've gone back here to the Overview blade of my DNS zone. And I've simply copied one of these name server entries. [Video description begins] He points to the listing of the four name servers that displays in the permacan.com blade. [Video description ends] Basically, that's the name server I want to query against. And it returns the www.permacan.com fully qualified domain name, or FQDN, with the IP address that we configured. So in other words, the DNS zone is functional for using it for name resolution.


VNet Custom DNS Settings
When you create a VNet in Azure, by default, the VNet uses Azure-provided DNS name resolution. Let's verify this fact. [Video description begins] The "Virtual networks" blade is open. It includes a table with the following columns: Name, Resource group, Location, etc.. Four record links, including Vnet1, appear in the table. [Video description ends] So let's go into an existing VNet.

And what I want to do when the properties area shows up on the left is I want to click on DNS servers. [Video description begins] The presenter clicks the Vnet1 link, and the corresponding blade opens. It includes a "Settings" section in the resource menu. The section includes a DNS servers category. And when he selects the category, the corresponding blade that opens includes a "Save" button and a DNS servers section. The section has two options: Default (Azure-provided) and Custom. Currently, Default (Azure-provided) is selected. [Video description ends]

You've got two options, either the Default (Azure-provided) DNS name resolution, or you can use Custom. So what I'm going to do here is specify Custom where I must add the IP address of a DNS server that I want to use as my custom name resolution solution. [Video description begins] When he selects the "Custom" option, a field displays below it featuring the inline text: Add DNS server. [Video description ends]

You can also add multiple IP addresses here. You'll be able to add as many as you need here. [Video description begins] He points to the field that displays below the "Custom" option. [Video description ends] For example, you're probably never going to need more than five, six, or seven custom DNS server IP addresses here, where the additional ones only really get used if the first one doesn't respond.

But before we fill this in, let's take a look at what we have for our own DNS server, which I've actually deployed into an Azure VNet, specifically in Vnet1. [Video description begins] He shifts to the DNS Manager application, which has the following category in the navigation pane: DNS. The category has a single node: WinSrv2019-1. The node, which is expanded, includes a "Forward Lookup Zones" node. The node, which is expanded, comprises a quick24x7custom.local folder, which is selected. It contains a table with the following columns: Name, Type, and Data. Three records appear in the table. These include www with Type listed as Host (A) and Data listed as 10.0.1.1. [Video description ends]

So I can see here in Windows, I've got a DNS zone called quick24x7custom.local. It's got a record for www that points to 10.0.1.1. And so we can use the IP address of this host as our DNS server. So I'm going to go ahead and go into a command prompt. And I'm going to run ipconfig. [Video description begins] The output includes an "IPv4 Address" heading. The following address displays against the heading: 10.0.1.4. [Video description ends]

And I can see that this server's address is 10.0.1.4. That's what I'm going to set as my DNS server. And you want to make sure that this private IP address, in this case, it's the private one, public ones don't show up here in the OS, you want to make sure that it's unchanging if you rely on this server for name resolution.

So I'm going to go ahead and specify that as my custom DNS server IP address and I'm going to Save it. [Video description begins] He returns to the Vnet1 | DNS servers blade, types 10.0.1.4 in the field that displays below the "Custom" option, and clicks the "Save" button. [Video description ends] Now this is going to apply to resources that I've deployed in Vnet1.

And in this case, if I look at the subnets for Vnet1, we can see that there are two of them, subnets 1 and 2. [Video description begins] He selects the "Subnets" category that displays in the "Settings" section in the resource menu. The category includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Two subnets, Subnet2 and Subnet1, appear in the table. [Video description ends]

So what I want to do is verify that this works. And I'm going to do it on my server. And you don't have to do it directly on the DNS server. But I don't want to have to fire up another VM just to test it. So I've restarted my virtual machine in that VNet, so it will pick up the new VNet custom DNS server setting, which it is pointing to itself. But that's good enough for testing purposes.

When you're within a virtual machine operating system in Azure, you can do an ipconfig /all. [Video description begins] He returns to the command prompt and enters the command: ipconfig /all. The output includes a DNS Servers heading. The following address displays against the heading: 10.0.1.4. [Video description ends]

And you'll see the DNS server that was assigned by Azure. So you don't want to configure DNS server IP addresses where possible within the OS. Let it be handled by Azure. So we now know it's pointing to the correct DNS server, 10.0.1.4. Again, that happens to be the server I'm sitting at itself. But again, it'll be fine for testing.

So we can test this by pinging www.quick24x7custom.local. And it should return back 10.0.1.1. [Video description begins] When he enters the command, ping www.quick24x7custom.local, the application displays the following message: Pinging www.quick24x7custom.local [10.0.1.1] with 32 bytes of data:. [Video description ends] I don't have a host listening at that IP, which is why it's timing out. [Video description begins]

He points to the following output that now displays: Request timed out. [Video description ends] But if we go in and look at DNS again just to verify our work, we're going to see, in fact, that that is correct. [Video description begins] He types dns in the Search box and selects DNS from the search results that display. The DNS Manager application reopens. [Video description ends] It is resolving now correctly because we've modified our VNet DNS settings. So there's quick24x7custom.local, there's www, there's 10.0.1.1. So it's working.


Network Security Group Overview
Most of us already have experience configuring some type of firewall whether it's a network perimeter firewall such as one built into a router or a specific firewall appliance or even in a host operating system like Windows or Linux. Firewalls limit network traffic based on our configuration of firewall rules.

And that's really what network security groups, or NSGs, are all about in Azure. It's considered a Layer 4 firewall. Layer 4 is referring to the fourth layer in the OSI model. The OSI model is a seven-layer conceptual model used to explain network communications related to both software and hardware. So Layer 4 is the transport layer – so has the ability to deal with things like IP addresses and port numbers.

So with network security groups in Azure, you can create Allow rules. So you can can specify the traffic that should be allowed into or out of a subnet or a network interface. Or you can define it as a Deny rule if you specifically want to deny something, again, whether it's coming into or out of a subnet or a network interface.

There are also default rules that we'll take a look at here, both for the inbound direction and outbound direction, again, as it applies to subnet or a network interface. So we configure the details within a network security group in rules. And the rules will have details such as the source and destination IP address, the source and destination application group when it comes to applications, source and destination port numbers, the protocol, whether it's TCP, UDP, ICMP. You can even use source and destination tagging information.

And you can specify a priority number to control the order in which rules are processed. Because once a rule matches a packet, then after that whatever the rule says to do, Allow or Deny occurs. And then rule processing stops. So ordering these rules within the network security group is very important.

So we have an example here of the default inbound rules. [Video description begins] A screenshot displays. It contains two buttons: Add and Default rules. Below these is a table with the following columns: Priority, Name, Port, etc.. The following rules appear in the table: AllowVnetInBound with Priority listed as 65000, AllowAzureLoadBalancerInBound with Priority listed as 65001, and DenyAllInBound with Priority listed as 65500. [Video description ends]

You can turn off the display of these if you don't want to see them by clicking the Default rules button up at the top. So we've got three rules here automatically available, one that allows inbound VNet traffic, load balancer traffic, and then third one is a DenyAllInBound rule if the first two don't kick in. Notice that priority numbers in the left-hand column. So rule number 65000 gets read before rule 65500. So that's how this works.

In the same way, we have default outbound rules. Really, the same type of discussion. We've got a Default rules button at the top if we don't want to see these. And we can see that we've got AllowVnetOutBound. Notice that this one's a little bit different. The second default rule for outbound is to allow Internet traffic outbound. That's allowed by default. Other than that, everything else is denied. So you need to associate the network security group with an Azure resource. The network security group itself is, unto itself, a resource that you create in Azure. And you associate it with either a specific VM network adapter, so a network interface, or a subnet.

So think strategy. If you've got a bunch of Linux virtual machines organized on the same subnet, there's nothing else on it, and they have the same firewall rules, they need to allow port 22 SSH traffic in, for example, well, instead of associating the network security group with each network interface for each Linux VM in that subnet, since they all have the same need and they're on the same subnet, why not just associate the network security group once with the subnet? Because then that applies to all of the network interfaces in that subnet.

Now when you build your own inbound rule or outbound, it's going to look similar to this. [Video description begins] A screenshot of an "Add inbound security rule" pane displays. It contains a "Source" drop-down list, a "Source IP addresses/CIDR ranges" field, a "Source port ranges" field, a "Destination" drop-down list, a "Destination port ranges" field, a "Protocol" section, an "Action" section, a "Priority" field, and a "Name" field. The "Protocol" section contains three options: Any, TCP, and UDP. The "Action" section contains two options: Allow and Deny. [Video description ends]

You specify the source at the top, such as being a specific IP address or it could be from anywhere. You can then specify the source port ranges, the destination such as a virtual network. Or it could be a specific host. You specify things like a destination port number. Here it's port 80 over the protocol of TCP. And the action is either Allow or Deny. In this case, it's Allow. Don't forget that the priority number, in this case listed as 100, is important because it controls the order that the rules are processed in.

And remember, when there's a rule match, no more rule processing occurs. And then, finally, we have a name for the rule. When you manage network security groups, you can do this using the Azure portal GUI, you can use the PowerShell cmdlets such as New-AzNetworkSecurityGroup, Get-AzNetworkSecurityGroup, Remove-AzNetworkSecurityGroup, to name just a few. In the CLI, you could use ccommand syntax, including az network nsg – for network security group – create, az network nsg list, az network nsg delete, again, to name just a handful of NSG, or network security group, related CLI commands.


NSGs and the Portal
In Azure, network security groups, or NSGs, are essentially a collection of firewall rules that either allow or deny traffic. [Video description begins] Azure Home is open. It includes the following sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, All resources, Monitor, etc.. [Video description ends] Let's create one here in the portal by clicking Create a resource where I'm going to search for network security and I'll choose Network security group.

And then I'll choose Create. [Video description begins] A "New" blade opens. It includes a Search box. When the presenter searches for and selects the "Network security group" option, the corresponding blade opens. The blade includes a "Create" button. And with the button being clicked, a "Create network security group" blade opens. It contains three steps: Basics, Tags, Review + create. Currently, Basics is selected. It contains two sections: Project details and Instance details. The "Project details section contains a "Subscription" drop-down list, which is set to Pay-As-You-Go and an associated "Resource group" drop-down list. The "Instance details" section has a "Name" field and a "Region" drop-down list, which is set to (Canada) Canada Central. [Video description ends]

First thing I have to do is deploy this into a specific resource group. So I'll make a selection from the list. And I'm going to call this NSG-Windows. [Video description begins] After selecting the Rg1 option from the "Resource group" drop-down list, he types NSG-Windows in the "Name" field. [Video description ends]

So I will have planned this ahead of time so that I might have a number of Windows virtual machine instances. And I want to control traffic to them through this network security group. I'm going to specify that this will be deployed in the Canada Central region. I'll click next: tagging. And I'm not going to specify any key/value pairs for tags. I can do that at any time thereafter if I choose. So I'll click Next to review and create. The validation has passed. [Video description begins] The application displays the message: Validation passed. [Video description ends]

So I'll click Create to create the network security group. Now all we've done is essentially created a shell. We haven't yet defined any of the rules in the network security group. And there are some default rules as you'll see. [Video description begins] A Microsoft.NetworkSecurityGroup-20200321082526 blade opens. It has the following categories in the resource menu: Overview, Inputs, Outputs, etc.. Currently, Overview is selected. It includes the message: Your deployment is underway. [Video description ends]

So once this is created, we're going to go in and take a look at some of those default rules and then we'll add some of our own. Once it's created, I'll click the Go to resource button. And here in our network security group, notice on the left, we can view inbound security rules.

[Video description begins] When the blade displays the "Your deployment is complete" message, a "Deployment succeeded" pop-up appears. It includes a "Go to resource" button. When he clicks the button, an NSG-Windows blade opens. It includes a "Settings" section in the resource menu. The section includes the categories: Inbound security rules, Outbound security rules, Network interfaces, Subnets, etc.. And when he selects the "Inbound security rules" category, the corresponding blade that opens includes an "Add" button, A "Default rules" button, and a table with the following columns: Priority, Name, Port, Protocol, Source, Destination, and Action. The following rules appear in the table: AllowVnetInBound with Priority listed as 65000, Port and Protocol listed as Any, Source and Destination listed as VirtualNetwork, and Action listed as Allow; AllowAzureLoadBalancerInBound with Priority listed as 65001, Port and Protocol listed as Any, Source listed as AzureLoadBalancer, Destination listed as Any, and Action listed as Allow; DenyAllInBound with Priority listed as 65500, Port listed as Any, Protocol listed as Any, Source listed as Any, Destination listed as Any, and Action listed as Deny. [Video description ends]

And there are three of them. We can turn them on or off from display by clicking the Default rules button. The same type of thing is true with Outbound security rules. [Video description begins] When he clicks the "Default rules" button, the table displays the message: No results.. And when he reclicks it, the three rules reappear. [Video description ends]

So for example, if we go to Inbound security rules, notice that these priority numbers are ordered, they're sorted. In other words, the firewall rule here with a Priority of 65000 will be checked before 65001, which is checked before 65500. Now that's going to be important once we start adding our own inbound security rules. You get to determine the order that they get checked in. Because after a rule is checked and there's a match, then no further rule processing takes place.

So what do we have here by default anyway? Well, the first rule is called AllowVnetInBound. So any port, any protocol, from a virtual network, to a virtual network, we are allowing that traffic. Then we have the same type of thing but for allowing Azure load balancer inbound traffic. So the source can be from an AzureLoadBalancer. Any destination, we're allowing it. Then we've got a final rule at the bottom called DenyAllInBound for everything, any source, any destination, any port, any protocol, denying traffic. So if the first two rules don't match incoming traffic, then the DenyAllInBound rule would kick in. It's at the bottom of the list.

Now when managing Windows virtual machines, you're probably going to want to manage them remotely using Remote Desktop Protocol, port 3389. So we're going to add a rule to allow that. Now that's not something that you want to make visible on the Internet publicly, just on the private network side of things for security reasons.

So I'm going to go ahead and click the Add button to add a new rule. We're going to add one for Remote Desktop Protocol. [Video description begins] An "Add inbound security rule" pane appears. It includes a "Source" drop-down list, which is set to Any; a "Source port ranges" field; a "Destination" drop-down list; a "Destination port ranges" field; a "Protocol" section; an "Action" section; and the following field: Priority (given as 100). The "Protocol" section contains the following options: Any, TCP, UDP, and ICMP. The "Action" section contains two options: Allow and Deny. [Video description ends]

The Source is set to Any, but we could specify an IP address, a tag, or an application security group. For example, if I go to IP Addresses, I could specify my public IP address as it's known on the Internet if I'm managing or will be managing these virtual machines from an on-premises environment. [Video description begins] When he selects the "IP Addresses" option from the "Source" drop-down list, a "Source IP addresses/CIDR ranges" field replaces the "Source port ranges" field. [Video description ends]

However, for now I'm going to leave that on Any. The source port range, I'll leave as an asterisk. Normally, when you are making a connection to a service like RDP on port 3389, the destination port is going to be specified, for example, as 3389. But that service talks back to your machine on a much higher level port that's randomly generated. At any rate, so the destination here can be a specific IP address or a virtual network, whatever the case might be. So I'm going to leave it on Any Destination.

I can specify the port range. In this case, it's just a single port number, 3389. I could specify a TCP or a UDP or a ICMP. In this case, I'm going to specify TCP. Down below, I can either Allow or Deny. And notice the default rule number or Priority value is 100. Remember, this is important because that numbering or that priority determines in which order each rule is checked for incoming traffic. Now I'm going to give this a name. It's going to be called AllowInboundRDP. And I'm going to click Add.

So after a moment, notice here that we've got an AllowInboundRDP rule. But we've got a little yield kind of symbol here – some kind of a warning. [Video description begins] The AllowInboundRDP rule now appears in the table in the NSG-Windows | Inbound security rules blade. [Video description ends]

And the reason that we have this is because we are allowing traffic from any source as opposed to locking it down to a particular IP address range. So if we wanted to change that, we could. [Video description begins] He selects the AllowInboundRDP rule, and the corresponding pane appears. He points to the "Source" drop-down list and returns to the blade. [Video description ends]

Now notice if I turn off the default rule viewing, all we see is the rule that we created. We can also do the same type of thing for an outbound security rule. So if I want to control outbound traffic, I could add a rule and configure it in the same manner. Now we can associate network security groups with network interfaces, which are, of course, associated with virtual machines or subnets.

So I could go, for example, here to Subnets and I could click Associate. And I could add a subnet that I want this applied to. [Video description begins] When he selects the "Subnets" category, the corresponding blade that opens includes an "Associate" button. And when he clicks the button, an "Associate subnet" pane appears. It contains a "Virtual network" drop-down list. [Video description ends]

Of course, I first choose the virtual network or the VNet and then I choose the subnet, let's say, Subnet1 and Vnet1. [Video description begins] When he selects the Vnet1 option from the "Virtual network" drop-down list, a "Subnet" drop-down list also displays in the pane. [Video description ends] I'll click OK. And then it will have been associated. So now we're looking at controlling inbound and outbound traffic from a perspective of a specific subnet. Now let's close out of here.

Let's go to All resources and let's look at this from the subnet's perspective. [Video description begins] He returns to Azure Home and selects the "All resources" option. The corresponding blade includes a table with the following columns: Name, Type, Resource group, etc.. A few record links, including Vnet1, appear in the table. [Video description ends]

Now the subnet itself is not its own resource. It's contained within a VNet. So I'm going to open up Vnet1. I'm going to click on Subnets on the left. That shows me Subnet1 and Subnet2. [Video description begins] The Vnet1 blade includes a "Settings" section in the resource menu. The section includes a "Subnets" category. And when he selects the category, the corresponding blade includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Two subnets, Subnet2 and Subnet1, appear in the table. [Video description ends]

If I click on Subnet1, that opens up a whole other set of options just for that subnet. [Video description begins] The "Subnet1" blade includes an "Address range (CIDR block) field, an NAT gateway drop-down list, and a "Network security group" drop-down list, which is set to NSG-Windows. [Video description ends]

You can see the IP address range, whether we've got a NAT gateway associated with it and our current topic, network security group association. Here it is, NSG-Windows. So we could have also set that association here. There are a number of ways of doing it. But in this way, we can control the traffic flow into and out of, in our particular example, a Vnet subnet.


NSGs and the CLI
We know that network security groups are basically collections of rules that control traffic flow into or out of a subnet or a network interface. And the rules can be set to allow or deny that traffic. Well, we can work with those network security groups and their rules using the CLI. And that's what we're going to do here in this example. I'm going to start by using az network nsg, for network security group, create -g. [Video description begins] The Microsoft Azure PowerShell application is open. [Video description ends] 

And I'm going to deploy this into a resource group called Rg1, and I have to give it a name. I'm going to call this in this example App3_Firewall_Rules. [Video description begins] The presenter enters the following command: az network nsg create -g Rg1 -n App3_Firewall_Rules. [Video description ends]

Now the next thing I'm going to do is verify that that was created. We can do that in the portal, in the GUI, of course, but we can also do that using the – there it looks like it's done – using the az network nsg list command. That's consistent in the CLI. You can always use list to list back items. It's kind of like in PowerShell how you could always use the get prefix in the name of a command LIB in order to retrieve something. Now when I do this, it's going to return, of course, all of the properties, all of the details.

So as usual, what we can do in the CLI here is that --query at the end and ask for a specific property like .name. [Video description begins] He enters the following command: az network nsg list --query [].name. [Video description ends] So here we can see that we've got three network security groups, including the one that we just created, App3_ Firewall_Rules.

But the creation of the network security group itself is nothing. It's kind of like a skeletal infrastructure, a container. We need to put a rule in it. And then of course, it needs to be associated with either a subnet or a network interface, so it's actually effective. [Video description begins] He enters the following command: az network nsg rule create -g Rg1 --nsg-name App3_Firewall_Rules -n Rule1 --priority 500 --source-address-prefixes 71.4.56.0/24 --destination-port-ranges 80 443 --destination-address-prefixes '*' --access Allow --protocol Tcp --description "allow inbound HTTP and HTTPS traffic". [Video description ends]

Next, I'm going to create a rule within that network security group. And to do that, I will use the az network nsg rule create syntax. I'll have to specify the resource group where that network security group was deployed. That would be Rg1. And I'll have to use the --nsg-name parameter and give it the name of our newly created security group – that's called App3_Firewall_Rules. Then I have to give a name for the current rule with -n. We're going to call the current rule Rule1.

I'm going to give it a priority value of 500 with --priority. Remember, the priority determines the ordering of the rules. So a rule with a priority of 400 would be checked before our rule, which has a priority of 500. And if there's a match with the rule, that rule applies and no further rules are processed after the matching rule. So it's important to think very carefully about the relative priority value.

Then I'm going to use the --source-address-prefixes parameter. And in here, I'm going to specify an IP address range in CIDR format, which would reflect, for example, a network from which I want to allow access to an application. Then I'm going to use the --destination-port ranges parameter. And I'm going to specify that I want to allow the destination ports, so traffic going to port 80 or to port 443. So a web application would use HTTP port 80 and HTTPS for a secured connection through port 443.

The destination address prefixes, perhaps if I've got a number of application servers, I could set to an asterisk; so in other words, any destination address prefix. And I'm going to use --access to specify Allow. Because remember, a rule within a network security group could also be set to Deny; --protocol is Tcp; and --description, in this case, I'll just put in whatever I think makes sense to describe this rule. And I'm going to go ahead and press Enter to create it within that network security group.

And after a moment, we can see that the provisioning succeeded for this rule. We can check our work here in the portal. [Video description begins] The "All resources" blade is open. It includes a table with the following columns: Name, Type, Resource group, etc.. Several record links, including App3_Firewall_Rules, are listed in the table. [Video description ends]

So if I open up the App3_Firewall_Rules network security group and if we go to Inbound security rules, well, we could probably see without doing that anyway, but there it is – rule 500, Rule1, and ports 80 and 443. And we can see all the details are filled in in accordance with what we specified at the command line.
Now the next thing I'm going to do is simply list rules within that network security group. So az network nsg rule list. So the network security group is in a resource group called Rg1; --nsg-name. It's called App3_ Firewall_ Rules. [Video description begins] He types the following command: az network nsg rule list -g Rg1 --nsg-name App3_Firewall_Rules. [Video description ends] Let's go ahead and press Enter. And we can see the rules that are available within that. In this case, we can see our description for our rule. We can see our destinationAddressPrefix, which is an asterisk. And if we scroll down further, we'll also see the priority and the name of the rule, Tcp. We can see the sourceAddressPrefix and so on.


NSGs and PowerShell
In this demonstration, I'm going to use PowerShell to build a network security group. And within that I'm going to define a rule so that we can control traffic flow. Specifically, I'm going to build a rule that will allow RDP traffic to Windows Host Remote Desktop Protocol. So I've launched Cloud Shell here in the portal. [Video description begins] The Microsoft Azure PowerShell application is open. [Video description ends] The first thing I'm going to do, I don't have to do it this way, but sometimes, when you're working with longer commands, and parameters and values in PowerShell, it's easier to store things in variables.

So the first thing I'm going to do here is build a variable called $rdp_allow_rule, that's the name of my variable. [Video description begins] He enters the following command: $rdp_allow_rule= [Video description ends] And what I want to store in that variable, so after the equal sign, I've got New-AzNetworkSecurityRuleConfig -Name. I want to call my rule allow-inbound-rdp -SourcePortRange. [Video description begins] He highlights the following rule: "allow-inbound-rdp" [Video description ends] It's an asterisk, so any port. -Protocol will be TCP -SourceAddressPrefix, I'm going to use the reserved keyword of internet. I want to allow inbound-RDP traffic to VMs running in Azure sourced from the Internet. -Access is either allow or deny here. I want to allow the traffic -Priority. I'm going to give this rule of priority value of 110, bearing in mind that the priority value's used to determine the order in which rules within the NSG are processed.

So rule 110 is checked before rule 111. The direction here with -Direction, I will specify as inbound. I don't want an outbound rule in this case, just inbound RDP traffic. -DestinationPortRange because we're talking about Remote Desktop Protocol RDP, the port number there will be 3389. And the -DestinationAddressPrefix,

I'm going to use a wildcard symbol in the form of an asterisk. So any destination address. So I'm going to press enter to create that variable, that's all we have done is to create a variable. Nothing has been done with the network security group, or anything like that. So in order to build a network security group, we have to use the New-AZNetworkSecurityGroup PowerShell cmdlet. I'm going to use -Name and I'm going to call this windows-common-NSG. Then, I can add one or more security rules. We've only got one variable, so -SecurityRules. The value of that parameter will be our variable up above, $rdp_allow_rule.

Now, I have to build this network security group and deploy it into a resource group so -ResourceGroupName is Rg1. I have to specify a location so -Location in this example will be Canada East. Let's go ahead and press enter to create that network security group along with the rule within it. Next thing I'll do is run get-aznetworksecuritygroup. And maybe, we'll pipe that to select and tell it we only want to see the names of the security groups. [Video description begins] Several Security Group names display, including WindowsNSGEast, App3_Firewall_Rules and windows-common-NSG [Video description ends] Here's the one we've just created windows_, or rather windows-common-NSG. I'm going to minimize Cloud Shell and I'm just going to refresh my All Resources view in the background, which is filtered currently for only network security groups.
And just give it a moment to update. After a moment of waiting and clicking Refresh, I now see our windows-common-NSG, network security group. Let's click on it and go to the inbound rules just to check out our work. There's rule 110 to allow inbound RDP that we specified on the PowerShell command line.


Security Rule Troubleshooting
When you work with network security groups, they consist of rules that can be applied to subnets or network interfaces to control traffic flow. And so it can be tricky in a larger environment to trace exactly why we might have a problem making a connection to a given virtual machine workload. And that's where effective security rules comes in for security rule troubleshooting.

Here in the portal, I'm looking at my existing virtual machines, one of which is a Windows one called WinSrv2019-1. [Video description begins] The "Virtual machines" blade is open. It includes a table with the following columns: Name, Type, Status, etc.. Two virtual machine links, including WinSrv2019-1, appear in the table. [Video description ends] 

Notice, though, the state is that it's currently stopped. I leave it that way for now. Let's click on that virtual machine to open it up. [Video description begins] The WinSrv2019-1 blade includes an Overview category, which is currently selected, and a "Settings" section in the resource menu. The "Settings" section includes a "Networking" category. [Video description ends]

What I want to do is go to the Networking blade. Because in the Networking blade, aside from things like the network interfaces, we'll also see any relationship to inbound and outbound port rules. We can see down below the priority numbers. [Video description begins] The WinSrv2019-1 | Networking blade includes an "Effective security rules" link and the following options: Inbound port rules, Outbound port rules, Application security groups, etc. Currently, Inbound port rules is selected and includes a table with the following columns: Priority, Name, Port, etc. Four rules appear in the table. [Video description ends]

So they're ordered by priority. And of course, when there's a match on a rule, it doesn't process any further rules with a lower priority. Now lower priority here means a higher numeric value. But notice, we've got effective security rules because rules can be applied at the subnet level and the network interface level. So let's go to Effective security rules. Now because the virtual machine isn't running, it says it couldn't retrieve them. Not a problem.

Let's start that virtual machine. So we're going to go back here in the breadcrumb trail at the top so that I can pull up the Overview blade of that VM just so I can start it up. [Video description begins] The presenter clicks the WinSrv2019-1 | Networking link in the breadcrumb and selects the "Overview" category in the resource menu of the corresponding blade. [Video description ends]

So I'm going to go ahead and click the Start button and just wait a moment as that happens. Okay, so now that our virtual machine has been started, we can go back to the Networking blade. [Video description begins] He selects the notifications control that displays at the top of the portal. The menu that opens includes a "Started virtual machine" link. [Video description ends]

Let's check out the effective security rules. Now this time when we click Effective security rules, there won't be a message about it not being running. Obviously, the virtual machine is running. [Video description begins] The winsrv2019-1439 | Effective security rules blade includes the following headings: Scope and Associated NSGs. Network interface (winsrv2019-1439) and an NSG-Windows (Subnet) link display against these controls, respectively. [Video description ends]

So if we take a look here, we can see a reference to the network interface used by this virtual machine and also the associated network security group, which in this case comes from the subnet. But if you think about it, you could have a network security group associated to the subnet and also the network interface. And you could have rules that then conflict with one another or at the least make it difficult to determine which one is effective.

What we're going to do is explore the network interface here. We know that we've got a network security group associated with the subnet. We're going to associate one with the network interface and come back here. So I've gone back to my home page here in the portal where I'm going to create a resource. It's going to be another network security group that we're going to associate with a particular interface, so we can see how that works; so Network security group. And then I'll click on Create. And we'll be on our way.

[Video description begins] He shifts to Azure Home, which includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual machines, All resources, etc.. He selects the "Create a resource" option, and a "New" blade opens. It includes a Search box. He types network security in the Search box and selects Network security group from the options that display. A "Network security group" blade that opens includes a "Create" button. When he clicks the button, the corresponding blade that opens has the following steps in the navigation pane: Basics, Tags, and Review + create. Currently, Basics is selected. It contains two sections: Project details and Instance details. The "Project details" section contains a "Subscription" drop-down list, which is set to Pay-As-You-Go, and an associated "Resource group" drop-down list. The "Instance details" section contains a "Name field and a "Region" drop-down list, which is set to (Canada) Canada Central. [Video description ends]

I will select the resource group association. And I'm going to call this NSG, let's say, winInt, for Windows interface. [Video description begins] He selects Rg1 from the "Resource group" drop-down list and types NSG-WinInt in the Name field. [Video description ends] And it's going to be in Canada Central.

So I'm going to review and create that. Of course, we'll have to create at least a rule in it. So let's create that network security group. Once that's done, I'm going to click Go to resource and we can add our rule. [Video description begins] He clicks the "Review + create" button, and the "Review + create" step, which is selected, includes a "Create" button. When he clicks the button, the corresponding blade that opens includes a "Go to resource" button. And when he clicks the button, the NSG-WinInt blade that opens includes an "Overview" category and a "Settings" section in the resource pane. The "Settings" section includes an "Inbound security rules" category. [Video description ends]

So I'm going to go to Inbound security rules. We know that there are default rules. That's fine. I'm just going to click the Add button, so we can add another one. And we'll make it different so that we can easily identify it when we look at the effective security rules.

[Video description begins] The NSG-WinInt | Inbound security rules blade includes an "Add" button, a "Refresh" button, and a table with the following columns: Priority, Name, Port, etc.. Three rules appear in the table. When he clicks the "Add" button, an "Add inbound security rule" pane appears. It includes a "Destination port ranges" field, a "Protocol" section, a "Priority" field, a "Name" field, and an "Add" button. The "Protocol" section contains four options: Any, TCP, UDP, and ICMP. Currently, Any is selected. [Video description ends]

So for example, let's say this is going to be for TCP port 389 and that would be an LDAP type of thing. So 389 up here for the port. The priority, let's say, is going to be 120. I'm just going to scroll down. And we'll call this, let's say, LDAP. Okay, so we've got an LDAP rule, priority of 120. And it's for port 389. [Video description begins] He selects the "TCP" option in the "Protocol" section and types 389, 120, and LDAP in the "Destination port ranges" field, the "Priority" field, and the "Name" field, respectively. [Video description ends]

Let's click Add. That's an Allowed rule. And we'll make sure it just shows up as it normally should directly here in the network security group. So I'll just click Refresh. There it is. There's our LDAP rule. All good. [Video description begins] The LDAP rule now appears in the table in the NSG-WinInt | Inbound security rules blade. [Video description ends]

Let's go back to the virtual machine and let's check out the effective security rules again. Now we got to make sure, of course, actually before we do that that we associate that with a network interface. Let's go to the All resources view first and make sure you filter it not for all but, let's say, just network interfaces.
We know we've got a Windows network interface here used by the Windows VM. Let's just go to Network security group here. Let's set that association. So I'll just go ahead and click Edit. Select from the list and there it is, NSG-WinInt, the Windows interface. Save that change. And once that's done, then we'll go to the virtual machine and check the effective security rules again.
Okay, so it's done. This time, we'll be able to see it – so Virtual machines. [Video description begins] He returns to Azure Home. [Video description ends] We're going to open up the same Windows virtual machine. We're going to do precisely what we did the first time. We're going to click on Networking to open the networking blade. And then we're going to be interested in looking at the effective security rules.
So let me go ahead and click Effective security rules. [Video description begins] The winsrv2019-1439 | Effective security rules blade now also displays the following link against the Associated NSGs heading: NSG-WinInt (Network interface). It also includes two tabs: NSG-WinInt and NSG-Windows. The NSG-WinInt tab is selected and includes an "Inbound rules" section. The section has a table with the following columns: Name, Priority, Source, etc.. Four rules, including LDAP, appear in the table. [Video description ends]
This time if you look at the Associated NSGs,  we used to only have NSG-Windows, which is associated at the subnet level. Now we've got a network interface association. And look at the list down below. It now includes our LDAP rule. Now that's from the NSG-WinInt. If we go to NSG-Windows, we'll see the rules available through it. Now this is going to be an important tool to use if you're troubleshooting connectivity to a virtual machine.
But always bear in mind, beyond network security rules, it could also be another type of problem that's preventing you to connect such as if you're trying to RDP into an Azure Windows VM. It could also be a routing table configuration error that doesn't allow traffic back out to the Internet, as an example.


VPN Overview
There are a few options for configuring VPN connectivity to the Azure cloud. So a VPN allows for an encrypted point-to-point network tunnel. So any traffic sent through that tunnel is encrypted, such as from an on-premises VPN appliance to a cloud-based appliance in Azure. We have point-to-site connectivity, or P2S. This is for individual remote users that might be working from home or that might be traveling that need an encrypted connection to Azure.

Then we've got site-to-site, or S2S, connections or site-to-site VPN. It's kind of what we describe where an entire on-premises network makes a connection over the Internet, for example, to the Azure cloud through an encrypted VPN tunnel. And so that would require an on-premises VPN appliance.

And we can also even have a VPN connection over a private dedicated ExpressRoute circuit. Site-to-site VPNs in Azure require a local network gateway. This is an Azure resource that you define that represents the on-premises VPN appliance. So you have to know something about it, such as its public IP address. We then can have an encrypted IPsec VPN tunnel to the Azure cloud.

But you also need to configure a resource that represents the Azure VPN side of things. And that's called an Azure virtual network gateway. With a point-to-site configuration, you are allowing individual clients to have an encrypted VPN connection over the Internet, for example, to Azure. So that means that each client is using a VPN client configuration to make that connection. And that can be an encrypted SSTP or OpenVPN IPsec type of connection. And you still need the Azure virtual network gateway in this case on the Azure side. You just don't need a client VPN appliance since it's for individual client devices.

With a point-to-site VPN, you don't need an on-premises VPN public IP address. You can also have the client device authenticate to the Azure VPN gateway using a PKI certificate. So you'd have to generate a certificate to be used by the device if you don't have one for it already. You can also use centralized RADIUS server authentication. And when you configure a point-to-site VPN, you can also specify a VPN client IP address pool that will be used by connecting clients.

The PKI certificate is a digital security certificate. It gets issued by a certificate authority and it has an expiration date. So we need to think then carefully about our PKI certificate configuration. Because it needs to be uploaded to Azure. We have to upload the root certificate public key. So then client certificates would be able to authenticate to the VPN using their configured client certificate.

You can generate a self-signed root certificate in many different ways, including using PowerShell. In this example, we're creating a variable called $cert for certificate. And we're using the New-SelfSignedCertificate cmdlet to create a self-signed root certificate. Now you don't have to do this. You can acquire a client certificate from a publicly trusted certificate authority. But if you want to do your own thing, you can do this as well.

Notice that with the -Subject parameter, we're setting the common name in this example to FakeRootCert. And we're telling it where we want to store it here with the -CertStoreLocation parameter. In PowerShell, the certificate store in Windows is available as a drive letter, so in other words, Cert:. [Video description begins] The following code displays: $cert = New-SelfSignedCertificate -Type Custom -keySpec Signature -Subject "CN=FakeRootCert" -KeyExportPolicy Exportable -HashAlgorithm sha256 -KeyLength 2048 -CertStoreLocation "Cert:\CurrentUser\My" -KeyUsageProperty Sign -KeyUsage CertSign. [Video description ends]

Now the next thing we're going to look at is what you might do to generate a client certificate, particularly from our previous example where we have a self-signed root certificate. So we're using the New-SelfSignedCertificate PowerShell cmdlet again. But a couple of things are different. We're setting in a DNS name; so calling this VPNClient1. And the subject parameter has a common name here of P2SChildCert – could be anything – P2S meaning point-to-site.

And as we go further down, at the end, notice that the signer of this certificate with the -signer parameter, notice that the signer of this client certificate is our $cert variable from our previous example. [Video description begins] The following code displays: New-SelfSignedCertificate -Type Custom -DnsName VPNClient1 -KeySpec Signature -Subject "CN=P2SChildCert" -KeyExportPolicy Exportable -HashAlgorithm sha256 -KeyLength 2048 -CertStoreLocation "Cert:\CurrentUser\My" -Signer $cert. [Video description ends]


Point-to-Site VPN Configuration
In this demonstration, I'll be using PowerShell to begin to create a self-signed root certificate and then a client PKI certificate that will be used to configure a Point-to-Site VPN. So to get started, I'm going to create a variable called $cert, which will store the result of running New-SelfSignedCertificate.
There's a bunch of parameters here, but notably, we have to pay attention to the -Subject parameter because it establishes the common name of the actual root certificate. Here I'm just calling it RootCert. It's going to use a sha256 hashing algorithm. That's going to be used to digitally sign client certificates issued from this. The key length is 2,048 bits. And with -CertStoreLocation, we're specifying where in the certificate store on the local Windows machine this root certificate will be stored.

In PowerShell, the certificate store is accessible as a drive. So instead of a drive letter, it's Cert:. It's going to go under CurrentUser\My. And the key can be used for signing, including certificate signing. So I'm going to go ahead and press Enter to generate that. And we're going to check our work. So let's change directory to the cert drive. [Video description begins] The presenter types the command: cd cert:. [Video description ends]

We're currently in currentuser\my. If I type dir, here I can see the RootCert that we've just created. That's what we specified as the common name up above. Now let's generate a PKI client certificate from the RootCert. So to do that, I'm going to use the same PowerShell cmdlet again, except what's going to be different is that we're going to sign it using our newly generated root certificate.

[Video description begins] He pastes some code comprising five lines. The following is the code per line: Line 1: New-SelfSignedCertificate -Type Custom -DnsName ClientCert -KeySpec Signature `, line 2: -Subject "CN=ClientCert" -KeyExportPolicy Exportable `, line 3: -HashAlgorithm sha256 -KeyLength 2048 `, line 4: -CertStoreLocation "Cert:\CurrentUser\My" `, and line 5: -Signer $cert. [Video description ends]

So I'm using New-SelfSignedCertificate. It's a custom type of certificate. I'm setting a DNS name here to ClientCert. And I'm using -Subject to specify that the common name of this certificate will simply be ClientCert. We can see the hashing algorithm, the key length, the certificate store location. So it's going to be in the same place that the RootCert is currently stored in.

And what's different here is I'm using -Signer and I'm passing it my variable, $cert, which contains the information for the root certificate. So let's go ahead and press Enter. And let's just do a dir here. We're still on the Cert drive in PowerShell, and we're under currentuser\my. So we can see not only the RootCert that was established previously but also the client certificate.

We can also view this on this machine in the Microsoft Management Console, or MMC, by adding the certificate snap-in. [Video description begins] He opens a "Console1 - [Console Root]" application. It includes a menu bar, and an empty "Console Root" folder displays in the navigation pane. [Video description ends] So from my Start menu, I launched MMC. I'm going to maximize it. I'm just going to go to the File menu, Add/Remove Snap-in..., Certificates, Add. It's for the current user. And I'll click OK.

[Video description begins] When he selects the "Add/Remove Snap-in..." command from the File menu, an "Add or Remove Snap-in" dialog box appears. It includes an "Available snap-ins:" section and a "Selected snap-ins:" section with an "Add" button displaying between the two. The "Available snap-ins:" section has a table with the following columns: Snap-in and Vendor. Several snap-ins, including Certificates, appear in the table. The "Selected snap-ins:" section displays a selected "Console Root" folder. And when he selects the "Certificates" snap-in and clicks the "Add" button, a "Certificates snap-in" dialog box appears. It includes a "My user account" option, a "Service account" option, a "Computer account" option, and a "Finish" button. The "My user account" option is selected. He clicks the "Finish" button and then clicks the "OK" button in the "Add or Remove Snap-ins" dialog box. A "Certificates - Current User" node now displays in the "Console Root" folder in the "Console1 - [Console Root]" application. [Video description ends]

And if I drill down under Personal, Certificates, we're going to see that we've got the client certificate and the root certificate. Of course, both are issued by the root certificate that we generated in PowerShell. [Video description begins] He expands the "Certificates - Current User" node to reveal, among others, a "Personal" node. He expands the node to reveal a "Certificates" folder, which he selects. The folder contains a table with the following columns: Issued To, Issued By, Expiration Date, etc. A few certificates appear in the table. These include ClientCert with Issued By listed as RootCert and RootCert with Issued By listed as RootCert. [Video description ends]

Now here in the portal, I'm going to go to the All resources view where I'm going to filter it for virtual network gateways. I've already got one created. A virtual network gateway represents the VPN side in Azure. So I'm going to choose Virtual network gateway. If you don't have one, you need to create it. But it might take a few minutes for it to be created initially. So here it is, it's called AzureVPN1. We need this because when you open up the properties of it, you need to click

[Video description begins] He shifts to Azure Home, which includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual networks, All resources, etc.. When he selects the "All resources" option, the corresponding blade that opens includes a "Type == all" filter option and a table with the following columns: Name, Type, Resource group, etc.. Several record links appear in the table. He selects the "Type == all" option, and the corresponding drop-down list expands to reveal several checkboxes, including a selected "Select all" checkbox. He deselects the "Select all" checkbox and selects the "Virtual network gateway" checkbox. The application now displays a single record link, AzureVPN1, in the table. [Video description ends]

Point-to-site configuration to configure a point-to-site VPN configuration. [Video description begins] The AzureVPN1 blade includes a selected "Overview" category and a "Settings" section in the resource menu. The "Settings" section includes a "Point-to-site configuration" category, which he selects. [Video description ends]

So we can see it says, Point-to-site is not configured. So I'm going to go ahead and click the Configure now link. [Video description begins] The "Azure VPN1 | Point-to-site configuration" blade includes a "Save" button; a "Download VPN client" button; an "Address pool" field; a "Tunnel type" drop-down list, which is set to OpenVPN (SSL); and a "Root certificates" section, which contains a table with the following columns: Name and Public certificate data. A single certificate, RootCert, appears in the table. [Video description ends]

Now at this point, I'm going to specify an IP address pool for the addresses I want assigned to VPN clients. And I need to make sure it doesn't overlap with my VNet range. I'm going to select this as an IKEv2 and SSTP type of connection. [Video description begins] He selects the "IKEv2 and SSTP (SSL)" option from the "Tunnel type" drop-down list. [Video description ends]

I've already typed in the name of the root certificate here. I've called it RootCert, and I've pasted in the public certificate data. Now how do you get that public certificate data? Well, back here in MMC, remember how we could see the client and the root certificate. Well, we need the root certificate's public key.
So I'm going to go ahead and right-click on the root certificate, choose All Tasks, Export..., Next. [Video description begins] When he points to All Tasks in the RootCert context menu and clicks Export, a Certificate Export Wizard appears. It includes a "Next" button, which he clicks. The wizard now displays two options: Yes, export the private key and No, do not export the private key. The second option is selected. [Video description ends]
I don't want to export the private key, but the public key is implied. So I'll click Next. I'm going to use Base-64 encoded as the file format. I'll click Next. And then I need to save this to a file. [Video description begins] The wizard includes the following options: DER encoded binary X.509 (.CER) and Base-64 encoded X.509 (.CER). The first option is selected. And when he selects the second option and clicks the "Next" button, the wizard displays a "File name:" field, which has an associated "Browse" button. [Video description ends] Public key files look something like this. [Video description begins] The contents of RootCert.cer display in the Notepad. These include some data that displays between a "BEGIN CERTIFICATE" text and an "END CERTIFICATE" text. [Video description ends]
What I want to do is copy everything between BEGIN CERTIFICATE and END CERTIFICATE. And that's what you would use to paste into our point-to-site configuration in the portal. So that's what was done here. So I'm going to go ahead and save this configuration. Once that's done, I can go ahead and download the VPN client. [Video description begins] He returns to the "Azure VPN1 | Point-to-site configuration" blade and points to the data that displays in the "Public certificate data" column of the table in the "Root certificates" section. Next, he points to the "Download VPN client" button. [Video description ends]
This is a zip file that I can extract and install locally on my Windows computer to make the VPN connection to Azure. Now once I've extracted it, I'll have a couple of subdirectories. [Video description begins] An AzureGW (2) folder displays in the Downloads folder of Windows Explorer. It includes a WindowsAmd64 folder. [Video description ends]
I'm interested in WindowsAmd64 for 64 bit. And notice, I've got a VPN client setup executable. [Video description begins] He double-clicks the WindowsAmd64 folder. [Video description ends] So I'm going to go ahead and right-click on that and run that install as administrator. I'm then asked if I want to install a VPN client configuration for VNet1. So I'm going to to choose Yes.
So on my machine now where I've run that, if I go to my Control Panel and then go into Network & Internet – so I'm looking at my Windows settings – then we'll be able to check whether or not we've got the appropriate type of connection, which means that if I go to VPN, for example, we'll see we've got a connection here that's been added when we installed that, called VNet1.
And if I click on it, I can then choose to connect. [Video description begins] The "Network & Internet" setting includes a VPN category in the navigation pane. And when he selects the category, the corresponding view includes a VPN section. The section includes a VNet1 option. [Video description ends]
So in the dialog box for Azure Virtual Network, I will click the Connect button. And after a moment, we'll see that VNet1 is now showing up here as Connected. In other words, this Windows 10 client is now connected to the Azure VPN. [Video description begins] The VNet1 option now features the word: Connected. [Video description ends]


Site-to-Site VPN Configuration
You can use a site-to-site VPN to link an entire on-premises network to the Azure cloud. This way, you have an encrypted tunnel through which transmissions travel over the Internet to get to Azure. So it's protected. To do this, we need to create two primary objects here in Azure. We need a local network gateway, which represents your on-premises VPN configuration. And we also need a cloud equivalent called a virtual network gateway.
So I'm going to call this On-prem_Site1. And I'm going to put in an IP address. This would be a public-facing IP address for that device. So you have to know this information. I have to specify the IP address space or spaces that I want to allow connectivity through the VPN front. So for example, if we're using 192.168.0.0, let's say, /24, then I could specify that that is being used in the internal network on-premises. We could add multiple items. [Video description begins] When he types an address range in the "Address space" field, an additional field displays below the field. [Video description ends]

If your VPN appliance supports the Border Gateway Protocol for sharing the routing information, so BGP, you could also configure BGP settings such as the Autonomous system number, the BGP peer IP addressing, and so on. I'm going to turn that off. I'm going to deploy this configuration. This is the local network gateway. I'm going to deploy that into a resource group called Rg1. And in this case, I'm going to leave the location at Canada East. [Video description begins] He selects the Rg1 option from the "Resource group" drop-down list. [Video description ends]

And I'll choose Create. So all we're doing is creating a reference to what our on-premises VPN environment is. Now the next thing we need to do, and we can continue while that's being deployed, is we need to do the Azure side. We need to deploy a virtual network gateway configuration. [Video description begins] He returns to Azure Home and points to the notifications control that displays at the top of the portal. [Video description ends]

So in order to do that, I first need to think about the VNet in Azure that I want to allow VPN connectivity to. Because in that VNet, I need to create what's called a gateway subnet. Let's go to our Virtual networks view. And I've got a VNet here called Vnet1. So I want to allow VPN access to that. [Video description begins] He selects the "Virtual network" option, and the corresponding blade that opens includes a table with the following columns: Name, Resource group, Location, etc.. Four record links, including Vnet1, appear in the table. [Video description ends]

So when I click on Vnet1, I need to start by looking at its existing subnets to see if we already have a gateway subnet or not. Now I don't. [Video description begins] The Vnet1 blade includes an "Overview" category and a "Settings" section in the resource pane. The "Settings" section includes a "Subnets" category. Currently, Overview is selected. And when he selects the "Subnets" category, the corresponding blade that opens includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Two subnets appear in the table. [Video description ends]

I just have two standard subnets, Subnet1 and Subnet2. I know I don't have a gateway subnet because it literally needs to be called gateway subnet. And we have a button up at the top here to add one. So I'm going to click the add Gateway subnet button. There's nothing else I'm going to configure here. [Video description begins] An "Add subnet" pane appears. It includes the drop-down lists: Network security group and Route table. Both the drop-down lists are set to None. [Video description ends]

I could associate this with a network security group if I were to control traffic flow or a route table object. But at this point, I'm going to go ahead and just click OK. So I'm creating a gateway subnet then, and notice it's literally called GatewaySubnet – no spaces – and it's part of Vnet1. [Video description begins] GatewaySubnet now appears in the table in the Vnet1 | Subnets blade. [Video description ends]

So what have we've done? We've got the local network gateway for the on-prem VPN appliances. We've got the gateway subnet. We still have to define our virtual network gateway, the Azure VPN side of things. [Video description begins] He returns to Azure Home. [Video description ends] So I'm going to click Create a resource. And I'm going to type virtual network. And here it is – Virtual network gateway.

I'm going to click Create. [Video description begins] The "Create virtual network gateway" blade has three steps: Basics, Tags, and Review + create. Currently, Basics is selected. It includes an "Instance details" section and a "Public IP address" section. The "Instance details" section includes a "Name" field; a "Region" drop-down list; a "Gateway type" heading; a VPN type heading; an "SKU" drop-down list, which is set to VpnGw1; and a "Virtual network" drop-down list. The "Gateway type" heading has two options: VPN, which is selected, and ExpressRoute. The VPN type heading has two options: Route-based, which is selected, and Policy-based. The "Public IP address" section includes a "Public IP address" heading, a "Public IP address name" field, an "Enable active-active mode" heading, and a "Configure BGP ASN" heading. The "Public IP address has two options: Create new, which is selected, and Use existing. The "Enable active-active mode" heading has two options: Enabled and Disabled, which is selected. The "Configure BGP ASN" heading has two options: Enabled and Disabled, which is selected. [Video description ends]

So I'm going to call this AzureVPN1. [Video description begins] He types AzureVPN1 in the "Name" field. [Video description ends] And I'm going to specify this. It doesn't have to be in the same region, but I'm going to specify, well actually, let's leave it where it is – Canada Central. Let's say, that's where we want to deploy that. This is going to be a VPN type of gateway. It's not going to be used for an ExpressRoute-dedicated connection. And that's why sometimes people will call this object we're configuring not a virtual network gateway but an Azure VPN gateway. So that's really what they're referring to when they say that.
The next item is the VPN type, whether it's Route-based or Policy-based. Notice, the default here is Route-based. So with the route-based VPN type, what we're talking about is the fact that most routers that aren't specifically dedicated VPN appliances would use this type of configuration. And that's because the router can actually be configured with what are called multiple virtual tunnel interfaces. And this is used for VPN connections. And so you can make multiple VPN tunnel interfaces or virtual tunnel interfaces on the router, which allows connectivity to multiple sites.
Then you've got Policy-based. Now this is what was traditionally used with Cisco ASA appliances, which were used for VPN connectivity, among other things. And what it allows is the connectivity for one VPN link to an Azure subnet. So in this case, I'm going to use the more common and default setting of Route-based.
Next, you can choose from the SKU drop-down list. Now as you go up through the list, you start increasing things like the supported bandwidth and also the number of supported Point-to-Site connections and so on. [Video description begins] He shifts to the VPN Gateway Documentation web page. It has an "Overview" category in the navigation pane. The category has an "About VPN Gateway" subcategory, which is selected and which includes a table with the following columns: SKU, P2P IKEv2/OpenVPN Connections, Aggregate Throughput Benchmark, BGP, etc.. Several SKUs appear in the table. [Video description ends]
Here in the Microsoft documentation, we can see the VPN gateway SKUs such as VpnGw1. And we can see here that we start to see changes in the number of Point-to-Site supported connections and the supported throughput and so on and whether Border Gateway Protocol for route sharing, BGP, is supported or not. Next, I have to tie this virtual network gateway or VPN gateway to an Azure VNet.
So I can go through in the drop-down list and I'll select Vnet1. [Video description begins] When he selects the Vnet1 option from the "Virtual network" drop-down list, a "Subnet" drop-down list, which is unavailable and which is set to the GatewaySubnet option, displays below the "Virtual network" drop-down list. [Video description ends]
It knows it's got a gateway subnet. That's why we did that first ahead of time. So that's good. Next thing I have to do is determine whether I want to use an existing or create a new public IP address resource. I'm going to create a new one here. And I'm going to call it AzureVPNSite1_PubIP. We need a public IP address, so it's reachable over the Internet. [Video description begins] He types AzureVPNSite1_PubIP in the "Public IP address name" field. [Video description ends]
For high availability, you can enable active-active mode. And when you do that, down below, you'll be creating a secondary public IP address for connectivity. For true high availability, your on-premises VPN appliance should have two interfaces for this high availability. And each one of those should go through a different Internet service provider for true availability of the network connection in case there's a problem with one provider.
However, I'm not going to do that. So I'm going to disable active-active mode. I'm also going to leave the default of Disabled for configuring Border Gateway Protocol autonomous system numbers. I'm going to click review and create. And this can take a bit of time to create in Azure. So the validation is passed. [Video description begins] He points to the message that the application displays. [Video description ends]
I'm going to go ahead and click the Create button. After a few minutes, the virtual network gateway will be deployed. So then we can click Go to resource because we need to now add the site-to-site connection. [Video description begins] The AzureVPN1 blade that opens includes an Overview category, which is selected, and a "Settings" section in the resource pane. The "Settings" section includes a "Connections" category. [Video description ends]
So to do that, in the properties bar that's opened up, I'm going to click to open the Connections blade. [Video description begins] The AzureVPN1 | Connections blade includes an "Add" button, a "Refresh" button, and an empty table with the following columns: Name, Status, Connection type, etc.. [Video description ends]
We don't have anything listed. So I'm going to click the Add button. Because I want to add a site-to-site link basically linking the local network gateway on-premises to the Azure network gateway in the cloud. [Video description begins] An "Add connection" blade opens. It includes a "Name" field; a "Connection type" drop-down list, which is set to VNet-to-VNet; a "Virtual network gateway" heading (given as AzureVPN1); a "Local network gateway" heading; and a "Shared key (PSK)" field. [Video description ends]
So I'm going to call this Site1VPN. And from the Connection type, it's going to be Site-to-site (IPsec). The Azure virtual network gateway is already selected. So I have to select the local network gateway, which we created previously. It's called On-prem_Site1. [Video description begins] When he clicks the "Local network gateway" heading, a "Choose local network gateway" blade opens. It includes an On-prem_Site1 option. [Video description ends]
So we're going to go ahead and select that. And I'm going to specify a pre-shared key value that would have to be configured on the client-side device to establish the link. And at this point, I'm going to click OK to create site-to-site connection. [Video description begins] The application returns to the AzureVPN1 | Connections blade. [Video description ends] And after a second, we can see our Site1VPN connection has been added. Now the Status is Unknown because it was just created. And we can keep clicking Refresh until such point that it makes a connection to the on-premises VPN appliance.


Azure Virtual WAN
Azure Virtual WAN is a wide-area network solution as the name implies. Now it's a wide-area network solution in the sense that we can interconnect different sites, for example, or VNETs using the Microsoft backbone, which serves as the wide-area network infrastructure. So we can have VPN links, site-to-site links, or point-to-site links to Azure. We can also have connections over dedicated private circuits through ExpressRoute.
Either way, we've got connectivity coming from different locations into the Azure cloud. It could even be within the Azure cloud between VNETs. So it's kind of a hub and spoke type of topology where the hub would be the Azure cloud and its locations around the world where there is network connectivity.
And the spokes are the different types of connection points that we'll discuss further. Spoke types include virtual networks, or VNets, in Azure; Point-to-site VPN connections for individual clients making a connection into Azure; site-to-site VPNs where we've got entire networks that are linked into Azure; and ExpressRoute dedicated circuits.
When you configure Virtual WAN, there were two types. There's Standard and there's Basic. The Standard type supports a number of different types of spokes like point-to-site, or P2S, VPNs; site-to-site, or S2S, VPNs; ExpressRoute; and also even interconnectivity between multiple Virtual WAN hubs. And VNets, of course, can also be connected as part of the Virtual WAN. Now the Basic only supports site-to-site VPN connectivity. Now if you've got Basic configured, then you can upgrade it to Standard. But you can't do the opposite. You can't revert from Standard and go all the way back down to Basic.
Now pictured in our diagram, we see a sample Azure Virtual WAN configuration where we've got two Azure VNets at the top and we've got two branch offices down at the bottom. And those branch offices would be using site-to-site VPN links to Azure. Well, the Azure Virtual WAN hub serves as a central connectivity point to interlink all of these devices.
And again, we can even link multiple Azure Virtual WAN hubs together for even further connectivity. Remember, this is like a wide-area network infrastructure that sits on top of Microsoft's network backbone. So how do I go about configuring this? Well, the first thing to do is to create a Virtual WAN resource in Azure, after which you add a virtual hub to it. Then you add a VPN gateway. And then you start linking your various spokes, whether they're VNets or VPN connections to the centralized hub.


Azure Firewall Overview
Azure Firewall is a managed service. And what that means in the cloud, of course, is that we don't have to set up the underlying infrastructure to support the solution. It's already taken care of for us by the cloud service provider. So Azure Firewall is a managed service, and it's also a stateful firewall. A stateful firewall means that it understands more than just looking at individual packets. It understands sessions such as if we have an inbound allowance to a web server, then the stateful firewall will know, well, I need to make sure I allow the outbound-related traffic out through that firewall.

So you might say, well, a network security group in Azure or NSG is a managed service and it's also a stateful firewall just like Azure Firewall is. So what is the difference? Well, there is a difference. Azure Firewall applies up to Layer 7 of the OSI model, up to the application layer. So beyond IP addresses and port numbers, which is important and which is supported by network security groups, Azure Firewall takes it further and can look at the payload of the transmission, meaning it can look at URLs that people, for example, are trying to connect to.

And so we can build application rules in that example to address that. Azure Firewall, when it's configured, needs a static or unchanging public IP address. And just like the rules in a network security group, the rules in Azure Firewall control traffic flow, either allowing or denying it. You can also configure threat intelligence in conjunction with Azure Firewall. And what it can do is it can look to see if there are any known malicious IP addresses or DNS domains that are involved with transmissions and it can alert on that and even block it.

There are three types of firewall rules with Azure Firewall that you can configure – network rules, which we'll talk about here; application rules; and Network Address Translation, or NAT, rules. We'll talk about each of those three types. Let's start with network rules. So network rules apply up to Layer 4 of the OSI model. So you can deal with TCP, UDP, ICMP, or any of those protocols. You can make decisions on what's allowed or not based on source and destination IP addresses or destination port number. And you can have an Allow or a Deny action. Those are network rules.

Application rules go higher in the OSI model, up to Layer 7, the application layer. It's for outbound connectivity when users are connecting to Fully Qualified Domain Names, FQDNs, such as www.skillsoft.com. So you can use wildcards if you want when you configure application rules. So you could use asterisks as wildcard symbols and specify parts of domain names, such as *.domain.com. [Video description begins] The following information is displayed on screen: Wildcards are allowed, such as *.domain.com or *. [Video description ends]

You can also specify the protocol that would be used, whether it's HTTPS:443 or something different. And of course, you can either allow or deny that type of connection. [Video description begins] The following information is displayed on screen: Protocol:port, such as HTTPS:443. [Video description ends] For example, you might want to deny access to social media sites like Facebook and Twitter. So you can do that with application rules.

Then we have NAT rules of which there are two types. The first is Source Network Address Translation, or SNAT. This means that traffic leaving your virtual network subnets in Azure assume the public IP address of the Azure Firewall. And that's why it needs to have a public IP address.

But then you've got, kind of, the opposite for traffic coming in. You've got Destination Network Address Translation rules, or DNAT rules. So you can use DNAT to translate public IP address and port numbers to private IP addresses and port numbers.Now what does that mean exactly? We'll talk about that in a moment when we have another screenshot. Now when you deploy Azure Firewall into a VNet, you'll be doing that with a subnet called AzureFirewallSubnet.

But let's examine DNAT just a little bit further. So we're looking at a DNAT type of rule here. So we have a rule that's being added to the NAT collection. The name here is Incoming. It's got a priority value of 100. And so the priority value is used to order the rules. So a rule with a priority of 100 gets checked before a rule with the priority of 101. And if there is a match with the traffic for rule, the priority of 100, that's what applies and rule processing stops. So NAT rules, and that's what we're looking out here, these get applied based on the order of the priority value.

Then network rules would go through the same thing and then application rules. So what we have here is we have a rule called Incoming HTTP. So the protocol is TCP and the destination here is 40.80.251.142. That's the public IP address of the Azure Firewall. It's called Destination because that's the destination endpoint that, for example, users think that they're connecting to. Well, really they're connecting to a DNS name, but that name gets resolved to this public IP.

What will happen then is Azure Firewall will say, okay, someone is connecting to that IP – port 80 in this case. I'm going to forward that inside of Azure to a translated IP address of 10.1.1.1 on port 80. So it's a way that we could publish or make available a web application while hiding its true internal address.

[Video description begins] A screenshot of an application displays. It includes the following fields: Name (given as Incoming) and Priority (given as 100). The screenshot also includes a "Rules" section, which contains a table with the following columns: NAME, PROTOCOL, SOURCE ADDRESSES, DESTINATION ADDRESSES, DESTINATION PORTS, TRANSLATED ADDRESS, and TRANSLATED PORT. A couple of rules appear in the table. These include Incoming HTTP with PROTOCOL listed as TCP, SOURCE ADDRESSES listed as *, DESTINATION ADDRESSES listed as 40.80.251.142, DESTINATION PORTS listed as 80, TRANSLATED ADDRESS listed as 10.1.1.1, and TRANSLATED PORT listed as 80. [Video description ends]


Deploying Azure Firewall
In this demo, I'm going to use the portal to configure Azure Firewall. Now Azure Firewall is its own separate type of Azure resource. And so to get started with it here in the portal, I'm going to click Create a resource. And I'm going to search for Firewall. [Video description begins] Azure Home is open. It includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, All resources, Virtual networks, etc.. With the presenter clicking the "Create a resource" option, the "New" blade that opens includes a Search box. [Video description ends]

And we see Firewall in the list. So I'm going to click on that. Then I'll choose Create. [Video description begins] The "Firewall" blade that opens includes a "Create" button. [Video description ends] I'm going to deploy this into an existing resource group. [Video description begins] A "Create a firewall" blade opens. It includes a "Subscription" drop-down list that has an associated "Resource group" drop-down list. It also contains an "Instance details" section. The section includes a "Name" field; a "Region" drop-down list, which is set to (Canada) Canada Central; a "Choose a virtual network" heading; a "Virtual network name" field; an "Address space" field; and a "Subnet" heading. The "Choose a virtual network" heading has two options: Create new, which is selected, and Use existing. [Video description ends]

And I'm going to call this AzureFW1, Azure Firewall 1. [Video description begins] After selecting the Rg1 option from the "Resource group" drop-down list, he types AzureFW1 in the "Name" field. [Video description ends] I'll deploy it in the Canada Central region. And I have to specify a virtual network I want this applied to.

I'm going to use an existing one. [Video description begins] When he selects the "Use existing" option that displays against the "Choose a virtual network" heading, a "Virtual" network" drop-down list, a "Firewall public IP address" drop-down list, and a "Forced tunneling (preview)" heading replace the "Virtual network name" field, the "Address space" field, and the "Subnet" heading. [Video description ends]

From the list, I'll choose Vnet1. Now notice, it says this virtual network needs to have a subnet named [Video description begins] He selects the Vnet1 (Rg1) option from the "Virtual network" drop-down list. [Video description ends] AzureFirewallSubnet. We don't have that. So let's go back and let's build a subnet with that name in Vnet1. So to get started with that, I'm going to go ahead and right-click and duplicate our web browser tab up at the top. [Video description begins] Azure Home opens in the new web browser tab. [Video description ends]

So we're going to navigate to Virtual networks. [Video description begins] When he selects the "Virtual networks" option, the corresponding blade that opens includes a table with the following columns: Name, Resource group, location, etc.. Four record links, including Vnet1, appear in the table. [Video description ends]

And I'm going to be opening up Vnet1 where we can then see the subnets within that virtual network. [Video description begins] The Vnet1 blade includes an "Overview" category, which is selected, and a "Settings" section in the resource menu. The "Settings" section includes a "Subnets" category. He clicks the category, and the corresponding blade that opens includes a "Subnet" button and a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Three subnets appear in the table. [Video description ends] We can see we've got Subnet1, Subnet2. We have a GatewaySubnet, but we don't have an Azure Firewall subnet.

So I'm going to click add a Subnet. And I'm going to specify that it's going to be called AzureFirewallSubnet. [Video description begins] An "Add subnet" pane appears. It includes the following fields: Name and Address range (CIDR block) (given as 10.0.3.0/24). He types AzureFirewallSubnet in the "Name" field. [Video description ends] And I'm going to specify that it's 10.0.3.0/24 44-bit subnet mask. And that's it. That's all I need to do. So I'm going to go ahead and click OK. We'll just give it a moment to add that subnet. And we can now see that it exists in the list for Vnet1.

So let's go back to where we were creating the firewall. Let's just back out. We know we're not going to save our settings – they were wrong anyways. I'll click Create. [Video description begins] He returns to the first web browser tab and clicks the "Firewall" link in the breadcrumb navigation to return to the corresponding blade. [Video description ends]

And let's step through this again. So I'll just deploy this into the same resource group and basically do the same stuff I just did previously. The difference is this time we've got the correct subnet. So Rg1. We're going to call it AzureFW1, like I did previously with the firewall. It's going to be in Canada Central. And I'm going to use an existing VNet. Let's choose that from the list. This time we don't have the message about Azure Firewall subnet because we created it.

Next thing you have to do is specify a public IP address. Azure Firewall needs to have a static public IP. Now I don't have one that I can select that's not already in use. So I'm going to go ahead and click Add new to make a new one. And I'm going to call it AzureFW1PubIP. [Video description begins] When he clicks the "Add new" link associated with and which displays below the "Firewall public IP address" drop-down list, an "Add a public IP" dialog box appears. It includes a "Name" field and an "Assignment" heading. The heading has two options: Dynamic and Static. [Video description ends]

And I will choose OK. Notice, the assignment, of course, is going to be static. It needs to be static. Okay, so now we've got the public IP address for the firewall. Perfect. So I'm going to go ahead and click review and create in the bottom left. And after the validation has passed, I will then click Create to actually create the Azure Firewall resource. Before too long, we can see that the deployment is complete.

So I'm going to click Go to resource. Because what we want to do is take note of the private IP address. [Video description begins] The AzureFW1 blade that opens includes an "Overview" category in the resource pane. The category is selected and includes a "Firewall public IP" heading and a "Firewall private IP" heading. [Video description ends]

Now we know it's got a public IP, but we're interested in the private IP address of the firewall, which I'm going to copy. Because we need to make a routing table entry for the subnets where we want to route traffic through the firewall, for example, on the way out to the Internet. So I've just copied the private IP of it. [Video description begins] He clicks the "Copy to clipboard" icon associated with the Firewall private IP address. [Video description ends]

So what I want to do then is go back, let's see, into our virtual network list. [Video description begins] He returns to Azure Home and selects the "Virtual networks" option. [Video description ends] And I'm interested in Vnet1. And in particular, I'm interested in making sure that resources like virtual machines on Subnet1 – so let's go to Subnets – send their traffic out through that firewall. So Subnet1. It means we have to look at the route table entries related to Subnet1. So what is it configured with? Well, it's not configured with any routing table.

Okay, so what I want to do then is get a routing table created so that we can link Subnet1 to it. [Video description begins] When he selects the "Subnet1" record in the table in the Vnet1 | Subnets blade, the corresponding blade opens. It includes a "Route table" drop-down list, which contains only a "None" option. [Video description ends]

So I'm going to go home. I'm going to click Create a resource. And as you might guess, I'm going to create a route table. [Video description begins] He types "route" in the Search box in the "New" blade, and "Route table" is among the results that display. [Video description ends] There it is – Route table. And let's go ahead and click Create. We're going to add a route within the route table. So let's call this RouteTable1. And let's deploy it into a resource group.

As I was saying, we're going to create a route in the route table for 0.0.0.0/0. That's the default route for IPv4. So we want to funnel all traffic in Subnet1 out through the firewall on its way out to the Internet. [Video description begins] A "Create route table" blade that opens includes a "Name" field and a "Resource group" drop-down list. And after typing RouteTable1 in the "Name" field and selecting an Rg1 option from the "Resource group" drop-down list, he clicks the "Create" button. [Video description ends]

So we'll be able to do that once the route table resource is created here. [Video description begins] A pop-up, which appears, includes a "Deployment succeeded" message and a "Go to resource" button. [Video description ends] And it's done. So deployment succeeded. I'll click Go to resource to open up the route table. [Video description begins] The RouteTable1 blade includes an "Overview" category, which is selected, and a "Settings" section in the resource pane. The "Settings" section includes a "Routes" category. [Video description ends]

And naturally, we want to create a route entry. So I'm going to click Routes over on the left. And we're going to click the Add button. And we have to fill out a few details here such as the name – so SendToAzureFirewall. The address prefix here is going to be 0.0.0.0/0. [Video description begins] An "Add route" blade opens. It contains a "Route name" field, an "Address prefix" field, and a "Next hop type" drop-down list, which is set to Virtual network gateway. [Video description ends]

So that's the default route for IPv4. The next hop is going to be a virtual appliance. And this is where I'm going to paste in the private IP address of the Azure Firewall. And I'll click OK. And it's done. [Video description begins] When he selects the "Virtual appliance" option from the "Next hop type" drop-down list, a "Next hop address" field appears below the drop-down list. And when he pastes the Firewall private IP address in the field and clicks the "OK" button, a pop-up appears. It includes the message: Adding route. [Video description ends]

So at this point, we've got Azure Firewall configured. So let's go back and check that out and we'll go home here. There's Azure Firewall 1. [Video description begins] After returning to Azure Home, when he clicks the AzureFW1 resource link that displays in a table in the "Recent resources" section, the corresponding blade that opens includes an "Overview" category, which is selected, and a "Settings" section in the resource menu. The "Settings" section includes a "Rules" category. [Video description ends]

Now we're not going to configure them right now. But notice that what we can do is go into Rules where we can create and manage NAT rules, network rules, and application rules. [Video description begins] The AzureFW1 | Rules blade includes the following tabs: NAT rule collection, Network rule collection, and Application rule collection. [Video description ends]


Azure Firewall Application Rules
There are three types of rules that you can configure within Azure Firewall. [Video description begins] An AzureFW1 blade is open. It includes an "Overview" category and a "Settings" section in the resource menu. The "Settings" section includes a "Rules" category. The "Overview" category, which is selected, includes a "Firewall private IP" heading with an IP address displaying against the same. [Video description ends] So here in the portal, I'm in an Azure Firewall configuration.

I'm going to click Rules over on the left, open up the Rules blade. [Video description begins] The AzureFW1 | Rules blade includes a "Refresh" button and three tabs: NAT rule collection, Network rule collection, and Application rule collection. Currently, the "NAT rule collection" tab is selected. [Video description ends]

The three rule types are NAT rules, whether they are NAT rules to allow outbound traffic while assuming the public IP of the firewall or allowing inbound traffic through a public IP address and port translated to an internal IP address and port; network rules, which is the same type of thing you would find with network security groups – so based on protocols like TCP, source and destination IP addresses, and port numbers; and what we're going to focus on here, an application rule.

And this is what makes Azure Firewall or part of what makes it Layer 7 in terms of the OSI model. Because it has the ability to examine not just the packet headers where you'd find things like IP addresses and port numbers, but it can go into the payload and look at the URLs. So we're going to build an application rule here that blocks access to Facebook. [Video description begins] The presenter selects the "Application rule collection" tab. It includes an "Add application rule collection" link and an empty table with the following columns: Priority, Name, Action, and Rules. [Video description ends]

So to do that, I'm going to click Add application rule collection. And we're going to have to configure this accordingly for the appropriate port number and protocol and DNS domain name. [Video description begins] The "Add application rule collection" pane that appears includes a "Name" field; a "Priority" field; an "Action" drop-down list, which is set to Allow; and a Target FQDNs section. The Target FQDNs section contains a table with the following columns: name, Source type, Source, Protocol:Port, and Target FQDNs. A field each displays in the following columns: name, Source type, Protocol:Port, and Target FQDNs. A drop-down list, which is set to IP addresses displays in the "Source type" column. [Video description ends]

So I'm going to call this BlockSocialMedia. That's the name of the collection. We can have individual rules to block different types. For the Priority value, I'll put in 100. And I want to Deny. And down here under Target FQDNS, this is going to say Block Facebook. That's what this first one will be. [Video description begins] After selecting the "Deny" option from the "Action" drop-down list, he types "Block Facebook" in the field that displays in the "name" column of the table in the Target FQDNs section. [Video description ends]

So doesn't matter where the client request is coming from. So the Source is going to be *, anywhere. But the protocol and port will be https:/443 for Facebook. So I know that's what uses that. [Video description begins] He types an asterisk and https://443 in the "Source" column field and the "Protocol:Port" column field, respectively. [Video description ends]

And the other thing I want to specify here is the Target FQDN, which I'm going to specify as *.facebook.com. So anything in facebook.com. Now I notice my Protocol:Port field is outlined in red. That's my fault. There needs to be no slashes there. And let's just, okay, there we go. [Video description begins] He deletes the two forward slashes in https://443. [Video description ends] Now we have the green check mark. So just a little syntax error. It's all good now.

So let's go ahead and add this application rule. [Video description begins] He clicks the "Add" button in the pane. [Video description ends] After a moment, if you click Refresh, you'll see that you have your new application rule that would be listed here. In our case, we are denying access to, specifically, Facebook. [Video description begins] The BlockSocialMedia rule link with Action listed as "Deny" now appears in the table in the "Application rule collection" tab. [Video description ends]

Now in order for this to work or if you're wondering who will be affected by this, you need to think about routing tables. So the next thing I'll do here in the portal is create a route table in the same region as a VNet, where I've got subnets that I want to use the route table.

[Video description begins] He shifts to Azure Home. It includes the following sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual networks, All resources, etc.. The "Recent resources" section has a table with the following columns: Name, Type, and Last Viewed. Several resource links, including AzureFW1, appear in the table. He selects the "Create a resource" option, and a "New" blade opens. It includes a Search box. [Video description ends]

So I'm going to search for route table. And what I want to do is create a route table in, in this case, the Canada Central region. [Video description begins] When he types "route table" in the Search box, the search results contain a single option: Route table. He selects the same, and the corresponding blade opens. It includes a "Create" button. And when he clicks the button, a "Create route table" blade opens. It includes a "Name" field, a "Resource group" drop-down list, and a "Location" drop-down list, which is set to (Canada) Canada East. [Video description ends]

So I'm going to call this RouteTable2. I'll deploy it into an existing resource group. [Video description begins] After typing RouteTable2 in the "Name" field, he selects Rg1 from the "Resource group" drop-down list. [Video description ends] And I want to make sure that I place this in Canada Central. So I'll select that region and I'll click Create.

Now while that's happening, let's go and take a look at our Azure Firewall again. Because in the Overview blade, I need to copy the private IP address of the firewall because I need to make a route to it. [Video description begins] He returns to Azure Home and clicks the AzureFW1 resource link in the table in the "Recent resources" section. And when the corresponding blade opens, he clicks the "Copy to clipboard" icon associated with the Firewall private IP address. [Video description ends]
So in my notification icon here, I'm just going to go to my resource for my newly created route table, RouteTable2, got to go to Routes. And I'm going to add a route. Now we want to make sure that traffic is forced through Azure Firewall, such as outbound traffic from my VNet subnet before it goes out to the Internet.
So I'm going to call this route AzureFirewall. And I want it to capture all traffic. So the default route is referenced with 0.0.0.0/0. [Video description begins] After typing AzureFirewall in the "Route name" field, he types 0.0.0.0/0 in the "Address prefix" field. [Video description ends] The next hop type will be a virtual appliance. We'll just pop in the private IP address of our Azure Firewall. [Video description begins] When he selects the "Virtual appliance" option from the "Next hop type" drop-down list, a "Next hop address" field appears below the list. He pastes the previously copied Firewall private IP address in the field. [Video description ends]
And I'll click OK. So let's go into our Virtual networks. And I'm interested particularly in one called Vnet1. Because it has a subnet called Subnet1 and I want it to be affected by our route. In other words, I want to force all traffic going to the Internet to be funneled through our firewall first. And that's for a particular subnet.
So I'm going to click Subnets. And it's going to be Subnet1 in my case. And what I'm going to do when I open up the properties of Subnet1 is associate it with the route table that we just created. So that's called RouteTable2. [Video description begins] The Vnet1 | Subnets blade includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Four subnets, including Subnet1, appear in the table. And when he clicks the "Subnet1" record, the corresponding blade that opens includes a "Save" button and a "Route table" drop-down list, which is set to None. He selects RouteTable2 from the "Route table" drop-down list. [Video description ends]
And it's done. So now I'll click Save. So now resources on Subnet1 and Vnet1 have their traffic sent to the Azure Firewall for inspection.


Azure Bastion Overview
Azure Bastion is a solution that allows remote management of Azure virtual machines, whether you're connecting through SSH for Linux VMs or through RDP for Windows VMs. You can consider this a platform as a service or a PaaS type of solution. We say this because it's not infrastructure as a service. You are manually deploying a virtual machine and configuring it. It is using a VM, but the provisioning of it is taken care of for you by this feature.

So the purpose of this is to limit VM visibility. What does that mean? Well, the Bastion host gets associated with an Azure VNet. So you need to have a subnet in that VNet called Azure Bastion subnet with at least a /27 subnet mask prefix. Now what happens then is you have a public IP address associated with the Bastion host. And that's great. You need that kind of connectivity.

Although, when you actually make the Bastion connection for management to Linux or Windows VMs, you do that straight through the portal. And it will have a connection on the private network side, and that means that your VMs only need a private IP address, not a public one. So thus you are not exposing them directly to the Internet.

Pictured in our diagram, we get a sequence of steps visually where on the left, we as the administrator in Azure, would make sure that we are authenticated to the Azure portal. When you're in the portal, you navigate to the virtual machine that you want to remotely manage, whether it's Linux or Windows based. And you pull up the connect blade as you normally would if you wanted to view connection options for SSH or RDP.

And you would select the Bastion option. Now what that will do is then provide you the ability to give credentials to authenticate to that VM. You'd put in credentials, for example, on the Windows side for the target Windows VM. These are not credentials for Bastion. By virtue of you being logged into the portal, you already are authenticated. So you don't put in credentials for Bastion – that's not required. It's for the target endpoint you're trying to manage.

And so according to our diagram, the connection via private IPs would then occur, whether it's to a Linux VM over SSH or to a Windows VM using RDP. The benefit is you don't need each and every VM to be exposed to the Internet via a public IP address. That is not a great suggestion when it comes to security. Instead, they should only be available as in this case through the Bastion host which is really acting as a jump-box.


Deploying Azure Bastion
Instead of exposing each Azure virtual machine to the Internet with a public IP address, for management purposes, you can instead deploy an Azure Bastion host. So a Bastion host, essentially, is the jump-box point through which you connect to, in the end, manage your Azure VMs. And those Azure VMs would only have a private IP address.
And I'm going to name it AzureBastionSubnet, all one word. [Video description begins] An "Add subnet" pane appears. It includes two fields: Name and Address range (CIDR block) (given as 10.0.4.0/24). [Video description ends] And after that, I'm going to make sure that I have at least a /27 subnet mask prefix. So I'm going to leave what it suggests here, 10.0.4.0. I can see the other address ranges used in the background here by the other subnets. So this one is logical. I'm going to go with that and I'm going to click OK.

So it's important you do this first. Otherwise, when you go to create the configuration for Azure Bastion, you're going to get an error message. Because it needs to see that subnet name. Now we can get down to business. [Video description begins] The AzureBastionSubnet subnet now appears in the table in the Vnet1 | Subnets blade. [Video description ends]

Let's go home here. I'm going to create a resource here in the portal. [Video description begins] He clicks the "Home" link in the breadcrumb navigation and shifts to Azure Home. It includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual networks, All resources, etc.. He clicks the "Create a resource" option, and a "New" blade opens. The blade includes a Search box. [Video description ends]

I'm just going to search for Bastion and I'll select it. And then I'll click on Create. [Video description begins] The "Bastion" blade includes a "Create" button. When he clicks the button, a "Create a Bastion" blade opens. It includes three steps: Basics, Tags, and Review + create. Currently, Basics is selected. It contains four sections: Project details, Instance details, Configure virtual networks, and Public IP address. The "Project details" section has a "Subscription" drop-down list and an associated "Resource group" drop-down list. The "Instance details" section has a "Name" field and a "Region" drop-down list, which is set to westcentralus. The "Configure virtual networks" section contains a "Virtual network" drop-down list. The "Public IP address" section contains the headings: Public IP address, Public IP address name, and Public IP address SKU. The "Public IP address" heading contains two options: Create new, which is selected, and Use existing. [Video description ends]

So I'm going to deploy this into a resource group called Rg1. [Video description begins] He selects the Rg1 option from the "Resource group" drop-down list. [Video description ends] I'm going to call this Bastion1. I'm going to put this in the region that makes sense for my deployment; in this case, Canada Central just because that's where a lot of my VMs are deployed.

I'm going to tie this to Vnet1. And this is where it checks, as you can see here, for AzureBastionSubnet. Otherwise, it would prompt us with an error message and tell us we had to go back and make them. [Video description begins] When he selects the Vnet1 option from the "Virtual network" drop-down list, a "Subnet" drop-down list, which is set to AzureBastionSubnet (10.0.4.0/27), appears below the "Virtual network" list. [Video description ends]

So I'm going to let it create a new public IP address for this. But I'm going to call it BastionPubIP. And that's it. That's all we're going to do. So I'm going to click review and create, make sure it passes validation, which it does. And I'll click Create. [Video description begins] He points to the message that the application displays. [Video description ends] After a moment, the deployment will be complete. [Video description begins] A blade that opens includes a "Your deployment is complete" message and a "Go to resource" button. [Video description ends]

So let's take a look at it. Let's click the Go to resource button. That will take us into the properties of our new deployment of Azure Bastion. So let's just take a peek. We can see here that it's got a public IP address in the Overview blade. [Video description begins] The Bastion1 blade that opens includes an "Overview" category in the resource menu. The category is selected. [Video description ends] You can see that on the right. That's been assigned. We specified that when we deployed it.

So now to connect to a virtual machine through Bastion, I need to go to the virtual machine here in the portal. I'm going to go to my Virtual machines view. I'm going to click on a Windows virtual machine that's currently up and running. [Video description begins] He returns to Azure Home and selects the "Virtual machines" option. The corresponding blade that opens includes a table with the following columns: Name, Type, Status, etc.. The following item links appear in the table: Ubuntu-1 and WinSrv2019-1. When he clicks the WinSrv2019-1 link, the corresponding blade that opens includes an "Overview" category and a "Settings" section in the resource menu. The "Overview" category is selected. The "Settings" section includes a "Connect" category. [Video description ends]

And I'm going to click on Connect. Now when the Connect blade opens up, you'll see some of the normal connection options such as RDP and SSH. And of course, we want to focus on the BASTION option. [Video description begins] The WinSrv2019-1 | Connect blade has three tabs: RDP, SSH, and BASTION. Currently, RDP is selected. When he selects the BASTION tab, the corresponding view includes the fields: Username and Password. [Video description ends]

When I click on it, it'll retrieve information about the Bastion configuration for this VNet. And at this point, all I have to do is supply a username and password, which I will do. These credentials are for the target virtual machine you're trying to manage, not for Bastion. So let's go ahead and click Connect. Depending on your browser config, it might block the connection. I'm going to choose Always allow. And we can see it's opened up a new web browser tab in which it will present me with my remote desktop connection to that virtual machine, the benefit of which is that that virtual machine doesn't need a public IP address.

We can do the same type of thing for Linux. So if I go back to my virtual machine list, I've got a Linux virtual machine. And we would go through the exact same motions. [Video description begins] After returning to the WinSrv2019-1 | Connect blade, he shifts back to the "Virtual machines" blade and clicks the Ubuntu-1 item link. [Video description ends] We would select that host and go to Connect. So we can see when we click on Connect, we have the option of using a Bastion connection by clicking the button. [Video description begins] The BASTION tab includes a "Use Bastion" button. [Video description ends]


Virtual WAN Configuration
In this demonstration, I'm going to configure an Azure Virtual WAN resource here using the portal. [Video description begins] Azure Home is open. It includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, All resources, Virtual machines, etc.. The "Recent resources" section contains a table with the following columns: Name, Type,and Last Viewed. Several resource links appear in the table. [Video description ends]

So to get started, I'll click Create a resource. And I'm going to search for Virtual WAN. I'll select that from the list. And then I'll click on Create. [Video description begins] A "New" blade that opens includes a Search box. When the presenter types "virtual wan" in it and selects "Virtual WAN" from the search results, the corresponding blade that opens includes a "Create" button, which he clicks. [Video description ends]

I'll deploy this Virtual WAN resource into an existing resource group. [Video description begins] A "Create WAN" blade that opens contains two steps in the navigation pane: Basics and Review + create. Currently, Basics is selected. It contains two sections: Project details and Virtual WAN details. The "Project details" section contains a "Subscription" drop-down list, which has an associated "Resource group" drop-down list. The "Virtual WAN details" section contains a "Resource group location" drop-down list, a "Name" field, and a "Type" drop-down list. He selects an option from the "Resource group" drop-down list. [Video description ends]

And I'm going to deploy this in, let's see. Let's find Canada Central to deploy it in that region. [Video description begins] He selects a "(Canada) Canada Central" option from the "Resource group location" drop-down list. [Video description ends] And then I'm going to call this VWAN1. Currently, the Type is set to Standard. We can also choose Basic. Basic supports site-to-site VPN connectivity through a hub you configure in the Virtual WAN.

If you need additional connectivity such as for VNets or point-to-site VPNs or ExpressRoute, then you should be using Standard. I'm just going to leave it on Standard here. And I'll click review and create. It passes the validation. [Video description begins] He points to the message that the application displays. [Video description ends]

And so let's get this created by clicking the Create button. And after a moment, the deployment is complete. So I'm going to click Go to resource. What I want to do here is go down under the Connectivity section and click on Hubs. Notice, in our geographical map, it says, Each point represents a hub. But we don't have any hubs declared or defined here yet.

[Video description begins] The VWAN1 blade that opens includes an "Overview" category and a "Connectivity" section in the resource menu. The "Connectivity" section contains the following categories: Hubs, VPN sites, User VPN configurations, ExpressRoute circuits, and Virtual network connections. Currently, the "Overview" category is selected. It includes a world map and an empty table with the following columns: Hub, Hub status, Address Space, etc.. [Video description ends]

So I'm going to go ahead and click on Hubs over on the left. And I'm going to click the New Hub button. So I'm going to deploy this in the Canada Central region. It's going to be called VWANHub1. And then I have to specify the hub private address space. [Video description begins] The VWAN1 | Hubs blade includes a "New Hub" button and an empty table with the following columns: Hub, Hub status, Region, etc.. When he clicks the "New Hub" button, a "Create virtual hub" blade opens. It includes a "Virtual Hub Details" section. The section contains a "Region" drop-down list, which is set to (Canada) Canada Central; a "Name" field; and a "Hub private address space" field. [Video description ends]

You just need to make sure it doesn't overlap with any of your on-premises network ranges or your VNet ranges in Azure. So I'm going to put in 15.0.1.0/24 bits in the subnet mask. And it likes that. So there's a note down here that says creating the hub with the gateway will take up to 30 minutes. Not a problem. I'm going to click review and create. And now that the validation has passed, I'll click the Create button. So now it's being created. [Video description begins] A VirtualHubDeployment | Overview blade that opens includes a "Your deployment is complete" message and a "Go to resource" button [Video description ends]

Now the deployment is complete. Okay, let's click Go to resource. So we're still in our Virtual WAN hub. Looking at the details, it's been deployed. Let's go back and take a look at our Virtual WAN, VWAN1. What I want to do in here is just take note here that in the Overview blade we now have a point on the map. And it's approximately the Canada Central region where it was deployed. It's our VWANHub1. We can see it's now listed down below with its address space.

[Video description begins] He returns to Azure Home and clicks the VWAN1 resource link that now appears in the table in the "Recent resources" section. The VWANHub1 link with Address Space listed as 15.0.1.0/24 and Region listed as Canada Central now appears in the table in the "Overview" category of the corresponding blade. [Video description ends]

So because we selected to create a Standard type of virtual WAN config, then in the navigator bar, under Connectivity, we can create configurations for VPN sites; for user VPN configs, in other words, point-to-site; ExpressRoute circuits; or even VNets. All of these types of items can centrally feed into the VWAN hub that we've defined for Virtual WAN configurations. Now if I were, let's say, to go to VPN sites, I want to configure a site-to-site VPN directly into my Virtual WAN. [Video description begins] The VWAN1 | VPN sites blade includes a "Create site" button. [Video description ends]

When I go to create the site, that's when I get the configuration options available. And there's an important note to be made about doing that. And it is in the sense that when you go down, you have to tie it or connect it to a hub – so a Virtual WAN hub, which we've defined.

[Video description begins] When he clicks the "Create site" button, a "Create VPN site" pane appears. It contains three steps in the navigation pane: Basics, Links, and Review + create. Currently, Basics is selected. It includes the sections: Instance details and Connect to. The "Instance details" section includes a "Region" drop-down list, which is set to (US) West Central US. The "Connect to" section has a "Hubs" drop-down list, which features an associated helper tip. [Video description ends]

But in the drop-down list, it says, No available items. Even if I change the region up here to the region where I know that was deployed, the hub was deployed to Canada Central – we saw that. Well, despite the fact that I might select that and then click in a different field to refresh the screen, when I go down to Hubs, it's still not there.

And the reason is because, and you'll see this by the way, use these little helper tips. If you hover over the helper tip, the information icon next to Hubs says the site can only be connected if you've got a VPN gateway in the hub. If you don't see the hub, go create a VPN gateway in the hub first.

So what that means is that we go into my hub over on the left. There's our hub definition. We saw it was plotted on the map. [Video description begins] He selects the "Hubs" category in the VWAN1 | Hubs blade. The corresponding blade that opens now contains a VWANHub1 link in the table. And when he clicks the link, the corresponding blade that opens has an "Overview" category and a "Connectivity" section in the resource menu. The "Connectivity" section contains the following categories: VPN (Site to site), ExpressRoute, User VPN (Point to site), etc.. Currently, the "Overview" category is selected. [Video description ends]

And then you would go to VPN (Site to site) over here on the left. And what it should do is give us, yes, an instruction to create the VPN gateway. [Video description begins] The VWANHub1 | VPN (Site to site) blade includes a "Create VPN gateway" button. [Video description ends]

So we would go through that configuration. So there's a bit of configuration depending on the type of network item that you want to link into your virtual hub in your Virtual WAN, whether it be point-to-site or, as we're seeing here, site-to-site, an ExpressRoute circuit, or Azure VNets. [Video description begins] He clicks the "Create VPN gateway" button, and the corresponding pane appears. [Video description ends]

So let's just close out of this for a second here. Let's go back into our Virtual WAN device. And let's say that we wanted to link a virtual network, making a virtual network connection into that. [Video description begins] He returns to the VWAN1 blade and selects the "Virtual network connections" category. The corresponding blade that opens includes an "Add connection" button. [Video description ends]

So from here, we could add a connection and go to through the configuration  to link our VNet directly into our VWAN virtual hub. [Video description begins] He clicks the "Add connection" button, and the corresponding pane appears. It includes a "Hubs" drop-down list. He selects the VWANHub1 option from the drop-down list. [Video description ends]                    


High Availability Overview
Business continuity means ensuring that business functions continue to operate correctly in the event of a disruption, or we can either do that or try to minimize the impact of disruptions. This is where disaster recovery planning or DRP comes in. There are a couple of terms that we should be aware of, like the recovery time objective, the RTO, and the recovery point objective, the RPO. The RTO really references the maximum tolerance for downtime.

The idea is that we want to bring systems back online as quickly as possible. Or, in the case of data recovery, we want to recover data as quickly as possible so it can continue to be used. So really, we're talking about the amount of time it takes to even move operations to an alternative site.

Now, in the case of Azure, it might be your secondary alternative site if your primary site, if that's on- premises, let's say, becomes unavailable for some region. The recovery point objective of the RPO is the maximum tolerance for data loss. Like the RTO, it's measured in time. So really it deals with how often backups should be taken. So think about what's important and what's not, such as finance servers versus file servers that contain documentation.

Naturally documentation would be easily replaced, but the data on finance servers might be a little trickier to replace, especially if you haven't taken a recent backup. So if the RPO is two hours, that means you'd have to be configuring backups, in our example for finance servers, to be taken at least once every two hours to be compliant with the RPO. A Disaster Recovery Plan document deals with things such as the recovery objective, such as bringing a failed system online as quickly as possible, and the scope to which it would apply. Does it apply to one system or a collection of systems?

Then you have to have a Disaster Recovery Plan team member list with the responsibilities. People in the team need to know what they are responsible for, what their role is. There should be contact information in case an issue comes up that can't be resolved and it needs to be escalated. Such as even to Azure support, depending on the type of Azure subscription you might have. The Incident Response Plan or the IRP is one of those types of things you need to plan for ahead of time before incidents occur, such as security breaches.

Now, if we don't have an incident response plan in place, with team members that know their roles when incidents occur, then, there could be negative financial impacts, It could result in reputation loss for the organization, it could cause a problem with business partnerships, and so on. So there needs to be an annual review at minimum to keep up with changing threats to make sure that the IRP is relevant and it's effective in reducing the impact of negative incidents when they occur.

Now, another aspect of disaster recovery, and ultimately business continuity, is Azure availability zones, or AZs. This is one or more data centers that are contained within an Azure region. So, for example here we've got two availability zones, on the left, AZ 1, on the right, AZ 2. [Video description begins] The host uses an example with two diagrams. The first diagram contains one building while the other one contains three. [Video description ends] The diagrams imply that AZ 1 in this example has one Azure data center but AZ 2 has three of them.

So what we can do when we deploy some Azure services, not all, is, we can configure them to be spread out across availability zones to increase availability. And you can even replicate data between availability zones. So availability zones provide high availability, it's one or more data centers and there's also this notion of fault domains and update domains. Now, if you were to create virtual machines across availability zones, then the virtual machines would be distributed across fault domains and update domains. Fault domains in Azure refer to the equipment within a rack in an Azure data center.

Now, multiple fault domains means that we have different sets of equipment with different network switches and power sources, and increases availability in case we have a physical hypervisor running our VM that fails due to a network switch problem. Update domains are used for rolling updates, so when Microsoft updates the underlying infrastructure in their data centers, at least one of your virtual machines will always be running, such as when you spread out multiple VMs across availability zones.


VM Scale Sets
Now, a virtual machine scale set is used when you want to enable scaling for a workload. [Video description begins] The host is at the "Basics" tab of the "Create a virtual machine scale set" page where there is a template to be filled in with the Project details. [Video description ends] And so the first thing we'll do here is deploy this into an existing resource group. [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] I have to give a name to the scale set, I'm going to call it "vmssapp1" and I'll use the standard nomenclature that's acceptable in my organization for naming resources.
For "Region" I'm going to put this in Canada, so let's say I'll put this in Canada Central, and I can select from some standard Windows and Linux based virtual machine images. But of course, you can also choose from private images if you've created one, and normally, you would create a private image because you would load your custom app, or commercial off the shelf app software and configuration settings within an image and use that here.
Of course, after the fact you can load software, settings and files into VMs in the scale set that you wish. You can do it after the fact, too. So in this case, I'm going to go ahead and choose "Windows Server 2016 Datacenter", assuming I know my app needs that platform. You can also opt to use spot instances for cost savings. Remember that in Azure, spot instances are essentially extra Azure VM capacity that's available for you at a discount, but it's not guaranteed. So you wouldn't use it for anything mission critical or anything like that, because it could go away. But it's great for things like batch processing.
In this case, I don't want to use a spot instance. I can specify the sizing, the underlying horsepower for each VM. And because I'm using Windows I'll have to specify an administrator name and password. [Video description begins] The Administrator account details are displayed, including fields for the "Username", the "Password" and a third one to "Confirm password". The host fills them in. [Video description ends]
So this is going to be for the admin accounts within each VM, which is given a running Windows Server 2016 Datacenter in my case. I don't have server licenses, so I'm just going to leave that on "No" [Video description begins] There is a Save money section with an offer to "Save up to 49% with a license you already own using Azure Hybrid Benefit" and a hyperlink to “Learn more”. [Video description ends] and I'll click "Next" for our disks. So for each VM in the scale set we can determine if we want additional data disks and that might be required depending on the nature of your workload.
And down below, it has a NIC configuration, a Network Interface Configuration that will be used for VMs, I can click the little pencil to edit it. So we can see in the network interface config, we have a subnet affiliation and also a network security group. Now, we could go into "Advanced" and specify the network security group info, but I'm going to leave it on "Basic". It's probably a better idea to use a network security group in this case because you've got a bunch of VMs that are going to support a workload. Probably better to have the network security group associated with the subnet to control in and outbound traffic flow.
So I'm not going to have any public inbound ports. I'm going to leave that as it is, I'll click "OK", and we could also add multiple NICs here, depending on the VM size that was selected. But in this case, I'll leave it on just the single NIC. Not going to use a load balancer at this point, so I'm going to click "Next" for Scaling, because it is a scale set. [Video description begins] The host is now on the "Scaling" tab. [Video description ends]
So the initial instance count here is going to be set to "2". We could use a manual scaling policy or we could click on "Custom". [Video description begins] When the host chooses the "Custom" option in the Scaling section, more fields appear below it. [Video description ends] So perhaps after the CPU is busy, so let's say beyond 75% overall, or ten minutes, we want to increase by one VM at a time, up to a maximum of, let's say here, I'll reduce it from 10 down to 4. You might have to tweak the settings to accommodate the workload and the peaks and troughs, and requests for that workload.
At this point we can also specify what will trigger scaling in. Scaling out horizontally means adding virtual machine nodes to support a workload. Scaling in is the opposite, it means things are slowing down and you want to remove virtual machine nodes, which saves on costs. So when we get to 25%, we could change that value, we'll start decreasing by one VM.
That being done, below I'm just going to go ahead and click "Next" for Management. [Video description begins] The host is on the "Management" tab, with fields for Azure Security Center, the Upgrade Policy and Monitoring configuration settings. [Video description ends] Here, I can choose the upgrade for each of the virtual machine operating systems, in this case, let's say "Rolling - Upgrades roll out inbatches with optional pause" is and we could specify the details for that. I'm just going to leave that as it is. I can also use a system assigned managed identity, I can have that created if I turn it on here.
Depending on the nature of your workload, if it needs access to certain other Azure resources like key vaults and so on, you can then use a system assigned managed identity instead of building that into your code, if you're using custom code. So I'm going to turn on "Automatic OS upgrades" and the automatic instance termination notification when the instances will be terminated, and I'm going to go ahead and click "Next" for Health.
So here we see it's going to connect over HTTP, specifically connecting to Port 80 on the root of each back end node to check that they are healthy and responsive. So I'm going to go ahead and click "Next". [Video description begins] The host is now on the "Advanced" blade. [Video description ends] [Video description begins] The host is now on the "Tags" blade. [Video description ends] I'm not going to change anything under "Advanced", so I'll click "Next".
I'm not going to change anything for Tags, so I'm going to click "Review + create". [Video description begins] The host is now on the "Review + create" tab. [Video description ends] It's going to run a final validation. It's passed the validation, so let's create the scale set. I'm going to click the "Create" button to make that happen. [Video description begins] The host has been redirected to a page with the indication: "Your deployment is complete". [Video description ends]
Okay, so now the deployment is complete, I'm going to click "Go to resource" and that will take us into the navigation bar, the properties for the newly created virtual machine scale set. One of the things I want to take a look at is the instances blade. If I click on "Instances" over on the left, we can see that we've got two instances as per our config. We set it to start off at "2" and to max out, I think, at "4", given a busy CPU average overall.
So we can see those two instances are shown here as running. So the virtual machine scale set then is ready to go. So if I were to click on the link for one of those instances, we would get important details, such as the private IP address used by a particular instance, so that if we want to manage it and add config files or app files, or anything like that, we can do it.
And if we were to take a look at the Networking blade for that scale set instance, we can see the network interface config it picked up when we deployed our virtual machine scale set and we can also see that it made a basic network security group. We used the basic option. So, it's attached to the network interface. Well, we could change that up if we wanted to, as we mentioned, and instead go with a subnet associated network security group.


Load Balancing Overview
Load balancing an application can not only improve performance because you've got multiple back-end VMs handling the app workload, but it also can increase availability in the event that we have a failed VM, because there are other VMs in the back-end that can pick up the slack. So really, the Azure Load Balancer deals with incoming app traffic, incoming client requests. Essentially it gets it distributed to the least busy back-end VM.
You can define a public load balancer, if it's a public facing app, such as a company website on the Internet, or you could have an internal load balancer, perhaps to low balance a busy internal line of business application used by employees. So, pictured in our diagram we have the user at the top connecting to an app or URL. In this case the URL is www.quick24x7.com. That would then be resolved through DNS to the load balancer's IP address.
In the case of a public facing load balancer, it will resolve to the public IP address of the load balancer. So clients connect to the load balancer thinking they're connecting directly to the app server. But the load balancer in turn, then uses a back-end pool configuration, which essentially might be a virtual machine scale set, which has numerous back-end VMS hosting the web app. Now, the client connection to the load balancer public IP address might happen over Port 443, a secured connection, and then the load balancer might connect to the same or a different port number for the back-end nodes. It doesn't have to be the same port number.
Now, the load balancer rules is where you configure that kind of port mapping. It controls the traffic distribution coming in through the load balancer. You have some additional options beyond the port numbers you can configure, like client session IP affinity. What that means is, depending on the nature of the web app, when a client comes to the load balancer and makes a connection to a back-end VM, the back-end pool, depending on the app, you may want the client to maintain a connection with that specific server for the duration of a session, and so that's where the client affinity would kick in, so you can configure that.
You can also configure inbound NAT rules. Essentially, this is like port forwarding for the purposes of managing the back-end VMs. Whether they're Linux-based, whether they're Windows-based doesn't make a difference. And so, remember that in the case of a public load balancer, it's got a public IP address. That's fine, but what do you connect to if you need to manage the back-end VMs? Well, inbound NAT rules can allow that connectivity.
So you could have the front-end configured port and IP address, and allow connectivity to back-end instances for VM management, and the back-end port number could be the same or different. Normally the back-end port would be 22, for SSH connectivity to Linux, and 3389 for RDP connectivity to Windows. Or you might have a different solution in place to allow remote access to those hosts, such as through Azure Bastion.
The other load balancing solution to keep in mind is the Azure Application Gateway. This is a web app load balancer, specifically, whereas a traditional load balancer certainly can load balance web apps, but it's really only designed to work up to layer 4 of the assigned model, so it can work with IP addresses and port numbers, but that's about it. The Azure Application Gateway can make HTTP routing decisions by actually looking at the URL. So this means then that we can have end-to-end SSL and TLS encryption with the Azure Application Gateway.
Now, what this means is, essentially that the application gateway acts as an SSL or TLS Terminator. So you can have client HTTP connections to the gateway, after which the gateway would talk to the back-end servers without using HTTPS. Then you might say, isn't that a security risk? Well, perhaps, I mean, everything should always be encrypted, but at the same time, by doing this, you are relieving that burden, that computationally expensive burden, from the back-end servers, of dealing with SSL or TLS encryption and decryption.
So, gateway termination can be a useful option. You can also enable auto scaling, so that the number of nodes supporting a workload can be increased or decreased depending on demand. You can enable user session affinity, just like a traditional load balancer, and you can enable up to 100 websites to be associated with a single Azure Application Gateway. And the Azure Application Gateway, if you select the Web Application Firewall tier, or the WAF tier, allows you to have a Web Application Firewall protect the web app.
Now, this is based on OWASP rule sets. OWASP is the Open Web Application Security Project, where the singular goal is to protect web apps from common web app exploits. So that would include exploits like cross-site scripting attacks, injection attacks of varying kinds and directory traversal attacks, to name just a few. So the application gateway then supports URL based routing.
If we look at our example we've got a client connecting to www.quick24x7.com. They're connecting to the load balancer or application gateway in this particular example. Let's say it's a public facing one, so public IP, but then what happens is that our application gateway will be configured with rules that look for certain items in the URL.
So on the bottom left, if an incoming URL request has "/media" in it, then that might be directed to a certain set of back-end servers, maybe optimized, for dealing with streaming media, whereas on the right, in the bottom of our diagram, if the application gateway has a rule that checks for uploads in the URL, that might be directed to a different back-end set of servers that are optimized to handle uploads.


Internal Load Balancers
In this demonstration I'm going to use the portal to deploy an internal load balancer. That means that it would be used internally. It's not going to be public-facing perhaps by employees that need access to a custom line of business application.
So to get started here in the portal I'm going to click [Video description begins] The host has launched the home page of the Microsoft Azure portal and the page url is https://portal.azure.com/#home. [Video description ends] "Create a resource" and I'm going to search for "load", and right away there's "Load Balancer", so I select that and I'm going to click "Create". [Video description begins] The host is at "Basics" tab of the "Create load balancer" page where there is a template to be filled in with the project details. [Video description ends]
Next, I'll deploy this into a resource group [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] and I'm going to give this load balancer a name, I'm going to call it "int", for internal, "lb1". Now, it likes that name. We have the green checkmark over to the right of the name field. I'll specify the Azure region where I want this deployed. So in this particular case, I think what we'll do is put it, let's say, in Canada Central.
Now, I would do that if I know that's where, geographically, most people that will need access to it reside. So if we've got branch offices in that location, people'll need to connect to Azure to get to the internal load balancer, that would make sense. But we have to select "internal" for the type. The default is a public load balancer.
In most cases, you'll just leave it as a basic SKU. Although it does say if you have a need for more than 1,000 instances and better flexibility in that sense, then you might choose a standard SKU. I'm going to leave it on basic in this example. It needs to be tied to a virtual network, so I'll chose a VNet I've got here called "Vnet1" and also a subnet. Now, I can select whichever subnet I wish that's available, so I'm going to choose a subnet called "Subnet2", and for the IP address assignment I'm going to use "Dynamic".
So, dynamic of course means that we have an IP address, an internal private IP address, it's an internal load balancer that could change, whereas we could choose "Static" if we didn't want it to change. When we choose "Static", I'll scroll down a bit, you can then specify the address that you want to use. I'm just going to leave it on "Dynamic" for this case and I'll choose "Next" for Tags. I'm not going to tag this, so I'll choose "Next", "Review + create". It's going to check that my settings are valid and then, after it passed, I'll click "Create".
Okay, so the internal load balancer is deployed, but it's not ready to go. [Video description begins] The host has been redirected to a page with the indication: "Your deployment is complete". [Video description ends] We need to configure it further. So I'm going to click on "Go to resource". One of the first things we're going to do here is configure a backend pool. Now, if I go first of all, actually to the frontend IP configuration, we can see the dynamically assigned private IP that's being used for this. So that's fine, that is there.
Let's go to backend pools. The backend pool identifies the backend virtual machine workers that the load balancer will send client requests to. Now, we don't have a backend pool. Well, we need one so I'm going to click "Add" and you have a couple of different sources you can select from to define the VMs in your backend pool. Let's give this a name. I'm going to call it "BackendPool1", and down below, for the association, I can choose a virtual machine or a virtual machine scale set. [Video description begins] The host picks the "Virtual machine scale set" option in the "Associated to" dropdown menu. [Video description ends]
Now I happen to have already created a virtual machine scale set and it's showing up here in this list, and I can select the IP address from the network interface configuration for that scale set. A virtual machine scale set is a collection of virtual machines using the same operating system image, even if it's custom to support your app, that are scaled. You can configure auto-scaling, for example, if you wish, or you could manually scale it. So I'm going to have my load balancer use that existing virtual machine scale set and then I'll click "Add".
Okay, so now we've got our backend pool added to the load balancer configuration I'm going to go to "Health Probes" because we want the load balancer to know which backend VMs in the scale set are healthy versus those not responding. The ones that aren't responding will not have client requests routed to them. So I'm going to click "Add" to add a Health Probe. [Video description begins] The host is redirected to a new page titled "Add health probe". [Video description ends] I'm going to call it "hp1", for Health Probe 1, and I'm going to have it contact TCP port 80 on each backend instance.
So I have to make sure that that port is available and running on those machines, in other words, have the web server stack up and running. So I'm going to go ahead and click "OK" to add that health probe. And I also need a load balancing rule, so I'm going to go to "Load balancing rules" and click "Add". [Video description begins] The host is redirected to a new page titled "Add load balancing rule". [Video description ends]
I'm going to call this "lbrule1", load balancing rule 1, so I can associate this with the frontend IP and essentially what I'm doing, it's kind of, like forwarding or port mapping on a firewall, where I want the load balancer to listen on port 80 and when clients make a request to that, then the load balancer will send that to port 80 on the backend VMs in the scale set. And we could see the backend pool association listed right here.
So I'm going to go ahead and do that and I could also enable, for example, Client IP or Client IP and protocol persistence to keep clients connected through the load balancer, keep them connected to the same backend VM instance. That might be required depending on how the backend app was created. However, I'm just going to leave that on "None" and I'm going to click "OK".
The last thing I might do is click "Inbound NAT rules", where I might create an inbound NAT rule if I want to allow inbound access to remotely manage the backend instances. However, I'm not going to go ahead and do that here. So at this point, we've got our functional load balancer, let's just go take a look at this, meaning, I want to go to the overview of my internal load balancer, so the overview blade. [Video description begins] The host is redirected to a new tab titled "Overview". [Video description ends]
So just bear in mind that normally what we would do is have a DNS record that maps to the private IP in this case, for our internal load balancer. So when clients connect to that DNS name, the request is being sent here, which in turn is being sent to the least busy backend VM supporting the app.


Public Load Balancers
In this demonstration I'm going to configure a public load balancer using the Azure portal. So I'll start by clicking "Create a resource" and I'm going to search for the word "load", and I'll choose "Load Balancer" and then I'll click "Create". Now, public load balancers, [Video description begins] The host is at "Basics" tab of the "Create load balancer" page, where there is a template to be filled in with the project details. [Video description ends] like the name implies, are publicly accessible.
You would do this for example, if you had a public website you wanted available but you wanted to load balance it to improve performance and availability, since you've got a backend pool of VMs serving the app. So I'm going to deploy this into a resource group. [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] I'm going to call this "publb1", so public load balancer 1, and I'm going to deploy this in a region nearest where I think it might be used for the most part, so I'll choose "Canada Central", or if not, I'll deploy it in a region nearest where it will be administered.
I'm going to leave the type to the default value of "Public". We want a public load balancer here. We can either use an existing public IP address resource we might have previously deployed, or create a new one. I'm going to create a new one in this case. I'm going to call it "publb1_pubIP" to name the resource that will be created here. You could go with a statically assigned public IP address, which means it's unchanging. So depending on what your requirements are we'll determine whether you choose Dynamic or Static.
In this case, I'm going to choose "Static". I'm not going to have IPv6 support because I don't need it in this case, so I'll click "Next". I'm not going to tag this, I'll click "Next". It's going to validate my choices. The validation has passed. I'm going to go ahead and click "Create". But of course, we're then going to have to go in and define a backend pool, a health probe, and also some load balancer rules. We'll do that once this is deployed. [Video description begins] The host has been redirected to a page with the indication: "Your deployment is complete". [Video description ends]
Now that the deployment is complete I'm going to click "Go to resource". That's going to open up our load balancer. We can see if we click on the Frontend IP configuration to pull up that blade, that we already have a public IP address, in our case it's static, so it's unchanging, but I'm going to go to "Backend pools" because you need a backend pool of VMs to handle your application. So I'm going to click the "Add" button. So we're going to call this "BackendPool1". I'm going to select a virtual network. Now, this virtual network selection here, in this case "Vnet1", is important.
Let me demonstrate by selecting a virtual network I don't want. I'm going to choose another one called "Rg1-vnet". What I want to do is associate this load balancer with an existing virtual machine scale set that's already scaling an app. So I'm going to go to the Associated to and I'm going to choose "Virtual machine scale set".
But it says none were found in my region, Canada Central, that matches the above criteria. Well, if I change the virtual network, let's say I choose "Vnet1", then I will see that I've got [Video description begins] The host has changed "Rg1-vnet" to "Vnet1" in the"Virtual Network" dropdown menu. [Video description ends] a virtual machine scale set ready. So it's important to make sure if you're going to rely on another resource like a virtual machine scale set that you know the region it was deployed in, and also, as we see in this case, the virtual network it was deployed into. So I'm going to select that virtual machine scale set and its associated network interface for an IP address and I'll click "OK".
Now, that backend pool is pointing to a virtual machine scale set and that virtual machine scale set, so our backend pool then is being served by virtual machines and the scale set, each of which uses the same OS image, which could be a custom image, of course, that has your app software and its configuration. Next, I'm going to configure a health probe because we want to make sure that client requests are not routed to backend instances that are not healthy, that aren't responding.
So I'm going to click "Add" to add a health probe. This will be called "hp1", for health probe 1, and we're going to have the load balancer periodically, we can see the interval here, talk to port 80 on each backend virtual machine within the scale set, and after two consecutive failures, after two five-second intervals have gone by, it will be determined that VM is unhealthy and so, client requests will not be routed to it. So, I'll click "OK" and we're going to go to "Load balancing rules", and I'm going to click "Add", and I'm going to call this... simply call it "rule1".
Now this load balancing rule is going to be important because the load balancing rule, essentially, will have the frontend IP address and port number. So it's a public IP, Port 80, and we have to map that to what we want it to connect to on each VM in the backend, and in this case, that also happens to be Port 80. It doesn't have to be the same port number. We can also see this rule by default wants to use our health probe.
I'm going to go ahead and click "OK" to create the load balancing rule. And if we wanted to allow inbound remote management for connecting to each backend node, then we could configure inbound NAT rules to do that, but you don't necessarily need an inbound NAT rule if you want to remotely manage each backend instance, at least in this particular case, because if I go, let's say into my virtual machine scale set that we've linked to the load balancer, we can look at the instances that are up and running for that scale set, so I'll pop up the instances blade. There are two of them.
If I click on any one of them I'll see that they each have their own unique private IP address and so, I could remotely manage each backend VM instance simply by connecting directly to the private IP address, but I would have to be on the Vnet. You might set up a jump box such as through Azure Bastion to make that happen. Either way, it's important to be able to remotely manage the backend instances that are load balancing your app.


Application Gateway
The Azure Application Gateway can make decisions for routing or load balancing to backend hosts using things like URLs. It also supports a web application firewall. Those are two things the load balancer does not do. So let's deploy one, an application gateway, here using the Azure portal. [Video description begins] The host has launched the home page of the Microsoft Azure portal and the page url is https://portal.azure.com/#home. [Video description ends]
So I'm going to start by clicking "Create a resource" and I'm going to search for "application gateway", and I'll select it from the list, and as usual, I'll click "Create". [Video description begins] The host is at "Basics" tab of the "Create application gateway" page where there is a template to be filled in with the project details. [Video description ends] So I'll deploy this into an existing resource group [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] and I'm going to call this "appgw1", for App Gateway 1.
I'll deploy it in a region, let's say in this case here, I'll choose Canada Central, and here I have the tiers. Now, this is important if I want a web application firewall. So, if I want that kind of support then, I'd have to choose the WAF or the WAF V2 tier, ideally version 2, say as Standard. I want Standard V2 to have the latest options available. I can determine if I want to enable autoscaling with the app gateway. Yes, I do want to do that. So maybe I'll specify a minimum scaling unit of 1, and a max, let's say of 4, and down below, I can tie this to an existing virtual network.
So I'm going to tie this to Vnet1, let's say, and then, down below that I have to make sure I choose a subnet. So I'm going to choose a subnet and I'll click "Next". [Video description begins] The host chooses "Subnet2" in the "Subnet" dropdown menu. [Video description ends] Now, for the frontend configuration, much like we can have an internal [Video description begins] The host is now on "Frontends" tab. [Video description ends] or a private load balancer, as opposed to a public load balancer.
So too, here do we have the same options: a public or a private IP address for the frontend of the app gateway, or both, might want to do both. I'm going to leave it on... let's see let's do "Public" in this particular case. Notice that when I select "Private" it says if you have an App Gateway with a tier of Standard_v2, it doesn't support only private IP addresses, but if you went to just "Standard", not v2, it would.
However, in this case I'm going to go with "Public" and I can go and choose an existing public IP, but here I've got some public IP resources, they're already associated with other objects. All right, then I guess I'll have to click "New". [Video description begins] The host clicks on "Add new" and a template is appears, titled "Add a public IP". [Video description ends] So, "AppGw1" for App Gateway 1, "PubIP", that's what we're going to call it.
Notice that we are using the Standard SKU and the assignment here is going to be "Static". We don't even have the option of using "Dynamic" in this case. That's fine. Next, we have to define a backend pool. [Video description begins] The host is now on the "Backends" tab. [Video description ends] I'm going to click "Add a backend pool" [Video description begins] The host clicks on "Add a backend pool" and a template to be filled appears. [Video description ends] and I'm going to call this "BackendPool1".
Now what I can do here is specify what the backend VMs are. Are they IP addresses or fully qualified domain names? Do I want to add a bunch of individual virtual machines? Do I already have a virtual machine scale set, or an app service? I'm just going to choose "Virtual machine" in this case. [Video description begins] The host has chosen "Virtual machine" in the "Target type" dropdown menu. [Video description ends] And from the target drop down list, I'll choose the virtual machine.
So, I can keep adding multiple virtual machines that would be configured with the same app. In this case, I just have one but that's okay. So I'm going to go ahead and add that backend pool. I'll click "Next" for Configuration. Now, here we see routing rules. I could click "Add a routing rule".
And this is where we have a distinction between a traditional load balancer and what we're doing here with the application gateway, which is an OSI Layer 7 type of item, because it can look way beyond just packet headers that contain things like IP addresses and port numbers. So I'm going to call this "Rule1". For the listener name, I'll call it "Listener1". And I'll choose our public listing from the frontend IP and HTTP or HTTPS depending on what type of connectivity you want allow. I'll leave it just on HTTP, Port 80.
Now, after I've done that, I also have to specify the backend target. So I'm going to use a backend pool that I've already defined, that's "BackendPool1". I don't have any HTTP settings yet, so I'm going to click "Add new" to add some new ones, and I'll call this "HTTPSettings1" for HTTP. And the backend port here will be port number 80. I'm not going to enable cookie-based affinity or anything like that.
And down below, I'm just going to go ahead and click "Add" to add these HTTP settings. And now that's been filled in back here when we were configuring our routing rule. So, down at the bottom I'm going to click "Add multiple targets to create a path-based rule". [Video description begins] When the host clicks on this hyperlink, a template appears titled "Add a routing rule". [Video description ends]
And this is where I can specify, for example, "/media/*" so anything from media in the URL. Maybe I'll call this "Target1" and I can specify some HTTP settings and the backend target where I want to send that. [Video description begins] The host selects "HTTPSettings1" in the HTTP settings dropdown menu. In the Backend target dropdown menu, the host selects "BackendPool1". [Video description ends] So you could configure multiple backend pools to handle different types of URLs.
So /media might go to BackendPool1 because the VMs in BackendPool1 are optimized to stream media. I'll just go ahead and click "Add" and then I'll click "Add" again. So now we've got our routing rule. Of course, we had our frontend and our backend pool. Let's click "Next" for Tagging. I'm not going to tag this application gateway, so I'll click "Next : Review + create". It's going to check the validation which has passed, and so, I'm going to create the application gateway. I'll click the "Create" button.


Load Balancers and Templates
In Azure, load balancers can be deployed and managed using the portal, using PowerShell, using the CLI, and also using templates. We're going to take a look at how to do that here in the portal, how to create a template deployment for a load balancer. So I'm going to start the portal by clicking "Create a resource".
And like I normally would do when I want to deploy a template in this manner, I'm going to search for the word "template" and I'm going to choose "template deployment", and I'll choose Create. [Video description begins] The host is redirected to a new page called "Custom deployment" with various hyperlinks. [Video description ends] Now I could build my own template in the editor if I wanted to do this from scratch and I knew the syntax that I need to use. Or I could go down, let's say, or GitHub, and I could search it up.
For example, if I type in the word "load", I could start with, let's say, "101-internal-loadbalancer-create". I'm going to use that template since I do want to deploy an internal load balancer. So I'm going to select that. I'm going to go down and choose "Select template". [Video description begins] The host is automatically redirected to a template page called "Create a Load Balancer with Inbound NAT Rule". [Video description ends]
The template that you would use would determine what you need to specify for values, in this case, the resource group where I want it deployed. Then, also the VNET and subnet prefix. So, apparently this template is going to create a new VNET and subnet within that region, which is fine. I'm going to go ahead and click" I agree to the terms and conditions".
Now notice, when you're back up here at the top, you could also have chosen to edit the template. And from here you can make changes. So here's the JSON syntax for this particular template. You can see here, it's going to build our subnet, it's going to build our VNET, and so on. However, I'm going to discard that because I don't want to edit the template.
So we're back here where we left off. I'm going to go and click the Purchase button to use this template to deploy our load balancer. And after a moment we'll see our deployment succeeded. So let's just go to all resources here. We're going to look for load balancers. Now notice the template didn't even give us the chance to specify a name for the load balancer.
So I'm going to select "Load balancer", we can see there's only one, here in our subscription, and it's called "loadBalancer1". So this is the load balancer that was deployed as a result of us having selected that template. [Video description begins] The host clicks on the loadbalancer1 and is now at the overview tab. He then clicks on the backend pool tab to examine the details. [Video description ends]
However, if I go into the backend pool, it did create a back end pool but we don't have any virtual machines or scale sets, or anything associated with it. So it did part of the work. Of course, the template could have been coded to do all of the work, but sometimes you'll want to use a template, an ARM template, to get the majority of the hard work done, the underlying work of just creating the resource and getting it deployed. And then you'll want to go in and tweak details in this case like the Backend pool, Health probes or Load balancing rules.


Load Balancer Troubleshooting
Even though you might have successfully and correctly deployed a load balancer configuration, it doesn't necessarily mean that everything's going to work. There could be other problems such as with the backend virtual machines and their configuration. So for example, here in the portal I got a load balancer called LB1 and in the overview blade, over on the right, I can see it has a public IP address.
Okay, I'm going to copy that and I'm going to see if we can pull up the web page for a web app supported by this. Now, that's assuming that your load balancing a specific web app with the front end. So let's open up a new browser window and see what happens when we connect to that IP. [Video description begins] An error message is displayed on the screen. The page requested cannot be reached. [Video description ends] And this is what we get.
I can't seem to pull up anything from that IP address. If I know that I'm load balancing a web app that has a frontend page it shouldn't be showing up, then this is a problem obviously. So what do we do about this? One of the first things we should do to troubleshoot this is perhaps go back to our load balancer and look at the backend pool. [Video description begins] The host comes back to the Microsoft Azure tab and clicks on the "Backend pool" option under the "Settings" section. [Video description ends] So what is being served up here in the backend?
Well, if I look at the backend pool, it looks like a virtual machine called WinSrv2019-1, the status of which is that it failed. Okay, let's click to examine that a little bit. What's the problem? You can have a health probe that checks the health of the virtual machine. And at one point in time it might have had a problem. So if you have a failure with a backend server, naturally that's going to translate to being a failure or a problem with the low bouncers since it depends on them. Now, you might have multiple backend VMs.
If only one has failed, then it means examining the details, clicking links and finding out what the problem with that specific VM is. So back here in the Load balancer, if I go to the backend pool and click directly on it, if that virtual machine is problematic and I can't solve the problem within it, then I could look at the virtual machine association here. This particular backend pool is linked to virtual machines as opposed to a scale set. And I can click the trash can to remove the reference if I couldn't solve the problem with that VM. [Video description begins] The host is now back to the virtual machines tab. [Video description ends]
Now the other thing to do is to also take a look at the actual virtual machine. So I've got it here listed as running, so I'm going to open it up and I'm going to make a connection directly into it. Now, this virtual machine has its own public IP address. If it only had a private one, then I could use, for example, Azure bastion to make a connection to it. But either way, one way or another we need to be able to troubleshoot low bouncing issues by getting into the backend VMs in some cases.
So I'm going to go ahead and click "Connect" here to make a connection to this Windows VM. And I'm going to download the RDP file. [Video description begins] The host is now in the Server Manager dashboard. [Video description ends] So here, within my backend virtual machine, the Server Manager has started up and if I go to "Add Roles and Features" just to step through what I would normally do to install the web server, I can see the web server component is already there. So we should also take a look at the specifics.
In this case for the web app, I should open up the Internet Information Services Manager tool and make sure that the web app, for example, is listening on port 80, assuming that's the load balancer rule and how it's configured. So if I look at "Sites" here, we've got the Default Website and if we just take a look at that by right clicking and editing the bindings well, it is listening on port 80 so it's not like it's listening on port 81 or some non-standard port. [Video description begins] The host is now back on the Azure Portal, at Home > lb1 | Backend pools. [Video description ends]
Back here, in our load balancer, we should probably go to our load balancing rules just to make sure it looks like the correct port numbers are being referenced. This is another important part of troubleshooting and it is: Frontend Port 80, Backend Port 80, which we just verified, was the configuration. The other thing we should do is check out our network security group for our Windows virtual machine. [Video description begins] The host is now on another browser tab, at Home > Virtual machines > WinSrv2019 - 1 | Networking. [Video description ends]
So, when I look at my virtual machine and go to the Networking blade, I can see "Rules". Well, I think we might have a problem here because we don't seem to have an allowance for Port 80. We have one to allow inbound Remote Desktop Protocol on port 3389, Vnet inbound, low bouncer inbound, and then it denies everything else. Well, that's a problem if you don't have an allowance for port 80 here, just like in the OS within the VN there. You want to make sure that you don't have file rules blocking traffic. Well, that's going to be a problem if it's not setup correctly.
So what we're going to do here is going to our network security group and we're going to add a new inbound security rule to allow port 80 traffic. So I'm going to click the "Add" button. We're just going to fill it in accordingly. So the destination port here is going to be Port 80. [Video description begins] The host clicks on the "NSG-Windows" hyperlink in the networking tab. He is redirected to another page, then goes to the"Inbound security rules" tab, under the settings section, and clicks "Add". [Video description ends]
In this case over TCP for our web app and I'll call this Port 80 for the rule. I'll leave the Priority at 110, that's going to be fine, and I'll click "Add" to add the rule to the list. While that's happening, let's go back to our configuration once again for our load balancer because the other thing to think about in the backend pool is that if we click on it, in this case, we'll see our virtual machine. [Video description begins] The host goes back to the "Backend pool" tab that's open on the browser. He clicks on the backend pool to check the details. [Video description ends]
We want to make sure we still have the correct IP address. So currently, when this backend pool was configured, it referred to the virtual machine with an IP, a private IP, of 10.0.1.5. So we want to make sure, for example, if we go back into our virtual machine, that that indeed is the correct private IP address. And it is in this case 10.0.1.5. [Video description begins] The host is now again on the "Overview" tab of WinSrv2019-1. [Video description ends]
So now that we've corrected the problem, which was simply a network security group rule that we added to allow Port 80 traffic, we can see when we connect to the public IP of the load balancer, it's now making the correct connection to the back end web server.


Azure Site Recovery Overview
In a business environment it's crucial that our supporting IT systems are up and running, and that data is available and kept secured. This is where Azure Site Recovery comes in. It's all about business continuity, and also disaster recovery. With Azure Site Recovery we can enable fail over and fail back. This means we can have replication enabled between primary and secondary sites, or Azure regions.
So you could replicate virtual machines, for example, that might be running a mission critical workload. You can also enable application snapshots. So this would take the state of your web application, including memory, transactions, and also any disk files that are related to that. So Azure Site Recovery could be called Disaster Recovery as a Service, or DRaS. Now it's treated as an alternate recovery site as well.
So, for business continuity, you might have a physical on premises facility, or you might have a data center location, or it might be just a corporate network within your building, and you might want to use the Azure Cloud as the alternate network location for IT services. So your primary location is your on-premises network. If something happens to disrupt that, then you could already have had things like physical servers or on-prem virtual machines replicated into Azure that are ready to take over the workload.
What we're talking about doing here is planning for failure. It's inevitable that there's going to be some kind of a disruption at some time, and we don't want to be caught unprepared. We want to have a plan in place before those things happen. Now, you can work with Azure Site Recovery in a number of different types of servers, such as on-premises physical servers can be replicated into the Azure cloud. Azure Virtual Machines can be replicated to a secondary Azure region. You could have VMware Virtual Machines or Microsoft Hyper-V Virtual Machines that you protect with Azure Site Recovery.
Now, not only is fail oversupported, so we can fail over to a virtual machine running in Azure if we have a disruption on-premises, but also fail back. You can fail back to your primary version of a server, for example, on-premises. There are some exceptions, for example, if you try to fail back from Azure to an on-premises physical server, then you're going to have a problem. But if you have an on-premises virtual machine and you failed over to it in the cloud, you'll be able to fail back to it on-premises.


Site-to-Site Recovery
You can protect mission critical Azure VMs by enabling Site Recovery. Now, Azure Site Recovery really lets you copy or replicate a VM to an alternate region, and for that, you're going to need a recovery services vault. We're going to start here in the portal by opening up an existing recovery services vault, because this is one way that you can initiate the process of enabling Azure Site Recovery for a virtual machine.
So I'll scroll down in the navigation bar over on the left and I'm going to choose "Backup items", and notice, among the many things listed here for Azure virtual machine, we have 0 for the backup item count, so we are not yet backing up any Azure VMs. So having done that, that's fine. We're going to scroll up a little bit, and I'm going to click "Site Recovery" over on the left and I'm going to choose "Prepare Infrastructure".
From here, I can determine exactly what it is I want to protect. [Video description begins] The host is now on a section called " Protection goal", the one on the Prepare Infrastructure page. [Video description ends] Is the Virtual Machine in Azure or is it on-premises? [Video description begins] The host selects "On-premises" from the dropdown menu. [Video description ends] And naturally, if I'm doing a migration, I can choose that otherwise, I could choose "No".
Then I can select what it is I'm migrating, whether it's virtualized with Hyper-V, VMware, or if it's a physical server. However, in this case I want to protect an Azure virtual machine, so I'm going to select "Azure" for "Where are your machines located?". [Video description begins] The host goes back on the dropdown menu and changes the "On-premises" option to "Azure". [Video description ends] And I also want to replicate it to Azure, so I'm going to go ahead and click "OK", and then I'll click "OK" yet again.
Then I would click on "Replicate Application" and continue from here. So I'm going to choose the source environment. I've opened up another browser window where we can view our virtual machines. I've got one called WinSrv2019-App1, it's running, and notice it's in the East US location or region. So back here, configuring replication, my source environment is Azure East US and my resource group is going to be Rg8, resource group 8, notice that is where that virtual machine is deployed.
So that's great, that's my source and environment. I'm going to choose OK. [Video description begins] The host is at the "Enable Protection" tab on the second section called "Virtual machines". [Video description ends] There's the virtual machine WinSrv2019-App1, so I'll put a check mark in the box, I'll click "OK". Then I have to select the target location, so from the drop down list I have a number of options. I'm going to leave the selection here of "(US) West US".
Down below, I can see in that target location, it's going to create a new resource group called Rg8-asr. The asr stands for Azure Site Recovery. It's going to do the same type of thing to build a target VNet. I've got a cache storage account here that will be in the source location that's used basically as staging before replicating, in this case, to West US. And it's going to replicate a managed disk because my virtual machine is using one disk.
And down below, we can see the replication policy. So recovery point retention is for 24 hours and app consistent snapshots are taken once every 4 hours. So that's fine, I'm going to go ahead and click "Create target resources". So it's going to create these in the target region, in my case, West US. I'll click "Enable replication". [Video description begins] The host goes back to "Vault1 Site Recovery" page. A window has appeared that says enabling replication for 1 vm(s). [Video description ends]
And we can see in the notification area in the upper right, it's currently enabling replication for 1 VM. And before too long we can see that it successfully enabled replication for one VM. Now, back here in backup items, we still don't see anything for Azure virtual machine because we haven't enabled backup, we've enabled replication, so this is fine. If I go to "Replicated items" we'll see all servers where replication was enabled. We've got one that failed here, normally due to an unsupported configuration or operating system.
But our Windows server hosting our app is listed as healthy when it comes to replication health. Although notice, still at this point, while replication is enabled, 0% is synchronized. So you can watch over this and click the "Refresh" button to track. Let's just flip over to our other open window here where we have our virtual machine selected and in the navigation bar. I'm going to scroll down under "Operations" because I want to click on "Disaster recovery". This is where we will see the fact that we've got replication enabled.
Now, it's still 0% synchronized, and if we were, for example, to go to "Properties" we can see a lot of the properties, again, 0% synchronized. We can see the active location, the replication policy, and if we take a look at "Compute and Network", for example, compute and network resources, we could see it was unable to retrieve anything, because initial synchronization is still happening, and if we click on "Disks" we could still see that it looks like it's synchronizing the OS disk to the target location, so to the replica disk name.
And if we go back and take a look here we can see that it's 97% synchronized, still looking at the Disks blade, it's almost done. Back here, in the recovery services vault, we're still looking at Replicated items. I've clicked "Refresh" and notice now our replication health is healthy and that status now says "Protected".


VM Failover
In this demonstration, I'm going to use the portal to test virtual machine failover in Azure. Now, I've already enabled replication through Azure site recovery, for an Azure VM. So, essentially replicating from Azure to Azure, replicating a VM to another region. Let's take a look at how to test failover. [Video description begins] The host is at the Virtual machines page of the Azure portal. [Video description ends]
So I'm going to open up an existing virtual machine, where I've enabled replication. Now we can check this out in the navigation bar by going down under "Operations" and by clicking on "Disaster recovery". When I do that, in the "Overview" section, I'll get an indication as to whether or not protection is enabled.
And we can see here, the status is "Protected" and that the "Replication health" for this VM is such that it is "Healthy". However, it says "Last successful Test Failover", "Never performed successfully". Well, as part of a recovery drill in the event of a disruption, such as in the primary region of a virtual machine, we should go through and test failover for mission-critical workloads running in these VMs.
So I'm going to do that. I'm going to click the "Test Failover" button up here at the top. So, for the "Failover direction", it already knows where I'm failing over from, "East US" is the primary location. I've already enabled replication. So there's a copy of it in "West US". That's already set and it's grayed out, I cannot change it, and that's normal. What I can select is the "Recovery Point". So I might have numerous recovery points over time that I would like to use for performing this test failover.
So what I'm doing is failing the VM over to the recovery point that I select here from the list. And if you've got multiple VMs, you might actually have this set up through a recovery plan. You can use failover for multiple VMs at once. But in this case, we don't have a recovery plan, it's just a single VM. I need to choose the virtual network, the "Azure virtual network", where I want this created. You want to make sure that this is not one that's used for mission-critical services and production. And after that, I'll go ahead and click on "OK".
We can see it is now starting the test failover for this VM. So, at this point, if I were to look at my list of virtual machines, I should notice the presence of a new virtual machine. It's named similarly to the original except it has "-test" added at the end. It's running and we can see it's in the target "Resource group" that we selected when we tested failover. Also notice it's in the target region, in this case, "West US". The source region is "East US".
So we could test connectivity to an app running within it or remoting into it for RDP and whatnot, if we wanted to fully complete this test. However, at this point, I am finished with that. So I've tested the failover. [Video description begins] The host closes the Virtual Machines tab and returns to the Overview tab of the source Virtual Machine. [Video description ends]
So, if I go back to my source virtual machine, and if I take a look at the disaster recovery options, we now have the option to "Cleanup test failover". So I want to make sure I do that to delete the newly created virtual machine. [Video description begins] The host clicks on the "Cleanup test failover" tab. [Video description ends] I am just going to put in some notes here. "Testing is complete, delete test failover virtual machines". I'll turn on that checkmark and I'll click "OK".


