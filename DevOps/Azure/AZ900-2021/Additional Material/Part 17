                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 17


Azure VNet Peering Overview
  - VNet peering allows you to connect Azure VNets together. Now why would you want to do this? 
    - You might do this because you know you've got services deployed on each of the VNets 
    - Or even on just one of them that needs access to resources on another VNet
    - That already will work, however, we're talking about doing this with reduced network latency
    - When you peer VNets together, the two VNets might be in the same Azure region or they might be in different regions
    - But if they're in the same region, you end up with reduced network latency
    - One of the things about this also is that inter-VNet traffic is private and this is because it's not being sent over the Internet
    - So sending traffic from VNet1 to VNet2, for example instead, traverses Microsoft's backbone network.
  - In the example diagram, we have two VNets, on the left we've got VNet1, on the right, we've got VNet2.
    - Whether they're in the same region or not, is not relevant in terms of connectivity. 
    - Although in the same region as we know, there's even more reduced network latency.
    - But what's happening in this particular example instead of pairing the two VNets together directly, which is certainly an option,
    - This is yet another thing to consider. You might link them to a centralized what I'm going to call a hub VNet, where you've got a VPN gateway defined.
    - So by doing this, you can peer VNets to the Hub VNet, and as long as using gateway transit is enabled
    - It's a checkbox when you're configuring, the VNet peered connection in the GUI if you enable that option
    - Then you'll be able to go through the centralized VPN gateway when you peer a VNet to the hub VNet and have access to other VNets
    - You can also configure VNet peering besides the GUI, besides the portal, using PowerShell.
  - Here we're creating a variable called VNet1, this is just using the Get-AzVirtualNetwork cmdlet to retrieve VNet1 from from a resource group called Rg1
    - We're doing the same thing for a VNet called VNet2.
  - Then we are starting to add the virtual network peering connection. So we're creating one called VNet1 to VNet2, and our virtual network is our VNet1 variable.
  - The remote virtual network ID is our VNet2 variable .Id, so calling upon the property of it
    - Then we would do the same thing in the reverse direction so that we can link VNet2 to VNet1's ID.
    - As you might imagine, you can also set up VNet peering using the Azure CLI.
    - In our first statement, we'll be creating a variable called VNet1 and it's going to store the result of running az network vnet show.
  - So vnet show is used to return the details about a specific VNet
    - Telling it to go into resource group 1, the VNet is named VNet1, we're using query so we can return just the ID property
    - We're setting the output to tsv, which stands for top separated values
  - We're doing the same thing for VNet2, so basically we want to make sure we store the IDs in these two respective variables
    - The next thing we're doing is running az network vnet peering create
    - We're naming this first one VNet1 to VNet2
    - We're specifying the resource group and the VNet name here VNet1, and then the remote VNet which is VNet2
    - Remember VNet2 is a variable that will contain the ID. And we're allowing VNet access and we do the same type of thing in reverse
    - What we're doing is simply setting up a peered connection between two VNets


Configuring VNet Peering
  - We are going to use the portal to enable a VNet peering connection between two VNets. 
    - The overall purpose being reduced network latency, especially when those VNets are within the same Azure region
    - We get started here in the portal and go to the Virtual networks view
  - We've got two virtual networks, Vnet2 and Vnet3, that are both in the example region
    - Because we know we've got services deployed on both of those VNets that need to communicate with services on the other respective VNet
    - We are going to create a peered connection between them.
    - We are going to start in Vnet2, now when I click to open that up, I'm going to scroll down in the navigation bar until I get to the Peerings blade.
  - When we open the Peerings blade, there currently are no peering connections
    - We are going to go ahead and create one by clicking the Add button, and there are some details we'll have to specify.
  - First thing is the name of the peering from Vnet2 to the remote network
    - Well, we are going to call this Vnet2 to Vnet3, because that's ultimately what we are going to do
    - However, it doesn't like the name, and the reason is because we need to remove the spaces from it, after which it has no problem with it
    - There's no problem with uppercase letters or anything like that
    - Down below, we need to choose the target virtual network
    - We're in Vnet2 right now, so the peered virtual network, select here as Vnet3
    - We have to give a name for the peered connection from Vnet3 back to Vnet2, it's a two-way street
    - Why don't we be consistent, call that Vnet3toVnet2? Then we have a number of options about connectivity.
  - Do we want to allow virtual network access from services on Vnet2 to Vnet3? 
    - Probably, so we've got that Enabled, and what about the reverse direction, from Vnet3 to Vnet2? 
    - We are going to leave that Enabled as well
    - You really have to know which services are on the VNets and what they need to communicate with on the respective VNet that they're peered with
    - We are going to leave it Enabled in both directions
    - What about traffic that's forwarded or routed to Vnet3? Do we want to allow that traffic that doesn't originate from Vnet3
    - But forwarded to it, to come into Vnet2? We can either enable that or disable it, the default is Disabled
    - And the same thing, do we want to allow forwarded traffic from Vnet2, so it didn't originate on Vnet2, to come into VNet3?, That's also disabled by default
  - If you are setting up a peered connection, let's say, for this VNet to a centralized hub VNet that has a VPN gateway
    - You could choose to allow gateway transit
    - You might do this if you have a number of VNets that you want to link together through a centralized hub location
    - We don't have that, so we're not going to turn that on. So I'm going to go ahead and click OK.
  - After a moment, it looks like it's completed, in Vnet2, we have the Vnet2toVnet3 peered connection with the status of Connected.
    - Have a look at this from the perspective of Vnet3.
    - If we go into Vnet3 and take a look at its Peerings, there's one, Vnet3toVnet2, and it also is Connected.


VNet Peering and PowerShell
  - You can use PowerShell to configure VNet peering. 
    - The thing you need to consider are the VNets you're going to peer together because you're going to need variables that point to each of those VNets
    - We are going to start by creating a variable called $vnet1
    - It's simply going to store the return result of Get-AzVirtualNetwork where we are giving the name of the VNet we're interested in
      - And the resource group into which it was deployed which is the first VNet that we want to peer
  - We are going to do the same type of thing with the up arrow key, but we'll change a few references here
    - Notably, we are going to call the variable VNet2, and we are going to point to a VNet we have that's actually called VNet2, and it's in resource group 1
  - We've got two variables here then that point to the VNets we want to peer together
    - All you really need to do is peer the VNets by specifying the source and target, virtual networks and given name for the peering connection, of course
    - So we are going to go ahead and start with Add-AzVirtualNetworkPeering
    - We are going to call this one VNet1-VNet2, so that's the direction
    - So the source, VirtualNetwork with the -VirtualNetwork parameter is going to be my $vnet1 variable
    - And the -RemoteVirtualNetwork parameter is going to refer to $vnet2.Id
    - We are calling upon the ID property to get the ID of the second virtual network, then press Enter.
    - After a moment, it will make that peering connection in that direction from VNet1 to VNet2.
    - Then can go ahead and check our work
    - If we go into VNet1 here in the portal, and if we were to take a peek at our peerings, so pop up the Peerings blad
  - There it is, VNet1-VNet2 but the peering status is Initiated
    - Well, it's not finished because we have to do the same thing in the opposite direction
    - In the GUI, you're really killing two birds with one stone, aren't you?
    - Because you configure the VNet connection and both sides of the connection are done
    - However that's not the case here in PowerShell, but it's not a big deal.
    - We just have to add the connection basically in the opposite direction.
  - To do that, I'm going to use the same cmdlet again, Add-AzVirtualNetworkPeering
    - We are going to call this one though, VNet2-VNet1, so for that direction
    - Then this particular perspective, the virtual network, the source virtual network is VNet2 and the remote virtual network is VNet1
    - Specifically, the ID property of the $vnet1 variable
    - Go ahead and press Enter to finish this peering connection. After which, we'll just go ahead and check our work in the portal.
    - Okay, so it looks like it took. Let's go. 
  - First of all, let's actually refresh what we already have here
    - Notice now the peering status shows Connected which makes sense because it's done in both directions now
  - If we go to VNet2 and look at the Peerings, we can see that we've got the VNet2-VNet1 peered connection that has a peering status of Connected
    - Notice now that VNet2 of course has more than one VNet peering connection to different VNets
    - We can see the peer from this one's perspective, this is VNet2. And that's perfectly normal.
