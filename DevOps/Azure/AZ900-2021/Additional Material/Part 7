                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 7


Load Balancing Overview
Load balancing an application can not only improve performance because you've got multiple back-end VMs handling the app workload, but it also can increase availability in the event that we have a failed VM, because there are other VMs in the back-end that can pick up the slack. So really, the Azure Load Balancer deals with incoming app traffic, incoming client requests. Essentially it gets it distributed to the least busy back-end VM.
You can define a public load balancer, if it's a public facing app, such as a company website on the Internet, or you could have an internal load balancer, perhaps to low balance a busy internal line of business application used by employees. So, pictured in our diagram we have the user at the top connecting to an app or URL. In this case the URL is www.quick24x7.com. That would then be resolved through DNS to the load balancer's IP address.
In the case of a public facing load balancer, it will resolve to the public IP address of the load balancer. So clients connect to the load balancer thinking they're connecting directly to the app server. But the load balancer in turn, then uses a back-end pool configuration, which essentially might be a virtual machine scale set, which has numerous back-end VMS hosting the web app. Now, the client connection to the load balancer public IP address might happen over Port 443, a secured connection, and then the load balancer might connect to the same or a different port number for the back-end nodes. It doesn't have to be the same port number.
Now, the load balancer rules is where you configure that kind of port mapping. It controls the traffic distribution coming in through the load balancer. You have some additional options beyond the port numbers you can configure, like client session IP affinity. What that means is, depending on the nature of the web app, when a client comes to the load balancer and makes a connection to a back-end VM, the back-end pool, depending on the app, you may want the client to maintain a connection with that specific server for the duration of a session, and so that's where the client affinity would kick in, so you can configure that.
You can also configure inbound NAT rules. Essentially, this is like port forwarding for the purposes of managing the back-end VMs. Whether they're Linux-based, whether they're Windows-based doesn't make a difference. And so, remember that in the case of a public load balancer, it's got a public IP address. That's fine, but what do you connect to if you need to manage the back-end VMs? Well, inbound NAT rules can allow that connectivity.
So you could have the front-end configured port and IP address, and allow connectivity to back-end instances for VM management, and the back-end port number could be the same or different. Normally the back-end port would be 22, for SSH connectivity to Linux, and 3389 for RDP connectivity to Windows. Or you might have a different solution in place to allow remote access to those hosts, such as through Azure Bastion.
The other load balancing solution to keep in mind is the Azure Application Gateway. This is a web app load balancer, specifically, whereas a traditional load balancer certainly can load balance web apps, but it's really only designed to work up to layer 4 of the assigned model, so it can work with IP addresses and port numbers, but that's about it. The Azure Application Gateway can make HTTP routing decisions by actually looking at the URL. So this means then that we can have end-to-end SSL and TLS encryption with the Azure Application Gateway.
Now, what this means is, essentially that the application gateway acts as an SSL or TLS Terminator. So you can have client HTTP connections to the gateway, after which the gateway would talk to the back-end servers without using HTTPS. Then you might say, isn't that a security risk? Well, perhaps, I mean, everything should always be encrypted, but at the same time, by doing this, you are relieving that burden, that computationally expensive burden, from the back-end servers, of dealing with SSL or TLS encryption and decryption.
So, gateway termination can be a useful option. You can also enable auto scaling, so that the number of nodes supporting a workload can be increased or decreased depending on demand. You can enable user session affinity, just like a traditional load balancer, and you can enable up to 100 websites to be associated with a single Azure Application Gateway. And the Azure Application Gateway, if you select the Web Application Firewall tier, or the WAF tier, allows you to have a Web Application Firewall protect the web app.
Now, this is based on OWASP rule sets. OWASP is the Open Web Application Security Project, where the singular goal is to protect web apps from common web app exploits. So that would include exploits like cross-site scripting attacks, injection attacks of varying kinds and directory traversal attacks, to name just a few. So the application gateway then supports URL based routing.
If we look at our example we've got a client connecting to www.quick24x7.com. They're connecting to the load balancer or application gateway in this particular example. Let's say it's a public facing one, so public IP, but then what happens is that our application gateway will be configured with rules that look for certain items in the URL.
So on the bottom left, if an incoming URL request has "/media" in it, then that might be directed to a certain set of back-end servers, maybe optimized, for dealing with streaming media, whereas on the right, in the bottom of our diagram, if the application gateway has a rule that checks for uploads in the URL, that might be directed to a different back-end set of servers that are optimized to handle uploads.


Internal Load Balancers
In this demonstration I'm going to use the portal to deploy an internal load balancer. That means that it would be used internally. It's not going to be public-facing perhaps by employees that need access to a custom line of business application.

So to get started here in the portal I'm going to click [Video description begins] The host has launched the home page of the Microsoft Azure portal and the page url is https://portal.azure.com/#home. [Video description ends] "Create a resource" and I'm going to search for "load", and right away there's "Load Balancer", so I select that and I'm going to click "Create". [Video description begins] The host is at "Basics" tab of the "Create load balancer" page where there is a template to be filled in with the project details. [Video description ends]

Next, I'll deploy this into a resource group [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] and I'm going to give this load balancer a name, I'm going to call it "int", for internal, "lb1". Now, it likes that name. We have the green checkmark over to the right of the name field. I'll specify the Azure region where I want this deployed. So in this particular case, I think what we'll do is put it, let's say, in Canada Central.

Now, I would do that if I know that's where, geographically, most people that will need access to it reside. So if we've got branch offices in that location, people'll need to connect to Azure to get to the internal load balancer, that would make sense. But we have to select "internal" for the type. The default is a public load balancer.

In most cases, you'll just leave it as a basic SKU. Although it does say if you have a need for more than 1,000 instances and better flexibility in that sense, then you might choose a standard SKU. I'm going to leave it on basic in this example. It needs to be tied to a virtual network, so I'll chose a VNet I've got here called "Vnet1" and also a subnet. Now, I can select whichever subnet I wish that's available, so I'm going to choose a subnet called "Subnet2", and for the IP address assignment I'm going to use "Dynamic".

So, dynamic of course means that we have an IP address, an internal private IP address, it's an internal load balancer that could change, whereas we could choose "Static" if we didn't want it to change. When we choose "Static", I'll scroll down a bit, you can then specify the address that you want to use. I'm just going to leave it on "Dynamic" for this case and I'll choose "Next" for Tags. I'm not going to tag this, so I'll choose "Next", "Review + create". It's going to check that my settings are valid and then, after it passed, I'll click "Create".

Okay, so the internal load balancer is deployed, but it's not ready to go. [Video description begins] The host has been redirected to a page with the indication: "Your deployment is complete". [Video description ends] We need to configure it further. So I'm going to click on "Go to resource". One of the first things we're going to do here is configure a backend pool. Now, if I go first of all, actually to the frontend IP configuration, we can see the dynamically assigned private IP that's being used for this. So that's fine, that is there.

Let's go to backend pools. The backend pool identifies the backend virtual machine workers that the load balancer will send client requests to. Now, we don't have a backend pool. Well, we need one so I'm going to click "Add" and you have a couple of different sources you can select from to define the VMs in your backend pool. Let's give this a name. I'm going to call it "BackendPool1", and down below, for the association, I can choose a virtual machine or a virtual machine scale set. [Video description begins] The host picks the "Virtual machine scale set" option in the "Associated to" dropdown menu. [Video description ends]

Now I happen to have already created a virtual machine scale set and it's showing up here in this list, and I can select the IP address from the network interface configuration for that scale set. A virtual machine scale set is a collection of virtual machines using the same operating system image, even if it's custom to support your app, that are scaled. You can configure auto-scaling, for example, if you wish, or you could manually scale it. So I'm going to have my load balancer use that existing virtual machine scale set and then I'll click "Add".

Okay, so now we've got our backend pool added to the load balancer configuration I'm going to go to "Health Probes" because we want the load balancer to know which backend VMs in the scale set are healthy versus those not responding. The ones that aren't responding will not have client requests routed to them. So I'm going to click "Add" to add a Health Probe. [Video description begins] The host is redirected to a new page titled "Add health probe". [Video description ends] I'm going to call it "hp1", for Health Probe 1, and I'm going to have it contact TCP port 80 on each backend instance.

So I have to make sure that that port is available and running on those machines, in other words, have the web server stack up and running. So I'm going to go ahead and click "OK" to add that health probe. And I also need a load balancing rule, so I'm going to go to "Load balancing rules" and click "Add". [Video description begins] The host is redirected to a new page titled "Add load balancing rule". [Video description ends]

I'm going to call this "lbrule1", load balancing rule 1, so I can associate this with the frontend IP and essentially what I'm doing, it's kind of, like forwarding or port mapping on a firewall, where I want the load balancer to listen on port 80 and when clients make a request to that, then the load balancer will send that to port 80 on the backend VMs in the scale set. And we could see the backend pool association listed right here.

So I'm going to go ahead and do that and I could also enable, for example, Client IP or Client IP and protocol persistence to keep clients connected through the load balancer, keep them connected to the same backend VM instance. That might be required depending on how the backend app was created. However, I'm just going to leave that on "None" and I'm going to click "OK".

The last thing I might do is click "Inbound NAT rules", where I might create an inbound NAT rule if I want to allow inbound access to remotely manage the backend instances. However, I'm not going to go ahead and do that here. So at this point, we've got our functional load balancer, let's just go take a look at this, meaning, I want to go to the overview of my internal load balancer, so the overview blade. [Video description begins] The host is redirected to a new tab titled "Overview". [Video description ends]

So just bear in mind that normally what we would do is have a DNS record that maps to the private IP in this case, for our internal load balancer. So when clients connect to that DNS name, the request is being sent here, which in turn is being sent to the least busy backend VM supporting the app.


Public Load Balancers
In this demonstration I'm going to configure a public load balancer using the Azure portal. So I'll start by clicking "Create a resource" and I'm going to search for the word "load", and I'll choose "Load Balancer" and then I'll click "Create". Now, public load balancers, [Video description begins] The host is at "Basics" tab of the "Create load balancer" page, where there is a template to be filled in with the project details. [Video description ends] like the name implies, are publicly accessible.
You would do this for example, if you had a public website you wanted available but you wanted to load balance it to improve performance and availability, since you've got a backend pool of VMs serving the app. So I'm going to deploy this into a resource group. [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] I'm going to call this "publb1", so public load balancer 1, and I'm going to deploy this in a region nearest where I think it might be used for the most part, so I'll choose "Canada Central", or if not, I'll deploy it in a region nearest where it will be administered.

I'm going to leave the type to the default value of "Public". We want a public load balancer here. We can either use an existing public IP address resource we might have previously deployed, or create a new one. I'm going to create a new one in this case. I'm going to call it "publb1_pubIP" to name the resource that will be created here. You could go with a statically assigned public IP address, which means it's unchanging. So depending on what your requirements are we'll determine whether you choose Dynamic or Static.

In this case, I'm going to choose "Static". I'm not going to have IPv6 support because I don't need it in this case, so I'll click "Next". I'm not going to tag this, I'll click "Next". It's going to validate my choices. The validation has passed. I'm going to go ahead and click "Create". But of course, we're then going to have to go in and define a backend pool, a health probe, and also some load balancer rules. We'll do that once this is deployed. [Video description begins] The host has been redirected to a page with the indication: "Your deployment is complete". [Video description ends]

Now that the deployment is complete I'm going to click "Go to resource". That's going to open up our load balancer. We can see if we click on the Frontend IP configuration to pull up that blade, that we already have a public IP address, in our case it's static, so it's unchanging, but I'm going to go to "Backend pools" because you need a backend pool of VMs to handle your application. So I'm going to click the "Add" button. So we're going to call this "BackendPool1". I'm going to select a virtual network. Now, this virtual network selection here, in this case "Vnet1", is important.

Let me demonstrate by selecting a virtual network I don't want. I'm going to choose another one called "Rg1-vnet". What I want to do is associate this load balancer with an existing virtual machine scale set that's already scaling an app. So I'm going to go to the Associated to and I'm going to choose "Virtual machine scale set".

But it says none were found in my region, Canada Central, that matches the above criteria. Well, if I change the virtual network, let's say I choose "Vnet1", then I will see that I've got [Video description begins] The host has changed "Rg1-vnet" to "Vnet1" in the"Virtual Network" dropdown menu. [Video description ends] a virtual machine scale set ready. So it's important to make sure if you're going to rely on another resource like a virtual machine scale set that you know the region it was deployed in, and also, as we see in this case, the virtual network it was deployed into. So I'm going to select that virtual machine scale set and its associated network interface for an IP address and I'll click "OK".

Now, that backend pool is pointing to a virtual machine scale set and that virtual machine scale set, so our backend pool then is being served by virtual machines and the scale set, each of which uses the same OS image, which could be a custom image, of course, that has your app software and its configuration. Next, I'm going to configure a health probe because we want to make sure that client requests are not routed to backend instances that are not healthy, that aren't responding.

So I'm going to click "Add" to add a health probe. This will be called "hp1", for health probe 1, and we're going to have the load balancer periodically, we can see the interval here, talk to port 80 on each backend virtual machine within the scale set, and after two consecutive failures, after two five-second intervals have gone by, it will be determined that VM is unhealthy and so, client requests will not be routed to it. So, I'll click "OK" and we're going to go to "Load balancing rules", and I'm going to click "Add", and I'm going to call this... simply call it "rule1".

Now this load balancing rule is going to be important because the load balancing rule, essentially, will have the frontend IP address and port number. So it's a public IP, Port 80, and we have to map that to what we want it to connect to on each VM in the backend, and in this case, that also happens to be Port 80. It doesn't have to be the same port number. We can also see this rule by default wants to use our health probe.

I'm going to go ahead and click "OK" to create the load balancing rule. And if we wanted to allow inbound remote management for connecting to each backend node, then we could configure inbound NAT rules to do that, but you don't necessarily need an inbound NAT rule if you want to remotely manage each backend instance, at least in this particular case, because if I go, let's say into my virtual machine scale set that we've linked to the load balancer, we can look at the instances that are up and running for that scale set, so I'll pop up the instances blade. There are two of them.

If I click on any one of them I'll see that they each have their own unique private IP address and so, I could remotely manage each backend VM instance simply by connecting directly to the private IP address, but I would have to be on the Vnet. You might set up a jump box such as through Azure Bastion to make that happen. Either way, it's important to be able to remotely manage the backend instances that are load balancing your app.


Application Gateway
The Azure Application Gateway can make decisions for routing or load balancing to backend hosts using things like URLs. It also supports a web application firewall. Those are two things the load balancer does not do. So let's deploy one, an application gateway, here using the Azure portal. [Video description begins] The host has launched the home page of the Microsoft Azure portal and the page url is https://portal.azure.com/#home. [Video description ends]

So I'm going to start by clicking "Create a resource" and I'm going to search for "application gateway", and I'll select it from the list, and as usual, I'll click "Create". [Video description begins] The host is at "Basics" tab of the "Create application gateway" page where there is a template to be filled in with the project details. [Video description ends] So I'll deploy this into an existing resource group [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] and I'm going to call this "appgw1", for App Gateway 1.

I'll deploy it in a region, let's say in this case here, I'll choose Canada Central, and here I have the tiers. Now, this is important if I want a web application firewall. So, if I want that kind of support then, I'd have to choose the WAF or the WAF V2 tier, ideally version 2, say as Standard. I want Standard V2 to have the latest options available. I can determine if I want to enable autoscaling with the app gateway. Yes, I do want to do that. So maybe I'll specify a minimum scaling unit of 1, and a max, let's say of 4, and down below, I can tie this to an existing virtual network.

So I'm going to tie this to Vnet1, let's say, and then, down below that I have to make sure I choose a subnet. So I'm going to choose a subnet and I'll click "Next". [Video description begins] The host chooses "Subnet2" in the "Subnet" dropdown menu. [Video description ends] Now, for the frontend configuration, much like we can have an internal [Video description begins] The host is now on "Frontends" tab. [Video description ends] or a private load balancer, as opposed to a public load balancer.

So too, here do we have the same options: a public or a private IP address for the frontend of the app gateway, or both, might want to do both. I'm going to leave it on... let's see let's do "Public" in this particular case. Notice that when I select "Private" it says if you have an App Gateway with a tier of Standard_v2, it doesn't support only private IP addresses, but if you went to just "Standard", not v2, it would.

However, in this case I'm going to go with "Public" and I can go and choose an existing public IP, but here I've got some public IP resources, they're already associated with other objects. All right, then I guess I'll have to click "New". [Video description begins] The host clicks on "Add new" and a template is appears, titled "Add a public IP". [Video description ends] So, "AppGw1" for App Gateway 1, "PubIP", that's what we're going to call it.

Notice that we are using the Standard SKU and the assignment here is going to be "Static". We don't even have the option of using "Dynamic" in this case. That's fine. Next, we have to define a backend pool. [Video description begins] The host is now on the "Backends" tab. [Video description ends] I'm going to click "Add a backend pool" [Video description begins] The host clicks on "Add a backend pool" and a template to be filled appears. [Video description ends] and I'm going to call this "BackendPool1".

Now what I can do here is specify what the backend VMs are. Are they IP addresses or fully qualified domain names? Do I want to add a bunch of individual virtual machines? Do I already have a virtual machine scale set, or an app service? I'm just going to choose "Virtual machine" in this case. [Video description begins] The host has chosen "Virtual machine" in the "Target type" dropdown menu. [Video description ends] And from the target drop down list, I'll choose the virtual machine.

So, I can keep adding multiple virtual machines that would be configured with the same app. In this case, I just have one but that's okay. So I'm going to go ahead and add that backend pool. I'll click "Next" for Configuration. Now, here we see routing rules. I could click "Add a routing rule".

And this is where we have a distinction between a traditional load balancer and what we're doing here with the application gateway, which is an OSI Layer 7 type of item, because it can look way beyond just packet headers that contain things like IP addresses and port numbers. So I'm going to call this "Rule1". For the listener name, I'll call it "Listener1". And I'll choose our public listing from the frontend IP and HTTP or HTTPS depending on what type of connectivity you want allow. I'll leave it just on HTTP, Port 80.

Now, after I've done that, I also have to specify the backend target. So I'm going to use a backend pool that I've already defined, that's "BackendPool1". I don't have any HTTP settings yet, so I'm going to click "Add new" to add some new ones, and I'll call this "HTTPSettings1" for HTTP. And the backend port here will be port number 80. I'm not going to enable cookie-based affinity or anything like that.

And down below, I'm just going to go ahead and click "Add" to add these HTTP settings. And now that's been filled in back here when we were configuring our routing rule. So, down at the bottom I'm going to click "Add multiple targets to create a path-based rule". [Video description begins] When the host clicks on this hyperlink, a template appears titled "Add a routing rule". [Video description ends]

And this is where I can specify, for example, "/media/*" so anything from media in the URL. Maybe I'll call this "Target1" and I can specify some HTTP settings and the backend target where I want to send that. [Video description begins] The host selects "HTTPSettings1" in the HTTP settings dropdown menu. In the Backend target dropdown menu, the host selects "BackendPool1". [Video description ends] So you could configure multiple backend pools to handle different types of URLs.

So /media might go to BackendPool1 because the VMs in BackendPool1 are optimized to stream media. I'll just go ahead and click "Add" and then I'll click "Add" again. So now we've got our routing rule. Of course, we had our frontend and our backend pool. Let's click "Next" for Tagging. I'm not going to tag this application gateway, so I'll click "Next : Review + create". It's going to check the validation which has passed, and so, I'm going to create the application gateway. I'll click the "Create" button.


Load Balancers and Templates
In Azure, load balancers can be deployed and managed using the portal, using PowerShell, using the CLI, and also using templates. We're going to take a look at how to do that here in the portal, how to create a template deployment for a load balancer. So I'm going to start the portal by clicking "Create a resource".

And like I normally would do when I want to deploy a template in this manner, I'm going to search for the word "template" and I'm going to choose "template deployment", and I'll choose Create. [Video description begins] The host is redirected to a new page called "Custom deployment" with various hyperlinks. [Video description ends] Now I could build my own template in the editor if I wanted to do this from scratch and I knew the syntax that I need to use. Or I could go down, let's say, or GitHub, and I could search it up.

For example, if I type in the word "load", I could start with, let's say, "101-internal-loadbalancer-create". I'm going to use that template since I do want to deploy an internal load balancer. So I'm going to select that. I'm going to go down and choose "Select template". [Video description begins] The host is automatically redirected to a template page called "Create a Load Balancer with Inbound NAT Rule". [Video description ends]

The template that you would use would determine what you need to specify for values, in this case, the resource group where I want it deployed. Then, also the VNET and subnet prefix. So, apparently this template is going to create a new VNET and subnet within that region, which is fine. I'm going to go ahead and click" I agree to the terms and conditions".

Now notice, when you're back up here at the top, you could also have chosen to edit the template. And from here you can make changes. So here's the JSON syntax for this particular template. You can see here, it's going to build our subnet, it's going to build our VNET, and so on. However, I'm going to discard that because I don't want to edit the template.

So we're back here where we left off. I'm going to go and click the Purchase button to use this template to deploy our load balancer. And after a moment we'll see our deployment succeeded. So let's just go to all resources here. We're going to look for load balancers. Now notice the template didn't even give us the chance to specify a name for the load balancer.

So I'm going to select "Load balancer", we can see there's only one, here in our subscription, and it's called "loadBalancer1". So this is the load balancer that was deployed as a result of us having selected that template. [Video description begins] The host clicks on the loadbalancer1 and is now at the overview tab. He then clicks on the backend pool tab to examine the details. [Video description ends]

However, if I go into the backend pool, it did create a back end pool but we don't have any virtual machines or scale sets, or anything associated with it. So it did part of the work. Of course, the template could have been coded to do all of the work, but sometimes you'll want to use a template, an ARM template, to get the majority of the hard work done, the underlying work of just creating the resource and getting it deployed. And then you'll want to go in and tweak details in this case like the Backend pool, Health probes or Load balancing rules.


Load Balancer Troubleshooting
Even though you might have successfully and correctly deployed a load balancer configuration, it doesn't necessarily mean that everything's going to work. There could be other problems such as with the backend virtual machines and their configuration. So for example, here in the portal I got a load balancer called LB1 and in the overview blade, over on the right, I can see it has a public IP address.

Okay, I'm going to copy that and I'm going to see if we can pull up the web page for a web app supported by this. Now, that's assuming that your load balancing a specific web app with the front end. So let's open up a new browser window and see what happens when we connect to that IP. [Video description begins] An error message is displayed on the screen. The page requested cannot be reached. [Video description ends] And this is what we get.

I can't seem to pull up anything from that IP address. If I know that I'm load balancing a web app that has a frontend page it shouldn't be showing up, then this is a problem obviously. So what do we do about this? One of the first things we should do to troubleshoot this is perhaps go back to our load balancer and look at the backend pool. [Video description begins] The host comes back to the Microsoft Azure tab and clicks on the "Backend pool" option under the "Settings" section. [Video description ends] So what is being served up here in the backend?

Well, if I look at the backend pool, it looks like a virtual machine called WinSrv2019-1, the status of which is that it failed. Okay, let's click to examine that a little bit. What's the problem? You can have a health probe that checks the health of the virtual machine. And at one point in time it might have had a problem. So if you have a failure with a backend server, naturally that's going to translate to being a failure or a problem with the low bouncers since it depends on them. Now, you might have multiple backend VMs.

If only one has failed, then it means examining the details, clicking links and finding out what the problem with that specific VM is. So back here in the Load balancer, if I go to the backend pool and click directly on it, if that virtual machine is problematic and I can't solve the problem within it, then I could look at the virtual machine association here. This particular backend pool is linked to virtual machines as opposed to a scale set. And I can click the trash can to remove the reference if I couldn't solve the problem with that VM. [Video description begins] The host is now back to the virtual machines tab. [Video description ends]

Now the other thing to do is to also take a look at the actual virtual machine. So I've got it here listed as running, so I'm going to open it up and I'm going to make a connection directly into it. Now, this virtual machine has its own public IP address. If it only had a private one, then I could use, for example, Azure bastion to make a connection to it. But either way, one way or another we need to be able to troubleshoot low bouncing issues by getting into the backend VMs in some cases.

So I'm going to go ahead and click "Connect" here to make a connection to this Windows VM. And I'm going to download the RDP file. [Video description begins] The host is now in the Server Manager dashboard. [Video description ends] So here, within my backend virtual machine, the Server Manager has started up and if I go to "Add Roles and Features" just to step through what I would normally do to install the web server, I can see the web server component is already there. So we should also take a look at the specifics.

In this case for the web app, I should open up the Internet Information Services Manager tool and make sure that the web app, for example, is listening on port 80, assuming that's the load balancer rule and how it's configured. So if I look at "Sites" here, we've got the Default Website and if we just take a look at that by right clicking and editing the bindings well, it is listening on port 80 so it's not like it's listening on port 81 or some non-standard port. [Video description begins] The host is now back on the Azure Portal, at Home > lb1 | Backend pools. [Video description ends]

Back here, in our load balancer, we should probably go to our load balancing rules just to make sure it looks like the correct port numbers are being referenced. This is another important part of troubleshooting and it is: Frontend Port 80, Backend Port 80, which we just verified, was the configuration. The other thing we should do is check out our network security group for our Windows virtual machine. [Video description begins] The host is now on another browser tab, at Home > Virtual machines > WinSrv2019 - 1 | Networking. [Video description ends]

So, when I look at my virtual machine and go to the Networking blade, I can see "Rules". Well, I think we might have a problem here because we don't seem to have an allowance for Port 80. We have one to allow inbound Remote Desktop Protocol on port 3389, Vnet inbound, low bouncer inbound, and then it denies everything else. Well, that's a problem if you don't have an allowance for port 80 here, just like in the OS within the VN there. You want to make sure that you don't have file rules blocking traffic. Well, that's going to be a problem if it's not setup correctly.

So what we're going to do here is going to our network security group and we're going to add a new inbound security rule to allow port 80 traffic. So I'm going to click the "Add" button. We're just going to fill it in accordingly. So the destination port here is going to be Port 80. [Video description begins] The host clicks on the "NSG-Windows" hyperlink in the networking tab. He is redirected to another page, then goes to the"Inbound security rules" tab, under the settings section, and clicks "Add". [Video description ends]

In this case over TCP for our web app [Video description begins] The host changes the "Protocol" from "Any" to "TCP". [Video description ends] and I'll call this Port 80 for the rule. I'll leave the Priority at 110, that's going to be fine, and I'll click "Add" to add the rule to the list. While that's happening, let's go back to our configuration once again for our load balancer because the other thing to think about in the backend pool is that if we click on it, in this case, we'll see our virtual machine. [Video description begins] The host goes back to the "Backend pool" tab that's open on the browser. He clicks on the backend pool to check the details. [Video description ends]

We want to make sure we still have the correct IP address. So currently, when this backend pool was configured, it referred to the virtual machine with an IP, a private IP, of 10.0.1.5. So we want to make sure, for example, if we go back into our virtual machine, that that indeed is the correct private IP address. And it is in this case 10.0.1.5. [Video description begins] The host is now again on the "Overview" tab of WinSrv2019-1. [Video description ends]

So now that we've corrected the problem, which was simply a network security group rule that we added to allow Port 80 traffic, we can see when we connect to the public IP of the load balancer, it's now making the correct connection to the back end web server.


Azure Site Recovery Overview
In a business environment it's crucial that our supporting IT systems are up and running, and that data is available and kept secured. This is where Azure Site Recovery comes in. It's all about business continuity, and also disaster recovery. With Azure Site Recovery we can enable fail over and fail back. This means we can have replication enabled between primary and secondary sites, or Azure regions.
So you could replicate virtual machines, for example, that might be running a mission critical workload. You can also enable application snapshots. So this would take the state of your web application, including memory, transactions, and also any disk files that are related to that. So Azure Site Recovery could be called Disaster Recovery as a Service, or DRaS. Now it's treated as an alternate recovery site as well.
So, for business continuity, you might have a physical on premises facility, or you might have a data center location, or it might be just a corporate network within your building, and you might want to use the Azure Cloud as the alternate network location for IT services. So your primary location is your on-premises network. If something happens to disrupt that, then you could already have had things like physical servers or on-prem virtual machines replicated into Azure that are ready to take over the workload.
What we're talking about doing here is planning for failure. It's inevitable that there's going to be some kind of a disruption at some time, and we don't want to be caught unprepared. We want to have a plan in place before those things happen. Now, you can work with Azure Site Recovery in a number of different types of servers, such as on-premises physical servers can be replicated into the Azure cloud. Azure Virtual Machines can be replicated to a secondary Azure region. You could have VMware Virtual Machines or Microsoft Hyper-V Virtual Machines that you protect with Azure Site Recovery.
Now, not only is fail oversupported, so we can fail over to a virtual machine running in Azure if we have a disruption on-premises, but also fail back. You can fail back to your primary version of a server, for example, on-premises. There are some exceptions, for example, if you try to fail back from Azure to an on-premises physical server, then you're going to have a problem. But if you have an on-premises virtual machine and you failed over to it in the cloud, you'll be able to fail back to it on-premises.


Site-to-Site Recovery
You can protect mission critical Azure VMs by enabling Site Recovery. Now, Azure Site Recovery really lets you copy or replicate a VM to an alternate region, and for that, you're going to need a recovery services vault. We're going to start here in the portal by opening up an existing recovery services vault, because this is one way that you can initiate the process of enabling Azure Site Recovery for a virtual machine.
So I'll scroll down in the navigation bar [Video description begins] The host clicks on the option "Vault1" on the Azure portal. [Video description ends] over on the left and I'm going to choose "Backup items", and notice, among the many things listed here for Azure virtual machine, we have 0 for the backup item count, so we are not yet backing up any Azure VMs. So having done that, that's fine. We're going to scroll up a little bit, and I'm going to click "Site Recovery" over on the left and I'm going to choose "Prepare Infrastructure".
From here, I can determine exactly what it is I want to protect. [Video description begins] The host is now on a section called " Protection goal", the one on the Prepare Infrastructure page. [Video description ends] Is the Virtual Machine in Azure or is it on-premises? [Video description begins] The host selects "On-premises" from the dropdown menu. [Video description ends] And naturally, if I'm doing a migration, I can choose that otherwise, I could choose "No".
Then I can select what it is I'm migrating, whether it's virtualized with Hyper-V, VMware, or if it's a physical server. However, in this case I want to protect an Azure virtual machine, so I'm going to select "Azure" for "Where are your machines located?". [Video description begins] The host goes back on the dropdown menu and changes the "On-premises" option to "Azure". [Video description ends] And I also want to replicate it to Azure, so I'm going to go ahead and click "OK", and then I'll click "OK" yet again.
Then I would click on "Replicate Application" and continue from here. So I'm going to choose the source environment. I've opened up another browser window where we can view our virtual machines. I've got one called WinSrv2019-App1, it's running, and notice it's in the East US location or region. So back here, configuring replication, my source environment is Azure East US and my resource group is going to be Rg8, resource group 8, notice that is where that virtual machine is deployed.
So that's great, that's my source and environment. I'm going to choose OK. [Video description begins] The host is at the "Enable Protection" tab on the second section called "Virtual machines". [Video description ends] There's the virtual machine WinSrv2019-App1, so I'll put a check mark in the box, I'll click "OK". Then I have to select the target location, so from the drop down list I have a number of options. I'm going to leave the selection here of "(US) West US".
Down below, I can see in that target location, it's going to create a new resource group called Rg8-asr. The asr stands for Azure Site Recovery. It's going to do the same type of thing to build a target VNet. I've got a cache storage account here that will be in the source location that's used basically as staging before replicating, in this case, to West US. And it's going to replicate a managed disk because my virtual machine is using one disk.
And down below, we can see the replication policy. So recovery point retention is for 24 hours and app consistent snapshots are taken once every 4 hours. So that's fine, I'm going to go ahead and click "Create target resources". So it's going to create these in the target region, in my case, West US. I'll click "Enable replication". [Video description begins] The host goes back to "Vault1 Site Recovery" page. A window has appeared that says enabling replication for 1 vm(s). [Video description ends]

And we can see in the notification area in the upper right, it's currently enabling replication for 1 VM. And before too long we can see that it successfully enabled replication for one VM. Now, back here in backup items, we still don't see anything for Azure virtual machine because we haven't enabled backup, we've enabled replication, so this is fine. If I go to "Replicated items" we'll see all servers where replication was enabled. We've got one that failed here, normally due to an unsupported configuration or operating system.

But our Windows server hosting our app is listed as healthy when it comes to replication health. Although notice, still at this point, while replication is enabled, 0% is synchronized. So you can watch over this and click the "Refresh" button to track. Let's just flip over to our other open window here where we have our virtual machine selected and in the navigation bar. I'm going to scroll down under "Operations" because I want to click on "Disaster recovery". This is where we will see the fact that we've got replication enabled.

Now, it's still 0% synchronized, and if we were, for example, to go to "Properties" we can see a lot of the properties, again, 0% synchronized. We can see the active location, the replication policy, and if we take a look at "Compute and Network", for example, compute and network resources, we could see it was unable to retrieve anything, because initial synchronization is still happening, and if we click on "Disks" we could still see that it looks like it's synchronizing the OS disk to the target location, so to the replica disk name.

And if we go back and take a look here we can see that it's 97% synchronized, still looking at the Disks blade, it's almost done. Back here, in the recovery services vault, we're still looking at Replicated items. I've clicked "Refresh" and notice now our replication health is healthy and that status now says "Protected".


VM Failover
In this demonstration, I'm going to use the portal to test virtual machine failover in Azure. Now, I've already enabled replication through Azure site recovery, for an Azure VM. So, essentially replicating from Azure to Azure, replicating a VM to another region. Let's take a look at how to test failover. [Video description begins] The host is at the Virtual machines page of the Azure portal. [Video description ends]

So I'm going to open up an existing virtual machine, where I've enabled replication. Now we can check this out in the navigation bar by going down under "Operations" and by clicking on "Disaster recovery". When I do that, in the "Overview" section, I'll get an indication as to whether or not protection is enabled.

And we can see here, the status is "Protected" and that the "Replication health" for this VM is such that it is "Healthy". However, it says "Last successful Test Failover", "Never performed successfully". Well, as part of a recovery drill in the event of a disruption, such as in the primary region of a virtual machine, we should go through and test failover for mission-critical workloads running in these VMs.

So I'm going to do that. I'm going to click the "Test Failover" button up here at the top. So, for the "Failover direction", it already knows where I'm failing over from, "East US" is the primary location. I've already enabled replication. So there's a copy of it in "West US". That's already set and it's grayed out, I cannot change it, and that's normal. What I can select is the "Recovery Point". So I might have numerous recovery points over time that I would like to use for performing this test failover.

So what I'm doing is failing the VM over to the recovery point that I select here from the list. And if you've got multiple VMs, you might actually have this set up through a recovery plan. You can use failover for multiple VMs at once. But in this case, we don't have a recovery plan, it's just a single VM. I need to choose the virtual network, the "Azure virtual network", where I want this created. You want to make sure that this is not one that's used for mission-critical services and production. And after that, I'll go ahead and click on "OK".

We can see it is now starting the test failover for this VM. So, at this point, if I were to look at my list of virtual machines, I should notice the presence of a new virtual machine. It's named similarly to the original except it has "-test" added at the end. It's running and we can see it's in the target "Resource group" that we selected when we tested failover. Also notice it's in the target region, in this case, "West US". The source region is "East US".

So we could test connectivity to an app running within it or remoting into it for RDP and whatnot, if we wanted to fully complete this test. However, at this point, I am finished with that. So I've tested the failover. [Video description begins] The host closes the Virtual Machines tab and returns to the Overview tab of the source Virtual Machine. [Video description ends]

So, if I go back to my source virtual machine, and if I take a look at the disaster recovery options, we now have the option to "Cleanup test failover". So I want to make sure I do that to delete the newly created virtual machine. [Video description begins] The host clicks on the "Cleanup test failover" tab. [Video description ends] I am just going to put in some notes here. "Testing is complete, delete test failover virtual machines". I'll turn on that checkmark and I'll click "OK".
Azure Backup Service Overview

[Video description begins] Topic: Azure Backup Service Overview. Your host for this session is Dan Lachance. [Video description ends]

Data backup provides availability in the event that production data becomes corrupted or deleted in some way, we can restore it from backup. And there are a few considerations when using "Microsoft Azure Backup" services. We can back up "On-premises" data in the form of "Files and folders". Even "Hyper-V and VMware VMs" we're hosting on prem, "SQL server, Exchange server, SharePoint server installations.

We can even back up system state, which would include things like operating system boot files, registry settings on a Windows Machine. If it's a Windows domain controller server, even backing up the database for active directory is part of system state. Then we can also perform a "Bare Metal recovery". When you set up a "Bare Metal recovery", what you're really doing is telling Azure Backup you want to backup the entire operating system, so all the OS files and the data on those volumes. So really, it's everything except for user data.

To work with Azure Backup, you need to install the "Microsoft Azure Recovery Services Agent", or the "MARS" agent, on your server that contains the services you want backed up. And that will allow the communication to the Azure cloud, specifically to the recovery services vault for backup purposes. Azure backup lets you backup Microsoft Azure virtual machines, "Azure SQL Database" and "Azure File Share".

The process for setting up on-premises backup, let's say if we have an on-prem Windows Server we want to back up to the Azure Cloud, would be to first make sure that we have a "Recovery Services Vault" created in Azure. Next, we would "Download and install the MARS agent" on the server, whose services we want backed up. And then we would "Register MARS agent with the recovery services vault". Then after that you can enable the backup for the services on that server where the MARS agent is now installed.
Recovery Services Vault

[Video description begins] Topic title: Recovery Services Vault. Your host for this session is Dan Lachance. [Video description ends]

[Video description begins] The host is at the Azure home page. [Video description ends] Some services such as using Azure backup solutions require a recovery services vault. And so in this demo, I'm going to use the portal to create a recovery services vault. I'll click "Create a resource" and I'm going to search for the word "recovery". And I'm interested in "Backup and Site Recovery". So I'm going to select that option.

That's going to let me create a recovery services vault. So I'm going to choose "Create". [Video description begins] The host is at the "Basics" tab of "Create Recovery Services Vault". [Video description ends] Okay, so I need to tie this to a "Resource group". I'll do that, I'm going to call this "Vault1". [Video description begins] From the Resource group dropdown menu, the host selects "Rg1". [Video description ends] It's going to check that that name is valid and it is, and it's going to be in the, let's place that vault in our configuration.

Let's leave it actually in the "Canada Central" region. I'm going to put it there. I'm going to click "Next" for tagging. I'm not going to tag this fault. And after that, we're just going to click "Review + Create" and after which we will click "Create". So we're deploying a recovery services vault. [Video description begins] The host is redirected to the a page with a message that states "Your deployment underway" and after that, it states "Your deployment is complete". [Video description ends]

So now the vault has been deployed. I'm going click "Go to resource" so we can take a look at it. So you can think of a recovery services vault in Azure as being essentially the launching pad for your business continuity solutions. So for example, let's scroll down here and I'm going to click, under "Getting started", "Backup".

This is where we can determine if we want to backup items sourced in "Azure" such as "virtual machines", "SQL Server", "Azure FileShare". Or we might select "On-premises" and choose "Files and folders", or on-premises "Hyper-V" or "VMware Virtual Machines", on-premises "SQL Server", "SharePoint", "Exchange", and so on. [Video description begins] The host goes through the different options to select from the dropdown menus. [Video description ends]

We can also go to our "Site Recovery" option on the left and [Video description begins] On the "Site Recovery" tab, the host clicks on the "Prepare infrastructure" option and is redirected to the corresponding page. Currently, the first section is open, named "Protection goal". [Video description ends] start to prepare our infrastructure.

This is where we might choose, okay, we've got our virtual machines that might exist "On-premises". We want to make them available for high availability in "Azure". It asks, "Are you performing a migration?" Well, we could do that, but I'm going to choose "No". And I can tell it that my source on-premises would be "Hyper-V" or "VMware virtual machines" or they're not virtualized.

You can actually enable failover for an on-premises physical server to an Azure VM Failback isn't supported in that context to the on-prem physical server but failover to the VM in the cloud is. Also, here, we have a number of other options available within the recovery services vaults, such as configuring "Backup policies". [Video description begins] The host closes the "Site Recovery" tab. Back on the Vault1 page, he clicks on "Backup policies" tab on the left, under the Manage section. [Video description ends]

So not only are we talking about high availability, such as for virtual machines, but also the ability to back data up into the Azure Cloud. Which really enables data high availability. So the Recovery Services vault then allows for all of this disaster recovery planning.
Azure Backup Policies

[Video description begins] Topic title: Azure Backup Policies. Your host for this session is Dan Lachance. [Video description ends]

In this demonstration, I'm going to use the portal to create a backup policy within a Recovery Services vault. So I've already got a vault I've created here, it's a recovery services vault, it's called "Vault1". So I'm going to click to open it up. And within its navigation panel on the left, I'm going to scroll down until I get to the "Manage" section where I can see "Backup policies". So I'm going to pull up that blade.

And I see on the right I have two default backup policies here automatically. One is called" HourlyLogBackup" for "SQL Server in Azure VMs". And the other is called "DefaultPolicy", it's for "Azure Virtual Machines". However, I want my own custom policy for "Azure Virtual Machines". So I'm going to click the "Add" button.

You might even have a policy for "Azure Virtual Machines" that applies to only some, where you want to use the default VM policy for others. Either way, in this case, I can select" Azure Virtual Machine", "Azure File Share", "SQL Server in Azure VM," or "SAP HANA in Azure VM". But we're talking about "Azure Virtual Machine" backup policies here, so I'm going to select that. First thing I have to do is give this a name.

So I'm going to call this "ProdVMs", as in Production Virtual Machines. And we can set the backup schedule, whether it be daily, or weekly. I'm going to leave it at daily and I can set the time of the day I want that to fire off. So maybe after hours, at 7:30 PM, and I can select the specific time zone if I so choose, or I can use "UTC". Next thing is, how many days do we want to use retention of instant recovery snapshots? The default here is two days and I'm going to leave that.

As we go further down, we have the retention range of the backups, which is going to be 180 days, that can be changed. I want the retention of a weekly backup point. And we can also specify details related to the "monthly" and "yearly" backup point retention period. So we can specify the details when exactly that is going to be taken, and for how many months or years in the case of the yearly backup point that we want that retained.

If you're using Azure services that set up VMs for you in the background, in other words managed VMs, you can also specify resource group information for those. Specifically to store their recovery points. So I'm going to go ahead and click "Create" to create this policy. And before too long, it's done. So let's just go back to our "Vault1" Backup policies.

We can now see we've got a new policy called "ProdVMs" and it's of type "Azure Virtual Machines". We can click on it to open it up at any point in time to see the details that were configured. And at any time, we could go back and modify and change whichever options are required. So this backup policy, then, can be selected when we start enabling backup for Azure VMs.
Azure VM Backup and the Portal

[Video description begins] Topic title: Azure VM Backup and the Portal. Your host for this session is Dan Lachance. [Video description ends]

One way to enable backup for an Azure VM is to use the portal. So to get started here, I'm in the "All resources" view, I'm just going to filter the list for my vault. I've got a recovery services vault called "Vault1", and it's in the "Canada Central" region. And I filter this again looking for a virtual machine called "AppServer1", it's also in the "Canada Central" region. So I want to enable protection of "AppServer1" to my vault, "Vault1", [Video description begins] The host is at the Azure portal and uses the search bar to look up the relevant information. [Video description ends]

I want to set up backup. So I'm going to click on my server, my virtual machine. And what I'm going to do in the navigation bar on the left is scroll down under "Operations" and I'll choose "Backup". Now when we look at it from this perspective, we have the option of configuring backup from here. You can also do it from the vault, but I'm going to continue from this perspective, from the VM's perspective.

We can either create a new recovery services vault but there's no need, we already have one in this region called "Vault1". Within the vault, we can select the appropriate backup policy. I've got a custom backup policy I created previously called "ProdVMs". The backup policy determines things like retention periods for backup and restore points.

So I'm going to go ahead and set "ProdVMs" as the backup policy in this case. And we can see that when I do that, it starts showing me down below some of the details within that policy. So the "Retention range" for "daily backup points", "weekly", "monthly", "yearly". I'm okay with that, so I'm going to go ahead and click "Enable backup". [Video description begins] The host is now back to the "All resources" page of Microsoft Azure. [Video description ends]

After a moment, we can see on our notification area that it succeeded, the backup configuration. So let's take a look at this time from the perspective of the, well, let's start with the server. But then we're going to go into the "Vault1", and see what it looks like on that end of things. So back here in our virtual machine, [Video description begins] The host clicked the Appserver1 and is now redirected to its "Overview" page. [Video description ends] let's go back to where we enabled backup.

So I'm going to pull up the "Backup" blade. This is where we initially came to link it to our vault. So instead now, of course, we have a status screen. So we can see any "Alerts" or "Jobs", and we can see the "Last backup status". So it says, "Initial backup pending" because we just enabled them. We can also see the affiliation of this VM with the "Recovery services vault" and the "Backup policy" that's currently in use and any restore points that are available.

Notice we also have the option to perform an on demand "Backup now". So I'm going to go ahead and click on that. We can specify the retention period for this backup, I'll accept the default value, and I'll click "OK". I don't have to do that because we have it scheduled. But, however, we can perform on demand backups whenever we feel the need. So I can click the "View all Jobs" link to get to the jobs page, where we can see the configuration of backup for various servers, including "AppServer1". And we can see that currently a backup is in progress.

So what's happening is a snapshot of the VM is being taken and the backup is stemming from that. So therefore, production workloads are unaffected when it comes to performing these backups, to protect your data in your Azure VMs.
Azure VM Backup and the CLI

[Video description begins] Topic title: Azure VM Backup and the CLI. Your host for this session is Dan Lachance. [Video description ends]

In this demo, I'm going to use the CLI to enable backup of an Azure VM. Before I do that here in the portal, let's go to the VM in question called "AppServer2". We can see its state is that it's currently "Running". So I'm going to click on "AppServer2". The reason is because first of all, I want to check to see that it's not already associated with the recovery services vault because it can only be associated with one vault at a time.

So I'm going to scroll down under "Operations". I'm going to click "Backup". And what we should see is it prompting us to associate it with the vault. And that's great. It's not associated with the vault, but we don't want to do it here in the portal. While we're in here though, I'm going to scroll up and choose "Properties", because what I want to take note of is the ID, the "Resource ID" here for the VM. So I'm just going to copy that. [Video description begins] The host scrolls down to reach the Resource ID and copy it. [Video description ends]

We could acquire that in many different ways, including from the CLI, it doesn't matter. But I'm going to want that information because I'm going to want to check that backup protection was enabled in the CLI. And I'm going to need the ID to do that. So let's go into the CLI. [Video description begins] The host opens up PowerShell. "PS /home/danlachance72> is already written on the screen. [Video description ends]

So to enable VM backup, I'm going to run the "az backup protection", after which I'll then specify I want to enable it for VM. So "enable- for- vm- -resource- group", it is "Rg1". That's where my virtual machine is deployed in my vault as well. "--vault-name". And I'm going to specify my vault which is called "Vaul1 -- VM" and it's called "AppServer2". And I also have to specify the backup policy I want to use. So "--policy-name", the policy is stored within the vault. I'll just use the default one which is called "DefaultPolicy" and I'll press Enter.

Well, if you don't spell the name of the vault correctly, you'll get an error. Let me just spell that correctly and press Enter once again. Okay, and we have our returned JSON output. So all looks good. Let's clear the screen. Now what I want to do is just check the status. And we can do that here with "az backup protection check -vm".

This is where I need the "VM ID", [Video description begins] The host clears the Powershell screen and pastes the vm ID that he copied previously. [Video description ends] you can see from the parameter of the same name. And I've pasted in the resource ID for the VM that we copied from the portal previously. Let's press Enter and see what it returns back. [Video description begins] A message appears in the Powershell that reads "Command group backup is in preview. It may be changed/removed in a future release". [Video description ends]

Okay, this is good. What it's really telling me is yes, that backup protection is enabled for that VM and it's associated with Vault1. We can do the same thing by going back into the GUI and taking a look. So why don't we do that just to make sure? [Video description begins] The host minimizes PowerShell, returns to the Overview blade of the AppServer2. [Video description ends] So I'm just going to flip over to a different blade here in "AppServer2"'s properties.

And let's go all the way back down, yet again, under "Operations", and click "Backup". Because remember last time, what we were seeing is it was prompting us to associate the VM with a vault. Well, now that's no longer the case because we associated it with a recovery services vault for backup purposes using the CLI.
Azure VM Backup and PowerShell

[Video description begins] Topic title: Azure VM Backup and PowerShell. Your host for this session is Dan Lachance. [Video description ends]

In this demonstration, I'm going to be using PowerShell to enable Azure VM Backup. Now, in order for that to happen, you need a recovery services vault. Let's just take a look for that here in the portal just for a second. So I'm going to go to "All resources", and well, actually, we can just filter it from here, that's just as well. So I'll just type in a couple of letters here to make it unique, there it is, "Vault1". I want to just double check, first of all, that there is a set of "Backup policies" in here.

There always are, there are a couple of default ones, including one called "DefaultPolicy". [Video description begins] The host is on the "Backup policies" tab of Vault1. [Video description ends] Okay, so we know we've got a vault called "Vault1". And we've got a couple of policies, specifically two of them that can be used for backing up Azure VMs. The policies themselves contain a lot of settings related to backup frequency and retention range, I want to keep the backups at the monthly and yearly level, for example.

[Video description begins] The host clicks on the Default policy. It displays the backup frequency and below it, it reads Daily at 1:30 AM UTC. It displays the retention range, the retention of daily backup point and the retain backup taken every day at 1:30 AM for 30 days. [Video description ends]

All right, let's go back and take a look at our VMs. I've got one in this list called "AppServer3", not yet associated with the vault but it will be when we're finished here in PowerShell. [Video description begins] The host opens up PowerShell. It reads PS /home/danlachance72. [Video description ends] So to get started, what I'm going to do is create a policy variable, so "$policy". What I'm going to store in there is the return result of running "Get-AzRecoveryServicesBackupProtectionPolicy", that's a long cmdlet name, that's what it is. And all I'm going to do is specify that the policy name I'm interested in is "DefaultPolicy".

Now, I don't have to put that in a variable, I can just specify it on the command line. So the first thing I'm going to do here in PowerShell, is I'm going to run "Get-AzRecoveryServicesVault". And I'm going to point to a vault named "Vault1". And I'm going to pipe that to the "Set-AzRecoveryServicesVaultContext" cmdlet. We need to set the context so we're essentially pointing to Vault1. [Video description begins] The PowerShell now displays four warning messages. [Video description ends]

Now, you might get some messages that this cmdlet will eventually be deprecated. You also have little note here that says if you want to suppress this message because it's not deprecated yet, then you can go to that web URL and figure out how to do that. I'm not going to suppress the messages, I don't mind it. The next thing I'm going to do is create a policy variable.

Now that we're pointing to the right vault in our context, I'm going to make variable called "$policy". It's going to store the result, retrieving the policy from the vault using the" Get-AzRecoveryServicesBackupProtectionPolicy cmdlet. [Video description begins] The host clears the PowerShell screen and pastes the $ policy again. [Video description ends] That's a mouthful, and I'm going to give it the name, the name of the policy that I want is called "DefaultPolicy".

So I'm going to go ahead and press enter to get that into the variable. Okay, now, that we've got that, we can actually enable protection or backup for an Azure VM using the "Enable-AzRecoveryServicesBackupProtection" cmdlet. I'm going to specify the resource group and the name of the virtual machine that I want to enable protection for. And then finally, "-Policy", I will pass it my "$policy" variable that we've set above.

Let's go ahead and press Enter and get this going. And before too long, we'll see that the operation is completed. So "ConfigureBackup Completed", so looks like it's been done. [Video description begins] The PowerShell screen reads: Workload name appserver3, operation configure backup, status completed, StartTime 4/3/2020 5:38:21 PM and EndTime 4/3/2020 5:38:52 PM. [Video description ends]

Let's just check our work here in the portal. So that was "AppServer3", so if I click on that, and [Video description begins] The host closes PowerShell and returns to the Azure portal. He clicks on Appserver3. [Video description ends] if I scroll down in the navigation bar, if we go down to "Backup", now, "Backup", of course is way, way down underneath the "Operations" section. So under "Operations", I'll click "Backup".

Normally it would be prompting us for associating the VM with a vault but it doesn't here, because it's already associated with the vault because we set it up in PowerShell. We can see here, "Vault1" is what it's associated with using a policy called "DefaultPolicy".

Azure VM Restore
Let's first check out what's there, what kind of backups are there. So it looks like we've got an "Application consistent" backup. And it looks like it was taken on a specific date and time, we can even click the "View All jobs link" and we would see here that a backup was taken and successfully completed. [Video description begins] The host closes the "View all jobs" link and goes back to "Backup". [Video description ends] Okay, that's perfect.

So now what we want to do is restore. Notice that we have a couple of options at the top, we can choose "Restore VM" and we can choose "File Recovery". As you might imagine, restoring the VM restores the entire virtual machine and you have a couple of options when you do that. And you'll see that if we click on it, we have the option of restoring to a new virtual machine or we can overwrite the existing one.

[Video description begins] The host is at the Restore tab which consists of two steps: 1. Restore point and 2. Restore configuration. [Video description ends] So I'm going to select my restore point and I'll click "OK". And this is where you'll see you can "Create new", or "Replace existing". So creating a new virtual machine means specifying a name for the VM and setting up the affiliation for the "Resource group", the "Virtual network" and the "Storage account". Whereas up the top if we chose "Replace existing", we get to determine that we want to replace the disks and we chose a storage account for a staging location to get the VM back to the point in time specified by the snapshot. So that restores the VM itself.

But what if the VM config is good, it's just some of the data within it that we need to restore? [Video description begins] The host closes the "Restore" tab and goes back to "Backup". [Video description ends] That's where file recovery kicks in. So let's click on file recovery, choose a restore point, and the next thing to do is to click "Download Executable". Because this is going to download a script that will let you mount the backup as a local drive where you run the script. And from there you can cherry pick which items you want to restore.

That's exactly what I'm going to do. So I'm going to download this executable. When I click that it generates a script and a password. So I'll see that down here after, which is unique to this mounting session. And after it generates it, the script will be available for download. So I'm going to go ahead and download it. [Video description begins] As soon as the host clicks on "Download", a cmd window pops up. It reads: "Please enter the password form the portal as is and press enter:". [Video description ends]

When I run the script, it asks me to enter the password that's provided in the portal and that was generated down here. So I'm going to go ahead and copy that to the clipboard. And, I'm going to paste it in here, where it's being asked for, and I'm going to press Enter. [Video description begins] A PowerShell window automatically launches. [Video description ends]

Now depending on your machine, you might have to download that script and run it with administrative privileges. But anyways, this is what it's going to look like, "Connection succeeded". It's going to attach the volumes for the recovery point. And then, we can see now here we have a new drive. [Video description begins] As the connection succeeds, a windows notification window pops-up to inform that there is a new drive. [Video description ends]

So let's go ahead and take a look at this in Windows Explorer. [Video description begins] The host is now in File Explorer, in drive F. Various folder directories can be seen. [Video description ends] So now here in the file system, I can see I now have a drive letter F, which is showing me the contents of what was backed up from that VM. So I could cherry pick the items I want to restore by copying and pasting. Back here in PowerShell where the script ran, we can see drive letter E was a system reserved disk and F, the windows partition of our backup VM.

Then says, open up Windows Explorer, browse for your files, copy them, and then go to the portal and go to step three where you need to unmount disks. So back here in the portal that's just down below here, step three, "Unmount the disks after recovery". So I'm going to go ahead and click that. And then we'll get a message after a moment that says that the unmount was successful. So we're done. We were able to restore or recover files from a backup Azure VM.


File Server Backup
You can enable protection for on-premises file servers, whether they're physical or virtual, so that you can back them up to the cloud. The only real requirement is having a recovery services vault and then installing a backup agent on the server that you want to protect. So to get started here, let's go into a vault that we've got defined previously, a recovery services vault here in the portal. And in the left hand navigator, I'm going to go into the "Getting started" section and I'm going to click "Backup".

Now it says, "Where is your workload running?" Well, in this case, it's going to be "On-premises". Then it asks, "What do you want to back up?" Well, we can see there's quite an array of options here. "Files and folders", "VMware", and "Hyper-V virtual machines" that we might be hosting on-premises, SQL servers, SharePoint Exchange, "System State", "Bare Metal Recovery". The list goes on and on.

In this example, we're going to select "Files and folders" that will go under the next step to "Prepare infrastructure". I'll click on that button. So it says you need to download the agent for Windows Server or for the Windows Client. Okay, so I can click that link to download and then install the agent. So I'm going to go ahead and click that link because I want it installed on this local host where I'm running this from and I'm going to click "Run".

[Video description begins] After clicking on "Download Agent for Windows Server or Windows Client", a small window pops up at the bottom of the screen. The host clicks on Run. [Video description ends] And I'll proceed through the installation wizard. I'll accept the default "Installation folder" and "Cache location". I'll click "Next". No proxy settings required to get to the Internet. Then I'll click "Install".

Alright, now that the installation is complete, the next phase of the configuration, if you will, is to proceed to registration. [Video description begins] The host clicks on the option "Proceed to registration". A new window opens up called Register Server Wizard. [Video description ends] We need to register this server with the recovery services vault.

For that, we need vault credentials. Well, back here in the background in step two after we've downloaded the" Recovery Services Agent", we can turn a check mark on to that effect after which we can download the vault credentials file, [Video description begins] The host enables the option that says "Already downloaded or using the latest recovery services agent" and the "Download" button is activated. [Video description ends] which we need to complete the registration. And that file is good for two days.

So I'm going to go ahead and download it. [Video description begins] The host clicks on the "Download" button and the Register Server Wizard window opens up again. [Video description ends] Back here during the installation, I'm going to go ahead and click on the "Browse" button to select the vault credentials file that I've just downloaded. [Video description begins] The host clicks on the Browse button, the field "Vault credentials" is filled in automatically and more details about the vault appear. [Video description ends]

So it knows the name of the "Backup Vault", the "Region", the "Subscription identifier", and of course it expires after two days as you know. So now that we've got that in there, let's go to next, we can either enter a "passphrase" or generate one. [Video description begins] The host is now at the next step, called Encryption Setting. [Video description ends] This is for protection of the backed up data.

So I'm going to go ahead and choose "Generate Passphrase" and we can then specify a location to save it. And after you specify that, you can proceed with the "Server registration". [Video description begins] The host is now at the last step. There is a message that reads "Microsoft Azure Backup is now available for this server", along with a warning message. [Video description ends] Alright, and the server has been registered, we just have a warning about storing that generated passphrase locally.
So I'm going to go ahead and "Launch the Microsoft Azure Recovery Services Agent" that's checked on by default. So I'm going to go ahead and click "Close". Okay, so it took us into "Microsoft Azure Backup", where over on the right I'm going to choose "Schedule Backup". And I'm going to go through the "Wizard", I'll click "Next" and I'm going to click "Add Items". And I'm going to select some files on a disk on this local host that I want to back up to Azure.
We have the configuration, now we have the back up actually taking place based on that configuration. [Video description begins] The host clicked on next and the wizard is now transferring the relevant data. [Video description ends] And after a moment, we can see that the job has completed. So I'm going to go ahead and click "Close".
Now back here in the portal, if we go back into our vault and if we look at "Backup items", then notice we have a reference here for "Azure backup agent". We have one listing here. [Video description begins] The host clicks on the listing and is redirected to a new page. [Video description ends] It's for drive D on a computer. Here's the computer name. And we can also see the last backup date and time.

Azure VM Soft Delete
In Azure, the soft delete option as it relates to Azure virtual machines is designed so that if you've enabled backup of Azure VMs, it will protect deleted backup data. So in other words, if you delete a VM and you haven't enabled backup for it already, then soft delete does nothing for you. So notice in this list, we do not see a server by the name of "AppServer1", [Video description begins] The host is at the Virtual Machines tab of the Azure portal. [Video description ends] It starts at "AppServer2" and goes on from there.
Well, if we go into an existing vault, then we're going to see references. [Video description begins] The host clicks on Appserver1 of the Azure portal. [Video description ends] When we go to "Backup items", choose "Azure Virtual Machines", I see a reference to "AppServer1". [Video description begins] Under Protected items, there is the Backup items option and the Replicated items option. The host clicks on Backup items. On the list, the host clicks on Azure Virtual machine option and he is now on a list with server names. [Video description ends]
So that was a virtual machine that at one point did exist, but the virtual machine has been deleted. Luckily for us, a backup was taken prior to it having been deleted. And so what I can do then is select "AppServer1" and I can choose to restore the VM or recover files from it. So for example, let's choose "Restore VM", so from here, I can choose a restore point, "OK".
Well, because in this particular scenario, the VM no longer exists, we would choose to "Create new". Now, that's for the VM, on the data side, if we were to choose "File recovery", [Video description begins] The host closes the window of Restore Configuration and returns to Appserver1. [Video description ends] then we would download the executable script which I'll click on. It's going to generate a password, so that we could mount the backup and still recover files from that backed up VM, even though the VM itself no longer exists.
And we can see it's made a connection and it's provided drive letters E and F to us. So those will show up on my local computer in Windows Explorer. And I can browse through the backup files and copy what I need. And once I'm finished, I can return to the portal and go into step 3. [Video description begins] The hosts minimizes the blue window and goes back to File Recovery on the Microsoft Azure portal. [Video description ends] Which I will do here, so if I scroll down, I can click "Unmount Disks".
And there you have it, that's how we can get data back if it's been backed up already from a VM that no longer even exists.

                    
Azure File Shares and Storage Overview
An Azure storage account can house multiple types of storage, including blobs or binary large objects. In other words, allowing files to be uploaded into the storage account. There are block blobs. Now block blobs are normally what we would use if we are uploading smaller files that might result from office productivity tools. 
Such as word processing apps, or presentation apps, or spreadsheet apps, that type of thing or maybe graphic logo files that would be considered block blobs. Append blobs, as the name implies, are a file that would normally by its nature need to be added to constantly. Think of log files, where they're constantly being written to at the end of the file. Then there are Page blobs. Now these are for larger files to support random access. Now what that means is they're not necessarily read or written to in a sequential format. Think of virtual machine hard disks, they would be uploaded and treated as page blobs in an Azure storage account.
Then the storage account can also house Azure files, which are essentially shared folders in the cloud. The idea is we can allow shared folder access for our cloud based Azure file share, from on premises devices or from devices in the cloud like virtual machines. So the operating system would need to support connecting to shared folders using SMB v3.0.
So it's kind of like what you might use even in UNIX and Linux or the macOS, when you mount a remote mount point to appear locally in your file system. Normally, that's done for NFS type of connections over the network using the NFS protocol, but in this case it would be for SMB compliant shares. The storage account also allows for what's called Azure Table Storage.
This is No-SQL based. What does that mean? Well standard SQL compliant solutions where SQL stands for Structured Query Language would include things like Microsoft SQL Server, Oracle Database Server, MySQL, all kinds of different variations where you have a strict definition of blueprint of what's allowed to be stored. So you'd have table definitions, and in each of those tables you would have columns or field definitions with data types.
And you can link tables together. Well, No-SQL doesn't do any of that. It's an unstructured schema, where the storage of one record can be completely different than the underlying blueprint for storing the next record. So it could be many different types of data. And it uses key and value pairs for storage, much like you might have experience with if you've worked a lot with Azure resource tagging, and key and value pairs.
A storage account can also accommodate storage queues. So we would have queue storage in the Azure cloud. And that's done within a storage account. And software developers can write code for app components, such as in our example app component 1, could write a message into a storage queue in Azure. And then app component 2, if it's busy or unavailable over the network.
When it does become available, it can read messages that it's supposed to read from app component 1. And this way, we have data exchange between different software components.


File Shares and the Portal
In this demonstration, I'm going to configure Azure file share. Azure file share is essentially an SMB compliant shared folder hosted in the cloud environment.  
You don't need your own server to set up a shared folder. So to get started here in the portal, I've navigated to an existing storage account.
And within that storage account, I'm going to scroll down in the navigation bar until I see File service, and I'll click File shares.
Now I don't have any file shares defined yet, but that's going to change in a moment.
So I'm going to click add a File share up at the top. And I want this to be called projects.
And I'll set a maximum Quota for storage, let's say to 5 GiB.
And then I'll click Create.
So we can now see we've got the project's file share here.
Now much like a blob container, you can go into it and start uploading content.
So uploading files, you can add a subdirectory if you really want to, but I'm not going to do that.
I'm just going to click Upload, and I'm going to upload a file or two.
So I specified a couple of file names here.
I'll just upload them and because they're small text files, it won't take long for them to show up.
So we can now see we've got Project_A, B, and C.
They're text files, and they're in the projects share. Now at this point, we need to talk about connectivity. So it's one thing to create the file share.  
But what about making a connection? Well, the connection is available. For example, if we click the Connect button at the top, it gives us instructions depending on the platform in question.
Whether we're mapping a drive letter in Windows, or whether we're making a connection as a Mount point from Linux or the macOS.


File Shares and the CLI
You can use the Azure CLI to configure an Azure file share, so essentially a shared folder in the cloud.
In order to do that, you have to think about the storage account where you want to define that Azure file share.
And you also have to think about an access key that you will use to get permission to create it from the CLI.
So we can see the name of our storage account in this example is storacct333325.
And down below, I can see of course, as is the case with every storage account there are two access keys.
So I'm just going to go ahead and copy the second access key. And I'm going to span a cloud shell environment.
Now, here in the CLI I'm going to run az storage.
So presumably file share are part of the storage nomenclature and -h for help.
After which I can then learn and start guessing at what would be next such as share for managing file shares.
That sounds about right. So if I do an az storage share.
And then specify -h for help, we'll learn more about how to use that syntax such as creating an Azure file share.
Let's get to it, az storage share, create --account-name.
So this is the name of the storage account, and then that in our case is storacct333325 --account-key. Well, this is where I'm going to paste in the key that I copied previously when we were in the portal a moment ago. --name, what I want to call this is budgets. So I'm going to put in budgets as the name of the share. I can also set the quota, --quota in GiB, so maybe I'll just put there 5. And that's pretty much it, I'm going to press Enter to create that azure file share.
And it says "created": true. Now, notice if I try to run other CLI commands like az storage share list it says well, not quite, you need to give us some credentials, such as with account name and account key.
No problem, so we can make that happen. az storage share list, not really should have stored those variables, but that's okay, --account-name. We know what storacct33325 and the --account-key parameter. And I can just see that up there, so why don't I just copy that again, just to make sure I still have it on the clipboard, and we'll Paste it in here, and we'll press Enter.
And now we're seeing everything that's listed but as usual, it's providing all of the metadata. I just want to see the names, okay? Let's clear the screen. Now, because we're in PowerShell, we can get away with either clear, the word clear or cls, it doesn't make a difference.
Up arrow key to bring up that previous command at the end I'm going to add --query, [ ] Because we've got an array of items being returned, multiple shares. And I want to call upon the .name property for each of them to only see the names. And there's the one that we've just created, budgets.
Let's take a look at it from the perspective of the GUI.
So here in my storage account in the portal, I'm going to scroll down in the navigation bar, until I see File service and File shares.
Just give it a moment to update, and there's budgets.


File Shares and PowerShell
In this demonstration, I'll use PowerShell to create an Azure file share.
Remember that a file share is a shared folder hosted in the Azure cloud through a storage account. So that means that we're going to need command line access then to the storage account. And one way to get that access is to use a storage account key.
So I'm going to go ahead and run the Get-AzStorageAccountKey cmdlet. I'm going to specify the resource group and name of an existing storage account. Whose keys I want to return.
Now returns both keys. Every storage account has two keys, you can change one for security purposes while the other one remains intact. Now if I want to get a specific one of these keys, I'll just use the up arrow key to bring the previous command back up. To get a specific key I can ask for example, the first one I'm going to make a variable here called $key equals Get a then contain the rest of the command as per I entered it previously.

[Video description begins] In the output, he points to key1 and key2. They contain alphanumeric values. [Video description ends]

But I'm going to change it a little bit, because what I want to do is place that entire command in parentheses. The reason is because I want to treat it as a single statement, after which I then want to call upon the. and then a property or call upon a property specifically in this case, the value property and I want value[0]. So I want the first item.

[Video description begins] He executes the following command: $key=(Get-AzStorageAccountKey -ResourceGroupName Rg1 -Name storacct333325).value[0]. No output displays and the prompt remains the same. [Video description ends]

That's the first key, in other words when I press Enter, and if we return the key variable, you can see indeed that value zero really is the first item in the array.

[Video description begins] He executes the following command: $key. The output displays an alphanumeric value. [Video description ends]

It's the first item in the value property array.

[Video description begins] In one of the previous output, he highlights the alphanumeric value of key1. [Video description ends]

So we've now got that stored in a variable. Great, next thing I want to do is make a context variable so that we can essentially lump together the name of the storage account and also the key and just refer to the context variable. So I'm going clear the screen cls and make a $ctx that's just for context and that's going to equal New-AzStorageContext and I'm going to give it the storage account name -storage account name which in this case is storeacct33325, that's the name of my storage account. And I also want to specify the -storageaccountkey. Well, we have a variable now so that's too easy. We just refer to $key for that. Alright, we now have a context variable.

[Video description begins] He executes the following command: $ctx=New-AzStorageContext -storageaccountname storacct333325 –storageaccountkey $key. No output displays and the prompt remains the same. [Video description ends]

Now what I want to do is actually create my file share. So now essentially we have pointers to the storage account. We have a storage account key to be able to do this. So we're good, so I'm going to run New-AzStorageShare. And the name I'm going to assign to this in this case, let's say is East-Logs. And then I'm going to specify my context variable. -context is going to be $ctx, then notice it returns an error.

[Video description begins] He executes the following command: New-AzStorageShare -name East-Logs -context $ctx. An error message is displayed. [Video description ends]

Well, if I change the name here to reflect lowercase letters, and press Enter, it works.

[Video description begins] He executes the following command: New-AzStorageShare -name east-logs -context $ctx. The output displays the information about east-logs. [Video description ends]

So you'll find that a lot of items related to storage accounts are case sensitive. In other words, uppercase letters are not accepted. Anyway, it looks like it worked. Let's verify this we can run get-azstorageshare. Now notice it says don't have a storage context.

[Video description begins] He executes the following command: get-azstorageshare. An error message is displayed. [Video description ends]

Well, that's the same thing that we did up here. When we built the share.

[Video description begins] He highlights the following command: New-AzStorageShare -name east-logs -context $ctx. [Video description ends]

We use -context and gave it the variable, no problem. Let's bring the up arrow key up there to bring that previous command up on the screen -context $ctx.

[Video description begins] He executes the following command: get-azstorageshare -context $ctx. The output displays all the file shares and the corresponding information. [Video description ends]

And there it is, now we can see the existence of our new share east-logs.
And of course, we'll see the same thing if we go into the portal.
So if I Refresh my list of file shares for that storage account, there's east-logs.


File Share Mapping and Windows
In this demonstration I'm going to map a drive letter from an Azure Windows virtual machine to an Azure file share.
So here in the portal, let's start by looking at a storage account where the file share's been defined. So I'll scroll down in the navigation bar for the account. Go down under File service and choose File shares where we'll see we've got a projects file share.
And so if I open that up, it's got some files in it.
See Project_A, B, and C, they're text files.
So this is just essentially like a shared folder on a file server that you might have on-premises. Where you've got some content within it. But the connection to it is a little bit different. So I'm going to go ahead and click the Connect button at the top.
Where we can see syntax for making a connection to it by mapping a drive letter in Windows.
In this case, I want to map drive letter P, P for projects. So I'm going to go ahead and choose that from the drop-down list.

[Video description begins] He expands the Drive letter drop-down list box. It includes options labeled "Z", "K", and "P". [Video description ends]

We can see it's got some PowerShell code here.  

[Video description begins] He selects the P option. He points to a section containing several lines of code. [Video description ends]

That's going to be used to test the connection with the Test-NetConnection cmdlet and also actually mapping the drive. So in other words, it's going to actually make the connection by adding the storage account reference here for our shared folder. So I've pasted that.

[Video description begins] A file labeled "Resource_Lock_Azure_ARM_Template.json" opens in WordPad. It contains several lines of code. [Video description ends]

I've copied and pasted that so we can see it in a bit more detail here in WordPad. So a variable $connectTestResult is going to be the result of running Test-NetConnection against a computer name.

[Video description begins] He points to the code, code starts: $connectTestResult = Test-NetConnection -ComputerName storacct333325.file.core.windows.net -Port 445. Code ends. [Video description ends]

Which is really just the URL of our specific account, and it's trying to connect to Port 445.

[Video description begins] He highlights storacct333325.file.core.windows.net. [Video description ends]

So if you were trying, for example, to map a drive letter from a Windows machine on-premises into the Azure cloud. You need to make sure that Port 445 is allowed in an outbound direction. And the fact is, most Internet service providers will not allow that traffic out. So if you don't have access to control outbound ports because maybe you only have a residential Internet connection, then that might be a problem.

[Video description begins] He points to a line of code, code starts: if ($connectTestResult.TcpTestSucceeded){. Code ends. [Video description ends]

Next thing we're doing is we've got an if statement here and we're testing the result. So if the TcpTestSucceeded so we could talk to our storage account and make a connection to Port 445. Then it's going to start saving some information here.

[Video description begins] He points to the code, code starts: cmd.exe /C "cmdkey /add:`"storacct333325.file.core.windows.net`" /user: `"Azure \storacct333325`" /pass: `"YH4vZkduXdwvW9wH4DAxzQyglEHFDoHgGGnUi3kjWN/TSmPz9jAuL5X9CG2t6ktk0VT4phYbtlqHj7cWGmKpcg==`"". Code ends. [Video description ends]

So it's going to store the user storage account name and the generated password here.

[Video description begins] He highlights Azure \storacct333325. [Video description ends]

That is an actual storage account access key.

[Video description begins] He highlights, code starts: YH4vZkduXdwvW9wH4DAxzQyglEHFDoHgGGnUi3kjWN/TSmPz9jAuL5X9CG2t6ktk0VT4phYbtlqHj7cWGmKpcg==`"". Code ends. [Video description ends]

And then in PowerShell, the New-PSDrive cmdlet is being used. In this case to map drive letter P, we selected P for projects.

[Video description begins] He points to the code, code starts: New-PSDrive -Name P -PSProvider FileSystem -Root "\\storacct333325.file.core.windows.net\projects"-Persist } else { Write-Error -Message "Unable to reach the Azure storage account via port 445. Check to make sure your organization or ISP is not blocking port 445, or use Azure P2S VPN, Azure S2S VPN, or Express Route to tunnel SMB traffic over a different port." }. Code ends. [Video description ends]

And we can see it's making a reference to the projects folder within the storage account.

[Video description begins] He highlights PSDrive -Name P. [Video description ends]

And it's setting it as a persistent drive mapping so that drive P will be there every time that we sign in.

[Video description begins] He highlights "\\storacct333325.file.core.windows.net\projects". [Video description ends]

So, I'm going to go ahead and copy this again and I'm going to use it within a PowerShell command prompt environment.

[Video description begins] He copies the complete code. [Video description ends]

Within an Azure virtual machine where I know Port 445 to the storage account is going to work.

[Video description begins] He switches to the Microsoft Azure web site. A page labeled "WinSrv2019-1 is open. On top of the WinSrv2019 page, a dialog box labeled "Remote Desktop Connection" is open. [Video description ends]

So I've opened up here my virtual machine, my Windows virtual machine in Azure and I've copied the public IP address. And I've opened a connection to it using remote desktop client from my on-premises system.

[Video description begins] In the WinSrv2019 page, he points to an IP address: 52.228.9.116. [Video description ends]

So I'm going to continue going into that machine over RDP so we can map the drive letter to Azure file share.

[Video description begins] In the Remote Desktop Connection dialog box, he clicks a button labeled "Yes". [Video description ends]

Now within my remote session to my Azure Windows virtual machine, I'm going to go into the Start menu because I want to start the PowerShell ISE.

[Video description begins] A remote connection to the IP address: 52.228.9.116 gets established. [Video description ends]

The Windows PowerShell ISE where I'm going to paste in that code that we went through that will map the drive letter here from this machine.

[Video description begins] In a search bar, he types ise. A list of options appears. He clicks an option labeled "Windows PowerShell ISE". [Video description ends]

So I'm just going to click the new piece of paper icon here for a new script, so to speak, and I'll paste in all of that code.

[Video description begins] A window labeled "Administrator: Windows PowerShell ISE" opens. [Video description ends]

And I'll just press Ctrl+ sign here so we can kind of zoom in.

[Video description begins] The window gets divided in two parts: script pane and command pane. In the command pane, the following prompt is displayed: PS C:\Users\cblackwell>. [Video description ends]

So this is exactly what we were looking at to map drive letter P.

[Video description begins] In the script pane, he pastes the code which he copied from the Resource_Lock_Azure_ARM_Template.json file. [Video description ends]

So I copied that for our specific configuration.

[Video description begins] He highlights the code, code starts: -Name P -PSProvider FileSystem -Root "\\storacct333325.file.core.windows.net\projects". Code ends. [Video description ends]

So I'm just going to go ahead and run all of this.

[Video description begins] He clicks a button labeled "Run Script (F5)". [Video description ends]

We can see it's down there. It's attempting the TCP connection. So remember, Port 445 needs to be open between this host and the target for this to work.

[Video description begins] He points to the following message: Attempting TCP connect. Waiting for response. [Video description ends]

And it looks like drive P is probably mapped.

[Video description begins] He point to the command pane where the output is displayed. In the Output, he points to P. [Video description ends]

There are a number of ways we could do that here in PowerShell.

[Video description begins] In the command pane, he executes the following command: p:. No output displays and the prompt changes to PS P:\>. [Video description ends]

Let's navigate to drive P so P:\> dir, there are the project files.  

[Video description begins] He executes the following command: dir. The output displays a list of files and subdirectories in a directory. [Video description ends]

Of course most people that would use this would access that drive mapping from within Windows Explorer. Or through apps of some kind.

[Video description begins] He opens file explorer window. It is divided in two parts: navigation pane and content pane. [Video description ends]

So if we go to This PC, we'll see that drive letter P showing up here.

[Video description begins] In the navigation pane, he expands a node labeled "This PC". [Video description ends]

So projects, and showing up there along with the contents of that.

[Video description begins] Under the This PC node, he clicks a subnode labeled "projects (\\storacct333325.file.core.windows.net)(P:)". The corresponding subfolder opens. It contains files labeled "Project_A", "Project_B", and "Project_C". [Video description ends]

So there are the files in that location.


File Share Mapping and Linux
You can create a Linux mount point from a Linux machine if you want to mount a remote Azure file share. 
Here in the portal I'm in an existing Storage account, we're going to take a look at an existing file share, so File service, File shares.
We'll see we've got one here called projects, I'll click to open it up to reveal its contents.
So we'll see some files here that have been uploaded, but we also have a Connect button.
When we click Connect, we can choose Linux at the top to get instructions on how to configure a Mount point for our storage account.
Now, I'm going to change the Mount point name here, let's say to projects, and it will change the example code down below, which I will copy to my clipboard.

[Video description begins] He clicks the Connect button and the corresponding blade opens. [Video description ends]

So this is what we're looking at, if you've written a lot of Linux shell scripts, then this will be familiar to you.

[Video description begins] He clicks the Linux tab and it opens. [Video description ends]

First thing we're doing or it is doing is using the sudo command to raise elevated privileges to make a directory on the root of the Linux machine under mnt called projects, that's the mount point.

[Video description begins] In the Mount point text box, he alters the value storacct333325 to projects. [Video description ends]

And if the directory etc smbcredentials does not exist, and it'll make it.

[Video description begins] A file labeled "Resource_Lock_Azure_ARM_Template.json" opens in WordPad. It contains several lines of code. [Video description ends]

If there's not a file here to store smbcredentials, it'll make it.

[Video description begins] He points to a line of code, sudo mkdir /mnt/projects. [Video description ends]

And it's storing the username with the name of the storage account and the password is a storage account access key.

[Video description begins] He points to the code, code starts: if [ ! -d "/etc/smbcredentials" ]; then sudo mkdir /etc/smbcredentials fi. Code ends. [Video description ends]

Then it's setting some permissions using change mode as required for the credential file.

[Video description begins] He points to the code, code starts: if [ ! -f "/etc/smbcredentials/storacct333325.cred" ]; then sudo bash -c 'echo "username=storacct333325" >> /etc/smbcredentials/storacct333325.cred' sudo bash -c 'echo "password=YH4vaZkduXdwvW9wH4DAxzQyglEHFDoHgGGnUi3kjWN/TSmPz9jAuL5X9CG2t6ktk0VT4phYbtIqHj7cWGmKpcg=" >> /etc/smbcredentials/storacct333325.cred' fi. Code ends. [Video description ends]

And to get right down to it, what it's then doing is writing to the etc/fstab file.

[Video description begins] He points to the line of code, code starts: sudo chmod 600 /etc/smbcredentials/storacct333325.cred. Code ends. [Video description ends]

So it's a persistent mount point that will persist between reboots.

[Video description begins] He points to the code, code starts: sudo bash -c 'echo "//storacct333325.file.core.windows.net/projects /mnt/projects cifs nofail,vers= 3.0,credentials=/etc/smbcredentials/storacct333325.cred,dir_mode= 0777,file_mode=0777,serverino" >> /etc/fstab'. Code ends. [Video description ends]

And the actual amount command happens way down here, sudo again to an elevated commands mount with a type of the file system here is cifs.

[Video description begins] He points to the code, code starts: sudo mount -t cifs //storacct333325.file.core.windows.net/projects /mnt/projects -o vers= 3.0,credentials=/etc/smbcredentials/storacct333325.cred,dir_mode= 0777,file_mode=0777,serverino. Code ends. [Video description ends]

And then we're specifying two forward slashes and then a reference to the storage account using the default file.core.windows.net suffix from the fileshare, /projects. And that is being mounted locally in Linux under /mnt/projects, which has been created way up at the top of this example. And then some permissions modes are being set here as that mount point is created.
So essentially this needs to execute in Linux. So I have a Linux virtual machine running in Azure that I've connected to through SSH using the free PuTTY tool that I'm running on-premises.
So I'm going to go ahead and paste that command in here. When the script tries to run sudo it's going to ask you for which I'll supply.
And then I'm going to go ahead try to run that again by just pasting that in.
And it looks like it's completed, I'm going to clear the screen and do an ls /mnt/projects.
And we can actually see the contents of that Azure file share.


Azure File Sync Overview
You can use Azure File Sync so that your Azure files, in other words, your shared folders defined in an Azure storage account, are made available to your on-premises clients through an on-premises file server.
So the on-prem file server then really acts as an on-premises cache of what exists in the cloud, in your Azure file share. Remember that Azure file shares are defined within an Azure storage account. You can also use this so that any files that are placed into the on-premises file server in a given directory get synchronized to your Azure file share. To get this set up, the first thing you would have to do is for your on-premises file server or file servers, is be sure that you disable Internet Explorer Enhanced Security Configuration or ESC.
Next, Configure Azure files, that means configure your shared folders in the cloud. Next, you would download and install the Azure File Sync Agent on your on-premises servers. This is the link between that on-premises server and your Azure storage account file share. So then you would have to create and configure an Azure File Sync resource. You could even use the portal to create an Azure File Sync resource, in which you would configure what's called a Sync group.
Now what then happens is the on-premises file caching server needs to be registered with the Azure Storage Sync Service. Now that happens at the end of the installation, when you install the file sync agent on your on-premises server, the tail end of that installation is going to guide you through connecting to an Azure account and a subscription, and essentially connecting to an Azure Storage Sync resource. That's part of the File Sync agent.
So of course, that means that you have to have a sync group defined within your Azure File Sync resource. Now when you create your sync group, you will have a cloud endpoint. It's already pointing to the storage account, file share. However, you would have to add a server endpoint after you've installed the agent on the on-premises server. And that way, the server will be associated with it. So you add a server endpoint for the server that's been registered, which occurred at the end of the installation of the on-prem agent.


Configuring Azure File Sync
Azure Files refers to shared folders hosted in the Azure cloud through a storage account.
Well, what we can do with Azure File Sync is have an on-premises Windows Server essentially cache that information for quick on-premises access. The first thing we have to do to make this happen is we need to create an Azure File Sync resource. So here in the portal, let's start with that. I'm going to click Create a resource.
And what I'm going to search for is Azure File Sync, there it is.  
Let's go ahead and select that and let's click on Create.
So I'm going to deploy this into a Resource group I've already got, so I'll select that from the list.
And I need to give this a name, I'm going to call this FileSync1.
And it's going to be, let's say, in the (Canada) Canada Central region, let's put it there.
I'm not going to tag it or anything, so click Next to continue through the wizard.

[Video description begins] In a drop-down list box labeled "Region", an option labeled "(Canada) Canada Central" is selected. [Video description ends]

Now, it says that there's a problem here on Basics.

[Video description begins] He clicks a button labeled "Next: Tags >". The Tags tab gets selected. [Video description ends]

We can usually tell that when we have an asterisk, which implies that there's something that you need to fill in.

[Video description begins] He clicks a button labeled "Next: Review + create >". The Review + create tab gets selected. [Video description ends]

Well, we've already addressed all of the required parameters, so I'm just going to click Review + create, and then I'll choose Create.

[Video description begins] He points to the Basics tab. He switches to the Basics tab. [Video description ends]

It's going to validate the deployment, we filled in everything that needs to be filled in.

[Video description begins] He switches to the Review + create tab. [Video description ends]

So once it says that the Deployment validation succeeded, it's actually submitting it and it's on its way. Now, we're not finished, because what we need to do in that Azure File Sync object is we need to add what's called a sync group.

[Video description begins] A page labeled "Microsoft.StorageSync-20200324132812" opens. It is divided in two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected. The corresponding page is open in the content pane. [Video description ends]

So we'll go take a look at that now. I'm going to click Go to resource, and within here, we're going to create our sync group.

[Video description begins] He clicks a button labeled "Go to resource". A page labeled "FileSync1" opens. It is divided in two parts: navigation pane and content pane. The navigation pane is divided into several sections. [Video description ends]

You can see Sync groups listed over here in the left-hand navigator.

[Video description begins] He points to a section labeled "Sync". It includes options labeled "Sync groups" and "Getting Started". [Video description ends]

So I'll click the + Sync group button.

[Video description begins] He clicks the Sync groups option and the corresponding page opens. It includes a button labeled "+ Sync group" and a table. The table has three columns and no row. The column headers are Sync group name, Health, and Region. [Video description ends]

And we're going to start by giving it a name, I'll call it SyncGroup1.

[Video description begins] He clicks the + Sync group button and the corresponding blade opens. It includes a text box labeled "Sync group name", a drop-down list box labeled "Subscription", and a field labeled "Storage account". [Video description ends]

I have to associate this with the Storage account, so I'm going to click on the Select storage account button.

[Video description begins] He types this in the Sync group name text box. [Video description ends]

And I'm going to choose a storage account that I know has some Azure file shares configured in it already.

[Video description begins] A blade labeled "Choose storage account" opens. It includes a storage account labeled "storacct333325". [Video description ends]

So after I've selected it, I'll scroll down.

[Video description begins] He clicks the storacct333325 storage account and the Choose storage account blade closes. The Storage account field includes a text box and it gets populated. [Video description ends]

And from the Azure File Share drop-down list, I'm going to choose one that I've defined previously called projects, and I'll choose Create to create the sync group.

[Video description begins] The Sync group blade closes. The table in the Sync groups page gets populated. [Video description ends]

Notice it's in the midst of creating a cloud endpoint for that sync group. But what we're not going to have yet is a server endpoint. Let's open up the SyncGroup1 and take a look at that for just a second. So we can see that we've got a cloud endpoint called projects, but we don't have a server endpoint yet.

[Video description begins] Under the Sync group name column header, he clicks the SyncGroup1 entry. The corresponding blade opens. It includes two sections labeled "cloud endpoints" and "server endpoints". [Video description ends]

And we won't until we download and install the File Sync agent on an on-premises server and then have it registered with this sync group. So notice we have an Add server endpoint button at the top. And when I click it, when I go to the Registered Server list, there's nothing there.

[Video description begins] A blade labeled "Add server endpoint" opens. It includes a drop-down list box labeled "Registered Server". [Video description ends]

Well, again, we haven't installed the File Sync agent on an on-premises Windows File Server yet. But once we do, we'll be able to come back here and complete this process.

[Video description begins] He closes the Add server endpoint blade. [Video description ends]

Here on my on-premises server, I've gone into the Server Manager tool.

[Video description begins] He opens a window labeled "Server Manager". It is divided in two parts: navigation pane and content pane. In the navigation pane, an option labeled "Local Server" is selected. The corresponding page is open in the content pane. [Video description ends]

That normally starts up automatically unless you've disabled it. You can just go to your Start menu if you really want to, and you can start the Server Manager tool. The reason I'm here is if I click on Local Server over on the left, on the right I can see the Internet Explorer, or IE Enhanced Security Configuration is On.

[Video description begins] A dialog box labeled "Internet Explorer Enhanced Security Configuration" opens. It contains sections labeled "Administrators" and "Users". [Video description ends]

I'm going to click on that and turn it Off for admins and Users because I want to download the Azure File Sync agent.

[Video description begins] In the Administrators section, he selects a radio button labeled "Off". In the Users section, he selects a radio button labeled "Off". He clicks a button labeled "OK". The Internet Explorer Enhanced Security Configuration dialog box closes. [Video description ends]

So I'm going to go ahead and close that up, and I'm just going to fire up a web browser here, let's say Internet Explorer.

[Video description begins] He closes the Server Manager window. [Video description ends]

Because my server is running Windows Server 2019, I'm going to select the checkbox for that MSI and I'll click Next in the bottom right.

[Video description begins] A table containing several download options is displayed. [Video description ends]

And I'm going to go ahead and click Allow once at the bottom to allow this to download.

[Video description begins] He selects the checkbox adjacent to the StorageSyncAgent_WS2019.msi entry in the table. [Video description ends]

I want the pop-up to pop-up. And I'm going to go ahead and actually just click Run, I know it's from a trusted secured location.

[Video description begins] A wizard labeled "Storage Sync Agent Setup" opens. The welcome page is open. [Video description ends]

And after a moment, we have the Welcome to the Storage Sync Agent Setup Wizard screen, perfect. Let's continue. I'm going to click Next, accept the terms in the license agreement, I'll click Next.

[Video description begins] A page labeled "End-User License Agreement" opens. [Video description ends]

I'll accept the defaults for Azure File Sync and the local installation location.

[Video description begins] A page labeled "Feature Selection" opens. [Video description ends]

So I'll just go ahead and click Next on that.

[Video description begins] A checkbox labeled "Azure File Sync" is selected. A text box labeled "Install Storage Sync Agent to:" contains the C:\Program Files\Azure\StorageSyncAgent\ value. [Video description ends]

No Proxy Settings on this host to get out to the internet, so I'll just continue, Use Microsoft Update.

[Video description begins] A page labeled "Proxy Settings" opens. [Video description ends]

And here we can specify if we want to automatically update when new versions become available.

[Video description begins] He clicks the Next button. A page labeled "Microsoft Update". [Video description ends]

So this is the Azure Storage Sync Agent auto-update settings screen.

[Video description begins] He clicks the Next button. A page labeled "Ready to install Storage Sync Agent" opens. [Video description ends]

So I'm just going to go ahead and accept all that and just basically get the product installed.

[Video description begins] He points to a checkbox labeled "Automatically update when a new version becomes available." [Video description ends]

Okay, and at the end of the wizard, I'm just going to go ahead and click Finish.

[Video description begins] He clicks a button labeled "Install". A page labeled "Installing Storage Sync Agent" opens. [Video description ends]

So it's automatically checked for an update for the Azure File Sync agent.

[Video description begins] A page labeled "Completed the Storage Sync Agent Setup Wizard" opens [Video description ends]

Didn't find anything, so I'll just click OK.

[Video description begins] The Storage Sync Agent Setup wizard closes. A dialog box labeled "Azure File Sync" opens. A page labeled "Agent Update" opens. [Video description ends]

And the next step is to Sign in and register this server so that it will show up within the cloud.

[Video description begins] A page labeled "Server Registration" opens. [Video description ends]

And then we can actually add it as a server endpoint in our sync group. So I'm going to go ahead click Sign in. So after signing into Azure successfully, I can then choose the subscription from the drop-down list. After which I can then choose a Resource Group and ultimately my Storage Sync Service.

[Video description begins] From a drop-down list labeled "Azure Subscription", he selects an option labeled "Pay-As-You-Go". [Video description ends]

And there it is there, FileSync1.

[Video description begins] From a drop-down list labeled "Resource Group", he selects an option labeled "Rg1". [Video description ends]

I'm going to go ahead and click Register.

[Video description begins] From a drop-down list labeled "Storage Sync Service", he selects an option labeled "FileSync1". [Video description ends]

And after a moment, we can see that the registration was successful. So I'm just going to go ahead and click Close. Back here in the portal, I'm still looking at my FileSync1 | Sync groups.

[Video description begins] The Azure File Sync dialog box closes. He switches to the Sync groups page. [Video description ends]

And more specifically, I'm looking at the Sync groups within that resource. So I'm going to open up SyncGroup1.

[Video description begins] In the table under the Sync group name column header, he clicks the SyncGroup1 entry. The corresponding blade opens. [Video description ends]

And previously, when we were in here, we had clicked Add server endpoint, but there were no registered servers that had the agent installed.

[Video description begins] He clicks the Add server endpoint button and the corresponding blade opens. [Video description ends]

But this time, it's showing up, that's the name of my server.

[Video description begins] He expands the Registered Server drop-down list box. It contains an option labeled "WinSrv2019-1". [Video description ends]

So I'm going to specify that server from the list.

[Video description begins] He selects the WinSrv2019-1 option. [Video description ends]

So on my on-premises server, I've got disk Volume (E:) with a folder called 2020_Projects.

[Video description begins] He switches to the file explorer window. The New Volume (E:) subfolder is open. It contains a folder labeled "2020_Projects". [Video description ends]

And sure enough, I can see a number of files in there.

[Video description begins] He clicks the 2020_projects folder and the corresponding subfolder opens. It includes files labeled "Project_A.txt" and "Project_B.txt". [Video description ends]

So I'm going to need to specify that path when I configure my server endpoint.

[Video description begins] He points to the address bar. [Video description ends]

So I've selected the Registered Server, I have now put in that Path.

[Video description begins] He switches to the Add server endpoint blade. [Video description ends]

I can also enable Cloud Tiering, it says here it'll transform my server endpoint into a cache for your files in the Azure file share.  

[Video description begins] In a text box labeled "Path", he points to the e:\2020_projects value. [Video description ends]

I do want to do that, so I'm going to enable that.

[Video description begins] He points to a section labeled "Cloud Tiering". [Video description ends]

You can determine how much space should be preserved locally, and also which files should be preserved locally.

[Video description begins] In the Cloud Tiering section, he points to a toggle button. The toggle button has options labeled "Enabled" and "Disabled". He selects the Enabled option. [Video description ends]

So you can keep only certain frequently accessed files cached on the device.

[Video description begins] In a text box labeled "Always preserve the specified percentage of free space on the volume, he points to the 20 value. [Video description ends]

The rest get tiered into the cloud environment. So based on what our needs are, that's all we have to configure.
I'm going to go ahead and click on Create to create the server endpoint, which will then show up down here.
So the cloud endpoint essentially links to an Azure file share, and that was defined when we created this sync group.
Now we've got our server endpoint. Notice the Health?
Shows that it's currently Provisioning.
So if I were to take a look in my storage account at my projects file share that is part of that sync group, I will see not only the original files that were here, which in this case are Project_A, B, and C.
I can click and see that on March 23rd, they were made part of this.
And I can see two new files, Project_D and E.  
I know they're new only because I know the files names.
And I can see that they were placed there on the 24th.
They were placed there automatically because they were replicated from our on-premises server.



Azure VM Overview
In Azure, virtual machines, or VMs, really provide the underlying horsepower for most services, even those where we don't directly see the correlation with an underlying VM.
What comes to mind with that is serverless computing. When really there is a server involved, it's just not under the control of the cloud tenant. When you plan your virtual machines, there are plenty of things to think about, including the method through which you will deploy it. If you work with infrastructure as a service, or IaaS VMs, it means that you as the cloud tenant or customer, you'd be responsible for things like the deployment of the VM. Configuring it the way you need it to be configured.
And managing it over a time, including applying operating system and app updates. However, it does give you with full configuration control at the virtual machine level. And you might even consider taking advantage of Bring Your Own License, or BYOL, where you can reuse existing licenses that you might have already purchased for the operating system. A managed solution means that the virtual machine creation and management is handled by Microsoft in the Azure Cloud. However, it does allow for quick and easy deployment of a higher-level service.
And the thing to think about is that when you look at the virtual machine, it has a lot of underlying details. Now, if you're working with it from an IaaS standpoint, infrastructure as a service, where you control it all, there are a lot of things to consider, such as the specific OS image that you're going to select, whether its Windows based or Linux based. Or perhaps you have an image that includes not just the operating system but also some additional software.

So that you might have a web server stack of some kind ready to fire up quickly in the case of a virtual machine where you've customized an image. You have to specify the resource group that the VM will be deployed into, and the geographical location. You have to think about sizing. The size of the virtual machine determines its underlying horsepower. So the number of vCPUs, virtual CPUs that are supported, the amount of RAM. The number of data disks supported by that specific VM size. And also, by extension, the disk performance or throughput in IOPS, that's input and output operations per second. So more IOPS is always better, but you pay a premium for that privilege.

The other thing to consider is high availability. If you've got a mission critical workload running in an Azure VM, then you might want to configure it for high availability by replicating it to a secondary region. And then there's user credentials so that you can get in and manage your virtual machines, whether it be Windows based or Linux.

[Video description begins] Azure VM User Credentials. [Video description ends]

With Windows you specify a username and a password when you deploy a Windows-based virtual machine in Azure, regardless of how you're deploying it. So whether you're doing it using the portal, the CLI, PowerShell, a template, an ARM template, doesn't matter. And of course, you would manage it remotely by making a connection to RDP port 3389. Ideally, you won't expose that directly to the Internet with a public IP address.

Instead, you'll use something like Azure Bastion as a jump box that you go through to remotely manage virtual machines using only their private IP. On the Linux side, we have password-based authentication as well as SSH public key-based authentication, where the public key portion is stored by Microsoft and Azure. But the related private key would be stored by you, the Linux user. And you need that key in your possession to authenticate with the server. Of course, you should take great care in protecting that key. Something as simple as applying a passphrase or password to it to safeguard it would be useful.

And you manage Linux, of course, over SSH port 22. Just like with Windows, you probably shouldn't expose that directly to the Internet for Azure Linux-based VMs. Instead, make it available privately only through something like an Azure Bastion host.

[Video description begins] Azure VM Details: Disk Sizing. [Video description ends]

When you work with Azure virtual machines, you're also working with at least one virtual hard disk to host the operating system. So we're talking about disk sizing, really deals with the storage type. So when you work with disks for a virtual machine, you can determine some of these options, like standard HDD. HDD is hard disk drive. Now, hard disk drives are the older disk technology where you have spinning physical metal disk platters and a read-and-write head that goes out over it to read-and-write data as the disk is spinning. So it's very mechanical and slower than today's solid state drives.

But you can use standard HDD for infrequently accessed data. Okay, so if we're going to have a virtual machine with a virtual hard disk and it's only going to be used periodically for testing, for maybe only a few hours a month, maybe standard HDD is acceptable there. The other option would be standard SSD, solid state drive. So there's no spinning disk platters. There's no read-and-write heads and arms, nothing like that, no moving parts. It's all solid state. So you might use standard SSD for testing and dev purposes, basically non-critical usage.

Then you've got premium SSD. This is something that you would use in a production environment when you're running a production-based workload that the business actually depends on, because you get peak performance usage. But as you might imagine, you pay more for premium SSD than you would for standard SSD, standard HDD. And then there's ultra SSD, which provides the highest or the best performance available. And it's definitely suited for intensive database workloads or anything where you need the absolute best possible disk I/O performance. However, you'll only be able to use ultra SSD disks on specific types of Azure virtual machine sizes. So, basically, premium SSD enabled types of items.

[Video description begins] Azure VM Details: Networking. [Video description ends]

At the networking level, when you're planning your virtual machines, you have to think about how many network security groups you'll need. Network security groups contain rules that control traffic flow, inbound or outbound. So either allowing or denying certain types of network traffic based on things like IP addresses, or tag values, or even port numbers. You can associate a network security group with the subnet, which means by extension, all VMs that have network interfaces in that subnet would also get those rules from the network security group. So subnets exist within a VNet.

Network interfaces, as the name implies, are network interface cards in a virtual sense, they're their own separate type of resource in Azure, and you associate them with VMs. And depending on the VM sizing will determine how many additional network interfaces that you can attach. Network security groups can also be assigned directly to network interfaces if you have very specific inbound and outbound traffic requirements for a specific VM network interface. Public IP addresses are again another Azure networking component. This is also its own type of resource that allows public connectivity to a VM. You would only do that for things that are designed to be publicly accessible, like a corporate website, for example.

You also have load balancing configurations. You have to plan for the fact that you might have a workload running in a VM whereby if that VM becomes unavailable, costs a lot of money in terms of downtime until it's up and functional again. So you might consider load balancing using a number of backend servers hosting the same app. And, of course, load balancing between them. So when client requests come in, sending it to the least busy backend server.

[Video description begins] Azure VM Scaling. [Video description ends]

Scaling a virtual machine can be done horizontally, which means adding or removing VMs. So scaling out means adding VMs, scaling in means removing. You would do this, for example, in a load balanced auto scaling type of solution. Maybe you would have it automatically set so that when the CPU gets to a certain point of busyness in terms of percentage, VMs begin to be added to handle the increased workload. Now vertical scaling means scaling up by adding more horsepower, or scaling down to reduce the amount of horsepower because you don't need it and you want to save on costs. So vertical scaling deals with the number of virtual CPUs, the amount of RAM, the disk I/O, and so on.

[Video description begins] SSH Public Key Authentication. [Video description ends]

For Linux hosts, you have the option of either password-based authentication or SSH public key authentication. Now this one is considered to be more secure than just a username and password because it involves something that you must have. Now this is the default configuration with Linux VMs unless you change it otherwise, but you can always go in and reset that in an existing Linux VM after the fact. When I say reset that, what I mean is reset a forgotten password if you're using password authentication. Or convert or change from password to public key authentication.

You can change all of that after the fact if you need to. So SSH public key authentication uses a related key pair. So the public key is stored on the server in the cloud. So it's stored by Microsoft. But the mathematical related private key is stored with you, the user. And that's where you need to have that private key. It's stored in a file, should be password protected at minimum. And you use that to authenticate to the server. With SSH public key authentication, we're talking about having this apply to Linux VMs.

It doesn't apply to Windows VMs, unless you install some third-party component that allows it to act as an SSH server or daemon, then of course that would be on the table. So the public key gets specified when you build a new Linux VM if you leave the default of public key authentication. So the user must know the username and password, but they must also possess a related private key.
Azure VMs and the Portal

[Video description begins] Topic title: Azure VMs and the Portal. The presenter is Dan Lachance . [Video description ends]

Virtual machines are the real workhorses that make things happen in cloud computing, that run workloads. Now in some cases in Azure, you have managed services. Where you don't have to worry about deploying and managing the underlying virtual machines. But when it comes to infrastructure as a service or IaaS, that is where you do manually deploy virtual machines and manage them.

[Video description begins] The Microsoft Azure portal is open. In the portal, a page called "Home" is open. [Video description ends]

So let's go ahead and take a look at how to do that at the portal, I'm going to click Create a resource. Now I could look at some of these popular virtual machine images and deploy virtual machines from them. Such as Windows Server 2016 Datacenter or Ubuntu Server 18.04 LTS.

[Video description begins] A blade labeled "New" opens. It includes a search box and two lists labeled "Azure Marketplace" and "Popular". An option labeled "Get started" is selected in the Azure Marketplace list. Its corresponding popular options are displayed in the Popular list. [Video description ends]

I could also go to Compute, and from here I have variations of compute services, including virtual machines. I'm just going to choose Virtual machine.

[Video description begins] He selects an option labeled "Compute" in the Azure Marketplace list. A list labeled "Featured" replaces the Popular list. [Video description ends]

And I'll select all of the details, including the operating system image as I configure it further.

[Video description begins] A blade labeled "Create a virtual machine" opens. It contains seven tabs labeled "Basics", "Disks", "Networking", "Management", "Advanced", "Tags", and "Review + create". The Basics tab is selected. Its corresponding page is open in the blade. It includes several sections. Some of them are labeled "Project details" and "Instance details". [Video description ends]

So the first thing I need to do is specify a Resource group where I want this deployed. So I'm going to select a Resource group, I'm going to scroll down, this is going to be a Windows Virtual machine. So I'm going to call it WinSrv2019-1, I'm going to deploy it in the (Canada) Canada Central region.

[Video description begins] The Project details section contains a text box labeled "Subscription" and a drop-down list box labeled "Resource group". The Subscription text box displays the Pay-As-You-Go text. He clicks the Resource group drop-down list box. A drop-down list opens, which includes options labeled "Rg1" and "Rg3". He selects the Rg1 option. Then he types WinSrv2019-1 in a text box labeled "Virtual machine name" in the Instance details section. [Video description ends]

And in the Image drop-down list is where I get to select exactly what I want, so I've got variations here of Linux. I've also got variations of the Windows platform such as Windows Server 2019 Datacenter, which is what I'm going to choose. The next thing I'm going to do is scroll down and see what else I have as an option such as whether I want to use Azure Spot instances, it defaults to No. Spot instances are useful if you want to perform things like batch processing, something that doesn't need to run all the time.

Because spot instances essentially allows you to use extra compute capacity available in the Azure Cloud at a reduced rate. But there's no guarantee and essentially, your virtual machine could be evicted and it could be stopped if that compute capacity is needed. So I'm not going to use a spot instance I want this virtual machine running when I deem that it should be up and running. Down below, the sizing is very important because the virtual machine size determines the underlying horsepower which of course equates to how much you pay on a monthly basis, depending on how often that virtual machine is running.

Here I've got Standard DS1 v2, which consists of 1 vcpu, 1 virtual CPU, and 3.5 GiB of memory. If I don't like that, I can click Change size so I can better accommodate the work load that will be running in this virtual machine. But I'm going to stick with that. Down below I need to specify the Administrator account credentials for Windows. So I'm going to go ahead and specify a Username and a Password which I will then confirm down below. After I've done that down below, I can determine if I want specific ports to be made available in terms of Public inbound ports.

It defaults to allowing port 3389 for RDP, now this means that it will be publicly visible on the Internet. This is generally not a good idea from a security perspective. You might require that people come in through a jump box, in other words Azure Bastion on or maybe come in through a VPN. And then connect into the private IP of the Windows host for RDP remote management. Now if this is a test virtual machine and there's nothing at stake, then maybe it's okay to leave the public inbound port open. Which I'm going to do in this example.

[Video description begins] He points to a radio button labeled "Allow selected ports". [Video description ends]

I'm going to scroll down, I don't Already have a Windows Server license so I can't bring my own license.

[Video description begins] He points to a radio button labeled "No" adjacent to the text, “Already have a Windows Server license?”. [Video description ends]

I'm going to click on Next : Disks > at the bottom for Disks, and this is where I get to determine the operating system disk type. It's set to Premium SSD, which offers better performance than something like Standard hard disk drive or HDD. So I'm going to leave that as it is, I could also add Data disks down below beyond the OS disk type.

[Video description begins] The Disks page displays. [Video description ends]

And I can also do that after the fact at any point in time in the future. So I'm going to leave that as it is and I'm going to click Next : Networking > for Networking down at the bottom. Decide which Vnet I want this deployed into, so Vnet1 is selected.

[Video description begins] The Networking page displays. It contains three drop-down list boxes labeled "Virtual network", "Subnet", and "Public IP" and two toggle buttons labeled "NIC network security group" and "Accelerated networking". [Video description ends]

Can also select the Subnet within that Vnet I want this virtual machine deployed into. I'm going to leave it on Subnet1 (10.0.1.0/24).

[Video description begins] The Virtual network drop-down list box displays a default option labeled "Vnet1". The Subnet drop-down list box displays a default option labeled "Subnet1 (10.0.1.0/24)". [Video description ends]

And, down below, I can determine the Public IP address configuration for this virtual machine. So it's going to build a new public IP address resource, that's perfect, I'm going to let it do that.

[Video description begins] The Public IP drop-down list box displays a default option labeled "(new) WinSrv2019-1-ip". [Video description ends]

Down below, do we want to have a network security group or an NSG applied to the NIC, the network interface card? Now I'm not going to do that only because I know that Subnet1 has a network security group already associated with it. So you can associate network security groups, which are essentially collections of firewall rules to an entire subnet. Or to a specific network interface.

[Video description begins] The NIC network security group toggle button contains three options labeled "None", "Basic", and "Advanced". The None option is selected by default. [Video description ends]

Now, if you've got virtual machines with the same traffic requirements on a subnet. It might make more sense to manage the firewall rules for allowing denying traffic at the subnet level, as opposed to the individual NIC level. So that's fine, having done that, I'm not going to enable Load balancing, I'm going to click Next : Management > for Management.

[Video description begins] The Management page displays. [Video description ends]

So Boot diagnostics are turned On, I can also turn on OS guest diagnostics if I wish. And I have another set of options including things like enabling backup, which I can change after the fact. And enabling auto-shutdown such as on a schedule which also I can configure after the fact.

[Video description begins] He points to toggle buttons labeled "Backup" and "Auto-shutdown" in which the Off option is selected by default. [Video description ends]

I'm not going to change any of these settings, I'm going to click Next : Advanced > for Advanced. I'm not going to change any of these settings.

[Video description begins] The Advanced page displays. It includes drop-down list boxes labeled "Host group" and "Proximity placement group". A default option labeled "No host group found" is displayed in the Host group drop-down list box. A default option labeled "No proximity placement groups found" is displayed in the Proximity placement group drop-down list box. [Video description ends]

For example, I have the option of using an Azure Dedicated Host or controlling an entire physical server in an Azure Data Center. That would run my virtual machines, that of course incurs more costs. I'm not going to do anything like that, so I'm going to accept all of these extra settings, I'll click Next : Tags > for tagging.

[Video description begins] The Tags page displays. It includes a table with three columns and a row. The column headers are Name, Value, and Resource. He types Project and ABC in the text boxes displayed under the Name and Value column headers respectively. [Video description ends]

And, if this is for a specific project like Project ABC or a cost center or a department or anything like that, I could tag it accordingly. Once I've done that, I can click Next : Review + create >, review and create. It's going to check of course that my selections make sense, I can see that the Validation passed.

[Video description begins] The Review + create page displays. [Video description ends]

And I can also see what the cost is on an hourly basis to run this virtual machine if it's left running. Of course, we should always shut it down when we know we don't need it. And, at this point, I'm going to click Create to build this virtual machine in the cloud. After a moment, we'll see that the deployment is complete. So I could either click Go to resource or I could go to the All resources view at any point in time to view everything, including my virtual machine.

[Video description begins] The corresponding blade opens. He clicks the Home link in the breadcrumb trail. The Home page opens. He clicks the All resources option and its corresponding blade opens. [Video description ends]

Of course, you could also always open up your left-hand navigation panel and scroll down and choose Virtual machines. In the All resources view, notice that what we get here is we see everything. We see the Virtual machine itself, we see the Public IP address related to that virtual machine.

[Video description begins] He points to the virtual machine labeled “WinSrv2019-1”. [Video description ends]

The Network interface for that virtual machine and the Disk for that virtual machine, so there's a lot of stuff here. So I'm going to click on the virtual machine itself to open up its navigation bar. And of course within the virtual machine we have numerous configuration options.

[Video description begins] The corresponding blade opens. It is divided into two sections: navigation pane and content pane. [Video description ends]

For example, if I click Networking over on the left for that virtual machine, I'll see network options including the Network Interface. I can also view the effective network security rules.

[Video description begins] The corresponding blade opens in the content pane. [Video description ends]

We can see down here there is an AllowInboundRDP rule that is being applied to this virtual machine. Because there's a network security group called NSG-Windows, which is attached to Subnet1. Which is where this virtual machine has been deployed. I can click Disks in the navigation bar to work with the operating system and also data disks. Here's where we can for example, configure additional data disks, I can click on Size.

[Video description begins] The corresponding blade opens in the content pane. [Video description ends]

If I decide that the current underlying horsepower doesn't properly support the workload. I can change the sizing, either scale up and choose something more powerful.

[Video description begins] The corresponding blade opens in the content pane. [Video description ends]

Or scale down vertically and choose something less powerful to reduce costs if the compute power is not actually needed. So if I were to go, let's say, into the Virtual machines view over on the left, of course, it's filtered to only show me virtual machines. We can also see that the Status of that virtual machine is currently listed as being Running.

[Video description begins] He clicks an option labeled "Virtual machines" from the left-hand navigator and the corresponding blade opens. The WinSrv2019-1 virtual machine is displayed. [Video description ends]

Now bear in mind that over time, if you want to manage that virtual machine, you're going to either need to know its private IP address or its public IP. So once again, I'm going to click to open up that virtual machine, I'm going to make sure I'm looking at Networking over on the left. And, when we're looking at Networking, this is where we will see its public IP. So we've got a NIC Public IP address as well as its NIC Private IP.
Azure VMs and the CLI

[Video description begins] Topic title: Azure VMs and the CLI. The presenter is Dan Lachance . [Video description ends]

Here in the Azure CLI, which I've spawned through the Cloud Shell icon in the portal. I'm going to create a Linux-based virtual machine using CLI commands.

[Video description begins] A command prompt window labeled "PowerShell" opens in the Microsoft Azure web portal in which the PS /home/danlachance72> prompt is displayed. [Video description ends]

The first thing I'm going to do is run az -h for help, because I'm wondering what the next level command is. And I can see right away, vm for virtual machine seems to make sense.

[Video description begins] The output of the az -h command displays a list of commands with their definitions. Then he executes the cls command. The screen gets cleared. The prompt remains the same. [Video description ends]

And so I can run az vm -h for help on that, to learn more about how I can use the syntax to manage, or in this case create a new VM.

[Video description begins] The output displays a list of commands with their definitions. The prompt remains the same. He clears the screen. The prompt remains the same. [Video description ends]

So I can do az vm create -h to get a level deeper with help, including syntax examples of creating virtual machines.

[Video description begins] The output displays several examples of creating virtual machines. The prompt remains the same. Then he clears the screen. The prompt remains the same. [Video description ends]

So now that we're armed with that information, we can start to put together our specific command. So I'm going to use az vm create --resource-group and I'm going to deploy this new virtual machine into an existing resource group named Rg1. The --name parameter, I'm going to give it a value of Ubuntu-1. That's what I want it to appear as in the portal.

And --image, I'm going to specify I want to use the "UbuntuLTS image", --admin-username. I'm going to specify a username of "cbackwell" --admin-password, or admin password to be specific and I've specified a password I want to use. And finally, this virtual machine will be deployed in the canadaeast location. So let’s go ahead and press Enter to get this virtual machine created.

[Video description begins] He executes the following command: az vm create --resource-group Rg1 --name Ubuntu-1 --image "UbuntuLTS" --admin-username "cblackwell" --admin-password "Pa$$w0rdABC123" --location canadaeast. The output displays the details of the virtual machine, such as, id, location, macAddress, powerState, and zones. The prompt remains the same. [Video description ends]

We can now see that it looks like it has successfully created our Linux virtual machine. Let’s check our work here in the portal. So if we go back to the portal, make sure we Refresh our list of virtual machines. Indeed, we’ll see that Ubuntu-1 is listed as Running.

[Video description begins] He switches to the Virtual machines blade. [Video description ends]

So back in the CLI, I'm going to clear the screen.

[Video description begins] The prompt remains the same. [Video description ends]

We can also take a look at our running virtual machines as in az vm list, now it doesn't really matter if they're running or not. But when we run this command, we're going to get all of the details about the virtual machines.

[Video description begins] The output displays the details of the virtual machine. The prompt remains the same. [Video description ends]

If we are interested in seeing just a specific property, then we can get to that using the query parameter. So I'm going to scroll back up here and what I'm looking for here is the name property. So using the query parameter, we're going to call upon that.

[Video description begins] He highlights "name": "Ubuntu-1" in the output. Then he clears the screen. The prompt remains the same. [Video description ends]

So in other words, I'm going to bring up the previous command, az vm list. I'm going to add --query because we have an array of virtual machines, more than one. I'm just going to put in open and close square bracket and then call upon the .name property. And when we do that, we'll see in fact Ubuntu-1 is showing up.

[Video description begins] He executes the following command: az vm list --query [].name. The output displays the virtual machines present. The prompt remains the same. [Video description ends]
Azure VMs and PowerShell

[Video description begins] Topic title: Azure VMs and PowerShell. The presenter is Dan Lachance . [Video description ends]

In this demo, I'm going to use PowerShell to deploy a new Windows-based VM. Now, PowerShell can be very handy if you want to automate the creation or deployment of Azure virtual machines. You might have a loop and you might feed it parameters for unique values like the names of virtual machines that could lend itself to quickly creating a sandbox environment, similar to how an ARM template could. So to get started, I'm going to create a variable to store the credentials that will be created for my virtual machines. I'll need them to log into it.

[Video description begins] The PowerShell command prompt window is open in the Microsoft Azure web portal in which the PS /home/danlachance72> prompt is displayed. [Video description ends]

So credentials or $creds is my variable. And I'm going to use the Get-Credential cmdlet. And when I press Enter, it asks for a username, which I will enter and a password of course. So I'm going to go ahead and enter that as well.

[Video description begins] He executes the following command: $creds=Get-Credential. [Video description ends]

So now I've got a credential set for my new virtual machine that I'm about to create in PowerShell. If we were to return that $creds variable, it's not as if it's plain text.

[Video description begins] He executes the following command: $creds. The output displays the username and the password. The prompt remains the same. [Video description ends]

It's treated as System.Security.SecureString, perfect, that's good. So the password's not even resident in memory, although notice, we can clearly see the username that I entered.

[Video description begins] He points to the username. He clears the screen. The prompt remains the same. [Video description ends]

Okay, so the next thing to do is to actually create the virtual machine. So now I'll use New-AzVm, I'm going to specify the resource group I want to deploy the virtual machine into. It's going to be called "Winsrv2016-1". It's going to go into "CanadaCentral" region and do a Vnet called "VNet1" and subnet called "Subnet1". We create a security group here, SecurityGroupName called "winsrv-nsg". We're to create a public IP address object for this server. And we're going to specify the image.

Notice what we're referring to here is the publisher, MicrosoftWindowsServer then WindowsServer:2016-Datacenter in this particular case, and we want the latest version. Each of those components is separated with a full colon. Then we're opening port 3389 for RDP management. And our -Credential or username password is simply going to be what we entered in previously into our $creds variable.

[Video description begins] The ResourceGroupName is Rg1 and the PublicIpAddressName is winsrv2016-1-pubIP. [Video description ends]

You can see now, it's in the midst of creating all of the resources for that VM, including the public IP address.

[Video description begins] The output displays the details of the virtual machine. The prompt remains the same. [Video description ends]

And after a moment, it looks like it's done. So we can just go ahead and minimize this. And I'm just going to go here in the portal, let's say to my Virtual machines view. And let's just see that our newly created VM is showing here. Should be listed as running as well. That's the default when you create a new virtual machine.

[Video description begins] He minimizes the PowerShell command prompt window and opens the Home page. He clicks the Virtual machines option and its corresponding blade opens. [Video description ends]

There it is, Winsrv2016-1, it's currently in the state of Running. If we were, let's say to go to the All resources view, we know that there's more than just the VM resource itself.

[Video description begins] He opens the Home page. He clicks the All resources option and its corresponding blade opens. [Video description ends]

What about in our case, the public IP address, the OS disk, the network interface, the network security group, all that stuff. So I'm going to filter by winsrv2016 for the name prefix. And again we can see a number of items have been created. We have the Virtual machine, Network interface, Public IP address, the Disk. But when we go back to PowerShell, you might wonder, well, hang on a second. How do I know what to put in for the image? Everything else is pretty self-explanatory, the reference to the subnet, the location and so on. But this -Image parameter value has me scratching my head. How do I know to put that together?

[Video description begins] He highlights: MicrosoftWindowsServer:WindowsServer:2016-Datacenter:latest. Then he clears the screen. The prompt remains the same. [Video description ends]

Discovery cmdlets, one of which is Get-AzVMImagePublisher. So you at least have to know some of these discovery cmdlets. So I'm going to say let's -location, and how about "CanadaCentral"? And I'll just pipe it to more just for fun so we can have it stop after the first screen full.

[Video description begins] He executes the following command: Get-AzVMImagePublisher -location "CanadaCentral" | more. The output displays a list of publisher names for the Canada Central location. [Video description ends]

We'll just keep going through here. Basically, what we would be looking for in our particular case, based on our example, is Microsoft Windows Server. So as we go further and further down, we can see all of the variations on the nomenclature. And we do see, in fact, that we do have a publisher name here, MicrosoftWindowsServer, so q for quit. So that's one command you can use to discover these things. You can also run Get-AzVMImageOffer. And -location "CanadaEast" or Central, wherever it is that you want to look. It's not case sensitive. Press Enter.

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the following command: Get-AzVMImageOffer -location "CanadaCentral". The window prompts to enter the publisher name. [Video description ends]

And what's the PublisherName? Right, that's what we just looked at. That was microsoftwindowserver. Just give it a moment. It doesn't like Microsoft Windows Server. Well, that particular item, guess what?

[Video description begins] An error message displays. [Video description ends]

It's case sensitive. So if I run that command again, and then this time I put in MicrosoftWindows and Server, MicrosoftWindowsServer. So I'm capitalizing each word, so initial caps. It liked it. So watch out for that when it comes to that part of the nomenclature.

[Video description begins] He types MicrosoftWindowsServer. A list of offer names for the MicrosoftWindowsServer publisher name is displayed. He points to an offer name labeled "WindowsServer". Then he clears the screen. The prompt remains the same. [Video description ends]

Now we then see WindowsServer. So we're going to step deeper, got it? So now the discovery command like Get-AzVMImageSKU, let's put in -location "CanadaCentral". And I'm not going to put any other parameters. It'll just ask me, yeah, what's the publisher?

[Video description begins] He executes the following command: Get-AzVMImageSKU -location "CanadaCentral". [Video description ends]

Well, initial caps, MicrosoftWindowsServer. What's the Offer? Well, the Offer is WindowsServer, again, initial caps. And then here we go. Now we can start to see the actual SKUs that we might want to use.

[Video description begins] The output displays a list of SKUs. [Video description ends]

So let's just scroll back up here, we have 2016 and what we're looking at now is 2019. So maybe we want 2016-Datacenter or 2019-Datacenter or a server core image. So we have all of the options here. And that's how you know what to place in the -image parameter when you're building a new VM in PowerShell.
Azure VMs and Template Deployments

[Video description begins] Topic title: Azure VMs and Template Deployments. [Video description ends]

In Azure, ARM stands for Azure Resource Manager. This is the newest model of managing Azure resources. And we can use an ARM template to deploy and manage related resources in a resource group for example.

[Video description begins] The Microsoft Azure web portal opens in which the Home page is displayed. [Video description ends]

So to get started here in the portal, I'm going to click Create a resource. I want to deploy a virtual machine from a template.

[Video description begins] The New blade opens. [Video description ends]

Now a template is a text file using JSON syntax. You can either create your own or you can go to GitHub and other sources on the Internet to retrieve templates. Or you can use some of them built into Azure right here, which by the way, also lets you query GitHub. So what I want to create here is a template deployment. I'm going to search for template, there's template deployment. Perfect, I'm going to select that.

[Video description begins] He types template in the search box and its corresponding search result displays. It includes a link labeled "Template deployment (deploy using custom templates)". He clicks that link and its corresponding blade opens. It includes a button labeled "Create". [Video description ends]

Then I'll click Create. Now I'm going to get a couple of common templates listed here. But that is by no means all that's available.

[Video description begins] A blade labeled "Custom deployment" opens. It contains various links. [Video description ends]

So common things like creating a basic Linux virtual machine, a Windows virtual machine, a web application, a SQL database. We can also build our own template in the editor. Now, when you do that, you get to either import an existing template file, but it gives you the skeletal infrastructure for you to begin, the framework.

[Video description begins] He clicks a link labeled "Build your own template in the editor" and a blade labeled "Edit template" opens. It is divided into three sections, a toolbar, navigation pane and content pane. The toolbar includes buttons labeled "Quickstart template" and "Load file". The navigation pane displays three icons labeled "Parameters", "Variables", and "Resources". The content pane displays a json file. [Video description ends]

So it's a JSON file format where we've got the opening and closing curly braces and the details within. Now what you could do is you could load a quick start template in here to see the JSON. Or load a file if you already have a file in your possession for a template. So, for example, if I were to quick click Quickstart template, maybe from the drop-down list I'll choose well, it could be anything. Why don't we search up something like SQL, 101-cosmosdb-sql.

[Video description begins] He clicks the Quickstart template button. A dialog box labeled "Load a quickstart template" opens. It contains a drop-down list box labeled "Select a template (disclaimer)". He clicks the drop-down list box and a drop-down list opens with a search box. He types sql in the search box and the drop-down list filters out the sql templates. He selects a template labeled "101-cosomosdb-sql" in the drop-down list. He clicks a button labeled "OK" and the dialog box closes. A json file displays in the content pane. [Video description ends]

And I'll just click OK, just so we can see that it loads all this information in here. So for example, we can specify the location. Notice that the location parameter here that you would normally specify when deploying a CosmosDB account is something like, East US, West US or Canada Central, or something like that. What's happening here instead of hard wiring it, it's determining the resource location by looking at the resourceGroup. So, if the resource group was in US East, well the location of this Cosmos DB account, which is what's being created here, will also be in that same location.

[Video description begins] He highlights the following code lines, code starts: "location": { "type": "string", "defaultValue": "[resourceGroup().location]", "metadata": { "description": "Location for the Cosmos DB account." } },. Code ends. [Video description ends]

So as we go down through here, it's pretty readable. The settings or the properties for creating, in this case, my CosmosDB account and SQL and so on. However, we're not going to use this. I'm going to click Discard, but we could do that.

[Video description begins] The Edit template blade closes. [Video description ends]

We can also choose one of these predefined common templates, let's say to Create a Linux virtual machine. So when I click on that, it pops up. And unlike when I normally deploy an IaaS, or infrastructure as a service Linux VM, which requires a lot of details, this only requires a handful.

[Video description begins] A blade labeled "Deploy a simple Ubuntu Linux VM 18.04-LTS." opens. [Video description ends]

It really depends on the template. When you use an ARM template, it really depends how the template was written. And what's hardwired into it versus what must be passed in as parameters. Like the Resource group, the Vm Name, the Admin Username, and so on. I'm not going to do that either. So I'm going to go back to a template deployment, I know I'm going to lose those changes. I'll click Create, because we have an option at the bottom also to query GitHub.

[Video description begins] The Template deployment (deploy using custom templates) opens. He clicks the Create button. The Custom deployment blade opens. [Video description ends]

Down here at the bottom, kind of like what we saw when I went in and started to load a quickstart template in the template editor. So how about I put in apache as in Apache server? Now when we talk about Apache, we really mean the Apache web server. apache2-on-ubuntu-vm. Yeah, that's what I want.

[Video description begins] He clicks a drop-down list box labeled "Select a template (disclaimer)". A drop-down list opens with a search box. He types apache in the search box and the drop-down list filters out all the corresponding results of apache. Then he selects an option labeled "apache2-on-ubuntu-vm" in the drop-down list. [Video description ends]

Okay, because I know I want to deploy a web app on that platform. So I'm going to go ahead and select that template. Notice I could have edited it as well.

[Video description begins] He clicks a button labeled "Select template" and points to a button labeled "Edit template". A blade labeled "Apache Webserver on Ubuntu VM" opens. [Video description ends]

And again, depending on the template will determine what I need to fill in here. So I'll just fill in some of the details. It wants to make a new storage account. Okay, store account, let's say apache123.

[Video description begins] The Apache Webserver on Ubuntu VM blade includes several drop-down list boxes and text boxes. He selects an option labeled "Rg1" in the Resources group drop-down list box. Then he types storacctapache123 in a text box labeled "New Storage Account Name". [Video description ends]

It wants an Admin Username, let's put in cblackwell. This template wants a DNS Name For Public IP. Let's call it quick24x7test and we have options to select the specific Ubuntu OS Version. So that's fine. I'll leave it on the default template. I don't have a reason to change that here. Notice the Location here is the location of the resource group.

That's fine. We can determine if we want to use public key or password authentication for simplicity sake here, password authentication and I'll enter a password. Okay, and I don't really need to specify too much more. Notice that we have a red asterisk or star next to the fields that are mandatory. I'm just going to scroll down.

[Video description begins] He points to text boxes labeled "DNS Name For Public IP" and "Admin Password or Key". [Video description ends]

Choose the check mark for I agree to the terms and conditions stated above which I will have read thoroughly of course, and I'll click Purchase. And it's on its way as we can see in the upper right, Deployment in progress.

[Video description begins] The Home page opens. [Video description ends]

Just bear in mind that when you use ARM templates, you're not limited to deploying only one resource. You could deploy numerous different types of resources. Now remember, when you're deploying a virtual machine, you're really deploying a network interface along with it and an OS disk. So you're already deploying a number of resources. And if we switch over, let's say to the Virtual machines view, we'll see that there's a new virtual machine that is in the midst of being deployed. It's called MyUbuntuVM. So notice the status is such that it's currently Creating.

[Video description begins] He opens the Virtual machines blade. He points to MyUbuntuVM and Creating row entries under the Name and Status column headers of the virtual machines table. [Video description ends]

If we were to go to the All resources view, well we know that there's more than just the VM itself. There's the network interface and those other items that we quickly mentioned. So let's take a look at that here.

[Video description begins] The All resources blade opens. It displays the resources table. [Video description ends]

Let's just filter by the word my, M Y and there's the public IP for the VM, the OS disk, the NIC, and a Vnet. So this is all happening from the template in an automated fashion.

[Video description begins] He types my in the Filter by search box and the resources table filters the corresponding result in it. Then he points to myPublicIP, MyUbuntuVM_OSDisk, myVMNic, and MyVNET row entries under the Name column header of the resources table. [Video description ends]
Saving a Deployment as a Template

[Video description begins] Topic title: Saving a Deployment as a Template. The presenter is Dan Lachance . [Video description ends]

ARM Templates play an important role when it comes to automation in the Azure automation of the creation and management of Azure resources. When you deploy an Azure Resource, you can go in after the fact and actually export its configuration as a template.

[Video description begins] The All resources blade opens in the Microsoft Azure web portal. [Video description ends]

Let's take a look at that here in the portal, so I'm in the All resources view. Let's start, say, with the storage account. Sort by storage accounts or filter by name, but I don't have many resources, so I'll just scroll down and click on an existing storage account.

[Video description begins] He double-clicks a storacct333325 row entry under the Name column header of the resources table and its corresponding blade opens. It is divided into two sections: navigation pane and content pane. [Video description ends]

What I'm interested in doing is taking a look at how to save it as a template. And if you scroll down when you’re looking at an Azure resource, if you go down under the Settings section middle. Now at the bottom of the Settings section, you’ll see that there’s an option to Export template. When you click on that, it will show you the JSON formatted template that was used to create this resource.

[Video description begins] A blade labeled "Export template" opens. It includes three tabs labeled "Template", "Parameters", and "Scripts". The Template tab is selected by default. It is divided into two subsections. The first subsection is an explorer pane. The second subsection is a code viewing pane. It displays several code lines. [Video description ends]

So as we scroll through, we can see parameters such as the storage account name, the default value is filled in the type is set as a string. Now, of course, you could save this, or actually let's do that, let's click Download to save this.

[Video description begins] He highlights the following code lines, code starts: "storageAccounts_storacct333325_name": { "defaultValue": "storacct333325",. Code ends. Then he clicks a button labeled "Download" in the Export template blade. A zip file labeled "ExportedTemplate-Rg1.zip" downloads. [Video description ends]

Now when you save it, you'll be dealing with a zip file, which I'll just click on Open. And within that, we can just go right ahead and open up the file. Now which file, there's two of them, parameters.json and template. Well, the actual template is called template.json.

[Video description begins] He opens the ExportedTemplate-Rg1.zip file and its corresponding folder opens. It contains two files labeled "parameters.json" and "template.json". He opens the template.json file which opens in the WordPad application. It displays several code lines. [Video description ends]

If we take a look at that, let me just increase the size a little bit. Then we can see in this template for the storage account as we were seeing, it's got the storage account name with a default value which applies we can pass in parameters.

[Video description begins] He highlights storacct333325 in the following code line: "defaultValue": "storacct333325",. [Video description ends]

Okay, as we scroll down through we can see it's adding a cost center tag and a stage tag with the values or respective values for each of those key names. We can see that the sku is Standard GRS.

[Video description begins] He points to the following code lines, code starts: "CostCenter": "YHZ", "Stage": "Development". Code ends. Then he highlights the following code line, code starts: "sku": { "name": "Standard_GRS",. Code ends. [Video description ends]

As we scroll down, we'll see all the options that are required in the creation of a storage account. Now, that's fine, let's close that because we also have our parameters file. There's parameters.json, it's designed to work in conjunction with the template file to pass in parameter values.

[Video description begins] He closes the template.json file. Then he opens the parameters.json file which opens in the WordPad. It displays several code lines. [Video description ends]

So notice here the parameters are being defined are for the storage account name and the virtual network name.

[Video description begins] He highlights the following code line: "storageAccounts_storacct333325_name": {. Then he highlights the following code line: "virtualNetworks_Vnet1_externalid": {. [Video description ends]

So you can use these together, and the benefit of exporting it as a template is that you can deploy new objects similar to existing objects by tweaking some of the details such as names or regions or whatever you need to do here in Azure. And you could, of course, use CLI commands, you could use PowerShell cmdlets or you could even use the portal to create a new template deployment to use this template file along with the parameters to create resources.
VM Redeployment

[Video description begins] Topic title: VM Redeployment. The presenter is Dan Lachance . [Video description ends]

There are times when in Azure, you might want to relocate a virtual machine to another physical underlying host in a Microsoft Azure Data Center. Why would you want to do that? Well, if you're experiencing anomalies on your virtual machine and you know everything else is configured correctly maybe it's not starting up correctly, or shutting down correctly, or it can't be reached remotely. Even though everything is in place correctly, maybe that is the solution. Moving it or relocating it to another hypervisor.

[Video description begins] The Virtual machines blade opens in the Microsoft Azure web page. [Video description ends]

Now to do that, first make sure that the virtual machine is Running. I've got one here called Ubuntu-1, so we're going to click on it to open up its navigation bar.

[Video description begins] The Ubuntu-1 blade opens. [Video description ends]

The redeployment option is hidden way down under Support + troubleshooting. So you'll have to scroll down until you see that section, Support + troubleshooting. And under there, you'll very easily see Redeploy.

[Video description begins] He double-clicks an option labeled "Redeploy" and its corresponding blade opens. It includes a button labeled "Redeploy". [Video description ends]

Now when you are redeploying it, and it tells us as much up at the top, there will be some down time. It's got to bring the VM down, relocate it to another physical host and then fire it back up. So if you've got any temporary drives, you'll loss the contents. And again, you will have a little bit of down time. So I'm going to go ahead and click the Redeploy button. Now, if the VM isn't running, if it's deallocated, you will get a message to that effect.

[Video description begins] He points to a notification message, which reads: Redeploying virtual machines. [Video description ends]

So you don't have to worry about what happens if I don't have it running already. You'll know very clearly that that is the issue. And after a moment in the Notifications area in the upper right in the portal, we'll see that it Successfully redeployed virtual machine. So I'm just going to click on that.

[Video description begins] The Ubuntu-1 blade opens. [Video description ends]

So we can now see that our virtual machine is back up and running after having been redeployed to a different host. And hopefully, any problems that you might have experienced with it will be remedied by having run this redeployment.


Windows VM Remote Management
If you've deployed virtual machines in the Azure Cloud, you're probably going to want to be able to get to them over the network to manage them, whether they be Linux or Windows based. So to get started here, let's see how we can make an RDP connection to a Windows Virtual machine running in Azure.

[Video description begins] The Microsoft Azure web portal opens in which the Home page is displayed. [Video description ends]

I'm going to start by going into my navigation panel on the left and choosing Virtual machines. Here I see I've got a Windows virtual machine that has a status of Running.

[Video description begins] The Virtual machines blade opens. It includes the virtual machines table. [Video description ends]

And if I click to open up that virtual machine in the navigation panel, I can click on Networking to expose its public and its private IP address.

[Video description begins] He double-clicks the WinSrv2019-1 row entry under the Name column header of the virtual machines table and its corresponding blade opens. Then he clicks an option labeled "Networking" under a subsection labeled "Settings" in the navigation pane. Its corresponding blade opens. Then he points to the NIC Public IP: 13.88.248.90 and NIC Private IP: 10.0.1.4 in the blade. [Video description ends]

But depending on how you have things set up will determine whether you need the NIC Public IP to remotely manage this virtual machine over RDP, Remote Desktop Protocol, or whether you need the private IP. Now you can also take a look at connection options.

[Video description begins] He again points to the NIC Public and Private IPs. [Video description ends]

So if I go back to the overview of this virtual machine, notice at the top, you've got a Connect button. And if I click on Connect, I can select either RDP, so Remote Desktop Protocol for Windows, SSH, Secure Shell for Linux.

[Video description begins] He opens the Overview blade of WinSrv2019-1 virtual machine. It includes a button labeled "Connect". [Video description ends]

Or I can use Azure Bastion, which really serves as a jump point, a jump box, that has both a public and a private IP connection. So public facing, you could connect to the Bastion host and after connecting to it through it, connect to the private IP of a backend virtual machine. However, in this case, I'm just going to choose RDP.

[Video description begins] He points to Private IP address: 10.0.1.4 in the Overview blade. Then he clicks the RDP option in the flyout and a blade labeled "Connect" opens in the content pane. It includes three tabs labeled "RDP", "SSH", and "BASTION". The RDP tab is selected by default and its corresponding options are displayed. [Video description ends]

And when I do that, it gives me the options such as the Public IP address and the Port number of that virtual machine, and I can Download RDP File. Now, technically, all you need is the public IP. And as long as you know the credentials, and as long as firewall rules allow traffic to 3389, you'd be able to make the connection.

[Video description begins] He points to an option labeled "Public IP address (13.88.248.90)" in a drop-down list box labeled "IP address". Then he points to 3389 in a text box labeled "Port number". [Video description ends]

So I'm going to go ahead and Download RDP File since I have the option right in front of me. And then I'm going to choose to Open it.

[Video description begins] He clicks a button labeled "Download RDP File". A notification message displays in the web portal. It contains three buttons labeled "Open", "Save", and "Cancel". He clicks the Open button. A dialog box labeled "Remote Desktop Connection" opens. It includes a button labeled "Connect". [Video description ends]

That's going to start the RDP client on my machine. So I'm just going to choose Connect, I trust the connection.

[Video description begins] A dialog box labeled "Remote Desktop Connection" opens. It includes a button labeled "Connect". [Video description ends]

And at this point, I'm going to change the credential set. So I'm going to specify a username that I specified upon creation, and also the password. So this was specified when the virtual machine was deployed, and then I'll click OK. You're going to be asked if you want to trust the identity of their computer.

[Video description begins] The Windows Security dialog box includes a text box labeled "Password". He changes the username and a text box labeled "Username" displays. He types cblackwell in the Username text box. Then he enters the password. [Video description ends]

I'm going to choose Don't ask me again for connections to this computer, and I'll choose Yes.

[Video description begins] A dialog box labeled "Remote Desktop Connection" opens. [Video description ends]

And after a moment, it's taken me into the desktop of that server running in the Azure Cloud. So it really looks and feels like any on-premises virtual machine would. So it's starting up Server Manager automatically because it's running the Windows Server operating system. Now I'm going to flag that so that that doesn't happen anymore. So here in the Server Manager, I'm just going to go up to the Manage menu.

[Video description begins] The Remote Desktop Connection dialog box closes. A Windows Server OS opens in which a window labeled "Server Manager" opens. It is divided into three parts: menu bar, navigation pane, and content pane. The menu bar includes menus labeled "Manage", "Tools", and "View". The navigation pane includes an option labeled "Dashboard" and its corresponding page is displayed in the content pane. [Video description ends]

I'm going to go into Server Manager Properties. And I'm going to say Do not start Server Manager automatically at logon. If I want it to start, I will start it.

[Video description begins] He clicks the Manage menu, a flyout opens which includes an option labeled "Server Manager Properties". He clicks the Server Manager Properties option and its corresponding dialog box opens. It includes a checkbox labeled "Do not start Server Manager automatically at logon". He selects that checkbox. Then he clicks a button labeled "OK" and the Server Manager Properties dialog box closes. [Video description ends]

Let's just take a look at the IP address configuration here of this virtual machine. So I'm going to open up a command prompt here by searching for cmd.

[Video description begins] He closes the Server Manager window. Then he opens the Start menu and types cmd in the search box. The search result displays a desktop application labeled "Command Prompt". [Video description ends]

And we want to launch this because we want to use the ipconfig command to view our ipconfiguration.

[Video description begins] A window labeled "Administrator: Command Prompt" opens. The C:\Users\cblackwell> prompt is displayed. [Video description ends]

First, we got to hit the Properties of this screen and go to Font, and just increase the size so it's a little bit more legible than it currently is, kind of hard to see. And if I run ipconfig, we can see here that our private IP address, 10.0.1.4, is showing up.

[Video description begins] The output displays the Ethernet adapter Ethernet details which includes IPv4 Address:10.0.1.4. The prompt remains the same. [Video description ends]

Notice the public IP address does not show up here. So back here in the portal, if I look at the networking of this virtual machine, indeed it does have a private IP address in the form of 10.0.1.4. But the public IP address is handled on the Azure side, and so it doesn't even show up within that operating system.
