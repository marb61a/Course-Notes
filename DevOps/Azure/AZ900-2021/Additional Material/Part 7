                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 7


Azure AD Storage Account AD Authentication
  - There are times where you might want to grant storage account permissions to Azure AD users
    - And we can do this by assigning RBAC roles related to storage account usage
  - We get started in the portal, we are looking at the properties of an existing Storage account
    - Within that navigation bar, click Access control (IAM), where we would normally go for RBAC role assignments
    - In this case we are going to click Add and Add role assignment
  - What I want to do is filter the list of roles for any that begin with the word storage, since, we're talking about a storage account
    - From the Role drop-down list, click there and type in storage
    - The first thing we want to do is assign the Storage Account Contributor role 
    - Because we want to allow a specific user in AD, Azure AD or a group perhaps, or even a service principal
    - We want to grant them the ability to manage the storage account, such as creating storage account containers
    - We are going to select that role, what we want to do is assign that to a group
    - In this example type in the word east, we've already got an Azure AD group that we've defined previously called EastAdmins
    - Wwant the members of that group to have storage account contributor permissions
    - We then can go ahead and select that and then click Save
  - If we also want, let's say that same group to be able to upload blobs, 
    - Then we would work with a different role, click Add, Add role assignment
    - The role we are interested in here is going to be the storage blob data contributor role, find that first and make sure that's the correct name
  - We are going to click on list roles, again type in storage and it looks like we were right, Storage Blob Data Contributor role
    - We are going to assign that to the same group so they can also upload blob content to the storage account, then click Save
    - Once that role has been assigned or those roles, we can click on View to view the role assignments.
  - Over on the right here, scroll down, we'll see in fact that EastAdmins has been given the Storage Account Contributor role at This resource
    - So it wasn't inherited from a management group or subscription or resource group
    - Also the Storage Blob Data Contributor
    - Any member of the EastAdmins group, which by the way, why don't we just take a look at that specific group
    - We can see who the members might be because it is the Members of the group that will have those permissions or those abilities at the storage account level
    - And here we can see its users Jen Hill and Marcia Lin. 


Storage Account Access Keys
  - Every Microsoft Azure storage account always has two storage account access keys.
    - Here in the properties of a Storage account, we can go down under Settings and click on Access keys to open the Access keys blade.
  - When we do that, over on the right, we will see that there are two keys
    - Now there are also two connection strings, we're focusing primarily on the keys
    - These keys give access to the storage account, and it's access that would be granted for example, at the command-line level
  - When using command-line tools, you could use the access key to gain access to the storage account
    - Even using GUI tools like Azure Storage Explorer, sometimes developers will be accessing Azure storage account APIs
     - Then we'll need to specify a key to gain programmatic access, either way, that's what it's for
     - But there are two of them, why two? Well, what you could do is you could refresh keys periodically
     - As a matter of fact you should, from a security perspective, but if you're regenerating a key, what you're doing is changing it.
  - We've select a key1, the Regenerate icon, it says, the current key will become immediately invalid and can't be recovered
    - You want to regenerate access key1, we can choose Yes
    - When we do, it looks completely different, so if we had any code or scripts or command-line references to the old key1.
    - They will no longer work, they won't have access to the storage account any longer
    - We would do this on a periodic basis and you'd have to make sure you change all references that use the old key
    - But because it could be disruptive in some cases, that's why you have two keys
    - Because you could have commands and scripts use key2 for a while, as you generate key1
    - Which you might use for new command line or programmatic access
    - You have the access of having a, or the ability rather, having a key that's still valid and useful while you refresh a different one
  - You can also do this at the command line, so let's go ahead and jump into Cloud Shell
    - You can just click Reconnect, if a session times out
    - In PowerShell, we are going to use the New-AzStorageAccountKey cmdlet to generate a new key
  - We will specify the resource group where that account was deployed, the name of that storage account
    - The key we want to regenerate, in this case, key1 and we'll press Enter
    - We can actually retrieve information about that as well, using the Get-AzStorageAccountKey cmdlet
  - That would be Get-AzStorageAccountKey, specify the resource group where the storage account was deployed
    - And the name of the storage account, and when we press Enter, it returns both key1 and key2.


Shared Access Signatures
  - A shared access signature or SAS, S A S, which you'll see when you're looking at the navigation bar for a Storage account
    - You will see it down here Shared access signature
  - This is a way to allow limited access to a storage account to particular services with perhaps only read access as opposed to read, list, and write. And even it can have an expiration date and time.
  - So the permissions are only good within a certain time frame. Now that's as opposed to Access keys, of which there are two for every storage account.
If you have an access key, you have full access to everything in the storage account. Not quite so with the Shared access signature, depending on how it's configured. Let's take a look at how that works.
So I'm going to go into Shared access signature, and I only want to allow access, let's say, to blobs, not to Azure file shares, queues, or tables.
Now, I only want to allow Read and List access. I don't want this Shared access signature to allow the creation of content at the blob level.
Now, if I scroll down further we'll also see the timing, the date and the time stuff. So the start and expiration date and time. So the starting date and time, the expiry date and time, which I'm going to leave. Notice here that on the same day, we have access starting at about now, 10:56 in the morning, and ending at about 6:56:15 PM. So we got 8 hours by default. Of course, you can change that, you can also specify an allowed IP address either individually or range, as implied with the faded or ghosted text in that field to help you along. It's going to be for HTTPS and I have to choose either key1 or key2 as the Signing key for this signature.
So I'm just going to leave it on key1, and I'm going to Generate SAS and connection string. And then down below, I'll see it's given me three items, a Connection string, a SAS token, which I would use for programmatic access, and also a Blob service SAS URL. So I'm going to use the Blob service SAS URL down at the bottom here. I'm going to copy it and I'm going to use that to make a connection to the storage account, using the Azure Storage Explorer GUI tool.
Microsoft Azure Storage Explorer is a free downloadable tool, which I've already downloaded. What I want to do is create a new connection using the shared access signature. So in the left hand navigator here I'm going to right-click on Storage Accounts, and I'm going to choose Connect to Azure storage.
What I want to do is, I want to make a connection using a SAS URI, shared access signature. So I'm going to go ahead and click Next. I'll paste in the URI.
Everything else is filled in, including the Display name. I can change that. I'm going to call this SASTest, just so we can distinguish it from anything else that's already there in the navigation panel.
I'll click Next and Connect. So in the left-hand navigator, we can now see our SASTest connection to the storage account. And if I expand it, I can see only Blob containers.
Now I have another example up here in the Azure Storage Explorer where I've connected to the storage account using an access key, which provides access to everything in that storage account. But here, we only have access to what the shared access signature says we have access to, which is Blob containers.
  - If I take a look for example, under eastprojects, I can see some content there. But I will not be able to upload content because I don't have the ability to add items, only list and read. So I'm going to go ahead and try to upload a file here.
    - But it's going to fail, says Insufficient credentials.
    - It's not allowed because of the shared access signature, it doesn't allow the adding of content at the blob level.


Storage Account Replication
  - When you create an Azure storage account, at creation time you can determine whether or not you want a specific type of replication enabled for that account.
  - Replication allows you to increase the data availability for whatever you have stored in the account
    - First of all, we can change this after the fact. And I'm going to do that here in the portal. So I've got the properties of an existing Storage account displayed. I've got the navigation bar. First thing I'll do is go down to Geo-replication. But when I click there, what I'm going to see is a map with my Primary location.
So where is the option to add additional locations for replication? Well, there's nothing, not even down at the bottom. All I see is that our current primary location is Canada Central. Well, that's because we have to enable replication, if it wasn't enabled when the account was created, by going to Configuration over on the left. So I'm going to go ahead and I'm going to do that. So we'll be able to select the type of replication that we're interested in.
If we take a look, currently it's set to Locally-redundant storage (LRS). So what this means is that we've got three copies of data within an Azure location. So, if we've got a problem such as fire in an Azure data center, we might lose all access to those three copies. And so for additional availability, you might select either Geo-redundant storage (GRS), or Read-access geo-redundant storage (RA-GRS).
The difference being that with geo-redundant storage if there's a failure in the primary region, you've got to initiate a failover to the secondary region where data was copied to in order to be able to access it. So I'm going to choose in this case, Geo-redundant storage (GRS).
And I'm going to Save that config change here. So we're changing the configuration of an existing Storage account. It says it successfully updated it, perfect.
Let's go back and let's look at the Geo-replication screen. Previously, we had only the blue indicator on the map which according to the legend was our Primary location of Canada Central.
Now it's automatically determined that geo-replication will be enabled for the green listed item on the map, which is a different location. It's another region but it is reasonably close to the primary, it's Canada East. So now, Canada Central will be replicated to Canada East. So at this point at the bottom, it says, well you can't even enable failover because replication is happening, you've just enabled this. And as you might imagine, depending on the amount of data in the account will determine how long it takes for this to complete. But at this point, we've increased the availability of the data by replicating it to an alternate or secondary Azure region.


Azure Storage Explorer Connectivity
  - Microsoft Azure Storage Explorer is a free GUI tool that lets you connect to various aspects of an Azure storage account, such as, if you want to manage blobs, or queues, or tables, and so on.
  - In my browser, I've navigated to the Azure Storage Explorer download page. You can search this up quite easily using your favorite search engine. And I'm going to go ahead and download and install Azure Storage Explorer for the Windows platform on my on-premises Windows 10 station. You can then start Microsoft Azure Storage Explorer from your Start menu like you would with any app. Now, the first thing I need to do here is determine how I'm going to make a connection to a storage account in Azure.
    -So for example, I can expand Storage Accounts here and I can right-click and choose Connect to Azure storage.
  - We have a number of ways I can do that using my Azure account credentials, or via Azure AD credentials, using a connection string, a shared access signature, a storage account name and a key to it, or I can attach to a local emulator for testing purposes. In this case, let's say I want to connect to a storage account using its name and key. We'll go ahead and click Next.
You'll want a Display name. Now, I'm going to give it the name of the storage account StorAcct333325. And I have to give it an Account name that would be for the storage account and also the Account key. So I'm going to pop in the actual name of it, storacct333325. But I also need an Account key.
So here in the portal in my storage account, I'm going to scroll down to Access keys of which there are two. Now, it doesn't make a difference which one I copy. So I'll just take the first one and click the copy icon. And I'll go ahead and paste that in the Account key field.
And that's all I'm going to change here. So I'm going to go ahead and click Next and then Connect.
So now we can see the storage account listed in the navigator and in parentheses the word Key, since that is how we gained access to the account. So now I can check out what's in the account. I can drill down into it, expand Blob Containers. Here's all of the different blob containers we have. I can click on each one of those and see files, download, upload, content.
I can also see any Azure File Shares that might have been created, of course, the contents of those file shares.
I can see any Queues that might have been defined, and those items are shown here and so on.
So really, the Azure Storage Explorer is another way to make a connection to a storage account. In our case, with the storage account access key, which gives access to the whole storage account from which we can then work with the content in the storage account.


Storage Account Blob Soft Delete
  - One of the many options you have when you create a storage account in Azure is whether or not you want the blob soft delete option enabled.
It's disabled by default. Now you can check this out on an existing Storage account in the portal by going into the navigation bar, scrolling down under Blob service, and choosing Data protection.
You will see that the current state is as it was by default Disabled. I'm going to choose Enabled. And I've got a retention policy set for a default value of 7 days. This means that any data, blob data, that is overwritten or deleted can be recovered for up to 7 days. Now this doesn't apply, if we're talking about a container, essentially a folder that is deleted. You can't get those contents back after 7 days. It also doesn't apply if any of the metadata, such as tagging and so on related to blob items is modified. So I'm going to go ahead and click Save to save that change. And let's navigate to our Blob service Containers, and I'm just going to open a Container called eastprojects.
In here, I have a file named Project_A.txt. So I'm going to select that file and I'm going to choose to Delete it. It also asks would you also like to delete any blob snapshots, if there are any. Well, I don't have any, so I'm going to just choose OK. And we can now see that our blob is deleted, the file is gone, Project_A.txt.
Now notice within this view here over on the far right I have the option to Show deleted blobs. If I turn that on, we can clearly see Project_A.txt was deleted because the Status says as much.
Now, what I can do is click directly on that blob. And when I'm in the properties of it over on the right I can click Undelete. So it says it successfully undeleted it.
Let's just take a quick little peek here.
So, if we close that current property window or blade, so close that out, we can now see Project_A.txt, instead of having a Status of deleted is now back at being Active.
And we have the ability then to do this for the retention period, which by default is 7 days.


Storage Account Encryption
Encryption of data at rest has become more and more important over time, as we keep hearing media reports about compromised customer information for example, due to the fact that data was not stored in an encrypted format.
And really, in this day and age, that's completely unacceptable as there are so many freely available encryption tools out there. And in many cases, it's enabled by default, such as with an Azure storage account. Let's explore that a little bit. Here in the portal, I'm going to go into Storage accounts and I'm going to open an existing Azure Storage account. What we want to do is scroll down in the navigation bar and click Encryption.
When we do this, we'll see that it's set currently to Microsoft Managed Keys.
So yes, it is server-side encryption. It is enabled but the keys are controlled by Microsoft. Depending upon your regulatory compliance requirements, that might not work. You might need to have control of them. So we do have the option, as we can see here, to enable Customer Managed Keys. So down below, I can select a Key vault.
Now a Key vault is a centralized Azure resource. I say centralized only meaning it serves as a central repository for you to store secrets like PKI certificates, passphrases, and of course, as in our case, keys. And so other Azure resources or software code that you might develop can refer to this centralized storage location for secrets and call upon things. And in this case, I'm going to go and select a key vault. Because I want to choose a key from it that will be used to encrypt the storage account and it will be under my control.

[Video description begins] He clicks the Select a key value and key link and is corresponding blade labeled "Select key from Azure Key Vault" opens. It contains three drop-down list boxes labeled "Subscription", "Key vault", and "Key". An option labeled "Pay-As-You-Go" is selected by default in the Subscription drop-down list box. [Video description ends]

So from the drop-down list, I have a key vault I've created called KV1East1. And within it, I've got a key called Key1, that's something I created, I generated.

[Video description begins] He selects an option labeled "KV1East1" in the Key vault drop-down list box. Then he selects an option labeled "Key1" in the Key drop-down list box. [Video description ends]

So I'm going to go ahead and choose Select. And at this point, we've now got the required information to enable Customer Managed Keys here for our storage account.
Now that that's filled in, I'm just going to go up at the top and choose Save. And it says it's updating the server-side encryption for the storage account. So at this point, it's now been enabled. So from this point forward, newly added items to the storage account will be encrypted.
And of course, any existing items will be retroactively encrypted with the background encryption process.


Blob SAS Token
  - In the Microsoft Azure environment, a shared access signature is usually associated with the storage account.
  - In the portal, I'm looking at a Storage account, and if I scroll down and look under Settings, I'll see Shared access signature.
And the purpose of this is to allow limited, time-based access to some contents of the storage account, whereas the access keys provide full access to everything in the storage account. But we not only have the option of setting up a Shared access signature, for example, to allow access to blobs, but we can get even more specific to individual blobs. So for example, I'm going to scroll down further under Blob service and choose Containers. And I'm going to pick on a container called eastprojects, let's say, where I've got some sample files uploaded. One of which is called Project_A.txt.
I want to set a Shared access signature for that specific blob as opposed to all blobs.
So when I open up the properties on the right, I need to click on the Generate SAS option.
Now from here, I can choose the Permissions that would apply here. It's set to Read by default, which is it what I want, so I'm going to leave it at that. And I can see the Start date and time, and the time zone. And of course, the idea is that we can have an Expiry date and time as well for when this is good for, this Shared access signature. So I'm going to leave it as it is. I could also specify IP addresses from which access is allowed. And I'm just going to scroll down a little bit by scrolling over to the far right, and see everything.
And then finally, we have to specify some finalized details here, such as whether we're going to allow HTTPS or HTTP. Of course, HTTPS encryption makes sense. And Key 1 in our storage account will be used to generate the signature. So Generate SAS token and the URL. And I'm just going to scroll down here to reveal those items. So we have both a Blob SAS token and a Blob SAS URL.
So I'm going to copy the Blob SAS URL by pointing to the copy icon to the far right of it and choosing the copy option, so click, and it says it was Copied. So now, when I paste that blob SAS URL on my web browser, it will allow me to access the file. Now because it's a no MIME type in the browser, it's just the text file, it actually shows us the contents of the file as opposed to prompting us to download it.


Azure App Service Overview
  - Azure App Service is all about deploying web applications in the Azure cloud as a managed service
    - We can do this by deploying a code based web application or a Docker image based application
  - When you select a Docker imaged based application, you can select between the underlying VM running Windows or Linux
    - Docker allows us to containerize applications, in other words to have a logical boundary around all of the application components
    - That container can be moved to different Docker hosts to run the application
    - The great thing about it as opposed to running an entire VM is that, it relies on the underlying operating system that's already running
    - So loading up a dockerized application is very quick comparing to firing up a VM supporting your app
  - Let's talk about the web app as well as the app service plan. So these are two different types of resources in Azure
    - The web application lets you configure custom DNS domain names, so you don't have to stick with the default DNS suffix
    - Depending on what type of app service plan that you configure, will determine how many custom DNS domain names you can use
    - You can also work with deployment slots, the purpose of a deployment slot is for staging
  - You could have a production deployment slot with the production version of a web app, and as you are making changes and testing them
    - You could have a separate testing slot, then essentially once that comes through as testing successful
    - You can switch it to production so it's visible, for example, to the public once again
    - Deployment slots are a great way to work with a staging environment when you're making changes to a web app, essentially it's changing around domain names
    - We can also configure TLS/SSL settings for a web application, SSL is deprecated so it should never be used.
  - We should be using TLS, Transport Layer Security, to secure network connections. Vertical scaling allows us to increase compute power for underlying VMs. Horizontal scaling allows us to scale up by adding multiple VMs to handle a busy workload environment for a web app. You can also configure WebJobs. WebJob is essentially a tool that lets you schedule or run whenever you want some kind of a script or a program to perform some kind of maintenance on a web app. The app service plan, as we said, is a separate type of resource in Azure. And with it, it determines which resources are available to the web app, so the actual underlying horsepower.
You can also link multiple web apps with the single app service plan. The only thing about this to be careful is that if you have one very, very busy application, then it can starve other apps using that app's service plan. So you have to be careful about the planning and monitor the performance of the web apps. So you can view performance metrics at the app service plan level. So you can look at CPU metrics, memory, traffic in and out. You can also view file system usage per web application that's linked to that app service plan.
There are a couple of pricing tiers you should be aware of. First of all, they refer to Azure Compute Units or ACUs, ACUs are really just about CPU performance. So more ACUs means better performance. Now you can have a tier of dev/testing, or for production environments, production. You also have this option called isolated. The purpose of the isolated app service plan pricing tier is to have all of your web resources to support your app deployed into your own Virtual Private Network in Azure.
  - There are many different runtime services supported, so when it comes to languages for your application
    - It's pretty much anything that you might want to use like .NET Core, ASP.NET, Java, PHP, Node.js, Ruby, and so on
    - When you go to the Azure Marketplace to create a new resource, there are plenty of apps available, essentially preconfigured web applications
  - That's another option to consider when you're deploying a web app
    - Sometimes it might be quicker to look through the marketplace and select something and maybe tweak it to your own liking as required
  - You can manage Azure app service web apps using the portal, using ARM templates, using PowerShell
    - Or the CLI, and also using development tools of course, such as Microsoft Visual Studio
    - Where you might write the code for the app and then push it up into the Azure Cloud


Code Web App Deployment
  - Using the portal to deploy a code based web application.
  - To get started, click Create a resource and search for web then choose Web App
    - Now there are a number of things we'll have to specify,  just click Create.
    - Remember that a web application needs to be linked with an app service plan in Azure, that's a separate resource.
  - Either you can create one along with the web app here at this time, or you can use an existing one, you can link multiple web apps to a single app service plan. So let's deploy this into a specific resource group. And let's give this a Name.
I'm going to call this webapptest172yhz. It needs to be unique. And notice it's using the .azurewebsites.net DNS suffix by default. But you can change that. You can configure a custom DNS domain name or multiple DNS domain names if you wish.
Down below, we can select from either a Code based application where we can select the Runtime stack. So for the language support, notice the variances here of .NET, ASP, Java, Node.js, PHP, Python, Ruby.
A lot of options. And notice that we cannot choose between Linux and Windows when we select a Code based type of application. But if we choose a Docker containerized type of application, we can select from either Linux or Windows for the underlying host that supports that Docker container.
I'm going to go to code-based. And I'm going to put this in a specific region. How about in this particular example since it's near me, I'll select Canada Central. Down below, here's the App Service Plan affiliation. We can either select an existing one if we have it, we don't because there are none showing up in the list.
And so it's selected to create a new one automatically. And it's got a name for it, which is fine. Now I could change that but I'm going to go with that. Down below, the sku and the size. Looks like we have 210 total ACUs. An ACU is an Azure Compute Unit. That's the unit of measurement that's used to reference CPU compute power here for your app service plan. You can change the size, if I click Change size.
Then depending upon what I suspect the workload will be, not only for a specific web app, but if you're having multiple web apps linked with the app service plan, that might dictate how much horsepower you need. So at the top, notice we're looking at some Production pricing tiers. We also have Dev / Test and also Isolated. However I'm not going to change that. I'm just going to close that by clicking the x. I'll leave it as it is. I'm going to click Next: Monitoring> . Now, I'm not going to Enable Application Insights at this point.
But if you really want to track the performance of a web app, especially as you're testing it, to push it into production, you're going to want to do that. But we can turn that on later. Now, if it's not supported for our specific type of configuration, then you'll see that we can't turn it on. So it says Application Insights is not supported for your current selection here, Runtime Stack, Operating System, and so on.
So if we go back, if we were to make a change to some of the selections, let's go choose a Runtime stack. Let's say ASP.NET V4.7.
Okay, now let's go to Next: Monitoring > and notice that Application Insights is now available.
And so it wants to create a new configuration for Application Insights.
So we can choose to either not do that or do it. I'm going to choose No at this point.
Then I'm going to click Next for tags. I'm not going to add any tagged information so I'll click Next: Review + create >. It's going to verify that my selections make sense and that they will work.
And everything looks good. There's nothing that stands out here. So I'm going to go ahead and click Create to build this web application. And remember, it's also going to build our app service plan. We'll take a look at both of those in a moment once they're deployed.
Okay, so what we're going to do is go back home here and go to All resources, only because I want to make sure that we look at both the app service plan and the web app.
So I'm going to deselect all types here, and I'm going to choose App Service and App Service plan.
So we can see our app service plan resource and our web app or app service.
Let's start then by going into the app service plan and just poking around for a minute. So here in the Overview blade for the App Service plan, we can see some common metrics like CPU Percentage, Memory Percentage, Data In, Data Out.
This is all very relevant stuff to look at to determine the performance level of the apps that are linked to your service plan. Now, by the way, if you click on the Apps blade over on the left, you'll see the apps that are part of the service plan.
Currently, as we know, there is only one, our web app or our web app service. We can also take a look at the scaling up blade. So if we decide that, well, maybe we need less horsepower.
We're paying too much and we don't need the power, or we need more juice to be able to accommodate the web application workload.
This is the stuff that we saw when we were creating our web application and service plan. And also choose to scale out horizontally so we can configure auto scaling.
Now that's the app service plan. Let's go back to All resources and let's open up our actual app service or web application.
Because in here, we'll get a lot of details much like we did for the app service plan, but it's much more specific to our app.
So for example, we've got a URL here using the standard default DNS suffix. We've got a Browse button here we can click.
This is what the default page looks like based on my selections.
Naturally, you would change that, of course. But if we scroll down, we'll see some things that are available such as the Configuration blade.
There's a lot of stuff that you can configure here to tweak how your app behaves.
So we've got Connection strings such as for databases, the Default documents that'll be pulled up for different things such as the homepage. You've got Authentication / Authorization options.
So if you choose On here, you can select from quite a wide array of authentication providers such as Azure AD or Facebook, Google, Microsoft account, because by default, it's anonymous access. So we have a number of items here, Custom domains, TLS/SSL settings. We can also see here's where our WebJobs option is, and so on.
So at this point, we have deployed a simple code-based web application.


Docker Web App Deployment
  - Many developers these days deploy applications in containers.
  - A container is a logical isolation boundary in which you will find all of the application components. Now a larger application might consist of multiple containers with different modules or micro services. So luckily, we have an easy way to deploy containerized apps here in Azure. Whether you want to use a public container image, or you have your own private one that's tweaked to your needs.
Let's get started here in the portal. I'll click Create a resource. And just as if you were creating a regular web app as in not container based, you search up web, you click Web App, you click Create.
Now it's during the wizard, during creation, that we'll get to specify that we want a containerized application.
Now when you deploy this into a resource group, in this case, it's, let's say, I want to have a Linux-based VM hosting my containerized app. What I need to do is think carefully about the resource group placement.
I already have a resource group called Rg1 that already has a Windows-based web app. And mixing Windows and Linux when it comes to web apps and Docker containers and so on can cause problems in Azure. So in other words, you should have a separate resource group to deploy a Linux-based containerized app. So that's why I'm going to choose Rg7. There's nothing in there. And down below I have to specify the web app name. I'm going to call this dockerwebapptestyhz. And it's going to use the .azurewebsites.net DNS suffix, I can always change that later with the custom domain.
Now, here Code is the default, we don't want that. But before we switch it, notice we can select a Runtime stack depending on the language we want to use to write the code for our web app. But when you switch to Docker Container, you don't get that. So you have to put everything in the Docker Container. You get to choose whichever language or languages you want to use. So I can choose whether I want Linux or Windows as the back end VM engine. I'm going to leave it on Linux, let's say. And I'm going to put this in Canada Central.
And down below we've got an App Service Plan, it's going to create the App Service Plan. It contains the details about the sizing. We can see here it wants to use Premium V2 P1v2. 210 ACUs, an ACU is an Azure Compute Unit. It's a measure of the compute power that's available. Now that's fine. Having done that, I'm going to click Next to go to Docker. And this is where I can specify if I want to have just a single container.
So for a very small app, or maybe testing a single component, or a single microservice. Or I could have Docker Compose.
Docker Compose is a way to manage multiple related application containers. And you'll find that larger apps consist of multiple containers. In this case, though, I'm going to just go back to the simpler Single Container. And we have to choose where the container image comes from. A container image, you can think of is kind of like an operating system image.
Where it already has an operating system then the files and perhaps some configurations for that OS. And maybe even some apps and configurations. In the same way, a container image has all the software required to run a given piece of software. And maybe any tools and configuration settings available. So we can elect to pull an image from Quickstart. So we've got a couple of standard basic examples here.
This one's based on NGNIX. Or you can go to an Azure container registry that you might have created, where you've got your own private customized images, or maybe you want to go out to Docker Hub.
Docker Hub here lets you store publicly visible images.
And also you can store private ones up there if you have a Docker Hub account.
So let's say I go to Docker Hub. Now when I go to Docker Hub, I can search for something.
Let's say I'm looking for a WordPress type of website. So when I search for WordPress I'll have a lot of different container images.
And specifically here I've got the WordPress official image. And I can see the Docker command on a Docker host to pull down that container image locally would be docker pull wordpress. So wordpress is the name of that image.
That's important because back here in Azure, I need to specify that name here. And there are thousands upon thousands of container images available on Docker Hub.
You can optionally specify a start up command when the container starts. But the container does not house an operating system. That's one of the reasons containerized apps fire up so quickly. It's because they use the underlying OS already running. And in our case that's going to be Linux.
So the validation has passed. Let's go ahead and click Create to deploy our containerized web application. And after a moment, we can see the deployment is complete.
So let's click Go to your resource and let's check it out. So we will have created both a web app service as well as an app service plan.
Let's actually check that out, let's Duplicate this web page in the portal.
Now, we deploy this into a resource group called Rg7, so why don't we open up our navigation bar on the left, check out Resource groups.
And let's just click on Rg7, because in the Overview blade if we look towards the bottom right, we'll see the resources in that resource group.
And there's two of them, there's an App Service plan and an App Service, so that's our application.
All right, so that's fine, let's close the extra windows down we don't need them. So we're browsing our application. Now, depending on the container image you've selected will determine if there's a default webpage within that container.
So if I click Browse, don't be surprised if you don't get anything depending on the image you selected. So if you were to choose, let's say something like MySQL type of container image which is designed for the back end database, not for the front end web app. Well then you wouldn't get a webpage, it would pop-up. Because we selected the WordPress web app, then we do have this sample webpage that did pop-up.
But you can change this at any time, meaning you can change the container image that you're using. If you scroll down, you'll see that you can click on Container settings on the left because this is a containerized type of application.
So we can select the Image source, the same type of stuff we saw when we were creating this app. And we can see it's wordpress here.
You can simply type in the name of a different image, and optionally a tag. So a specific version if you want. And when you do that and Save the change, if you kind of look at the log at the bottom, you'll see new entries about it pulling down your new container. It may take a moment or two but it will do it. So it can pull down the container image and you can change it after the fact. But we have a lot of the same types of settings that we would for a regular web app.
Deployment slots for staging. So you're going to have a default production one that's always running when you build a web app.
You can change from anonymous to some kind of authentication, whether it's through Azure Active Directory, Facebook, Google, and so on.


App Service Plans and PowerShell
In this demonstration, I'm going to use PowerShell to deploy and manage an Azure website. So to get started, I've launched the Cloud Shell here in the portal. I'll just clear the screen.
To build our application, I'm going to use the New-AzWebApp cmdlet. And I'm going to specify the resource group that it will be deployed into. So -resourcegroup name, I've already got one called Rg7, specify that. And I have to specify a name for this. I'm going to call it lob, as in line of business, app1, and I'll just give it a couple of characters to make it unique.
I'm going to specify a location of CanadaEast, or actually how about we put in Canada Central. And next thing I'm going to do is specify an existing app service plan. You can build an app service plan. And remember, web apps are associated with an app service plan. I've already got one called AppSp1 as in service plan 1, let's go ahead and press Enter to see what happens.
And after a moment, we can see our web app has been created and it's currently listed as Running. Let's go ahead and run Get-AzWebApp, and we're going to specify that we want to see them in the resourcegroup Rg7. And we might as well just pipe that to select and tell it, we only want to see the Name instead of all the other details.
I can see there was already an existing web app in that resource group, but our newly created one is now showing up.
And we can also make changes, as well to some settings related to the web app.
Let's just flip over to the portal for a second here.
I'm just going to view my app services or web apps.
And I want to open up the line of business app that we just created.

[Video description begins] He clicks an option labeled "App Services" and a blade called "App Services" opens. It includes a list of web apps. [Video description ends]

So I'm just going to click to open that one up.

[Video description begins] He clicks a web app labeled "lobapp1yhz123" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

Now once that opens up, we can see that indeed, we do have a sample web application. If we browse, it just got the standard welcome page the temporary or default web app page.

[Video description begins] He clicks a button labeled "Browse" and a web page opens in a new tab. It includes the text, "Hey, App Service developers!". [Video description ends]

So this is what it looks like. Let's just close that out.

[Video description begins] He closes the new tab. [Video description ends]

And also, let's just go down to the Configuration of this newly created web app, just to verify that there are no connection strings because we're about to add one by modifying this through PowerShell.

[Video description begins] In the navigation pane, he selects the Configuration option and its corresponding page opens in the content pane. [Video description ends]

So database Connection strings down at the bottom, there's nothing there. So let's go ahead and do that from PowerShell.

[Video description begins] He clicks a button labeled "Cloud Shell" and the PowerShell page opens. The prompt "PS /home/danlachance72>" is displayed. [Video description ends]

So the first thing I'm doing is establishing a variable called $cs for connection string and I'm initializing it as essentially an empty array or hash table. So we do that after the equal sign with an @ symbol, and then open and close curly brace. Next thing we're going to populate it. So $cs and in [ ] I'm creating an item called CustDb. Now I need to configure the value and type for that entry. So after that I'll put an = @{ I'm going to set the value to a sample connection string.

And then I'm going to set the Type to mysql and then I'll close the curly brace. So that's been done. Now we want to use that with the Set-AzWebApp cmdlet. So we're modifying your web app, we want to add that connection string to it. -resourcegroupname, it's Rg7, and the name of the app here was lb and so on. So I've got that there and then I'm going to use the -connectionstrings property and give it our variable $cs, let's press Enter.

[Video description begins] He executes the following command: Set-AzWebApp -resourcegroupname Rg7 lobapp1yhz123 -connectionstrings $cs. The output displays the lobapp1yhz123 web app and its properties. The prompt does not change. [Video description ends]

And it looks like it took so we can verify this by going back to the portal. Let's just Refresh our page here. And let's see if the connection string shows up now, and indeed, it does.
We can click on hidden value to actually see the connection string and the type here is listed as MySQL


Web App Container Image
In this demonstration, I'm going to change the container image used by a Docker based web application.

[Video description begins] The Microsoft Azure portal is open. In the portal, the App Services blade is open. [Video description ends]

So, here in the portal, I'm going to click on an existing web application that uses a Docker container.

[Video description begins] He clicks a web app called "dockerwebapptestyhz". Its corresponding blade opens. [Video description ends]

Now, we know this because if I scroll down in the navigation bar, we'll see Container settings. And that's actually where we want to go.

[Video description begins] In the navigation pane, he selects an option labeled "Container settings" and its corresponding page opens in the content pane. [Video description ends]

When you go to Container settings, you'll see the current association with this app with a container source. So at the top here we can see Azure Container Registry could be used. But what's selected as Docker Hub out on the Internet, or you might have your own private container registry that you've created on-premises. So I'm going to leave it on Public Repository Access for Docker Hub. Currently, it's using a wordpress container image.
However, I can change it to any valid name and version of anything that's available on Docker Hub.
So if I were to open up a new web browser window and go to Docker Hub, we would be able to specify what it is that we want to search for.
So if you search for mysql, you'll have to spell it correctly, of course. Then we'll get a lot of different search results.
And if we were to select, let's say, the first one we would see the Docker CLI command to reference that image to pull it down. docker pull mysql, so we know what's called mysql. So we can learn of the names and the tag information for images in this case, mysql.
We can learn of that easily in this case by going to Docker Hub. Now that I've made that change, I'm going to go ahead and Save it.
Now, it might take a moment or two before that actually gets applied. Because that would have to be then downloaded from Docker Hub. But that's going to be automatic. So if you scroll down and start looking at the date and time stamps.
So you can see where it initially pulled down the WordPress Docker image from the public Docker repository.
That's when it was set up initially. We go that way down towards the end, we'll be able to see that it's going to make a reference eventually that it's downloaded and applied the mysql container image from Docker Hub. And we can see here that we're starting to get messages. Now, I've clicked Refresh here to refresh the log where it downloaded the newer image for mysql. So mysql:latest is how it was tagged. And so we know that that is actually being used now within our web application.


Visual Studio App Deployment
As a software developer, you might use a tool such as Microsoft Visual Studio to create and upload your web application to the Azure Cloud.
Have already downloaded and installed the free Microsoft Visual Studio Community Edition. I've already gone to manage my accounts to specify my credentials to log into Azure.
And I can see my Azure subscription Pay-As-You-Go shown here. And if I examine that further by drilling down under it, I can see for example App Services. In other words, web applications and app service plans.

[Video description begins] In the Cloud Explorer pane, he points to a subnode labeled "dockerwebapptestyhz" under a node labeled "App Services". [Video description ends]

Remember that applications' web apps are tied to a service plan, and you can have multiple apps for a single service plan.

[Video description begins] He points to a subnode labeled "APPSP1" under a node labeled "App Service Plans". [Video description ends]

You can start to examine specific app services.

[Video description begins] He expands the dockerwebapptestyhz subnode. [Video description ends]

And look at the Deployment Slots that might be available for it, such as a testing one we see here and so on.

[Video description begins] Under a subnode labeled "Deployment Slots", he points to a subnode labeled "dockerwebapptestyhz(Testing)". [Video description ends]

But you can also create web applications directly here in Visual Studio and then publish them to Azure. So to get started, I'm going to go to File > New Project.

[Video description begins] A wizard opens. A page called "Create a new project" is open in the wizard. It is divided into two parts. The first part contains several recent project templates. The second part includes a list of templates. [Video description ends]

So in this example for ASP.NET Core web app, I'm going to select that and I'll click Next.

[Video description begins] In the second part, he selects a template labeled "ASP.NET Core Web Application". [Video description ends]

It's going to be called WebApplication4 I've got a local location, that's fine.

[Video description begins] A page called "Configure your new project" opens in the wizard. [Video description ends]

I'm okay with all of that. So I'm going to click the Create button to create this.

[Video description begins] A page called "Create a new ASP.NET Core Web Application" opens in the wizard. [Video description ends]

I'm going to deselect the Docker support. This isn't going to be a containerized app. It could be but I'm choosing not to here. I'll click Create and let it create my project.

[Video description begins] The wizard closes and a tab labeled "WebApplication4" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Publish" is selected and a page called "Publish" is open in the content pane. [Video description ends]

Now realistically, I would then start building my application and making changes to it. However, what I'm going to do here is publish it. So let's assume that we've made changes to our WebApplication4. So over the Solution Explorer towards the upper right, I'm going to right click on it and I'm going to choose Publish.

[Video description begins] He right-clicks a root node labeled "WebApplication4" and a list of options appears. [Video description ends]

I want to publish this as an Azure web application. So here in the main window, I'm going to click Start. And I want this to be App Service.

[Video description begins] He clicks a button labeled "Start" in the Publish page and a wizard opens. A page called “Pick a publish target” is open in the wizard. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "App Service" is selected and its corresponding page is open in the content pane. [Video description ends]

I want to create a new app service in the Azure environment.

[Video description begins] He points to a radio button labeled "Create New" in the content pane. [Video description ends]

So we'll go ahead and click on Publish.

[Video description begins] Another page called “App Service Create new” opens in the wizard. [Video description ends]

And here's the web application name it wants to use, it wants to use a unique name in Azure.

[Video description begins] He points to the name. [Video description ends]

Let's assume that that adheres to our company naming policy for applications in the Azure Cloud. Here's the subscription it will be tied to.

[Video description begins] He points to an option labeled "Pay-As-You-Go". [Video description ends]

And I can specify a resource group one that already exists, or I could let it create one if I really want to.

[Video description begins] He clicks a drop-down list box labeled "Resource group" and a drop-down list opens. [Video description ends]

But what I'm going to do is select an existing resource group, we do have the New button otherwise.

[Video description begins] He selects an option labeled "Rg3 (Canada East)". [Video description ends]

With the hosting plan, we can use an existing type of hosting plan or again, build a new one.

[Video description begins] He points to an existing hosting plan. [Video description ends]

So I'm going to go ahead and click Create.

[Video description begins] He points to a link labeled "New". [Video description ends]

So really all we're looking at here is yet another way to deploy a web app in Azure. The difference being that, as a developer, of course, you have the tools available in front of you to actually make core changes to the functionality of the app.
After a moment, if we look at the output window here at the bottom center of the screen in Visual Studio, we can see the Build succeeded. Looks like everything has been done successfully restart a web app. Let's check it out in the portal. Here are the portal I'm viewing my App Services.
And indeed, there's our newly created web application.
And if we were to click the Browse button at the top of the Overview blade, it would link to the URL and give us our sample page for this application.


App Services Custom Domains
When you deploy a web application or app service in Azure, you get a default DNS domain suffix. Let's take a look at that, because you'll often want to change that.
And that's the purpose of what we're doing here, to configure a custom DNS domain. I'm going to click on an existing web app.
And in the Overview blade over on the right, when it pops up, I will see the URL, the default suffix of which is azurewebsites.net. And I can click the URL, I can click the Browse button, same thing. And depending on the nature of the app will determine what you see next.

[Video description begins] In a new tab, a WordPress web page opens. [Video description ends]

This is an app that has a web front end and it's a simple WordPress page. So that's what I'm seeing. So it is working but it's using the azurewebsites.net name. What if we want to use something different, we want to call it something different.

[Video description begins] He closes the new tab. [Video description ends]

So what I'm going to do then is scroll down in the navigation bar for the web app, and I'm going to go to Custom domains.

[Video description begins] He clicks an option called “Custom domains” and the corresponding page opens in the content pane. [Video description ends]

Any existing custom domains will be shown, we don't have any here, so I want to click Add custom domain.

[Video description begins] A blade called "Add custom domain" opens. [Video description ends]

I want this web app referred to as www.lanchanceit3.com.

[Video description begins] In a text box labeled "Custom domain", he enters the text, "www.lachanceit3.com". [Video description ends]

Where lanchanceit3.com is a DNS domain that I already own and have registered to a public DNS registrar outside of Azure. But I need to make sure or Azure needs to make sure that I really own that. So I'm going to click Validate.

[Video description begins] Several options appear in the blade. [Video description ends]

Here, I can select either CNAME or an A record and down below, it gives me instructions on what needs to be created in my DNS zone.

[Video description begins] He clicks a drop-down list box called “Hostname record type” and points to a list of options. [Video description ends]

Now this is all validated. It says the hostname is available and you own the domain.

[Video description begins] He switches to a tab in which a web page labeled "Domain Manager" is open. [Video description ends]

Well, how did it know? Well, I've already gone ahead and created a CNAME record that is instructed with the value of www and then the actual value of this current name.

[Video description begins] He highlights "dockerwebapptestyhz.azurewebsites.net". [Video description ends]

And now that that's there, it checked for that and that's why we have domain ownership.

[Video description begins] He switches to the Microsoft Azure portal. [Video description ends]

So I'm going to click Add custom domain.

[Video description begins] He points to www.lachanceit3.com in the Custom domains page. [Video description ends]

And we can see now, it's been added here to the list. However, it says Not Secure. It's not been secured with SSL. But that's a whole separate issue. Let's just see here. What happens if we go back to the Overview page.

[Video description begins] In the navigation pane, he selects the Overview option and its corresponding page opens in the content pane. [Video description ends]

And we used to have the default azurewebsites.net suffix, but notice now, we have our custom domain name, lachanceit3.com and then www.

[Video description begins] He points to a URL: "http://www.lachanceit3.com". [Video description ends]

So we can browse to that to make sure that it responds and it works perfectly.

[Video description begins] The WordPress web page opens in a new tab. [Video description ends]

The only thing is that it's not currently secured over HTTPS. But again, that's a separate issue. At this point, we've configured a custom DNS domain name for an Azure Web App.


App Services SSL/TLS Bindings
It's important to secure communications over the Internet to web app by using HTTPS. The S is for secure versus just plain old HTTP. But to do that, you need a PKI certificate. And you need to configure a binding to use that with your web application.

[Video description begins] The Microsoft Azure portal is open. In the portal, the All resources blade is open. [Video description ends]

We're going to do that. So we're going to start by generating a PKI certificate here in Azure. To do that, we need a Key Vault. Luckily, I've got a bunch of them.

[Video description begins] In a search box, he enters the text, "kv" and the search result displays two options. [Video description ends]

So I'm going to filter my list of all resources here for kv, and I've got one called KV1East1, that's Key Vault.

[Video description begins] He clicks an option labeled "KV1East1" and a blade called "KV1East1" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

You can store many different types of secrets in a Key Vault, including certificates. So I'm going to click Certificates.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

I can choose to generate or import one. I'm just going to generate a PKI certificate.

[Video description begins] He clicks a button labeled "Generate/Import" and a blade called "Create a certificate" opens. [Video description ends]

The idea being that I want to use it with an Azure hosted web application. It wants a certificate name. I'm going to call it CustomWebSite1. It's going to be a Self-signed certificate. The subject name will be cn, common name, so cn=www.lachanceit3.com. I've already configured this as a custom DNS domain name for my web application.

[Video description begins] He highlights the text, "www.lachanceit3.com". [Video description ends]

Now, that's important because what people are connecting to in the browser, for example, must match what's in the certificate. Otherwise, it's not going to work properly. It won't be secured.

[Video description begins] He clicks an option labeled "DNS Names" and a blade called "DNS Names" opens. [Video description ends]

For DNS Names, I'm going to click that and over on the right for the DNS Name, I'm going put in the same thing, www.lachanceit3.com. That's my custom DNS domain name. I'll click OK.

[Video description begins] The DNS Names blade closes. [Video description ends]

And that's really all I'm going to do here. So let's get this certificate created. I'll click Create. We're going to reference it in a minute when we go to the web app to enable our TLS or SSL binding.

[Video description begins] The Create a certificate blade closes. [Video description ends]

Now, SSL is deprecated. We should never use it. We should only be using newer versions of TLS for security reasons. Okay, I'm going to go into my navigation bar on the left. Go to choose App Services because I want to go to my web app where I want to use that certificate.

[Video description begins] The App Services blade opens. [Video description ends]

I've got one here, it's called dockerwebapptestyhz.

[Video description begins] The corresponding blade opens. [Video description ends]

If I click on that, notice in the Overview blade, we'll see the current URL.

[Video description begins] He points to the http://www.lachanceit3.com URL . [Video description ends]

It's only using HTTP.

But it is using a custom DNS domain name. And that has to match the subject name in our certificate, the common name, which it does. So let's get this working. I'm going to scroll down on the left, got to go to TLS/SSL settings.

And the first thing that I want to do is make sure I go to Private Key Certificates.
And I need to make sure that I bring one in. I'm going to import a Key Vault Certificate.
Basically, the one we just created.
So I need to select the Key vault, KV1East1.
There's our certificate, CustomWebSite1.
So I'm going to go ahead and choose Select. So after we've imported the Key Vault Certificate here, that's fine.
But the next thing is we can then actually use it for an SSL, or TLS in our case, type of binding.
So to do that, over on the left, I'm going to go to Custom domains where I'm going to see the existing custom domain I have here. But it's not secured.
All we have to do is click Add binding over here on the right.
And we've already brought that certificate in here. So there's my custom domain, Choose certificate.
There it is.
And I'll just choose SNI.
And then I'll choose Add Binding. So what we're doing is binding this self-signed certificate to our custom DNS domain name. And now it says SSL state secure. Well, it shouldn't really say SSL. Because whether you're using SSL or TLS, technically is defined by how your web browsers are configured and how your web server stack is configured. But at any rate, we'll let it go. Let's go up to Overview. Let's just check out what's going on here with the URL to our web application.
Now it says HTTPS. And if we click that to browse to it, it says the site's not secured.
Well, of course, that's expected. It's a self-signed certificate. You can install the public root certificate for the signer if we really wanted to in all our devices to suppress this. I'm going to click Details and say no, it's good. Go on to the web page. We know this.
And there's my web page, which is now being served up over HTTPS.
