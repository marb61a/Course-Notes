                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 7


Azure AD Storage Account AD Authentication
  - There are times where you might want to grant storage account permissions to Azure AD users
    - And we can do this by assigning RBAC roles related to storage account usage
  - We get started in the portal, we are looking at the properties of an existing Storage account
    - Within that navigation bar, click Access control (IAM), where we would normally go for RBAC role assignments
    - In this case we are going to click Add and Add role assignment
  - What I want to do is filter the list of roles for any that begin with the word storage, since, we're talking about a storage account
    - From the Role drop-down list, click there and type in storage
    - The first thing we want to do is assign the Storage Account Contributor role 
    - Because we want to allow a specific user in AD, Azure AD or a group perhaps, or even a service principal
    - We want to grant them the ability to manage the storage account, such as creating storage account containers
    - We are going to select that role, what we want to do is assign that to a group
    - In this example type in the word east, we've already got an Azure AD group that we've defined previously called EastAdmins
    - Wwant the members of that group to have storage account contributor permissions
    - We then can go ahead and select that and then click Save
  - If we also want, let's say that same group to be able to upload blobs, 
    - Then we would work with a different role, click Add, Add role assignment
    - The role we are interested in here is going to be the storage blob data contributor role, find that first and make sure that's the correct name
  - We are going to click on list roles, again type in storage and it looks like we were right, Storage Blob Data Contributor role
    - We are going to assign that to the same group so they can also upload blob content to the storage account, then click Save
    - Once that role has been assigned or those roles, we can click on View to view the role assignments.
  - Over on the right here, scroll down, we'll see in fact that EastAdmins has been given the Storage Account Contributor role at This resource
    - So it wasn't inherited from a management group or subscription or resource group
    - Also the Storage Blob Data Contributor
    - Any member of the EastAdmins group, which by the way, why don't we just take a look at that specific group
    - We can see who the members might be because it is the Members of the group that will have those permissions or those abilities at the storage account level
    - And here we can see its users Jen Hill and Marcia Lin. 


Storage Account Access Keys
  - Every Microsoft Azure storage account always has two storage account access keys.
    - Here in the properties of a Storage account, we can go down under Settings and click on Access keys to open the Access keys blade.
  - When we do that, over on the right, we will see that there are two keys
    - Now there are also two connection strings, we're focusing primarily on the keys
    - These keys give access to the storage account, and it's access that would be granted for example, at the command-line level
  - When using command-line tools, you could use the access key to gain access to the storage account
    - Even using GUI tools like Azure Storage Explorer, sometimes developers will be accessing Azure storage account APIs
     - Then we'll need to specify a key to gain programmatic access, either way, that's what it's for
     - But there are two of them, why two? Well, what you could do is you could refresh keys periodically
     - As a matter of fact you should, from a security perspective, but if you're regenerating a key, what you're doing is changing it.
  - We've select a key1, the Regenerate icon, it says, the current key will become immediately invalid and can't be recovered
    - You want to regenerate access key1, we can choose Yes
    - When we do, it looks completely different, so if we had any code or scripts or command-line references to the old key1.
    - They will no longer work, they won't have access to the storage account any longer
    - We would do this on a periodic basis and you'd have to make sure you change all references that use the old key
    - But because it could be disruptive in some cases, that's why you have two keys
    - Because you could have commands and scripts use key2 for a while, as you generate key1
    - Which you might use for new command line or programmatic access
    - You have the access of having a, or the ability rather, having a key that's still valid and useful while you refresh a different one
  - You can also do this at the command line, so let's go ahead and jump into Cloud Shell
    - You can just click Reconnect, if a session times out
    - In PowerShell, we are going to use the New-AzStorageAccountKey cmdlet to generate a new key
  - We will specify the resource group where that account was deployed, the name of that storage account
    - The key we want to regenerate, in this case, key1 and we'll press Enter
    - We can actually retrieve information about that as well, using the Get-AzStorageAccountKey cmdlet
  - That would be Get-AzStorageAccountKey, specify the resource group where the storage account was deployed
    - And the name of the storage account, and when we press Enter, it returns both key1 and key2.


Shared Access Signatures
  - A shared access signature or SAS, S A S, which you'll see when you're looking at the navigation bar for a Storage account
    - You will see it down here Shared access signature
  - This is a way to allow limited access to a storage account to particular services with perhaps only read access as opposed to read, list, and write
    - Even it can have an expiration date and time.
    - The permissions are only good within a certain time frame. Now that's as opposed to Access keys, of which there are two for every storage account.
  - If you have an access key, you have full access to everything in the storage account
    - Not quite so with the Shared access signature, depending on how it's configured, take a look at how that works
    - Go into Shared access signature, and we only want to allow access, let's say, to blobs, not to Azure file shares, queues, or tables.
    - We only want to allow Read and List access, we don't want this Shared access signature to allow the creation of content at the blob level.
  - If I scroll down further we'll also see the timing, the date and the time stuff
    - The starting date and time, the expiry date and time, which we can leave
    - On the same day, we have access starting at about now, 10:56 in the morning, and ending around 6:56:15 PM, we got 8 hours by default
    - Of course, this can be changed that, you can also specify an allowed IP address either individually or range
    - As implied with the faded or ghosted text in that field to help you along
    - It's going to be for HTTPS and we have to choose either key1 or key2 as the Signing key for this signature.
  - We are just going to leave it on key1, and we are going to Generate SAS and connection string
    - Then down below, we'll see it's given me three items, a Connection string, a SAS token
    - Which we would use for programmatic access, and also a Blob service SAS URL
    - We are going to use the Blob service SAS URL down at the bottom here
    - Copy it and then use that to make a connection to the storage account, using the Azure Storage Explorer GUI tool
  - Microsoft Azure Storage Explorer is a free downloadable tool, which we've already downloaded
    - What we want to do is create a new connection using the shared access signature
    - In the left hand navigator, right-click on Storage Accounts, and choose Connect to Azure storage
    - What we want to do is to make a connection using a SAS URI, shared access signature, click Next and paste in the URI
  - Everything else is filled in, including the Display name, we can change that
    - As an example we can call this SASTest, so we can distinguish it from anything else that's already there in the navigation panel
    - Click Next and Connect, in the left-hand navigator, we can now see our SASTest connection to the storage account
    - If we expand it then we can see only Blob containers
  - We have another example up here in the Azure Storage Explorer where we've connected to the storage account using an access key
    - Which provides access to everything in that storage account
    - Here, we only have access to what the shared access signature says we have access to, which is Blob containers
  - If we take a look for example, under eastprojects, we can see some content there
    - We will not be able to upload content because we don't have the ability to add items, only list and read
    - We will try to upload a file here but it's going to fail, it says Insufficient credentials
    - It's not allowed because of the shared access signature, it doesn't allow the adding of content at the blob level.

