                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 9


Blob SAS Token
  - In the Microsoft Azure environment, a shared access signature is usually associated with the storage account.
    - In the portal, we are looking at a Storage account, scroll down and look under Settings we'll see Shared access signature
  - The purpose of this is to allow limited, time-based access to some contents of the storage account
    - Whereas the access keys provide full access to everything in the storage account
    - But we not only have the option of setting up a Shared access signature, for example, to allow access to blobs
    - But we can get even more specific to individual blobs
    - For example, we are going to scroll down further under Blob service and choose Containers
    - Then we are going to pick on a container called eastprojects, where there are some sample files uploaded, one of which is called Project_A.txt
    - We want to set a Shared access signature for that specific blob as opposed to all blobs
    - When we open up the properties on the right, we need to click on the Generate SAS option
  - From here, we can choose the Permissions that would apply here
    - It's set to Read by default, which is it what we want, leave it at that
    - We can see the Start date and time, and the time zone
    - Of course, the idea is that we can have an Expiry date and time as well for when this is good for, this Shared access signature
    - We are going to leave it as it is, we could also specify IP addresses from which access is allowed
    - We are just going to scroll down a little bit by scrolling over to the far right, and see everything
  - Then finally, we have to specify some finalized details here, such as whether we're going to allow HTTPS or HTTP
    - Of course, HTTPS encryption makes sense, Key 1 in our storage account will be used to generate the signature
    - So Generate SAS token and the URL, scroll down to reveal those items, we have both a Blob SAS token and a Blob SAS URL.
  - We can copy the Blob SAS URL by pointing to the copy icon to the far right of it and choosing the copy option, so click, and it says it was Copied
    - Now, when we paste that blob SAS URL on the web browser, it will allow us to access the file
    - Because it's a no MIME type in the browser, it's just the text file
    - It actually shows us the contents of the file as opposed to prompting us to download it


Azure App Service Overview
  - Azure App Service is all about deploying web applications in the Azure cloud as a managed service
    - We can do this by deploying a code based web application or a Docker image based application
  - When you select a Docker imaged based application, you can select between the underlying VM running Windows or Linux
    - Docker allows us to containerize applications, in other words to have a logical boundary around all of the application components
    - That container can be moved to different Docker hosts to run the application
    - The great thing about it as opposed to running an entire VM is that, it relies on the underlying operating system that's already running
    - So loading up a dockerized application is very quick comparing to firing up a VM supporting your app
  - Let's talk about the web app as well as the app service plan. So these are two different types of resources in Azure
    - The web application lets you configure custom DNS domain names, so you don't have to stick with the default DNS suffix
    - Depending on what type of app service plan that you configure, will determine how many custom DNS domain names you can use
    - You can also work with deployment slots, the purpose of a deployment slot is for staging
  - You could have a production deployment slot with the production version of a web app, and as you are making changes and testing them
    - You could have a separate testing slot, then essentially once that comes through as testing successful
    - You can switch it to production so it's visible, for example, to the public once again
    - Deployment slots are a great way to work with a staging environment when you're making changes to a web app, essentially it's changing around domain names
    - We can also configure TLS/SSL settings for a web application, SSL is deprecated so it should never be used.
  - We should be using TLS, Transport Layer Security, to secure network connections
    - Vertical scaling allows us to increase compute power for underlying VMs
    - Horizontal scaling allows us to scale up by adding multiple VMs to handle a busy workload environment for a web app
    - You can also configure WebJobs. WebJob is essentially a tool that lets you schedule 
    - Or run whenever you want some kind of a script or a program to perform some kind of maintenance on a web app
    - The app service plan, as we said, is a separate type of resource in Azure
    - With it, it determines which resources are available to the web app, so the actual underlying horsepower
  - You can also link multiple web apps with the single app service plan
    - The only thing about this to be careful is that if you have one very, very busy application
    - Then it can starve other apps using that app's service plan
    - So you have to be careful about the planning and monitor the performance of the web apps
    - You can view performance metrics at the app service plan level
    - You can look at CPU metrics, memory, traffic in and out and also view file system usage per web application that's linked to that app service plan
  - There are a couple of pricing tiers you should be aware of
    - First of all, they refer to Azure Compute Units or ACUs, ACUs are really just about CPU performance
    - More ACUs means better performance, you can have a tier of dev/testing, or for production environments, production
    - You also have this option called isolated
    - The purpose of the isolated app service plan pricing tier is to have all of your web resources 
    - To support your app deployed into your own Virtual Private Network in Azure.
  - There are many different runtime services supported, so when it comes to languages for your application
    - It's pretty much anything that you might want to use like .NET Core, ASP.NET, Java, PHP, Node.js, Ruby, and so on
    - When you go to the Azure Marketplace to create a new resource, there are plenty of apps available, essentially preconfigured web applications
  - That's another option to consider when you're deploying a web app
    - Sometimes it might be quicker to look through the marketplace and select something and maybe tweak it to your own liking as required
  - You can manage Azure app service web apps using the portal, using ARM templates, using PowerShell
    - Or the CLI, and also using development tools of course, such as Microsoft Visual Studio
    - Where you might write the code for the app and then push it up into the Azure Cloud


Code Web App Deployment
  - Using the portal to deploy a code based web application.
  - To get started, click Create a resource and search for web then choose Web App
    - Now there are a number of things we'll have to specify,  just click Create.
    - Remember that a web application needs to be linked with an app service plan in Azure, that's a separate resource.
  - Either you can create one along with the web app here at this time, or you can use an existing one
    - You can link multiple web apps to a single app service plan. So let's deploy this into a specific resource group
    - Then is the time to give this a Name.
    - We are going to call this webapptest172yhz, remember that the name needs to be unique
    - Notice it's using the .azurewebsites.net DNS suffix by default
    - You can change that, you can configure a custom DNS domain name or multiple DNS domain names if you wish
  - Down below, we can select from either a Code based application where we can select the Runtime stack
    - So for the language support, notice the variances here of .NET, ASP, Java, Node.js, PHP, Python, Ruby.
  - There are a lot of different options
    - Notice that we cannot choose between Linux and Windows when we select a Code based type of application
    - But if we choose a Docker containerized type of application, we can select from either Linux or Windows 
    - For the underlying host that supports that Docker container
  - We are going to go to code-based and put this in a specific region
    - This can be any but in this particular example maybe use a nearby region
    - Down below, here's the App Service Plan affiliation
    - We can either select an existing one if we have it, we don't because there are none showing up in the list
  - It's selected to create a new one automatically and it's got a name for it, which is fine
    - We could change that but we can go with that
    - Delow, the sku and the size, it looks like we have 210 total ACUs, an ACU is an Azure Compute Unit
    - That's the unit of measurement that's used to reference CPU compute power here for your app service plan
    - You can change the size, by just clicking Change size option

