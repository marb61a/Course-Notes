                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 9
                    
                    
Azure AD Role Overview

[Video description begins] Topic title: Azure AD Role Overview. The presenter is Dan Lachance. [Video description ends]

In Azure Role-Based Access Control, otherwise called RBAC is a way to delegate permissions to others to manage Azure resources.  

[Video description begins] Azure Role-based Access Control (RBAC). [Video description ends]

There are a number of built in roles that you can select from or you can define your own custom roles if they don't suit your needs. Some examples of built in roles include the owner role.

[Video description begins] Azure Built-in RBAC Roles. [Video description ends]

Now if you have the owner role, you have full resource management control of all resources in Azure. We haven't yet talked about the scope of where that applies, but unto itself that's what it means. Think of an RBAC role as being a collection of related permissions. You've got the contributor role. So resource control, other than changing RBAC access. Reader role, which implies read-only access. Other examples would include CDN endpoint reader for Content Delivery Network endpoint reader. So you can read endpoints. But that's it, can you configure them. Cost Management contributors you can read and write Azure cost configurations including working with budgets, virtual machine administrator login as it implies. You can read VMs in the portal and login with admin credentials.

[Video description begins] Azure Custom RBAC Role Process. [Video description ends]

Now there are many more built in roles than that, that's just to give us a sampling of what we might expect. But you can also work with custom roles. Maybe you need one role that combines virtual machine and cost management permissions for example. So what you would do is create a custom JSON role file, this is just a text file that uses JSON syntax. You have to know what that syntax is to properly define the role, and then you can create the role from that file. For example in PowerShell, you can do that with the New-AzRoleDefinition cmdlet, or in the CLI you might use AZ role definition create.

[Video description begins] Azure Custom RBAC Role JSON File. Several lines of code are displayed. [Video description ends]

Working with a custom RBAC role file uses JSON syntax, you could even type this into your favorite text editor, it doesn't matter. But notice we've got the opening and closing curly braces at the very top and the very bottom. And the first item we see defined here is the "Name": custom VM roles It's got its own ID, the IsCustom flag third line down is set to true. We have a Description, and then we have a collection of actions. What are the permissions grouped together here within this role? So it looks like we have a bunch of read access to all items indicated with the asterisk in storage, network and compute, and then the ability to start and restart virtual machines. So this is what we would see within a custom RBAC role definition file.

[Video description begins] RBAC Role Assignment. [Video description ends]

Now we can assign roles, whether they're built in or custom at a variety of levels within the hierarchy in Azure. But before we get to that, let's talk about which principals we can assign it to. You can assign roles to users individually, but it's normally easier to do it on a group level. So you just add members to the group, they get the permissions for the roles assigned to the group. You could also do it for service principles. Think of a service principle as being kind of a dummy user account used by software. It's not actually user logging in, it's a software component that might require access, let's say, to some other resource like a storage account.

Then you've got managed identities. Now, this is something this is a built in type of security principle that's managed automatically by Azure. So this would be used for example, when if you're a software developer, you building custom solutions in Azure that need to authenticate to certain Azure services. So depending on what you're working with, will determine whether Azure creates the managed identity or not. So let's say that we've assigned a role to a group.

[Video description begins] RBAC Assignment Scopes. [Video description ends]

Where does that apply in the Azure hierarchy? Well, we can assign that at the subscription level, which means that the group members would have those permissions from the role for everything in the entire subscription, it flows down through the hierarchy down to resource groups and down to individual resources in resource groups. However, you could also assign RBAC roles to a specific resource group. And naturally those permissions would only apply for resources in the resource group. And if you need to be very granular, you can also assign it to a specific resource. So let's say you need to allow a virtual machine login for a group for one particular virtual machine. You can certainly do that by assigning the scope for that particular virtual machine resource.

[Video description begins] Inherited RBAC Assignments. [Video description ends]

Pictured on the screen we have a screenshot that shows us how inheritance works in the portal. So in the upper left, notice that we're looking at a resource group called Rg1. And if you look in the navigation panel, the Access Control (IAM) blade has been selected. That's what we're seeing on the right, we are viewing the permissions. And over on the right we can see Network Contributor which is a role has been assigned to a Group. That's called Central_Region_Canada and that was applied at this resource. Remember this resource is the Rg1 resource group. So the members of that group will have the network contributor role for resources in Rg1. Down below notice the Owner role, which was assigned to the Azure_Admins Group. Now, these groups are Azure AD groups. Notice over to the far right it says that that was (Inherited) from the Subscription level. So it's inherited from above but it's still applies here.

Azure AD Role Portal Assignment

[Video description begins] Topic title: Azure AD Role Portal Assignment. The presenter is Dan Lachance. [Video description ends]

You can use the Azure Portal to assign roles and also to view where the roles are effective. 

[Video description begins] A web portal called "Microsoft Azure" opens. [Video description ends]

We're talking about Role-Based Access Control, or RBAC. So to get started here in the portal, I'm going to search for subscription, and I'm going to go to the subscription level, because I want to start by applying a role there.

[Video description begins] He selects an option called “Subscriptions” from the search result and a page called "Subscriptions" opens. It includes a table with five columns and one row. The column headers are Subscription name, Subscription ID, My role, Current cost, and Status. [Video description ends]

Then we can examine how those permissions flow down the hierarchy, that means to resource groups within the subscription and within resource groups to individual resources. So let's start by opening up a subscription.

[Video description begins] He clicks a row entry called "Pay-As-You-Go" under the Subscription name column header and its corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Now when you want to assign RBAC roles, regardless of which level you're doing it at, you always go into the properties of the item, in this case, the Subscription. And in the navigation bar, you click on Access control (IAM). Now from here, you'll be able to see any role assignments.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

You can choose to View role assignments.

[Video description begins] A tab called “Role assignments” opens. [Video description ends]

So if I click View, I can see that listed over here on the right, but I can also +Add role assignments, which we're going to do. So I'm going to click +Add, Add a role assignment. And the first thing I need to do is select the appropriate Role.

[Video description begins] From a list of options, he selects an option called “Add role assignment” and a blade called "Add role assignment" opens. [Video description ends]

I can choose from the alphabetical list of role names. And bear in mind that a role is really just a collection of related permissions. So what I'm going to do is type in the word virtual just to filter this out. And we'll see here we've got a Virtual Machine Contributor role, which allows with the creation of virtual machines and management of them. So I'm going to leave that as the Role.

[Video description begins] He clicks a drop-down list box called "Role" and selects an option called "Virtual Machine Contributor". [Video description ends]

Now I can assign the access to Azure AD users, groups, or service principals.

[Video description begins] He types, “east” in a text box called “Select”. [Video description ends]

So what I'm going to do here is take a look for a group by the name of east. And sure enough, I have an existing Azure AD group I've created previously called EastAdmins. I want to assign this role to that group. So EastAdmins is now showing up down below as a selected member.

[Video description begins] He selects an option called “EastAdmins”. [Video description ends]

I'm going to save that.

[Video description begins] He clicks a button called "Save" and the Add role assignment blade closes. [Video description ends]

Now at this point, we want to check our work right here at this level, at the subscription level. So I'm just going to scroll over a little bit to the right so we can kind of see everything, including our scroll bar. And at the subscription level, notice for the Virtual Machine Contributor role, EastAdmins is part of that. And we can see that that is a Group and that it was assigned at the Scope of This resource. Now why don't we take a look at a resource group somewhere within the Subscriptions.

[Video description begins] He clicks a link called “Home” and the corresponding page opens. [Video description ends]

So for that I'm just going to go to Home, actually, I'll just open up my navigation bar on the left, and I'll just choose Resource groups.

[Video description begins] A page called "Resource groups" opens. It includes a table with three columns and five rows. The column headers are Name, Subscription, and Location. [Video description ends]

I'm going to open up the properties of an existing Resource group.

[Video description begins] He clicks a row entry called “Rg1” under the Name column header and its corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And we know that to get to the RBAC portion of that item, we need to click on Access control (IAM), so I'm going to do that.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

Now I don't want to make a role assignment here, what I want to do is View role assignments, so I'm going to click the View button. And I'm just going to scroll over just a little bit so we can see what's happening here.

[Video description begins] The Role assignments tab opens in the content pane. [Video description ends]

And as I scroll down, notice that EastAdmins has the Virtual Machine Contributor role that is effective here in my resource group. However, it says Inherited, and it was inherited from the Subscription level. So why don't we go into an object within this resource group to take a peek.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

So for example, if I click on Overview here for the resource group, one of the things I'll be able to do is see the resources down below that are in that resource group. It doesn't matter which one I pick. I'm just going to click on this network security group to open it up.

[Video description begins] He clicks a row entry called “NSG-Windows” and its corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And as is the case with what we've been looking at so far to get to the RBAC section, we click Access control (IAM), so this is for an individual resource.

[Video description begins] The corresponding page opens. [Video description ends]

Let's View the role assignments over on the right, and we'll see, of course, that Virtual Machine Contributor EastAdmins is shown here with inheritance coming from the Subscription level.

[Video description begins] The Role assignments tab opens. [Video description ends]

So that's all that we need to do to be able to grant permissions to Azure resources through the use of roles in the portal.

Azure AD Role CLI Assignment

[Video description begins] Topic title: Azure AD Role CLI Assignment. The presenter is Dan Lachance. [Video description ends]

RBAC roles can be assigned using the Azure CLI.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

Here in the portal I'm going to click on Cloud Shell to start up the CLI, and I'm going to start by creating a role assignment using az role assignment create.

[Video description begins] A command prompt window called "PowerShell" opens in the web portal. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I have to do is specify the name of the role that I want to grant, in this case --role and in quotes, "SQL DB contributor". I then have to determine who the assignee is with the --assignee parameter who you assigning this to. Now it could be a service principle and Azure AD group, in this case, it's an Azure AD user, specifically jhill. And then I've got the full email address or user name of that account. I want to make sure that the SQL DB contributor role is assigned to jhill, and I want the scope to be a resource group. So --resource-group, and Rg1. Could go ahead and press Enter to create that role assignment.

[Video description begins] He executes the following command: az role assignment create --role "SQL DB Contributor" --assignee jhill@quick24x7test.onmicrosoft.com --resource-group Rg1. The output displays several lines of code. The prompt does not change. [Video description ends]

And it looks like it's good. We've got some returned JSON, and we can check our work here in the portal. Let's just minimize this.

[Video description begins] He switches back to the Microsoft Azure web portal. He clicks an option called "Resource groups" and a page called "Resource groups" opens. [Video description ends]

Let's go into the Rg1 Resource group to see if user J Hill is shown there with the SQL DB Contributor role.

[Video description begins] He clicks a link called "Rg1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

 So I'm going to go to Access control (IAM) for Rg1.

[Video description begins] He clicks an option called "Access control (IAM)" in the navigation pane. The corresponding page opens in the content pane. [Video description ends]

And what we want to do in there is View the role assignments, so I'll just go ahead and click on that, scroll over a little bit and let's go down and take a peek.

[Video description begins] He clicks a button called "View" in the content pane. The Role assignments tab opens. [Video description ends]

Sure enough their SQL DB Contributor and Jen Hill is a member of that role at this level, This resource. It wasn't inherited from the subscription, so let's go back into the CLI.

[Video description begins] He switches back to the PowerShell command prompt window. [Video description ends]

So I can also view assignments from within here, of course as you might imagine, so az role assignment list --, let's say resource group rg1 since that's what we just looked at in the portal.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And we can see here that user principalName J Hill is assigned here.

[Video description begins] He executes the following command: az role assignment list --resource-group rg1. The output displays several lines of code. The prompt does not change. [Video description ends]

And we can also see that the roleDefinitionName is SQL DB Contributor, and this is for the resource group of course Rg1 that we asked for, up above in the command line.

[Video description begins] He points to the output. [Video description ends]

We can also remove role assignments from here as well.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

To do that I would use the az role assignment delete command syntax. I need to specify the assignee, so --assignee, and it's going to be the user we just added here in this example, jhill. And have to specify the role because she might be assigned with multiple roles at that level, so --role SQL DB Contributor. And the scope where that was applied, that I want to remove it from, is the Rg1 resource group. So let's go ahead and press Enter. Now, that's going to remove that role assignment.

[Video description begins] He executes the following command: az role assignment delete --assignee jhill@quick24x7test.onmicrosoft.com --role "SQL DB Contributor" --resource-group Rg1. No output is displayed and the prompt does not change. [Video description ends]

So I'm just going to use the up arrow key, back to where we were listing role assignments for resource group 1, or Rg1. And notice now nothing is returned.

[Video description begins] He executes the following command: az role assignment list --resource-group rg1. The output reads []. The prompt does not change. [Video description ends]

Azure AD Role PowerShell Assignment

[Video description begins] Topic title: Azure AD Role PowerShell Assignment. The presenter is Dan Lachance. [Video description ends]

PowerShell cmdlets can be used to manage RBAC role assignments. Here in the portal, I'm going to launch the Cloud Shell to access those PowerShell cmdlets.

[Video description begins] The Microsoft Azure web portal opens. He clicks an icon called “Cloud Shell” and the PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I'm going to do is create a new role assignment. Now to do that, I'm going to use the New-AzRoleAssignment PowerShell cmdlet. I'm going to use the -SignInName parameter. And I'm going to assign this to an Azure AD user jhill@quick24x7test.onmicrosoft.com. Now I could also apply this to a service principle in Azure AD or a group. But in this case, it's an individual Azure AD user. I have to specify the RoleDefinitionName, so I'll specify that parameter. In this example, it's going to be the SQL DB Contributor. And as we know when we work with RBAC, we have to determine the scope where the assignee can exercise those privileges. In this case -ResourceGroupName, Rg1. I could specify a subscription or an individual resource, here I want it done at the resource group level. So I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: New-AzRoleAssignment -SignInName jhill@quick24x7test.onmicrosoft.com -RoleDefinitionName "SQL DB Contributor" -ResourceGroupName Rg1. The output displays the details of the role assignment. The prompt does not change. [Video description ends]

Now we can verify this using PowerShell cmdlets. So I'm just going to clear the screen and what we're going to do, is we're going to retrieve role assignments for Rg1 for that user.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

To do that, I'm going to use Get-AzRoleAssignment -ResourceGroupName is Rg1, that's where we just assigned it. -SignInName is going to be our user J Hill. Let's go ahead and press Enter and see what it returns.

[Video description begins] He executes the following command: Get-AzRoleAssignment -ResourceGroupName Rg1 -SignInName jhill@quick24x7test.onmicrosoft.com. The output displays the details of the role assignment. The prompt does not change. [Video description ends]

So we're seeing that user Jen Hill has been assigned the SQL DB Contributor role. And of course we asked for this at the Rg1 resource group level so she has those permissions for SQL database deployments within the Rg1 resource group. Now naturally, we need to know how to be able to remove role assignments using PowerShell.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

We know how to add them and check them, what about removing them? We do that with the Remove-AzRoleAssignment PowerShell cmdlet. As you might expect, in this case, we're going to use -SignInName and specify our Azure AD user sign in name, the email address. I'm going to specify the role with -RoleDefinitionName. It's going to be SQL DB Contributor. And I have to apply that to a scope. Where do you want to remove that from? Well, that would be -ResourceGroupName of Rg1, so I'm going to go ahead and press Enter to remove the role assignment.

[Video description begins] He executes the following command: Remove-AzRoleAssignment -SignInName jhill@quick24x7test.onmicrosoft.com -RoleDefinitionName "SQL DB Contributor" -ResourceGroupName Rg1. No output is displayed and the prompt does not change. [Video description ends]

We're going to check our work. I'll use the up arrow key to bring up previous commands.

[Video description begins] He executes the following command: Get-AzRoleAssignment -ResourceGroupName Rg1 -SignInName jhill@quick24x7test.onmicrosoft.com. No output is displayed and the prompt does not change. [Video description ends]

Up to where we get back to Get-AzRoleAssignment and when I press Enter, nothing is returned because user J Hill no longer has that role assigned in Rg1.

Azure AD Custom Roles

[Video description begins] Topic title: Azure AD Custom Roles. The presenter is Dan Lachance. [Video description ends]

If the built in roles for RBAC in Azure don't meet your needs, you can then define your own custom roles in a JSON formatted file as I've got open here. So it's a JSON formatted file, it's just a text file really.

[Video description begins] He opens a WordPad file called "Create_Custom_Role.json". It contains several lines of code. [Video description ends]

I've got the opening and the closing curly braces. And here, I'm defining the Name of my custom role to be Custom - Network Resource Reader. IsCustom is set to true and I've also got a description here that says, Ability to view network resources. Then you have to define what this role's actions are, what can someone do in terms of permissions if they are assigned this role. So here for actions, I'm specifying Microsoft.Network/*, so all Microsoft Network types of resources in Azure, but the ability to only read them, read.

There are no definitions for NotActions, only actions that we want to allow. And for the AssignableScopes here, I've set it at the subscription level with the ID of my Azure subscription. So now, how do we take this and create a custom role? Well, there are a number of ways that that can be done. We can do this in PowerShell and that's actually what I'm going to do here. So the next thing I need to do is launch the Cloud Shell so I can get to a place where I can issue PowerShell commands.

[Video description begins] He opens the Microsoft Azure web portal. He clicks the Cloud Shell icon and the PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So I'm going to go ahead and launch Cloud Shell. Now, the first thing I have to think about is that the file that we just looked at for our custom JSON role definition was on-premises. I need to get it up here in the cloud in Cloud Shell. So I've got this button at the top here in the bar where I can upload and download files. I'm going to go ahead and click Upload/Download files, and then I'll choose Upload. So I've specified my file and it looks like the upload has completed. So the first time you open Cloud Shell, you're asked to set up storage. And this is one of the reasons so you can have persistent storage of items that you might deal with, in this case, a file I've uploaded. If I do dir, I can see indeed, there's the Create_Custom_Role.json file that we were just looking at in WordPad just a few minutes ago.

[Video description begins] He executes the following command: dir. The output displays a list of files in the directory. The prompt does not change. [Video description ends]

So what I want to do then is I want to make sure I create a new role from this. So I'm going to do that with the new-azroledefinition PowerShell cmdlet. I'm going to pass it the -inputfile parameter with the value of, in this case, create. And I can even use my tab completion to spell out the rest of it since I'm in the same subdirectory. Let's see what happens. I'm going to go ahead and press Enter to create this custom role, and it should be done.

[Video description begins] He executes the following command: new-azroledefinition -inputfile ./Create_Custom_Role.json. The output displays the details of the newly created role. The prompt does not change. [Video description ends]

Now, we can check this here in the portal. So again, it's called Custom - Network Resource Reader. So let's say we were going to go to the subscription level and apply that role.

[Video description begins] He switches back to the Microsoft Azure web portal. He clicks an option called "Subscriptions". A page called "Subscriptions" opens. [Video description ends]

So I'm going to go into my subscription.

[Video description begins] He clicks a row entry labeled "Pay-As-You-Go". A blade called "Pay-As-You-Go" opens. [Video description ends]

We know that in the GUI when you want to work with RBAC, you go into Access control (IAM). So I'm going to do that.

[Video description begins] He clicks an option called "Access control (IAM)" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

And one of the things that we're going to do here is click +Add, Add role assignment.

[Video description begins] The corresponding page opens. [Video description ends]

And, we have a unified drop down list here of both built in and custom roles. Now remember, our role starts with the word custom. And you can actually select it from the list, or you can even filter the list if you so choose.

[Video description begins] He clicks a drop-down list box called “Role”. [Video description ends]

So if I type in custom, we can see right away, Custom - Network Resource Reader. That's the role we just created. And we can see the description here, Ability to view network resources. That's what we've just created. Now, you can also remove that from PowerShell. So let me just go back here into PowerShell.

[Video description begins] He closes the page. He switches back to the PowerShell command prompt window. [Video description ends]

Let's get rid of that.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

I'm going to run get-azroledefinition, and I'm going to specify the name of it, which is going to be Custom - Network Resource Reader, the spaces between those items. Now when I do that, all it does is return that yes, that role is there, that definition exists. So I'm going to bring up that command again with the up arrow key.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader". The output displays the details of the role. The prompt does not change. [Video description ends]

What I want to do is pipe the result of that to the remove-azroledefinition cmdlet. So we're going to retrieve that specific role and pass it through and delete it. Are you sure you want to do, or we can actually suppress that message.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader" | remove-azroledefinition. A confirmation message appears. [Video description ends]

Let me just Control+C out of there.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So, if I bring back that full command again, I can just add -force, if I could spell that over correctly over here. And it will suppress that message so it will remove that role.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader" | remove-azroledefinition -force. No output is displayed and the prompt does not change. [Video description ends]

So if we use our up arrow key to go back a little bit, where we were getting that role definition, it no longer exists.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader". No output is displayed and the prompt does not change. [Video description ends]

Resource Locking Overview

[Video description begins] Topic title: Resource Locking Overview. The presenter is Dan Lachance. [Video description ends]

The purpose of Microsoft Azure resource locks is to control when others can modify or delete Azure resources of any type, whether that's intentional or unintentional.

[Video description begins] Azure Resource Locks. [Video description ends]

So it's a way to basically check out a resource, so to speak. And while it's checked out, in a manner of speaking, it can't be either modified or it can't be entirely deleted. We can set resource locks at the subscription level. And similar to how you apply RBAC roles at the subscription level and it flows down to everything in the subscription, like resource groups and resources, the same thing is true with Azure resource locks. If you set a resource lock at the subscription level, it will flow down to resource groups and resources. You could, of course, apply an Azure resource lock initially at the resource group level, or you might lock an individual resource such as a storage account, to prevent the modification of its properties. Now you can set the Azure resource lock to be read-only.

[Video description begins] Azure Resource Lock Levels. [Video description ends]

What that means is you are allowing read-only access to the item, so that it can't be reconfigured, so to speak. Or you could set it to not allow deletion or to prevent deletion of the resource.

[Video description begins] Azure Resource Lock Inheritance. [Video description ends]

So the inheritance, as we've mentioned, starts at the subscription level, then applies to resource groups, and then applies to individual resources. Now if you don't want that, in other words, you don't want the locking applying everywhere, simply specify the lock at the resource group or the individual resource level.

[Video description begins] VM and storage account are displayed as the individual resources. [Video description ends]

And you can disable or unlock the subscription, the resource group or the resource, at any point in time, once you've deemed it appropriate to allow modifications or the potential for deletion. Bear in mind that modification and deletion of an Azure resource is only possible anyways if somebody has the appropriate permissions to do so, which is usually granted through RBAC roles.

Resource Locking and the Portal

[Video description begins] Topic title: Resource Locking and the Portal. The presenter is Dan Lachance. [Video description ends]

In Microsoft Azure, a resource is an object that you define in the cloud, such as a virtual machine or a disk that you would attach to a virtual machine or a storage account or a SQL server. Any of those things are resources. And so we have the ability to use the portal to lock resources. Why would you do that? You would do it because you want to prevent either a modification of a resource, you want it to be read-only, or you want to prevent the deletion of it.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

So we can set locking at various levels in the Azure hierarchy, such as at the subscription level. Now, that's what I'm going to do.

[Video description begins] He clicks the Subscriptions option and the corresponding page opens.[Video description ends]

For example, here if I go into the subscription, I'll be able to open it up, to reveal its properties, and I am interested primarily in resource locking.

[Video description begins] He clicks the Pay-As-You-Go row entry and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

So I'm going to scroll all the way down under Settings where I see Resource locks.

[Video description begins] He clicks an option called "Resource locks" and the corresponding page opens. [Video description ends]

Any existing resource locks at this level will be shown. It says This resource has no locks. Okay, well, I could click +Add, and I could add a lock at this level.

[Video description begins] A section called "Add lock" opens. [Video description ends]

And when I do that, I specify a name and I can determine if it should be a Read-only lock, so to prevent modifications, or if I want to prevent deletions.

[Video description begins] He clicks a button called "Cancel". [Video description ends]

 I'm not going to do that though I could, but I'm not going to. Instead, I'm going to navigate to Resource groups.

[Video description begins] He clicks an option called "Resource groups" from the left-hand navigator and a page called "Resource groups" opens. [Video description ends]

So what I want to do then is take a look at the resource locking options at the Resource group level, which would be inherited by the resources in the Resource group. I'm going to click on my resource group Rg1.

[Video description begins] The corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And in the Overview blade, one of the things you'll see over on the bottom right are the resources in that resource group. So let's scroll down in the navigation bar and let's take a look at resource locks. So it's listed a little bit differently here. Under Settings, it just says Locks.

[Video description begins] He clicks an option called “Locks” and the corresponding page opens. [Video description ends]

If we take a look, we'll see if there are any locks that have been made here. Now, we've got the Subscription icon where we could take a look at subscription level locks.

[Video description begins] He clicks an icon called "Subscription" and a page called "Resource locks" opens. [Video description ends]

We were just there a few moments ago.

[Video description begins] He clicks a link called “Rg1 | Locks” and the Locks page opens. [Video description ends]

It's just a shortcut to get there. However, we can also add locks at this specific level for this particular Resource group.

[Video description begins] He points to Rg1. [Video description ends]

So that's what I'm going to do. I'm going to click Add. And I'm going to call this, let's say Lock1. And I'm going to set it as a Read-only lock here.

[Video description begins] He clicks a drop-down list box called “Lock type” and selects an option called “Read-only”. [Video description ends]

I could add Notes if I so chose, I don't choose to so I'm just going to click OK. And after a moment, we can see that Lock1 shows up here as Read-only for resource group 1. If I click Subscription once again, then we can see that it shows up at the subscription level and we can see the Scope that it's applied to is only rg1.

[Video description begins] The Resource locks page opens. [Video description ends]

Notice, you can Edit it to change any settings related to that or Delete that lock.

[Video description begins] He switches back to the Locks page. [Video description ends]

 If I go back to the Resource group, you can see the lock here.

[Video description begins] He clicks a link called "Lock1" and a page called "Edit lock" opens. [Video description ends]

And if you click on it, it'll pull up the items where you can modify its settings. But you can't delete it from here, you'd have to go to the subscription level and that's to be expected. Now, let's take a look at some of the resources within Rg1.

[Video description begins] He closes the page. [Video description ends]

We can do that by just scrolling up, clicking Overview. We'll see any resources deployed into this resource group, as we mentioned previously, listed in the bottom right.

[Video description begins] The corresponding page opens. [Video description ends]

For example, here's a resource group called, or pardon me, here's a network security group NSG called NSG-Windows.

[Video description begins] A blade called "NSG-Windows" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

If I click to open it up, we'll be able to look at the Locks for that particular individual resource.

[Video description begins] He clicks an option called "Locks" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

When I click Locks here, notice we can see Lock1 is applied Read-only. And it says Parent resource locks, can't edit them here. Click on the locks scope to go to that scope. Okay, so we'd have to go up to in this case rg1 to take a look at it. But interestingly, if we try to delete this resource, so let's say go back to Overview and normally we'll just go to Delete here.

[Video description begins] He clicks an option called "Overview" in the navigation pane and the corresponding page opens in the content pane. He clicks a button called "Delete" and a message box labeled “Delete network security group” opens. [Video description ends]

And normally, if you have the role permissions to do this it would succeed. Let's go ahead and say, Yes get rid of it.

[Video description begins] He clicks a button called “Yes”. [Video description ends]

It says, I can't do it, cannot do it because there is a lock.

[Video description begins] Another message box opens. [Video description ends]

And it's at the Rg1 level. So therefore, that's not going to happen. It's read-only, which will also prevent modifications here to this particular object.

[Video description begins] He clicks an option called "Inbound security rules" and the corresponding page opens. [Video description ends]

So for example, if I go to Inbound security rules, let's say I go to +Add a new rule, we'll just fill in a couple of blanks here really quickly.

[Video description begins] He clicks a button called "Add" and a page called "Add inbound security rule" opens. [Video description ends]

So I'm just going to accept all of the defaults and I'm going to click Add.

[Video description begins] The page closes and a message box opens. [Video description ends]

Well, it didn't even like that. So I can't even modify it, let alone delete it. Bear in mind, we set a read-only type of lock at the resource group level and it's flowing down at the resource level. So to get rid of all of this, what I could do is go up to the subscription level, as we saw because that's where it allows us to actually delete locks.

[Video description begins] He switches back to the Subscriptions page. [Video description ends]

So I'm going to do that, I'm going to go back into my Pay-As-You-Go subscription. And I'm going to scroll down and look at Resource locks.

[Video description begins] He clicks the "Pay-As-You-Go" row entry and the corresponding blade opens. [Video description ends]

And we'll see the resource lock applied at the resource group level.

[Video description begins] He clicks an option called “Resource locks” and the corresponding page opens. [Video description ends]

So I'm just going to take a look at that.

[Video description begins] He clicks the "Lock1" link and the "Edit lock" page opens. [Video description ends]

Now of course, we can only edit what's there, but if we scroll to the right to see what's over on the far end, there's the Delete option.

[Video description begins] He clicks the Cancel button and the page closes. [Video description ends]

So I'm going to press Delete, and now it's gone.

[Video description begins] The Lock1 link is deleted. [Video description ends]

Resource Locking and the CLI

[Video description begins] Topic title: Resource Locking and the CLI. The presenter is Dan Lachance. [Video description ends]

Resource locking can be managed using CLI commands just as well as it can be done using the portal.

[Video description begins] The Microsoft Azure web portal opens. He clicks the Cloud Shell icon and the PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So I'm going go into the Azure CLI and I'm going to start by using the az -h command because I don't know what the syntax is. So there's a lot of stuff here, the next level commands after az.

[Video description begins] He executes the following command: az -h. The output displays a group and various commands with their description. The prompt does not change. [Video description ends]

I'm going to guess it might be in the Rs for resource lock, but I don't see anything like that. Okay, not that. I'm going to next guess that it's somewhere in the Ls. Here it is, lock, Manage Azure locks.

[Video description begins] He highlights the following text in the output: lock: Manage Azure locks. He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So therefore, I can do az lock -h to try to figure out how to proceed from here.

[Video description begins] He executes the following command: az lock -h. The output displays the help on the az lock command. The prompt does not change. [Video description ends]

So, to Create a lock, Delete a lock, list locks, and so on. Got it. So, I'm going to run az lock create, and I'm going to create a lock here called Lock2.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

And I'm going to set it at the resource group level. I don't have to, I could set it at the subscription level. I could even set it at an individual resource level. But commonly, you would find it would be done at the resource group level, in this case, Rg1. I'm going to specify --lock-type and I'm going to set it to readonly. So I want to prevent modification, which also includes preventing deletion. So it's called Lock2, this looks good.

[Video description begins] He executes the following command: az lock create --name Lock2 --resource-group Rg1 --lock-type readonly. The output displays the details of the lock created. The prompt does not change. [Video description ends]

Let's check it out in the portal to see what it looks like in Rg1. So let's see.

[Video description begins] He switches back to the Microsoft Azure web portal. [Video description ends]

I'm going to go to my navigator up here on the left and go to the Resource groups view, where we are going to see Rg1.

[Video description begins] A page called "Resource groups" opens. [Video description ends]

I'm just going to go ahead and click to open that up.

[Video description begins] A blade called "Rg1" opens. The blade is divided into two parts: navigation pane and content pane. [Video description ends]

Let's go down and check the locks for it shall we. So scroll down and we're going to take a look at the locks, there it is, Locks. And we can see that Lock2 Read-only has been set here.

[Video description begins] He clicks an option called “Locks” under a section called “Settings” in the navigation pane and its corresponding blade opens in the content pane. It includes a table with four columns and one row. The column headers are Lock name, Lock type, Scope, and Notes. [Video description ends]

And again, it's been set at this level rg1. Now of course, if we scroll over to the far right, we can choose to Edit or Delete it. We could also go up to the Subscription level, where we'll see all the locks in the subscription, even if they weren't tied to the subscription levels.

[Video description begins] He clicks a button called "Subscription" and the corresponding page opens. It includes a table with four columns and one row. The column headers are Lock name, Lock type, Scope, and Notes. [Video description ends]

There it is. And from here, we can also Edit and Delete it at that level. But of course, we can also do that in the CLI.

[Video description begins] He switches back to the PowerShell command prompt window. The following prompt is displayed: /home/danlachance72>. [Video description ends]

Back here in the CLI, for example, we might run az lock list.

[Video description begins] He executes the following command: az lock list. The output displays the list. The prompt does not change. [Video description ends]

And here, we'll see that we do have a lock that's applied it's called Lock2, it's been applied to Rg1, and the locking level has been set to ReadOnly.

Resource Locking and PowerShell

[Video description begins] Topic title: Resource Locking and PowerShell. The presenter is Dan Lachance. [Video description ends]

You can use PowerShell cmdlets to manage resource locking in Azure.

[Video description begins] The PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started here in PowerShell, I'm going to run get command and I'm going to search for any cmdlets that have resourcelock in their name. So I'm going to pad the string resource lock with an asterisk on either end. So as long as it's got resource lock in the name, I want to see the cmdlet.

[Video description begins] He executes the following command: get-command *resourcelock*. The output displays the list of the commands with the word resourcelock in tabular format. It include four column and eight rows. The column headers are CommandType, Name, Version, and Source. The prompt does not change. [Video description ends]

And right away we can see for instance, New-AZResourceLock to create a new lock, or Get-AZResourceLock to retrieve a list of locks through Azure. We even have the option to remove or set a lock.

[Video description begins] He highlights the row entries under the Name column header in the output. [Video description ends]

And if I wanted more details on any one of these, I could run get-help, let's say a new-azresourcelock. I could ask for detail, and maybe pipe it to more to stop after the first screen full of output.

[Video description begins] He executes the following command: get-help new-azresourcelock -detail | more. The output displays the details and syntax of the command. The prompt does not change. [Video description ends]

Here I can see the syntax for this cmdlet, including the parameters, such as -LockId, -LockLevel and so on, even to the point where I'll see an example of how I can actually create a resource lock.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

Let's get started by retrieving resource locks with get-azresourcelock. I'm going to press Enter.

[Video description begins] He executes the following command: get-azresourcelock. The output displays the details related to resource lock. The prompt does not change. [Video description ends]

So it looks like we already have a lock called Lock2 that has been applied to a resource group called Rg1. And the level we can see here has been set as ReadOnly. So what I want to do is remove that lock. In order to do that, I need to get this LockId.

[Video description begins] He highlights the LockId value in the output. [Video description ends]

So in order to do that through variables, I'm going to create a variable called $lock.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So the variable's $lock and it's going to equal the return value of running get-azresourcelock. I'll specify a lock name of lock2 and we know that that applies to a resource group called rg1. But I need the lockid property. Notice I've enclosed that expression within opening and closing parentheses. That's because .lockid will be a property of us retrieving that lock with that statement. Otherwise it'll think we're looking at lockid as being a property of rg1.

[Video description begins] He executes the following command: $lock=get-azresourcelock -lockname lock2 -resourcegroupname rg1.lockid. The output reads: Get-AzResourceLock: LockNotFound : The lock 'lock2' could not be found. The prompt does not change. [Video description ends]

Actually, let's see what that would look like in terms of an error if we didn't have those parenthesis there, what would it look like? Okay, well, we're getting some kind of a message about lock2 could not be found. So it's having a problem finding all of this. However, if I bring up the previous command where we did have our open and close parentheses, it didn't give us any complaints.

[Video description begins] He executes the following command: $lock=(get-azresourcelock -lockname lock2 -resourcegroupname rg1).lockid. No output displayed and the prompt does not change. [Video description ends]

And so if we just run $lock to see what's in the variable, looks like it's got the lockid because that's what we asked for, that's the property that's stored in the variable.

[Video description begins] He executes the following command: $lock. The output reads: /subscriptions/048b82ac-4519-403b-ab05-6b4305502109/resourceGroups/Rg1/providers/Microsoft.Authorization/locks/Lock2. The prompt does not change. [Video description ends]

Then given that we have that it's at this point that we are able to remove that resource locks. We have a lockid. We can do that with remove-azresourcelock -lockid, and we'll just pass it my variable now $lock. And actually if I don't tell them anything, it asks me for confirmation which I'll Ctrl C to that and then I'll clear the screen and bring up that command again, I'm just going to add -force to suppress it asking me and after a moment looks like it's done.

[Video description begins] He executes the following command: remove-azresourcelock -lockid $lock -force. The output reads: True. The prompt does not change. [Video description ends]

We can verify this with get -azresourcelock.

[Video description begins] He executes the following command: get-azresourcelock. No output displayed and the prompt does not change. [Video description ends]

Previously it showed us lock2 for rg1, the resource group but now it shows nothing because it's been successfully removed.

Resource Locking and Templates

[Video description begins] Topic title: Resource Locking and Templates. The presenter is Dan Lachance. [Video description ends]

Not only can you use the CLI PowerShell and the portal to manage resource tags in Azure, but you can also apply tagging from an ARM template. ARM standing for Azure Resource Manager. I've got an example here in WordPad, where essentially what we're looking at here is the type.

[Video description begins] A WordPad file called “Resource_Lock_Azure_ARM_Template.json” opens. It contains the following code, code starts: { “$schema”: "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#", “contentVersion”: “1.0.0.0”, “parameters”: {}, “variables”: {}, “resources”: [ { “type”: “Microsoft.Authorization/locks”, “apiVersion”: “2015-01-01”, “name”: “Rg3Lock”, “properties”: { “level”: “ReadOnly”, “notes”: “my notes” } } ], “outputs”: {} }. Code ends. [Video description ends]

This is Microsoft.Authorization/locks. I've got a name here. So I'm going to create a resource lock here, and I'm going to name it Rg3Lock. The level will be ReadOnly, and we can specify any additional notes.

[Video description begins] He highlights "my notes". [Video description ends]

What we don't see in here is the scope to which the resource lock will be applied. That happens at deployment time when the template is deployed.

[Video description begins] He opens the Microsoft Azure web portal. [Video description ends]

So let's go ahead and see that. Here in the portal, I'm going to click Create a resource because I want to create a template deployment from my template.

[Video description begins] A page called "New" opens. [Video description ends]

So I'm going to search for template, I'll choose Template deployment.

[Video description begins] A blade called "Template deployment (deploy using custom templates)" opens. [Video description ends]

 I'll choose Create, there are a bunch of ways that this could be done, I could have created this template deployment from the CLI or PowerShell.

[Video description begins] He clicks a button called "Create" and a blade called "Custom deployment" opens. [Video description ends]

I've decided I want to do it this way. So I can choose for example, Build your own template in the editor, now we already have it so I can just click Load file.

[Video description begins] He clicks a link called "Build your own template in the editor". A page called "Edit template" opens. [Video description ends]

So I've specified the template file that we looked at a moment ago in WordPad.

[Video description begins] A dialog box called "Open" opens. He selects the file. [Video description ends]

So it's going to create a lock called Rg3Lock. It's going to be ReadOnly. So I'm going to go ahead and Save that.

[Video description begins] He clicks a button called "Save". The Custom deployment blade opens. [Video description ends]

And it automatically pops up into the Custom deployment for that template where we can choose the Resource group where you want that applied.

[Video description begins] He clicks a drop-down list box called "Resource group" and selects an option called "Rg3". He selects a checkbox below a section called “TERMS AND CONDITIONS”. [Video description ends]

Let's say Rg3, and I'm going to have to go down and agree to the terms and conditions and I can click Purchase. So now the template deployment has begun. In other words, the lock to resource group Rg3 is in the midst of being applied. Now once it says it's done, which it just did, we're going to go to the resource group and take a look at the locks. So in the Resource group navigation bar, I'm going to click down on Locks and lo and behold there's our lock Rg3 and it's set as Read-only.

Resource Tagging Overview

[Video description begins] Topic title: Resource Tagging Overview. The presenter is Dan Lachance. [Video description ends]

In Azure, we know that a resource is something that can be deployed in the cloud, whether it's a SQL database or whether it's a virtual machine, a storage account, a network interface, and so on.

[Video description begins] Azure Resource Tagging. [Video description ends]

Well, we can tag resources and what that really means we're doing is we're adding metadata to them. Now why would you want to do that? You want to add tagging to resources because it allows you to add meaningful additional information to them. Such as related to a department, that that resource might have been deployed by, or a client, that resource should be billed to, or a project it should be billed to, or a cost center.

And you can organize or filter out resources and track them for billing purposes by tags. Wouldn't it be great if we could ask for anything related to project A, in terms of billing, so we can see the costs associated to that project. That's where resource tagging might be used. So it's metadata such as project with the value of XYZ or department, human resources or cost center, YHZ, or state testing as opposed to production. Now the thing about this is that a resource tag is a name and value pair. And you can use it as we know for searching, filtering, to group resources, and for billing purposes.

You can also use policies in Azure to enforce tagging. For example, you could set a policy so that any new resources deployed let's say in a particular resource group will automatically have a cost center tag applied with a specific value. That can be automated. Each resource can have up to a maximum of 50 tags. Now not every single type of Azure resource will support tags, but the vast majority of what you're going to want to do it to, they will support it. The other thing about this is that resource group tags are not inherited. So if you add a tag to a resource group, that does not mean it will automatically flow down and set that tag for all of the resources in the resource group. If you want to do that, look at working with Azure policies that have a modify effect for tagging purposes. You can use the CLI to work with resource tagging.

[Video description begins] Azure Resource Tagging - CLI. [Video description ends]

In our first example, we've got az tag list that's being piped to the line filtering grep tool in UNIX and Linux. And we're asking to display the tagName property.

[Video description begins] The following command is displayed: az tag list | grep "tagName". [Video description ends]

What that will do is give you a list of all of the tags in the entire Azure subscription. You can create a tag with az tag create, here we're naming it DeptID.

[Video description begins] The following command is displayed: az tag create --name DeptID. [Video description ends]

We can also add tag values with az tag add-value.

[Video description begins] The following command is displayed: az tag add-value --name DeptID --value 1234. [Video description ends]

So here we're adding it to DeptID, the value is 1234. You can even apply to a specific resource such as az network vnet update.

[Video description begins] The following command is displayed: az network vnet update -g rg1 -n vnet1 --set tags.DepID=4555. [Video description ends]

So we're applying a tag to a specific VNet in a resource group called rg1. And the name of that is vnet1. And we're using --set tags. and then Dept ID equals in this case the values of 4555. Resource tagging is also possible using PowerShell.

[Video description begins] Azure Resource Tagging - PowerShell. [Video description ends]

In our first example, we're creating a variable called $storaccount. And it's essentially going to point to a storage account. Now we get that by running get-azresource.

[Video description begins] The following command is displayed: $storacct=get-azresource -resourcename storacct3345 -resourcegroupname rg3. [Video description ends]

We specify the name of the resource, in this case, the storage account name and the resource group it's deployed into. So then our variable can be used to refer to that storage account. And in our second example, that's exactly what's being done. We're calling upon our variable. Then we're calling upon .tags and .add, because we want to add the CostCenter tag with the value of YHZ to the storage account.

[Video description begins] The following command is displayed: $storacct.tags.add("CostCenter","YHZ"). [Video description ends]

Then to commit that to the resource to the storage account, we run set-azresource. We use the -tag parameter.

[Video description begins] The following command is displayed: set-azresource -tag $storacct.tags -resourceid $storacct.resourceid -force. [Video description ends]

And in this case, we refer to the $storacct variable .tags property. And we use the -resourceid parameter and give the ID, the resource ID of our storage account variable to write to. And I'm using -force here just to suppress any messages that might pop-up asking you for sure here in PowerShell. The next thing I can do is retrieve resources.

[Video description begins] The following command is displayed: (Get-AzResource -Tag @{"CostCenter"="YHZ"} ).Name. [Video description ends]

Here, I'm using Get-AzResource with the -Tag parameter. And I refer to the tag within curly braces after the @ symbol. So in quotes, I've got CostCenter, it's the name of the tag, equals and then in quotes, I've got the value I'm looking for, YHZ. Now all of that is enclosed within open and close parentheses because if I don't do that, it's going to try to use .Name as a property of YHZ. That's not quite it. We need .Name to be a property of the return result of what executes first within the parentheses, in other words, retrieving the tags. We want to make sure we get the name of the resource. So what that command will really do is it's going to show us the names of all Azure resources in the subscription that have "CostCenter" = "YHZ". So it could potentially be a pretty long listing. In our last example, we can also remove tags.

[Video description begins] The following command is displayed: $storacct.tags.remove("CostCenter"). [Video description ends]

So in this case, we've already got our storage account pointing to in this case to storage account. Doesn't have to be a storage account, could be pretty much any type of resource that supports tagging. But we're calling upon the variable .tags.remove. And in parentheses and double quotes, I'm just giving it the name of the tag I want to remove, in this case CostCenter.

Resource Tagging and the Portal

[Video description begins] Topic title: Resource Tagging and the Portal. The presenter is Dan Lachance. [Video description ends]

Tagging resources in Azure is useful because tags are metadata. It's key and value pairs up to 50 that you could add for each individual Azure resource. You might want to tie a resource to a cost center, or a department, or a project, or something like that. Which facilitates searching, grouping, and even looking at things on a per billing basis for specific tags.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

 So I'm going to go ahead here and get started in Azure by going to the All resources view where I'm going to open up an existing resource.

[Video description begins] He clicks an option called "All resources" and the corresponding page opens. [Video description ends]

It doesn't matter which one it is, let's say I scroll down and open up a virtual machine.

[Video description begins] He clicks a resource name called "WinSrv2019-1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

When you click on an Azure resource, in the navigation panel, you'll see Tags. And when you click Tags, you'll see any existing tags or key and value pairs that have been assigned to that resource. And you can make changes to them up to having 50 key and value pairs.

[Video description begins] He clicks an option called “Tags” and its corresponding page opens in the content pane. [Video description ends]

Currently this virtual machine has two. Project : ABC is the first tag and CostCenter with the value of YHZ is the second one. And I can even add a third one here. So for example, I might tie it to a department. So I'm going to put it Department. Now if I've already created that, as I start typing it'll show up.

[Video description begins] He enters Department in a text box under a column name called "Name". [Video description ends]

However, nothing's popping up so this is a brand new tag I'm creating. And I'm going to set the Value to IT.

[Video description begins] He enters IT in a text box under a column name called "Value". [Video description ends]

So we've now got a third tag that we are adding here to this particular resource. Now we can go back and remove any one of these at any point in time. However, I'm going to click Save. So now that we've got those listed, we see the third one has been added at the bottom. If I were to go to another resource, let's close out of this virtual machine. Let's just pick a storage account and let's look at the tags for it.

[Video description begins] He clicks a resource name called "storacct333325" in the All resources page and the corresponding blade opens. [Video description ends]

And when I click on Tags, I'll see whatever it's been tagged with already.

[Video description begins] He clicks the Tags option and its corresponding page opens. [Video description ends]

And bear in mind, Azure administrators can apply policies that can add default tags. So there might be times when you're creating a resource and you don't add tags. And after you check it, after it's been created, there are tags. That's because of a policy. Anyway, here we can see this storage account has CostCenter : YHZ. If I were to type department, we'll notice it already knows it exists. And in the same way, it knows it's already got a value that's been typed in for another resource. And that's fine, we can go ahead and work with that.

[Video description begins] He enters Department under the Name column and IT under the Value column. [Video description ends]

When I click that, it's kind of like a little filter, Now, notice that we've also got a little square icon also over here, and it allows me to show resources with this tag. So let's do it for the first one here, CostCenter : YHZ.

[Video description begins] A page called "Resource with tag CostCenter : YHZ" opens. It includes a table with five columns and several rows. The column headers are Name, Type, Resource group, Location, and Subscription. [Video description ends]

it'll show me resources that have been tagged with that item. So specifically, we can see that all of these items are listed here. And let's just kind of move over a little bit so we can see them all. So they're all listed here as being items that are tagged with that same value. So we can see at the top here, Resources with tag CostCenter : YHZ. Now when you're creating a new resource, for example, let's just get out of here, we're not going to save that. I'm going to click Create a resource.

[Video description begins] He closes the Resource with tag CostCenter : YHZ page. The New page opens. [Video description ends]

Let's say we were going to create a brand new storage account. It could be anything but let's say that's what it was.

[Video description begins] He enters Storage account in the Search box and selects the corresponding option. A blade called "Storage account - blob, file, table, queue" opens. [Video description ends]

Now when you're in the midst of creating a new resource in Azure, during the creation, whether in the GUI or at the command line, you can specify tags.

[Video description begins] He clicks a button called "Create" and a blade called "Create storage account" opens. It includes tabs called "Basics", "Networking", "Advanced", "Tags", and "Review + create". [Video description ends]

We can see the Tags part of the wizard right here.

[Video description begins] He clicks the Tags tab. [Video description ends]

And when you go there, it's going to look familiar, you can put in the name and value, up to 50 of them. Okay, so we can do that as well. Let's go back to our All resources view.

[Video description begins] The All resources page opens. [Video description ends]

Because another aspect of working with tags in the GUI here in the portal, is that you can modify a selection of objects in terms of tagging. What that means is if I were to, let's say, put check marks by a couple of these resources, I can then click the Assign tags button up at the top of the view.

[Video description begins] A blade called "Assign tags" opens. [Video description ends]

Now within here, I'll see each of the selected items listed and I can delete tags and make changes. But I can also add one up here. So for example, if I wanted to, I could put in a tag, let's call it Stage. And for Value I'm going to put in Testing.

[Video description begins] He enters Stage under the Name column header and Testing under the Value column header. [Video description ends]

So it's the testing stage that I'm applying to this and I'm going to go ahead and click Save.

[Video description begins] The blade closes. [Video description ends]

So if I look at any one of these items, let's say this storage account, this second one here that was part of our initial selection.

[Video description begins] A blade called "cs210037ffe9de77ec8" opens. [Video description ends]

We can also see it says it assigned it to three resources. But let's just check this one anyway. If I go to Tags, I'll see whatever was already applied previous to my last action.

[Video description begins] He clicks the Tags options and its corresponding page opens. [Video description ends]

But I will also see that Stage was added with the value of Testing.

Resource Tagging and the CLI

[Video description begins] Topic title: Resource Tagging and the CLI. The presenter is Dan Lachance. [Video description ends]

The CLI can prove very handy when it comes to manipulating tags in an Azure environment. 

[Video description begins] The PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started here, I'm going to type in az tag list. Now when I do that, it should show me details about all of the tags in this entire subscription, but there's too much metadata here.

[Video description begins] He executes the following command: az tag list. The output displays details of all tags. The prompt does not change. [Video description ends]

All I really want to see are the names of tags. So I'm going to clear the screen, I'm going to use the up arrow key to bring up that previous command.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And I'm going to use --query [ ] because it's an array or list of items. And for each of them, we want to see tagName, where Name has a capital N.

[Video description begins] He executes the following command: az tag list --query [].tagName. The output reads: [ "CostCenter", "ms-resource-usage", "Stage", "Project", "Department" ]. The prompt does not change. [Video description ends]

That's better. So now I can see the names of tags, not the values that have been applied in my entire subscription. I want to add a new one. So I'm going to run az tag create. And I want to create one, --name, called ClientID. We might want to do this if we want to track resources based on clients, for doing projects for clients, for billing purposes, for chargeback to clients.

[Video description begins] He executes the following command: az tag create --name ClientID. The output displays the details of the newly created tag. The prompt does not change. [Video description ends]

So what I've done is created the tag called ClientID.

[Video description begins] He executes the following command: clear. The screen gets cleared and the prompt does not change. [Video description ends]

And we can verify this, of course, if we bring up, using the up arrow key, our az tag list command where we're querying for tagName.

[Video description begins] He executes the following command: az tag list --query [].tagName. The output displays the lists of tags. The prompt does not change. [Video description ends]

There's ClientID shown at the bottom of the list, perfect. Now I want to add a value for the ClientID tag and then we can apply it to a resource. So to add a value, I'm going to run az tag add-value --name, well, the name of the tag is ClientID and --value. I'm going to set it to a value of 1234.

[Video description begins] He executes the following command: az tag add-value --name ClientID --value 1234. The output displays the details of the value added to the tag. The prompt does not change. [Video description ends]

Now I want to apply that to a resource. So to do that, I'm going to use, let's say, az network vnet update. I'm going to apply this to a VNet, a virtual network, that's deployed in a group, -g, called rg1, resource group 1. -n for the name of the VNet, is Vnet1, and --set tags. in this case ClientID. And of course, I could also specify the value here, 1234, that I want to add to that VNet.

[Video description begins] He executes the following command: az network vnet update -g rg1 -n Vnet1 --set tags.ClientID=1234. [Video description ends]

So by adding the value up above, what we're really simply doing is making it available to be assigned to individual resources.

[Video description begins] He opens the Microsoft Azure web portal. A blade called "Vnet1 | Tags" is open. [Video description ends]

And if we flip over here into the portal where I've pulled up the tags for Vnet1, we indeed will see that ClientID with a value of 1234 has been successfully added.


Resource Tagging and PowerShell
You can use PowerShell cmdlets to manage tags in an Azure environment.
So to get started, I want to make sure I get a handle on a specific storage account that I've already created. And I want to store that in a variable that I'm going to call storacct. So we can see here $storacct. And I'm going to tell it I want to run get-azresource-resourcename. Here's the name of the storage account I have. And it's in a resource group called rg1. Now I want to do this because I want to apply tags to that storage account.

[Video description begins] He executes the following command: $storacct=get-azresource -resourcename storacct333325 -resourcegroupname rg1. No output is displayed and the prompt does not change. [Video description ends]

So now let's just run $storacct to make sure we have a handle on that storage account. Looks good and currently we can see the tags for it CostCenter YHZ.

[Video description begins] He executes the following command: $storacct. The output displays the details of the variable storacct. The prompt does not change. [Video description ends]

Now what I want to do is add something new. So I'm going to go ahead in terms tags and run $storacct. We have that variable the points to the $storacct.tags.add. And in parenthesis and I will start double quotes. I want to set the Stage key with the value of Development and I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: $storacct.tags.add("Stage", "Development"). No output is displayed and the prompt does not change. [Video description ends]

Now let's just clear the screen with cls and use the up arrow key to bring up our $storacct variable. Notice that Stage and Development the key and value pair have been added as a tag for that storage account. I can also do other stuff like this.

[Video description begins] He executes the following command: $storacct. The output displays the details of the variable storacct. The prompt does not change. [Video description ends]

So in parenthesis get-azresource -tag. And I'm going to specify here an @ symbol with an open curly brace, and in quotes I'm going to say Stage and = Development put all of the each of these items in quotes. And the next thing I'm going to do is close off my curly bracket and my parentheses and .Name. What does this mean? Well, it means that what I want to do is I want to show the names of any Azure resources that have that listed tag name and value. So "Stage"="Development". When I press enter, we still don't see anything here.

[Video description begins] He executes the following command: (get-azresource -tag @{"Stage"="Development"}).Name. No output is displayed and the prompt does not change. [Video description ends]

Well, that's strange because when we looked at our variable, it returned Stage Development. Well, that's the variable. It's not been committed to Azure yet. So what we need to do is run set-azresource to apply the change -tag, and then $storeacct.tags the tags property. Because we know that the tags property here contains what we just modified plus what was already there to begin with. So, $storeacct.tags -resourceid give it the resource ID that's going to be $storeacct.resourceid. Great working with variables isn't it makes things much easier. I'll just use -force to suppress any questions. And after that's done, it will have committed that change to that resource.

[Video description begins] He executes the following command: set-azresource -tag $storacct.tags -resourceid $storacct.resourceid -force. The output displays the details of the changes made. The prompt does not change. [Video description ends]

So I'm going to clear the screen we're going to use the up arrow key to get-azresource once again. And now we can see our storage account storacct333325.

[Video description begins] He executes the following command: (get-azresource -tag @{"Stage"="Development"}).Name. The output reads: storacct333325. The prompt does not change. [Video description ends]

Indeed is tagged with "Stage"="Development".                    
