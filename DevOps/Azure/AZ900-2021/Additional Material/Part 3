                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 3


Storage Accounts and PowerShell
  - PowerShell cmdlets can be used to create and also to manage Azure storage accounts.
  - But the first order of business is to determine the names of some of those cmdlets
    - We can figure that out by using get-command, use an asterisk wildcard symbol
    - We have to guess that maybe azstorageaccount is part of the nomenclature, we can always look it up online.
  - Sure enough, we see a number of cmadlets that make sense for what our needs are
    - Such as Get-AzStorageAccount, Get-AzStorageAccountKey, New-AzStorageAccount, and so on
    - We're going to build a new Azure storage account new-azstorageaccount
  - The first thing we need to do is specify the resource group into which we want this deployed so Rg1, then the name for the storage account so -name
    - We are going to call this something that's in line with our organizational naming standards for storage account
    - We will go ahead and put something in here and we also want to deploy this in a specific location
    - We are going to specify a skuname in "standard_lrs", locally-redundant storage
    - You might wonder, how would you know to use that?
    - If you use get dash help for the new dash AZ storage account cmdlet
    - Then you'll see all of these types of details including all the parameters that we're specifying here on the command line
    - Press Enter to create that storage account and we can see that the provisioning succeeded and clear the screen
  - We can also run get-azstorageaccount. So we can see what we've got listed here and we can see even the newly created one, storacct64845.
    - That's what we've just created in the region with this SkuName of Standard_LRS for locally-redundant storage
  - The next thing that we can also do is get details about a particular storage account
    - For example, get-azstorageaccount, Well, let's actually do this
    - We get the storage account keys? get-azstorageaccountkey, now it's key singular, not keys plural
    - And storage account keys of which there are two with every storage account by default 
    - Are used for programmatic access to the storage account contents including API access
    - We are going to specify the resource group that we want to look into to find the account
    - So our -resourcegroupname, in this case, is Rg1 and the account name, -accountname
    - We know in this case is storacct, store account, and we had called it 64845
    - We are going to go ahead and press Enter and we can see the both of the keys have been returned here
    - Now we can also retrieve specific information about a storage account
  - Let's see, get-azstorageaccount, now, we can filter it out and ask for certain properties, get-azstorageaccount
    - We're going to specify here that we want the one that's in the -resourcegroup called Rg1 and at the -accountname, storacct and it was 64845
    - We will put that in. Now the problem, if you consider it a problem, is that it returns a lot of information
    - So we can see all of the properties going across the screen.
  - All we want is, let's say, the AccessTier
    - If we are not sure what that property is called because this is a column header, AccessTier
    - It doesn't necessarily mean that's what the property is called
    - We can verify this by doing the following, use the up arrow key to bring up that command
    - Then we are going to pipe it to get-member, we only want to see property so -type property, and let's see what we have
    - As we scroll back up through the output, we can see indeed there is a property by the name of AccessTier.
  - That's interesting, go back up to a couple of previous commands and pipe the result of retrieving that storage account
    - To select, install all that we want to see is the accesstier
    - Perfect, so we can see the Hot AccessTier has been configured for this particular item
  - What we want to do is we want to set that to be cool
    - We want to use the cool AccessTier for less frequently accessed data which results in less cost
    - For that, we will use the Set-AzStorageAccount cmdlet
    - Specify the resource group, in this case Rg1, where that account was deployed
    - We'll use -AccountName, specify the name of our storage account and use -AccessTier and specify a value of Cool
  - Now it is asking, are you sure you want to do this? 
    - Just Ctrl+C out of that because what we can also do if we bring up that command is add -force at the end of it
    - This way we are prompted with anything and this really lends itself nicely if you want to automate this perhaps in a PowerShell script
  - It looks like it succeeded so we can verify our work
    - Use the up arrow key here to go back up a little bitand we want to select the AccessTier
    - We can now see that the AccessTier indeed has been set to the Cool AccessTier
  - The last thing that we're going to do is remove that storage account
    - For that, we'll call upon the remove-azstorageaccount cmdlet
    - Specify the -accountname and then the -resourcegroup it's been deployed into.
    - We are going to add -force at the end so it doesn't ask for anything, after a moment, it will have been removed


Storage Account Network Access
  - When you create a storage account, you can determine network access options.
  - In other words whether the storage account should be accessible with a public endpoint, or from all VNets in Azure, or certain select VNets
    - You can also change that after the fact, in Azure go to the list of Storage accounts
    - If we don't see it in out recently visited links at the top here in the portal
    - We can always click in the left hand navigator and go all the way down to Storage accounts.
  - Either way, we are going to open up an existing storage account
    - When we do that, we are interested in taking a look at firewalls and virtual networks
    - We're going to see that down under Settings, there is Firewalls and virtual networks
  - Think about how this storage account will be used, and which other components might require access to it
    - Such as a front-end web application, just as an example
    - Currently, we can see that we are allowing access from all networks, which does include the Internet
    - Now of course, if we don't have containers like blob containers with anonymous access enabled
    - It doesn't automatically mean anyone can get into the storage account
    - They would have to authenticate with either Azure AD, that would need maybe a shared access signature instead, or a storage account key
    - But nonetheless, we should limit the visibility as an added layer of security where possible, so choose Selected networks.
  - What we want to do is specify only certain VNets from which requests to access the storage account can be made
    - Down below, there are no virtual networks currently selected, so click Add existing virtual network
    - Notice you can also build a new one at this point in time, but we already have one
    - We are going to choose the Add existing virtual network link, choose that from the list
    - We have our Subscription and the Virtual networks, select Vnet1, and we can choose a subnet within it eg Subnet1.
    - Click Add, and now we can see that that has been added up above in terms of being on a network that is allowed to access this particular storage account
  - We can also add an IP range to allow access from the Internet
    - Maybe beside software components in Vnet1, Subnet1 being allowed to access through storage account
    - We need to be able to access it from our on-premises computer, we can see it already knows our public IP address
    - We are going to go ahead and turn on that check mark to add that, we could also specify an alternate IP address or CIDR range as well
  - Finally, down below, we can see it's set to allow trusted Microsoft services to access the storage account
    - Any other Azure resources that should be able to access this will be able to
    - Then we've got some logging in metric options that we could also enable here for exceptions
    - We are going to go ahead and Save this configuration
    - In so doing we're limiting the visibility and the access of this storage account to the specifically listed Vnet, Subnet, and IP address


