                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 13


App Service Deployment Slots
In this demonstration, I'm going to use the Azure Portal to create a deployment slot. You can create deployment slots for testing purposes, so that you can keep a production version of your web app available while having a different URL, so different DNS name, for your deployment slot as you do testing.
And then you can swap out deployment slots. So once your testing is successful, you can make that the production version of the web app. So here's how it's done.
Here in the portal, I'm going to click on an existing web app, open up its navigation bar, and the first thing I'll do is scroll down and choose Deployment slots.
We'll see that there is a default deployment slot for every web app and it's called PRODUCTION, we can see it's currently Running. So what I'm going to do then, is I'm going to click Add slot up at the top.
I'm going to call this one Testing. And I'm going to choose to Clone settings from the original app that we're in in the first place.
When you clone settings, you're cloning things like connection strings, HTTP version settings, and so on. So I'm going to choose to Clone settings from our source web application. Now after a moment, it says it successfully created the slots.
So I'm going to go ahead and click Close, and sure enough we can see the slot is listed here as Running and it shows up as a link. Now that's because we are currently in the PRODUCTION slot.
If I click that link to open up our Testing slot, and in it, it looks and feels just like the whole web application.
But notice at the top, we're in our Testing version of the app, a different deployment slot.
And so when I go down to the Deployment slots from within it, notice that neither shows as a link because we're actually looking at it from the perspective of the deployment slot.
So I'm going to click the X to close out of here.
And I want to make sure we're back on the original app.
Now when I say original app, I mean the real App Service. We can see by looking at the name that we are in the real App Service.
Notice the URL happens to be a custom DNS domain name with an SSL binding.
But notice that if we go back into the Deployment slots, let's do this once again. I'm going to click on the link for the deployment slot. Let's look at its URL in the Overview blade so always keep your eye on the naming up here at the top.
So notice that what we're looking at here is we have a different name for the deployment slot. It doesn't use our custom DNS name at all.
So you get a different DNS name then for that purpose. And if you start making configuration changes, you would do it, for example, in your testing deployment slot. So let's say I go down to Configuration.
And maybe I'll go down and make a change to a connection string used for a database or something like that. So down below, there are no connection strings. Let's say, we want to add one, and I'm doing this in the deployment slot.
So I'm going to call this BackendDB, and maybe the value is just going to be testdbstring, it's going to be for MySQL. We also can turn on this Deployment slot setting. When we do that, it means that this setting is only for the deployment slot. But I don't want to do that. So it's part of my testing, I'm going to click OK, and I'm going to Save that change.
So I'll click Continue. Now the reason I didn't want that to be a sticky setting for the deployment slot only is because based on our testing, if it works out well, then we might want to make sure that that setting is propagated to our production slot. So let's close out of this one. And when I say this one, I'm referring to, if you look at the name, our deployment slot for testing.
And let's go back to our primary one. So we're in our primary web application.
What I want to do, actually, we can do it either here in the Deployment slots view, we can Swap, or we can do it from the Overview page. It doesn't make a difference. You could have a swap option there.
Swapping means you want to take another Deployment slot and make it production, for example. So I'm going to click the Swap button.
And what I want to do is I want the source to be testing, and I want to swap it with the target of production.
Notice down below, it picks up the change, the source change. The source, of course, is our deployment testing slot. That's great. So I'm going to swap this out. So I'm going to click Swap. And essentially, after you've tested your testing deployment slot and the web app store works correctly, by swapping it to production, it results in no downtime.
And so this is as opposed to as in the old days in the 90s and early 2000s, when you might visit a site and see a site under construction webpage, there's no longer a need for that when using Deployment slots. So we can see it successfully completed the swap. I'm going to close out here. So we're still looking at our main application as in not looking at it from the perspective of within a deployment slot.
And if I were to scroll down, let's say, and just go down to Settings and Configuration, I want to take a look at the connection string.
And so when I scroll over to the right, and then of course scroll down, let's see what's going on. Notice that our connection string has been brought over from our testing deployment slot.
So that's just an example of a setting, as opposed to actually change the content in the site, that comes across when you perform the swap.


App Service Scaling
  - When you deploy an application in the Azure Cloud, sometimes you won't know how much underlying horsepower you're going to need
    - Or how many virtual machines you'll need to support the workload
  - We're talking here both about vertical scaling with horsepower, and horizontal scaling with the number of nodes supporting an application
    - Luckily, we can change that after the fact
    - Remember that when you deploy a web app in Azure, it needs to be associated with an App Service plan
    - The App Service plan is actually where you configure the scaling
  - Take a look at this first from the perspective of an application, a web application service. So when I click on the web app to open it up, if I scroll down in the options, I'll see that I have Scale up and Scale out.
Now, it says, App Service plan, here in parentheses. So, what I could also do is look at this from the perspective of the App Service plan.
Let me open up an existing App Service plan here called APPSP1.
We'll see the exact same thing here.
Under Settings, we'll see Scale up and Scale out.
The scaling up or down means you're either increasing or decreasing respectively the horsepower, like number of CPU compute units, or ACUs, Azure Compute Units, as they're called for web apps.
Scaling out would be for horizontal scaling, adding or removing virtual machine nodes.
Let's start here with scaling up. Currently we can see our current pricing tier, 210 total ACU, 3.5 gig of RAM.
Let's say that we've determined that for the web apps associated with this App Service plan, remember, when you go to Apps, you will see one or more apps associated with this service plan.
We also see we have a deployment slot here too.
So they are all consuming the resources that you would see here under Scale up, they are all together consuming the ACUs, the Azure Compute Units, and the 3.5 gig of RAM.
So you might find over time that it's just not enough, and if that's the case, you can Scale up.
So let's say we're going to switch it over to 420 total ACU 7 gigs of RAM.
So I just simply select that and choose Apply.
Now as you might guess, you're going to pay more for this. So only do this, if you need it. Also, if you're just experimenting with these web applications in Azure, make sure you delete them when you're finished.
Of course, not if you're using them for business purposes, but, because if you don't remove them, and they're left running constantly, you are paying for that, even though you might not be using it.
So be very careful with that. So at this point, if we're looking at our notification bar, it currently updated our service plan.
We are now using the P2V2 pricing tier for production.
We also have scaling out options.
Currently, we can manually scale, pretty now we've got an instance count of 1.
So we could manually drag the slider over to determine how many underlying instances are available for our applications.
Now this is the number of instances of course that are available for the apps associated with this App Service plan, we looked at that under the Apps blade.
We could also choose auto scaling instead of just manually setting a fixed number of virtual machine workers.
So we can go down here and we could specify a metric.
And we might say that after a metric has been violated or exceeded, we'll say, let's Add a rule here for that.
Then we can add or remove virtual machine nodes.
So we could specify after the CPU percentage gets to a specific value, CPU percentage, then we could specify that we want to start adding items.
So when it's greater than 70%, duration of 10 minutes, then we can tell it we want it increased by a single instance.
    - So we do have the option to enable horizontal scaling as well.
    - I'm just going to Discard those settings.
  - Currently, all we've really done here is juiced up the underlying Azure Compute Units or ACUs, and the amount of RAM available to the apps associated with this App Service plan.


App Service Backup
  - You can easily configure backup for an Azure web application using the portal, in the portal we've already navigated to an existing web application
And in the navigation bar, I'm just going to scroll down under Settings and choose Backups.
Backup has not been enabled here. So we can see it says, Backup is not configured. Click here to configure it. So we could do it there or we could click the Configure button at the top, it makes no difference. We have to think about where we want the backups stored.
So it says, Storage not configured. We're going to change that, so I'm going to click right on that.
I'm going to select an existing storage account where I want backups to be stored.
And I'm going to add a Container.
I have to create a container here with the name of my web app, -backup. And I'll leave the Public access level to Private.
And I'm going to Create this container.
That's where I want these backups for this app to be stored.
So I'm going to go ahead and select that container and click the Select button at the bottom. So now it has that.
Next is scheduling. Do you want to backup manually or do you want it to be on an automated schedule? I'd like an automated schedule. So I'll click On.
And down below, we can see it's set to backup once every day.
Now having done that, that's fine. But I'm going to scroll down exactly when. So we can tell it when, on which date, we want to start the schedule. And the timing, well, I can change the timing or I can leave it as it is.
So let's say we want this to happen at, 7 o'clock PM. And of course, we have to select the appropriate time zone when we want that backup to kick in. The default retention value is 30 days, I'm going to leave that. And if we have backups of databases, then that would be probably a good idea if your application consists of them. But we don't have any within this web application. So we don't have to worry about selecting databases to be backed up.
At this point, I'll click Save and our Backup Configuration is now saved.
Now we can see the schedule is reflected here when the backup will next occur. However, what we can also do is start the backup.
So I'm going to do that by clicking directly on the Backup button. And it says, Successfully submitted backup request. Excellent, so now we've got both a scheduled backup, and at the same time we've manually started one.
Back here on this main page where we clicked the Backup button, notice at the bottom the status says that the backup is currently in progress for our web application. So depending on how much content there is, and whether there are backend databases that contain a lot of data, will determine the size, which we see here is currently 0 MB, and how long it takes for the backup to occur.
And you can click the Refresh button and eventually you'll see that the backup Succeeded. We can see the backup date and time. We also have the option of clicking Restore. So there's no point in taking backups if you're not at least going to periodically test that Restore works correctly.
So for the Restore source, I'm going to choose App backup and we can select the backup. We only have one here.
And we can determine the target App Service application or the web app where we wanted to restore this to. Let's just scroll over just a little bit so we can see a little bit more of what's happening. So the default is to Overwrite the destination.
But we could tell it that we want to select a new or another existing app to restore this backup to. And we can determine if we want to ignore conflicting host names when we restore or ignore the databases as part of the restore. And then we would go ahead and click OK to begin restoring from the backup.


Azure Batch Overview
Azure Batch is a cloud service in Azure that's used for automation and job scheduling. So what it's really about is Batch processing for on-demand jobs against a pool of computers.
So parallel processing or High-Performance Computing, HPC, you could say. Azure Batch requires you to first create an Azure Batch account. Next, within that, you can define a pool, which is the configuration for the operating system details related to the virtual machines that will run your batch jobs. You can then define a job and associate it with a pool.
So Azure Batch begins with uploading scripts or apps that will handle your workloads, whether it's for some kind of engineering application, or climate modeling, or some kind of medical model of some kind. The next thing that you need to do is make sure you create a job, after which you can add job tasks.
The job tasks, and you can get away with one task within a job, is what actually triggers running things like scripts or executables. Finally, you can schedule this to occur, either one time or on a recurrent interval. Now bear in mind, that you're going to need to make sure your Azure Batch account is associated with the storage account.


Azure Batch Accounts
  - In this demonstration, I'm going create an Azure Batch account. I'll create a Batch account so that I can define jobs I want to run on demand or on a schedule basis against a pool of VMs.
So this is for batch processing of jobs. You don't need the compute power all the time.
So to start, I'll click Create a resource and I'm going to search for Batch.
And then, I'm going to choose Batch Service. And then I'll click Create.
Okay, first thing I need to do is select a Resource group I want to deploy this Batch account into and give it a name.
I'm going to call this BatchEast1. Now notice it says it's not valid, it's because of the uppercase letters.
So let's just go ahead, put lowercase letters and it loves it. We'll put this in Canada East. I'll just click Next for Advanced.
Pool allocation mode, the pool is the collection of VMs that will process your Batch jobs.
I'm going to let it be handled by the Batch service, so that's fine. Next, no tags.
Let's make sure the validation has passed, it has.
Let's create the Batch account by clicking Create.
And after a moment that deployment is complete. Let's click, Go to resource and let's poke around a little bit.
Now the first thing that we want to really do here actually is link this Batch account with an Azure Storage account. So I'm going to click Storage account over on the left.
Now you do this because depending on the nature of your job tasks that you're going to have running through Azure Batch. They might reference resources stored in the storage account, such as data files if you're doing big data processing.
Or you might need a storage account to store the output or the result of running your Batch jobs. Either way, I'm going to click Select a storage account. And I'm going to go ahead and choose one that I've already got created.
All right, even though it's in a different region, it's okay. It still adds it, it's all good to go. So now that we've got the storage account associated with it, let's just go back to the Overview for a moment.
You can also download the BatchExplorer GUI tool for free if you want to manage your Batch account using this interface instead of the portal. So I'm just going to go ahead and sign in with my Azure credentials so we can at least see it.
So when I sign in, I can see over on the left, it's discovered in my pay-as-you-go subscription that we've got a Batch account called batcheast1 in canadaeast. We can also create a New Batch account over here. So I'm just going to go ahead and double-click on it.
And here I have all these great little metrics, Failed tasks, core number of minutes, things we're running, Task states, Current node states. I can also view Jobs, Job schedules, and Pools.
Packages for applications, perhaps PKI certificates that would be used for each pool virtual machine to authenticate to an external service. Back here in the portal we can also see we have the Open in Batch Explorer button here on the Overview blade.
And we also have a few metrics here that we can see like the vCPU and Failed tasks, and so on. If you're going to be creating custom software that you want to run in Azure Batch, then you'll probably want to know which key to use.
You've got Keys here that you use to authenticate, you've got a primary and a secondary key, it doesn't matter which one.
You've also got the Batch account name and the URL and the ID and so on for the storage account. But the primary and secondary access keys can be used when you require programmatic access using the Batch API for Azure.


Azure Batch Applications
When you configure Azure Batch you need to configure job tasks. And a task can reference scripts or programs such as executable programs that are used to do some kind of Batch processing, whether it's big data analytics, or whether it's looking at genetic engineering research, or climate modeling, or financial model, could be anything. So here on-premises, I've got a custom app executable.
And what I need to do is zip it up. So I can just right-click and use tools such as 7-Zip to add it to an archive, which I'm going to do.
It's going to be CustomApp1.zip, and I'll click OK.
Because that is what I can then upload as an app into my Azure Batch account.
So here in the portal, I've navigated into my Batch account where I'm going to start by scrolling down and choosing Applications.
From here, I'm going to click the Add button.
I have to give this a couple of details, I've got to fill in an Application id a Version number, and then I have to select the Application package.
In this case, it's our on-prem zip file. So the Application id, I'm going to call this CustomApp1, Version number let's say, 1.0 and I'm going to select the file. So there it is CustomApp1.zip. Let's go ahead and Submit that.
Back here, my on-premises system, if you've got other files, here I've got a PowerShell Script called AnalyzeData.
Well, you can zip that up as well.
And we could have zip them both up at the same time and put them in one zip file, but I'm going to go ahead and zip this up separately.
So I'll just add it to an archive again.

[Video description begins] He right-clicks the AnalyzeData.ps1 file and a shortcut menu opens. He selects an option labeled 7-Zip. A flyout opens. He then selects an option labeled "Add to archive". The Add to Archive dialog box opens. [Video description ends]

And it's going to be called AnalyzeData.zip.

[Video description begins] He clicks a button labeled "OK" and a folder labeled "AnalyzeData.zip" appears. [Video description ends]

As you might guess back here in the portal, I'm going to click the Add button to add that as another application.

[Video description begins] He switches to the Microsoft Azure portal. In the portal, the batcheast1 blade is open. In the navigation pane, an option labeled "Applications" is selected and its corresponding page is open in the content pane. [Video description ends]

Now you might not want the package together if you plan on using them separately.

[Video description begins] The New application blade opens. [Video description ends]

But if you plan on using them together, make sense put them in the same zip file. This is going to be called Analyze Data PowerShell Script. I'm going to call it and Version will be 1.0 again. It doesn't like my spaces. So I'm just going to replace that with underscores.

[Video description begins] In a text box labeled "Application id", he enters the text, "Analyze_Data_PowerShell_Script". [Video description ends]

That's fine and then I'll select that Application package here.

[Video description begins] He selects a file labeled "AnalyzeData.zip" under a field labeled “Application package ” [Video description ends]

Once that's done, I'll click Submit and we'll have two applications added to add our Azure Batch account as we can see listed here.

[Video description begins] The New application blade closes. An application labeled "Analyze_Data_PowerShell_Script" appears in the page. He points to the Analyze_Data_PowerShell_Script and CustomApp1 applications. [Video description ends]

You can also click on an application you've added to the Batch account here and you can add more items within it.

[Video description begins] He clicks the Analyze_Data_PowerShell_Script application and a blade called "Analyze_Data_PowerShell_Script" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. It includes a table with a single row and several columns. [Video description ends]

What I could do there, I'll be adding versions.

[Video description begins] He points to a button labeled "Add". [Video description ends]

Currently we can see we've got version 1.0 of our zip file, and we can see the last activation time so when it was brought into the Batch account.

[Video description begins] In the table, he points to row entries labeled “1.0” ,“zip” and “Mar 31, 17:24:43” under column headers labeled “name” ,“Format” and “Last activation time” respectively. [Video description ends]

And you can use the menu on the right to either Delete that version or even Update it.

[Video description begins] Adjacent to the row, he clicks an icon labeled "Context menu" and a menu opens. [Video description ends]

If you've got a new version for example of the PowerShell Script with changes that were required, or you could keep multiple versions because you could add a version 2.0, if you need to run an old version of something in a new version of something.

[Video description begins] In the menu, he clicks an option labeled "Update" and the New application blade opens. [Video description ends]

Remember, these are applications that will be used for Batch job processing.

[Video description begins] He clicks an icon labeled "X" and the New application blade closes. [Video description ends]

You might need an older version for handling certain types of file formats, for example, and a newer version to handle newer versions of those files that might need to be processed.
So maybe I'll put in version 2.0.
And I could upload another application package which I will do and I'll Submit it.
So what we'll see then is that we've got if I just click Refresh that we've got two versions of that app within a single application.
That's how it's stored.
So there's a bit of a hierarchy here, when you're working with these applications.
The applications ultimately get used when you start creating pools of virtual machines.
You can associate many items with a pool, including these application packages.


Azure Batch Pools
Here in the portal, I've already got an Azure Batch account created.
And I've already added a couple of applications such as scripts or custom apps, maybe executables that'll be used for job processing.
So now what I'm going to do is configure a pool within this Azure Batch account. The pool defines some details related to the horsepower that's actually going to get the job done.
In other words, virtual machine nodes. So under Pools, I'm going to click Add.

[Video description begins] A blade called "Add pool" opens. [Video description ends]

And I'll have to fill in well, quite a few details to be honest. The first of which is a Pool ID. Let's call it poolab567, just an ID. And the Display name here will be Pool1. Down below, I have to choose the location where I want to grab virtual machine images from.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Image Type", and a drop-down list opens. [Video description ends]

So the standard Azure Marketplace, or maybe a Custom Image. I might have a Shared Image Gallery, or just a pure Custom Image, not shared at all. Or I might want to use a virtual machine image designed or optimized rather for Graphics and rendering, if that's the nature of my Batch jobs. But here I'm just going to choose Marketplace.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Publisher", and a drop-down list opens. [Video description ends]

Publisher, in this case, microsoftwindowsserver, the offer's filled in with windowsserver. And then I choose the details here, let's say 2016-datacenter with a smalldisk.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Sku", and a drop-down list opens. [Video description ends]

Maybe I know that the nature of the VM itself is that it won't need a lot of storage space. Because maybe my running task, whether it's a script or an exe is coded to maybe retrieve data feeds from a storage account, or something like that. So that's fine. So I don't need any additional data disks for that. And as I scroll down, I can select the sizing for each individual VM node within the pool that we're defining right now.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "VM size (View full pricing details)", and a drop-down list opens. [Video description ends]

And I could even Auto scale this.

[Video description begins] He sets a toggle button to an option labeled "Auto scale" adjacent to a field labeled "Mode". [Video description ends]

So I could write a formula to determine when items should be auto scaled, when we should start adding nodes.

[Video description begins] He points to a text box adjacent to a field labeled "Formula". [Video description ends]

For help, you can click the link down below to view some samples of what those formulas might look like.

[Video description begins] He clicks a link labeled "Click here to view sample autoscale formulas" and a blade called "Sample autoscale formulas" opens. [Video description ends]

So we see an example over here on the right where we can see it's setting the target dedicated nodes, or you can just leave it at Fixed.

[Video description begins] In the blade, he points to a line of code "$TargetDedicatedModes = $isWorkingWeekdayHour ? 20:10;". [Video description ends]

We aren't actually going to be running this, but you should have at least a minimum of 1.

[Video description begins] In the Add pool blade, he sets the toggle button to an option labeled "Fixed" adjacent to the Mode field. He then closes the Sample autoscale formulas blade. [Video description ends]

Well actually, let's do that. Let's set 1 target dedicated node. You'll see why in a moment. We can also determine if there should be a Start task that we want to configure here which would be executed when a new VM joins the pool.

[Video description begins] He opens a drop-down list box adjacent to a field labeled "Start task" and selects an option labeled "Enabled". [Video description ends]

But that doesn't apply here. So I'm just going to choose Disabled. And I'm going to go down and associate this pool with an existing application package.

[Video description begins] He selects an option labeled "Application packages" and a blade called "Application packages" opens. [Video description ends]

Now the application package will have software, whether it's scripts, or what not, or executables that we want to use for job processing.

[Video description begins] He clicks a drop-down list box under a field labeled "Application" and a drop-down list opens. [Video description ends]

So let's say I've got a PowerShell Script here, maybe I want the second version of it, and maybe I've got custom app here.

[Video description begins] In the drop-down list, he selects an option labeled "Analyze_Data_PowerShell_Script". A new drop-down list box appears under the Application field. [Video description ends]

Let's see what we got for only version 1.0, okay.

[Video description begins] He clicks a drop-down list box under a field labeled "Version" and a drop-down list opens. He then selects an option labeled "2.0". A new drop-down list box appears under the Version field. [Video description ends]

So version 1.0 of that, these were already created here within the Azure Batch account.

[Video description begins] He clicks the new drop-down list box under the Application field and a drop-down list opens. He then selects an option labeled "CustomApp1". A new drop-down list box appears under the Application field. [Video description ends]

So I'm going to Select that.

[Video description begins] He clicks the new drop-down list box under the Version field and a drop-down list opens. He then selects an option labeled "1.0". A new drop-down list box appears under the Version field. [Video description ends]

And I have to associate this with the virtual networks.

[Video description begins] He points to the Analyze_Data_PowerShell_Script and CustomApp1 options selected in the drop-down list boxes. [Video description ends]

So, because really, we are going to be running virtual machines, it's just that this is a managed service.

[Video description begins] He clicks a button labeled "Select" and the blade closes. [Video description ends]

It'll take care of a lot of the underlying work for us.

[Video description begins] In the Add pool blade, he selects an option labeled "Network Configuration Select a virtual network" and a blade called "Choose virtual network" opens. [Video description ends]

We're just giving it some details.

[Video description begins] He selects an option labeled "Vnet2" and the blade closes. [Video description ends]

So Vnet2, let's say I want the VMs to run in Subnet1.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Subnet" and a drop-down list opens. He then selects an option labeled "Subnet1". [Video description ends]

I don't want the VMs to have public IPs unless they need them perhaps to access an external service to perhaps ingest data. And I don't have any existing Server licenses, No.

[Video description begins] He points to a toggle button labeled "Already have a Windows Server license?", which is set to "No". [Video description ends]

So I'll click OK.

[Video description begins] The Add pool blade closes. A message appears with the text, "Pool 'poolab567' was created successfully". A pool labeled "poolab567" appears and adjacent to it, an icon labeled "X" is present. [Video description ends]

Well, the pool was created successfully, but this little red circle with an X doesn't look good.

[Video description begins] He clicks the poolab567 pool and a blade called "poolab567" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

What's up with that? Let's click and let's read. The specified account has reached core quota. Click here for details.

[Video description begins] He clicks a link labeled "The specified account has reached core quota. Click here for more details" and a blade called "Resize errors - poolab567" opens. [Video description ends]

Okay, doesn't really tell us much. Alright, remember how we set the fact that we wanted one node, we didn't use auto scaling. Well, let's take a look here.

[Video description begins] He clicks an icon labeled "X" and the blade closes. [Video description ends]

Let's go back into our Batch account here, and let's scroll up here and go into Quotas.

[Video description begins] He switches to the batcheast1 blade. [Video description ends]

There are some default quota values here for a number of items.

[Video description begins] A corresponding page opens in the content pane. [Video description ends]

Such as the maximum Active jobs and schedules, the maximum number of Pools you can create in this account. And if we look down below, how many Low-priority vCPUs for VMs can we have, 0. Total dedicated VCPUs, 0. No wonder we have a problem. Okay, so that's not a good thing, but it's not a big deal. All we have to do is request a quota increase from Microsoft. To do that, I just click the link, I'm just following what's there in front of me with the messages.

[Video description begins] He clicks a button labeled "Request quota increase" and blade called "New support request" opens. In the blade, a tab labeled "Basics" is open. [Video description ends]

And for the selected option, it's Azure services, the issue here would be a Service and subscription limit quota increase.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "What is your issue related to?" and a drop-down list opens. He then selects an option labeled "Azure services". [Video description ends]

And there are few other details to specify, the quota type here is going to be for Azure Batch.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Issue type" and a drop-down list opens. [Video description ends]

So I'll click the Next Solutions button.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Quota type" and a drop-down list opens. [Video description ends]

We just have to then target a specific Batch account in a region where this is an issue for us.

[Video description begins] A tab labeled "Details" opens in the blade. [Video description ends]

So to do that, I'll have to click Enter details first.

[Video description begins] A blade called "Quota details" opens. [Video description ends]

And for the location here, let's just choose Canada East, only because I know that's where my Batch account is located.

[Video description begins] He clicks a drop-down list box labeled "Location" and a drop-down list opens. [Video description ends]

And I can tell it that look, I know I'm going to want to use D Series VMs in my pool.

[Video description begins] He then clicks a drop-down list box labeled "Batch account" and a drop-down list opens. He then selects an option labeled "batcheast1". [Video description ends]

So it really depends on your pool config, the sizing. But assuming that that was applicable, the Current limit is 0.

[Video description begins] He clicks a drop-down list box labeled "Select Quotas to Update (current values shown in parenthesis)" and a drop-down list opens. He then selects a checkbox labeled "D Series (0)". [Video description ends]

We could say, I want the New limit to be 2, or whatever the value is. However, we would click Save and continue, but I'm not going to I do that because I don't actually want to request that quota increase. So at this point, we've got the pool created within the Azure Batch account.
Azure Batch Jobs and Schedules

[Video description begins] Topic title: Azure Batch Jobs and Schedules. The presenter is Dan Lachance . [Video description ends]

When you want jobs to be processed through Azure Batch, you have to define jobs and schedules. So here in the portal, I'm looking at an existing Batch account.

[Video description begins] The Microsoft Azure portal is open. In the portal, the batcheast1 blade is open. [Video description ends]

And in the navigation bar, I'm going to scroll down under Jobs. I've already got an application in a pool configured a pool of VMs.

[Video description begins] In the navigation pane, he points to the Applications and Pools options. [Video description ends]

So I'm going to go to Jobs.

[Video description begins] A corresponding page opens in the content pane. [Video description ends]

So we're going to add a job and then within that, we're going to add at least one task. So I'm going to start by clicking Add.

[Video description begins] A blade called "Add job" opens. [Video description ends]

Let's get the job defined first. So job, put in a unique value here.

[Video description begins] In a text box labeled "Job ID", he enters the text "jobyhz56". [Video description ends]

And I'm going to select a pool, I have to associate the job with the pool.

[Video description begins] He clicks an option labeled "Pool Select a pool to run the job on" and a blade called "Select pool" opens. [Video description ends]

We've already got a pool created.

[Video description begins] He points to a pool labeled "poolab567". [Video description ends]

So I'm going to select it from the list and choose Select. There it is.

[Video description begins] The Select pool blade closes. The Pool Select a pool to run the job on option changes to "Pool poolab567". [Video description ends]

And that's it. I don't need any advanced settings or anything like that. I'm going to click OK. So there's the job.

[Video description begins] The Add job blade closes. A job labeled "jobyhz56" appears in the page. [Video description ends]

However, I need to go into the job and within it, add at least one task to actually get something done.

[Video description begins] He clicks the jobyhz56 job and a blade called "jobyhz56" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Tasks" is selected and its corresponding page is open in the content pane. [Video description ends]

So I'm going to click Add.

[Video description begins] A blade called "Add task" opens. [Video description ends]

And I'm going to enter a Task ID, and then a Display name, Run PowerShell, actually Run custom app, let's say Run custom app.

[Video description begins] He enters the text, "taskyhz24" in a text box labeled "Task ID". [Video description ends]

And let's say I've got a custom app called customapp1.exe.

[Video description begins] He enters the text, "customapp1.exe" in a text box labeled "Command line". [Video description ends]

Now that, of course, would be pulled from an application package. So customapp1.exe and I can determine how long it's allowed to run.

[Video description begins] He clicks the Application packages option and the Application packages blade opens. [Video description ends]

And down below, I'm going to associate with an application package that I've already uploaded with that executable can be found, so that would be in CustomApp1.

[Video description begins] Under the Application field, he clicks the drop-down list box and the drop-down list opens. He then selects the CustomApp1 option. [Video description ends]

And I want version 1.0, and I'll choose Select.

[Video description begins] Under the Version field, he clicks the drop-down list box and the drop-down list opens. He then selects the 1.0 option. [Video description ends]

Okay, so, at that point, we're ready to go, ready to Submit the task at least.

[Video description begins] The Application packages blade closes. [Video description ends]

So we've got a task within the job.

[Video description begins] He clicks a button labeled "Submit" and the Add task blade closes. A task labeled "taskyhz24" appears in the page. [Video description ends]

Let's go back here, because now I want to schedule a job.

[Video description begins] He switches to the batcheast1 blade. [Video description ends]

I don't need Certificates here because I don't have any of my scripts or custom apps that will need to authenticate with specific types of services.

[Video description begins] In the navigation pane, he selects an option labeled "Job schedules" and its corresponding page opens in the content pane. [Video description ends]

So I'm going to need to do that.

[Video description begins] In the navigation pane, he points to an option labeled "Certificates". [Video description ends]

Job schedules. Let's Add a schedule.

[Video description begins] He clicks a button labeled "Add" and a blade called "Add job schedule" opens. [Video description ends]

So I need a Job schedule ID. So I'm just going to fill in some details here.

[Video description begins] He enters the text, "job123567" in a text box labeled "Job schedule ID". [Video description ends]

The Display name, I'm just going to call it Job1. And sometimes, you might need to specify metadata for, well, it really depends on your scripts or your applications that you're running and what services they're talking to. However, I'll leave that empty for now. And I'm going to tell it I want it to run on a particular day.

[Video description begins] In a text box labeled "Do no run until", he clicks an icon and a calendar opens. He then selects a date "03/31/2020". The text, "12:00 AM" is populated in a text box adjacent to the Do not run until text box. [Video description ends]

Now it says here it has to run after certain date and time based on the current time right now.

[Video description begins] An error message appears with the text, "The value must be on or after 03/31/2020 5:41:21 PM. [Video description ends]

So I'm just going to put here, let's say 5:43 PM and it likes that.

[Video description begins] In the text box, he alters the text to "5:43 PM". [Video description ends]

It's going to be a Recurrence interval of Disabled. I just want it run one time and I have to click Update here to associate it with an existing pool. So I'm going to go ahead and choose that from the list.

[Video description begins] The Select pool blade opens. He selects the poolab567 pool. [Video description ends]

And then I'll choose Save. There's the pool it's selected.

[Video description begins] The Select pool blade closes. In a text box labeled "Pool ID", the text, "poolab567" is populated. [Video description ends] \

I can determine down below things like if I want an unlimited of time for this to run or retry count.

[Video description begins] He points to a toggle button labeled "Max wall clock time" set to "Unlimited" and then point to a toggle button labeled "Max task retry count" set to "None". [Video description ends]

And maybe what to do when tasks complete. However, I'm just going to go ahead and click Save to save the schedule.

[Video description begins] The Add job schedule blade closes. A job schedule labeled "job123567" appears in the page. [Video description ends]

So now we've got a job schedule, I can click on it.

[Video description begins] He clicks the job123567 job schedule and a blade called "job123567" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

Now I can check up on it to see if it's run by going under Execution info. Now there's no end time here, it says n/a so it's not yet run. So I can click Refresh if it's suppose to run soon to make sure that I see the results of running that job.

[Video description begins] He points to a link labeled "job123567:job-1" adjacent to a field labeled "Recent job id". [Video description ends]

And so after a few minutes, we can see here we've got a Recent job id, it's a link. I'm going to click on it to open it up and here we can get some stats as to where there's an active job currently it's running, what succeeded and what failed.

[Video description begins] A blade called "job123567:job-1" opens. [Video description ends]

Now, if we don't have anything that succeeded or fail, what does that mean? It could mean the job is still in the midst of running.

[Video description begins] He clicks a button labeled "Refresh" and the blade refreshes. [Video description ends]

Or it could mean that there's a problem.

[Video description begins] He clicks an icon labeled "X" and the blade closes. [Video description ends]

Now you can follow this link with the recent job URL here.

[Video description begins] He highlights a URL labeled "https://batcheast1.canadaeast.batch.azure.com/jobs/job123567:job-1" adjacent to a field labeled "Recent job url". [Video description ends]

Just paste that into another web browser window, which I'll do here. And you might gain some insight here we can see, well, it's not a big deal.

[Video description begins] A web page opens in a new tab. It includes several lines of code. [Video description ends]

We're just missing some items here. So the parameter value for api-version, for example, has not been supplied.

[Video description begins] He highlights a line of code, "key":"QueryParameterName","value":"api-version". [Video description ends]

So depending on your scripts or your code. If it's not using this specific value, such as in an HTTP request header, then you might get this kind of result.


Azure Container Solutions
Azure Kubernetes Service, otherwise called AKS, deals with application containers in plural. It's an orchestration solution, if you've got an application or some kind of dependency between multiple containers. You can even migrate existing application containers that you might have on-premises into the Azure cloud, or you can define your AKS cluster and work with brand new containers.
So it's clusters of containers, which means you'll have to specify some details about things like sizing for the nodes within the cluster. AKS replaces the older Azure Container Service or ACS that you might see some literature reference.

[Video description begins] Application Containers. [Video description ends]

An application container, as we see in the diagram, is a logical boundary in which we run an application, or an application component. I say that because you might have a larger app that uses multiple containers, each container runs its own specialized task or micro service. They all work together. So pictured in the diagram, we've got application containers running across the top, labeled as APP A, B, C, all the way through to G. Now, this runs on top of an operating system, a host OS, as we see labelled here, that would be running, for example, the Docker Engine.

And the binaries and libraries that might be referenced by our APP Components within the containers. Some of those might be within the container themselves, or they can be referenced by the container. Containers really show up as processes running in the host OS. So unlike a virtual machine, they don't contain the OS. They use the underlying existing OS it's already running. So containers start up very quickly because of this. So containers are based on container images, just like you might use an OS image to reimage a computer, if it's not behaving correctly.

The image itself contains software, and perhaps settings for running a container. So you could say that a container is a runtime instance of an image. In the container, you'll have application software components and settings, whether it's custom software or commercial off the shelf software. Maybe some app-specific libraries, maybe a runtime environment, and also some tools. All of this can exist within a single container.

[Video description begins] Azure Kubernetes Service. [Video description ends]

AKS, then, can be deployed using the CLI, using the portal. You can also manage it using Azure Cloud Shell, including using the kubectl, or kube control command line tool. You'll be used to that if you already have experience running Kubernetes outside of the Azure environment.


Azure Kubernetes Service
Azure Kubernetes Service is a container orchestration service. Now, often instead of saying Azure Kubernetes Service, we'll call it AKS. Where we can have individual containers that run applications or application components, what if we have multiple containers, maybe a big app consists of multiple micro services, each of which is in a container.
You need a way to schedule when they should load up, and when to monitor them, and what kind of state they should be running in. And that's where Azure Kubernetes Service comes in. Let's click Create a resource, and I'm going to search for kubernetes.

[Video description begins] The New blade opens. [Video description ends]

And I'm going to choose Kubernetes Service, and then I'll click Create.

[Video description begins] A blade called "Kubernetes Service" opens. [Video description ends]

This is something that was developed at Google.

[Video description begins] A blade called "Create Kubernetes cluster" opens. In the blade, a tab labeled "Basics" is open. [Video description ends]

So I'm going to have to specify some details to build this, such as the Resource group into which I want to deploy this because we're going going to be building a cluster essentially of Linux virtual machines to handle our containerized application, or applications.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Resource group" and a drop-down list opens. He then selects an option labeled "Rg1". [Video description ends]

So I'm going to call this AKS, so that's an Azure Kubernetes Service, Cluster1. Okay, after doing that, I specify the Region, the version of Kubernetes, the DNS name prefix. I will accept the defaults for that, and then I get to determine the node sizing for each node, and I can specify how many nodes I want in the cluster.

[Video description begins] He points to a slider adjacent to a field labeled "Node count". [Video description ends]

Notice that you can't get any lower than 1 but you can drag it way, way up.

[Video description begins] An error message appears with the text, "The maximum node count you can select is 4 due to the remaining quota in the". [Video description ends]

However, you're going to get to a point where you exceed the quota in your subscription. You can always request, like make a service request or support requests to ask for an increase, but I'm just going to go back and leave this down at, let's say, at 2.

[Video description begins] A tab labeled "Scale" opens in the blade. [Video description ends]

I'll click Next for scaling, I'm going to leave the default or VM scale sets being enabled here for scaling. I'll click Next for authentication.

[Video description begins] A tab labeled "Authentication" opens in the blade. [Video description ends]

We are going to let it create a new default service principle and we'll leave RBAC enabled if we want to use RBAC to control access to Kubernetes cluster resources.

[Video description begins] He points to a toggle button labeled "Enable RBAC", which is set to "Yes". [Video description ends]

And then I'll click Next.

[Video description begins] A tab labeled "Networking" opens in the blade. [Video description ends]

I want this to be a Private cluster, so I'm going to enable that only using private IP addresses. I can also determine if I want to have a customized network configuration by choosing Advanced, but I'm just going to let it do it itself, so I'll leave it on Basic.

[Video description begins] He clicks a button labeled "Next: Monitoring" and a tab labeled "Monitoring" opens in the blade. [Video description ends]

Next, I've got some monitoring options, which I'm going to leave as the default settings, Tags, and finally, we can validate this configurational.

[Video description begins] He clicks a button labeled "Next: Tags" and a tab labeled "Tags" opens in the blade. [Video description ends]

I'll click Next to review and create.

[Video description begins] A tab labeled "Review + create" opens in the blade. [Video description ends]

There was a quick message, it said I was creating the service principle, now it's running the final validation, it passed. Let's create our Azure Kubernetes cluster, so I'll click Create to do that.

[Video description begins] A blade called "AKSCluster1" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

Now that our cluster has been deployed in the Overview page, we can see over on the right for example that we've got 1 node pool. We can even monitor any containers, although there are none by default.

[Video description begins] He clicks an option labeled "Monitor containers" and a page called "Insights" opens in the content pane. [Video description ends]

Put any containers, after we get our containerized app running in the cluster, we'll be looking at things like CPU utilizations, and we can kind of monitor the health of it. Over on the left, I'm going to pull up the Node pools blade, we defined a node pool when we deployed the cluster.

[Video description begins] A corresponding page opens in the content pane. It includes a table with one row and several columns [Video description ends]

And we can see it's listed here, it's of type Linux, and there are two nodes. Now, I can either click the link for the 2, in this case, 2 nodes in the cluster. Or I can click the context menu, either way, we'll have an option for Scale.

[Video description begins] Adjacent to the row, he clicks an icon labeled "Context menu" and three options appears. He then points to an option labeled "Scale". [Video description ends]

So if I click on the 2, for example, we can configure manual as well as autoscaling.

[Video description begins] Under a column header labeled "Node count", he clicks a row entry labeled "2" and a blade called "Scale" opens. [Video description ends]

If we decide that we want to make sure the cluster accommodates our container workload properly, I'm just going to cancel that.

[Video description begins] He clicks a button labeled "Cancel" and the blade closes. [Video description ends]

But what we don't see are settings related to actually getting a container, an existing container in here. What if we already have containerized applications, how do we get them in the cluster? Let's move on the development side, but basically, you should really create an Azure Container Registry, upload container images to it. You're also going to need a Kubernetes manifest file, a YAML file, in order to get your apps in here. We do have the option here of Dev Spaces over on the left.

[Video description begins] In the navigation pane, he selects an option labeled "Dev Spaces" and its corresponding page opens in the content pane. [Video description ends]

So you can use Dev Spaces here to start to build solutions and debug them that'll run in containers within the cluster.


Azure Container Instance
You can deploy Azure Container Instances, or ACIs, when you have a single container that you want to run.
Now if you have multiple containers and you need to manage them as a unit, then you're better off looking at AKS, Azure Kubernetes Service. But for a single container, ACI or Azure Container Instances is fine. So here in the portal, let's get this configured.
I'm going to click Create a resource.

[Video description begins] A blade called "Container Instances" opens. [Video description ends]

And I'm going to search for container instance, and I'll choose Container Instances, and I'll click Create.

[Video description begins] A blade called "Create container instance" opens. [Video description ends]

So I'm going to deploy this into an existing Resource group.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Resource group" and a drop-down list opens. He then selects an option labeled "Rg1". [Video description ends]

And I'm going to call this, for lack of a better name, Container1. Now, the only thing is it won't like the uppercase letters, so let's put lowercase c and this time, it's good, passes all the validations for the nomenclature.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Region", and a drop-down list opens. [Video description ends]

For the Region, I'm going to go ahead and specify something in Canada that's near me such as Canada Central. And now what do I use as the source for this application container image, it can be a quick start image.

[Video description begins] He clicks a drop-down list box adjacent to a field labeled "Image", and a drop-down list opens. [Video description ends]

So whether we want to use a standard helloworld example to get started, running in Linux, or using nginx as the HTTP engine, or Microsoft IIS web server, we have the choice of that. We can also point to an Azure Container Registry, or ACR.

[Video description begins] He selects a radio button labeled "Azure Container Registry" adjacent to a field labeled "Image source". [Video description ends]

You can build an ACR in Azure as a repository where you store your own custom container images and you can reference them from here. Or you can go online to Docker Hub and look at either public or private images that are available up there.

[Video description begins] He selects a radio button labeled "Docker Hub or other registry" adjacent to the Image source field. [Video description ends]

I'm just going to go ahead and choose Quickstart images and I'm going to use, let's see, well actually, let's use the helloworld Linux variant.

[Video description begins] He clicks the drop-down list box adjacent to the Image field, and the drop-down list opens. [Video description ends]

I can also choose the sizing here, the horsepower I need to support the workload running in the container.

[Video description begins] In the drop-down list, he selects an option labeled "microsoft/aci-helloworld (Linux)". [Video description ends]

I'm not going to change that, but I am going to click Next for networking.

[Video description begins] He points to an option labeled "1vpcu 1.5 Gib memory, 0 gpus" adjacent to a field labeled "Size". [Video description ends]

So I can make this publicly available, so I need a DNS name label.

[Video description begins] A tab labeled "Networking" opens in the blade. [Video description ends]

So let's call this containeryhztest, and it's going to use the .canadacentral.azurecontainer.io DNS suffix by default. And depending on what is running in that container instance, will determine which ports need to be open. It's already got port 80 open for this quick start sample, that's fine. I'm going to click Next for Advanced.

[Video description begins] A tab labeled "Advanced" opens in the blade. [Video description ends]

I'm not going to configure anything here, I'm just going to click Next, no tags.

[Video description begins] A tab labeled "Tags" opens in the blade. [Video description ends]

So after that, we're just going to have it validate our selections.

[Video description begins] He clicks a button labeled "Next : Review + create" and a tab labeled "Review + create" opens in the blade. [Video description ends]

So it's running the final validation we see in the upper left. We can see the validation has passed, let's click Create to build our container instance.

[Video description begins] A blade called "Microsoft.ContainerInstances-20200331181558" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

And with the deployments complete, I'm going to click Go to resource and let's check it out.

[Video description begins] A blade called "container1" opens. It is divided into two parts: navigation pane and content pane. In the navigation pane, an option labeled "Overview" is selected and its corresponding page is open in the content pane. [Video description ends]

So I'm in the Overview blade of our container instance, we can see a few details. We can see some metrics, how busy is it? Well, there's not very much going on here in terms of CPU utilization, not a lot of memory is really being used. And down below, network transfer for bytes received versus transmitted is minimal. Now the next thing we should do though, is take a look at the containers. Let's click Containers.

[Video description begins] In the navigation pane, he selects an option labeled "Containers" and its corresponding page opens in the content pane. It includes a container labeled "container1". [Video description ends]

Here we're going to see a reference for the container that was deployed. In this case it was our helloworld, and it's called container1, and notice the state of it is such that, it's currently Running.

[Video description begins] In the page, a tab labeled "Events" is open. It includes a table with several rows and columns. [Video description ends]

And down below we can see some events, the container was Created, Started, and it pulled the image here from a repository.

[Video description begins] He points to the row entries in the table. [Video description ends]

And also what's interesting, we can even view some log information here about what's been happening in the background.

[Video description begins] He opens a tab labeled "Logs" in the page. [Video description ends]

So we can see our container, in this case is listening on port 80. Containers won't always do that, it depends on the nature of what's inside it.

[Video description begins] A tab labeled "Connect" opens. A pop-up box labeled "Choose Start Up Command" is open in the tab. [Video description ends]

Here I can click Connect as well, if I want to interact with the contents of the container, such as, I'll use /bin/sh S-H, make a connection, and here we go. Now we can see we're in the file system.

[Video description begins] He selects a radio button labeled "/bin/sh" and clicks a button labeled "Connect". The prompt "/usr/src/app #" is displayed. [Video description ends]

So if I do an ls, for example, I can even see index.html.

[Video description begins] He executes the following command: ls. The output displays several files. The prompt does not change. [Video description ends]

So if we go back to Overview, speaking of index.html, we're going to see the URL here, the Fully Qualified Domain Name, FQDN.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

I'm going to copy that and we're going to open that app in another web browser window.

[Video description begins] He points to a URL adjacent to a field labeled "FQDN". [Video description ends]

And here we can see it's pulling up the contents of the web page within that container. But again, containers don't have to serve up a web application.

[Video description begins] He clicks an icon labeled "Copy to clipboard" adjacent to the URL and the icon name then changes to "Copied". [Video description ends]

It could be a background component that does anything, it doesn't even have to expose port 80.

[Video description begins] A web page opens in a new tab. It includes an image and the text, "Welcome to Azure Container Instances!". [Video description ends]

But in this case, based on our container image that we selected, it does.

                    
Azure DNS Overview
  - Domain Name System, or DNS, is used as primarily a name lookup service. [Video description begins] The following information is displayed on screen: Name resolution service. [Video description ends] So if we have a name like www.skillsoft.com, DNS can resolve that to the IP address so that we can make a connection to that website in that particular example.

Well, you can host DNS zones in Azure. A zone isn't the same as a domain name though because the domain name in DNS is just that – it's just a name, it's a text string. When we say "zone," a zone is related to a domain name and it handles its records. So we'll see a little bit about that.

Now in Azure, you can host private or public zones. What's the difference? Well, a private zone is one that essentially you can make up the name for. You don't have to ensure that it's globally unique. You don't have to have registered it through an external registrar or anything like that. Now a public zone is one that you have already registered externally with a DNS domain name provider because you can't do that directly through Azure – but you can host it in Azure.

You will just have to sign in to your DNS registrar tool – usually it's web browser based – where you can modify records and just modify the name servers to point to Azure DNS name servers. There are plenty of different types of DNS records. The first here is an A record. This one is used to resolve a friendly name, as we mentioned, like www.skillsoft.com to the related IPv4 address. In IPv6, IP addresses are four times as long as with IPv4. IPv4 uses 32-bit IP addresses. With IPv6, we're looking at 128-bit addresses. So a quad A record is four As. And it's used to resolve a friendly name to an IPv6 address.

MX records. This stands for Mail Exchanger. It's used for SMTP mail transfer between servers. CNAME records. It stands for Canonical Name. This is an alias type of record. Basically, you can have multiple names for essentially the same host. [Video description begins] The slide displays the following as the utilization scenario for the CNAME component type: Canonical Name - an alias to another DNS record. [Video description ends]

A PTR is a reverse lookup record. Now normally we have a name and we need to resolve it to an IP. Well, a pointer record is the opposite. I already have the IP, I would like to get the name for this IP; so IP address to name type of lookup in a reverse lookup zone. You can configure Azure-provided DNS name resolution. Now this uses Azure-provided DNS service. This is actually set up by default, or you could change that default and use your own custom DNS servers.

Let's talk about the default Azure-provided DNS name resolution. That's the default config, and it resolves public DNS names and virtual machine names within the VNet. And you can configure, whether you're using Azure-provided or custom DNS servers, at the virtual network level, the VNet level, and also within a network interface.

You'll see there's a DNS servers option. The default behavior is that the network interface will inherit the DNS server configuration from the VNet it's in. So that's through the subnet affiliation. So with custom DNS options, you might use this if you want virtual machine name resolution across VNets or if you're deploying IaaS virtual machines manually as Active Directory domain controllers. Because Active Directory needs DNS. You need to configure DNS so that it can locate domain controllers. So you'd have to set up your own. And so you might use that as a custom DNS server configuration option for your VNet or your network interfaces.

DNS forwarding to Azure is supported so that even though you're using custom DNS configuration – it's a custom DNS server basically that you are specifying the IP address of – that custom DNS server can be configured to forward to Azure name servers. So you still get the benefit of the Azure name resolution.

So we can see here in the screenshot that we are looking at the DNS servers blade or the setting within a VNet. And on the right, the Default (Azure-provided) DNS servers is normally what you'll see. That's normally how it is unless you change it otherwise to Custom, which has been done here. And the IP addresses of two custom DNS servers has been specified.

Now the other thing to think about is that if you want to host a public domain name, you've gone out and you've purchased a specific DNS domain name, you have to have control of that already through an external DNS registrar before you can create it in Azure and create the record sets and actually have it work. Now you can manage DNS using your normal Azure credentials, either using tools such as the Portal or PowerShell or the CLI. Just bear in mind that depending on your Azure environment, RBAC, or role-based access control, will really determine if you have the correct permissions to manage DNS or not.


DNS Zones and the Portal
Using the portal, you can create private or public DNS zones in Azure and also manage the record sets within them. [Video description begins] Azure Home is open. It includes the following sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual machines, Virtual networks, etc.. [Video description ends]

So what we're going to do here is we're going to add a private DNS zone. When I say "private," what I mean is it's not a publicly unique DNS domain name that I've registered already. So basically I can make it up, it's only going to be used internally. So I'm going to go ahead and click Create a resource here in the portal. [Video description begins] A "New" blade opens. It includes a Search box. [Video description ends]

And I know I want to create a DNS zone. So I'm going to search for DNS zone. And I'm going to choose DNS zone. And I'll click Create. [Video description begins] The DNS zone blade that opens includes a "Create" button. [Video description ends]

Now you have to have planned ahead of time, well, for sure, the name of this if you're creating a private one. [Video description begins] A "Create DNS zone" blade opens. It has the following steps in the navigation pane: Basics, Tags, and Review + create. Currently, Basics is selected. It includes two sections: Project details and Instance details. The "Project details" section has a "Subscription" drop-down list, which is set to "Pay-As-You-Go." The drop-down list has an associated "Resource group" drop-down list. The "Instance details" section has a "Name" field. [Video description ends]

So I'm going to put this in the Rg1 resource group. And in this case, I'm going to call this quick24x7test.local. [Video description begins] After selecting Rg1 from the "Resource group" drop-down list, the presenter types quick24x7test.local in the "Name" field. [Video description ends]

So that's what I've planned I want to name this DNS zone. Now that in itself is a DNS domain name. The zone is the configuration that supports the records for that domain name. That's what we're really going to be getting into here. So I'm going to click Next. I'm not going to tag it although, of course, I could. [Video description begins] The "Tags" step is now selected. [Video description ends]

I'm just going to go to the review and create screen. [Video description begins] He clicks the "Next : Review + create" button. [Video description ends] Validation has passed. Excellent. I'm going to click the Create button. And it's going to create the zone with a couple of default records, which we'll take a look at. So it won't take very long before you can click Go to resource [Video description begins]

The DnsZones-Arm | Overview blade opens. It includes a "Go to resource" button. [Video description ends] and jump directly into your newly created DNS zone. [Video description begins] The quick24x7test.local blade that opens has the following categories in the resource menu: Overview, Activity log, Access control (IAM), etc.. Currently, Overview is selected. It includes a "Record set" button, a listing of four name servers, and a table with the following columns: Name, Type, TTL, Value, etc. Two record sets, with Type listed as NS and SOA, respectively, appear in the table. [Video description ends]

We can see over here on the right, even in the Overview blade, that we've got a name, a couple of name server records here in a record set, NS. These are the name servers that actually are handling this particular zone and also a start of authority, or SOA, record with some details. [Video description begins] He first points to the name servers that display in the "Value" column for the first record set and then to the corresponding details that display for the second record set. [Video description ends]

Now what I can do here is add my own record set. So my goal here is to have a record, an A record, for www, which means if I put it as the prefix within this DNS zone, I end up with www.quick24x7test.local. That's what I want and I want it to resolve to a specific IP address. So I'm going to click add record set up at the top. And I know I want to call it www. We would plan all this stuff ahead of time and not make it up as you're filling it in, of course.

[Video description begins] An "Add record set" pane appears. It includes a "Name" field; a "Type" drop-down list, which is set to A; a TTL field with an associated TTL unit drop-down list, which is set to Hours; and an "IP address" field. The following text displays at the bottom right-hand corner of the "Name" field: .quick24x7test.local. The number one displays in the TTL field. He types www in the "Name" field. [Video description ends]

And here I want to create an A record. A records are used to resolve friendly names or fully qualified domain names like www.quick24x7test.local to an IP address. But I might also want to create a quad A record for IPv6 resolution; a CNAME alias record and MX, mail exchanger, record; and so on. So it's going to be an A record here. [Video description begins] He points to some of the options listed in the "Type" drop-down list. [Video description ends]

I also have a time to live, or TTL, value here. So the TTL here determines how long that the information related to these records is cached when they're being queried by clients. So it's set here to one hour. That's fine. I'm not going to make a change there. What I am going to put here is the IP of a host, let's say, that I know is running a web service and it's ready for www.quick24x7test.local. So 10.0.1.100 is what I'm putting in. [Video description begins] He clicks the "OK" button. [Video description ends]

Okay, so it's creating the record set. It says it did it. So let's just scroll down and double-check. And there it is. There's our www. Of course, that's in our DNS zone. So put the whole thing together. It's an A record and we can see the value of it. [Video description begins] The www record set with Type listed as A and Value listed as 10.0.1.100 now appears in the table in the quick24x7test.local blade. [Video description ends]

Now I'm going to scroll up. And we can see here we have four name servers listed for this DNS zone. So I can copy any one of these using the Copy to clipboard button over on the far right. And the reason I would do this is because I want to test that this DNS zone is working correctly for name resolution. [Video description begins] He copies the following name server: ns1-09.azure-dns.com. [Video description ends]

So the way I'll do that here in my virtual machine that I've got running in Azure, I'm going to use the nslookup or name server lookup command. This is built into Windows. It's also built into the Unix and Linux operating systems as well. [Video description begins] He shifts to the command prompt. [Video description ends]

I'm going to give it the name I want to check or test – in this case, www.quick24x7test.local. And then I'm going to paste in the first name server that I just copied from the Overview blade in my DNS zone. And I'm going to press Enter. So I know here that it's returning the proper result. We can see the full DNS name. And we can see it returned the correct IP address, 10.0.1.100.


DNS Zones and the CLI
In this demonstration, I'm going to create a private DNS zone in Azure using the CLI. [Video description begins] The Microsoft Azure PowerShell application is open. [Video description ends] So to get started, I'm going to run az network dns zone create. The first thing I have to do is determine which resource group that should be deployed into. So I'm going to specify that with -g. And it's going to be resource group 1.

And I have to determine what nomenclature I want to use – what's the name of the zone. So in this case, it's going to be callinsure.com. [Video description begins] The presenter types the following command: az network dns zone create -g Rg1 -n callinsure.com. [Video description ends] And I'll go ahead and press Enter to create that. So it looks like it's created the DNS zone. We can see the four Azure DNS name servers that are allocated by default.

And if we take a look at it in the portal, let's go back here and take a look by going to our All resources view. And we should see that we've got the callinsure.com zone. There it is right there. So I'm going to click and open it up. [Video description begins] He shifts to the "All resources" blade. It includes a table with the following columns: Name, Type, Resource group, etc.. Several record links, including callinsure.com, appear in the table. [Video description ends]

Sure enough, it's looking like it's ready to go. There's the four name servers. [Video description begins] The callinsure.com blade that opens has the following categories in the resource menu: Overview, Activity log, Access control (IAM), etc.. Currently, Overview is selected. It includes a "Refresh" button, a listing of the four name servers, and a table with the following columns: Name, Type, TTL, Value, etc.. Two record sets with Type listed as NS and SOA, respectively, appear in the table. [Video description ends]

We've got the name server and start of authority records listed here. So let's go back to the CLI because now we're going to add a record set. [Video description begins] He points to the four name servers and the details that display in the "Value" column for the first and the second record sets, respectively. [Video description ends]

So I'm going to clear the screen and I'm going to run az network dns record-set A. That's a A record I want to add. And I'm going to tell it I want to add that record – add-record. The resource group is going to be Rg1, the zone with -z we just created. It's called callinsure.com. And the name, -n, is www. Finally, the address associated with that is going to be 10.0.1., let's say, 100. [Video description begins] He types the following command: az network dns record-set A add-record -g Rg1 -z callinsure.com -n www -a 10.0.1.100. [Video description ends]

And I'm going to go ahead and press Enter to create that. There's just a little message that says the record set doesn't exist and will be created. In future., an extra argument will be supported on the command line. That's all fine. We can see from the returned JSON output, it looks like it's been created. And of course, we can verify that in a number of ways, one of which is by refreshing our record sets here within our DNS zone in the portal. And if I just scroll down a little bit, there's our A record for www. [Video description begins] He returns to the callinsure.com blade and clicks the "Refresh" button. [Video description ends]

We could see it's pointing to 10.0.1.100. [Video description begins] The www record set with Type listed as A and Value listed as 10.0.1.100 now appears in the table. [Video description ends] Of course, we can do the same type of thing in the CLI. So from here, I could do az network dns record-set. This time list -g is resource group, Rg1, and the zone is callinsure.com.

And if we press Enter, we'll get a sense of some of the record sets that are actually available here. And for example, we can see the IPv4 address of 10.0.1.100 for the record that we just created. And if we kind of scroll back up, we can read more about all of the records that are available within that DNS zone.

Now if we go through the output, we'll see that the arecords property here contains the IPv4 addressing information. So what I'm gong to do then is run the az network dns record-set list syntax, -g for the resource group, -z for the zone name. So that's all the same as we've done previously. But now we're going to use --query.

Now I've got a list of record sets. So it's an array; so open and close square bracket; dot. And in this case, I want to return not only the name but also the arecords property. So because I've got multiple properties I want returned, they're enclosed themselves within square brackets and separated with a comma. So I'm going to press Enter. And what we should see is that we've got, for example, what we want from our zone, the www A record with the listed IPv4 address. So this output makes it a little bit easier to digest what it is that we're looking at and asking the command to return.


DNS Zones and PowerShell
In this demonstration, I'm going to use PowerShell to create an Azure-hosted DNS zone and also a record set. So let's start with the zone. To do that, I'm going to run new-azdnszone. And I want to name this permacan.com. Now I don't have to have registered that publicly if I just want to use it internally in my Azure name resolution environment. I'm going to specify -resourcegroupname. I want this deployed in a resource group named Rg1. Let's go ahead and press Enter to get that part completed. And it looks like it created it. It returned the default for NameServers that every Azure-hosted DNS zone gets.

And if we check our work here in the portal and go to All resources, and we'll just do a little refresh here. If we filter it, let's say, for perma, we will see after a moment indeed there's the permacan zone. And if we look at the Overview blade for it, we'll see the four name servers that are always assigned. And we'll also see the name server and start of authority records, which are always automatically assigned.

[Video description begins] The "All resources" blade includes a "Refresh" button, a Search box with the inline text "Filter by name...," and a table with the following columns: Name, Type, Resource group, etc.. Several record links are listed in the table. And when the presenter clicks the "Refresh" button and types perma in the Search box, only the permacan.com record link displays in the table. Next, he clicks the link, and a permacan.com blade opens. It has the following categories in the resource menu: Overview, Activity log, Access control (IAM), etc. Overview, which is selected, includes a "Refresh" button, a listing of the four name servers, and a table with the following columns: Name, Type, TTL, Value, etc. Two record sets with Type listed as NS and SOA, respectively, appear in the table. [Video description ends]

So it looks good. Next thing that we're going to do is add a record set. And we can do that in PowerShell with the new-azdnsrecordset cmdlet. And the first thing I'll have to do is specify the name of the record I want to create here. It's going to be called www. Now I want that to be an A record. So I'll tell it that with -recordtype. I want it to resolve to an ipv4 address. And the record type here will be A -zonename. Now we want that to be a part in our case of the zone we just created. And it's called permacan.com.

The resource group, the resource group name is Rg1. And I also can set a TTL value, time to live value, for caching for this particular DNS record set. So I'll set that, let's say, to a value of 3600. Now that's the number of seconds for caching. So 3,600 seconds equates to one hour. The next thing I'm going to do is use the -dnsrecords parameter. And the way I'm going to do this, you could've put it in a variable. But within parentheses here,

I'm going to use new-azdnsrecordconfig -ipv4address. I'll type that in and I'll specify the IP address I want to use – 10.0.1., let's say, 100 or whatever the IP address you want the ww record to resolve to. And of course, I'm going to have to close the parenthesis. [Video description begins] He types the following command: new-azdnsrecordset -name www -recordtype A -zonename permacan.com -resourcegroupname Rg1 -ttl 3600 -dnsrecords (new-azdnsrecordconfig -ipv4address "10.0.1.100"). [Video description ends]

Putting parentheses around this because I want this treated as returned result value that we'll use as the value of the -dnsrecords parameters. Let's go ahead and press Enter. Well, that was quick, looks like it's good. It says the provisioning state is such that it succeeded. So well, we can check our work back here in the portal. Let's just refresh the screen we already had opened. [Video description begins] He clicks the "Refresh" button, and the www record set with Type listed as A, TTL listed as 3600, and Value listed as 10.0.1.100 now appears in the table in the blade. [Video description ends]

And there it is. There's the www A record. There's the TTL of 3600 seconds. And we can see the IP address that it's going to resolve to. Back into PowerShell, just going to clear the screen here and I'm going to use the get-azdnsrecordset cmdlet, so we can return some of these items here in the PowerShell environment; -zonename is permacan.com in this particular case at least. And I'll specify the resource group name. And then the resource group name value is Rg1 in this particular case. [Video description begins] He enters the following command: get-azdnsrecordset -zonename permacan.com -resourcegroupname Rg1. [Video description ends]

And it looks like it's returned everything here. But I could ask for certain properties. Maybe I'm only interested in the RecordType and the Records and also the Name. So why not bring up that previous command and pipe it to select and tell it that we want the name, we want the recordtype, and we want the records properties? [Video description begins] He enters the following command: get-azdnsrecordset -zonename permacan.com -resourcegroupname Rg1 | select name, recordtype, records. [Video description ends]

When we do that, we have a pretty nice, neat list. For example, we can see here www is an A record and we can see the IP address that it actually resolves to. [Video description begins] The application displays a table with the following columns: Name, RecordType, and Records. Three record sets are listed in the table, including www with RecordType listed as A and Records listed as {10.0.1.100}. [Video description ends]

Now if I use the nslookup command here in the Cloud Shell and give it the name, the fully qualified domain name, for what I've created – so www permacan.com. [Video description begins] He pastes the following command: nslookup www.permacan.com ns1-05.azure-dns.com. [Video description ends] And here I've pasted in one of the name server records and all I did there, you can see it's ns1-05.

I've gone back here to the Overview blade of my DNS zone. And I've simply copied one of these name server entries. [Video description begins] He points to the listing of the four name servers that displays in the permacan.com blade. [Video description ends] Basically, that's the name server I want to query against. And it returns the www.permacan.com fully qualified domain name, or FQDN, with the IP address that we configured. So in other words, the DNS zone is functional for using it for name resolution.


VNet Custom DNS Settings
When you create a VNet in Azure, by default, the VNet uses Azure-provided DNS name resolution. Let's verify this fact. [Video description begins] The "Virtual networks" blade is open. It includes a table with the following columns: Name, Resource group, Location, etc.. Four record links, including Vnet1, appear in the table. [Video description ends] So let's go into an existing VNet.

And what I want to do when the properties area shows up on the left is I want to click on DNS servers. [Video description begins] The presenter clicks the Vnet1 link, and the corresponding blade opens. It includes a "Settings" section in the resource menu. The section includes a DNS servers category. And when he selects the category, the corresponding blade that opens includes a "Save" button and a DNS servers section. The section has two options: Default (Azure-provided) and Custom. Currently, Default (Azure-provided) is selected. [Video description ends]

You've got two options, either the Default (Azure-provided) DNS name resolution, or you can use Custom. So what I'm going to do here is specify Custom where I must add the IP address of a DNS server that I want to use as my custom name resolution solution. [Video description begins] When he selects the "Custom" option, a field displays below it featuring the inline text: Add DNS server. [Video description ends]

You can also add multiple IP addresses here. You'll be able to add as many as you need here. [Video description begins] He points to the field that displays below the "Custom" option. [Video description ends] For example, you're probably never going to need more than five, six, or seven custom DNS server IP addresses here, where the additional ones only really get used if the first one doesn't respond.

But before we fill this in, let's take a look at what we have for our own DNS server, which I've actually deployed into an Azure VNet, specifically in Vnet1. [Video description begins] He shifts to the DNS Manager application, which has the following category in the navigation pane: DNS. The category has a single node: WinSrv2019-1. The node, which is expanded, includes a "Forward Lookup Zones" node. The node, which is expanded, comprises a quick24x7custom.local folder, which is selected. It contains a table with the following columns: Name, Type, and Data. Three records appear in the table. These include www with Type listed as Host (A) and Data listed as 10.0.1.1. [Video description ends]

So I can see here in Windows, I've got a DNS zone called quick24x7custom.local. It's got a record for www that points to 10.0.1.1. And so we can use the IP address of this host as our DNS server. So I'm going to go ahead and go into a command prompt. And I'm going to run ipconfig. [Video description begins] The output includes an "IPv4 Address" heading. The following address displays against the heading: 10.0.1.4. [Video description ends]

And I can see that this server's address is 10.0.1.4. That's what I'm going to set as my DNS server. And you want to make sure that this private IP address, in this case, it's the private one, public ones don't show up here in the OS, you want to make sure that it's unchanging if you rely on this server for name resolution.

So I'm going to go ahead and specify that as my custom DNS server IP address and I'm going to Save it. [Video description begins] He returns to the Vnet1 | DNS servers blade, types 10.0.1.4 in the field that displays below the "Custom" option, and clicks the "Save" button. [Video description ends] Now this is going to apply to resources that I've deployed in Vnet1.

And in this case, if I look at the subnets for Vnet1, we can see that there are two of them, subnets 1 and 2. [Video description begins] He selects the "Subnets" category that displays in the "Settings" section in the resource menu. The category includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Two subnets, Subnet2 and Subnet1, appear in the table. [Video description ends]

So what I want to do is verify that this works. And I'm going to do it on my server. And you don't have to do it directly on the DNS server. But I don't want to have to fire up another VM just to test it. So I've restarted my virtual machine in that VNet, so it will pick up the new VNet custom DNS server setting, which it is pointing to itself. But that's good enough for testing purposes.

When you're within a virtual machine operating system in Azure, you can do an ipconfig /all. [Video description begins] He returns to the command prompt and enters the command: ipconfig /all. The output includes a DNS Servers heading. The following address displays against the heading: 10.0.1.4. [Video description ends]

And you'll see the DNS server that was assigned by Azure. So you don't want to configure DNS server IP addresses where possible within the OS. Let it be handled by Azure. So we now know it's pointing to the correct DNS server, 10.0.1.4. Again, that happens to be the server I'm sitting at itself. But again, it'll be fine for testing.

So we can test this by pinging www.quick24x7custom.local. And it should return back 10.0.1.1. [Video description begins] When he enters the command, ping www.quick24x7custom.local, the application displays the following message: Pinging www.quick24x7custom.local [10.0.1.1] with 32 bytes of data:. [Video description ends] I don't have a host listening at that IP, which is why it's timing out. [Video description begins]

He points to the following output that now displays: Request timed out. [Video description ends] But if we go in and look at DNS again just to verify our work, we're going to see, in fact, that that is correct. [Video description begins] He types dns in the Search box and selects DNS from the search results that display. The DNS Manager application reopens. [Video description ends] It is resolving now correctly because we've modified our VNet DNS settings. So there's quick24x7custom.local, there's www, there's 10.0.1.1. So it's working.


Network Security Group Overview
Most of us already have experience configuring some type of firewall whether it's a network perimeter firewall such as one built into a router or a specific firewall appliance or even in a host operating system like Windows or Linux. Firewalls limit network traffic based on our configuration of firewall rules.

And that's really what network security groups, or NSGs, are all about in Azure. It's considered a Layer 4 firewall. Layer 4 is referring to the fourth layer in the OSI model. The OSI model is a seven-layer conceptual model used to explain network communications related to both software and hardware. So Layer 4 is the transport layer – so has the ability to deal with things like IP addresses and port numbers.

So with network security groups in Azure, you can create Allow rules. So you can can specify the traffic that should be allowed into or out of a subnet or a network interface. Or you can define it as a Deny rule if you specifically want to deny something, again, whether it's coming into or out of a subnet or a network interface.

There are also default rules that we'll take a look at here, both for the inbound direction and outbound direction, again, as it applies to subnet or a network interface. So we configure the details within a network security group in rules. And the rules will have details such as the source and destination IP address, the source and destination application group when it comes to applications, source and destination port numbers, the protocol, whether it's TCP, UDP, ICMP. You can even use source and destination tagging information.

And you can specify a priority number to control the order in which rules are processed. Because once a rule matches a packet, then after that whatever the rule says to do, Allow or Deny occurs. And then rule processing stops. So ordering these rules within the network security group is very important.

So we have an example here of the default inbound rules. [Video description begins] A screenshot displays. It contains two buttons: Add and Default rules. Below these is a table with the following columns: Priority, Name, Port, etc.. The following rules appear in the table: AllowVnetInBound with Priority listed as 65000, AllowAzureLoadBalancerInBound with Priority listed as 65001, and DenyAllInBound with Priority listed as 65500. [Video description ends]

You can turn off the display of these if you don't want to see them by clicking the Default rules button up at the top. So we've got three rules here automatically available, one that allows inbound VNet traffic, load balancer traffic, and then third one is a DenyAllInBound rule if the first two don't kick in. Notice that priority numbers in the left-hand column. So rule number 65000 gets read before rule 65500. So that's how this works.

In the same way, we have default outbound rules. Really, the same type of discussion. We've got a Default rules button at the top if we don't want to see these. And we can see that we've got AllowVnetOutBound. Notice that this one's a little bit different. The second default rule for outbound is to allow Internet traffic outbound. That's allowed by default. Other than that, everything else is denied. So you need to associate the network security group with an Azure resource. The network security group itself is, unto itself, a resource that you create in Azure. And you associate it with either a specific VM network adapter, so a network interface, or a subnet.

So think strategy. If you've got a bunch of Linux virtual machines organized on the same subnet, there's nothing else on it, and they have the same firewall rules, they need to allow port 22 SSH traffic in, for example, well, instead of associating the network security group with each network interface for each Linux VM in that subnet, since they all have the same need and they're on the same subnet, why not just associate the network security group once with the subnet? Because then that applies to all of the network interfaces in that subnet.

Now when you build your own inbound rule or outbound, it's going to look similar to this. [Video description begins] A screenshot of an "Add inbound security rule" pane displays. It contains a "Source" drop-down list, a "Source IP addresses/CIDR ranges" field, a "Source port ranges" field, a "Destination" drop-down list, a "Destination port ranges" field, a "Protocol" section, an "Action" section, a "Priority" field, and a "Name" field. The "Protocol" section contains three options: Any, TCP, and UDP. The "Action" section contains two options: Allow and Deny. [Video description ends]

You specify the source at the top, such as being a specific IP address or it could be from anywhere. You can then specify the source port ranges, the destination such as a virtual network. Or it could be a specific host. You specify things like a destination port number. Here it's port 80 over the protocol of TCP. And the action is either Allow or Deny. In this case, it's Allow. Don't forget that the priority number, in this case listed as 100, is important because it controls the order that the rules are processed in.

And remember, when there's a rule match, no more rule processing occurs. And then, finally, we have a name for the rule. When you manage network security groups, you can do this using the Azure portal GUI, you can use the PowerShell cmdlets such as New-AzNetworkSecurityGroup, Get-AzNetworkSecurityGroup, Remove-AzNetworkSecurityGroup, to name just a few. In the CLI, you could use ccommand syntax, including az network nsg – for network security group – create, az network nsg list, az network nsg delete, again, to name just a handful of NSG, or network security group, related CLI commands.


NSGs and the Portal
In Azure, network security groups, or NSGs, are essentially a collection of firewall rules that either allow or deny traffic. [Video description begins] Azure Home is open. It includes the following sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, All resources, Monitor, etc.. [Video description ends] Let's create one here in the portal by clicking Create a resource where I'm going to search for network security and I'll choose Network security group.

And then I'll choose Create. [Video description begins] A "New" blade opens. It includes a Search box. When the presenter searches for and selects the "Network security group" option, the corresponding blade opens. The blade includes a "Create" button. And with the button being clicked, a "Create network security group" blade opens. It contains three steps: Basics, Tags, Review + create. Currently, Basics is selected. It contains two sections: Project details and Instance details. The "Project details section contains a "Subscription" drop-down list, which is set to Pay-As-You-Go and an associated "Resource group" drop-down list. The "Instance details" section has a "Name" field and a "Region" drop-down list, which is set to (Canada) Canada Central. [Video description ends]

First thing I have to do is deploy this into a specific resource group. So I'll make a selection from the list. And I'm going to call this NSG-Windows. [Video description begins] After selecting the Rg1 option from the "Resource group" drop-down list, he types NSG-Windows in the "Name" field. [Video description ends]

So I will have planned this ahead of time so that I might have a number of Windows virtual machine instances. And I want to control traffic to them through this network security group. I'm going to specify that this will be deployed in the Canada Central region. I'll click next: tagging. And I'm not going to specify any key/value pairs for tags. I can do that at any time thereafter if I choose. So I'll click Next to review and create. The validation has passed. [Video description begins] The application displays the message: Validation passed. [Video description ends]

So I'll click Create to create the network security group. Now all we've done is essentially created a shell. We haven't yet defined any of the rules in the network security group. And there are some default rules as you'll see. [Video description begins] A Microsoft.NetworkSecurityGroup-20200321082526 blade opens. It has the following categories in the resource menu: Overview, Inputs, Outputs, etc.. Currently, Overview is selected. It includes the message: Your deployment is underway. [Video description ends]

So once this is created, we're going to go in and take a look at some of those default rules and then we'll add some of our own. Once it's created, I'll click the Go to resource button. And here in our network security group, notice on the left, we can view inbound security rules.

[Video description begins] When the blade displays the "Your deployment is complete" message, a "Deployment succeeded" pop-up appears. It includes a "Go to resource" button. When he clicks the button, an NSG-Windows blade opens. It includes a "Settings" section in the resource menu. The section includes the categories: Inbound security rules, Outbound security rules, Network interfaces, Subnets, etc.. And when he selects the "Inbound security rules" category, the corresponding blade that opens includes an "Add" button, A "Default rules" button, and a table with the following columns: Priority, Name, Port, Protocol, Source, Destination, and Action. The following rules appear in the table: AllowVnetInBound with Priority listed as 65000, Port and Protocol listed as Any, Source and Destination listed as VirtualNetwork, and Action listed as Allow; AllowAzureLoadBalancerInBound with Priority listed as 65001, Port and Protocol listed as Any, Source listed as AzureLoadBalancer, Destination listed as Any, and Action listed as Allow; DenyAllInBound with Priority listed as 65500, Port listed as Any, Protocol listed as Any, Source listed as Any, Destination listed as Any, and Action listed as Deny. [Video description ends]

And there are three of them. We can turn them on or off from display by clicking the Default rules button. The same type of thing is true with Outbound security rules. [Video description begins] When he clicks the "Default rules" button, the table displays the message: No results.. And when he reclicks it, the three rules reappear. [Video description ends]

So for example, if we go to Inbound security rules, notice that these priority numbers are ordered, they're sorted. In other words, the firewall rule here with a Priority of 65000 will be checked before 65001, which is checked before 65500. Now that's going to be important once we start adding our own inbound security rules. You get to determine the order that they get checked in. Because after a rule is checked and there's a match, then no further rule processing takes place.

So what do we have here by default anyway? Well, the first rule is called AllowVnetInBound. So any port, any protocol, from a virtual network, to a virtual network, we are allowing that traffic. Then we have the same type of thing but for allowing Azure load balancer inbound traffic. So the source can be from an AzureLoadBalancer. Any destination, we're allowing it. Then we've got a final rule at the bottom called DenyAllInBound for everything, any source, any destination, any port, any protocol, denying traffic. So if the first two rules don't match incoming traffic, then the DenyAllInBound rule would kick in. It's at the bottom of the list.

Now when managing Windows virtual machines, you're probably going to want to manage them remotely using Remote Desktop Protocol, port 3389. So we're going to add a rule to allow that. Now that's not something that you want to make visible on the Internet publicly, just on the private network side of things for security reasons.

So I'm going to go ahead and click the Add button to add a new rule. We're going to add one for Remote Desktop Protocol. [Video description begins] An "Add inbound security rule" pane appears. It includes a "Source" drop-down list, which is set to Any; a "Source port ranges" field; a "Destination" drop-down list; a "Destination port ranges" field; a "Protocol" section; an "Action" section; and the following field: Priority (given as 100). The "Protocol" section contains the following options: Any, TCP, UDP, and ICMP. The "Action" section contains two options: Allow and Deny. [Video description ends]

The Source is set to Any, but we could specify an IP address, a tag, or an application security group. For example, if I go to IP Addresses, I could specify my public IP address as it's known on the Internet if I'm managing or will be managing these virtual machines from an on-premises environment. [Video description begins] When he selects the "IP Addresses" option from the "Source" drop-down list, a "Source IP addresses/CIDR ranges" field replaces the "Source port ranges" field. [Video description ends]

However, for now I'm going to leave that on Any. The source port range, I'll leave as an asterisk. Normally, when you are making a connection to a service like RDP on port 3389, the destination port is going to be specified, for example, as 3389. But that service talks back to your machine on a much higher level port that's randomly generated. At any rate, so the destination here can be a specific IP address or a virtual network, whatever the case might be. So I'm going to leave it on Any Destination.

I can specify the port range. In this case, it's just a single port number, 3389. I could specify a TCP or a UDP or a ICMP. In this case, I'm going to specify TCP. Down below, I can either Allow or Deny. And notice the default rule number or Priority value is 100. Remember, this is important because that numbering or that priority determines in which order each rule is checked for incoming traffic. Now I'm going to give this a name. It's going to be called AllowInboundRDP. And I'm going to click Add.

So after a moment, notice here that we've got an AllowInboundRDP rule. But we've got a little yield kind of symbol here – some kind of a warning. [Video description begins] The AllowInboundRDP rule now appears in the table in the NSG-Windows | Inbound security rules blade. [Video description ends]

And the reason that we have this is because we are allowing traffic from any source as opposed to locking it down to a particular IP address range. So if we wanted to change that, we could. [Video description begins] He selects the AllowInboundRDP rule, and the corresponding pane appears. He points to the "Source" drop-down list and returns to the blade. [Video description ends]

Now notice if I turn off the default rule viewing, all we see is the rule that we created. We can also do the same type of thing for an outbound security rule. So if I want to control outbound traffic, I could add a rule and configure it in the same manner. Now we can associate network security groups with network interfaces, which are, of course, associated with virtual machines or subnets.

So I could go, for example, here to Subnets and I could click Associate. And I could add a subnet that I want this applied to. [Video description begins] When he selects the "Subnets" category, the corresponding blade that opens includes an "Associate" button. And when he clicks the button, an "Associate subnet" pane appears. It contains a "Virtual network" drop-down list. [Video description ends]

Of course, I first choose the virtual network or the VNet and then I choose the subnet, let's say, Subnet1 and Vnet1. [Video description begins] When he selects the Vnet1 option from the "Virtual network" drop-down list, a "Subnet" drop-down list also displays in the pane. [Video description ends] I'll click OK. And then it will have been associated. So now we're looking at controlling inbound and outbound traffic from a perspective of a specific subnet. Now let's close out of here.

Let's go to All resources and let's look at this from the subnet's perspective. [Video description begins] He returns to Azure Home and selects the "All resources" option. The corresponding blade includes a table with the following columns: Name, Type, Resource group, etc.. A few record links, including Vnet1, appear in the table. [Video description ends]

Now the subnet itself is not its own resource. It's contained within a VNet. So I'm going to open up Vnet1. I'm going to click on Subnets on the left. That shows me Subnet1 and Subnet2. [Video description begins] The Vnet1 blade includes a "Settings" section in the resource menu. The section includes a "Subnets" category. And when he selects the category, the corresponding blade includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Two subnets, Subnet2 and Subnet1, appear in the table. [Video description ends]

If I click on Subnet1, that opens up a whole other set of options just for that subnet. [Video description begins] The "Subnet1" blade includes an "Address range (CIDR block) field, an NAT gateway drop-down list, and a "Network security group" drop-down list, which is set to NSG-Windows. [Video description ends]

You can see the IP address range, whether we've got a NAT gateway associated with it and our current topic, network security group association. Here it is, NSG-Windows. So we could have also set that association here. There are a number of ways of doing it. But in this way, we can control the traffic flow into and out of, in our particular example, a Vnet subnet.


NSGs and the CLI
We know that network security groups are basically collections of rules that control traffic flow into or out of a subnet or a network interface. And the rules can be set to allow or deny that traffic. Well, we can work with those network security groups and their rules using the CLI. And that's what we're going to do here in this example. I'm going to start by using az network nsg, for network security group, create -g. [Video description begins] The Microsoft Azure PowerShell application is open. [Video description ends] 

And I'm going to deploy this into a resource group called Rg1, and I have to give it a name. I'm going to call this in this example App3_Firewall_Rules. [Video description begins] The presenter enters the following command: az network nsg create -g Rg1 -n App3_Firewall_Rules. [Video description ends]

Now the next thing I'm going to do is verify that that was created. We can do that in the portal, in the GUI, of course, but we can also do that using the – there it looks like it's done – using the az network nsg list command. That's consistent in the CLI. You can always use list to list back items. It's kind of like in PowerShell how you could always use the get prefix in the name of a command LIB in order to retrieve something. Now when I do this, it's going to return, of course, all of the properties, all of the details.

So as usual, what we can do in the CLI here is that --query at the end and ask for a specific property like .name. [Video description begins] He enters the following command: az network nsg list --query [].name. [Video description ends] So here we can see that we've got three network security groups, including the one that we just created, App3_ Firewall_Rules.

But the creation of the network security group itself is nothing. It's kind of like a skeletal infrastructure, a container. We need to put a rule in it. And then of course, it needs to be associated with either a subnet or a network interface, so it's actually effective. [Video description begins] He enters the following command: az network nsg rule create -g Rg1 --nsg-name App3_Firewall_Rules -n Rule1 --priority 500 --source-address-prefixes 71.4.56.0/24 --destination-port-ranges 80 443 --destination-address-prefixes '*' --access Allow --protocol Tcp --description "allow inbound HTTP and HTTPS traffic". [Video description ends]

Next, I'm going to create a rule within that network security group. And to do that, I will use the az network nsg rule create syntax. I'll have to specify the resource group where that network security group was deployed. That would be Rg1. And I'll have to use the --nsg-name parameter and give it the name of our newly created security group – that's called App3_Firewall_Rules. Then I have to give a name for the current rule with -n. We're going to call the current rule Rule1.

I'm going to give it a priority value of 500 with --priority. Remember, the priority determines the ordering of the rules. So a rule with a priority of 400 would be checked before our rule, which has a priority of 500. And if there's a match with the rule, that rule applies and no further rules are processed after the matching rule. So it's important to think very carefully about the relative priority value.

Then I'm going to use the --source-address-prefixes parameter. And in here, I'm going to specify an IP address range in CIDR format, which would reflect, for example, a network from which I want to allow access to an application. Then I'm going to use the --destination-port ranges parameter. And I'm going to specify that I want to allow the destination ports, so traffic going to port 80 or to port 443. So a web application would use HTTP port 80 and HTTPS for a secured connection through port 443.

The destination address prefixes, perhaps if I've got a number of application servers, I could set to an asterisk; so in other words, any destination address prefix. And I'm going to use --access to specify Allow. Because remember, a rule within a network security group could also be set to Deny; --protocol is Tcp; and --description, in this case, I'll just put in whatever I think makes sense to describe this rule. And I'm going to go ahead and press Enter to create it within that network security group.

And after a moment, we can see that the provisioning succeeded for this rule. We can check our work here in the portal. [Video description begins] The "All resources" blade is open. It includes a table with the following columns: Name, Type, Resource group, etc.. Several record links, including App3_Firewall_Rules, are listed in the table. [Video description ends]

So if I open up the App3_Firewall_Rules network security group and if we go to Inbound security rules, well, we could probably see without doing that anyway, but there it is – rule 500, Rule1, and ports 80 and 443. And we can see all the details are filled in in accordance with what we specified at the command line.
Now the next thing I'm going to do is simply list rules within that network security group. So az network nsg rule list. So the network security group is in a resource group called Rg1; --nsg-name. It's called App3_ Firewall_ Rules. [Video description begins] He types the following command: az network nsg rule list -g Rg1 --nsg-name App3_Firewall_Rules. [Video description ends] Let's go ahead and press Enter. And we can see the rules that are available within that. In this case, we can see our description for our rule. We can see our destinationAddressPrefix, which is an asterisk. And if we scroll down further, we'll also see the priority and the name of the rule, Tcp. We can see the sourceAddressPrefix and so on.


NSGs and PowerShell
In this demonstration, I'm going to use PowerShell to build a network security group. And within that I'm going to define a rule so that we can control traffic flow. Specifically, I'm going to build a rule that will allow RDP traffic to Windows Host Remote Desktop Protocol. So I've launched Cloud Shell here in the portal. [Video description begins] The Microsoft Azure PowerShell application is open. [Video description ends] The first thing I'm going to do, I don't have to do it this way, but sometimes, when you're working with longer commands, and parameters and values in PowerShell, it's easier to store things in variables.

So the first thing I'm going to do here is build a variable called $rdp_allow_rule, that's the name of my variable. [Video description begins] He enters the following command: $rdp_allow_rule= [Video description ends] And what I want to store in that variable, so after the equal sign, I've got New-AzNetworkSecurityRuleConfig -Name. I want to call my rule allow-inbound-rdp -SourcePortRange. [Video description begins] He highlights the following rule: "allow-inbound-rdp" [Video description ends] It's an asterisk, so any port. -Protocol will be TCP -SourceAddressPrefix, I'm going to use the reserved keyword of internet. I want to allow inbound-RDP traffic to VMs running in Azure sourced from the Internet. -Access is either allow or deny here. I want to allow the traffic -Priority. I'm going to give this rule of priority value of 110, bearing in mind that the priority value's used to determine the order in which rules within the NSG are processed.

So rule 110 is checked before rule 111. The direction here with -Direction, I will specify as inbound. I don't want an outbound rule in this case, just inbound RDP traffic. -DestinationPortRange because we're talking about Remote Desktop Protocol RDP, the port number there will be 3389. And the -DestinationAddressPrefix,

I'm going to use a wildcard symbol in the form of an asterisk. So any destination address. So I'm going to press enter to create that variable, that's all we have done is to create a variable. Nothing has been done with the network security group, or anything like that. So in order to build a network security group, we have to use the New-AZNetworkSecurityGroup PowerShell cmdlet. I'm going to use -Name and I'm going to call this windows-common-NSG. Then, I can add one or more security rules. We've only got one variable, so -SecurityRules. The value of that parameter will be our variable up above, $rdp_allow_rule.

Now, I have to build this network security group and deploy it into a resource group so -ResourceGroupName is Rg1. I have to specify a location so -Location in this example will be Canada East. Let's go ahead and press enter to create that network security group along with the rule within it. Next thing I'll do is run get-aznetworksecuritygroup. And maybe, we'll pipe that to select and tell it we only want to see the names of the security groups. [Video description begins] Several Security Group names display, including WindowsNSGEast, App3_Firewall_Rules and windows-common-NSG [Video description ends] Here's the one we've just created windows_, or rather windows-common-NSG. I'm going to minimize Cloud Shell and I'm just going to refresh my All Resources view in the background, which is filtered currently for only network security groups.
And just give it a moment to update. After a moment of waiting and clicking Refresh, I now see our windows-common-NSG, network security group. Let's click on it and go to the inbound rules just to check out our work. There's rule 110 to allow inbound RDP that we specified on the PowerShell command line.


Security Rule Troubleshooting
When you work with network security groups, they consist of rules that can be applied to subnets or network interfaces to control traffic flow. And so it can be tricky in a larger environment to trace exactly why we might have a problem making a connection to a given virtual machine workload. And that's where effective security rules comes in for security rule troubleshooting.

Here in the portal, I'm looking at my existing virtual machines, one of which is a Windows one called WinSrv2019-1. [Video description begins] The "Virtual machines" blade is open. It includes a table with the following columns: Name, Type, Status, etc.. Two virtual machine links, including WinSrv2019-1, appear in the table. [Video description ends] 

Notice, though, the state is that it's currently stopped. I leave it that way for now. Let's click on that virtual machine to open it up. [Video description begins] The WinSrv2019-1 blade includes an Overview category, which is currently selected, and a "Settings" section in the resource menu. The "Settings" section includes a "Networking" category. [Video description ends]

What I want to do is go to the Networking blade. Because in the Networking blade, aside from things like the network interfaces, we'll also see any relationship to inbound and outbound port rules. We can see down below the priority numbers. [Video description begins] The WinSrv2019-1 | Networking blade includes an "Effective security rules" link and the following options: Inbound port rules, Outbound port rules, Application security groups, etc. Currently, Inbound port rules is selected and includes a table with the following columns: Priority, Name, Port, etc. Four rules appear in the table. [Video description ends]

So they're ordered by priority. And of course, when there's a match on a rule, it doesn't process any further rules with a lower priority. Now lower priority here means a higher numeric value. But notice, we've got effective security rules because rules can be applied at the subnet level and the network interface level. So let's go to Effective security rules. Now because the virtual machine isn't running, it says it couldn't retrieve them. Not a problem.

Let's start that virtual machine. So we're going to go back here in the breadcrumb trail at the top so that I can pull up the Overview blade of that VM just so I can start it up. [Video description begins] The presenter clicks the WinSrv2019-1 | Networking link in the breadcrumb and selects the "Overview" category in the resource menu of the corresponding blade. [Video description ends]

So I'm going to go ahead and click the Start button and just wait a moment as that happens. Okay, so now that our virtual machine has been started, we can go back to the Networking blade. [Video description begins] He selects the notifications control that displays at the top of the portal. The menu that opens includes a "Started virtual machine" link. [Video description ends]

Let's check out the effective security rules. Now this time when we click Effective security rules, there won't be a message about it not being running. Obviously, the virtual machine is running. [Video description begins] The winsrv2019-1439 | Effective security rules blade includes the following headings: Scope and Associated NSGs. Network interface (winsrv2019-1439) and an NSG-Windows (Subnet) link display against these controls, respectively. [Video description ends]

So if we take a look here, we can see a reference to the network interface used by this virtual machine and also the associated network security group, which in this case comes from the subnet. But if you think about it, you could have a network security group associated to the subnet and also the network interface. And you could have rules that then conflict with one another or at the least make it difficult to determine which one is effective.

What we're going to do is explore the network interface here. We know that we've got a network security group associated with the subnet. We're going to associate one with the network interface and come back here. So I've gone back to my home page here in the portal where I'm going to create a resource. It's going to be another network security group that we're going to associate with a particular interface, so we can see how that works; so Network security group. And then I'll click on Create. And we'll be on our way.

[Video description begins] He shifts to Azure Home, which includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual machines, All resources, etc.. He selects the "Create a resource" option, and a "New" blade opens. It includes a Search box. He types network security in the Search box and selects Network security group from the options that display. A "Network security group" blade that opens includes a "Create" button. When he clicks the button, the corresponding blade that opens has the following steps in the navigation pane: Basics, Tags, and Review + create. Currently, Basics is selected. It contains two sections: Project details and Instance details. The "Project details" section contains a "Subscription" drop-down list, which is set to Pay-As-You-Go, and an associated "Resource group" drop-down list. The "Instance details" section contains a "Name field and a "Region" drop-down list, which is set to (Canada) Canada Central. [Video description ends]

I will select the resource group association. And I'm going to call this NSG, let's say, winInt, for Windows interface. [Video description begins] He selects Rg1 from the "Resource group" drop-down list and types NSG-WinInt in the Name field. [Video description ends] And it's going to be in Canada Central.

So I'm going to review and create that. Of course, we'll have to create at least a rule in it. So let's create that network security group. Once that's done, I'm going to click Go to resource and we can add our rule. [Video description begins] He clicks the "Review + create" button, and the "Review + create" step, which is selected, includes a "Create" button. When he clicks the button, the corresponding blade that opens includes a "Go to resource" button. And when he clicks the button, the NSG-WinInt blade that opens includes an "Overview" category and a "Settings" section in the resource pane. The "Settings" section includes an "Inbound security rules" category. [Video description ends]

So I'm going to go to Inbound security rules. We know that there are default rules. That's fine. I'm just going to click the Add button, so we can add another one. And we'll make it different so that we can easily identify it when we look at the effective security rules.

[Video description begins] The NSG-WinInt | Inbound security rules blade includes an "Add" button, a "Refresh" button, and a table with the following columns: Priority, Name, Port, etc.. Three rules appear in the table. When he clicks the "Add" button, an "Add inbound security rule" pane appears. It includes a "Destination port ranges" field, a "Protocol" section, a "Priority" field, a "Name" field, and an "Add" button. The "Protocol" section contains four options: Any, TCP, UDP, and ICMP. Currently, Any is selected. [Video description ends]

So for example, let's say this is going to be for TCP port 389 and that would be an LDAP type of thing. So 389 up here for the port. The priority, let's say, is going to be 120. I'm just going to scroll down. And we'll call this, let's say, LDAP. Okay, so we've got an LDAP rule, priority of 120. And it's for port 389. [Video description begins] He selects the "TCP" option in the "Protocol" section and types 389, 120, and LDAP in the "Destination port ranges" field, the "Priority" field, and the "Name" field, respectively. [Video description ends]

Let's click Add. That's an Allowed rule. And we'll make sure it just shows up as it normally should directly here in the network security group. So I'll just click Refresh. There it is. There's our LDAP rule. All good. [Video description begins] The LDAP rule now appears in the table in the NSG-WinInt | Inbound security rules blade. [Video description ends]

Let's go back to the virtual machine and let's check out the effective security rules again. Now we got to make sure, of course, actually before we do that that we associate that with a network interface. Let's go to the All resources view first and make sure you filter it not for all but, let's say, just network interfaces.
We know we've got a Windows network interface here used by the Windows VM. Let's just go to Network security group here. Let's set that association. So I'll just go ahead and click Edit. Select from the list and there it is, NSG-WinInt, the Windows interface. Save that change. And once that's done, then we'll go to the virtual machine and check the effective security rules again.
Okay, so it's done. This time, we'll be able to see it – so Virtual machines. [Video description begins] He returns to Azure Home. [Video description ends] We're going to open up the same Windows virtual machine. We're going to do precisely what we did the first time. We're going to click on Networking to open the networking blade. And then we're going to be interested in looking at the effective security rules.
So let me go ahead and click Effective security rules. [Video description begins] The winsrv2019-1439 | Effective security rules blade now also displays the following link against the Associated NSGs heading: NSG-WinInt (Network interface). It also includes two tabs: NSG-WinInt and NSG-Windows. The NSG-WinInt tab is selected and includes an "Inbound rules" section. The section has a table with the following columns: Name, Priority, Source, etc.. Four rules, including LDAP, appear in the table. [Video description ends]
This time if you look at the Associated NSGs,  we used to only have NSG-Windows, which is associated at the subnet level. Now we've got a network interface association. And look at the list down below. It now includes our LDAP rule. Now that's from the NSG-WinInt. If we go to NSG-Windows, we'll see the rules available through it. Now this is going to be an important tool to use if you're troubleshooting connectivity to a virtual machine.
But always bear in mind, beyond network security rules, it could also be another type of problem that's preventing you to connect such as if you're trying to RDP into an Azure Windows VM. It could also be a routing table configuration error that doesn't allow traffic back out to the Internet, as an example.


VPN Overview
There are a few options for configuring VPN connectivity to the Azure cloud. So a VPN allows for an encrypted point-to-point network tunnel. So any traffic sent through that tunnel is encrypted, such as from an on-premises VPN appliance to a cloud-based appliance in Azure. We have point-to-site connectivity, or P2S. This is for individual remote users that might be working from home or that might be traveling that need an encrypted connection to Azure.

Then we've got site-to-site, or S2S, connections or site-to-site VPN. It's kind of what we describe where an entire on-premises network makes a connection over the Internet, for example, to the Azure cloud through an encrypted VPN tunnel. And so that would require an on-premises VPN appliance.

And we can also even have a VPN connection over a private dedicated ExpressRoute circuit. Site-to-site VPNs in Azure require a local network gateway. This is an Azure resource that you define that represents the on-premises VPN appliance. So you have to know something about it, such as its public IP address. We then can have an encrypted IPsec VPN tunnel to the Azure cloud.

But you also need to configure a resource that represents the Azure VPN side of things. And that's called an Azure virtual network gateway. With a point-to-site configuration, you are allowing individual clients to have an encrypted VPN connection over the Internet, for example, to Azure. So that means that each client is using a VPN client configuration to make that connection. And that can be an encrypted SSTP or OpenVPN IPsec type of connection. And you still need the Azure virtual network gateway in this case on the Azure side. You just don't need a client VPN appliance since it's for individual client devices.

With a point-to-site VPN, you don't need an on-premises VPN public IP address. You can also have the client device authenticate to the Azure VPN gateway using a PKI certificate. So you'd have to generate a certificate to be used by the device if you don't have one for it already. You can also use centralized RADIUS server authentication. And when you configure a point-to-site VPN, you can also specify a VPN client IP address pool that will be used by connecting clients.

The PKI certificate is a digital security certificate. It gets issued by a certificate authority and it has an expiration date. So we need to think then carefully about our PKI certificate configuration. Because it needs to be uploaded to Azure. We have to upload the root certificate public key. So then client certificates would be able to authenticate to the VPN using their configured client certificate.

You can generate a self-signed root certificate in many different ways, including using PowerShell. In this example, we're creating a variable called $cert for certificate. And we're using the New-SelfSignedCertificate cmdlet to create a self-signed root certificate. Now you don't have to do this. You can acquire a client certificate from a publicly trusted certificate authority. But if you want to do your own thing, you can do this as well.

Notice that with the -Subject parameter, we're setting the common name in this example to FakeRootCert. And we're telling it where we want to store it here with the -CertStoreLocation parameter. In PowerShell, the certificate store in Windows is available as a drive letter, so in other words, Cert:. [Video description begins] The following code displays: $cert = New-SelfSignedCertificate -Type Custom -keySpec Signature -Subject "CN=FakeRootCert" -KeyExportPolicy Exportable -HashAlgorithm sha256 -KeyLength 2048 -CertStoreLocation "Cert:\CurrentUser\My" -KeyUsageProperty Sign -KeyUsage CertSign. [Video description ends]

Now the next thing we're going to look at is what you might do to generate a client certificate, particularly from our previous example where we have a self-signed root certificate. So we're using the New-SelfSignedCertificate PowerShell cmdlet again. But a couple of things are different. We're setting in a DNS name; so calling this VPNClient1. And the subject parameter has a common name here of P2SChildCert – could be anything – P2S meaning point-to-site.

And as we go further down, at the end, notice that the signer of this certificate with the -signer parameter, notice that the signer of this client certificate is our $cert variable from our previous example. [Video description begins] The following code displays: New-SelfSignedCertificate -Type Custom -DnsName VPNClient1 -KeySpec Signature -Subject "CN=P2SChildCert" -KeyExportPolicy Exportable -HashAlgorithm sha256 -KeyLength 2048 -CertStoreLocation "Cert:\CurrentUser\My" -Signer $cert. [Video description ends]


Point-to-Site VPN Configuration
In this demonstration, I'll be using PowerShell to begin to create a self-signed root certificate and then a client PKI certificate that will be used to configure a Point-to-Site VPN. So to get started, I'm going to create a variable called $cert, which will store the result of running New-SelfSignedCertificate.
There's a bunch of parameters here, but notably, we have to pay attention to the -Subject parameter because it establishes the common name of the actual root certificate. Here I'm just calling it RootCert. It's going to use a sha256 hashing algorithm. That's going to be used to digitally sign client certificates issued from this. The key length is 2,048 bits. And with -CertStoreLocation, we're specifying where in the certificate store on the local Windows machine this root certificate will be stored.

In PowerShell, the certificate store is accessible as a drive. So instead of a drive letter, it's Cert:. It's going to go under CurrentUser\My. And the key can be used for signing, including certificate signing. So I'm going to go ahead and press Enter to generate that. And we're going to check our work. So let's change directory to the cert drive. [Video description begins] The presenter types the command: cd cert:. [Video description ends]

We're currently in currentuser\my. If I type dir, here I can see the RootCert that we've just created. That's what we specified as the common name up above. Now let's generate a PKI client certificate from the RootCert. So to do that, I'm going to use the same PowerShell cmdlet again, except what's going to be different is that we're going to sign it using our newly generated root certificate.

[Video description begins] He pastes some code comprising five lines. The following is the code per line: Line 1: New-SelfSignedCertificate -Type Custom -DnsName ClientCert -KeySpec Signature `, line 2: -Subject "CN=ClientCert" -KeyExportPolicy Exportable `, line 3: -HashAlgorithm sha256 -KeyLength 2048 `, line 4: -CertStoreLocation "Cert:\CurrentUser\My" `, and line 5: -Signer $cert. [Video description ends]

So I'm using New-SelfSignedCertificate. It's a custom type of certificate. I'm setting a DNS name here to ClientCert. And I'm using -Subject to specify that the common name of this certificate will simply be ClientCert. We can see the hashing algorithm, the key length, the certificate store location. So it's going to be in the same place that the RootCert is currently stored in.

And what's different here is I'm using -Signer and I'm passing it my variable, $cert, which contains the information for the root certificate. So let's go ahead and press Enter. And let's just do a dir here. We're still on the Cert drive in PowerShell, and we're under currentuser\my. So we can see not only the RootCert that was established previously but also the client certificate.

We can also view this on this machine in the Microsoft Management Console, or MMC, by adding the certificate snap-in. [Video description begins] He opens a "Console1 - [Console Root]" application. It includes a menu bar, and an empty "Console Root" folder displays in the navigation pane. [Video description ends] So from my Start menu, I launched MMC. I'm going to maximize it. I'm just going to go to the File menu, Add/Remove Snap-in..., Certificates, Add. It's for the current user. And I'll click OK.

[Video description begins] When he selects the "Add/Remove Snap-in..." command from the File menu, an "Add or Remove Snap-in" dialog box appears. It includes an "Available snap-ins:" section and a "Selected snap-ins:" section with an "Add" button displaying between the two. The "Available snap-ins:" section has a table with the following columns: Snap-in and Vendor. Several snap-ins, including Certificates, appear in the table. The "Selected snap-ins:" section displays a selected "Console Root" folder. And when he selects the "Certificates" snap-in and clicks the "Add" button, a "Certificates snap-in" dialog box appears. It includes a "My user account" option, a "Service account" option, a "Computer account" option, and a "Finish" button. The "My user account" option is selected. He clicks the "Finish" button and then clicks the "OK" button in the "Add or Remove Snap-ins" dialog box. A "Certificates - Current User" node now displays in the "Console Root" folder in the "Console1 - [Console Root]" application. [Video description ends]

And if I drill down under Personal, Certificates, we're going to see that we've got the client certificate and the root certificate. Of course, both are issued by the root certificate that we generated in PowerShell. [Video description begins] He expands the "Certificates - Current User" node to reveal, among others, a "Personal" node. He expands the node to reveal a "Certificates" folder, which he selects. The folder contains a table with the following columns: Issued To, Issued By, Expiration Date, etc. A few certificates appear in the table. These include ClientCert with Issued By listed as RootCert and RootCert with Issued By listed as RootCert. [Video description ends]

Now here in the portal, I'm going to go to the All resources view where I'm going to filter it for virtual network gateways. I've already got one created. A virtual network gateway represents the VPN side in Azure. So I'm going to choose Virtual network gateway. If you don't have one, you need to create it. But it might take a few minutes for it to be created initially. So here it is, it's called AzureVPN1. We need this because when you open up the properties of it, you need to click

[Video description begins] He shifts to Azure Home, which includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual networks, All resources, etc.. When he selects the "All resources" option, the corresponding blade that opens includes a "Type == all" filter option and a table with the following columns: Name, Type, Resource group, etc.. Several record links appear in the table. He selects the "Type == all" option, and the corresponding drop-down list expands to reveal several checkboxes, including a selected "Select all" checkbox. He deselects the "Select all" checkbox and selects the "Virtual network gateway" checkbox. The application now displays a single record link, AzureVPN1, in the table. [Video description ends]

Point-to-site configuration to configure a point-to-site VPN configuration. [Video description begins] The AzureVPN1 blade includes a selected "Overview" category and a "Settings" section in the resource menu. The "Settings" section includes a "Point-to-site configuration" category, which he selects. [Video description ends]

So we can see it says, Point-to-site is not configured. So I'm going to go ahead and click the Configure now link. [Video description begins] The "Azure VPN1 | Point-to-site configuration" blade includes a "Save" button; a "Download VPN client" button; an "Address pool" field; a "Tunnel type" drop-down list, which is set to OpenVPN (SSL); and a "Root certificates" section, which contains a table with the following columns: Name and Public certificate data. A single certificate, RootCert, appears in the table. [Video description ends]

Now at this point, I'm going to specify an IP address pool for the addresses I want assigned to VPN clients. And I need to make sure it doesn't overlap with my VNet range. I'm going to select this as an IKEv2 and SSTP type of connection. [Video description begins] He selects the "IKEv2 and SSTP (SSL)" option from the "Tunnel type" drop-down list. [Video description ends]

I've already typed in the name of the root certificate here. I've called it RootCert, and I've pasted in the public certificate data. Now how do you get that public certificate data? Well, back here in MMC, remember how we could see the client and the root certificate. Well, we need the root certificate's public key.
So I'm going to go ahead and right-click on the root certificate, choose All Tasks, Export..., Next. [Video description begins] When he points to All Tasks in the RootCert context menu and clicks Export, a Certificate Export Wizard appears. It includes a "Next" button, which he clicks. The wizard now displays two options: Yes, export the private key and No, do not export the private key. The second option is selected. [Video description ends]
I don't want to export the private key, but the public key is implied. So I'll click Next. I'm going to use Base-64 encoded as the file format. I'll click Next. And then I need to save this to a file. [Video description begins] The wizard includes the following options: DER encoded binary X.509 (.CER) and Base-64 encoded X.509 (.CER). The first option is selected. And when he selects the second option and clicks the "Next" button, the wizard displays a "File name:" field, which has an associated "Browse" button. [Video description ends] Public key files look something like this. [Video description begins] The contents of RootCert.cer display in the Notepad. These include some data that displays between a "BEGIN CERTIFICATE" text and an "END CERTIFICATE" text. [Video description ends]
What I want to do is copy everything between BEGIN CERTIFICATE and END CERTIFICATE. And that's what you would use to paste into our point-to-site configuration in the portal. So that's what was done here. So I'm going to go ahead and save this configuration. Once that's done, I can go ahead and download the VPN client. [Video description begins] He returns to the "Azure VPN1 | Point-to-site configuration" blade and points to the data that displays in the "Public certificate data" column of the table in the "Root certificates" section. Next, he points to the "Download VPN client" button. [Video description ends]
This is a zip file that I can extract and install locally on my Windows computer to make the VPN connection to Azure. Now once I've extracted it, I'll have a couple of subdirectories. [Video description begins] An AzureGW (2) folder displays in the Downloads folder of Windows Explorer. It includes a WindowsAmd64 folder. [Video description ends]
I'm interested in WindowsAmd64 for 64 bit. And notice, I've got a VPN client setup executable. [Video description begins] He double-clicks the WindowsAmd64 folder. [Video description ends] So I'm going to go ahead and right-click on that and run that install as administrator. I'm then asked if I want to install a VPN client configuration for VNet1. So I'm going to to choose Yes.
So on my machine now where I've run that, if I go to my Control Panel and then go into Network & Internet – so I'm looking at my Windows settings – then we'll be able to check whether or not we've got the appropriate type of connection, which means that if I go to VPN, for example, we'll see we've got a connection here that's been added when we installed that, called VNet1.
And if I click on it, I can then choose to connect. [Video description begins] The "Network & Internet" setting includes a VPN category in the navigation pane. And when he selects the category, the corresponding view includes a VPN section. The section includes a VNet1 option. [Video description ends]
So in the dialog box for Azure Virtual Network, I will click the Connect button. And after a moment, we'll see that VNet1 is now showing up here as Connected. In other words, this Windows 10 client is now connected to the Azure VPN. [Video description begins] The VNet1 option now features the word: Connected. [Video description ends]


Site-to-Site VPN Configuration
You can use a site-to-site VPN to link an entire on-premises network to the Azure cloud. This way, you have an encrypted tunnel through which transmissions travel over the Internet to get to Azure. So it's protected. To do this, we need to create two primary objects here in Azure. We need a local network gateway, which represents your on-premises VPN configuration. And we also need a cloud equivalent called a virtual network gateway.
So I'm going to call this On-prem_Site1. And I'm going to put in an IP address. This would be a public-facing IP address for that device. So you have to know this information. I have to specify the IP address space or spaces that I want to allow connectivity through the VPN front. So for example, if we're using 192.168.0.0, let's say, /24, then I could specify that that is being used in the internal network on-premises. We could add multiple items. [Video description begins] When he types an address range in the "Address space" field, an additional field displays below the field. [Video description ends]

If your VPN appliance supports the Border Gateway Protocol for sharing the routing information, so BGP, you could also configure BGP settings such as the Autonomous system number, the BGP peer IP addressing, and so on. I'm going to turn that off. I'm going to deploy this configuration. This is the local network gateway. I'm going to deploy that into a resource group called Rg1. And in this case, I'm going to leave the location at Canada East. [Video description begins] He selects the Rg1 option from the "Resource group" drop-down list. [Video description ends]

And I'll choose Create. So all we're doing is creating a reference to what our on-premises VPN environment is. Now the next thing we need to do, and we can continue while that's being deployed, is we need to do the Azure side. We need to deploy a virtual network gateway configuration. [Video description begins] He returns to Azure Home and points to the notifications control that displays at the top of the portal. [Video description ends]

So in order to do that, I first need to think about the VNet in Azure that I want to allow VPN connectivity to. Because in that VNet, I need to create what's called a gateway subnet. Let's go to our Virtual networks view. And I've got a VNet here called Vnet1. So I want to allow VPN access to that. [Video description begins] He selects the "Virtual network" option, and the corresponding blade that opens includes a table with the following columns: Name, Resource group, Location, etc.. Four record links, including Vnet1, appear in the table. [Video description ends]

So when I click on Vnet1, I need to start by looking at its existing subnets to see if we already have a gateway subnet or not. Now I don't. [Video description begins] The Vnet1 blade includes an "Overview" category and a "Settings" section in the resource pane. The "Settings" section includes a "Subnets" category. Currently, Overview is selected. And when he selects the "Subnets" category, the corresponding blade that opens includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Two subnets appear in the table. [Video description ends]

I just have two standard subnets, Subnet1 and Subnet2. I know I don't have a gateway subnet because it literally needs to be called gateway subnet. And we have a button up at the top here to add one. So I'm going to click the add Gateway subnet button. There's nothing else I'm going to configure here. [Video description begins] An "Add subnet" pane appears. It includes the drop-down lists: Network security group and Route table. Both the drop-down lists are set to None. [Video description ends]

I could associate this with a network security group if I were to control traffic flow or a route table object. But at this point, I'm going to go ahead and just click OK. So I'm creating a gateway subnet then, and notice it's literally called GatewaySubnet – no spaces – and it's part of Vnet1. [Video description begins] GatewaySubnet now appears in the table in the Vnet1 | Subnets blade. [Video description ends]

So what have we've done? We've got the local network gateway for the on-prem VPN appliances. We've got the gateway subnet. We still have to define our virtual network gateway, the Azure VPN side of things. [Video description begins] He returns to Azure Home. [Video description ends] So I'm going to click Create a resource. And I'm going to type virtual network. And here it is – Virtual network gateway.

I'm going to click Create. [Video description begins] The "Create virtual network gateway" blade has three steps: Basics, Tags, and Review + create. Currently, Basics is selected. It includes an "Instance details" section and a "Public IP address" section. The "Instance details" section includes a "Name" field; a "Region" drop-down list; a "Gateway type" heading; a VPN type heading; an "SKU" drop-down list, which is set to VpnGw1; and a "Virtual network" drop-down list. The "Gateway type" heading has two options: VPN, which is selected, and ExpressRoute. The VPN type heading has two options: Route-based, which is selected, and Policy-based. The "Public IP address" section includes a "Public IP address" heading, a "Public IP address name" field, an "Enable active-active mode" heading, and a "Configure BGP ASN" heading. The "Public IP address has two options: Create new, which is selected, and Use existing. The "Enable active-active mode" heading has two options: Enabled and Disabled, which is selected. The "Configure BGP ASN" heading has two options: Enabled and Disabled, which is selected. [Video description ends]

So I'm going to call this AzureVPN1. [Video description begins] He types AzureVPN1 in the "Name" field. [Video description ends] And I'm going to specify this. It doesn't have to be in the same region, but I'm going to specify, well actually, let's leave it where it is – Canada Central. Let's say, that's where we want to deploy that. This is going to be a VPN type of gateway. It's not going to be used for an ExpressRoute-dedicated connection. And that's why sometimes people will call this object we're configuring not a virtual network gateway but an Azure VPN gateway. So that's really what they're referring to when they say that.
The next item is the VPN type, whether it's Route-based or Policy-based. Notice, the default here is Route-based. So with the route-based VPN type, what we're talking about is the fact that most routers that aren't specifically dedicated VPN appliances would use this type of configuration. And that's because the router can actually be configured with what are called multiple virtual tunnel interfaces. And this is used for VPN connections. And so you can make multiple VPN tunnel interfaces or virtual tunnel interfaces on the router, which allows connectivity to multiple sites.
Then you've got Policy-based. Now this is what was traditionally used with Cisco ASA appliances, which were used for VPN connectivity, among other things. And what it allows is the connectivity for one VPN link to an Azure subnet. So in this case, I'm going to use the more common and default setting of Route-based.
Next, you can choose from the SKU drop-down list. Now as you go up through the list, you start increasing things like the supported bandwidth and also the number of supported Point-to-Site connections and so on. [Video description begins] He shifts to the VPN Gateway Documentation web page. It has an "Overview" category in the navigation pane. The category has an "About VPN Gateway" subcategory, which is selected and which includes a table with the following columns: SKU, P2P IKEv2/OpenVPN Connections, Aggregate Throughput Benchmark, BGP, etc.. Several SKUs appear in the table. [Video description ends]
Here in the Microsoft documentation, we can see the VPN gateway SKUs such as VpnGw1. And we can see here that we start to see changes in the number of Point-to-Site supported connections and the supported throughput and so on and whether Border Gateway Protocol for route sharing, BGP, is supported or not. Next, I have to tie this virtual network gateway or VPN gateway to an Azure VNet.
So I can go through in the drop-down list and I'll select Vnet1. [Video description begins] When he selects the Vnet1 option from the "Virtual network" drop-down list, a "Subnet" drop-down list, which is unavailable and which is set to the GatewaySubnet option, displays below the "Virtual network" drop-down list. [Video description ends]
It knows it's got a gateway subnet. That's why we did that first ahead of time. So that's good. Next thing I have to do is determine whether I want to use an existing or create a new public IP address resource. I'm going to create a new one here. And I'm going to call it AzureVPNSite1_PubIP. We need a public IP address, so it's reachable over the Internet. [Video description begins] He types AzureVPNSite1_PubIP in the "Public IP address name" field. [Video description ends]
For high availability, you can enable active-active mode. And when you do that, down below, you'll be creating a secondary public IP address for connectivity. For true high availability, your on-premises VPN appliance should have two interfaces for this high availability. And each one of those should go through a different Internet service provider for true availability of the network connection in case there's a problem with one provider.
However, I'm not going to do that. So I'm going to disable active-active mode. I'm also going to leave the default of Disabled for configuring Border Gateway Protocol autonomous system numbers. I'm going to click review and create. And this can take a bit of time to create in Azure. So the validation is passed. [Video description begins] He points to the message that the application displays. [Video description ends]
I'm going to go ahead and click the Create button. After a few minutes, the virtual network gateway will be deployed. So then we can click Go to resource because we need to now add the site-to-site connection. [Video description begins] The AzureVPN1 blade that opens includes an Overview category, which is selected, and a "Settings" section in the resource pane. The "Settings" section includes a "Connections" category. [Video description ends]
So to do that, in the properties bar that's opened up, I'm going to click to open the Connections blade. [Video description begins] The AzureVPN1 | Connections blade includes an "Add" button, a "Refresh" button, and an empty table with the following columns: Name, Status, Connection type, etc.. [Video description ends]
We don't have anything listed. So I'm going to click the Add button. Because I want to add a site-to-site link basically linking the local network gateway on-premises to the Azure network gateway in the cloud. [Video description begins] An "Add connection" blade opens. It includes a "Name" field; a "Connection type" drop-down list, which is set to VNet-to-VNet; a "Virtual network gateway" heading (given as AzureVPN1); a "Local network gateway" heading; and a "Shared key (PSK)" field. [Video description ends]
So I'm going to call this Site1VPN. And from the Connection type, it's going to be Site-to-site (IPsec). The Azure virtual network gateway is already selected. So I have to select the local network gateway, which we created previously. It's called On-prem_Site1. [Video description begins] When he clicks the "Local network gateway" heading, a "Choose local network gateway" blade opens. It includes an On-prem_Site1 option. [Video description ends]
So we're going to go ahead and select that. And I'm going to specify a pre-shared key value that would have to be configured on the client-side device to establish the link. And at this point, I'm going to click OK to create site-to-site connection. [Video description begins] The application returns to the AzureVPN1 | Connections blade. [Video description ends] And after a second, we can see our Site1VPN connection has been added. Now the Status is Unknown because it was just created. And we can keep clicking Refresh until such point that it makes a connection to the on-premises VPN appliance.


Azure Virtual WAN
Azure Virtual WAN is a wide-area network solution as the name implies. Now it's a wide-area network solution in the sense that we can interconnect different sites, for example, or VNETs using the Microsoft backbone, which serves as the wide-area network infrastructure. So we can have VPN links, site-to-site links, or point-to-site links to Azure. We can also have connections over dedicated private circuits through ExpressRoute.
Either way, we've got connectivity coming from different locations into the Azure cloud. It could even be within the Azure cloud between VNETs. So it's kind of a hub and spoke type of topology where the hub would be the Azure cloud and its locations around the world where there is network connectivity.
And the spokes are the different types of connection points that we'll discuss further. Spoke types include virtual networks, or VNets, in Azure; Point-to-site VPN connections for individual clients making a connection into Azure; site-to-site VPNs where we've got entire networks that are linked into Azure; and ExpressRoute dedicated circuits.
When you configure Virtual WAN, there were two types. There's Standard and there's Basic. The Standard type supports a number of different types of spokes like point-to-site, or P2S, VPNs; site-to-site, or S2S, VPNs; ExpressRoute; and also even interconnectivity between multiple Virtual WAN hubs. And VNets, of course, can also be connected as part of the Virtual WAN. Now the Basic only supports site-to-site VPN connectivity. Now if you've got Basic configured, then you can upgrade it to Standard. But you can't do the opposite. You can't revert from Standard and go all the way back down to Basic.
Now pictured in our diagram, we see a sample Azure Virtual WAN configuration where we've got two Azure VNets at the top and we've got two branch offices down at the bottom. And those branch offices would be using site-to-site VPN links to Azure. Well, the Azure Virtual WAN hub serves as a central connectivity point to interlink all of these devices.
And again, we can even link multiple Azure Virtual WAN hubs together for even further connectivity. Remember, this is like a wide-area network infrastructure that sits on top of Microsoft's network backbone. So how do I go about configuring this? Well, the first thing to do is to create a Virtual WAN resource in Azure, after which you add a virtual hub to it. Then you add a VPN gateway. And then you start linking your various spokes, whether they're VNets or VPN connections to the centralized hub.


Azure Firewall Overview
Azure Firewall is a managed service. And what that means in the cloud, of course, is that we don't have to set up the underlying infrastructure to support the solution. It's already taken care of for us by the cloud service provider. So Azure Firewall is a managed service, and it's also a stateful firewall. A stateful firewall means that it understands more than just looking at individual packets. It understands sessions such as if we have an inbound allowance to a web server, then the stateful firewall will know, well, I need to make sure I allow the outbound-related traffic out through that firewall.

So you might say, well, a network security group in Azure or NSG is a managed service and it's also a stateful firewall just like Azure Firewall is. So what is the difference? Well, there is a difference. Azure Firewall applies up to Layer 7 of the OSI model, up to the application layer. So beyond IP addresses and port numbers, which is important and which is supported by network security groups, Azure Firewall takes it further and can look at the payload of the transmission, meaning it can look at URLs that people, for example, are trying to connect to.

And so we can build application rules in that example to address that. Azure Firewall, when it's configured, needs a static or unchanging public IP address. And just like the rules in a network security group, the rules in Azure Firewall control traffic flow, either allowing or denying it. You can also configure threat intelligence in conjunction with Azure Firewall. And what it can do is it can look to see if there are any known malicious IP addresses or DNS domains that are involved with transmissions and it can alert on that and even block it.

There are three types of firewall rules with Azure Firewall that you can configure – network rules, which we'll talk about here; application rules; and Network Address Translation, or NAT, rules. We'll talk about each of those three types. Let's start with network rules. So network rules apply up to Layer 4 of the OSI model. So you can deal with TCP, UDP, ICMP, or any of those protocols. You can make decisions on what's allowed or not based on source and destination IP addresses or destination port number. And you can have an Allow or a Deny action. Those are network rules.

Application rules go higher in the OSI model, up to Layer 7, the application layer. It's for outbound connectivity when users are connecting to Fully Qualified Domain Names, FQDNs, such as www.skillsoft.com. So you can use wildcards if you want when you configure application rules. So you could use asterisks as wildcard symbols and specify parts of domain names, such as *.domain.com. [Video description begins] The following information is displayed on screen: Wildcards are allowed, such as *.domain.com or *. [Video description ends]

You can also specify the protocol that would be used, whether it's HTTPS:443 or something different. And of course, you can either allow or deny that type of connection. [Video description begins] The following information is displayed on screen: Protocol:port, such as HTTPS:443. [Video description ends] For example, you might want to deny access to social media sites like Facebook and Twitter. So you can do that with application rules.

Then we have NAT rules of which there are two types. The first is Source Network Address Translation, or SNAT. This means that traffic leaving your virtual network subnets in Azure assume the public IP address of the Azure Firewall. And that's why it needs to have a public IP address.

But then you've got, kind of, the opposite for traffic coming in. You've got Destination Network Address Translation rules, or DNAT rules. So you can use DNAT to translate public IP address and port numbers to private IP addresses and port numbers.Now what does that mean exactly? We'll talk about that in a moment when we have another screenshot. Now when you deploy Azure Firewall into a VNet, you'll be doing that with a subnet called AzureFirewallSubnet.

But let's examine DNAT just a little bit further. So we're looking at a DNAT type of rule here. So we have a rule that's being added to the NAT collection. The name here is Incoming. It's got a priority value of 100. And so the priority value is used to order the rules. So a rule with a priority of 100 gets checked before a rule with the priority of 101. And if there is a match with the traffic for rule, the priority of 100, that's what applies and rule processing stops. So NAT rules, and that's what we're looking out here, these get applied based on the order of the priority value.

Then network rules would go through the same thing and then application rules. So what we have here is we have a rule called Incoming HTTP. So the protocol is TCP and the destination here is 40.80.251.142. That's the public IP address of the Azure Firewall. It's called Destination because that's the destination endpoint that, for example, users think that they're connecting to. Well, really they're connecting to a DNS name, but that name gets resolved to this public IP.

What will happen then is Azure Firewall will say, okay, someone is connecting to that IP – port 80 in this case. I'm going to forward that inside of Azure to a translated IP address of 10.1.1.1 on port 80. So it's a way that we could publish or make available a web application while hiding its true internal address.

[Video description begins] A screenshot of an application displays. It includes the following fields: Name (given as Incoming) and Priority (given as 100). The screenshot also includes a "Rules" section, which contains a table with the following columns: NAME, PROTOCOL, SOURCE ADDRESSES, DESTINATION ADDRESSES, DESTINATION PORTS, TRANSLATED ADDRESS, and TRANSLATED PORT. A couple of rules appear in the table. These include Incoming HTTP with PROTOCOL listed as TCP, SOURCE ADDRESSES listed as *, DESTINATION ADDRESSES listed as 40.80.251.142, DESTINATION PORTS listed as 80, TRANSLATED ADDRESS listed as 10.1.1.1, and TRANSLATED PORT listed as 80. [Video description ends]


Deploying Azure Firewall
In this demo, I'm going to use the portal to configure Azure Firewall. Now Azure Firewall is its own separate type of Azure resource. And so to get started with it here in the portal, I'm going to click Create a resource. And I'm going to search for Firewall. [Video description begins] Azure Home is open. It includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, All resources, Virtual networks, etc.. With the presenter clicking the "Create a resource" option, the "New" blade that opens includes a Search box. [Video description ends]

And we see Firewall in the list. So I'm going to click on that. Then I'll choose Create. [Video description begins] The "Firewall" blade that opens includes a "Create" button. [Video description ends] I'm going to deploy this into an existing resource group. [Video description begins] A "Create a firewall" blade opens. It includes a "Subscription" drop-down list that has an associated "Resource group" drop-down list. It also contains an "Instance details" section. The section includes a "Name" field; a "Region" drop-down list, which is set to (Canada) Canada Central; a "Choose a virtual network" heading; a "Virtual network name" field; an "Address space" field; and a "Subnet" heading. The "Choose a virtual network" heading has two options: Create new, which is selected, and Use existing. [Video description ends]

And I'm going to call this AzureFW1, Azure Firewall 1. [Video description begins] After selecting the Rg1 option from the "Resource group" drop-down list, he types AzureFW1 in the "Name" field. [Video description ends] I'll deploy it in the Canada Central region. And I have to specify a virtual network I want this applied to.

I'm going to use an existing one. [Video description begins] When he selects the "Use existing" option that displays against the "Choose a virtual network" heading, a "Virtual" network" drop-down list, a "Firewall public IP address" drop-down list, and a "Forced tunneling (preview)" heading replace the "Virtual network name" field, the "Address space" field, and the "Subnet" heading. [Video description ends]

From the list, I'll choose Vnet1. Now notice, it says this virtual network needs to have a subnet named [Video description begins] He selects the Vnet1 (Rg1) option from the "Virtual network" drop-down list. [Video description ends] AzureFirewallSubnet. We don't have that. So let's go back and let's build a subnet with that name in Vnet1. So to get started with that, I'm going to go ahead and right-click and duplicate our web browser tab up at the top. [Video description begins] Azure Home opens in the new web browser tab. [Video description ends]

So we're going to navigate to Virtual networks. [Video description begins] When he selects the "Virtual networks" option, the corresponding blade that opens includes a table with the following columns: Name, Resource group, location, etc.. Four record links, including Vnet1, appear in the table. [Video description ends]

And I'm going to be opening up Vnet1 where we can then see the subnets within that virtual network. [Video description begins] The Vnet1 blade includes an "Overview" category, which is selected, and a "Settings" section in the resource menu. The "Settings" section includes a "Subnets" category. He clicks the category, and the corresponding blade that opens includes a "Subnet" button and a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Three subnets appear in the table. [Video description ends] We can see we've got Subnet1, Subnet2. We have a GatewaySubnet, but we don't have an Azure Firewall subnet.

So I'm going to click add a Subnet. And I'm going to specify that it's going to be called AzureFirewallSubnet. [Video description begins] An "Add subnet" pane appears. It includes the following fields: Name and Address range (CIDR block) (given as 10.0.3.0/24). He types AzureFirewallSubnet in the "Name" field. [Video description ends] And I'm going to specify that it's 10.0.3.0/24 44-bit subnet mask. And that's it. That's all I need to do. So I'm going to go ahead and click OK. We'll just give it a moment to add that subnet. And we can now see that it exists in the list for Vnet1.

So let's go back to where we were creating the firewall. Let's just back out. We know we're not going to save our settings – they were wrong anyways. I'll click Create. [Video description begins] He returns to the first web browser tab and clicks the "Firewall" link in the breadcrumb navigation to return to the corresponding blade. [Video description ends]

And let's step through this again. So I'll just deploy this into the same resource group and basically do the same stuff I just did previously. The difference is this time we've got the correct subnet. So Rg1. We're going to call it AzureFW1, like I did previously with the firewall. It's going to be in Canada Central. And I'm going to use an existing VNet. Let's choose that from the list. This time we don't have the message about Azure Firewall subnet because we created it.

Next thing you have to do is specify a public IP address. Azure Firewall needs to have a static public IP. Now I don't have one that I can select that's not already in use. So I'm going to go ahead and click Add new to make a new one. And I'm going to call it AzureFW1PubIP. [Video description begins] When he clicks the "Add new" link associated with and which displays below the "Firewall public IP address" drop-down list, an "Add a public IP" dialog box appears. It includes a "Name" field and an "Assignment" heading. The heading has two options: Dynamic and Static. [Video description ends]

And I will choose OK. Notice, the assignment, of course, is going to be static. It needs to be static. Okay, so now we've got the public IP address for the firewall. Perfect. So I'm going to go ahead and click review and create in the bottom left. And after the validation has passed, I will then click Create to actually create the Azure Firewall resource. Before too long, we can see that the deployment is complete.

So I'm going to click Go to resource. Because what we want to do is take note of the private IP address. [Video description begins] The AzureFW1 blade that opens includes an "Overview" category in the resource pane. The category is selected and includes a "Firewall public IP" heading and a "Firewall private IP" heading. [Video description ends]

Now we know it's got a public IP, but we're interested in the private IP address of the firewall, which I'm going to copy. Because we need to make a routing table entry for the subnets where we want to route traffic through the firewall, for example, on the way out to the Internet. So I've just copied the private IP of it. [Video description begins] He clicks the "Copy to clipboard" icon associated with the Firewall private IP address. [Video description ends]

So what I want to do then is go back, let's see, into our virtual network list. [Video description begins] He returns to Azure Home and selects the "Virtual networks" option. [Video description ends] And I'm interested in Vnet1. And in particular, I'm interested in making sure that resources like virtual machines on Subnet1 – so let's go to Subnets – send their traffic out through that firewall. So Subnet1. It means we have to look at the route table entries related to Subnet1. So what is it configured with? Well, it's not configured with any routing table.

Okay, so what I want to do then is get a routing table created so that we can link Subnet1 to it. [Video description begins] When he selects the "Subnet1" record in the table in the Vnet1 | Subnets blade, the corresponding blade opens. It includes a "Route table" drop-down list, which contains only a "None" option. [Video description ends]

So I'm going to go home. I'm going to click Create a resource. And as you might guess, I'm going to create a route table. [Video description begins] He types "route" in the Search box in the "New" blade, and "Route table" is among the results that display. [Video description ends] There it is – Route table. And let's go ahead and click Create. We're going to add a route within the route table. So let's call this RouteTable1. And let's deploy it into a resource group.

As I was saying, we're going to create a route in the route table for 0.0.0.0/0. That's the default route for IPv4. So we want to funnel all traffic in Subnet1 out through the firewall on its way out to the Internet. [Video description begins] A "Create route table" blade that opens includes a "Name" field and a "Resource group" drop-down list. And after typing RouteTable1 in the "Name" field and selecting an Rg1 option from the "Resource group" drop-down list, he clicks the "Create" button. [Video description ends]

So we'll be able to do that once the route table resource is created here. [Video description begins] A pop-up, which appears, includes a "Deployment succeeded" message and a "Go to resource" button. [Video description ends] And it's done. So deployment succeeded. I'll click Go to resource to open up the route table. [Video description begins] The RouteTable1 blade includes an "Overview" category, which is selected, and a "Settings" section in the resource pane. The "Settings" section includes a "Routes" category. [Video description ends]

And naturally, we want to create a route entry. So I'm going to click Routes over on the left. And we're going to click the Add button. And we have to fill out a few details here such as the name – so SendToAzureFirewall. The address prefix here is going to be 0.0.0.0/0. [Video description begins] An "Add route" blade opens. It contains a "Route name" field, an "Address prefix" field, and a "Next hop type" drop-down list, which is set to Virtual network gateway. [Video description ends]

So that's the default route for IPv4. The next hop is going to be a virtual appliance. And this is where I'm going to paste in the private IP address of the Azure Firewall. And I'll click OK. And it's done. [Video description begins] When he selects the "Virtual appliance" option from the "Next hop type" drop-down list, a "Next hop address" field appears below the drop-down list. And when he pastes the Firewall private IP address in the field and clicks the "OK" button, a pop-up appears. It includes the message: Adding route. [Video description ends]

So at this point, we've got Azure Firewall configured. So let's go back and check that out and we'll go home here. There's Azure Firewall 1. [Video description begins] After returning to Azure Home, when he clicks the AzureFW1 resource link that displays in a table in the "Recent resources" section, the corresponding blade that opens includes an "Overview" category, which is selected, and a "Settings" section in the resource menu. The "Settings" section includes a "Rules" category. [Video description ends]

Now we're not going to configure them right now. But notice that what we can do is go into Rules where we can create and manage NAT rules, network rules, and application rules. [Video description begins] The AzureFW1 | Rules blade includes the following tabs: NAT rule collection, Network rule collection, and Application rule collection. [Video description ends]


Azure Firewall Application Rules
There are three types of rules that you can configure within Azure Firewall. [Video description begins] An AzureFW1 blade is open. It includes an "Overview" category and a "Settings" section in the resource menu. The "Settings" section includes a "Rules" category. The "Overview" category, which is selected, includes a "Firewall private IP" heading with an IP address displaying against the same. [Video description ends] So here in the portal, I'm in an Azure Firewall configuration.

I'm going to click Rules over on the left, open up the Rules blade. [Video description begins] The AzureFW1 | Rules blade includes a "Refresh" button and three tabs: NAT rule collection, Network rule collection, and Application rule collection. Currently, the "NAT rule collection" tab is selected. [Video description ends]

The three rule types are NAT rules, whether they are NAT rules to allow outbound traffic while assuming the public IP of the firewall or allowing inbound traffic through a public IP address and port translated to an internal IP address and port; network rules, which is the same type of thing you would find with network security groups – so based on protocols like TCP, source and destination IP addresses, and port numbers; and what we're going to focus on here, an application rule.

And this is what makes Azure Firewall or part of what makes it Layer 7 in terms of the OSI model. Because it has the ability to examine not just the packet headers where you'd find things like IP addresses and port numbers, but it can go into the payload and look at the URLs. So we're going to build an application rule here that blocks access to Facebook. [Video description begins] The presenter selects the "Application rule collection" tab. It includes an "Add application rule collection" link and an empty table with the following columns: Priority, Name, Action, and Rules. [Video description ends]

So to do that, I'm going to click Add application rule collection. And we're going to have to configure this accordingly for the appropriate port number and protocol and DNS domain name. [Video description begins] The "Add application rule collection" pane that appears includes a "Name" field; a "Priority" field; an "Action" drop-down list, which is set to Allow; and a Target FQDNs section. The Target FQDNs section contains a table with the following columns: name, Source type, Source, Protocol:Port, and Target FQDNs. A field each displays in the following columns: name, Source type, Protocol:Port, and Target FQDNs. A drop-down list, which is set to IP addresses displays in the "Source type" column. [Video description ends]

So I'm going to call this BlockSocialMedia. That's the name of the collection. We can have individual rules to block different types. For the Priority value, I'll put in 100. And I want to Deny. And down here under Target FQDNS, this is going to say Block Facebook. That's what this first one will be. [Video description begins] After selecting the "Deny" option from the "Action" drop-down list, he types "Block Facebook" in the field that displays in the "name" column of the table in the Target FQDNs section. [Video description ends]

So doesn't matter where the client request is coming from. So the Source is going to be *, anywhere. But the protocol and port will be https:/443 for Facebook. So I know that's what uses that. [Video description begins] He types an asterisk and https://443 in the "Source" column field and the "Protocol:Port" column field, respectively. [Video description ends]

And the other thing I want to specify here is the Target FQDN, which I'm going to specify as *.facebook.com. So anything in facebook.com. Now I notice my Protocol:Port field is outlined in red. That's my fault. There needs to be no slashes there. And let's just, okay, there we go. [Video description begins] He deletes the two forward slashes in https://443. [Video description ends] Now we have the green check mark. So just a little syntax error. It's all good now.

So let's go ahead and add this application rule. [Video description begins] He clicks the "Add" button in the pane. [Video description ends] After a moment, if you click Refresh, you'll see that you have your new application rule that would be listed here. In our case, we are denying access to, specifically, Facebook. [Video description begins] The BlockSocialMedia rule link with Action listed as "Deny" now appears in the table in the "Application rule collection" tab. [Video description ends]

Now in order for this to work or if you're wondering who will be affected by this, you need to think about routing tables. So the next thing I'll do here in the portal is create a route table in the same region as a VNet, where I've got subnets that I want to use the route table.

[Video description begins] He shifts to Azure Home. It includes the following sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual networks, All resources, etc.. The "Recent resources" section has a table with the following columns: Name, Type, and Last Viewed. Several resource links, including AzureFW1, appear in the table. He selects the "Create a resource" option, and a "New" blade opens. It includes a Search box. [Video description ends]

So I'm going to search for route table. And what I want to do is create a route table in, in this case, the Canada Central region. [Video description begins] When he types "route table" in the Search box, the search results contain a single option: Route table. He selects the same, and the corresponding blade opens. It includes a "Create" button. And when he clicks the button, a "Create route table" blade opens. It includes a "Name" field, a "Resource group" drop-down list, and a "Location" drop-down list, which is set to (Canada) Canada East. [Video description ends]

So I'm going to call this RouteTable2. I'll deploy it into an existing resource group. [Video description begins] After typing RouteTable2 in the "Name" field, he selects Rg1 from the "Resource group" drop-down list. [Video description ends] And I want to make sure that I place this in Canada Central. So I'll select that region and I'll click Create.

Now while that's happening, let's go and take a look at our Azure Firewall again. Because in the Overview blade, I need to copy the private IP address of the firewall because I need to make a route to it. [Video description begins] He returns to Azure Home and clicks the AzureFW1 resource link in the table in the "Recent resources" section. And when the corresponding blade opens, he clicks the "Copy to clipboard" icon associated with the Firewall private IP address. [Video description ends]
So in my notification icon here, I'm just going to go to my resource for my newly created route table, RouteTable2, got to go to Routes. And I'm going to add a route. Now we want to make sure that traffic is forced through Azure Firewall, such as outbound traffic from my VNet subnet before it goes out to the Internet.
So I'm going to call this route AzureFirewall. And I want it to capture all traffic. So the default route is referenced with 0.0.0.0/0. [Video description begins] After typing AzureFirewall in the "Route name" field, he types 0.0.0.0/0 in the "Address prefix" field. [Video description ends] The next hop type will be a virtual appliance. We'll just pop in the private IP address of our Azure Firewall. [Video description begins] When he selects the "Virtual appliance" option from the "Next hop type" drop-down list, a "Next hop address" field appears below the list. He pastes the previously copied Firewall private IP address in the field. [Video description ends]
And I'll click OK. So let's go into our Virtual networks. And I'm interested particularly in one called Vnet1. Because it has a subnet called Subnet1 and I want it to be affected by our route. In other words, I want to force all traffic going to the Internet to be funneled through our firewall first. And that's for a particular subnet.
So I'm going to click Subnets. And it's going to be Subnet1 in my case. And what I'm going to do when I open up the properties of Subnet1 is associate it with the route table that we just created. So that's called RouteTable2. [Video description begins] The Vnet1 | Subnets blade includes a table with the following columns: Name, Address range, IPv4 available addresses, etc.. Four subnets, including Subnet1, appear in the table. And when he clicks the "Subnet1" record, the corresponding blade that opens includes a "Save" button and a "Route table" drop-down list, which is set to None. He selects RouteTable2 from the "Route table" drop-down list. [Video description ends]
And it's done. So now I'll click Save. So now resources on Subnet1 and Vnet1 have their traffic sent to the Azure Firewall for inspection.


Azure Bastion Overview
Azure Bastion is a solution that allows remote management of Azure virtual machines, whether you're connecting through SSH for Linux VMs or through RDP for Windows VMs. You can consider this a platform as a service or a PaaS type of solution. We say this because it's not infrastructure as a service. You are manually deploying a virtual machine and configuring it. It is using a VM, but the provisioning of it is taken care of for you by this feature.

So the purpose of this is to limit VM visibility. What does that mean? Well, the Bastion host gets associated with an Azure VNet. So you need to have a subnet in that VNet called Azure Bastion subnet with at least a /27 subnet mask prefix. Now what happens then is you have a public IP address associated with the Bastion host. And that's great. You need that kind of connectivity.

Although, when you actually make the Bastion connection for management to Linux or Windows VMs, you do that straight through the portal. And it will have a connection on the private network side, and that means that your VMs only need a private IP address, not a public one. So thus you are not exposing them directly to the Internet.

Pictured in our diagram, we get a sequence of steps visually where on the left, we as the administrator in Azure, would make sure that we are authenticated to the Azure portal. When you're in the portal, you navigate to the virtual machine that you want to remotely manage, whether it's Linux or Windows based. And you pull up the connect blade as you normally would if you wanted to view connection options for SSH or RDP.

And you would select the Bastion option. Now what that will do is then provide you the ability to give credentials to authenticate to that VM. You'd put in credentials, for example, on the Windows side for the target Windows VM. These are not credentials for Bastion. By virtue of you being logged into the portal, you already are authenticated. So you don't put in credentials for Bastion – that's not required. It's for the target endpoint you're trying to manage.

And so according to our diagram, the connection via private IPs would then occur, whether it's to a Linux VM over SSH or to a Windows VM using RDP. The benefit is you don't need each and every VM to be exposed to the Internet via a public IP address. That is not a great suggestion when it comes to security. Instead, they should only be available as in this case through the Bastion host which is really acting as a jump-box.


Deploying Azure Bastion
Instead of exposing each Azure virtual machine to the Internet with a public IP address, for management purposes, you can instead deploy an Azure Bastion host. So a Bastion host, essentially, is the jump-box point through which you connect to, in the end, manage your Azure VMs. And those Azure VMs would only have a private IP address.
And I'm going to name it AzureBastionSubnet, all one word. [Video description begins] An "Add subnet" pane appears. It includes two fields: Name and Address range (CIDR block) (given as 10.0.4.0/24). [Video description ends] And after that, I'm going to make sure that I have at least a /27 subnet mask prefix. So I'm going to leave what it suggests here, 10.0.4.0. I can see the other address ranges used in the background here by the other subnets. So this one is logical. I'm going to go with that and I'm going to click OK.

So it's important you do this first. Otherwise, when you go to create the configuration for Azure Bastion, you're going to get an error message. Because it needs to see that subnet name. Now we can get down to business. [Video description begins] The AzureBastionSubnet subnet now appears in the table in the Vnet1 | Subnets blade. [Video description ends]

Let's go home here. I'm going to create a resource here in the portal. [Video description begins] He clicks the "Home" link in the breadcrumb navigation and shifts to Azure Home. It includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, Virtual networks, All resources, etc.. He clicks the "Create a resource" option, and a "New" blade opens. The blade includes a Search box. [Video description ends]

I'm just going to search for Bastion and I'll select it. And then I'll click on Create. [Video description begins] The "Bastion" blade includes a "Create" button. When he clicks the button, a "Create a Bastion" blade opens. It includes three steps: Basics, Tags, and Review + create. Currently, Basics is selected. It contains four sections: Project details, Instance details, Configure virtual networks, and Public IP address. The "Project details" section has a "Subscription" drop-down list and an associated "Resource group" drop-down list. The "Instance details" section has a "Name" field and a "Region" drop-down list, which is set to westcentralus. The "Configure virtual networks" section contains a "Virtual network" drop-down list. The "Public IP address" section contains the headings: Public IP address, Public IP address name, and Public IP address SKU. The "Public IP address" heading contains two options: Create new, which is selected, and Use existing. [Video description ends]

So I'm going to deploy this into a resource group called Rg1. [Video description begins] He selects the Rg1 option from the "Resource group" drop-down list. [Video description ends] I'm going to call this Bastion1. I'm going to put this in the region that makes sense for my deployment; in this case, Canada Central just because that's where a lot of my VMs are deployed.

I'm going to tie this to Vnet1. And this is where it checks, as you can see here, for AzureBastionSubnet. Otherwise, it would prompt us with an error message and tell us we had to go back and make them. [Video description begins] When he selects the Vnet1 option from the "Virtual network" drop-down list, a "Subnet" drop-down list, which is set to AzureBastionSubnet (10.0.4.0/27), appears below the "Virtual network" list. [Video description ends]

So I'm going to let it create a new public IP address for this. But I'm going to call it BastionPubIP. And that's it. That's all we're going to do. So I'm going to click review and create, make sure it passes validation, which it does. And I'll click Create. [Video description begins] He points to the message that the application displays. [Video description ends] After a moment, the deployment will be complete. [Video description begins] A blade that opens includes a "Your deployment is complete" message and a "Go to resource" button. [Video description ends]

So let's take a look at it. Let's click the Go to resource button. That will take us into the properties of our new deployment of Azure Bastion. So let's just take a peek. We can see here that it's got a public IP address in the Overview blade. [Video description begins] The Bastion1 blade that opens includes an "Overview" category in the resource menu. The category is selected. [Video description ends] You can see that on the right. That's been assigned. We specified that when we deployed it.

So now to connect to a virtual machine through Bastion, I need to go to the virtual machine here in the portal. I'm going to go to my Virtual machines view. I'm going to click on a Windows virtual machine that's currently up and running. [Video description begins] He returns to Azure Home and selects the "Virtual machines" option. The corresponding blade that opens includes a table with the following columns: Name, Type, Status, etc.. The following item links appear in the table: Ubuntu-1 and WinSrv2019-1. When he clicks the WinSrv2019-1 link, the corresponding blade that opens includes an "Overview" category and a "Settings" section in the resource menu. The "Overview" category is selected. The "Settings" section includes a "Connect" category. [Video description ends]

And I'm going to click on Connect. Now when the Connect blade opens up, you'll see some of the normal connection options such as RDP and SSH. And of course, we want to focus on the BASTION option. [Video description begins] The WinSrv2019-1 | Connect blade has three tabs: RDP, SSH, and BASTION. Currently, RDP is selected. When he selects the BASTION tab, the corresponding view includes the fields: Username and Password. [Video description ends]

When I click on it, it'll retrieve information about the Bastion configuration for this VNet. And at this point, all I have to do is supply a username and password, which I will do. These credentials are for the target virtual machine you're trying to manage, not for Bastion. So let's go ahead and click Connect. Depending on your browser config, it might block the connection. I'm going to choose Always allow. And we can see it's opened up a new web browser tab in which it will present me with my remote desktop connection to that virtual machine, the benefit of which is that that virtual machine doesn't need a public IP address.

We can do the same type of thing for Linux. So if I go back to my virtual machine list, I've got a Linux virtual machine. And we would go through the exact same motions. [Video description begins] After returning to the WinSrv2019-1 | Connect blade, he shifts back to the "Virtual machines" blade and clicks the Ubuntu-1 item link. [Video description ends] We would select that host and go to Connect. So we can see when we click on Connect, we have the option of using a Bastion connection by clicking the button. [Video description begins] The BASTION tab includes a "Use Bastion" button. [Video description ends]


Virtual WAN Configuration
In this demonstration, I'm going to configure an Azure Virtual WAN resource here using the portal. [Video description begins] Azure Home is open. It includes the sections: Azure services and Recent resources. The "Azure services" section contains the following options: Create a resource, All resources, Virtual machines, etc.. The "Recent resources" section contains a table with the following columns: Name, Type,and Last Viewed. Several resource links appear in the table. [Video description ends]

So to get started, I'll click Create a resource. And I'm going to search for Virtual WAN. I'll select that from the list. And then I'll click on Create. [Video description begins] A "New" blade that opens includes a Search box. When the presenter types "virtual wan" in it and selects "Virtual WAN" from the search results, the corresponding blade that opens includes a "Create" button, which he clicks. [Video description ends]

I'll deploy this Virtual WAN resource into an existing resource group. [Video description begins] A "Create WAN" blade that opens contains two steps in the navigation pane: Basics and Review + create. Currently, Basics is selected. It contains two sections: Project details and Virtual WAN details. The "Project details" section contains a "Subscription" drop-down list, which has an associated "Resource group" drop-down list. The "Virtual WAN details" section contains a "Resource group location" drop-down list, a "Name" field, and a "Type" drop-down list. He selects an option from the "Resource group" drop-down list. [Video description ends]

And I'm going to deploy this in, let's see. Let's find Canada Central to deploy it in that region. [Video description begins] He selects a "(Canada) Canada Central" option from the "Resource group location" drop-down list. [Video description ends] And then I'm going to call this VWAN1. Currently, the Type is set to Standard. We can also choose Basic. Basic supports site-to-site VPN connectivity through a hub you configure in the Virtual WAN.

If you need additional connectivity such as for VNets or point-to-site VPNs or ExpressRoute, then you should be using Standard. I'm just going to leave it on Standard here. And I'll click review and create. It passes the validation. [Video description begins] He points to the message that the application displays. [Video description ends]

And so let's get this created by clicking the Create button. And after a moment, the deployment is complete. So I'm going to click Go to resource. What I want to do here is go down under the Connectivity section and click on Hubs. Notice, in our geographical map, it says, Each point represents a hub. But we don't have any hubs declared or defined here yet.

[Video description begins] The VWAN1 blade that opens includes an "Overview" category and a "Connectivity" section in the resource menu. The "Connectivity" section contains the following categories: Hubs, VPN sites, User VPN configurations, ExpressRoute circuits, and Virtual network connections. Currently, the "Overview" category is selected. It includes a world map and an empty table with the following columns: Hub, Hub status, Address Space, etc.. [Video description ends]

So I'm going to go ahead and click on Hubs over on the left. And I'm going to click the New Hub button. So I'm going to deploy this in the Canada Central region. It's going to be called VWANHub1. And then I have to specify the hub private address space. [Video description begins] The VWAN1 | Hubs blade includes a "New Hub" button and an empty table with the following columns: Hub, Hub status, Region, etc.. When he clicks the "New Hub" button, a "Create virtual hub" blade opens. It includes a "Virtual Hub Details" section. The section contains a "Region" drop-down list, which is set to (Canada) Canada Central; a "Name" field; and a "Hub private address space" field. [Video description ends]

You just need to make sure it doesn't overlap with any of your on-premises network ranges or your VNet ranges in Azure. So I'm going to put in 15.0.1.0/24 bits in the subnet mask. And it likes that. So there's a note down here that says creating the hub with the gateway will take up to 30 minutes. Not a problem. I'm going to click review and create. And now that the validation has passed, I'll click the Create button. So now it's being created. [Video description begins] A VirtualHubDeployment | Overview blade that opens includes a "Your deployment is complete" message and a "Go to resource" button [Video description ends]

Now the deployment is complete. Okay, let's click Go to resource. So we're still in our Virtual WAN hub. Looking at the details, it's been deployed. Let's go back and take a look at our Virtual WAN, VWAN1. What I want to do in here is just take note here that in the Overview blade we now have a point on the map. And it's approximately the Canada Central region where it was deployed. It's our VWANHub1. We can see it's now listed down below with its address space.

[Video description begins] He returns to Azure Home and clicks the VWAN1 resource link that now appears in the table in the "Recent resources" section. The VWANHub1 link with Address Space listed as 15.0.1.0/24 and Region listed as Canada Central now appears in the table in the "Overview" category of the corresponding blade. [Video description ends]

So because we selected to create a Standard type of virtual WAN config, then in the navigator bar, under Connectivity, we can create configurations for VPN sites; for user VPN configs, in other words, point-to-site; ExpressRoute circuits; or even VNets. All of these types of items can centrally feed into the VWAN hub that we've defined for Virtual WAN configurations. Now if I were, let's say, to go to VPN sites, I want to configure a site-to-site VPN directly into my Virtual WAN. [Video description begins] The VWAN1 | VPN sites blade includes a "Create site" button. [Video description ends]

When I go to create the site, that's when I get the configuration options available. And there's an important note to be made about doing that. And it is in the sense that when you go down, you have to tie it or connect it to a hub – so a Virtual WAN hub, which we've defined.

[Video description begins] When he clicks the "Create site" button, a "Create VPN site" pane appears. It contains three steps in the navigation pane: Basics, Links, and Review + create. Currently, Basics is selected. It includes the sections: Instance details and Connect to. The "Instance details" section includes a "Region" drop-down list, which is set to (US) West Central US. The "Connect to" section has a "Hubs" drop-down list, which features an associated helper tip. [Video description ends]

But in the drop-down list, it says, No available items. Even if I change the region up here to the region where I know that was deployed, the hub was deployed to Canada Central – we saw that. Well, despite the fact that I might select that and then click in a different field to refresh the screen, when I go down to Hubs, it's still not there.

And the reason is because, and you'll see this by the way, use these little helper tips. If you hover over the helper tip, the information icon next to Hubs says the site can only be connected if you've got a VPN gateway in the hub. If you don't see the hub, go create a VPN gateway in the hub first.

So what that means is that we go into my hub over on the left. There's our hub definition. We saw it was plotted on the map. [Video description begins] He selects the "Hubs" category in the VWAN1 | Hubs blade. The corresponding blade that opens now contains a VWANHub1 link in the table. And when he clicks the link, the corresponding blade that opens has an "Overview" category and a "Connectivity" section in the resource menu. The "Connectivity" section contains the following categories: VPN (Site to site), ExpressRoute, User VPN (Point to site), etc.. Currently, the "Overview" category is selected. [Video description ends]

And then you would go to VPN (Site to site) over here on the left. And what it should do is give us, yes, an instruction to create the VPN gateway. [Video description begins] The VWANHub1 | VPN (Site to site) blade includes a "Create VPN gateway" button. [Video description ends]

So we would go through that configuration. So there's a bit of configuration depending on the type of network item that you want to link into your virtual hub in your Virtual WAN, whether it be point-to-site or, as we're seeing here, site-to-site, an ExpressRoute circuit, or Azure VNets. [Video description begins] He clicks the "Create VPN gateway" button, and the corresponding pane appears. [Video description ends]

So let's just close out of this for a second here. Let's go back into our Virtual WAN device. And let's say that we wanted to link a virtual network, making a virtual network connection into that. [Video description begins] He returns to the VWAN1 blade and selects the "Virtual network connections" category. The corresponding blade that opens includes an "Add connection" button. [Video description ends]

So from here, we could add a connection and go to through the configuration  to link our VNet directly into our VWAN virtual hub. [Video description begins] He clicks the "Add connection" button, and the corresponding pane appears. It includes a "Hubs" drop-down list. He selects the VWANHub1 option from the drop-down list. [Video description ends]                    


High Availability Overview
Business continuity means ensuring that business functions continue to operate correctly in the event of a disruption, or we can either do that or try to minimize the impact of disruptions. This is where disaster recovery planning or DRP comes in. There are a couple of terms that we should be aware of, like the recovery time objective, the RTO, and the recovery point objective, the RPO. The RTO really references the maximum tolerance for downtime.

The idea is that we want to bring systems back online as quickly as possible. Or, in the case of data recovery, we want to recover data as quickly as possible so it can continue to be used. So really, we're talking about the amount of time it takes to even move operations to an alternative site.

Now, in the case of Azure, it might be your secondary alternative site if your primary site, if that's on- premises, let's say, becomes unavailable for some region. The recovery point objective of the RPO is the maximum tolerance for data loss. Like the RTO, it's measured in time. So really it deals with how often backups should be taken. So think about what's important and what's not, such as finance servers versus file servers that contain documentation.

Naturally documentation would be easily replaced, but the data on finance servers might be a little trickier to replace, especially if you haven't taken a recent backup. So if the RPO is two hours, that means you'd have to be configuring backups, in our example for finance servers, to be taken at least once every two hours to be compliant with the RPO. A Disaster Recovery Plan document deals with things such as the recovery objective, such as bringing a failed system online as quickly as possible, and the scope to which it would apply. Does it apply to one system or a collection of systems?

Then you have to have a Disaster Recovery Plan team member list with the responsibilities. People in the team need to know what they are responsible for, what their role is. There should be contact information in case an issue comes up that can't be resolved and it needs to be escalated. Such as even to Azure support, depending on the type of Azure subscription you might have. The Incident Response Plan or the IRP is one of those types of things you need to plan for ahead of time before incidents occur, such as security breaches.

Now, if we don't have an incident response plan in place, with team members that know their roles when incidents occur, then, there could be negative financial impacts, It could result in reputation loss for the organization, it could cause a problem with business partnerships, and so on. So there needs to be an annual review at minimum to keep up with changing threats to make sure that the IRP is relevant and it's effective in reducing the impact of negative incidents when they occur.

Now, another aspect of disaster recovery, and ultimately business continuity, is Azure availability zones, or AZs. This is one or more data centers that are contained within an Azure region. So, for example here we've got two availability zones, on the left, AZ 1, on the right, AZ 2. [Video description begins] The host uses an example with two diagrams. The first diagram contains one building while the other one contains three. [Video description ends] The diagrams imply that AZ 1 in this example has one Azure data center but AZ 2 has three of them.

So what we can do when we deploy some Azure services, not all, is, we can configure them to be spread out across availability zones to increase availability. And you can even replicate data between availability zones. So availability zones provide high availability, it's one or more data centers and there's also this notion of fault domains and update domains. Now, if you were to create virtual machines across availability zones, then the virtual machines would be distributed across fault domains and update domains. Fault domains in Azure refer to the equipment within a rack in an Azure data center.

Now, multiple fault domains means that we have different sets of equipment with different network switches and power sources, and increases availability in case we have a physical hypervisor running our VM that fails due to a network switch problem. Update domains are used for rolling updates, so when Microsoft updates the underlying infrastructure in their data centers, at least one of your virtual machines will always be running, such as when you spread out multiple VMs across availability zones.


VM Scale Sets
Now, a virtual machine scale set is used when you want to enable scaling for a workload. [Video description begins] The host is at the "Basics" tab of the "Create a virtual machine scale set" page where there is a template to be filled in with the Project details. [Video description ends] And so the first thing we'll do here is deploy this into an existing resource group. [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] I have to give a name to the scale set, I'm going to call it "vmssapp1" and I'll use the standard nomenclature that's acceptable in my organization for naming resources.
For "Region" I'm going to put this in Canada, so let's say I'll put this in Canada Central, and I can select from some standard Windows and Linux based virtual machine images. But of course, you can also choose from private images if you've created one, and normally, you would create a private image because you would load your custom app, or commercial off the shelf app software and configuration settings within an image and use that here.
Of course, after the fact you can load software, settings and files into VMs in the scale set that you wish. You can do it after the fact, too. So in this case, I'm going to go ahead and choose "Windows Server 2016 Datacenter", assuming I know my app needs that platform. You can also opt to use spot instances for cost savings. Remember that in Azure, spot instances are essentially extra Azure VM capacity that's available for you at a discount, but it's not guaranteed. So you wouldn't use it for anything mission critical or anything like that, because it could go away. But it's great for things like batch processing.
In this case, I don't want to use a spot instance. I can specify the sizing, the underlying horsepower for each VM. And because I'm using Windows I'll have to specify an administrator name and password. [Video description begins] The Administrator account details are displayed, including fields for the "Username", the "Password" and a third one to "Confirm password". The host fills them in. [Video description ends]
So this is going to be for the admin accounts within each VM, which is given a running Windows Server 2016 Datacenter in my case. I don't have server licenses, so I'm just going to leave that on "No" [Video description begins] There is a Save money section with an offer to "Save up to 49% with a license you already own using Azure Hybrid Benefit" and a hyperlink to “Learn more”. [Video description ends] and I'll click "Next" for our disks. So for each VM in the scale set we can determine if we want additional data disks and that might be required depending on the nature of your workload.
And down below, it has a NIC configuration, a Network Interface Configuration that will be used for VMs, I can click the little pencil to edit it. So we can see in the network interface config, we have a subnet affiliation and also a network security group. Now, we could go into "Advanced" and specify the network security group info, but I'm going to leave it on "Basic". It's probably a better idea to use a network security group in this case because you've got a bunch of VMs that are going to support a workload. Probably better to have the network security group associated with the subnet to control in and outbound traffic flow.
So I'm not going to have any public inbound ports. I'm going to leave that as it is, I'll click "OK", and we could also add multiple NICs here, depending on the VM size that was selected. But in this case, I'll leave it on just the single NIC. Not going to use a load balancer at this point, so I'm going to click "Next" for Scaling, because it is a scale set. [Video description begins] The host is now on the "Scaling" tab. [Video description ends]
So the initial instance count here is going to be set to "2". We could use a manual scaling policy or we could click on "Custom". [Video description begins] When the host chooses the "Custom" option in the Scaling section, more fields appear below it. [Video description ends] So perhaps after the CPU is busy, so let's say beyond 75% overall, or ten minutes, we want to increase by one VM at a time, up to a maximum of, let's say here, I'll reduce it from 10 down to 4. You might have to tweak the settings to accommodate the workload and the peaks and troughs, and requests for that workload.
At this point we can also specify what will trigger scaling in. Scaling out horizontally means adding virtual machine nodes to support a workload. Scaling in is the opposite, it means things are slowing down and you want to remove virtual machine nodes, which saves on costs. So when we get to 25%, we could change that value, we'll start decreasing by one VM.
That being done, below I'm just going to go ahead and click "Next" for Management. [Video description begins] The host is on the "Management" tab, with fields for Azure Security Center, the Upgrade Policy and Monitoring configuration settings. [Video description ends] Here, I can choose the upgrade for each of the virtual machine operating systems, in this case, let's say "Rolling - Upgrades roll out inbatches with optional pause" is and we could specify the details for that. I'm just going to leave that as it is. I can also use a system assigned managed identity, I can have that created if I turn it on here.
Depending on the nature of your workload, if it needs access to certain other Azure resources like key vaults and so on, you can then use a system assigned managed identity instead of building that into your code, if you're using custom code. So I'm going to turn on "Automatic OS upgrades" and the automatic instance termination notification when the instances will be terminated, and I'm going to go ahead and click "Next" for Health.
So here we see it's going to connect over HTTP, specifically connecting to Port 80 on the root of each back end node to check that they are healthy and responsive. So I'm going to go ahead and click "Next". [Video description begins] The host is now on the "Advanced" blade. [Video description ends] [Video description begins] The host is now on the "Tags" blade. [Video description ends] I'm not going to change anything under "Advanced", so I'll click "Next".
I'm not going to change anything for Tags, so I'm going to click "Review + create". [Video description begins] The host is now on the "Review + create" tab. [Video description ends] It's going to run a final validation. It's passed the validation, so let's create the scale set. I'm going to click the "Create" button to make that happen. [Video description begins] The host has been redirected to a page with the indication: "Your deployment is complete". [Video description ends]
Okay, so now the deployment is complete, I'm going to click "Go to resource" and that will take us into the navigation bar, the properties for the newly created virtual machine scale set. One of the things I want to take a look at is the instances blade. If I click on "Instances" over on the left, we can see that we've got two instances as per our config. We set it to start off at "2" and to max out, I think, at "4", given a busy CPU average overall.
So we can see those two instances are shown here as running. So the virtual machine scale set then is ready to go. So if I were to click on the link for one of those instances, we would get important details, such as the private IP address used by a particular instance, so that if we want to manage it and add config files or app files, or anything like that, we can do it.
And if we were to take a look at the Networking blade for that scale set instance, we can see the network interface config it picked up when we deployed our virtual machine scale set and we can also see that it made a basic network security group. We used the basic option. So, it's attached to the network interface. Well, we could change that up if we wanted to, as we mentioned, and instead go with a subnet associated network security group.


Load Balancing Overview
Load balancing an application can not only improve performance because you've got multiple back-end VMs handling the app workload, but it also can increase availability in the event that we have a failed VM, because there are other VMs in the back-end that can pick up the slack. So really, the Azure Load Balancer deals with incoming app traffic, incoming client requests. Essentially it gets it distributed to the least busy back-end VM.
You can define a public load balancer, if it's a public facing app, such as a company website on the Internet, or you could have an internal load balancer, perhaps to low balance a busy internal line of business application used by employees. So, pictured in our diagram we have the user at the top connecting to an app or URL. In this case the URL is www.quick24x7.com. That would then be resolved through DNS to the load balancer's IP address.
In the case of a public facing load balancer, it will resolve to the public IP address of the load balancer. So clients connect to the load balancer thinking they're connecting directly to the app server. But the load balancer in turn, then uses a back-end pool configuration, which essentially might be a virtual machine scale set, which has numerous back-end VMS hosting the web app. Now, the client connection to the load balancer public IP address might happen over Port 443, a secured connection, and then the load balancer might connect to the same or a different port number for the back-end nodes. It doesn't have to be the same port number.
Now, the load balancer rules is where you configure that kind of port mapping. It controls the traffic distribution coming in through the load balancer. You have some additional options beyond the port numbers you can configure, like client session IP affinity. What that means is, depending on the nature of the web app, when a client comes to the load balancer and makes a connection to a back-end VM, the back-end pool, depending on the app, you may want the client to maintain a connection with that specific server for the duration of a session, and so that's where the client affinity would kick in, so you can configure that.
You can also configure inbound NAT rules. Essentially, this is like port forwarding for the purposes of managing the back-end VMs. Whether they're Linux-based, whether they're Windows-based doesn't make a difference. And so, remember that in the case of a public load balancer, it's got a public IP address. That's fine, but what do you connect to if you need to manage the back-end VMs? Well, inbound NAT rules can allow that connectivity.
So you could have the front-end configured port and IP address, and allow connectivity to back-end instances for VM management, and the back-end port number could be the same or different. Normally the back-end port would be 22, for SSH connectivity to Linux, and 3389 for RDP connectivity to Windows. Or you might have a different solution in place to allow remote access to those hosts, such as through Azure Bastion.
The other load balancing solution to keep in mind is the Azure Application Gateway. This is a web app load balancer, specifically, whereas a traditional load balancer certainly can load balance web apps, but it's really only designed to work up to layer 4 of the assigned model, so it can work with IP addresses and port numbers, but that's about it. The Azure Application Gateway can make HTTP routing decisions by actually looking at the URL. So this means then that we can have end-to-end SSL and TLS encryption with the Azure Application Gateway.
Now, what this means is, essentially that the application gateway acts as an SSL or TLS Terminator. So you can have client HTTP connections to the gateway, after which the gateway would talk to the back-end servers without using HTTPS. Then you might say, isn't that a security risk? Well, perhaps, I mean, everything should always be encrypted, but at the same time, by doing this, you are relieving that burden, that computationally expensive burden, from the back-end servers, of dealing with SSL or TLS encryption and decryption.
So, gateway termination can be a useful option. You can also enable auto scaling, so that the number of nodes supporting a workload can be increased or decreased depending on demand. You can enable user session affinity, just like a traditional load balancer, and you can enable up to 100 websites to be associated with a single Azure Application Gateway. And the Azure Application Gateway, if you select the Web Application Firewall tier, or the WAF tier, allows you to have a Web Application Firewall protect the web app.
Now, this is based on OWASP rule sets. OWASP is the Open Web Application Security Project, where the singular goal is to protect web apps from common web app exploits. So that would include exploits like cross-site scripting attacks, injection attacks of varying kinds and directory traversal attacks, to name just a few. So the application gateway then supports URL based routing.
If we look at our example we've got a client connecting to www.quick24x7.com. They're connecting to the load balancer or application gateway in this particular example. Let's say it's a public facing one, so public IP, but then what happens is that our application gateway will be configured with rules that look for certain items in the URL.
So on the bottom left, if an incoming URL request has "/media" in it, then that might be directed to a certain set of back-end servers, maybe optimized, for dealing with streaming media, whereas on the right, in the bottom of our diagram, if the application gateway has a rule that checks for uploads in the URL, that might be directed to a different back-end set of servers that are optimized to handle uploads.


Internal Load Balancers
In this demonstration I'm going to use the portal to deploy an internal load balancer. That means that it would be used internally. It's not going to be public-facing perhaps by employees that need access to a custom line of business application.
So to get started here in the portal I'm going to click [Video description begins] The host has launched the home page of the Microsoft Azure portal and the page url is https://portal.azure.com/#home. [Video description ends] "Create a resource" and I'm going to search for "load", and right away there's "Load Balancer", so I select that and I'm going to click "Create". [Video description begins] The host is at "Basics" tab of the "Create load balancer" page where there is a template to be filled in with the project details. [Video description ends]
Next, I'll deploy this into a resource group [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] and I'm going to give this load balancer a name, I'm going to call it "int", for internal, "lb1". Now, it likes that name. We have the green checkmark over to the right of the name field. I'll specify the Azure region where I want this deployed. So in this particular case, I think what we'll do is put it, let's say, in Canada Central.
Now, I would do that if I know that's where, geographically, most people that will need access to it reside. So if we've got branch offices in that location, people'll need to connect to Azure to get to the internal load balancer, that would make sense. But we have to select "internal" for the type. The default is a public load balancer.
In most cases, you'll just leave it as a basic SKU. Although it does say if you have a need for more than 1,000 instances and better flexibility in that sense, then you might choose a standard SKU. I'm going to leave it on basic in this example. It needs to be tied to a virtual network, so I'll chose a VNet I've got here called "Vnet1" and also a subnet. Now, I can select whichever subnet I wish that's available, so I'm going to choose a subnet called "Subnet2", and for the IP address assignment I'm going to use "Dynamic".
So, dynamic of course means that we have an IP address, an internal private IP address, it's an internal load balancer that could change, whereas we could choose "Static" if we didn't want it to change. When we choose "Static", I'll scroll down a bit, you can then specify the address that you want to use. I'm just going to leave it on "Dynamic" for this case and I'll choose "Next" for Tags. I'm not going to tag this, so I'll choose "Next", "Review + create". It's going to check that my settings are valid and then, after it passed, I'll click "Create".
Okay, so the internal load balancer is deployed, but it's not ready to go. [Video description begins] The host has been redirected to a page with the indication: "Your deployment is complete". [Video description ends] We need to configure it further. So I'm going to click on "Go to resource". One of the first things we're going to do here is configure a backend pool. Now, if I go first of all, actually to the frontend IP configuration, we can see the dynamically assigned private IP that's being used for this. So that's fine, that is there.
Let's go to backend pools. The backend pool identifies the backend virtual machine workers that the load balancer will send client requests to. Now, we don't have a backend pool. Well, we need one so I'm going to click "Add" and you have a couple of different sources you can select from to define the VMs in your backend pool. Let's give this a name. I'm going to call it "BackendPool1", and down below, for the association, I can choose a virtual machine or a virtual machine scale set. [Video description begins] The host picks the "Virtual machine scale set" option in the "Associated to" dropdown menu. [Video description ends]
Now I happen to have already created a virtual machine scale set and it's showing up here in this list, and I can select the IP address from the network interface configuration for that scale set. A virtual machine scale set is a collection of virtual machines using the same operating system image, even if it's custom to support your app, that are scaled. You can configure auto-scaling, for example, if you wish, or you could manually scale it. So I'm going to have my load balancer use that existing virtual machine scale set and then I'll click "Add".
Okay, so now we've got our backend pool added to the load balancer configuration I'm going to go to "Health Probes" because we want the load balancer to know which backend VMs in the scale set are healthy versus those not responding. The ones that aren't responding will not have client requests routed to them. So I'm going to click "Add" to add a Health Probe. [Video description begins] The host is redirected to a new page titled "Add health probe". [Video description ends] I'm going to call it "hp1", for Health Probe 1, and I'm going to have it contact TCP port 80 on each backend instance.
So I have to make sure that that port is available and running on those machines, in other words, have the web server stack up and running. So I'm going to go ahead and click "OK" to add that health probe. And I also need a load balancing rule, so I'm going to go to "Load balancing rules" and click "Add". [Video description begins] The host is redirected to a new page titled "Add load balancing rule". [Video description ends]
I'm going to call this "lbrule1", load balancing rule 1, so I can associate this with the frontend IP and essentially what I'm doing, it's kind of, like forwarding or port mapping on a firewall, where I want the load balancer to listen on port 80 and when clients make a request to that, then the load balancer will send that to port 80 on the backend VMs in the scale set. And we could see the backend pool association listed right here.
So I'm going to go ahead and do that and I could also enable, for example, Client IP or Client IP and protocol persistence to keep clients connected through the load balancer, keep them connected to the same backend VM instance. That might be required depending on how the backend app was created. However, I'm just going to leave that on "None" and I'm going to click "OK".
The last thing I might do is click "Inbound NAT rules", where I might create an inbound NAT rule if I want to allow inbound access to remotely manage the backend instances. However, I'm not going to go ahead and do that here. So at this point, we've got our functional load balancer, let's just go take a look at this, meaning, I want to go to the overview of my internal load balancer, so the overview blade. [Video description begins] The host is redirected to a new tab titled "Overview". [Video description ends]
So just bear in mind that normally what we would do is have a DNS record that maps to the private IP in this case, for our internal load balancer. So when clients connect to that DNS name, the request is being sent here, which in turn is being sent to the least busy backend VM supporting the app.


Public Load Balancers
In this demonstration I'm going to configure a public load balancer using the Azure portal. So I'll start by clicking "Create a resource" and I'm going to search for the word "load", and I'll choose "Load Balancer" and then I'll click "Create". Now, public load balancers, [Video description begins] The host is at "Basics" tab of the "Create load balancer" page, where there is a template to be filled in with the project details. [Video description ends] like the name implies, are publicly accessible.
You would do this for example, if you had a public website you wanted available but you wanted to load balance it to improve performance and availability, since you've got a backend pool of VMs serving the app. So I'm going to deploy this into a resource group. [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] I'm going to call this "publb1", so public load balancer 1, and I'm going to deploy this in a region nearest where I think it might be used for the most part, so I'll choose "Canada Central", or if not, I'll deploy it in a region nearest where it will be administered.
I'm going to leave the type to the default value of "Public". We want a public load balancer here. We can either use an existing public IP address resource we might have previously deployed, or create a new one. I'm going to create a new one in this case. I'm going to call it "publb1_pubIP" to name the resource that will be created here. You could go with a statically assigned public IP address, which means it's unchanging. So depending on what your requirements are we'll determine whether you choose Dynamic or Static.
In this case, I'm going to choose "Static". I'm not going to have IPv6 support because I don't need it in this case, so I'll click "Next". I'm not going to tag this, I'll click "Next". It's going to validate my choices. The validation has passed. I'm going to go ahead and click "Create". But of course, we're then going to have to go in and define a backend pool, a health probe, and also some load balancer rules. We'll do that once this is deployed. [Video description begins] The host has been redirected to a page with the indication: "Your deployment is complete". [Video description ends]
Now that the deployment is complete I'm going to click "Go to resource". That's going to open up our load balancer. We can see if we click on the Frontend IP configuration to pull up that blade, that we already have a public IP address, in our case it's static, so it's unchanging, but I'm going to go to "Backend pools" because you need a backend pool of VMs to handle your application. So I'm going to click the "Add" button. So we're going to call this "BackendPool1". I'm going to select a virtual network. Now, this virtual network selection here, in this case "Vnet1", is important.
Let me demonstrate by selecting a virtual network I don't want. I'm going to choose another one called "Rg1-vnet". What I want to do is associate this load balancer with an existing virtual machine scale set that's already scaling an app. So I'm going to go to the Associated to and I'm going to choose "Virtual machine scale set".
But it says none were found in my region, Canada Central, that matches the above criteria. Well, if I change the virtual network, let's say I choose "Vnet1", then I will see that I've got [Video description begins] The host has changed "Rg1-vnet" to "Vnet1" in the"Virtual Network" dropdown menu. [Video description ends] a virtual machine scale set ready. So it's important to make sure if you're going to rely on another resource like a virtual machine scale set that you know the region it was deployed in, and also, as we see in this case, the virtual network it was deployed into. So I'm going to select that virtual machine scale set and its associated network interface for an IP address and I'll click "OK".
Now, that backend pool is pointing to a virtual machine scale set and that virtual machine scale set, so our backend pool then is being served by virtual machines and the scale set, each of which uses the same OS image, which could be a custom image, of course, that has your app software and its configuration. Next, I'm going to configure a health probe because we want to make sure that client requests are not routed to backend instances that are not healthy, that aren't responding.
So I'm going to click "Add" to add a health probe. This will be called "hp1", for health probe 1, and we're going to have the load balancer periodically, we can see the interval here, talk to port 80 on each backend virtual machine within the scale set, and after two consecutive failures, after two five-second intervals have gone by, it will be determined that VM is unhealthy and so, client requests will not be routed to it. So, I'll click "OK" and we're going to go to "Load balancing rules", and I'm going to click "Add", and I'm going to call this... simply call it "rule1".
Now this load balancing rule is going to be important because the load balancing rule, essentially, will have the frontend IP address and port number. So it's a public IP, Port 80, and we have to map that to what we want it to connect to on each VM in the backend, and in this case, that also happens to be Port 80. It doesn't have to be the same port number. We can also see this rule by default wants to use our health probe.
I'm going to go ahead and click "OK" to create the load balancing rule. And if we wanted to allow inbound remote management for connecting to each backend node, then we could configure inbound NAT rules to do that, but you don't necessarily need an inbound NAT rule if you want to remotely manage each backend instance, at least in this particular case, because if I go, let's say into my virtual machine scale set that we've linked to the load balancer, we can look at the instances that are up and running for that scale set, so I'll pop up the instances blade. There are two of them.
If I click on any one of them I'll see that they each have their own unique private IP address and so, I could remotely manage each backend VM instance simply by connecting directly to the private IP address, but I would have to be on the Vnet. You might set up a jump box such as through Azure Bastion to make that happen. Either way, it's important to be able to remotely manage the backend instances that are load balancing your app.


Application Gateway
The Azure Application Gateway can make decisions for routing or load balancing to backend hosts using things like URLs. It also supports a web application firewall. Those are two things the load balancer does not do. So let's deploy one, an application gateway, here using the Azure portal. [Video description begins] The host has launched the home page of the Microsoft Azure portal and the page url is https://portal.azure.com/#home. [Video description ends]
So I'm going to start by clicking "Create a resource" and I'm going to search for "application gateway", and I'll select it from the list, and as usual, I'll click "Create". [Video description begins] The host is at "Basics" tab of the "Create application gateway" page where there is a template to be filled in with the project details. [Video description ends] So I'll deploy this into an existing resource group [Video description begins] The host chooses “Rg1” in the dropdown menu of “Resource Group”. [Video description ends] and I'm going to call this "appgw1", for App Gateway 1.
I'll deploy it in a region, let's say in this case here, I'll choose Canada Central, and here I have the tiers. Now, this is important if I want a web application firewall. So, if I want that kind of support then, I'd have to choose the WAF or the WAF V2 tier, ideally version 2, say as Standard. I want Standard V2 to have the latest options available. I can determine if I want to enable autoscaling with the app gateway. Yes, I do want to do that. So maybe I'll specify a minimum scaling unit of 1, and a max, let's say of 4, and down below, I can tie this to an existing virtual network.
So I'm going to tie this to Vnet1, let's say, and then, down below that I have to make sure I choose a subnet. So I'm going to choose a subnet and I'll click "Next". [Video description begins] The host chooses "Subnet2" in the "Subnet" dropdown menu. [Video description ends] Now, for the frontend configuration, much like we can have an internal [Video description begins] The host is now on "Frontends" tab. [Video description ends] or a private load balancer, as opposed to a public load balancer.
So too, here do we have the same options: a public or a private IP address for the frontend of the app gateway, or both, might want to do both. I'm going to leave it on... let's see let's do "Public" in this particular case. Notice that when I select "Private" it says if you have an App Gateway with a tier of Standard_v2, it doesn't support only private IP addresses, but if you went to just "Standard", not v2, it would.
However, in this case I'm going to go with "Public" and I can go and choose an existing public IP, but here I've got some public IP resources, they're already associated with other objects. All right, then I guess I'll have to click "New". [Video description begins] The host clicks on "Add new" and a template is appears, titled "Add a public IP". [Video description ends] So, "AppGw1" for App Gateway 1, "PubIP", that's what we're going to call it.
Notice that we are using the Standard SKU and the assignment here is going to be "Static". We don't even have the option of using "Dynamic" in this case. That's fine. Next, we have to define a backend pool. [Video description begins] The host is now on the "Backends" tab. [Video description ends] I'm going to click "Add a backend pool" [Video description begins] The host clicks on "Add a backend pool" and a template to be filled appears. [Video description ends] and I'm going to call this "BackendPool1".
Now what I can do here is specify what the backend VMs are. Are they IP addresses or fully qualified domain names? Do I want to add a bunch of individual virtual machines? Do I already have a virtual machine scale set, or an app service? I'm just going to choose "Virtual machine" in this case. [Video description begins] The host has chosen "Virtual machine" in the "Target type" dropdown menu. [Video description ends] And from the target drop down list, I'll choose the virtual machine.
So, I can keep adding multiple virtual machines that would be configured with the same app. In this case, I just have one but that's okay. So I'm going to go ahead and add that backend pool. I'll click "Next" for Configuration. Now, here we see routing rules. I could click "Add a routing rule".
And this is where we have a distinction between a traditional load balancer and what we're doing here with the application gateway, which is an OSI Layer 7 type of item, because it can look way beyond just packet headers that contain things like IP addresses and port numbers. So I'm going to call this "Rule1". For the listener name, I'll call it "Listener1". And I'll choose our public listing from the frontend IP and HTTP or HTTPS depending on what type of connectivity you want allow. I'll leave it just on HTTP, Port 80.
Now, after I've done that, I also have to specify the backend target. So I'm going to use a backend pool that I've already defined, that's "BackendPool1". I don't have any HTTP settings yet, so I'm going to click "Add new" to add some new ones, and I'll call this "HTTPSettings1" for HTTP. And the backend port here will be port number 80. I'm not going to enable cookie-based affinity or anything like that.
And down below, I'm just going to go ahead and click "Add" to add these HTTP settings. And now that's been filled in back here when we were configuring our routing rule. So, down at the bottom I'm going to click "Add multiple targets to create a path-based rule". [Video description begins] When the host clicks on this hyperlink, a template appears titled "Add a routing rule". [Video description ends]
And this is where I can specify, for example, "/media/*" so anything from media in the URL. Maybe I'll call this "Target1" and I can specify some HTTP settings and the backend target where I want to send that. [Video description begins] The host selects "HTTPSettings1" in the HTTP settings dropdown menu. In the Backend target dropdown menu, the host selects "BackendPool1". [Video description ends] So you could configure multiple backend pools to handle different types of URLs.
So /media might go to BackendPool1 because the VMs in BackendPool1 are optimized to stream media. I'll just go ahead and click "Add" and then I'll click "Add" again. So now we've got our routing rule. Of course, we had our frontend and our backend pool. Let's click "Next" for Tagging. I'm not going to tag this application gateway, so I'll click "Next : Review + create". It's going to check the validation which has passed, and so, I'm going to create the application gateway. I'll click the "Create" button.


Load Balancers and Templates
In Azure, load balancers can be deployed and managed using the portal, using PowerShell, using the CLI, and also using templates. We're going to take a look at how to do that here in the portal, how to create a template deployment for a load balancer. So I'm going to start the portal by clicking "Create a resource".
And like I normally would do when I want to deploy a template in this manner, I'm going to search for the word "template" and I'm going to choose "template deployment", and I'll choose Create. [Video description begins] The host is redirected to a new page called "Custom deployment" with various hyperlinks. [Video description ends] Now I could build my own template in the editor if I wanted to do this from scratch and I knew the syntax that I need to use. Or I could go down, let's say, or GitHub, and I could search it up.
For example, if I type in the word "load", I could start with, let's say, "101-internal-loadbalancer-create". I'm going to use that template since I do want to deploy an internal load balancer. So I'm going to select that. I'm going to go down and choose "Select template". [Video description begins] The host is automatically redirected to a template page called "Create a Load Balancer with Inbound NAT Rule". [Video description ends]
The template that you would use would determine what you need to specify for values, in this case, the resource group where I want it deployed. Then, also the VNET and subnet prefix. So, apparently this template is going to create a new VNET and subnet within that region, which is fine. I'm going to go ahead and click" I agree to the terms and conditions".
Now notice, when you're back up here at the top, you could also have chosen to edit the template. And from here you can make changes. So here's the JSON syntax for this particular template. You can see here, it's going to build our subnet, it's going to build our VNET, and so on. However, I'm going to discard that because I don't want to edit the template.
So we're back here where we left off. I'm going to go and click the Purchase button to use this template to deploy our load balancer. And after a moment we'll see our deployment succeeded. So let's just go to all resources here. We're going to look for load balancers. Now notice the template didn't even give us the chance to specify a name for the load balancer.
So I'm going to select "Load balancer", we can see there's only one, here in our subscription, and it's called "loadBalancer1". So this is the load balancer that was deployed as a result of us having selected that template. [Video description begins] The host clicks on the loadbalancer1 and is now at the overview tab. He then clicks on the backend pool tab to examine the details. [Video description ends]
However, if I go into the backend pool, it did create a back end pool but we don't have any virtual machines or scale sets, or anything associated with it. So it did part of the work. Of course, the template could have been coded to do all of the work, but sometimes you'll want to use a template, an ARM template, to get the majority of the hard work done, the underlying work of just creating the resource and getting it deployed. And then you'll want to go in and tweak details in this case like the Backend pool, Health probes or Load balancing rules.


Load Balancer Troubleshooting
Even though you might have successfully and correctly deployed a load balancer configuration, it doesn't necessarily mean that everything's going to work. There could be other problems such as with the backend virtual machines and their configuration. So for example, here in the portal I got a load balancer called LB1 and in the overview blade, over on the right, I can see it has a public IP address.
Okay, I'm going to copy that and I'm going to see if we can pull up the web page for a web app supported by this. Now, that's assuming that your load balancing a specific web app with the front end. So let's open up a new browser window and see what happens when we connect to that IP. [Video description begins] An error message is displayed on the screen. The page requested cannot be reached. [Video description ends] And this is what we get.
I can't seem to pull up anything from that IP address. If I know that I'm load balancing a web app that has a frontend page it shouldn't be showing up, then this is a problem obviously. So what do we do about this? One of the first things we should do to troubleshoot this is perhaps go back to our load balancer and look at the backend pool. [Video description begins] The host comes back to the Microsoft Azure tab and clicks on the "Backend pool" option under the "Settings" section. [Video description ends] So what is being served up here in the backend?
Well, if I look at the backend pool, it looks like a virtual machine called WinSrv2019-1, the status of which is that it failed. Okay, let's click to examine that a little bit. What's the problem? You can have a health probe that checks the health of the virtual machine. And at one point in time it might have had a problem. So if you have a failure with a backend server, naturally that's going to translate to being a failure or a problem with the low bouncers since it depends on them. Now, you might have multiple backend VMs.
If only one has failed, then it means examining the details, clicking links and finding out what the problem with that specific VM is. So back here in the Load balancer, if I go to the backend pool and click directly on it, if that virtual machine is problematic and I can't solve the problem within it, then I could look at the virtual machine association here. This particular backend pool is linked to virtual machines as opposed to a scale set. And I can click the trash can to remove the reference if I couldn't solve the problem with that VM. [Video description begins] The host is now back to the virtual machines tab. [Video description ends]
Now the other thing to do is to also take a look at the actual virtual machine. So I've got it here listed as running, so I'm going to open it up and I'm going to make a connection directly into it. Now, this virtual machine has its own public IP address. If it only had a private one, then I could use, for example, Azure bastion to make a connection to it. But either way, one way or another we need to be able to troubleshoot low bouncing issues by getting into the backend VMs in some cases.
So I'm going to go ahead and click "Connect" here to make a connection to this Windows VM. And I'm going to download the RDP file. [Video description begins] The host is now in the Server Manager dashboard. [Video description ends] So here, within my backend virtual machine, the Server Manager has started up and if I go to "Add Roles and Features" just to step through what I would normally do to install the web server, I can see the web server component is already there. So we should also take a look at the specifics.
In this case for the web app, I should open up the Internet Information Services Manager tool and make sure that the web app, for example, is listening on port 80, assuming that's the load balancer rule and how it's configured. So if I look at "Sites" here, we've got the Default Website and if we just take a look at that by right clicking and editing the bindings well, it is listening on port 80 so it's not like it's listening on port 81 or some non-standard port. [Video description begins] The host is now back on the Azure Portal, at Home > lb1 | Backend pools. [Video description ends]
Back here, in our load balancer, we should probably go to our load balancing rules just to make sure it looks like the correct port numbers are being referenced. This is another important part of troubleshooting and it is: Frontend Port 80, Backend Port 80, which we just verified, was the configuration. The other thing we should do is check out our network security group for our Windows virtual machine. [Video description begins] The host is now on another browser tab, at Home > Virtual machines > WinSrv2019 - 1 | Networking. [Video description ends]
So, when I look at my virtual machine and go to the Networking blade, I can see "Rules". Well, I think we might have a problem here because we don't seem to have an allowance for Port 80. We have one to allow inbound Remote Desktop Protocol on port 3389, Vnet inbound, low bouncer inbound, and then it denies everything else. Well, that's a problem if you don't have an allowance for port 80 here, just like in the OS within the VN there. You want to make sure that you don't have file rules blocking traffic. Well, that's going to be a problem if it's not setup correctly.
So what we're going to do here is going to our network security group and we're going to add a new inbound security rule to allow port 80 traffic. So I'm going to click the "Add" button. We're just going to fill it in accordingly. So the destination port here is going to be Port 80. [Video description begins] The host clicks on the "NSG-Windows" hyperlink in the networking tab. He is redirected to another page, then goes to the"Inbound security rules" tab, under the settings section, and clicks "Add". [Video description ends]
In this case over TCP for our web app [Video description begins] The host changes the "Protocol" from "Any" to "TCP". [Video description ends] and I'll call this Port 80 for the rule. I'll leave the Priority at 110, that's going to be fine, and I'll click "Add" to add the rule to the list. While that's happening, let's go back to our configuration once again for our load balancer because the other thing to think about in the backend pool is that if we click on it, in this case, we'll see our virtual machine. [Video description begins] The host goes back to the "Backend pool" tab that's open on the browser. He clicks on the backend pool to check the details. [Video description ends]
We want to make sure we still have the correct IP address. So currently, when this backend pool was configured, it referred to the virtual machine with an IP, a private IP, of 10.0.1.5. So we want to make sure, for example, if we go back into our virtual machine, that that indeed is the correct private IP address. And it is in this case 10.0.1.5. [Video description begins] The host is now again on the "Overview" tab of WinSrv2019-1. [Video description ends]
So now that we've corrected the problem, which was simply a network security group rule that we added to allow Port 80 traffic, we can see when we connect to the public IP of the load balancer, it's now making the correct connection to the back end web server.


Azure Site Recovery Overview
In a business environment it's crucial that our supporting IT systems are up and running, and that data is available and kept secured. This is where Azure Site Recovery comes in. It's all about business continuity, and also disaster recovery. With Azure Site Recovery we can enable fail over and fail back. This means we can have replication enabled between primary and secondary sites, or Azure regions.
So you could replicate virtual machines, for example, that might be running a mission critical workload. You can also enable application snapshots. So this would take the state of your web application, including memory, transactions, and also any disk files that are related to that. So Azure Site Recovery could be called Disaster Recovery as a Service, or DRaS. Now it's treated as an alternate recovery site as well.
So, for business continuity, you might have a physical on premises facility, or you might have a data center location, or it might be just a corporate network within your building, and you might want to use the Azure Cloud as the alternate network location for IT services. So your primary location is your on-premises network. If something happens to disrupt that, then you could already have had things like physical servers or on-prem virtual machines replicated into Azure that are ready to take over the workload.
What we're talking about doing here is planning for failure. It's inevitable that there's going to be some kind of a disruption at some time, and we don't want to be caught unprepared. We want to have a plan in place before those things happen. Now, you can work with Azure Site Recovery in a number of different types of servers, such as on-premises physical servers can be replicated into the Azure cloud. Azure Virtual Machines can be replicated to a secondary Azure region. You could have VMware Virtual Machines or Microsoft Hyper-V Virtual Machines that you protect with Azure Site Recovery.
Now, not only is fail oversupported, so we can fail over to a virtual machine running in Azure if we have a disruption on-premises, but also fail back. You can fail back to your primary version of a server, for example, on-premises. There are some exceptions, for example, if you try to fail back from Azure to an on-premises physical server, then you're going to have a problem. But if you have an on-premises virtual machine and you failed over to it in the cloud, you'll be able to fail back to it on-premises.


Site-to-Site Recovery
You can protect mission critical Azure VMs by enabling Site Recovery. Now, Azure Site Recovery really lets you copy or replicate a VM to an alternate region, and for that, you're going to need a recovery services vault. We're going to start here in the portal by opening up an existing recovery services vault, because this is one way that you can initiate the process of enabling Azure Site Recovery for a virtual machine.
So I'll scroll down in the navigation bar [Video description begins] The host clicks on the option "Vault1" on the Azure portal. [Video description ends] over on the left and I'm going to choose "Backup items", and notice, among the many things listed here for Azure virtual machine, we have 0 for the backup item count, so we are not yet backing up any Azure VMs. So having done that, that's fine. We're going to scroll up a little bit, and I'm going to click "Site Recovery" over on the left and I'm going to choose "Prepare Infrastructure".
From here, I can determine exactly what it is I want to protect. [Video description begins] The host is now on a section called " Protection goal", the one on the Prepare Infrastructure page. [Video description ends] Is the Virtual Machine in Azure or is it on-premises? [Video description begins] The host selects "On-premises" from the dropdown menu. [Video description ends] And naturally, if I'm doing a migration, I can choose that otherwise, I could choose "No".
Then I can select what it is I'm migrating, whether it's virtualized with Hyper-V, VMware, or if it's a physical server. However, in this case I want to protect an Azure virtual machine, so I'm going to select "Azure" for "Where are your machines located?". [Video description begins] The host goes back on the dropdown menu and changes the "On-premises" option to "Azure". [Video description ends] And I also want to replicate it to Azure, so I'm going to go ahead and click "OK", and then I'll click "OK" yet again.
Then I would click on "Replicate Application" and continue from here. So I'm going to choose the source environment. I've opened up another browser window where we can view our virtual machines. I've got one called WinSrv2019-App1, it's running, and notice it's in the East US location or region. So back here, configuring replication, my source environment is Azure East US and my resource group is going to be Rg8, resource group 8, notice that is where that virtual machine is deployed.
So that's great, that's my source and environment. I'm going to choose OK. [Video description begins] The host is at the "Enable Protection" tab on the second section called "Virtual machines". [Video description ends] There's the virtual machine WinSrv2019-App1, so I'll put a check mark in the box, I'll click "OK". Then I have to select the target location, so from the drop down list I have a number of options. I'm going to leave the selection here of "(US) West US".
Down below, I can see in that target location, it's going to create a new resource group called Rg8-asr. The asr stands for Azure Site Recovery. It's going to do the same type of thing to build a target VNet. I've got a cache storage account here that will be in the source location that's used basically as staging before replicating, in this case, to West US. And it's going to replicate a managed disk because my virtual machine is using one disk.
And down below, we can see the replication policy. So recovery point retention is for 24 hours and app consistent snapshots are taken once every 4 hours. So that's fine, I'm going to go ahead and click "Create target resources". So it's going to create these in the target region, in my case, West US. I'll click "Enable replication". [Video description begins] The host goes back to "Vault1 Site Recovery" page. A window has appeared that says enabling replication for 1 vm(s). [Video description ends]
And we can see in the notification area in the upper right, it's currently enabling replication for 1 VM. And before too long we can see that it successfully enabled replication for one VM. Now, back here in backup items, we still don't see anything for Azure virtual machine because we haven't enabled backup, we've enabled replication, so this is fine. If I go to "Replicated items" we'll see all servers where replication was enabled. We've got one that failed here, normally due to an unsupported configuration or operating system.
But our Windows server hosting our app is listed as healthy when it comes to replication health. Although notice, still at this point, while replication is enabled, 0% is synchronized. So you can watch over this and click the "Refresh" button to track. Let's just flip over to our other open window here where we have our virtual machine selected and in the navigation bar. I'm going to scroll down under "Operations" because I want to click on "Disaster recovery". This is where we will see the fact that we've got replication enabled.
Now, it's still 0% synchronized, and if we were, for example, to go to "Properties" we can see a lot of the properties, again, 0% synchronized. We can see the active location, the replication policy, and if we take a look at "Compute and Network", for example, compute and network resources, we could see it was unable to retrieve anything, because initial synchronization is still happening, and if we click on "Disks" we could still see that it looks like it's synchronizing the OS disk to the target location, so to the replica disk name.
And if we go back and take a look here we can see that it's 97% synchronized, still looking at the Disks blade, it's almost done. Back here, in the recovery services vault, we're still looking at Replicated items. I've clicked "Refresh" and notice now our replication health is healthy and that status now says "Protected".


VM Failover
In this demonstration, I'm going to use the portal to test virtual machine failover in Azure. Now, I've already enabled replication through Azure site recovery, for an Azure VM. So, essentially replicating from Azure to Azure, replicating a VM to another region. Let's take a look at how to test failover. [Video description begins] The host is at the Virtual machines page of the Azure portal. [Video description ends]
So I'm going to open up an existing virtual machine, where I've enabled replication. Now we can check this out in the navigation bar by going down under "Operations" and by clicking on "Disaster recovery". When I do that, in the "Overview" section, I'll get an indication as to whether or not protection is enabled.
And we can see here, the status is "Protected" and that the "Replication health" for this VM is such that it is "Healthy". However, it says "Last successful Test Failover", "Never performed successfully". Well, as part of a recovery drill in the event of a disruption, such as in the primary region of a virtual machine, we should go through and test failover for mission-critical workloads running in these VMs.
So I'm going to do that. I'm going to click the "Test Failover" button up here at the top. So, for the "Failover direction", it already knows where I'm failing over from, "East US" is the primary location. I've already enabled replication. So there's a copy of it in "West US". That's already set and it's grayed out, I cannot change it, and that's normal. What I can select is the "Recovery Point". So I might have numerous recovery points over time that I would like to use for performing this test failover.
So what I'm doing is failing the VM over to the recovery point that I select here from the list. And if you've got multiple VMs, you might actually have this set up through a recovery plan. You can use failover for multiple VMs at once. But in this case, we don't have a recovery plan, it's just a single VM. I need to choose the virtual network, the "Azure virtual network", where I want this created. You want to make sure that this is not one that's used for mission-critical services and production. And after that, I'll go ahead and click on "OK".
We can see it is now starting the test failover for this VM. So, at this point, if I were to look at my list of virtual machines, I should notice the presence of a new virtual machine. It's named similarly to the original except it has "-test" added at the end. It's running and we can see it's in the target "Resource group" that we selected when we tested failover. Also notice it's in the target region, in this case, "West US". The source region is "East US".
So we could test connectivity to an app running within it or remoting into it for RDP and whatnot, if we wanted to fully complete this test. However, at this point, I am finished with that. So I've tested the failover. [Video description begins] The host closes the Virtual Machines tab and returns to the Overview tab of the source Virtual Machine. [Video description ends]
So, if I go back to my source virtual machine, and if I take a look at the disaster recovery options, we now have the option to "Cleanup test failover". So I want to make sure I do that to delete the newly created virtual machine. [Video description begins] The host clicks on the "Cleanup test failover" tab. [Video description ends] I am just going to put in some notes here. "Testing is complete, delete test failover virtual machines". I'll turn on that checkmark and I'll click "OK".


Azure Backup Service Overview
Data backup provides availability in the event that production data becomes corrupted or deleted in some way, we can restore it from backup. And there are a few considerations when using "Microsoft Azure Backup" services. We can back up "On-premises" data in the form of "Files and folders". Even "Hyper-V and VMware VMs" we're hosting on prem, "SQL server, Exchange server, SharePoint server installations.
We can even back up system state, which would include things like operating system boot files, registry settings on a Windows Machine. If it's a Windows domain controller server, even backing up the database for active directory is part of system state. Then we can also perform a "Bare Metal recovery". When you set up a "Bare Metal recovery", what you're really doing is telling Azure Backup you want to backup the entire operating system, so all the OS files and the data on those volumes. So really, it's everything except for user data.

To work with Azure Backup, you need to install the "Microsoft Azure Recovery Services Agent", or the "MARS" agent, on your server that contains the services you want backed up. And that will allow the communication to the Azure cloud, specifically to the recovery services vault for backup purposes. Azure backup lets you backup Microsoft Azure virtual machines, "Azure SQL Database" and "Azure File Share".

The process for setting up on-premises backup, let's say if we have an on-prem Windows Server we want to back up to the Azure Cloud, would be to first make sure that we have a "Recovery Services Vault" created in Azure. Next, we would "Download and install the MARS agent" on the server, whose services we want backed up. And then we would "Register MARS agent with the recovery services vault". Then after that you can enable the backup for the services on that server where the MARS agent is now installed.


Recovery Services Vault
That's going to let me create a recovery services vault. So I'm going to choose "Create". [Video description begins] The host is at the "Basics" tab of "Create Recovery Services Vault". [Video description ends] Okay, so I need to tie this to a "Resource group". I'll do that, I'm going to call this "Vault1". [Video description begins] From the Resource group dropdown menu, the host selects "Rg1". [Video description ends] It's going to check that that name is valid and it is, and it's going to be in the, let's place that vault in our configuration.

Let's leave it actually in the "Canada Central" region. I'm going to put it there. I'm going to click "Next" for tagging. I'm not going to tag this fault. And after that, we're just going to click "Review + Create" and after which we will click "Create". So we're deploying a recovery services vault. [Video description begins] The host is redirected to the a page with a message that states "Your deployment underway" and after that, it states "Your deployment is complete". [Video description ends]

So now the vault has been deployed. I'm going click "Go to resource" so we can take a look at it. So you can think of a recovery services vault in Azure as being essentially the launching pad for your business continuity solutions. So for example, let's scroll down here and I'm going to click, under "Getting started", "Backup".

This is where we can determine if we want to backup items sourced in "Azure" such as "virtual machines", "SQL Server", "Azure FileShare". Or we might select "On-premises" and choose "Files and folders", or on-premises "Hyper-V" or "VMware Virtual Machines", on-premises "SQL Server", "SharePoint", "Exchange", and so on. [Video description begins] The host goes through the different options to select from the dropdown menus. [Video description ends]

We can also go to our "Site Recovery" option on the left and [Video description begins] On the "Site Recovery" tab, the host clicks on the "Prepare infrastructure" option and is redirected to the corresponding page. Currently, the first section is open, named "Protection goal". [Video description ends] start to prepare our infrastructure.

This is where we might choose, okay, we've got our virtual machines that might exist "On-premises". We want to make them available for high availability in "Azure". It asks, "Are you performing a migration?" Well, we could do that, but I'm going to choose "No". And I can tell it that my source on-premises would be "Hyper-V" or "VMware virtual machines" or they're not virtualized.

You can actually enable failover for an on-premises physical server to an Azure VM Failback isn't supported in that context to the on-prem physical server but failover to the VM in the cloud is. Also, here, we have a number of other options available within the recovery services vaults, such as configuring "Backup policies". [Video description begins] The host closes the "Site Recovery" tab. Back on the Vault1 page, he clicks on "Backup policies" tab on the left, under the Manage section. [Video description ends]

So not only are we talking about high availability, such as for virtual machines, but also the ability to back data up into the Azure Cloud. Which really enables data high availability. So the Recovery Services vault then allows for all of this disaster recovery planning.


Azure Backup Policies
In this demonstration, I'm going to use the portal to create a backup policy within a Recovery Services vault. So I've already got a vault I've created here, it's a recovery services vault, it's called "Vault1". So I'm going to click to open it up. And within its navigation panel on the left, I'm going to scroll down until I get to the "Manage" section where I can see "Backup policies". So I'm going to pull up that blade.

And I see on the right I have two default backup policies here automatically. One is called" HourlyLogBackup" for "SQL Server in Azure VMs". And the other is called "DefaultPolicy", it's for "Azure Virtual Machines". However, I want my own custom policy for "Azure Virtual Machines". So I'm going to click the "Add" button.

You might even have a policy for "Azure Virtual Machines" that applies to only some, where you want to use the default VM policy for others. Either way, in this case, I can select" Azure Virtual Machine", "Azure File Share", "SQL Server in Azure VM," or "SAP HANA in Azure VM". But we're talking about "Azure Virtual Machine" backup policies here, so I'm going to select that. First thing I have to do is give this a name.

So I'm going to call this "ProdVMs", as in Production Virtual Machines. And we can set the backup schedule, whether it be daily, or weekly. I'm going to leave it at daily and I can set the time of the day I want that to fire off. So maybe after hours, at 7:30 PM, and I can select the specific time zone if I so choose, or I can use "UTC". Next thing is, how many days do we want to use retention of instant recovery snapshots? The default here is two days and I'm going to leave that.

As we go further down, we have the retention range of the backups, which is going to be 180 days, that can be changed. I want the retention of a weekly backup point. And we can also specify details related to the "monthly" and "yearly" backup point retention period. So we can specify the details when exactly that is going to be taken, and for how many months or years in the case of the yearly backup point that we want that retained.

If you're using Azure services that set up VMs for you in the background, in other words managed VMs, you can also specify resource group information for those. Specifically to store their recovery points. So I'm going to go ahead and click "Create" to create this policy. And before too long, it's done. So let's just go back to our "Vault1" Backup policies.

We can now see we've got a new policy called "ProdVMs" and it's of type "Azure Virtual Machines". We can click on it to open it up at any point in time to see the details that were configured. And at any time, we could go back and modify and change whichever options are required. So this backup policy, then, can be selected when we start enabling backup for Azure VMs.


Azure VM Backup and the Portal
One way to enable backup for an Azure VM is to use the portal. So to get started here, I'm in the "All resources" view, I'm just going to filter the list for my vault. I've got a recovery services vault called "Vault1", and it's in the "Canada Central" region. And I filter this again looking for a virtual machine called "AppServer1", it's also in the "Canada Central" region. So I want to enable protection of "AppServer1" to my vault, "Vault1", [Video description begins] The host is at the Azure portal and uses the search bar to look up the relevant information. [Video description ends]

I want to set up backup. So I'm going to click on my server, my virtual machine. And what I'm going to do in the navigation bar on the left is scroll down under "Operations" and I'll choose "Backup". Now when we look at it from this perspective, we have the option of configuring backup from here. You can also do it from the vault, but I'm going to continue from this perspective, from the VM's perspective.

We can either create a new recovery services vault but there's no need, we already have one in this region called "Vault1". Within the vault, we can select the appropriate backup policy. I've got a custom backup policy I created previously called "ProdVMs". The backup policy determines things like retention periods for backup and restore points.

So I'm going to go ahead and set "ProdVMs" as the backup policy in this case. And we can see that when I do that, it starts showing me down below some of the details within that policy. So the "Retention range" for "daily backup points", "weekly", "monthly", "yearly". I'm okay with that, so I'm going to go ahead and click "Enable backup". [Video description begins] The host is now back to the "All resources" page of Microsoft Azure. [Video description ends]

After a moment, we can see on our notification area that it succeeded, the backup configuration. So let's take a look at this time from the perspective of the, well, let's start with the server. But then we're going to go into the "Vault1", and see what it looks like on that end of things. So back here in our virtual machine, [Video description begins] The host clicked the Appserver1 and is now redirected to its "Overview" page. [Video description ends] let's go back to where we enabled backup.

So I'm going to pull up the "Backup" blade. This is where we initially came to link it to our vault. So instead now, of course, we have a status screen. So we can see any "Alerts" or "Jobs", and we can see the "Last backup status". So it says, "Initial backup pending" because we just enabled them. We can also see the affiliation of this VM with the "Recovery services vault" and the "Backup policy" that's currently in use and any restore points that are available.

Notice we also have the option to perform an on demand "Backup now". So I'm going to go ahead and click on that. We can specify the retention period for this backup, I'll accept the default value, and I'll click "OK". I don't have to do that because we have it scheduled. But, however, we can perform on demand backups whenever we feel the need. So I can click the "View all Jobs" link to get to the jobs page, where we can see the configuration of backup for various servers, including "AppServer1". And we can see that currently a backup is in progress.

So what's happening is a snapshot of the VM is being taken and the backup is stemming from that. So therefore, production workloads are unaffected when it comes to performing these backups, to protect your data in your Azure VMs.


Azure VM Backup and the CLI
In this demo, I'm going to use the CLI to enable backup of an Azure VM. Before I do that here in the portal, let's go to the VM in question called "AppServer2". We can see its state is that it's currently "Running". So I'm going to click on "AppServer2". The reason is because first of all, I want to check to see that it's not already associated with the recovery services vault because it can only be associated with one vault at a time.

So I'm going to scroll down under "Operations". I'm going to click "Backup". And what we should see is it prompting us to associate it with the vault. And that's great. It's not associated with the vault, but we don't want to do it here in the portal. While we're in here though, I'm going to scroll up and choose "Properties", because what I want to take note of is the ID, the "Resource ID" here for the VM. So I'm just going to copy that. [Video description begins] The host scrolls down to reach the Resource ID and copy it. [Video description ends]

We could acquire that in many different ways, including from the CLI, it doesn't matter. But I'm going to want that information because I'm going to want to check that backup protection was enabled in the CLI. And I'm going to need the ID to do that. So let's go into the CLI. [Video description begins] The host opens up PowerShell. "PS /home/danlachance72> is already written on the screen. [Video description ends]

So to enable VM backup, I'm going to run the "az backup protection", after which I'll then specify I want to enable it for VM. So "enable- for- vm- -resource- group", it is "Rg1". That's where my virtual machine is deployed in my vault as well. "--vault-name". And I'm going to specify my vault which is called "Vaul1 -- VM" and it's called "AppServer2". And I also have to specify the backup policy I want to use. So "--policy-name", the policy is stored within the vault. I'll just use the default one which is called "DefaultPolicy" and I'll press Enter.

Well, if you don't spell the name of the vault correctly, you'll get an error. Let me just spell that correctly and press Enter once again. Okay, and we have our returned JSON output. So all looks good. Let's clear the screen. Now what I want to do is just check the status. And we can do that here with "az backup protection check -vm".

This is where I need the "VM ID", [Video description begins] The host clears the Powershell screen and pastes the vm ID that he copied previously. [Video description ends] you can see from the parameter of the same name. And I've pasted in the resource ID for the VM that we copied from the portal previously. Let's press Enter and see what it returns back. [Video description begins] A message appears in the Powershell that reads "Command group backup is in preview. It may be changed/removed in a future release". [Video description ends]

Okay, this is good. What it's really telling me is yes, that backup protection is enabled for that VM and it's associated with Vault1. We can do the same thing by going back into the GUI and taking a look. So why don't we do that just to make sure? [Video description begins] The host minimizes PowerShell, returns to the Overview blade of the AppServer2. [Video description ends] So I'm just going to flip over to a different blade here in "AppServer2"'s properties.

And let's go all the way back down, yet again, under "Operations", and click "Backup". Because remember last time, what we were seeing is it was prompting us to associate the VM with a vault. Well, now that's no longer the case because we associated it with a recovery services vault for backup purposes using the CLI.


Azure VM Backup and PowerShell
In this demonstration, I'm going to be using PowerShell to enable Azure VM Backup. Now, in order for that to happen, you need a recovery services vault. Let's just take a look for that here in the portal just for a second. So I'm going to go to "All resources", and well, actually, we can just filter it from here, that's just as well. So I'll just type in a couple of letters here to make it unique, there it is, "Vault1". I want to just double check, first of all, that there is a set of "Backup policies" in here.

There always are, there are a couple of default ones, including one called "DefaultPolicy". [Video description begins] The host is on the "Backup policies" tab of Vault1. [Video description ends] Okay, so we know we've got a vault called "Vault1". And we've got a couple of policies, specifically two of them that can be used for backing up Azure VMs. The policies themselves contain a lot of settings related to backup frequency and retention range, I want to keep the backups at the monthly and yearly level, for example.

[Video description begins] The host clicks on the Default policy. It displays the backup frequency and below it, it reads Daily at 1:30 AM UTC. It displays the retention range, the retention of daily backup point and the retain backup taken every day at 1:30 AM for 30 days. [Video description ends]

All right, let's go back and take a look at our VMs. I've got one in this list called "AppServer3", not yet associated with the vault but it will be when we're finished here in PowerShell. [Video description begins] The host opens up PowerShell. It reads PS /home/danlachance72. [Video description ends] So to get started, what I'm going to do is create a policy variable, so "$policy". What I'm going to store in there is the return result of running "Get-AzRecoveryServicesBackupProtectionPolicy", that's a long cmdlet name, that's what it is. And all I'm going to do is specify that the policy name I'm interested in is "DefaultPolicy".

Now, I don't have to put that in a variable, I can just specify it on the command line. So the first thing I'm going to do here in PowerShell, is I'm going to run "Get-AzRecoveryServicesVault". And I'm going to point to a vault named "Vault1". And I'm going to pipe that to the "Set-AzRecoveryServicesVaultContext" cmdlet. We need to set the context so we're essentially pointing to Vault1. [Video description begins] The PowerShell now displays four warning messages. [Video description ends]

Now, you might get some messages that this cmdlet will eventually be deprecated. You also have little note here that says if you want to suppress this message because it's not deprecated yet, then you can go to that web URL and figure out how to do that. I'm not going to suppress the messages, I don't mind it. The next thing I'm going to do is create a policy variable.

Now that we're pointing to the right vault in our context, I'm going to make variable called "$policy". It's going to store the result, retrieving the policy from the vault using the" Get-AzRecoveryServicesBackupProtectionPolicy cmdlet. [Video description begins] The host clears the PowerShell screen and pastes the $ policy again. [Video description ends] That's a mouthful, and I'm going to give it the name, the name of the policy that I want is called "DefaultPolicy".

So I'm going to go ahead and press enter to get that into the variable. Okay, now, that we've got that, we can actually enable protection or backup for an Azure VM using the "Enable-AzRecoveryServicesBackupProtection" cmdlet. I'm going to specify the resource group and the name of the virtual machine that I want to enable protection for. And then finally, "-Policy", I will pass it my "$policy" variable that we've set above.

Let's go ahead and press Enter and get this going. And before too long, we'll see that the operation is completed. So "ConfigureBackup Completed", so looks like it's been done. [Video description begins] The PowerShell screen reads: Workload name appserver3, operation configure backup, status completed, StartTime 4/3/2020 5:38:21 PM and EndTime 4/3/2020 5:38:52 PM. [Video description ends]

Let's just check our work here in the portal. So that was "AppServer3", so if I click on that, and [Video description begins] The host closes PowerShell and returns to the Azure portal. He clicks on Appserver3. [Video description ends] if I scroll down in the navigation bar, if we go down to "Backup", now, "Backup", of course is way, way down underneath the "Operations" section. So under "Operations", I'll click "Backup".

Normally it would be prompting us for associating the VM with a vault but it doesn't here, because it's already associated with the vault because we set it up in PowerShell. We can see here, "Vault1" is what it's associated with using a policy called "DefaultPolicy".

Azure VM Restore
Let's first check out what's there, what kind of backups are there. So it looks like we've got an "Application consistent" backup. And it looks like it was taken on a specific date and time, we can even click the "View All jobs link" and we would see here that a backup was taken and successfully completed. [Video description begins] The host closes the "View all jobs" link and goes back to "Backup". [Video description ends] Okay, that's perfect.

So now what we want to do is restore. Notice that we have a couple of options at the top, we can choose "Restore VM" and we can choose "File Recovery". As you might imagine, restoring the VM restores the entire virtual machine and you have a couple of options when you do that. And you'll see that if we click on it, we have the option of restoring to a new virtual machine or we can overwrite the existing one.

[Video description begins] The host is at the Restore tab which consists of two steps: 1. Restore point and 2. Restore configuration. [Video description ends] So I'm going to select my restore point and I'll click "OK". And this is where you'll see you can "Create new", or "Replace existing". So creating a new virtual machine means specifying a name for the VM and setting up the affiliation for the "Resource group", the "Virtual network" and the "Storage account". Whereas up the top if we chose "Replace existing", we get to determine that we want to replace the disks and we chose a storage account for a staging location to get the VM back to the point in time specified by the snapshot. So that restores the VM itself.

But what if the VM config is good, it's just some of the data within it that we need to restore? [Video description begins] The host closes the "Restore" tab and goes back to "Backup". [Video description ends] That's where file recovery kicks in. So let's click on file recovery, choose a restore point, and the next thing to do is to click "Download Executable". Because this is going to download a script that will let you mount the backup as a local drive where you run the script. And from there you can cherry pick which items you want to restore.

That's exactly what I'm going to do. So I'm going to download this executable. When I click that it generates a script and a password. So I'll see that down here after, which is unique to this mounting session. And after it generates it, the script will be available for download. So I'm going to go ahead and download it. [Video description begins] As soon as the host clicks on "Download", a cmd window pops up. It reads: "Please enter the password form the portal as is and press enter:". [Video description ends]

When I run the script, it asks me to enter the password that's provided in the portal and that was generated down here. So I'm going to go ahead and copy that to the clipboard. And, I'm going to paste it in here, where it's being asked for, and I'm going to press Enter. [Video description begins] A PowerShell window automatically launches. [Video description ends]

Now depending on your machine, you might have to download that script and run it with administrative privileges. But anyways, this is what it's going to look like, "Connection succeeded". It's going to attach the volumes for the recovery point. And then, we can see now here we have a new drive. [Video description begins] As the connection succeeds, a windows notification window pops-up to inform that there is a new drive. [Video description ends]

So let's go ahead and take a look at this in Windows Explorer. [Video description begins] The host is now in File Explorer, in drive F. Various folder directories can be seen. [Video description ends] So now here in the file system, I can see I now have a drive letter F, which is showing me the contents of what was backed up from that VM. So I could cherry pick the items I want to restore by copying and pasting. Back here in PowerShell where the script ran, we can see drive letter E was a system reserved disk and F, the windows partition of our backup VM.

Then says, open up Windows Explorer, browse for your files, copy them, and then go to the portal and go to step three where you need to unmount disks. So back here in the portal that's just down below here, step three, "Unmount the disks after recovery". So I'm going to go ahead and click that. And then we'll get a message after a moment that says that the unmount was successful. So we're done. We were able to restore or recover files from a backup Azure VM.


File Server Backup
You can enable protection for on-premises file servers, whether they're physical or virtual, so that you can back them up to the cloud. The only real requirement is having a recovery services vault and then installing a backup agent on the server that you want to protect. So to get started here, let's go into a vault that we've got defined previously, a recovery services vault here in the portal. And in the left hand navigator, I'm going to go into the "Getting started" section and I'm going to click "Backup".

Now it says, "Where is your workload running?" Well, in this case, it's going to be "On-premises". Then it asks, "What do you want to back up?" Well, we can see there's quite an array of options here. "Files and folders", "VMware", and "Hyper-V virtual machines" that we might be hosting on-premises, SQL servers, SharePoint Exchange, "System State", "Bare Metal Recovery". The list goes on and on.

In this example, we're going to select "Files and folders" that will go under the next step to "Prepare infrastructure". I'll click on that button. So it says you need to download the agent for Windows Server or for the Windows Client. Okay, so I can click that link to download and then install the agent. So I'm going to go ahead and click that link because I want it installed on this local host where I'm running this from and I'm going to click "Run".

[Video description begins] After clicking on "Download Agent for Windows Server or Windows Client", a small window pops up at the bottom of the screen. The host clicks on Run. [Video description ends] And I'll proceed through the installation wizard. I'll accept the default "Installation folder" and "Cache location". I'll click "Next". No proxy settings required to get to the Internet. Then I'll click "Install".

Alright, now that the installation is complete, the next phase of the configuration, if you will, is to proceed to registration. [Video description begins] The host clicks on the option "Proceed to registration". A new window opens up called Register Server Wizard. [Video description ends] We need to register this server with the recovery services vault.

For that, we need vault credentials. Well, back here in the background in step two after we've downloaded the" Recovery Services Agent", we can turn a check mark on to that effect after which we can download the vault credentials file, [Video description begins] The host enables the option that says "Already downloaded or using the latest recovery services agent" and the "Download" button is activated. [Video description ends] which we need to complete the registration. And that file is good for two days.

So I'm going to go ahead and download it. [Video description begins] The host clicks on the "Download" button and the Register Server Wizard window opens up again. [Video description ends] Back here during the installation, I'm going to go ahead and click on the "Browse" button to select the vault credentials file that I've just downloaded. [Video description begins] The host clicks on the Browse button, the field "Vault credentials" is filled in automatically and more details about the vault appear. [Video description ends]

So it knows the name of the "Backup Vault", the "Region", the "Subscription identifier", and of course it expires after two days as you know. So now that we've got that in there, let's go to next, we can either enter a "passphrase" or generate one. [Video description begins] The host is now at the next step, called Encryption Setting. [Video description ends] This is for protection of the backed up data.

So I'm going to go ahead and choose "Generate Passphrase" and we can then specify a location to save it. And after you specify that, you can proceed with the "Server registration". [Video description begins] The host is now at the last step. There is a message that reads "Microsoft Azure Backup is now available for this server", along with a warning message. [Video description ends] Alright, and the server has been registered, we just have a warning about storing that generated passphrase locally.
So I'm going to go ahead and "Launch the Microsoft Azure Recovery Services Agent" that's checked on by default. So I'm going to go ahead and click "Close". Okay, so it took us into "Microsoft Azure Backup", where over on the right I'm going to choose "Schedule Backup". And I'm going to go through the "Wizard", I'll click "Next" and I'm going to click "Add Items". And I'm going to select some files on a disk on this local host that I want to back up to Azure.
We have the configuration, now we have the back up actually taking place based on that configuration. [Video description begins] The host clicked on next and the wizard is now transferring the relevant data. [Video description ends] And after a moment, we can see that the job has completed. So I'm going to go ahead and click "Close".
Now back here in the portal, if we go back into our vault and if we look at "Backup items", then notice we have a reference here for "Azure backup agent". We have one listing here. [Video description begins] The host clicks on the listing and is redirected to a new page. [Video description ends] It's for drive D on a computer. Here's the computer name. And we can also see the last backup date and time.


Azure VM Soft Delete
In Azure, the soft delete option as it relates to Azure virtual machines is designed so that if you've enabled backup of Azure VMs, it will protect deleted backup data. So in other words, if you delete a VM and you haven't enabled backup for it already, then soft delete does nothing for you. So notice in this list, we do not see a server by the name of "AppServer1", [Video description begins] The host is at the Virtual Machines tab of the Azure portal. [Video description ends] It starts at "AppServer2" and goes on from there.
Well, if we go into an existing vault, then we're going to see references. [Video description begins] The host clicks on Appserver1 of the Azure portal. [Video description ends] When we go to "Backup items", choose "Azure Virtual Machines", I see a reference to "AppServer1". [Video description begins] Under Protected items, there is the Backup items option and the Replicated items option. The host clicks on Backup items. On the list, the host clicks on Azure Virtual machine option and he is now on a list with server names. [Video description ends]
So that was a virtual machine that at one point did exist, but the virtual machine has been deleted. Luckily for us, a backup was taken prior to it having been deleted. And so what I can do then is select "AppServer1" and I can choose to restore the VM or recover files from it. So for example, let's choose "Restore VM", so from here, I can choose a restore point, "OK".
Well, because in this particular scenario, the VM no longer exists, we would choose to "Create new". Now, that's for the VM, on the data side, if we were to choose "File recovery", [Video description begins] The host closes the window of Restore Configuration and returns to Appserver1. [Video description ends] then we would download the executable script which I'll click on. It's going to generate a password, so that we could mount the backup and still recover files from that backed up VM, even though the VM itself no longer exists.
And we can see it's made a connection and it's provided drive letters E and F to us. So those will show up on my local computer in Windows Explorer. And I can browse through the backup files and copy what I need. And once I'm finished, I can return to the portal and go into step 3. [Video description begins] The hosts minimizes the blue window and goes back to File Recovery on the Microsoft Azure portal. [Video description ends] Which I will do here, so if I scroll down, I can click "Unmount Disks".
And there you have it, that's how we can get data back if it's been backed up already from a VM that no longer even exists.

                    
Azure File Shares and Storage Overview
An Azure storage account can house multiple types of storage, including blobs or binary large objects. In other words, allowing files to be uploaded into the storage account. There are block blobs. Now block blobs are normally what we would use if we are uploading smaller files that might result from office productivity tools. 
Such as word processing apps, or presentation apps, or spreadsheet apps, that type of thing or maybe graphic logo files that would be considered block blobs. Append blobs, as the name implies, are a file that would normally by its nature need to be added to constantly. Think of log files, where they're constantly being written to at the end of the file. Then there are Page blobs. Now these are for larger files to support random access. Now what that means is they're not necessarily read or written to in a sequential format. Think of virtual machine hard disks, they would be uploaded and treated as page blobs in an Azure storage account.
Then the storage account can also house Azure files, which are essentially shared folders in the cloud. The idea is we can allow shared folder access for our cloud based Azure file share, from on premises devices or from devices in the cloud like virtual machines. So the operating system would need to support connecting to shared folders using SMB v3.0.
So it's kind of like what you might use even in UNIX and Linux or the macOS, when you mount a remote mount point to appear locally in your file system. Normally, that's done for NFS type of connections over the network using the NFS protocol, but in this case it would be for SMB compliant shares. The storage account also allows for what's called Azure Table Storage.
This is No-SQL based. What does that mean? Well standard SQL compliant solutions where SQL stands for Structured Query Language would include things like Microsoft SQL Server, Oracle Database Server, MySQL, all kinds of different variations where you have a strict definition of blueprint of what's allowed to be stored. So you'd have table definitions, and in each of those tables you would have columns or field definitions with data types.
And you can link tables together. Well, No-SQL doesn't do any of that. It's an unstructured schema, where the storage of one record can be completely different than the underlying blueprint for storing the next record. So it could be many different types of data. And it uses key and value pairs for storage, much like you might have experience with if you've worked a lot with Azure resource tagging, and key and value pairs.
A storage account can also accommodate storage queues. So we would have queue storage in the Azure cloud. And that's done within a storage account. And software developers can write code for app components, such as in our example app component 1, could write a message into a storage queue in Azure. And then app component 2, if it's busy or unavailable over the network.
When it does become available, it can read messages that it's supposed to read from app component 1. And this way, we have data exchange between different software components.


File Shares and the Portal
In this demonstration, I'm going to configure Azure file share. Azure file share is essentially an SMB compliant shared folder hosted in the cloud environment.  
You don't need your own server to set up a shared folder. So to get started here in the portal, I've navigated to an existing storage account.
And within that storage account, I'm going to scroll down in the navigation bar until I see File service, and I'll click File shares.
Now I don't have any file shares defined yet, but that's going to change in a moment.
So I'm going to click add a File share up at the top. And I want this to be called projects.
And I'll set a maximum Quota for storage, let's say to 5 GiB.
And then I'll click Create.
So we can now see we've got the project's file share here.
Now much like a blob container, you can go into it and start uploading content.
So uploading files, you can add a subdirectory if you really want to, but I'm not going to do that.
I'm just going to click Upload, and I'm going to upload a file or two.
So I specified a couple of file names here.
I'll just upload them and because they're small text files, it won't take long for them to show up.
So we can now see we've got Project_A, B, and C.
They're text files, and they're in the projects share. Now at this point, we need to talk about connectivity. So it's one thing to create the file share.  
But what about making a connection? Well, the connection is available. For example, if we click the Connect button at the top, it gives us instructions depending on the platform in question.
Whether we're mapping a drive letter in Windows, or whether we're making a connection as a Mount point from Linux or the macOS.


File Shares and the CLI
You can use the Azure CLI to configure an Azure file share, so essentially a shared folder in the cloud.
In order to do that, you have to think about the storage account where you want to define that Azure file share.
And you also have to think about an access key that you will use to get permission to create it from the CLI.
So we can see the name of our storage account in this example is storacct333325.
And down below, I can see of course, as is the case with every storage account there are two access keys.
So I'm just going to go ahead and copy the second access key. And I'm going to span a cloud shell environment.
Now, here in the CLI I'm going to run az storage.
So presumably file share are part of the storage nomenclature and -h for help.
After which I can then learn and start guessing at what would be next such as share for managing file shares.
That sounds about right. So if I do an az storage share.
And then specify -h for help, we'll learn more about how to use that syntax such as creating an Azure file share.
Let's get to it, az storage share, create --account-name.
So this is the name of the storage account, and then that in our case is storacct333325 --account-key. Well, this is where I'm going to paste in the key that I copied previously when we were in the portal a moment ago. --name, what I want to call this is budgets. So I'm going to put in budgets as the name of the share. I can also set the quota, --quota in GiB, so maybe I'll just put there 5. And that's pretty much it, I'm going to press Enter to create that azure file share.
And it says "created": true. Now, notice if I try to run other CLI commands like az storage share list it says well, not quite, you need to give us some credentials, such as with account name and account key.
No problem, so we can make that happen. az storage share list, not really should have stored those variables, but that's okay, --account-name. We know what storacct33325 and the --account-key parameter. And I can just see that up there, so why don't I just copy that again, just to make sure I still have it on the clipboard, and we'll Paste it in here, and we'll press Enter.
And now we're seeing everything that's listed but as usual, it's providing all of the metadata. I just want to see the names, okay? Let's clear the screen. Now, because we're in PowerShell, we can get away with either clear, the word clear or cls, it doesn't make a difference.
Up arrow key to bring up that previous command at the end I'm going to add --query, [ ] Because we've got an array of items being returned, multiple shares. And I want to call upon the .name property for each of them to only see the names. And there's the one that we've just created, budgets.
Let's take a look at it from the perspective of the GUI.
So here in my storage account in the portal, I'm going to scroll down in the navigation bar, until I see File service and File shares.
Just give it a moment to update, and there's budgets.


File Shares and PowerShell
In this demonstration, I'll use PowerShell to create an Azure file share.
Remember that a file share is a shared folder hosted in the Azure cloud through a storage account. So that means that we're going to need command line access then to the storage account. And one way to get that access is to use a storage account key.
So I'm going to go ahead and run the Get-AzStorageAccountKey cmdlet. I'm going to specify the resource group and name of an existing storage account. Whose keys I want to return.
Now returns both keys. Every storage account has two keys, you can change one for security purposes while the other one remains intact. Now if I want to get a specific one of these keys, I'll just use the up arrow key to bring the previous command back up. To get a specific key I can ask for example, the first one I'm going to make a variable here called $key equals Get a then contain the rest of the command as per I entered it previously.
But I'm going to change it a little bit, because what I want to do is place that entire command in parentheses. The reason is because I want to treat it as a single statement, after which I then want to call upon the. and then a property or call upon a property specifically in this case, the value property and I want value[0]. So I want the first item.
That's the first key, in other words when I press Enter, and if we return the key variable, you can see indeed that value zero really is the first item in the array.
It's the first item in the value property array.
So we've now got that stored in a variable. Great, next thing I want to do is make a context variable so that we can essentially lump together the name of the storage account and also the key and just refer to the context variable. So I'm going clear the screen cls and make a $ctx that's just for context and that's going to equal New-AzStorageContext and I'm going to give it the storage account name -storage account name which in this case is storeacct33325, that's the name of my storage account. And I also want to specify the -storageaccountkey. Well, we have a variable now so that's too easy. We just refer to $key for that. Alright, we now have a context variable.
Now what I want to do is actually create my file share. So now essentially we have pointers to the storage account. We have a storage account key to be able to do this. So we're good, so I'm going to run New-AzStorageShare. And the name I'm going to assign to this in this case, let's say is East-Logs. And then I'm going to specify my context variable. -context is going to be $ctx, then notice it returns an error.
Well, if I change the name here to reflect lowercase letters, and press Enter, it works.
So you'll find that a lot of items related to storage accounts are case sensitive. In other words, uppercase letters are not accepted. Anyway, it looks like it worked. Let's verify this we can run get-azstorageshare. Now notice it says don't have a storage context.
Well, that's the same thing that we did up here. When we built the share.
We use -context and gave it the variable, no problem. Let's bring the up arrow key up there to bring that previous command up on the screen -context $ctx.
And there it is, now we can see the existence of our new share east-logs.
And of course, we'll see the same thing if we go into the portal.
So if I Refresh my list of file shares for that storage account, there's east-logs.


File Share Mapping and Windows
In this demonstration I'm going to map a drive letter from an Azure Windows virtual machine to an Azure file share.
So here in the portal, let's start by looking at a storage account where the file share's been defined. So I'll scroll down in the navigation bar for the account. Go down under File service and choose File shares where we'll see we've got a projects file share.
And so if I open that up, it's got some files in it.
See Project_A, B, and C, they're text files.
So this is just essentially like a shared folder on a file server that you might have on-premises. Where you've got some content within it. But the connection to it is a little bit different. So I'm going to go ahead and click the Connect button at the top.
Where we can see syntax for making a connection to it by mapping a drive letter in Windows.
In this case, I want to map drive letter P, P for projects. So I'm going to go ahead and choose that from the drop-down list.
We can see it's got some PowerShell code here.  
That's going to be used to test the connection with the Test-NetConnection cmdlet and also actually mapping the drive. So in other words, it's going to actually make the connection by adding the storage account reference here for our shared folder. So I've pasted that.
I've copied and pasted that so we can see it in a bit more detail here in WordPad. So a variable $connectTestResult is going to be the result of running Test-NetConnection against a computer name.
Which is really just the URL of our specific account, and it's trying to connect to Port 445.
So if you were trying, for example, to map a drive letter from a Windows machine on-premises into the Azure cloud. You need to make sure that Port 445 is allowed in an outbound direction. And the fact is, most Internet service providers will not allow that traffic out. So if you don't have access to control outbound ports because maybe you only have a residential Internet connection, then that might be a problem.
Next thing we're doing is we've got an if statement here and we're testing the result. So if the TcpTestSucceeded so we could talk to our storage account and make a connection to Port 445. Then it's going to start saving some information here.
So it's going to store the user storage account name and the generated password here.
That is an actual storage account access key.
And then in PowerShell, the New-PSDrive cmdlet is being used. In this case to map drive letter P, we selected P for projects.
And we can see it's making a reference to the projects folder within the storage account.
And it's setting it as a persistent drive mapping so that drive P will be there every time that we sign in.
So, I'm going to go ahead and copy this again and I'm going to use it within a PowerShell command prompt environment.
Within an Azure virtual machine where I know Port 445 to the storage account is going to work.
So I've opened up here my virtual machine, my Windows virtual machine in Azure and I've copied the public IP address. And I've opened a connection to it using remote desktop client from my on-premises system.
So I'm going to continue going into that machine over RDP so we can map the drive letter to Azure file share.
Now within my remote session to my Azure Windows virtual machine, I'm going to go into the Start menu because I want to start the PowerShell ISE.
The Windows PowerShell ISE where I'm going to paste in that code that we went through that will map the drive letter here from this machine.
So I'm just going to click the new piece of paper icon here for a new script, so to speak, and I'll paste in all of that code.
And I'll just press Ctrl+ sign here so we can kind of zoom in.
So this is exactly what we were looking at to map drive letter P.
So I copied that for our specific configuration.
So I'm just going to go ahead and run all of this.
We can see it's down there. It's attempting the TCP connection. So remember, Port 445 needs to be open between this host and the target for this to work.
And it looks like drive P is probably mapped.
There are a number of ways we could do that here in PowerShell.
Let's navigate to drive P so P:\> dir, there are the project files.  
Of course most people that would use this would access that drive mapping from within Windows Explorer. Or through apps of some kind.
So if we go to This PC, we'll see that drive letter P showing up here.
So projects, and showing up there along with the contents of that.
So there are the files in that location.


File Share Mapping and Linux
You can create a Linux mount point from a Linux machine if you want to mount a remote Azure file share. 
Here in the portal I'm in an existing Storage account, we're going to take a look at an existing file share, so File service, File shares.
We'll see we've got one here called projects, I'll click to open it up to reveal its contents.
So we'll see some files here that have been uploaded, but we also have a Connect button.
When we click Connect, we can choose Linux at the top to get instructions on how to configure a Mount point for our storage account.
Now, I'm going to change the Mount point name here, let's say to projects, and it will change the example code down below, which I will copy to my clipboard.
So this is what we're looking at, if you've written a lot of Linux shell scripts, then this will be familiar to you.
First thing we're doing or it is doing is using the sudo command to raise elevated privileges to make a directory on the root of the Linux machine under mnt called projects, that's the mount point.
And if the directory etc smbcredentials does not exist, and it'll make it.
If there's not a file here to store smbcredentials, it'll make it.
And it's storing the username with the name of the storage account and the password is a storage account access key.
Then it's setting some permissions using change mode as required for the credential file.
And to get right down to it, what it's then doing is writing to the etc/fstab file.
So it's a persistent mount point that will persist between reboots.
And the actual amount command happens way down here, sudo again to an elevated commands mount with a type of the file system here is cifs.
And then we're specifying two forward slashes and then a reference to the storage account using the default file.core.windows.net suffix from the fileshare, /projects. And that is being mounted locally in Linux under /mnt/projects, which has been created way up at the top of this example. And then some permissions modes are being set here as that mount point is created.
So essentially this needs to execute in Linux. So I have a Linux virtual machine running in Azure that I've connected to through SSH using the free PuTTY tool that I'm running on-premises.
So I'm going to go ahead and paste that command in here. When the script tries to run sudo it's going to ask you for which I'll supply.
And then I'm going to go ahead try to run that again by just pasting that in.
And it looks like it's completed, I'm going to clear the screen and do an ls /mnt/projects.
And we can actually see the contents of that Azure file share.


Azure File Sync Overview
You can use Azure File Sync so that your Azure files, in other words, your shared folders defined in an Azure storage account, are made available to your on-premises clients through an on-premises file server.
So the on-prem file server then really acts as an on-premises cache of what exists in the cloud, in your Azure file share. Remember that Azure file shares are defined within an Azure storage account. You can also use this so that any files that are placed into the on-premises file server in a given directory get synchronized to your Azure file share. To get this set up, the first thing you would have to do is for your on-premises file server or file servers, is be sure that you disable Internet Explorer Enhanced Security Configuration or ESC.
Next, Configure Azure files, that means configure your shared folders in the cloud. Next, you would download and install the Azure File Sync Agent on your on-premises servers. This is the link between that on-premises server and your Azure storage account file share. So then you would have to create and configure an Azure File Sync resource. You could even use the portal to create an Azure File Sync resource, in which you would configure what's called a Sync group.
Now what then happens is the on-premises file caching server needs to be registered with the Azure Storage Sync Service. Now that happens at the end of the installation, when you install the file sync agent on your on-premises server, the tail end of that installation is going to guide you through connecting to an Azure account and a subscription, and essentially connecting to an Azure Storage Sync resource. That's part of the File Sync agent.
So of course, that means that you have to have a sync group defined within your Azure File Sync resource. Now when you create your sync group, you will have a cloud endpoint. It's already pointing to the storage account, file share. However, you would have to add a server endpoint after you've installed the agent on the on-premises server. And that way, the server will be associated with it. So you add a server endpoint for the server that's been registered, which occurred at the end of the installation of the on-prem agent.


Configuring Azure File Sync
Azure Files refers to shared folders hosted in the Azure cloud through a storage account.
Well, what we can do with Azure File Sync is have an on-premises Windows Server essentially cache that information for quick on-premises access. The first thing we have to do to make this happen is we need to create an Azure File Sync resource. So here in the portal, let's start with that. I'm going to click Create a resource.
And what I'm going to search for is Azure File Sync, there it is.  
Let's go ahead and select that and let's click on Create.
So I'm going to deploy this into a Resource group I've already got, so I'll select that from the list.
And I need to give this a name, I'm going to call this FileSync1.
And it's going to be, let's say, in the (Canada) Canada Central region, let's put it there.
I'm not going to tag it or anything, so click Next to continue through the wizard.
Now, it says that there's a problem here on Basics.
We can usually tell that when we have an asterisk, which implies that there's something that you need to fill in.
Well, we've already addressed all of the required parameters, so I'm just going to click Review + create, and then I'll choose Create.
It's going to validate the deployment, we filled in everything that needs to be filled in.
So once it says that the Deployment validation succeeded, it's actually submitting it and it's on its way. Now, we're not finished, because what we need to do in that Azure File Sync object is we need to add what's called a sync group.
So we'll go take a look at that now. I'm going to click Go to resource, and within here, we're going to create our sync group.
You can see Sync groups listed over here in the left-hand navigator.
So I'll click the + Sync group button.
And we're going to start by giving it a name, I'll call it SyncGroup1.
I have to associate this with the Storage account, so I'm going to click on the Select storage account button.
And I'm going to choose a storage account that I know has some Azure file shares configured in it already.
So after I've selected it, I'll scroll down.
And from the Azure File Share drop-down list, I'm going to choose one that I've defined previously called projects, and I'll choose Create to create the sync group.
Notice it's in the midst of creating a cloud endpoint for that sync group. But what we're not going to have yet is a server endpoint. Let's open up the SyncGroup1 and take a look at that for just a second. So we can see that we've got a cloud endpoint called projects, but we don't have a server endpoint yet.
And we won't until we download and install the File Sync agent on an on-premises server and then have it registered with this sync group. So notice we have an Add server endpoint button at the top. And when I click it, when I go to the Registered Server list, there's nothing there.
Well, again, we haven't installed the File Sync agent on an on-premises Windows File Server yet. But once we do, we'll be able to come back here and complete this process.
Here on my on-premises server, I've gone into the Server Manager tool.
That normally starts up automatically unless you've disabled it. You can just go to your Start menu if you really want to, and you can start the Server Manager tool. The reason I'm here is if I click on Local Server over on the left, on the right I can see the Internet Explorer, or IE Enhanced Security Configuration is On.
I'm going to click on that and turn it Off for admins and Users because I want to download the Azure File Sync agent.
So I'm going to go ahead and close that up, and I'm just going to fire up a web browser here, let's say Internet Explorer.
Because my server is running Windows Server 2019, I'm going to select the checkbox for that MSI and I'll click Next in the bottom right.
And I'm going to go ahead and click Allow once at the bottom to allow this to download.
I want the pop-up to pop-up. And I'm going to go ahead and actually just click Run, I know it's from a trusted secured location.
And after a moment, we have the Welcome to the Storage Sync Agent Setup Wizard screen, perfect. Let's continue. I'm going to click Next, accept the terms in the license agreement, I'll click Next.
I'll accept the defaults for Azure File Sync and the local installation location.
So I'll just go ahead and click Next on that.
No Proxy Settings on this host to get out to the internet, so I'll just continue, Use Microsoft Update.
And here we can specify if we want to automatically update when new versions become available.
So this is the Azure Storage Sync Agent auto-update settings screen.
So I'm just going to go ahead and accept all that and just basically get the product installed.
Okay, and at the end of the wizard, I'm just going to go ahead and click Finish.
So it's automatically checked for an update for the Azure File Sync agent.
Didn't find anything, so I'll just click OK.
And the next step is to Sign in and register this server so that it will show up within the cloud.
And then we can actually add it as a server endpoint in our sync group. So I'm going to go ahead click Sign in. So after signing into Azure successfully, I can then choose the subscription from the drop-down list. After which I can then choose a Resource Group and ultimately my Storage Sync Service.
And there it is there, FileSync1.
I'm going to go ahead and click Register.
And after a moment, we can see that the registration was successful. So I'm just going to go ahead and click Close. Back here in the portal, I'm still looking at my FileSync1 | Sync groups.
And more specifically, I'm looking at the Sync groups within that resource. So I'm going to open up SyncGroup1.
And previously, when we were in here, we had clicked Add server endpoint, but there were no registered servers that had the agent installed.
But this time, it's showing up, that's the name of my server.
So I'm going to specify that server from the list.
So on my on-premises server, I've got disk Volume (E:) with a folder called 2020_Projects.
And sure enough, I can see a number of files in there.
So I'm going to need to specify that path when I configure my server endpoint.
So I've selected the Registered Server, I have now put in that Path.
I can also enable Cloud Tiering, it says here it'll transform my server endpoint into a cache for your files in the Azure file share.  
I do want to do that, so I'm going to enable that.
You can determine how much space should be preserved locally, and also which files should be preserved locally.
So you can keep only certain frequently accessed files cached on the device.
The rest get tiered into the cloud environment. So based on what our needs are, that's all we have to configure.
I'm going to go ahead and click on Create to create the server endpoint, which will then show up down here.
So the cloud endpoint essentially links to an Azure file share, and that was defined when we created this sync group.
Now we've got our server endpoint. Notice the Health?
Shows that it's currently Provisioning.
So if I were to take a look in my storage account at my projects file share that is part of that sync group, I will see not only the original files that were here, which in this case are Project_A, B, and C.
I can click and see that on March 23rd, they were made part of this.
And I can see two new files, Project_D and E.  
I know they're new only because I know the files names.
And I can see that they were placed there on the 24th.
They were placed there automatically because they were replicated from our on-premises server.



Azure VM Overview
In Azure, virtual machines, or VMs, really provide the underlying horsepower for most services, even those where we don't directly see the correlation with an underlying VM.
What comes to mind with that is serverless computing. When really there is a server involved, it's just not under the control of the cloud tenant. When you plan your virtual machines, there are plenty of things to think about, including the method through which you will deploy it. If you work with infrastructure as a service, or IaaS VMs, it means that you as the cloud tenant or customer, you'd be responsible for things like the deployment of the VM. Configuring it the way you need it to be configured.
And managing it over a time, including applying operating system and app updates. However, it does give you with full configuration control at the virtual machine level. And you might even consider taking advantage of Bring Your Own License, or BYOL, where you can reuse existing licenses that you might have already purchased for the operating system. A managed solution means that the virtual machine creation and management is handled by Microsoft in the Azure Cloud. However, it does allow for quick and easy deployment of a higher-level service.
And the thing to think about is that when you look at the virtual machine, it has a lot of underlying details. Now, if you're working with it from an IaaS standpoint, infrastructure as a service, where you control it all, there are a lot of things to consider, such as the specific OS image that you're going to select, whether its Windows based or Linux based. Or perhaps you have an image that includes not just the operating system but also some additional software.

So that you might have a web server stack of some kind ready to fire up quickly in the case of a virtual machine where you've customized an image. You have to specify the resource group that the VM will be deployed into, and the geographical location. You have to think about sizing. The size of the virtual machine determines its underlying horsepower. So the number of vCPUs, virtual CPUs that are supported, the amount of RAM. The number of data disks supported by that specific VM size. And also, by extension, the disk performance or throughput in IOPS, that's input and output operations per second. So more IOPS is always better, but you pay a premium for that privilege.

The other thing to consider is high availability. If you've got a mission critical workload running in an Azure VM, then you might want to configure it for high availability by replicating it to a secondary region. And then there's user credentials so that you can get in and manage your virtual machines, whether it be Windows based or Linux.

[Video description begins] Azure VM User Credentials. [Video description ends]

With Windows you specify a username and a password when you deploy a Windows-based virtual machine in Azure, regardless of how you're deploying it. So whether you're doing it using the portal, the CLI, PowerShell, a template, an ARM template, doesn't matter. And of course, you would manage it remotely by making a connection to RDP port 3389. Ideally, you won't expose that directly to the Internet with a public IP address.

Instead, you'll use something like Azure Bastion as a jump box that you go through to remotely manage virtual machines using only their private IP. On the Linux side, we have password-based authentication as well as SSH public key-based authentication, where the public key portion is stored by Microsoft and Azure. But the related private key would be stored by you, the Linux user. And you need that key in your possession to authenticate with the server. Of course, you should take great care in protecting that key. Something as simple as applying a passphrase or password to it to safeguard it would be useful.

And you manage Linux, of course, over SSH port 22. Just like with Windows, you probably shouldn't expose that directly to the Internet for Azure Linux-based VMs. Instead, make it available privately only through something like an Azure Bastion host.

[Video description begins] Azure VM Details: Disk Sizing. [Video description ends]

When you work with Azure virtual machines, you're also working with at least one virtual hard disk to host the operating system. So we're talking about disk sizing, really deals with the storage type. So when you work with disks for a virtual machine, you can determine some of these options, like standard HDD. HDD is hard disk drive. Now, hard disk drives are the older disk technology where you have spinning physical metal disk platters and a read-and-write head that goes out over it to read-and-write data as the disk is spinning. So it's very mechanical and slower than today's solid state drives.

But you can use standard HDD for infrequently accessed data. Okay, so if we're going to have a virtual machine with a virtual hard disk and it's only going to be used periodically for testing, for maybe only a few hours a month, maybe standard HDD is acceptable there. The other option would be standard SSD, solid state drive. So there's no spinning disk platters. There's no read-and-write heads and arms, nothing like that, no moving parts. It's all solid state. So you might use standard SSD for testing and dev purposes, basically non-critical usage.

Then you've got premium SSD. This is something that you would use in a production environment when you're running a production-based workload that the business actually depends on, because you get peak performance usage. But as you might imagine, you pay more for premium SSD than you would for standard SSD, standard HDD. And then there's ultra SSD, which provides the highest or the best performance available. And it's definitely suited for intensive database workloads or anything where you need the absolute best possible disk I/O performance. However, you'll only be able to use ultra SSD disks on specific types of Azure virtual machine sizes. So, basically, premium SSD enabled types of items.

[Video description begins] Azure VM Details: Networking. [Video description ends]

At the networking level, when you're planning your virtual machines, you have to think about how many network security groups you'll need. Network security groups contain rules that control traffic flow, inbound or outbound. So either allowing or denying certain types of network traffic based on things like IP addresses, or tag values, or even port numbers. You can associate a network security group with the subnet, which means by extension, all VMs that have network interfaces in that subnet would also get those rules from the network security group. So subnets exist within a VNet.

Network interfaces, as the name implies, are network interface cards in a virtual sense, they're their own separate type of resource in Azure, and you associate them with VMs. And depending on the VM sizing will determine how many additional network interfaces that you can attach. Network security groups can also be assigned directly to network interfaces if you have very specific inbound and outbound traffic requirements for a specific VM network interface. Public IP addresses are again another Azure networking component. This is also its own type of resource that allows public connectivity to a VM. You would only do that for things that are designed to be publicly accessible, like a corporate website, for example.

You also have load balancing configurations. You have to plan for the fact that you might have a workload running in a VM whereby if that VM becomes unavailable, costs a lot of money in terms of downtime until it's up and functional again. So you might consider load balancing using a number of backend servers hosting the same app. And, of course, load balancing between them. So when client requests come in, sending it to the least busy backend server.

[Video description begins] Azure VM Scaling. [Video description ends]

Scaling a virtual machine can be done horizontally, which means adding or removing VMs. So scaling out means adding VMs, scaling in means removing. You would do this, for example, in a load balanced auto scaling type of solution. Maybe you would have it automatically set so that when the CPU gets to a certain point of busyness in terms of percentage, VMs begin to be added to handle the increased workload. Now vertical scaling means scaling up by adding more horsepower, or scaling down to reduce the amount of horsepower because you don't need it and you want to save on costs. So vertical scaling deals with the number of virtual CPUs, the amount of RAM, the disk I/O, and so on.

[Video description begins] SSH Public Key Authentication. [Video description ends]

For Linux hosts, you have the option of either password-based authentication or SSH public key authentication. Now this one is considered to be more secure than just a username and password because it involves something that you must have. Now this is the default configuration with Linux VMs unless you change it otherwise, but you can always go in and reset that in an existing Linux VM after the fact. When I say reset that, what I mean is reset a forgotten password if you're using password authentication. Or convert or change from password to public key authentication.

You can change all of that after the fact if you need to. So SSH public key authentication uses a related key pair. So the public key is stored on the server in the cloud. So it's stored by Microsoft. But the mathematical related private key is stored with you, the user. And that's where you need to have that private key. It's stored in a file, should be password protected at minimum. And you use that to authenticate to the server. With SSH public key authentication, we're talking about having this apply to Linux VMs.

It doesn't apply to Windows VMs, unless you install some third-party component that allows it to act as an SSH server or daemon, then of course that would be on the table. So the public key gets specified when you build a new Linux VM if you leave the default of public key authentication. So the user must know the username and password, but they must also possess a related private key.


Azure VMs and the Portal
Virtual machines are the real workhorses that make things happen in cloud computing, that run workloads. Now in some cases in Azure, you have managed services. Where you don't have to worry about deploying and managing the underlying virtual machines. But when it comes to infrastructure as a service or IaaS, that is where you do manually deploy virtual machines and manage them.
So let's go ahead and take a look at how to do that at the portal, I'm going to click Create a resource. Now I could look at some of these popular virtual machine images and deploy virtual machines from them. Such as Windows Server 2016 Datacenter or Ubuntu Server 18.04 LTS.
I could also go to Compute, and from here I have variations of compute services, including virtual machines. I'm just going to choose Virtual machine.
And I'll select all of the details, including the operating system image as I configure it further.
So the first thing I need to do is specify a Resource group where I want this deployed. So I'm going to select a Resource group, I'm going to scroll down, this is going to be a Windows Virtual machine. So I'm going to call it WinSrv2019-1, I'm going to deploy it in the (Canada) Canada Central region.
And in the Image drop-down list is where I get to select exactly what I want, so I've got variations here of Linux. I've also got variations of the Windows platform such as Windows Server 2019 Datacenter, which is what I'm going to choose. The next thing I'm going to do is scroll down and see what else I have as an option such as whether I want to use Azure Spot instances, it defaults to No. Spot instances are useful if you want to perform things like batch processing, something that doesn't need to run all the time.

Because spot instances essentially allows you to use extra compute capacity available in the Azure Cloud at a reduced rate. But there's no guarantee and essentially, your virtual machine could be evicted and it could be stopped if that compute capacity is needed. So I'm not going to use a spot instance I want this virtual machine running when I deem that it should be up and running. Down below, the sizing is very important because the virtual machine size determines the underlying horsepower which of course equates to how much you pay on a monthly basis, depending on how often that virtual machine is running.

Here I've got Standard DS1 v2, which consists of 1 vcpu, 1 virtual CPU, and 3.5 GiB of memory. If I don't like that, I can click Change size so I can better accommodate the work load that will be running in this virtual machine. But I'm going to stick with that. Down below I need to specify the Administrator account credentials for Windows. So I'm going to go ahead and specify a Username and a Password which I will then confirm down below. After I've done that down below, I can determine if I want specific ports to be made available in terms of Public inbound ports.

It defaults to allowing port 3389 for RDP, now this means that it will be publicly visible on the Internet. This is generally not a good idea from a security perspective. You might require that people come in through a jump box, in other words Azure Bastion on or maybe come in through a VPN. And then connect into the private IP of the Windows host for RDP remote management. Now if this is a test virtual machine and there's nothing at stake, then maybe it's okay to leave the public inbound port open. Which I'm going to do in this example.

[Video description begins] He points to a radio button labeled "Allow selected ports". [Video description ends]

I'm going to scroll down, I don't Already have a Windows Server license so I can't bring my own license.

[Video description begins] He points to a radio button labeled "No" adjacent to the text, “Already have a Windows Server license?”. [Video description ends]

I'm going to click on Next : Disks > at the bottom for Disks, and this is where I get to determine the operating system disk type. It's set to Premium SSD, which offers better performance than something like Standard hard disk drive or HDD. So I'm going to leave that as it is, I could also add Data disks down below beyond the OS disk type.

[Video description begins] The Disks page displays. [Video description ends]

And I can also do that after the fact at any point in time in the future. So I'm going to leave that as it is and I'm going to click Next : Networking > for Networking down at the bottom. Decide which Vnet I want this deployed into, so Vnet1 is selected.

[Video description begins] The Networking page displays. It contains three drop-down list boxes labeled "Virtual network", "Subnet", and "Public IP" and two toggle buttons labeled "NIC network security group" and "Accelerated networking". [Video description ends]

Can also select the Subnet within that Vnet I want this virtual machine deployed into. I'm going to leave it on Subnet1 (10.0.1.0/24).

[Video description begins] The Virtual network drop-down list box displays a default option labeled "Vnet1". The Subnet drop-down list box displays a default option labeled "Subnet1 (10.0.1.0/24)". [Video description ends]

And, down below, I can determine the Public IP address configuration for this virtual machine. So it's going to build a new public IP address resource, that's perfect, I'm going to let it do that.

[Video description begins] The Public IP drop-down list box displays a default option labeled "(new) WinSrv2019-1-ip". [Video description ends]

Down below, do we want to have a network security group or an NSG applied to the NIC, the network interface card? Now I'm not going to do that only because I know that Subnet1 has a network security group already associated with it. So you can associate network security groups, which are essentially collections of firewall rules to an entire subnet. Or to a specific network interface.

[Video description begins] The NIC network security group toggle button contains three options labeled "None", "Basic", and "Advanced". The None option is selected by default. [Video description ends]

Now, if you've got virtual machines with the same traffic requirements on a subnet. It might make more sense to manage the firewall rules for allowing denying traffic at the subnet level, as opposed to the individual NIC level. So that's fine, having done that, I'm not going to enable Load balancing, I'm going to click Next : Management > for Management.

[Video description begins] The Management page displays. [Video description ends]

So Boot diagnostics are turned On, I can also turn on OS guest diagnostics if I wish. And I have another set of options including things like enabling backup, which I can change after the fact. And enabling auto-shutdown such as on a schedule which also I can configure after the fact.

[Video description begins] He points to toggle buttons labeled "Backup" and "Auto-shutdown" in which the Off option is selected by default. [Video description ends]

I'm not going to change any of these settings, I'm going to click Next : Advanced > for Advanced. I'm not going to change any of these settings.

[Video description begins] The Advanced page displays. It includes drop-down list boxes labeled "Host group" and "Proximity placement group". A default option labeled "No host group found" is displayed in the Host group drop-down list box. A default option labeled "No proximity placement groups found" is displayed in the Proximity placement group drop-down list box. [Video description ends]

For example, I have the option of using an Azure Dedicated Host or controlling an entire physical server in an Azure Data Center. That would run my virtual machines, that of course incurs more costs. I'm not going to do anything like that, so I'm going to accept all of these extra settings, I'll click Next : Tags > for tagging.

[Video description begins] The Tags page displays. It includes a table with three columns and a row. The column headers are Name, Value, and Resource. He types Project and ABC in the text boxes displayed under the Name and Value column headers respectively. [Video description ends]

And, if this is for a specific project like Project ABC or a cost center or a department or anything like that, I could tag it accordingly. Once I've done that, I can click Next : Review + create >, review and create. It's going to check of course that my selections make sense, I can see that the Validation passed.

[Video description begins] The Review + create page displays. [Video description ends]

And I can also see what the cost is on an hourly basis to run this virtual machine if it's left running. Of course, we should always shut it down when we know we don't need it. And, at this point, I'm going to click Create to build this virtual machine in the cloud. After a moment, we'll see that the deployment is complete. So I could either click Go to resource or I could go to the All resources view at any point in time to view everything, including my virtual machine.

[Video description begins] The corresponding blade opens. He clicks the Home link in the breadcrumb trail. The Home page opens. He clicks the All resources option and its corresponding blade opens. [Video description ends]

Of course, you could also always open up your left-hand navigation panel and scroll down and choose Virtual machines. In the All resources view, notice that what we get here is we see everything. We see the Virtual machine itself, we see the Public IP address related to that virtual machine.

[Video description begins] He points to the virtual machine labeled “WinSrv2019-1”. [Video description ends]

The Network interface for that virtual machine and the Disk for that virtual machine, so there's a lot of stuff here. So I'm going to click on the virtual machine itself to open up its navigation bar. And of course within the virtual machine we have numerous configuration options.

[Video description begins] The corresponding blade opens. It is divided into two sections: navigation pane and content pane. [Video description ends]

For example, if I click Networking over on the left for that virtual machine, I'll see network options including the Network Interface. I can also view the effective network security rules.

[Video description begins] The corresponding blade opens in the content pane. [Video description ends]

We can see down here there is an AllowInboundRDP rule that is being applied to this virtual machine. Because there's a network security group called NSG-Windows, which is attached to Subnet1. Which is where this virtual machine has been deployed. I can click Disks in the navigation bar to work with the operating system and also data disks. Here's where we can for example, configure additional data disks, I can click on Size.

[Video description begins] The corresponding blade opens in the content pane. [Video description ends]

If I decide that the current underlying horsepower doesn't properly support the workload. I can change the sizing, either scale up and choose something more powerful.

[Video description begins] The corresponding blade opens in the content pane. [Video description ends]

Or scale down vertically and choose something less powerful to reduce costs if the compute power is not actually needed. So if I were to go, let's say, into the Virtual machines view over on the left, of course, it's filtered to only show me virtual machines. We can also see that the Status of that virtual machine is currently listed as being Running.
Now bear in mind that over time, if you want to manage that virtual machine, you're going to either need to know its private IP address or its public IP. So once again, I'm going to click to open up that virtual machine, I'm going to make sure I'm looking at Networking over on the left. And, when we're looking at Networking, this is where we will see its public IP. So we've got a NIC Public IP address as well as its NIC Private IP.


Azure VMs and the CLI
Here in the Azure CLI, which I've spawned through the Cloud Shell icon in the portal. I'm going to create a Linux-based virtual machine using CLI commands.
The first thing I'm going to do is run az -h for help, because I'm wondering what the next level command is. And I can see right away, vm for virtual machine seems to make sense.
And so I can run az vm -h for help on that, to learn more about how I can use the syntax to manage, or in this case create a new VM.
So I can do az vm create -h to get a level deeper with help, including syntax examples of creating virtual machines.
So now that we're armed with that information, we can start to put together our specific command. So I'm going to use az vm create --resource-group and I'm going to deploy this new virtual machine into an existing resource group named Rg1. The --name parameter, I'm going to give it a value of Ubuntu-1. That's what I want it to appear as in the portal.
And --image, I'm going to specify I want to use the "UbuntuLTS image", --admin-username. I'm going to specify a username of "cbackwell" --admin-password, or admin password to be specific and I've specified a password I want to use. And finally, this virtual machine will be deployed in the canadaeast location. So let’s go ahead and press Enter to get this virtual machine created.
We can now see that it looks like it has successfully created our Linux virtual machine. Let’s check our work here in the portal. So if we go back to the portal, make sure we Refresh our list of virtual machines. Indeed, we’ll see that Ubuntu-1 is listed as Running.
So back in the CLI, I'm going to clear the screen.
We can also take a look at our running virtual machines as in az vm list, now it doesn't really matter if they're running or not. But when we run this command, we're going to get all of the details about the virtual machines.
If we are interested in seeing just a specific property, then we can get to that using the query parameter. So I'm going to scroll back up here and what I'm looking for here is the name property. So using the query parameter, we're going to call upon that.
So in other words, I'm going to bring up the previous command, az vm list. I'm going to add --query because we have an array of virtual machines, more than one. I'm just going to put in open and close square bracket and then call upon the .name property. And when we do that, we'll see in fact Ubuntu-1 is showing up.


Azure VMs and PowerShell
In this demo, I'm going to use PowerShell to deploy a new Windows-based VM. Now, PowerShell can be very handy if you want to automate the creation or deployment of Azure virtual machines. You might have a loop and you might feed it parameters for unique values like the names of virtual machines that could lend itself to quickly creating a sandbox environment, similar to how an ARM template could. So to get started, I'm going to create a variable to store the credentials that will be created for my virtual machines. I'll need them to log into it.
So credentials or $creds is my variable. And I'm going to use the Get-Credential cmdlet. And when I press Enter, it asks for a username, which I will enter and a password of course. So I'm going to go ahead and enter that as well.
So now I've got a credential set for my new virtual machine that I'm about to create in PowerShell. If we were to return that $creds variable, it's not as if it's plain text.
It's treated as System.Security.SecureString, perfect, that's good. So the password's not even resident in memory, although notice, we can clearly see the username that I entered.
Okay, so the next thing to do is to actually create the virtual machine. So now I'll use New-AzVm, I'm going to specify the resource group I want to deploy the virtual machine into. It's going to be called "Winsrv2016-1". It's going to go into "CanadaCentral" region and do a Vnet called "VNet1" and subnet called "Subnet1". We create a security group here, SecurityGroupName called "winsrv-nsg". We're to create a public IP address object for this server. And we're going to specify the image.
Notice what we're referring to here is the publisher, MicrosoftWindowsServer then WindowsServer:2016-Datacenter in this particular case, and we want the latest version. Each of those components is separated with a full colon. Then we're opening port 3389 for RDP management. And our -Credential or username password is simply going to be what we entered in previously into our $creds variable.
You can see now, it's in the midst of creating all of the resources for that VM, including the public IP address.
And after a moment, it looks like it's done. So we can just go ahead and minimize this. And I'm just going to go here in the portal, let's say to my Virtual machines view. And let's just see that our newly created VM is showing here. Should be listed as running as well. That's the default when you create a new virtual machine.

[Video description begins] He minimizes the PowerShell command prompt window and opens the Home page. He clicks the Virtual machines option and its corresponding blade opens. [Video description ends]

There it is, Winsrv2016-1, it's currently in the state of Running. If we were, let's say to go to the All resources view, we know that there's more than just the VM resource itself.

[Video description begins] He opens the Home page. He clicks the All resources option and its corresponding blade opens. [Video description ends]

What about in our case, the public IP address, the OS disk, the network interface, the network security group, all that stuff. So I'm going to filter by winsrv2016 for the name prefix. And again we can see a number of items have been created. We have the Virtual machine, Network interface, Public IP address, the Disk. But when we go back to PowerShell, you might wonder, well, hang on a second. How do I know what to put in for the image? Everything else is pretty self-explanatory, the reference to the subnet, the location and so on. But this -Image parameter value has me scratching my head. How do I know to put that together?

[Video description begins] He highlights: MicrosoftWindowsServer:WindowsServer:2016-Datacenter:latest. Then he clears the screen. The prompt remains the same. [Video description ends]

Discovery cmdlets, one of which is Get-AzVMImagePublisher. So you at least have to know some of these discovery cmdlets. So I'm going to say let's -location, and how about "CanadaCentral"? And I'll just pipe it to more just for fun so we can have it stop after the first screen full.

[Video description begins] He executes the following command: Get-AzVMImagePublisher -location "CanadaCentral" | more. The output displays a list of publisher names for the Canada Central location. [Video description ends]

We'll just keep going through here. Basically, what we would be looking for in our particular case, based on our example, is Microsoft Windows Server. So as we go further and further down, we can see all of the variations on the nomenclature. And we do see, in fact, that we do have a publisher name here, MicrosoftWindowsServer, so q for quit. So that's one command you can use to discover these things. You can also run Get-AzVMImageOffer. And -location "CanadaEast" or Central, wherever it is that you want to look. It's not case sensitive. Press Enter.

[Video description begins] He clears the screen. The prompt remains the same. Then he executes the following command: Get-AzVMImageOffer -location "CanadaCentral". The window prompts to enter the publisher name. [Video description ends]

And what's the PublisherName? Right, that's what we just looked at. That was microsoftwindowserver. Just give it a moment. It doesn't like Microsoft Windows Server. Well, that particular item, guess what?

[Video description begins] An error message displays. [Video description ends]

It's case sensitive. So if I run that command again, and then this time I put in MicrosoftWindows and Server, MicrosoftWindowsServer. So I'm capitalizing each word, so initial caps. It liked it. So watch out for that when it comes to that part of the nomenclature.

[Video description begins] He types MicrosoftWindowsServer. A list of offer names for the MicrosoftWindowsServer publisher name is displayed. He points to an offer name labeled "WindowsServer". Then he clears the screen. The prompt remains the same. [Video description ends]

Now we then see WindowsServer. So we're going to step deeper, got it? So now the discovery command like Get-AzVMImageSKU, let's put in -location "CanadaCentral". And I'm not going to put any other parameters. It'll just ask me, yeah, what's the publisher?
Well, initial caps, MicrosoftWindowsServer. What's the Offer? Well, the Offer is WindowsServer, again, initial caps. And then here we go. Now we can start to see the actual SKUs that we might want to use.
So let's just scroll back up here, we have 2016 and what we're looking at now is 2019. So maybe we want 2016-Datacenter or 2019-Datacenter or a server core image. So we have all of the options here. And that's how you know what to place in the -image parameter when you're building a new VM in PowerShell.


Azure VMs and Template Deployments
In Azure, ARM stands for Azure Resource Manager. This is the newest model of managing Azure resources. And we can use an ARM template to deploy and manage related resources in a resource group for example.
So to get started here in the portal, I'm going to click Create a resource. I want to deploy a virtual machine from a template.
Now a template is a text file using JSON syntax. You can either create your own or you can go to GitHub and other sources on the Internet to retrieve templates. Or you can use some of them built into Azure right here, which by the way, also lets you query GitHub. So what I want to create here is a template deployment. I'm going to search for template, there's template deployment. Perfect, I'm going to select that.
Then I'll click Create. Now I'm going to get a couple of common templates listed here. But that is by no means all that's available.
So common things like creating a basic Linux virtual machine, a Windows virtual machine, a web application, a SQL database. We can also build our own template in the editor. Now, when you do that, you get to either import an existing template file, but it gives you the skeletal infrastructure for you to begin, the framework.
So it's a JSON file format where we've got the opening and closing curly braces and the details within. Now what you could do is you could load a quick start template in here to see the JSON. Or load a file if you already have a file in your possession for a template. So, for example, if I were to quick click Quickstart template, maybe from the drop-down list I'll choose well, it could be anything. Why don't we search up something like SQL, 101-cosmosdb-sql.
And I'll just click OK, just so we can see that it loads all this information in here. So for example, we can specify the location. Notice that the location parameter here that you would normally specify when deploying a CosmosDB account is something like, East US, West US or Canada Central, or something like that. What's happening here instead of hard wiring it, it's determining the resource location by looking at the resourceGroup. So, if the resource group was in US East, well the location of this Cosmos DB account, which is what's being created here, will also be in that same location.
So as we go down through here, it's pretty readable. The settings or the properties for creating, in this case, my CosmosDB account and SQL and so on. However, we're not going to use this. I'm going to click Discard, but we could do that.
We can also choose one of these predefined common templates, let's say to Create a Linux virtual machine. So when I click on that, it pops up. And unlike when I normally deploy an IaaS, or infrastructure as a service Linux VM, which requires a lot of details, this only requires a handful.
It really depends on the template. When you use an ARM template, it really depends how the template was written. And what's hardwired into it versus what must be passed in as parameters. Like the Resource group, the Vm Name, the Admin Username, and so on. I'm not going to do that either. So I'm going to go back to a template deployment, I know I'm going to lose those changes. I'll click Create, because we have an option at the bottom also to query GitHub.
Down here at the bottom, kind of like what we saw when I went in and started to load a quickstart template in the template editor. So how about I put in apache as in Apache server? Now when we talk about Apache, we really mean the Apache web server. apache2-on-ubuntu-vm. Yeah, that's what I want.
Okay, because I know I want to deploy a web app on that platform. So I'm going to go ahead and select that template. Notice I could have edited it as well.
And again, depending on the template will determine what I need to fill in here. So I'll just fill in some of the details. It wants to make a new storage account. Okay, store account, let's say apache123.
It wants an Admin Username, let's put in cblackwell. This template wants a DNS Name For Public IP. Let's call it quick24x7test and we have options to select the specific Ubuntu OS Version. So that's fine. I'll leave it on the default template. I don't have a reason to change that here. Notice the Location here is the location of the resource group.

That's fine. We can determine if we want to use public key or password authentication for simplicity sake here, password authentication and I'll enter a password. Okay, and I don't really need to specify too much more. Notice that we have a red asterisk or star next to the fields that are mandatory. I'm just going to scroll down.

[Video description begins] He points to text boxes labeled "DNS Name For Public IP" and "Admin Password or Key". [Video description ends]

Choose the check mark for I agree to the terms and conditions stated above which I will have read thoroughly of course, and I'll click Purchase. And it's on its way as we can see in the upper right, Deployment in progress.
Just bear in mind that when you use ARM templates, you're not limited to deploying only one resource. You could deploy numerous different types of resources. Now remember, when you're deploying a virtual machine, you're really deploying a network interface along with it and an OS disk. So you're already deploying a number of resources. And if we switch over, let's say to the Virtual machines view, we'll see that there's a new virtual machine that is in the midst of being deployed. It's called MyUbuntuVM. So notice the status is such that it's currently Creating.
If we were to go to the All resources view, well we know that there's more than just the VM itself. There's the network interface and those other items that we quickly mentioned. So let's take a look at that here.
Let's just filter by the word my, M Y and there's the public IP for the VM, the OS disk, the NIC, and a Vnet. So this is all happening from the template in an automated fashion.


Saving a Deployment as a Template
ARM Templates play an important role when it comes to automation in the Azure automation of the creation and management of Azure resources. When you deploy an Azure Resource, you can go in after the fact and actually export its configuration as a template.
Let's take a look at that here in the portal, so I'm in the All resources view. Let's start, say, with the storage account. Sort by storage accounts or filter by name, but I don't have many resources, so I'll just scroll down and click on an existing storage account.
What I'm interested in doing is taking a look at how to save it as a template. And if you scroll down when you’re looking at an Azure resource, if you go down under the Settings section middle. Now at the bottom of the Settings section, you’ll see that there’s an option to Export template. When you click on that, it will show you the JSON formatted template that was used to create this resource.
So as we scroll through, we can see parameters such as the storage account name, the default value is filled in the type is set as a string. Now, of course, you could save this, or actually let's do that, let's click Download to save this.
Now when you save it, you'll be dealing with a zip file, which I'll just click on Open. And within that, we can just go right ahead and open up the file. Now which file, there's two of them, parameters.json and template. Well, the actual template is called template.json.
If we take a look at that, let me just increase the size a little bit. Then we can see in this template for the storage account as we were seeing, it's got the storage account name with a default value which applies we can pass in parameters.
Okay, as we scroll down through we can see it's adding a cost center tag and a stage tag with the values or respective values for each of those key names. We can see that the sku is Standard GRS.
As we scroll down, we'll see all the options that are required in the creation of a storage account. Now, that's fine, let's close that because we also have our parameters file. There's parameters.json, it's designed to work in conjunction with the template file to pass in parameter values.
So notice here the parameters are being defined are for the storage account name and the virtual network name.
So you can use these together, and the benefit of exporting it as a template is that you can deploy new objects similar to existing objects by tweaking some of the details such as names or regions or whatever you need to do here in Azure. And you could, of course, use CLI commands, you could use PowerShell cmdlets or you could even use the portal to create a new template deployment to use this template file along with the parameters to create resources.


VM Redeployment
There are times when in Azure, you might want to relocate a virtual machine to another physical underlying host in a Microsoft Azure Data Center. Why would you want to do that? Well, if you're experiencing anomalies on your virtual machine and you know everything else is configured correctly maybe it's not starting up correctly, or shutting down correctly, or it can't be reached remotely. Even though everything is in place correctly, maybe that is the solution. Moving it or relocating it to another hypervisor.
Now to do that, first make sure that the virtual machine is Running. I've got one here called Ubuntu-1, so we're going to click on it to open up its navigation bar.
The redeployment option is hidden way down under Support + troubleshooting. So you'll have to scroll down until you see that section, Support + troubleshooting. And under there, you'll very easily see Redeploy.
Now when you are redeploying it, and it tells us as much up at the top, there will be some down time. It's got to bring the VM down, relocate it to another physical host and then fire it back up. So if you've got any temporary drives, you'll loss the contents. And again, you will have a little bit of down time. So I'm going to go ahead and click the Redeploy button. Now, if the VM isn't running, if it's deallocated, you will get a message to that effect.
So you don't have to worry about what happens if I don't have it running already. You'll know very clearly that that is the issue. And after a moment in the Notifications area in the upper right in the portal, we'll see that it Successfully redeployed virtual machine. So I'm just going to click on that.
So we can now see that our virtual machine is back up and running after having been redeployed to a different host. And hopefully, any problems that you might have experienced with it will be remedied by having run this redeployment.


Windows VM Remote Management
If you've deployed virtual machines in the Azure Cloud, you're probably going to want to be able to get to them over the network to manage them, whether they be Linux or Windows based. So to get started here, let's see how we can make an RDP connection to a Windows Virtual machine running in Azure.
I'm going to start by going into my navigation panel on the left and choosing Virtual machines. Here I see I've got a Windows virtual machine that has a status of Running.
And if I click to open up that virtual machine in the navigation panel, I can click on Networking to expose its public and its private IP address.
But depending on how you have things set up will determine whether you need the NIC Public IP to remotely manage this virtual machine over RDP, Remote Desktop Protocol, or whether you need the private IP. Now you can also take a look at connection options.
So if I go back to the overview of this virtual machine, notice at the top, you've got a Connect button. And if I click on Connect, I can select either RDP, so Remote Desktop Protocol for Windows, SSH, Secure Shell for Linux.
Or I can use Azure Bastion, which really serves as a jump point, a jump box, that has both a public and a private IP connection. So public facing, you could connect to the Bastion host and after connecting to it through it, connect to the private IP of a backend virtual machine. However, in this case, I'm just going to choose RDP.
And when I do that, it gives me the options such as the Public IP address and the Port number of that virtual machine, and I can Download RDP File. Now, technically, all you need is the public IP. And as long as you know the credentials, and as long as firewall rules allow traffic to 3389, you'd be able to make the connection.

[Video description begins] He points to an option labeled "Public IP address (13.88.248.90)" in a drop-down list box labeled "IP address". Then he points to 3389 in a text box labeled "Port number". [Video description ends]

So I'm going to go ahead and Download RDP File since I have the option right in front of me. And then I'm going to choose to Open it.

[Video description begins] He clicks a button labeled "Download RDP File". A notification message displays in the web portal. It contains three buttons labeled "Open", "Save", and "Cancel". He clicks the Open button. A dialog box labeled "Remote Desktop Connection" opens. It includes a button labeled "Connect". [Video description ends]

That's going to start the RDP client on my machine. So I'm just going to choose Connect, I trust the connection.

[Video description begins] A dialog box labeled "Remote Desktop Connection" opens. It includes a button labeled "Connect". [Video description ends]

And at this point, I'm going to change the credential set. So I'm going to specify a username that I specified upon creation, and also the password. So this was specified when the virtual machine was deployed, and then I'll click OK. You're going to be asked if you want to trust the identity of their computer.

[Video description begins] The Windows Security dialog box includes a text box labeled "Password". He changes the username and a text box labeled "Username" displays. He types cblackwell in the Username text box. Then he enters the password. [Video description ends]

I'm going to choose Don't ask me again for connections to this computer, and I'll choose Yes.

[Video description begins] A dialog box labeled "Remote Desktop Connection" opens. [Video description ends]

And after a moment, it's taken me into the desktop of that server running in the Azure Cloud. So it really looks and feels like any on-premises virtual machine would. So it's starting up Server Manager automatically because it's running the Windows Server operating system. Now I'm going to flag that so that that doesn't happen anymore. So here in the Server Manager, I'm just going to go up to the Manage menu.

[Video description begins] The Remote Desktop Connection dialog box closes. A Windows Server OS opens in which a window labeled "Server Manager" opens. It is divided into three parts: menu bar, navigation pane, and content pane. The menu bar includes menus labeled "Manage", "Tools", and "View". The navigation pane includes an option labeled "Dashboard" and its corresponding page is displayed in the content pane. [Video description ends]

I'm going to go into Server Manager Properties. And I'm going to say Do not start Server Manager automatically at logon. If I want it to start, I will start it.

[Video description begins] He clicks the Manage menu, a flyout opens which includes an option labeled "Server Manager Properties". He clicks the Server Manager Properties option and its corresponding dialog box opens. It includes a checkbox labeled "Do not start Server Manager automatically at logon". He selects that checkbox. Then he clicks a button labeled "OK" and the Server Manager Properties dialog box closes. [Video description ends]

Let's just take a look at the IP address configuration here of this virtual machine. So I'm going to open up a command prompt here by searching for cmd.

[Video description begins] He closes the Server Manager window. Then he opens the Start menu and types cmd in the search box. The search result displays a desktop application labeled "Command Prompt". [Video description ends]

And we want to launch this because we want to use the ipconfig command to view our ipconfiguration.

[Video description begins] A window labeled "Administrator: Command Prompt" opens. The C:\Users\cblackwell> prompt is displayed. [Video description ends]

First, we got to hit the Properties of this screen and go to Font, and just increase the size so it's a little bit more legible than it currently is, kind of hard to see. And if I run ipconfig, we can see here that our private IP address, 10.0.1.4, is showing up.

[Video description begins] The output displays the Ethernet adapter Ethernet details which includes IPv4 Address:10.0.1.4. The prompt remains the same. [Video description ends]

Notice the public IP address does not show up here. So back here in the portal, if I look at the networking of this virtual machine, indeed it does have a private IP address in the form of 10.0.1.4. But the public IP address is handled on the Azure side, and so it doesn't even show up within that operating system.


Linux VM Password-based Remote Management
There are plenty of SSH clients that you can run. And depending on the operating system you're using such as a Linux variant, SSH is built in as a command line tool already. For my Windows station, so that I can SSH to Linux virtual machines in the Azure Cloud, I'm going to download the free PuTTY tool from putty.org. Now, to use PuTTY to make an SSH connection to my Linux host, I need to be able to connect to it over the network.

[Video description begins] The Virtual machines blade opens in the Microsoft Azure web portal. [Video description ends]

In other words, I'm on-premises, I need to connect through the Internet to that virtual machine. Whether it's directly or through a jump box such as Azure Bastion. So I'm just going to go ahead here and click on that Ubuntu Linux virtual machine that I have. And I notice that it does have a Public IP address, so I can connect directly to that. So I'm going to go ahead and copy that IP.

[Video description begins] He double-clicks the Ubuntu-1 row entry under the Name column header of the virtual machines table. Its corresponding blade opens. It includes the Public IP address: 40.86.209.167 and a Copy to Clipboard icon adjacent to it. He clicks the Copy to Clipboard icon and the Public IP address copies to Clipboard. [Video description ends]

Now here in PuTTY, I've got the IP address here that I've just pasted in for that Linux Azure-based VM, and it's set to Port 22. So SSH, so I'm going to go ahead and Open a connection.

[Video description begins] A dialog box labeled "PuTTY Configuration" opens. It is divided into two section: navigation pane and content pane. The navigation pane include a subsection labeled "Session", which is selected by default and its corresponding page is displayed in the content pane. It includes a text box labeled "Host Name (or IP address)" and "Port" with 40.86.209.167 and 22 values respectively. The content pane also includes a toggle button labeled "Connection type" with five options labeled "Raw", "Telnet", "Rlogin", "SSH", and "Serial". The SSH option is selected by default. He clicks a button labeled "OK". A command prompt window labeled "40.86.209.167 - PuTTY" opens. [Video description ends]

Now because it's the first time I've connected, it asks me if I trust the unique fingerprint of that server. I'm going to choose Yes. And it wants me to log in. So this is where I'm going to specify the credentials for that virtual machine. Now I know what they are because I've created it. So I'm going to pop in those credentials. Now we're using password based authentication here as opposed to SSH public key. And, once we enter the correct password, we will be signed in. So I'm just going to clear the screen here and type in whoami.

[Video description begins] The login as prompt displays. He logins as cblackwell. The cblackwell@Ubuntu-1:~$ prompt displays. Then he executes the clear command. The screen gets cleared. The prompt remains the same. [Video description ends]

We can see we are logged in as user cblackwell. If I were to run the ifconfig command in Linux, notice that we see the 10.0.0.4 private IP address in the local loopback.

[Video description begins] The output displays broadcast running multicast and loopback running details. He highlights 10.0.0.4 broadcast inet and 127.0.0.1 loopback inet in the output. [Video description ends]

However, if we go back here, notice that the Public IP address is not shown within the OS itself. That is a Microsoft Azure configuration. Now, if you forget the password for a Linux virtual machine, if you're using password-based authentication, you can always scroll down here in the properties navigation bar of that VM and choose Reset password.

[Video description begins] He switches back to the Ubuntu-1 blade opened in the Microsoft Azure web portal. Then he highlights the Public IP address: 40.86.209.167. [Video description ends]

And, if you're using password based-authentication, then you can reset it by specifying the Username and the new Password.

[Video description begins] He double-clicks an option labeled "Reset password" under the Support + troubleshooting subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a toggle button labeled "Mode" with three options labeled "Reset password", "Reset SSH public key", and "Reset configuration only". The Reset password option is selected by default. The blade also includes three text boxes labeled "Username", "Password", and "Confirm password". [Video description ends]

If you're using SSH public key authentication, you can also reconfigure that as well.


Linux VM Public Key Remote Management
When you deploy a Linux virtual machine in the Azure environment, you get the option of enabling either username and password-based authentication, or public key authentication. You can also change that after the fact which I'm going to do here in the portal.

[Video description begins] The Virtual machines blade opens in the Microsoft Azure web portal. [Video description ends]

So I've got an Ubuntu-1 Linux virtual machine that's currently Running. So I'm going to click on it to open up its details.

[Video description begins] He double-clicks the Ubuntu-1 row entry under the Name column header of the virtual machines table. Its corresponding blade opens. [Video description ends]

And what I'm interested in doing is going all the way down to the Reset password option down under Support + troubleshooting. You can also do this for Windows virtual machines if you've forgotten the password. But, in our case, we want to enable public key authentication for an existing Linux VM.

[Video description begins] He opens the Reset password blade. [Video description ends]

So what I'm going to do is choose Reset SSH public key and enter in a Username, user cblackwell in this case, and I need to paste in an SSH public key.

[Video description begins] He selects the Reset SSH public key option for the Mode toggle button and two text boxes labeled "Username" and "SSH public key" displays. He types cblackwell in the Username text box. [Video description ends]

Well, wait a minute, where do I get that from? There are plenty of ways to generate key pairs, one of which is to use the free PuTTYgen tool.

[Video description begins] He opens a web page labeled "PuTTYgen Download" in a new tab. [Video description ends]

So I'm going to go ahead and download and run this tool. When you run the PuTTY Key Generator, you'll be able to generate a public and private key pair. When you click Generate it asks you to keep moving the mouse over the blank area to generate randomness. Now after you're finished with that, you can then actually save it.

[Video description begins] A dialog box labeled "PuTTY Key Generator" opens. It contains three sections labeled "Key", "Actions", and "Parameters". No options are displayed in the Key section. The Actions section includes a button labeled "Generate". He clicks the Generate button and a progress bar displays in the Key section. [Video description ends]

Now because you're going to be saving a private key in a file, so you have the buttons down here to Save public key and to Save private key. When you Save private key, make sure you assign a passphrase because what makes this secure is not only the possession of the private key file, but making sure that it's at least password protected.

[Video description begins] He points to a button labeled "Save private key" in the Actions section. Then he points to a subsection labeled "Public key for pasting into OpenSSH authorized_keys file" and text boxes labeled "Key passphrase" and "Confirm passphrase" in the Key section. [Video description ends]

So here's my Generic_SSH_PublicKey file. This is what I need to copy and paste into the Azure portal. So I'm going to go ahead and press Ctrl+C to copy that.

[Video description begins] He opens a file labeled "Generic_SSH_PublicKey" in the Notepad application. It displays the SSH2 Public Key. He copies the complete key. [Video description ends]

And, back here in the portal, I'm going to paste that into the SSH public key field, after which I'll then click the Update button, that's it. You just need to specify a Username, you need to have a SSH public key. And of course, public key is stored here in Azure. You need to make sure you safeguard the private key on your machine. Let's just test that connectivity. I've fired up the free PuTTY tool. This is another free download that allows remote SSH connectivity, among other things.

[Video description begins] The Ubuntu-1 blade opens. He opens the PuTTY Configuration dialog box. [Video description ends]

And I've specified the public IP address of my Ubuntu Linux VM Port 22, but I have to specify to use a private key.

[Video description begins] The Session subsection is selected in the navigation pane and its corresponding page is open in the content pane. Then he highlights 52.229.88.34 in the Host Name (or IP address) text box and 22 in the Port text box. He points to Ubuntu VM linux IP address 52.229.88.34 in the Ubuntu-1 blade. [Video description ends]

And, so in PuTTY, I can scroll down to the left-hand navigator, go down under Connection - SSH - Auth. And this is where I've specified my Private key file.

[Video description begins] The corresponding page of Auth displays in the content pane. He points to D:\Work\Generic_SSH_PrivateKey.ppk in a text box labeled "Private key file for authentication". [Video description ends]

Remember, we generated the public and private keys using the free PuTTYgen tool. So now that's all filled in, I'm going to go ahead and click Open and it asks me who I want to log in as.

[Video description begins] He clicks the Session subsection in the navigation pane and its corresponding page displays in the content pane. Then he clicks the OK button and the PuTTY Configuration dialog box closes. A command prompt window labeled "52.229.88.34 - PuTTY" opens. The Login as prompt displays. [Video description ends]

Well, when we reset our public key authentication for Linux, we specified the username of cblackwell. And now it wants me to enter the passphrase for my private key file, so I'm going to go ahead and enter that in, and that's it. We are now into our Linux virtual machine using public key authentication.

[Video description begins] The cblackwell@Ubuntu-1:~$ prompt displays. Then he clears the screen. The prompt remains the same. [Video description ends]
Just-in-Time VM Access

[Video description begins] Topic title: Just-in-Time VM Access. The presenter is Dan Lachance . [Video description ends]

In Azure, just-in-time virtual machine access, otherwise called JIT, J-I-T, allows you to make sure that ports for managing VMs are only open when management needs to be done. So we know that port 3389 is normally used for RDP remote management of Windows VMs, and that Port 22 is open for SSH management of Linux VMs. And so instead of keeping those ports open all the time, just-in-time access has a specific time that those are open. Basically, when administrators request access, the ports are open, and we can specify whether it's an hour, two hours, three hours that that port is available.

[Video description begins] The Microsoft Azure web portal opens in which the Home page is displayed. [Video description ends]

So the first thing we'll do here in the portal, is we're going to go into our left-hand navigator bar and scroll down and go into the Security Center. You can go into the Security Center as an Azure admin to request just-in-time access.

[Video description begins] A blade labeled "Security Center" opens. It is divided into two sections: navigation pane and content pane. An option labeled "Overview" is selected by default in the navigation pane and its corresponding blade is open in the content pane. [Video description ends]

So I'm just going to scroll down here in the navigation bar, and I'm going to click under ADVANCED CLOUD DEFENSE on Just in time VM access.

[Video description begins] A blade labeled "Just in time VM access" opens. It includes three tabs labeled "Configured", "Recommended", and "No recommendation". The Configured tab is selected by default. [Video description ends]

However, over on the right, we don't have any virtual machines that are configured for just-in-time access. Not a problem, let's make that happen. So I'm going to go Home, I'm going to go into my Virtual machines view, and I'm going to enable just-in-time access for a Linux VM. It doesn't matter if it's Linux or Windows.

[Video description begins] The Virtual machines blade opens. [Video description ends]

But in this example, I'm going to open up a Linux VM. And, when you want to enable just-in-time access at the VM level, you need to go into the configuration of it, Configuration blade. So I'm going to click Configuration on the left.

[Video description begins] He double-clicks the Ubuntu-1 row entry under the Name column header of the virtual machines table and its corresponding blade opens. It is divided into two sections: navigation pane and content pane. He clicks an option labeled "Configuration" in the navigation pane and its corresponding blade opens in the content pane. It includes a button labeled "Enable just-in-time". [Video description ends]

So for just-in-time access on the right, I'm going to click Enable just-in-time, and it says it was successfully enabled.

[Video description begins] A link labeled "Open Azure Security Center" displays. He clicks that link and a blade labeled "Just in time VM access" opens. It includes a table with five columns and a row. The column headers are Virtual machine, Approved, Last access, Connection details, and Last user. The row entries under the Virtual machine, Approved, Last access, and Last user column headers are Ubuntu-1, 0 Requests, N/A, and N/A respectively. [Video description ends]

And we can actually Open Azure Security Center where we started because that's where, as we know, administrators will request access. So, when the administrators need access to that Ubuntu Linux VM here in the security center, they can put a check mark in the box to the left of it, and they can click Request access. When they do that, notice that port 22 is what will be open, and we can determine the Allowed Source IP range and the Time range for which that port will be open the default of which is set to three hours.

[Video description begins] A blade labeled "Request access" opens. It includes a table with five columns and a row. The column headers are Port, Toggle, Allowed Source IP, IP Range, and Time range (hours). [Video description ends]

I'm also going to click on On under Toggle to open the ports, and just put in something in the justification field. And then I'll click the Open ports button.

[Video description begins] He types Need to configure the server in a text box labeled "Enter request justification". Then he clicks a button labeled "Open ports". The Request access blade closes. [Video description ends]

And, after a moment we can see in the upper right that Just-in-time VM access has been enabled, based on our configuration here in the security center.
VM Move

[Video description begins] Topic title: VM Move. The presenter is Dan Lachance . [Video description ends]

As the name implies, resource groups in Azure are used to group related resources together. That way, they can be treated as a unit and managed as such. So, for example, you might deploy all of the underlying resources in Azure that make a web application work.

Like the web app itself, maybe a back-end database, and so on, you could lump those into a resource group and manage them as one. So, for example, if you were to delete the resource group, all of the resources within it also get deleted. In this case, we're going to move a virtual machine to a target resource group.

[Video description begins] The Virtual machines blade opens in the Microsoft Azure web portal. [Video description ends]

Often this is done because you're reorganizing resources. So for example, here I've got an Ubuntu virtual machine called Ubuntu-1. And if I actually click on it to open it up, I'll be able to see its current resource group.

[Video description begins] The Ubuntu-1 blade opens. [Video description ends]

You could also see that in the Virtual machines view under the Resource group column, but we can see it here too. It's Rg1, resource group 1, but we also have a change link next to the resource group, which I'm going to click on. So it's currently in resource group 1, or Rg1. Now what we can see here are the related resources. So we can see there are some items related to the virtual machine itself, let's just scroll down.

[Video description begins] A blade labeled "Move resources" opens. It includes two lists labeled "Resources to move" and "Related resources to move (optional)". The Resources to move list contains three resources that are labeled "Ubuntu-1", "Ubuntu-1/enablevmaccess", and "Ubuntu-1/OmsAgentForLinux". He points to the resources. [Video description ends]

We can also select other items that we might want to move along with it, so I'm just going to choose Select all. So we might have disks related to it, other items. Now, you can also cherry-pick and say, well, the only real thing I want to move is things related to that VM. Such as its operating system, disk, and any other items that might make sense, like the network interface, or the NIC.

[Video description begins] The Related resources to move (optional) list includes several checkboxes. He selects a checkbox labeled "Select all" and all the resource checkboxes get selected. Then he unchecks the Select all checkbox and all the resource checkboxes get unchecked. Then he selects a resource checkbox labeled "Ubuntu-1_disk1_6343ac3d063343cb8dbf793bec68eea8". [Video description ends]

For that item, maybe the network security group, maybe public IP addresses it might be using, and so on, so it's really up to you.

[Video description begins] Then he selects checkboxes labeled "Ubuntu-1VMNic", "Ubuntu-1NSG", and "Ubuntu-1PublicIP". [Video description ends]

Now what we have to do at this point is specify the target Resource group from the drop-down list. So I've got another Resource group called Rg3.

[Video description begins] In a section labeled "Move these resources to”, he clicks a drop-down list box labeled "Resource group"and a drop-down list opens. He selects an option labeled "Rg3" from the drop-down list. [Video description ends]

I'm going to turn on the check mark that says, I understand that when I do this, some moved resources will, well, they're definitely going to get a new resource ID. Part of the resource ID is the name of the resource group. So if you've got some scripts or some kind of command line tools that refer to the current resource IDs.

You're going to have to change them up after you move these items to the new resource group. It's not a problem, let's go ahead and click OK. It's going to run a validation, and then we'll be able to proceed with moving to a new resource group. And, from the Notifications bell icon in the upper right, I can see it's still in the midst of moving those resources.

[Video description begins] The Move resources blade closes. The Ubuntu-1 blade opens. [Video description ends]

After a few minutes, if you check the Notifications area, you'll see, hopefully, that it successfully moved the resources to the new resource group. Let's check it out, we're still looking at outdated information here on the screen. We could, of course, click Refresh to get a refresh of items. Now it says, Not found, well, we've kind of moved the object.

[Video description begins] He closes the Ubuntu-1 blade and the Virtual machines blade displays. [Video description ends]

So let's go back one more level to our list of virtual machines, where it still says that Linux Ubuntu Virtual machine is in Rg1. We know that's not the case, so let's just go ahead and do a Refresh.

[Video description begins] He clicks a button labeled "Refresh". The virtual machines table refreshes. The Rg1 row entry under the Resource group column header changes to Rg3. Then he points to Ubuntu-1, Virtual machine, Stopped (deallocated), Rg3 row entries under the Name, Type, Status, and Resource group column headers respectively. [Video description ends]

It's now in Rg3, as we can see, so of course, if we click to open up that object in the Overview blade, it's reflected here. We can see the Resource group is listed indeed as Rg3.

[Video description begins] He double-clicks the Ubuntu-1 row entry and its corresponding blade opens. The Overview option is selected in navigation pane and its corresponding page opens in the content pane. [Video description ends]

Now, what's interesting is that if we, say, go down to the Properties and if we take a look at some of the details, we can see that some things will not have changed.

[Video description begins] He clicks an option labeled "Properties" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. [Video description ends]

The Computer name hasn't changed, the private IP, the virtual machine, Operating system type, that type of stuff doesn't change. And also, if I go back up to Overview once again, the Location or region, in this case, Canada East, does not change, also.

[Video description begins] He points to Computer name: Ubuntu-1, Private IP address: 10.0.0.4, and Operating System: Linux information in the Properties blade. Then he opens the Overview blade. [Video description ends]

We should actually scroll back down and take a look at the Properties again. Because remember, we had a message about the resource ID being different after the move. And you might have to change any scripts that referenced the old one.

[Video description begins] The Properties blade opens. [Video description ends]

So, if I look at the properties of the VM, if we kind of scroll down further, we'll see the Resource ID. And what will have changed is part of that Resource ID path that refers to the Resource group where that object was deployed.

[Video description begins] He highlights Rg3 in the path displayed in a text box labeled "Resource ID". [Video description ends]
VHD Deployment Templates

[Video description begins] Topic title: VHD Deployment Templates. The presenter is Dan Lachance . [Video description ends]

You can reuse existing VHD files, or virtual hard disk files, that you might have created already for VMs on-premises. You can use those again in the Azure Cloud. So you can deploy or create a new virtual machine and reference an existing VHD.

[Video description begins] A browser displays with two tabs. In the first tab, the Storage accounts blade is open in the Microsoft Azure web portal. In the second tab, a web page labeled "azure-quickstart-template" is open. The second tab is selected. It includes a section labeled "Create a virtual machine using Managed Disks from a specialized vhd in a new or existing virtual network". It includes a button labeled "Deploy to Azure". [Video description ends]

Here I've done a search here on GitHub looking for a template, an ARM template for Azure to create a virtual machine using a specialized VHD, which really just means a custom one. So right here, I have a button to link directly to Azure, Deploy to Azure. So I'm going to go ahead and click on that.

[Video description begins] A blade labeled "Create a VM in a new or existing vnet from a custom VHD" opens in the Microsoft Azure web portal. The blade includes sections labeled "TEMPLATE", "BASICS", and "SETTINGS". The TEMPLATE section contains three icons labeled "Edit template", "Edit parameters", and "Learn more". [Video description ends]

Now, from here, I could click Edit template if I wanted to go in and see the actual JSON and work through it. And, of course, we can see that there are a number of variables that we are supplying here, like the network interface card name, the public IP address name, the disk name, and so on.

[Video description begins] He clicks the Edit template icon and its corresponding blade opens. It is divided into three sections: tool bar, navigation pane, and code viewing pane. He points to files labeled "nicName", "publicIPAddressName", and "diskName" under a folder labeled "Variables" in the navigation pane. Several code lines are displayed in the code viewing pane. [Video description ends]

However, I don't want to actually edit that. So I'm going to go back here. And we can see that based on the template, there are some things that we need to specify, such as a Resource group.

[Video description begins] He closes the Edit template blade. [Video description ends]

I'm going to tell it I want to create a new Resource group. Let's just call that Rg7.

[Video description begins] In the BASICS section, he clicks a link labeled "Create new" below a drop-down list box labeled "Resource group". A dialog box opens which includes a text box labeled "Name". He clicks a button labeled "OK" and the dialog box closes. The Resource group drop-down list box displays an option labeled "Rg7". [Video description ends]

And this is going to be to deploy our new virtual machine from an existing disk. I'm going to scroll down and select the appropriate location where I want this deployed.

[Video description begins] He clicks a drop-down list box labeled “Location” and a drop-down list appears. He selects an option labeled "(Canada) Canada Central" in the Location drop-down list box. [Video description ends]

And maybe I'll call this Ubuntu-1. It's going to be Linux-based. I already have a Linux VHD, or virtual hard disk file uploaded to a storage account.

[Video description begins] In the SETTINGS section, he types Ubuntu-1 in a text box labeled "Vm Name". He selects an option labeled "Linux" in a drop-down list box labeled "Os Type". [Video description ends]

So I need to copy the URI for that and place it here. So let me flip over to my storage accounts. I'm going to open one up.

[Video description begins] He switches to the first tab in which the Storage accounts blade is open. It includes the storage accounts table with six columns and three rows. The column headers include Name and Type. He double-clicks a storacct333325 row entry under the Name column header and its corresponding blade opens. [Video description ends]

I've got a folder I've created in a storage account called vhds. We'll see that when I go under Blob service here and click on Containers.

[Video description begins] He opens the storacct333325 blade. He clicks an option labeled "Containers" under a subsection labeled "Blob service" in the navigation pane and its corresponding blade opens in the content pane. [Video description ends]

And in the vhds folder, or container, I've already uploaded an Ubuntu Linux vhdx file, it's about 4.5 gig.

[Video description begins] The Containers blade includes a table with multiple columns and four rows. The column headers include Name and Last Modified. He double-clicks a vhds row entry under the Name column header and its corresponding blade opens. It is divided into two sections: navigation pane and content pane. An option labeled "Overview" is selected in the navigation pane and its corresponding blade is open in the content pane. It includes a table with six columns and a row. The column headers include Name and Size. He points to 4.5 GB under the Size column header. [Video description ends]

So I'm going to go ahead and click on its name here to open up its properties. Because from there I'll be able to copy the URI. So here it's listed as URL.

[Video description begins] He clicks an Ubuntu 18.x-linux1.vhdx row entry under the Name column header and its corresponding blade opens. It includes four tabs labeled "Overview", "Snapshots", "Edit", "Generate SAS". The Overview tab is selected. It displays properties of the Ubuntu 18.x-linux1.vhdx, which includes URL, LAST MODIFIED, CREATION TIME, and TYPE. [Video description ends]

I'm going to go ahead and copy that. And I'm going to go back over to our other tab and paste that into the Os Disk Vhd Uri field.

[Video description begins] He copies the URL path. Then he switches to the second tab in which the Create a VM in a new or existing vnet from a custom VHD blade is open. Then he pastes the copied URL in a text box labeled "Os Disk Vhd Uri". [Video description ends]

We can also specify things like the VM size, whether we want to build a new VNet, and subnet, or whether we want to use existing ones. So I'm going to let it build all of these new items. We can see here that the DNS name for the public IP resource will concatenate the text VM dash, and then a unique string, based from the resource group ID. And we can see that the Location for this will be the location of the resource, the location to build or deploy the VM.

[Video description begins] He points to Standard_D2s_v3 in a text box labeled "Vm Size". Then he points to an option labeled "new" in a drop-down list box labeled "V Net New Or Existing". Then he points to subnet-1 in a text box labeled "Subnet Name". Then he points to [concat('vm-', uniqueString(resourcegroup().id))] in a text box labeled "Dns Name For Public IP". Then he points to [resourceGroup().location] in a text box labeled "Location". [Video description ends]

So down at the bottom, I'm just going to go ahead and say, I agree to the terms and conditions stated above, and I'm going to choose Purchase at which point, it will deploy the virtual machine.
VM Resizing

[Video description begins] Topic title: VM Resizing. The presenter is Dan Lachance . [Video description ends]

Resizing a virtual machine means vertically scaling it. Scaling up vertically means adding extra underlying horsepower. So things such as the number of vCPUs to support your workload or the amount of RAM. Of course, scaling down vertically means reducing the amount of underlying horsepower. Because you might not need it for the given workload, and at the same time, you would save on costs. Naturally, having a running virtual machine with four vCPUs and 16 gigs of RAM is going to cost more than something with less.

[Video description begins] The Virtual machines blade opens in the Microsoft Azure web portal. It includes the virtual machines table. [Video description ends]

So to get started here, I’m going to go into an existing virtual machine, it’s an Ubuntu-1 Linux virtual machine, although it is stopped. And I’m going click on it to open up its navigation bar.

[Video description begins] He clicks the Ubuntu-1 row entry under the Name column header of the virtual machines table. The Ubuntu-1 blade opens in which the Overview option is selected in navigation pane and its corresponding blade opens in the content pane. [Video description ends]

One of the things I can see here is the size, I can resize it. When I click Size, I'll see what it's currently configured at. Now, you can monitor the performance of a VM with its workloads running in it to see if the current sizing is adequate or not.

[Video description begins] He clicks an option labeled "Size" under the Settings subsection and its corresponding blade opens in the content pane. It includes a button labeled "Resize" and a table with seven columns and multiple rows. The column headers are VM Size, Offering, Family, vCPUs, RAM (GiB), Data disks, and Max IOPS. [Video description ends]

We do have a Resize button that is available here. What it's doing is resizing it based on what is selected in the background. So you can select the appropriate sizing with the number of vCPUs, the amount of RAM, the supported Data disks. The maximum disk IO operations per second, which is an important measure of throughput for the disk subsystem. And of course, if we look in our Notifications area, it resized it. Let's take a look at doing that with one that's already running. We've got a WinSrv2019-1 VM, we can see the status here is shown as Running.

[Video description begins] He switches back to the Virtual machines blade. Then he points to WinSrv 2019-1 and Running row entries under the Name and Status column headers. [Video description ends]

If I click on it in the same way I can go to Size. Now, when I look at the sizing for that virtual machine, we'll see that we have the option of simply selecting a different size. But what's interesting about this before we do that, is if I go up to the Overview part of that virtual machine.

[Video description begins] He double-clicks the WinSrv 2019-1 row entry and its corresponding blade opens. It is divided into two sections: navigation pane and content pane. An option labeled "Overview" is selected in the navigation pane and its corresponding blade is open in the content pane. He double-clicks an option labeled "Size" under a the Settings subsection and its corresponding blade opens in the content pane. It includes a button labeled "Resize" and a table with seven columns and multiple rows. The column headers are VM Size, Offering, Family, vCPUs , RAM (GiB), Data disks, and Max IOPS. [Video description ends]

We'll have some details about that virtual machine such as its current sizing.

[Video description begins] He opens the Overview blade. [Video description ends]

Here it's set to Standard DS1 v2, which includes one vCPU and about 3.5 gig of memory. Just bear in mind that depending on what your workload needs are, some of the more enhanced virtual machine sizes are only available in specific regions. So you might find that that is a bit of limitation that might dictate the region in which you specify where you want your virtual machine to be deployed. However, let's go back to Size. Now, you have some filters up at the top, for example, we can see the Family here's for general purpose usage. But I can actually change that and say, well, I actually need GPU support. So we can select GPU.

[Video description begins] He switches back to the Size blade. [Video description ends]

Now, remember that some specialized sizes may not be available in certain regions, GPU is for graphics processing, intensive graphics processing. Now, let's actually keep that open. Let's just duplicate this web browser page. And let's just go back to the Home page and let's choose to create a new virtual machine. We're not actually going to follow through, but let's just check out the sizing as you're creating a VM. I'll just choose Windows Server 2016, it doesn't matter because we're not going to create it.

[Video description begins] The New blade opens. A blade labeled "Create a virtual machine" opens. It contains seven tabs labeled "Basics", "Disks", "Networking", "Management", "Advanced", "Tags", and "Review + create". The Basics tab is selected and its corresponding page is displayed. [Video description ends]

But I am interested though on the first part of the wizard in taking a look at, first of all, the sizing. But before we do that though, let's specify a resource group and a Region. Notice, currently, it's (Canada) Canada East, okay? Well, let's say we were to switch that to Canada Central, like our other virtual machine, (Canada) Canada Central.

[Video description begins] He clicks a drop-down list box labeled "Resource group" and a drop-down list appears. He selects an option labeled "Rg1". In a section labeled "Instance details", he clicks a drop-down list box labeled "Region" and a drop-down list appears. He selects an option labeled "(Canada) Canada Central". [Video description ends]

So if you scroll down a little bit, you'll notice that the Size is set to Standard DS1 v2, that's fine. If I click Change size, I get the same type of options that we get for an existing VM.

[Video description begins] A blade labeled "Select a VM size" opens. It includes a table with multiple columns and rows. The column headers include VM Size, Family, RAM (GiB). [Video description ends]

However, if I were to click on General purpose and uncheck General purpose and select GPU, so filtering by GPU.

[Video description begins] A filter labeled "Family" is set to General purpose. He changes it to GPU. A single row returns in the table, which is grayed out. [Video description ends]

Well, you've actually got one here but it's grayed out. We can't even select it. So if I try to select that VM size, and it just doesn't take because it's not available there. However, if I were to choose a different region, let's say, (US) East US, go back into changing the size.

[Video description begins] He clicks a button labeled "Select" and the Select a VM size blade closes. [Video description ends]

And then why don't we do the same exact type of thing? Let's restore the default filters. Let's go back here and uncheck General purpose. Let's select GPU. And then we can see that there is one available that we could actually select here.

[Video description begins] He clicks the Change size link and the Select a VM size blade opens. He clicks a link labeled "Restore default filters" and all the filters restore to default. Then he again changes the Family filter to GPU. He selects the first row. Then he clicks the Select button and the Select a VM size blade closes. The Standard NV4as_v4 size displays adjacent to a text label called "Size". [Video description ends]

So just bear in mind that when you're resizing, if you don't see the selections you think you should see. It could be because of the region that the VM has been deployed into. So I'm going to close that, we're not going to keep it here.

[Video description begins] He closes the duplicate tab. The remaining tab displays in which the WinSrv2019-1 blade is open. [Video description ends]

I'm just going to clear all of the filters. So if we wanted to resize, we're limited to resizing to the size availability within the region. So I can just make a selection and I can resize it. Notice, there is a note here that says, if your VM's running, resizing it's going to cause it to be restarted. That's fine as long as we are aware of that. And there's not a mission critical work load running at the time that needs to be running when we resize it.
VM Data Disks

[Video description begins] Topic title: VM Data Disks. The presenter is Dan Lachance . [Video description ends]

In this demonstration, I'll use the portal to create a managed disk. A managed disk is really a virtual hard disk that you define in the Azure cloud that can you then attach or associate with virtual machines. And at that point, it's kind of like plugging in a physical disk device into a physical server. It then gets recognized and you partition and format it as you normally would.

[Video description begins] The Microsoft Azure web portal opens in which the Home page is displayed. [Video description ends]

So to get started here in the portal, I'm going to click Create a resource. I'm going to search for managed disk. And I'll choose Managed Disks. And I'll click Create.

[Video description begins] The New blade opens. He selects an option labeled "Managed Disks". He clicks that link and its corresponding blade opens. A wizard labeled "Create managed disk" opens. It contains three steps labeled "Basics", "Tags", and "Review + create". The Basics step is selected and its corresponding page is displayed. [Video description ends]

Now as normal, I'll have to specify things like the resource group where I want this deployed. So I'll choose that from the list and I have to come up with a name. I'm going to call this East-Windows-DataDisk1.

[Video description begins] He selects an option labeled "Rg1" in a drop-down list box labeled "Resource group". Then he types East-Windows-DataDisk1 in a text box labeled "Disk name" under a section labeled "Disk details". [Video description ends]

And it seems like it likes the name, so that's good. I'm going to put it in a region where I know I've got a virtual machine that I want to attach it to. So (Canada) Canada East, or actually in my case, I'm going to change that up so that it becomes (Canada) Canada Central. And I'm going to specify down below that the source type is None. So I'm not creating this virtual disk from essentially a blueprint or an image, not from a storage blob that I might have uploaded, not from a snapshot of an existing managed disk.

The default size here is 1024 GiB, which works out to about one terabyte. I can change the size, but I'm going to accept that. I'll just continue through the wizard, no tagging, review, and create. It'll run the validation, which passes, and I'll click Create. And this is only the first part of this because the next part is going to be to attach it to a virtual machine to make it usable.

[Video description begins] He clicks a button labeled "Next: Tags". A page labeled "Tags" displays. Then he clicks a button labeled "Next: Review + create" and its corresponding page displays. The Create managed disk wizard closes. A blade labeled "Microsoft.ManagedDisk-20200324135649" opens. It is divided into two sections: navigation pane and content pane. An option labeled "Overview" is selected by default in the navigation pane and its corresponding blade opens in the content pane. It displays a message, Your deployment is complete. [Video description ends]

Okay, so it looks like it's done. So let's go into our Virtual machines view and let's attach this disk to a virtual machine. I've got a Windows Server 2009 VM. It's running, it's in the Canada Central location.

[Video description begins] He opens the Virtual machines blade. It includes the virtual machines table. He points to the WinSrv2019-1, Running, and Canada Central row entries under the Name, Status, and Location column headers respectively. [Video description ends]

So I'm going to click on that to open up the properties for the virtual machine and I'm going to go down to Disks.

[Video description begins] He double-clicks the WinSrv2019-1 row entry and its corresponding blade opens. Then he double-clicks an option labeled "Disks" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a table with five columns and a row. The column headers include Name, Size, and Encryption. [Video description ends]

And here I'll see any existing disks associated with this virtual machine. We can see we have an OS disk. However, down under Data disks, it says None.

[Video description begins] A table with six columns and no rows displays. The column headers are LUN, Name, Size, Storage account, Encryption, and Host caching. [Video description ends]

So I'm going to click the Add data disk button, and from the name drop-down list I'm going to choose the East-Windows-DataDisk1 that we just created. And after I've done that, I'm going to click Save up at the top to add that disk device.

[Video description begins] A row entry under the LUN column header is 0. Then he selects an option labeled "East-Windows-DataDisk1" in the drop-down list box under the Name column header. The row entries under the Size, Storage account, Encryption, and Host caching column headers auto-populates with 1024 GiB, Premium SSD, Not enabled, and Read-only respectively. [Video description ends]

Now this is essentially the second step. The first was creating the managed disk. The second was to attach it or add it to a virtual machine, which we're doing, and it's done now. We can see in our notification area.

[Video description begins] A message displays in the notification area, which reads: Successfully updated virtual machine disks. [Video description ends]

So the third thing we need to do then is to go into that operating system. So use RDP to get into that OS to create a file system on that disk device so it's actually usable. So in that server, I'm going to go to the Start menu and search for disk and I'm going to choose Create and format hard disk partitions.

[Video description begins] He minimizes the Microsoft Azure web portal. [Video description ends]

There, it is right there. And what we want to do is make sure we work with the newly added device that pops up automatically, Disk 2.

[Video description begins] A window labeled "Disk Management" opens. Along with this a dialog box labeled "Initialize Disk" opens. [Video description ends]

So I'm going to treat it as an MBR or master boot record type of disk. I'll click OK. And if I just expand this and maximize the window, there's just two down there. So approximately 1,024 gig as we can see, but it's all Unallocated.

[Video description begins] The Initialize Disk dialog box closes. The Disk Management window is divided into five parts. The first part is a menu bar which includes menus labeled "File" and "Action". The second part displays a table with eight columns and three rows. The column headers include Volume and Type. The third, fourth, and fifth parts are labeled "Disk 0", "Disk 1", and "Disk 2". The third, fourth, and firth parts are divided into two sections. The first section of each part displays the Disk information and the second section of each part displays its allocation information. [Video description ends]

We can see the disk is Online. And I can go ahead and right-click on it and do whatever I need to do, for example, convert it to GPT or make it a dynamic disk, put it offline.

[Video description begins] He right-clicks on the first section of the Disk 2. A flyout opens which includes options labeled "Convert to Dynamic Disk", "Convert to GPT Disk", and "Offline". [Video description ends]

But I'm okay with that as it is. I'm just going to right click in that disk area and create a new simple volume.

[Video description begins] He right-clicks on the second section of the Disk 2. A flyout opens which includes an option labeled "New Simple Volume". He clicks the New Simple Volume option and its corresponding wizard opens. [Video description ends]

And I'm just going to go through and accept all of the defaults for this and I'm going to use the whole thing to carve it all up into one big disk partition.

[Video description begins] He clicks a button labeled "Next" to accept all defaults. He then clicks a button labeled "Finish" and the New Simple Volume Wizard closes. [Video description ends]

And we can see it's now in the midst of formatting and it's not going to take very long, then it's done. So we now have a new disk here.

[Video description begins] The first section of Disk 2 displays, Basic 1024.00 GB Online information. The second section of Disk 2 displays, New Volume 1024.00 GB NTFS, Healthy (Primary Partition) information. [Video description ends]

Now, when I went through the wizard and accepted the defaults, it allocated or assigned drive letter E. Let's just check that out here, let's go into Windows Explorer. Here's our New Volume, drive E.
Azure Key Vault

[Video description begins] Topic title: Azure Key Vault. The presenter is Dan Lachance . [Video description ends]

An Azure Key Vault is a resource in the Azure cloud that you can use as a central storage location or repository for secrets, such as encryption keys. You can then build your applications or configure various Azure services to retrieve those secrets like keys from the centralized vault.

[Video description begins] In the Microsoft Azure web portal, the Home page is open. [Video description ends]

So to get started here in the portal, to create the vault, I'll click Create a resource. And I want to create a key vault. So I'm going to search for key vault and I'll choose Key Vault, then I'll click on Create.

[Video description begins] The New blade opens. He clicks a link labeled "Key Vault" and its corresponding blade opens. It includes a button labeled "Create". A wizard labeled "Create key vault" opens. It contains five tabs labeled "Basics", "Access policy", "Networking", "Tags", and "Review + create". The Basics tab is selected and its corresponding page is displayed. [Video description ends]

The first thing I have to do, which is normally the case when deploying Azure resources, is deploy this into a specific Resource group. So I'll choose Rg1, we'll call this KV1East, key vault one east. So it's going to be in the (US) East US Region.

[Video description begins] He selects an option labeled "Rg1" in a drop-down list box labeled "Resource group". Then he types KV1East in a text box labeled "Key vault name" under a section labeled "Instance details". [Video description ends]

Down below, I'm going to leave all the defaults such as soft deletion being enabled and 90 days as the Retention period, that's all fine. I'll click Next : Access policy > for Access policy.

[Video description begins] The Access policy page displays. [Video description ends]

So for example, I'm going to turn on, enable access to Azure Virtual Machines for deployment. So if they want to access a key in the key vault and even after the fact down here for disk encryption, so I could add that and I could add additional items, I could Add Access Policy.

[Video description begins] He selects a checkbox labeled "Azure Disk Encryption for volume encryption". Then he points to a link labeled "Add Access Policy". [Video description ends]

And I could change that at any point in time. However for now that's good. I'm going to click Next : Networking >. I'm going to leave this at Public endpoint (all networks) for Connectivity method.

[Video description begins] The Networking page displays. It includes three radio buttons labeled "Public endpoint (all networks)", "Public endpoint (selected networks)", and "Private endpoint". The Public endpoint (all networks) radio button is selected by default. [Video description ends]

And on next, I'm not going to specify any tagging, I'll go to Next : Review + create >. The validation has passed, based on my selections, so I'm going to go ahead and click Create to create the vault.

[Video description begins] He clicks a button labeled "Next: Tags". The Tags page displays. Then he clicks a button labeled "Next: Review + create". The Review + create page displays. [Video description ends]

After a moment, the deployment of the key vault is complete, so I'm going to click Go to resource.

[Video description begins] A blade labeled "KV1East" opens. It is divided into two sections: navigation pane and content pane. An option labeled "Overview" is selected in the navigation pane and its corresponding blade is open in the content pane. The blade displays a message, which reads: Your deployment is complete. It also includes a button labeled "Go to resource". [Video description ends]

Now within the key vault, under Settings we can build or generate, as it's called, Keys.

[Video description begins] A blade labeled "KV1East" opens. He clicks an option labeled "Keys" under a subsection labeled "Settings" in the navigation pane and its corresponding blade opens in the content pane. It includes a button labeled "Generate/Import" and a table with three columns and no rows. The column headers are Name, Status, and Expiration Date. [Video description ends]

You can also actually import any if you have any. For example, I'll click Generate/Import for keys, I want to create a key here. So Generate, I'm going to call it Key1. I can determine whether the Key Type is of RSA or elliptic curve EC, I can choose the RSA Key Size in bits, leave it on 2048.

[Video description begins] A blade labeled "Create a key" opens. He types Key1 in a text box labeled "Name". [Video description ends]

I can set an activation date of one the key becomes valid and can be used and also when it expires and can no longer be used. And it's going to be enabled by default. So I'll just go ahead and click on Create.

[Video description begins] The Create a key blade closes. A row adds in the Keys blade. The row entries under the Name and Status column headers are Key1 and Enabled. [Video description ends]

If I go to Secrets, I can generate or import secrets.

[Video description begins] He clicks an option labeled "Secrets" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a button labeled "Generate/Import" and a table with four columns and no rows. The column headers are Name, Type, Status, and Expiration Date. [Video description ends]

Now a secret would be used, for example, for a password, so you give a Name to it and a Value. And it might be credentials required as part of the connection string for an app to talk to a database or something like that. And so you'd have to configure your app to be able to get into this vault to read that secret.

[Video description begins] He clicks the Generate/Import button and a blade labeled "Create a secret" opens. [Video description ends]

Now, that's fine, having done that, we can also go to Certificates and work with those. We can generate or import, we're talking about PKI security certificates. This will be a central storage repository for those items.

[Video description begins] He switches back to the Secrets blade opened in the KV1East blade. He clicks an option labeled "Certificates" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a button labeled "Generate/Import" and a table with four columns and no rows. The column headers are Name, Thumbprint, Status, and Expiration Date. He clicks the Generate/Import button and a blade labeled "Create a certificate" opens. [Video description ends]

We also have the option besides those three items of configuring the access policy. We saw that when we were deploying this.

[Video description begins] He switches back to the Overview blade opened in the KV1East blade. He clicks the Go to resource button and the KV1East blade opens. He clicks an option labeled "Access policies" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a link labeled "Add access Policy" and a table with six columns and no rows. The column headers include Name, Email, and Key Permissions. [Video description ends]

And so we could Add Access Policy to further determine which entities should have access to these items.

[Video description begins] He clicks the Add access policy link and its corresponding blade opens. [Video description ends]

So we have templates here that we could select from. So maybe Certificate Management, or we could do everything manually.

[Video description begins] He clicks a drop-down list box labeled "Configure from template (optional)" and its corresponding drop-down list displays. It includes options labeled "Key Management" and "Certificate Management". [Video description ends]

We could set Key permissions. Now these are for keys, so Get, List, Update, Create, Import, Delete, Backup, Restore, and all that stuff. But that's just the keys. Then there's Secret permissions, Certificate permissions, you would apply that to a security principle that should have those privileges.

[Video description begins] The Add access policy blade includes a section labeled "Select principal". He clicks the Select principal section and a blade labeled "Principal" opens. It includes a list of members to which principal will be applied. The list includes members labeled "AD Hybrid Health" and "All Enabled Users". [Video description ends]

So it could be a security principal that's been created in Azure AD, that represents a software component or an application. In that way, we're limiting what access is allowed to keep vault secrets for those components.

[Video description begins] He closes the Principal blade. He switches back to the Overview blade opened in the KV1East blade. [Video description ends]
VM Disk Encryption and the Portal

[Video description begins] Topic title: VM Disk Encryption and the Portal. The presenter is Dan Lachance . [Video description ends]

In this demonstration, I'm going to use the portal to encrypt VM disks. Now this is happening at the Azure level. Despite the fact that there are many solutions out there that let you encrypt disk volumes and files on them within the OS. We're talking about doing it here at the Azure level.

[Video description begins] The Virtual machines blade opens in the Microsoft Azure web portal. [Video description ends]

So in the portal, I'm going to navigate to an existing virtual machine that's up and running. It's a Windows VM, although you can enable encryption for Linux VMs in the exact same manner.

[Video description begins] He clicks the WinSrv2019-1 row entry under the Name column header of the virtual machines table and its corresponding blade opens. [Video description ends]

What we need to do when we open up the navigation bar with the VM properties is we need to scroll down until we see Disks. When we click on Disks, we'll then have the option of encrypting OS or OS and data disks.

[Video description begins] He clicks the Disks option under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. [Video description ends]

Down below, I can see that this VM has an OS disk, and under the Encryption column it currently says Not enabled. Same goes for the one data disk that was associated here. It's also not enabled for encryption.

[Video description begins] The Disks blade includes an OS disk table with five columns and a row. The column headers are Name, Size, Storage account, Encryption, and Host caching. He points to WinSrv2019-1_OsDisk_1 and Not enabled row entries under the Name and Encryption column headers respectively. The blade also includes a Data disks table with six columns and a row. The column headers are LUN, Name, Size, Storage account, Encryption, and Host caching. He points to East-Windows-DataDisk1 and Not enabled row entries under the Name and Encryption column headers respectively. [Video description ends]

So we can click the Encryption button up at the top. The current selection is going to be set to None. It's not encrypted currently, but we can choose to encrypt the OS disk or the OS and data disks, which I'm going to do.

[Video description begins] He clicks a button labeled "Encryption" and its corresponding blade opens. It includes a drop-down list box labeled "Disks to encrypt". He clicks the Disks to encrypt drop-down list box and a drop-down list appears. He selects an option labeled "OS and data disks" from the drop-down list. [Video description ends]

Now the next thing I need to do is click the link to select a key vault and a key within the vault for encryption. So I've already set these up ahead of time. So from the drop-down list, I'm going to select a Key vault.

[Video description begins] He clicks a link labeled "Select a key vault and key for encryption"and its corresponding blade labeled "Select key from Azure Key Vault" opens. [Video description ends]

And, from that key vault, I'll then go down and select a Key within it. I've got a Key already created called Key1. And I can choose a specific Version of the key. I'll choose that, and then I'll click Select.

[Video description begins] He selects an option labeled "KV1East1" in a drop-down list box labeled "Key vault". Then he selects an option labeled "Key1" in a drop-down list box labeled "Key". He clicks a drop-down list box labeled "Version". An alphanumeric key displays. He selects the alphanumeric key in the Version drop-down list box. The Select key from Azure Key Vault blade closes. [Video description ends]

Now, at this point, we get a message that says, well, your key vault isn't enabled for disk encryption. But we do have a button down below where we can enable that in the access policy for the vault. So I'm going to choose Enable key vault for disk encryption, and it says it successfully did it. So I won't be prompted with that again if I want to use that key from that same vault for encrypting other VM disks. So, at this point, I'm going to click Save to save the encryption setting.

And it says, would you like to encrypt and then restart the virtual machine? So this is intrusive in the sense that there will be some downtime after the encryption is complete. That's fine, I'm okay with that, so I'm going to go ahead and click Yes. After a moment in the Notifications area, we can see it successfully updated the disk encryption settings. So let's kind of back out of here and let's just go back to our list of Virtual machines to refresh the view.

[Video description begins] He closes the Encryption blade. [Video description ends]

Let's click back on that same virtual machine. Let's go back and examine the disk configuration.

[Video description begins] He switches back to the Virtual machines blade. Then he refreshes the virtual machines table. Then he double-clicks the WinSrv2019-1 row entry under the Name column header and its corresponding blade opens. Then he opens the Disks blade. [Video description ends]

And, when we do that, we can see that under Encryption, we've got Enabled for both the OS disk and the data disk attached to this Windows virtual machine.
VM Disk Encryption and the CLI

[Video description begins] Topic title: VM Disk Encryption and the CLI. The presenter is Dan Lachance . [Video description ends]

You can use the CLI to enable disk encryption for Azure VM disks.

[Video description begins] The PowerShell command prompt window is open in the Microsoft Azure web portal. The PS /home/danlachance72> prompt is displayed. [Video description ends]

Here, in the Cloud shell, I'm going to start by typing az vm -h for help. What's the next level command after az vm?

[Video description begins] He executes the az vm -h command. The output displays a list of subgroups and commands that can be used with az vm command. [Video description ends]

And I can see in the e's here, encryption shows up. So that would be the next thing that we're interested in. So therefore, az vm encryption, but what's next? Let's figure it out, -h for help again, enable would make sense.

[Video description begins] He clears the screen. The prompt remains the same. He executes the az vm encryption -h. The output displays a list of groups and commands that can be used with az vm encryption command. The prompt remains the same. [Video description ends]

Okay, so up arrow key, az vm encryption enable. Now I'm going to have to specify the resource group where the virtual machine resides. So -g for that, in my case Rg1. And -n for the name of the virtual machine, in this case Winsrv2019-1 is the name of my VM. And then I'm going to specify --disk-encryption-keyvault. I need a key vault and I already have one called KV1East1, Key Vault 1 East 1. Now in this case, I'm not even specifying a key. So this is an alternative way to work with this where the key will be automatically created and placed in the specified key vault. So I'm going to go ahead and press Enter. And, after a moment, it looks like it's completed.

[Video description begins] He executes the following command: az vm encryption enable -g Rg1 -n Winsrv2019-1 --disk-encryption-keyvault KV1East1. No output displays. The prompt remains the same. [Video description ends]

Let's go ahead and run az vm encryption show. And we'll specify the resource group and name of the virtual machine. You can go ahead and press Enter.

[Video description begins] He clears the screen. The prompt remains the same. He executes the following command: az vm encryption show -g Rg1 -n Winsrv2019-1. The output displays a code which includes the properties of the Winsrv2019-1 virtual machine. The prompt remains the same. [Video description ends]

And we can see that encryption is enabled on the disks within that VM.
VM Disk Encryption and PowerShell

[Video description begins] Topic title: VM Disk Encryption and PowerShell. The presenter is Dan Lachance . [Video description ends]

In this demonstration, I'll use PowerShell to enable VM disk encryption.

[Video description begins] The PowerShell command prompt window opens in the Microsoft Azure web portal. The PS /home/danlachance72> prompt is displayed. [Video description ends]

To get started here in Cloud Shell, I'm going to establish a couple of variables.

[Video description begins] He pastes and executes four commands simultaneously. No output is returned for each of the command and the prompt remains the same. [Video description ends]

The first one I'm going to call $keyVault. And essentially it's going to store the result of retrieving a Key Vault that I've already created called kV1East1 in a resource group called Rg1.

Next, I'm creating a variable called $diskEncryptionKeyVaultUrl.

[Video description begins] He highlights the first command, which is as follows: $keyVault = Get-AzKeyVault -VaultName KV1East1 -ResourceGroupName Rg1 [Video description ends]

It's going to use the variable we established above and call upon the .VaultUri property.

[Video description begins] He highlights the second command, which is as follows: $diskEncryptionKeyVaultUrl = $keyVault.VaultUri. [Video description ends]

Then we're going to make a variable called $keyVaultResourceId. It's going to use our variable from above and call upon it .ResourceId property of that variable.

[Video description begins] He highlights the third command, which is as follows: $keyVaultResourceId = $keyVault.ResourceId. [Video description ends]

Then I'm going to create a fourth variable called $keyEncryptionKeyUrl. And, within parentheses because I want to treat it as its own command first, I'm going to run Get-AzKeyVaultKey, specify the name of the vault, and a key within it. The vault already exists and so does the key, the key is called Key1. So that's all within parentheses and I'm calling upon .Key.kid.

[Video description begins] He highlights the fourth command, which is as follows: $keyEncryptionKeyUrl = (Get-AzKeyVaultKey -VaultName KV1East1 -Name Key1).Key.kid. [Video description ends]

So now that we've got that done, we can start to actually enable encryption. To do that, I'm going to use the set -AzVMDiskEncryptionExtension cmdlet. I'm going to specify the resource group where the virtual machine resides, the -VMName parameter will have the name of the VM.

[Video description begins] He executes the following command: Set-AzVMDiskEncryptionExtension -ResourceGroupName Rg1 `. The prompt displays the -VMName "WinSrv2019-1" ` and four variables with their values. Then the prompt asks to enable AzureDiskEncryption on the VM. [Video description ends]

And then we're going to use the four variables that we've defined above for each of their respective four parameters. For -DiskEncryptionKeyVaultUrl, -DiskEncryptionKeyVaultId, -KeyEncryptionKeyUrl and -KeyEncryptionKeyVaultId. So at this point it asks, this command will prepare the VM for encryption and might reboot it which could take 10 to 15 minutes or so.

Save your work in the VM. Would you like to continue? I'm going to choose y for yes. Once the PowerShell cmdlet is finished executing, if in the portal we navigate to our VM and go to the Disks blade, we'll be able to check out whether encryption is enabled or not. And in fact, it is on both the OS disk and the one data disk associated with this VM.

[Video description begins] He minimizes the PowerShell. The WinSrv2019-1 blade opens in the Microsoft Azure web portal. Then he opens the Disks blade. Then he points to Enabled row entries under the Encryption column headers of the OS disk and Data disks tables. [Video description ends]

And, if we flip back to the Cloud Shell, we can see the result of enabling disk encryption has succeeded.

[Video description begins] When he typed y to enable AzureDiskEncryption on the VM, the output displayed a table with four columns and a row. The column headers are RequestId, IsSuccessStatusCode, StatusCode, and ReasonPhrase. The row entries under the IsSuccessStatusCode, StatusCode, andReasonPhrase column headers are True, OK, and OK respectively. The prompt remains the same. [Video description ends]
Azure VM Custom Scripts

[Video description begins] Topic title: Azure VM Custom Scripts. The presenter is Dan Lachance . [Video description ends]

Azure Virtual Machines support extensions. Extensions are essentially small software agents that can run within a VM to add functionality. In our case, it will be to run a custom script. Here on premises, I've got a PowerShell script that's using the Install-WindowsFeature cmdlet to install the IIS web server and the management tools associated with that.

[Video description begins] A file labeled "PowerShell_Install_IIS.ps1" opens in the WordPad application. It displays the following command: Install-WindowsFeature -name "Web Server" -IncludeManagementTools. [Video description ends]

Here in the portal, I've popped up a Windows virtual machine and I'm looking at the Overview blade. So in the navigation bar, what I'm going to do is scroll down and under Settings, I'll click Extensions.

[Video description begins] The WinSrv2019-1 blade opens in the Microsoft Azure web portal. He clicks an option labeled "Extensions" under the Settings subsection in the navigation pane and its corresponding blade opens in the content pane. It includes a button labeled "Add" and a table with three columns and two rows. The column headers are Name, Type, and Version. [Video description ends]

Here we'll see any existing extensions that have been configured for this VM. We've got one here for as AzureDiskEncryption and the MicrosoftMonitoringAgent, but we've got an Add button. I'm going to click Add because I want to add the custom script extensions.

[Video description begins] He points to AzureDiskEncryption and MicrosoftMonitoringAgent row entries under the Name column header. Then he clicks the Add button and a blade labeled "New resource" opens. It includes a list of resources. [Video description ends]

So I'm going to scroll down and we can see from Microsoft Corp, Custom Script Extension. I'm going to select that and choose Create.

[Video description begins] He double-clicks a resource labeled "Custom Script Extension" in the list of resources and its corresponding blade opens. It includes a button labeled "Create". He clicks the Create button and a blade labeled "Install extension" opens. It includes text boxes labeled "Script file (Required)" and "Arguments (Optional)". The Script file (Required) text box is linked with the Browse button. [Video description ends]

I'm going to specify the Script file that we were just looking at. We can see it successfully uploaded our PowerShell file which is used to install IIS.

[Video description begins] The Script file (Required) text box displays an uploaded file labeled "PowerShell_Install_IIS.ps1". [Video description ends]

And, depending on how the script is written, it might require arguments, command line values. This one does not, it's not parameterized, so I'm just going to click OK.

[Video description begins] The Install extension blade closes and the Extensions blade displays. A new row adds in the table. [Video description ends]

We can see in the navigation bar, we can see in our Notifications that the deployment is in progress. And, in the background, we can see that it's already added, the CustomScriptExtension to our VM. And before too long, we can see that the Deployment succeeded. So we can go ahead and click on that link if we want to get more information about what was done.

[Video description begins] A notification message displays, which state: Deployment succeeded. He clicks the notification message and a blade labeled "Microsoft.CustomScriptExtension-20200330055147" opens in which an option labeled "Overview" is selected in the navigation pane and its corresponding page opens in the content pane. [Video description ends]

So custom script extensions then are useful when you want to enable some post deployment configuration for VMs from a script.
                    
                    
Azure Networking Overview
Planning and implementing your Azure network solutions shares a lot of commonalities with what you would have done in the past. 
And currently with your on-premises network environment. You have to think about how many networks you're going to need and how they will be used. Which services will be deployed into those networks? The IP address ranges that will be used by subnets and so on. A lot of that does not change in the Azure cloud. So we're going to talk about components in the Azure virtual networking world. Such as VNets or virtual networks, which contain one or more subnets. Now the subnets are actually where resources get deployed. We'll also talk about virtual private networks or VPNs. VPNs provide a secured encrypted tunnel between two endpoints. And that's another network type of configuration in Azure. Of course, we have to think about the ranges of IP addresses that will be assigned to VNets, and ultimately to the subnets within those VNets.

An Azure virtual network or VNet is a resource that you define in the Azure cloud. You have to allocate an IP address range at the time that you create a VNet. You can also specify DNS server configurations. What that means is you can stick with the default Azure-provided DNS servers, which are used for resolving names to IP addresses. But in some cases, depending on the services you're going to deploy, you might want to have custom DNS servers.

As an example, if you want to manually deploy Microsoft Active Directory Domain Services with domain controllers. Which all requires DNS to locate domain controller records. Then you're going to have to configure your own custom DNS servers, and configure the Azure VNets accordingly. You can also configure an Azure virtual network and think of it as an extension of your on-premises network. Such as when you link the two together with a site-to-site VPN. That's one way to do it. Now each VNet consists of one or more subnets.

And each subnet has to have an IP address range to allocate to resources in that subnet. And that IP address range needs to fall within the VNet range. Now if you're working with Azure VNets and subnets, but you don't have a solid understanding of IP addressing, you're going to have to talk to somebody that does to get the correct values. But really, that shouldn't be an issue because it should be planned ahead of time. We can also associate network interfaces with a subnet. A network interface is its own Azure resource that of course is tied to a virtual machine. We can also associate a Network Security Group or NSG with a subnet.

A Network Security Group is a collection of security rules that either allow or deny traffic coming into the subnet in this case. Or traffic leaving the subnet. Within a subnet, you can also configure a route table association. A route table contains route table entries. So you can control traffic flow, such as forcing it to go through a firewall appliance on its way out to the Internet, for instance. So subnets then are contained within a VNet. You can manage Azure network components through ARM templates, using PowerShell cmdlets, using the CLI, the command line interface. And of course using the GUI web-based portal tool.

[Video description begins] VNet Creation Using PowerShell. [Video description ends]

So here we some PowerShell examples of how to work with VNets. In the first line, we are creating a subnet variable to store subnet configuration before we actually create the VNet that contains this subnet. So, we are using New-AzVirtualNetworkSubnetConfig. Well, we're naming the new subnet subnet1 and we're setting the address prefix here to 10.0.1.0/24. So there are 24 bits in the subnet mask starting from the left. That means that the subnet network address here is 10.0.1. You can't just make this stuff up, it needs to be planned properly first.

Now the next thing I'm doing is actually creating the VNet with New-AzVirtualNetwork. I'm specifying the ResourceGroupName parameter. So I'm deploying this VNet into a resource group called Rg1. The location is CanadaEast. The VNet name is VNet4. And notice that the address prefix here for the VNet is 10.0.0.0/16. 16 bits in the mask, so that means only 10.0 identify VNet4. And so subnet1 falls within that, because subnet1 up above if you take a look, is 10.0.1. So therefore, that range is properly within the VNet IP address range.

[Video description begins] VNet Creation Using the Azure CLI. [Video description ends]

You can also work with VNets in the CLI. Here we see az network vnet create. We're deploying a VNet in Rg1, that's the resource group, the name of it is Vnet5. We're sending the address prefix to 10.0.0.0/16. And we're adding the subnet here when there's no need to set up the subnet config first like we did in PowerShell. So --subnet-name. It's going to be called Subnet1. And then we use the --subnet-prefix parameter, and give it the subnet IP address range in CIDR format. And again, as per our previous example, notice it's 24 bits for the subnet range and it falls within the Vnet5 IP address range.


VNets, Subnets, and the Portal
In this demo, I'm going to use the portal to create a new Azure VNet and a subnet. Now when you plan this on premises, you think about how many networks you will need, what types of services will be deployed into those networks and the IP address ranges that will be used. And in the same way, we have to consider those same factors when we plan our VNets in the Azure cloud.
So to get started here in the portal, I'm going to click Create a resource. And I'm going to search for virtual network and I'll select Virtual Network and Create. I have to make sure that I follow standard naming conventions for the organization.

[Video description begins] A blade called "Create virtual network" opens. It contains tabs called "Basics", "IP Addresses", "Security", "Tags", and "Review + create". The Basics tab is selected. [Video description ends]

So first thing I'll do here is put this in a resource group called Rg1 and I'm going to call this Vnet1. It's going to be in the Canada Central region, so I'll click Next for IP addressing. And for the IP address space, it suggests here 10.0.0.0/16, 16 bits in the subnet mask, which is indicative here that we're going to have a network address of 10.0. I can also add an IPv6 address space, I can also add multiple subnets. There's a default subnet that's automatically selected here, however, I don't want to use that. I'm going to click Add subnet to do my own thing.

[Video description begins] A blade called "Add subnet" opens. [Video description ends]

First, it's going to be called Subnet1, and I'm going to use the IP address range that falls within the address space for the VNet listed over on the left. So for example, 10.0.1.0/24. So I've got a 24-bit subnet mask, which in this case implies that the network address for this subnet is 10.0, which is the VNet range .1, so it's within that range. And at this point I'll click Add, so now Subnet1 shows up down below. Just for fun, let's add a second subnet.

[Video description begins] He clicks a button called "Add" and the Add subnet blade closes. [Video description ends]

And you might need to do this, for example, if you want to have one subnet for testing and another subnet that you might use for production if you're doing software development, for instance. So I'm going to click Add subnet, this is going to be called Subnet2.

[Video description begins] A blade called "Add subnet" opens. [Video description ends]

And for the range, I'll use 10.0.2.0/24, so still a 24-bit subnet mask, yet a different network. The network prefix here is 10.0.2. I'll click Add, the subnets show up at the bottom of the list, that's great.

[Video description begins] He clicks a button called "Add" and the Add subnet blade closes. [Video description ends]

I'll click Next: Security at the bottom.

[Video description begins] An option called "DDos protection" is set to "Basic" and an option called "Firewall" is set to "Disabled". [Video description ends]

I'm not going to change any of the settings for distributed denial of service protection or the Azure firewall option. I'll click Next that's for tagging where I could add key and value pairs. For example, if this is going to be for a Project ABC, I might want to flag it that way, I don't have to.

[Video description begins] He enters the keys called "Project" and "ABC" in the fields "Name" and "Value" respectively. [Video description ends]

I'll click Next for review and create, and after it passes the final validation, I'll click Create to create the VNet and its two subnets.

[Video description begins] He clicks a button called "Create" and a blade called "Microsoft.VirtualNetwork-20200321081017 | Overview" opens. It includes a button called "Go to resource". [Video description ends]

After a moment, we can see our deployment is complete, so we can either click Go to resource here or at any point in time, I could navigate, for instance, to the All resources view to see my newly created VNet, Vnet1.

[Video description begins] He switches back to the Microsoft Azure homepage. He clicks an option called "All resources" under a section labeled "Azure services". A blade called "All resources" opens. It includes a table with five columns and seven rows. The column headers are "Name", "Type", "Resource group", "Location", and "Subscription". [Video description ends]

Now over time, you're going to have a lot of resources shown here of many different types, notice the Type column. And so notice that you can sort these columns either ascending or descending depending on what it is exactly that you might be looking for. And in this case, it will group together different types of resources if you're sorting by the Type column. At any rate, here's Vnet1, I'm going to click on it to open it up.

[Video description begins] A blade called "Vnet1" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. It includes options called "Overview", "Activity log", and "Tags". It also includes a section called "Settings" which includes options called "Connected device", "Subnets", "DDos protection" , and "Firewalls". [Video description ends]

Now in the navigation bar over on the left, we can see the Address space that we configured for this entire VNet. We can see down below there are no connected devices, there's also a Connected devices view on the left, at least not yet.

[Video description begins] He clicks an option called "Subnets" in the navigation pane. A blade called "Vnet1 | Subnets" opens in the content pane. [Video description ends]

And if I click on Subnets, I'll see that I've got the two subnets that we defined upon creation along with their IP address ranges and the available number of IPv4 addresses. Now if you've worked a lot with IPv4, you might realize that well normally there's an extra three IP addresses per subnet, so what's going on? Some of these are used internally by Azure. So this is expected when you have a 24-bit subnet that you would have 251 IP addresses available. Some of the other settings that we saw upon creation like DDoS protection can be configured after the fact, Azure Firewall Settings, and so on. All of this can be changed after we create our initial VNet. So at this point, we've got a VNet with two subnets, and we can start to specify any of that information. So in other words, we can deploy virtual machines into one of these subnets upon deployment.


VNets, Subnets, and the CLI
In this demonstration, I'm going to use the Azure CLI to create an Azure VNet and a subnet. 

[Video description begins] A window called "PowerShell command prompt" is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started I'm going to run az network -h. And from here I can learn about the syntax that would be required to create and manage VNets. So I can see vnet is listed here as a separate item.

[Video description begins] He executes the command and highlights vnet from the displayed output. [Video description ends]

So to get started with this let's run az network vnet create.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

The resource group here is going to be called Rg1. That's the resource group I am deploying this VNet into. The name of the VNet here is going to be Vnet2 --address-prefix. We have to have planned the IP addressing that we're going to use in the VNet. In this case, it's going to be 11.0.0.0/16, 16-bit subnet mask. Which means 11.0 serves as our network address at least at the VNet level. Now the next thing I'm going to do is specify also that I want to create a subnet, so --subnet-name. It'll be called Subnet1. And I'll use --subnet-prefix to specify an IP address range for the subnet that falls within the range used up above here for the VNet. So how about 11.0.1.0/24?

[Video description begins] He highlights 11.0.0.0/16 from the command. [Video description ends]

So 24 bits in the mask means 11.0.1 is our network address, okay? So let's go ahead and press Enter to create the VNet and the subnet within it with those respective IP configurations. And it looks like it's probably good. Now we can also add a second subnet. Why don't we go ahead and do that? So let's go and type in az network vnet subnet create.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

The resource group will be Rg1 -- the vnet-name is going to be Vnet2. That's what we just created. And the name of the new subnet here, let's call this one Subnet2 --address-prefixes.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

 And in this case, how about we use 11.0.2.0/24? Let's create that subnet.

[Video description begins] He executes the following command. The output displays [ "Vnet1 " , "Ubuntu-1VNET" , "Vnet2" ].The prompt does not change. [Video description ends]

All right, and after a moment it will have created it and associated it with Vnet1.

[Video description begins] He switches to the Microsoft Azure web portal. [Video description ends]

 So if we were to run az network vnet list --query [].name, we should see the names of our VNets, including Vnet2. We could also do the same thing here in the portal.

[Video description begins] He selects an option called "Virtual networks" from the left hand navigation menu. A blade called "Virtual networks" opens. It includes a table with four columns and three rows. The column headers are "Name", "Resource group", "Location", and "Subscription". The Name column contains Ubuntu-1VNET , Vnet1 , and Vnet2 . [Video description ends]

 So if I were, let's say in my left-hand navigator, to view my Virtual networks or my VNets, we would see Vnet2 exists.

[Video description begins] A blade called "Vnet2" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. [Video description ends]

So let's just click on it to open it up. And within Vnet2, why don't we check the subnets too? So we should have Subnet1 and Subnet2.

[Video description begins] He clicks an option called "Subnets" in the navigation pane. A blade called "Vnet2"| Subnets" opens in the content pane. [Video description ends]

And of course we can see the IP addressing in accordance with what we specified on the CLI command line.

[Video description begins] The IP Address range for Subnet1 is 11.0.1.0/24 and for Subnet2 is 11.0.2.0/24. [Video description ends]


VNets, Subnets, and PowerShell
PowerShell cmdlets can be used to create and manage VNets and subnets in Azure. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I'm going to do is create a subnet variable because what I want to do is essentially make a new VNet but I also want to add a subnet to it. So the first thing I'll do is take care of defining the subnet in a variable. I'm going to call that variable $subnet, and it will store the result of running New-AzVirtualNetworkSubnetConfig, so that's a long cmdlet name. The name of the subnet I want to create is called Subnet1. And the address prefix I'm setting here as being 30.1.0/24. So you have to have planned what the IP addressing will be for the VNet as well as for each subnet. So here 30.0.1, that's the first 24 bits, identifies my network address for Subnet1.

[Video description begins] The output displays the details of the warnings. [Video description ends]

Now I'm going to press Enter. But notice I get all these warnings about potential future changes that may break how this cmdlet works. If you really want to, you can suppress those messages. I really want to because those are changes that will happen down the road. I don't want to see that. So I'm going to clear the screen and I'm going to run Set-Item.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And essentially I'm setting an environment variable SuppressAzurePowerShellBreakingChangeWarnings, setting that to true.

[Video description begins] He executes the following command: Set -Item Env: \SuppressAzurePowerShellBreakingChangeWarnings " true " [Video description ends]

I want to suppress them. I'm going to press Enter. 

[Video description begins] The prompt does not change. The output displayed is Set - Item Env: \SuppressAzurePowerShellBreakingChangeWarnings " true ". He executes the following command: cls. The output clears and the prompt does not change. [Video description ends]

If I were to bring up, using my up arrow key, my subnet variable declaration line and run it again, we don't get anything returned.

[Video description begins] He executes the following command: $subnet = New- AzVirtualNetworkSubnetConfig -Name Subnet1 -AddressPrefix 30.0.1.0/24. No output returns and the prompt does not change. [Video description ends]

That's how I want it. Now the next thing I want to do though is build a new virtual network based on that subnet config. To do that I'll use New-AzVirtualNetwork. I want to deploy this virtual network into a resource group called Rg1. I want to put it in the CanadaEast location and I want to call it VNet3. I'm going to set the address prefix to be 30.0.0.0/16. Now it's important that subnets always fall within the range of the VNet. And that's certainly the case here because at the VNet level, we've got 16 bits in the subnet mask, which means 30.0 is the VNet range. But we can see that 30.0.1, so we're adding an additional octet, another 8 bits is going to be within that range. So having done that, we're going to finish off that statement by passing it with the -Subnet parameter, our $subnet variable. So we want to create the subnet with those settings in the new VNet, VNet3. So I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: New-AzVirtualNetwork -ResourceGroupName Rg1 -Location CanadaEast -Name VNet3 -AddressPrefix 30.0.0.0/16 -Subnet $subnet [Video description ends]

After a moment, looks good, let's just clear the screen and why don't we run get-azvirtualnetwork?

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And I'm just going to pipe that to select, all I want to see is the name property.

[Video description begins] He executes the command and the following output is displayed: Name ---- Vnet1 Ubuntu-1VNET Vnet2 Vnet3. The prompt does not change. [Video description ends]

Indeed, there's VNet3, the one that we've just created. Now let's carry on and do some more examples.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

I'm going to create a variable here called vnet into which I want to store the result of running get-azvirtualnetwork and it's going to be one called Vnet2. So if I run $vnet, then we'll see what's stored in that variable.

[Video description begins] He executes the following command: $vnet. The output with the details of virtual network is displayed. [Video description ends]

So what I want to do then is check out which subnets currently exist in Vnet2, so I can run get-azvirtualnetworksubnetconfig.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And I can use -virtualnetwork to pass it my $vnet variable which, remember, is pointing to Vnet2.

[Video description begins] He executes the following command: get-AzVirtualNetworkSubnetConfig -virtualnetwork $vnet . [Video description ends]

So let's just scroll up a little bit here, what do we have? We have Subnet3 I see listed here, Subnet2, and of course Subnet1. So there are three subnets there already.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Now what I want to do, well actually, why don't we filter that out? That's a little awkward to really look at. So what we could do is pipe the result of that to select and tell it we only want to see the name and the address prefix for the subnets. That is a little bit easier to digest.

[Video description begins] He executes the following command: get-azvirtualnetworksubnetconfig -virtualnetwork $vnet | select name, addressprefix. The output displays details of address prefix. The prompt does not change. [Video description ends]

Now I want to define a new subnet. To do that, I'm going to need to run a different cmdlet, Add-AzVirtualNetworkSubnetConfig. I want to call this new subnet Subnet4. It's going to be tied to the Vnet2 virtual network. Vnet2, remember, is what the $vnet variable contains. And the address prefix here will be 11.0.4.0/24. So it'll fall in line nicely after the third subnet that we've already got defined in that VNet.

[Video description begins] He executes the following command: Add - AzVirtualNetworkSubnetConfig -Name Subnet4 - VirtualNetwork $vnet - AddressPrefix " 11.0.4.0/24 ". [Video description ends]

I'm just going to go ahead and press Enter. Let's clear the screen.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Let's use the up arrow key to retrieve our list, looking good and looking clear and consistent. 

[Video description begins] He executes the command: get-azvirtualnetworksubnetconfig -virtualnetwork $vnet | select name, addressprefix. The output displays details of address prefix. The prompt does not change. [Video description ends]

Now while that's showing up here, Subnet4 is showing up here in the CLI or rather in PowerShell, what we will notice is that if we go into the GUI, here's Vnet2 and its subnets.

[Video description begins] He switches to the "Vnet2"| Subnets blade. [Video description ends]

Let's go ahead and refresh. I only see subnets 1, 2, and 3. What's going on? We need to make sure that we write those changes to the virtual network. So we've already got our $vnet variable which points to Vnet2.

[Video description begins] He clicks an icon labeled “cloud shell” and switches back to the PowerShell command window. [Video description ends]

I'm going to pipe the result of that to set-AzVirtualNetwork. In other words, to write changes into that VNet. Now when we go back into the GUI and do a refresh, indeed we see Subnet4's definition is actually now truly a part of Vnet2.


IP Addresses and the Portal
Most IT technicians that have experience configuring TCP/IP will of course know that an IP address is a configuration of the TCP/IP protocol stack. However in Azure, it's an actual separate resource unto itself. That we can then associate with IP address configurations which are in turn associated with network interfaces. Which are in turn associated with virtual machines, quite the list of interdependencies. So, let's get started here in the portal creating an IP address. I'm going to click Create a resource, and I'm going to search for IP address.
Now this is where you're going to have to think about what your needs are. You can go with a public IP address, but by its very nature, it's dynamic, which means it can change. If the nature of what you're going to be hosting and associating ultimately with this IP address. Is such that you don't want the IP address to change over time. In other words, you want it to be static, you're going to need to specify a Reserved IP Address. In my example, I'm just going to go with a dynamic Public IP address.
So, we see down here it says it can be dynamic or static depending on what you want to configure it as. So in this case, I'm going to go ahead and click on Create.

[Video description begins] A blade called "Create public IP address" opens. It includes options called "IP Version", "Name", and "DNS name label". [Video description ends]

And the first thing we'll have to do, as we always do when we deploy Azure resources, is specify some details like the name of the object. So here I'm going to call it PubIP5. That would be in accordance with the nomenclature agreed upon within the organization for naming resources such as IP addresses in Azure. So it's going to be IP version 4 although IPv6 is supported. However, notice that when I have IPv4, Dynamic and Static assignment are options. However, with IPv6 we don't have the option of using Static, so some of these things change. We can also choose Both, so we can have an IPv4 as well as an IPv6 address associated with this resource. But I'm going to go back to IPv4, I'm going to leave it on Dynamic, I can specify a DNS name label.

So notice that the default suffix is going to be in this case, because of the region, .canadaeast.cloudapp.azure.com. Now if I scroll down, we can change that location or that region if we wish. I'm going to specify that I want this IP address to be created within Rg1. And, at this point, the DNS name label is not required as indicated by the lack of a red asterisk. So I don't need to fill that in and I can change it after the fact. At this point I'm going to click Create to create that IP address resource.

[Video description begins] He clicks a button called "Create" and a notification pop-up box appears. It includes a button called "Go to resource". [Video description ends]

And after a moment, it'll be completed, I'll click Go to resource. That puts me in the properties of that IP address object.

[Video description begins] A blade called "PubIP5" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. A option called "Overview" is selected in the navigation pane. The content pane includes "Resource group", "IP address", and "Associated to". [Video description ends]

Here is where we also can click Associate to associate the IP address with either a load balancer, we select the Load balancer from the list below, or a Network interface. And in the same way we would select the appropriate network interface down below. So I'm going to go ahead and choose an interface. Now if that interface already has a public IP address associated with it, you're going to see this message. However for now, I'm just going to go ahead and close out of that screen. I'll click on OK when it says your unsaved edits will be discarded. I'm not going to associate this IP address at this point. But when I work with network interfaces down the road. I can then determine that I want to associate this public IP address with that interface if it's needed. If I go to the Configuration blade, I can see that I can select Static.

[Video description begins] He clicks an option called "Configuration" under a section labeled “Setting” in the navigation pane. A blade called "PubIP5 | Configuration" opens in the content pane. [Video description ends]

So if I don't want to stick with the Dynamic assigned IP, I can go with Static. I can also specify down below whether I want to have a DNS name label. So we're seeing a lot of the options that we initially saw when we created the IP address resource. Now back on the Overview blade, notice that the IP address information is not even listed here. Well, let's close out of that.

[Video description begins] He switches back to the Microsoft Azure web portal. [Video description ends]

Let's go to All resources and let's view existing IP addresses that are already been associated with network interfaces. And ultimately with virtual machines. So from the Type drop-down list, I'm going to deselect the Select all box, and I'm going to go into public IP addresses. I'll click outside to filter by that. Let's choose another one here such as PubIP1-East1. So here in the Overview we can see that it is already associated with the network interface.

[Video description begins] He clicks an option called "PubIP-East1" and the corresponding blade opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. An option called "Overview" is selected in the navigation pane. The content pane includes "Resource group", "IP address", and "Associated to". [Video description ends]

We can see the NIC is a link here, and also we can see that it has an IP address. So once we start using these items, the IP address, public IP address objects. Then they'll start being populated with details such as the IP address.

[Video description begins] He clicks an option called "PubIP5" and the corresponding blade opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. A option called "Overview" is selected in the navigation pane. The content pane includes "Resource group", "IP address", and "Associated to". [Video description ends]

Again, if I go back into PubIP5 in the Overview blade, nothing is going to be here because it's not yet been associated with a network interface or a load balancer.

IP Addresses and the CLI

[Video description begins] Topic title: IP Addresses and the CLI. The presenter is Dan Lachance. [Video description ends]

In Azure, IP addresses are their own type of Azure resource. And we can manage them in the GUI or using the CLI or PowerShell. We're going to focus here on the CLI.  

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

First thing I'll do here is run az -h for help. Because the next level command that we're going to want to go into after az is networking. So specifically network.

[Video description begins] He highlights "network" from the output displayed. [Video description ends]

So we can learn about the syntax by running az network, for example, -h for help.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And then from here we'll see that there's more and more we can work with such us public IP address resources. Which is exactly what I want to work with here.

[Video description begins] He highlights "public-ip" from the output displayed. [Video description ends]

So to get started here, az network public-ip. 

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And after that I'm going to follow that with create. And I'm going to put it in a resource group called Rg1. I want to name this PubIP, as in public IP dash, let's say Central1. The location will be CanadaCentral. And after I do this, I'm going to go ahead and press Enter to create that public IP address resource.

[Video description begins] He executes the following command: az network public-ip create -g Rg1 -n PubIP-Central1 -l CanadaCentral. [Video description ends]

Now we'll check our work in the GUI to see if it's there. And also of course back here in the CLI. Why don't we start with the CLI since we're already in here?

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So if I were to run az network public-ip list, I can then run --query [ ].name. I want to see the name property for all of the public IP address resources that were configured. Of course, we'll see our most recent one, PubIP-Central1.

[Video description begins] He highlights "PubIP-Central1" from the output displayed. [Video description ends]

We could also run az network public-ip show. So as opposed to listing them all, I want to show a specific one, one in a group called resource group 1 or Rg1. And by name, so -n it's called PubIP-Central1. That's the name of what we've just created. And it'll return all of the properties associated with that specific resource. Of course we know how to query upon any specific properties we might want to display. Let's go take a look at this here in the portal.

[Video description begins] He switches to the Microsoft Azure web portal. [Video description ends]

Let's go to the All resources view. And we'll start by filtering out the list of resources because currently it's Type == all.

[Video description begins] The All resources blade opens. [Video description ends]

So I'll click on that, I'll uncheck Select all. And of course we're interested in public IP addresses. So I'll select that. Now if you don't see public IP addresses in that list by the way, it's because you don't have any of those types of resources. Now certainly once you start deploying virtual machines and stuff like that. You'll start to see for sure that you're going to have some public IP address resources. So as we scroll down through the list, we can see them all listed here, including the one we just created, PubIP-Central1.

[Video description begins] A blade called "PubIP-Central1" opens. [Video description ends]

And if I click on it in the Overview blade, we see that it does not yet have an IP address. It's not yet been associated with either a load balancer or a virtual machine or specifically a virtual machine and directly through a network interface.

[Video description begins] He clicks a button called "Associate" and a blade called "Associate public IP address" opens. [Video description ends]

So that association has not been made.

[Video description begins] He closes the Associate public IP address blade. [Video description ends]

Therefore we don't see IP address information populated yet in that resource.

[Video description begins] He switches to the PowerShell command window. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

Here in the CLI we could run commands such as az network nic list. Let's say --query and ask for the name.

[Video description begins] He executes the following command: az network nic list - - query [].name. The output displays the details of the nic list and the prompt does not change. [Video description ends]

Here we'll see the names of our NICs like, for example, we've got one here called Nic3-East.

[Video description begins] He highlights "Nic3 - East" from the output displayed. [Video description ends]

And we could also of course view that same type of information here in the portal where we could view the IP configurations for the NIC.

[Video description begins] He switches back to the Microsoft Azure web portal. A blade called "Nic3 - East | IP configurations" is open. [Video description ends]

It's called ipconfig1. So there are many ways to gather that information. But the point is this, we can also perform an association of a network interface card to a public IP address.

[Video description begins] He switches back to the PowerShell command window. He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So to do that I'm going to run az network nic ip-config update. And the name of the config is ipconfig1, which is tied in our case to a nic-name of nic3-east. And that's in a resource group, so --resource-group or -g. You could also do g as well for for that, Rg1, and I'm going to specify the public. So --public-ip-address is PubIP-Central1. Okay, so by doing this we are associating PubIP-Central1 with the ipconfig for a network interface called nic3-east.

[Video description begins] He executes the following command: az network nicip- config update - - name ipconfig1 - - nic - name nic3 - east - g Rg1--public -ip-address PubIP-Central1 [Video description ends]

So I'm going to go ahead and press Enter.

[Video description begins] He switches back to the Microsoft Azure web portal. The Nic3 - East | IP configurations blade is open. [Video description ends]

And after a moment it looks good. We can of course even just verify our work here by looking at Nic3 and the ipconfig for ipconfig1.

[Video description begins] He clicks an option called "ipconfig1" and a blade called "ipconfig1" opens. [Video description ends]

And what we want to do is see that in fact it is associated with PubIP-Central1.

IP Addresses and PowerShell

[Video description begins] Topic title: IP Addresses and PowerShell. The presenter is Dan Lachance. [Video description ends]

You can manage IP address objects using PowerShell. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started here, the first thing I'm going to do is I want to create a new public IP address resource in Azure. So in order to do that, I'm going to have to determine which command line I should be using. So I'm going to run get-command, and I'll use *. I want to create a public IP address resource. So I'll just search for publicip to see by chance if any cmdlets have that in its name. And luckily, there are some.

[Video description begins] He executes the following command: get - command *publicip* . The output displays the details of public IP and the prompt does not change. [Video description ends]

So for example, I can use the New-AzPublicIpAddress cmdlet to build this resource.

[Video description begins] He highlights "New - AzPublicIpAddress"from the output displayed. [Video description ends]

And of course we could get help on it using the get-help cmdlet.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So to get started here, I'm going to run new-azpublicIPaddress. This is not case sensitive. And I'm going to name this, let's say, PubIP-Central3. And I'm going to put this in a resource group called Rg1. And I'm going to set the -allocationmethod parameter to a value of static. I want a static, unchanging IP address. Finally, I have to specify the region or location where I want this deployed into geographically. So I'm going to specify here, CanadaCentral. Okay, so having done that, I'll press Enter.

[Video description begins] He executes the following command: new - azpublicIPaddress -name PubIP - Central3 - resourcegroupname Rg1 - allocationmethod static - location CanadaCentral [Video description ends]

And we're going to check our work both here in PowerShell using the Cloud Shell environment. As well as taking a look at it in the portal. So we can see the output here if we scroll back up through it. It looks like it's created it in our region and in our resource group. It's called PubIP-Central3. Also notice, interestingly, we didn't specify this in the command line. But it somehow decided it was going to add a tag called CostCenter with the value of YHZ, that must be done through an Azure policy. We're going to go double check that in the portal after, just to verify it. Let's just go to the portal here for a second. And let's go to the All resources view.

We'll filter it for public IP address resources, since that's what we want to see. Currently, the type is set to all. I'm just going to click there, uncheck Select all, choose Public IP address. And let's just verify it showing up. There it is, PubIP-Central3. And if we go ahead and take a look at that object, so if I click on it.

[Video description begins] A blade called "PubIP - Central3" opens. [Video description ends]

And if I go to Configuration, pull up that blade, we can see it's Static.

[Video description begins] A blade called " PubIP - Central3 | Configuration" opens. [Video description ends]

And we can see the IP address that has been assigned to it. Let's just go ahead and take a look at policies here for a second. Because it was strange, potentially, for us to see that it automatically tagged our resource. Actually, before we do that, let's double check it here in the portal. Let's go to Tags to pull up that blade for this item.

[Video description begins] A blade called " PubIP - Central3 | Tags" opens. [Video description ends]

And indeed, yes, there's CostCenter: YHZ. Okay, so it did do it. So let's go into the Policy management tool. This isn't really about policies but it nonetheless, it is having an effect on the public IP address resource we just created.

[Video description begins] A blade called "Policy" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. [Video description ends]

And so I'm going to look at Policy > Assignments.

[Video description begins] He clicks an option called "Assignments" under a section labeled “Authoring” in the navigation pane. A blade called "Policy | Assignments" opens in the content pane. [Video description ends]

And sure enough, I see an assignment here called Add Cost Center Tag. I'm just going to open that up for a moment so we can take a look at it.

[Video description begins] A blade called "Add Cost Center Tag" opens. [Video description ends]

And it looks like it's been, it's got an assignment here as we can see, just scroll down here a little bit. It's enforced. I can see at the top, the scope is that it's been assigned to the Pay-As-You-Go subscription. And of course, I can see the policy definition, it's called Add Cost Center Tag. Let's cancel out of here. Let's look at that policy definition just for a second. So I'm going to go to Definitions, and we're going to view that.

[Video description begins] He clicks an option called "Definitions" under a section labeled “Authoring” in the navigation pane. A blade called "Policy | Definitions" opens in the content pane. [Video description ends]

Now of course, I guess what we should do is change the type here to Custom. There it is, Add Cost Center Tag.

[Video description begins] The Add Cost Center Tag blade opens. [Video description ends]

Let's see what it's doing. We know what it's doing, or at least we think we do. And let's just kind of scroll down and see if there's any of this makes sense and adds up. Yeah, it does. It's adding a tag called CostCenter with a value of YHZ. That's been applied at the subscription level. There are no exceptions so it's flowing down to everything, and that's why it did that. However, let's go back into PowerShell here. So now we can explain that one away.

[Video description begins] He switches to the PowerShell command window and executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Let's go back here and let's just run get-azpublicipaddress, and maybe we'll just pipe that to select. Presumably the name property is called Name.

[Video description begins] He executes the following command: get - azpublicipaddress | select name. The output displays the name details of public ip address and the prompt does not change. [Video description ends]

And indeed, we can see our public IP address is listed here.

[Video description begins] He highlights PubIP - Central3 from the output displayed. [Video description ends]

Network Interfaces and the Portal

[Video description begins] Topic title: Network Interfaces and the Portal. The presenter is Dan Lachance. [Video description ends]

As the name implies, in Azure, a network interface resource is just like a network interface would be in the physical world that you would use with a server or a station of some kind.  

[Video description begins] The Microsoft Azure web portal is open. [Video description ends]

It allows network connectivity. And you can have multiple network interfaces tied, for example, to a single Azure virtual machine. You're not limited to just one. Now let's get started here in the portal by clicking on All resources to see what we already might have in place based on our previous deployments for network interfaces. The Type == all, we're going to click there to filter it differently.

[Video description begins] The All resources blade opens. [Video description ends]

I'm going to uncheck Select all, going to choose Network interface, apparently there are 4. And I'll click outside of that, and that reveals that indeed we do have 4 network interfaces that exist. We're going to add another one. Now why would you add a network interface undo itself? Isn't that something that's part of the point of virtual machine? Yeah, it usually is. However, you might change your mind over time and decide, for example, that you would like a given virtual machine to have two or more network interfaces. Why would you do that? Well, why would you normally do it on premises?

Maybe because that host is acting as a firewall appliance of some kind. And so it needs at least two interfaces, one to connect to a private network one to a public. Maybe you want to configure your own custom routing appliance, so you need at least two interfaces. Or maybe you want to have a specific management interface such as SSHing to Linux or RDPing to Windows and you want that kept separate from regular network traffic. So there are a lot of reasons why you might do it. Either way, let's get this done. So we're going to add a new network interface. So I'm going to click the Add button here to add a new resource in the upper left.

[Video description begins] He types network interface in the Search filter box. [Video description ends]

And we're going to tell it that we want to add a network interface.

[Video description begins] A blade called "Network interface" opens. It includes a button called "Create". [Video description ends]

Then we're going to go in and take a look at the properties of it. So I'm going to select Network interface, and then I'll click Create. 

[Video description begins] A blade called "Create network interface" opens. It contains tabs called "Basics", "Tags", and "Review + create". The Basics tab is selected. [Video description ends]

As usual, I have to deploy this into a resource group. And I have to give it a name in accordance with my organization's naming conventions, if there are any. So I'm going to call this NIC2-East, that's going to be in the Canada Central location. And it says here, well which virtual network and subnet would you like to attach this to? Well, ultimately, it's attached to a subnet but can't have a subnet without a VNet. So we've got the VNet selector available and the subnet here. I'm just going to choose Subnet1 and Vnet1. We can determine whether we want Dynamic or Static IP address assignment for the private.

So I'm going to leave it on Dynamic, which means it can change. So depending on how you're going to use this network interface, really how you're going to tie it to a VM and what workloads are running in the VM, would determine whether Dynamic changing IP addresses or Static unchanging addresses are needed. I'm going to leave that as it is. I can also tie this network interface to a specific security group. You could also not do that and realize that a security group can also be assigned to this subnet where you are associating this interface. So it really depends on, again, how you're going to be using this network interface, specifically the workload in a VM that this interface will be attached to.

I'm going to leave network security group on None, then I can always change it after if I need to. I'll click Next. I'm not going to tag this network interface. I'll click Next: Review + create. It's going to check that my settings are valid. And now that they are I'm going to click Create to create the network interface. And after a moment the deployment is complete. So I'm going to click Go to resource so we can open up the properties of our newly created network interface, there it is, NIC2-East.

[Video description begins] A blade called "NIC2 - East" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. An option called "Overview" is selected in the navigation pane. [Video description ends]

So a network interface in Azure, then, consists of one or more IP configurations. You can see we have one there called ipconfig by default, but we can add another one.

[Video description begins] He clicks an option called "IP configurations" under a section labeled “Setting” in the navigation pane. A blade called "NIC2 - East| IP configuration" opens in the content pane. It includes a table with five columns and one row. The column header "Name" includes an option called "ipconfig1". [Video description ends]

What's in the IP configuration? Well, the configuration of IP, let's take a look at what that means. It means addressing, public and private IP addressing.

[Video description begins] He clicks theipconfig1 option and the corresponding blade opens. [Video description ends]

Notice that public IP addressing is Disabled by default. We could enable it and we could go out and specify a public IP address resource to associate with this interface. But I'll leave it on Disabled. We can also see the private IP address configuration and the subnet affiliation. So we've got a Dynamic private IP, we can see it down below. Here it's 10.0.1.6. And this interface is tied to Subnet1 within Vnet1. All right, well, that's fine.

[Video description begins] He closes the blade. [Video description ends]

We can also specify DNS server settings here.

[Video description begins] He clicks an option called "DNS servers" under a section labeled “Setting” in the navigation pane. A blade called "NIC2 - East| DNS server" opens in the content pane. [Video description ends]

Here it's set to inherit it from the virtual network. But we could go ahead and override that. Well, we could add custom DNS servers. Otherwise you're using Azure supplied DNS servers for name resolution.

[Video description begins] He clicks an option called "Network security group" under a section labeled “Setting” in the navigation pane. A blade called "NIC2 - East| Network security group" opens in the content pane. [Video description ends]

As we saw during creation, we can also specify a Network security group here for the specific network interfaces, which controls inbound and outbound traffic, its security rules. But you can also apply network security groups at the subnet level. And if you've got a bunch of virtual machines and ultimately network interfaces, with the same in and outbound traffic flows, it's easier to manage it at a higher level, such as at the subnet level. We can also scroll down here and see any effective routes that might be applicable here for this network interface.

[Video description begins] He clicks an option called "Effective routes" under a section labeled “Support + Troubleshooting” in the navigation pane. A blade called "NIC2 - East| Effective routes" opens in the content pane. [Video description ends]

Now here it says I couldn't get any effective routes because this isn't attached to a virtual machine. Now, if I go back to the Overview here, notice we do not have the option of associating this with the virtual machines because it's done from the virtual machines perspective. So, I'm going to go into my Virtual machines view.

[Video description begins] He switches back to the Microsoft Azure homepage. He clicks an option called "Virtual machines" under a section labeled "Azure services". A blade called "Virtual machines" opens. It includes a table with eight columns and two rows. The column header "Name" includes options called "Ubuntu-1" and "WinSrv2019-1". [Video description ends]

I've got a Linux virtual machine that I've already deployed called Ubuntu-1. And I'm going to go ahead and click on it.

[Video description begins] The Ubuntu-1 blade opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. An option called "Overview" is selected in the navigation pane. [Video description ends]

Because when you're in the navigation bar, the properties essentially, for a virtual machine in Azure, you can go down to Networking.

[Video description begins] He clicks an option called "Networking" under a section labeled “Setting” in the navigation pane. A blade called "Ubuntu-1 | Networking" opens in the content pane. It includes an option called "Attach network interface". [Video description ends]

And among many other things, you'll be able to see any network interfaces. We can see currently the network interface here is Ubuntu-1VMNic, that's great. But we do have an option up above to attach other network interfaces for a variety of reasons, as we've mentioned already. And so I'm going to click Attach network interface. We can either create one or we can choose one to attach. Notice it says No network interfaces available to attach.

[Video description begins] He switches to the All resources blade. [Video description ends]

 If I go back and take a look at my network interfaces in the All resources view, notice that they're all in Canada Central, other than the one that's already associated with it, Canada East. Well no wonder it's not selectable. So let's go back and look at our virtual machines once again. Because we do have a Windows virtual machine already deployed here in Azure.

[Video description begins] He switches back to the Virtual machines blade. [Video description ends]

And it is in the Canada Central location or region.

[Video description begins] The WinSrv2019-1 blade opens. [Video description ends]

So when we go to it and do the same thing, so when I say the same thing I mean when we go into Networking and we go to attach a network interface, it's going to be a different story this time because it's in the same region.

[Video description begins] He clicks an option called "Networking" under a section labeled “Setting” in the navigation pane. A blade called "WinSrv2019-1 | Networking" opens in the content pane. It includes an option called "Attach network interface". [Video description ends]

Well, we have other network interfaces, including the one we just created. So if I go to Attach network interface, here is the list.

[Video description begins] He clicks a drop-down list. It includes options called "NIC - East" and "nic3 - east". [Video description ends]

So if I choose nic3-east, for example, and choose OK, it's going to add or attach that second network interface because this virtual machine already has one. Let's just click on something else here in the navigation bar, and back on Networking. So we can see any updates to the screen. And what we're going to see, once it's completed, is that we're going to have another tab to switch between network interfaces. So we'll just give it a moment to finish this operation. Well, looks like it just did it so we don't have to wait any longer.

Let's just click somewhere else again, and come back, just to make sure it's up to date now. Now once it's up to date, and if you have to go all the way back to Virtual machines and navigate back in, then so be it, for it to update. But you're going to see now that you've got links up here at the top for each NIC. So I'm now looking at the settings related to nic3-east. But I could click on the original network interface to view the settings related to it.

Network Interfaces and the CLI

[Video description begins] Topic title: Network Interfaces and the CLI. The presenter is Dan Lachance. [Video description ends]

In this demonstration, I'm going to use the Azure CLI to create a new network interface. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

Now before I do that, I'm going to choose to create a public IP address resource. Only because I want to associate it with the network interface. You don't have to associate a public IP address resource with the network interface. But if you know that you're going to assign or associate the network interface, if you're going to attach it to a virtual machine and in the end you want to make sure it's got a public IP, then you would do this. But it's certainly not required.

So to get started to build the public IP address resource, I'm going to type az network public-ip create -g and I'm going to put this in a resource group called Rg1 -n. The name of this will be PubIP-East4 in this case. -l for the location, otherwise known as the Azure region, and I'm going to put it in canadacentral and I'll press Enter. Now after a moment, it'll be created. We'll get the standard returned JSON output.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

I'm just going to go ahead and run az network public-ip list --query [].name. So I want to see the names of the public IP address resources. And there's the one I just created. It's called PubIP-East4. So that part is complete. Now what I want to do is actually create a network interface, but I want it to be linked or associated with that public IP. So let's make that happen by typing az network nic, this time, Network Interface Card, create -g. I want to create this network interface in resource group 1, then I have to tie it to a VNet and ultimately a subnet. So --vnet-name, let's say vnet1. I'm also going to tie this to the subnet within that VNet.

Let's say --subnet is going to be subnet2. I want to associate the public IP with it that we just created. So --public-ip-address, I'm actually not sure if there's a dash between ip and address but I guess we'll find out in a second, it's no problem. Let's reference the name here pubip-east4. And the next thing that we're going to do is give this a name. We haven't even defined a name for this NIC yet or this network interface, -n. I'm going to call this NIC-East4. And if I wanted to assign a network security group to it I could with --network.

Actually, let's not do that, because unless you have a specific need for a virtual machine that ultimately this interface will be attached to. You might be better off using network security groups that are associated with subnets that apply the same security rules for in and outbound traffic to all VMs in the subnet. Of course, could have a specific need for one VM, but I'm not going to do that in this case.

So we're going to leave that alone. I guess I need to specify the location though. Let's say we want this NIC or this network interface to be in the canadacentral region or location. Let's press Enter to see if that works. We were wondering if we needed a dash between IP and address for the public IP address reference. So far it looks good. Okay, it looks good. Looks like the network interface was created. Of course, we can verify this by running az network nic list --query [].name. Let's just see what we have here. So it should return just the names. So we've got NIC-East4, let's just view that in the GUI just for fun.

[Video description begins] He switches to the All resources blade. [Video description ends]

So I'm going to refresh my All resources view that's filtered for network interfaces. So I'm going to click Refresh.

[Video description begins] He clicks an option called "NIC - East4" and the corresponding blade opens. [Video description ends]

There's NIC-East4. 

[Video description begins] He clicks an option called "IP configuration" under the section labeled "Settings" in the navigation pane. A blade called "NIC - East4 | IP configurations" opens. [Video description ends]

 Let's open that up and let's go into its IP configuration, because in there, we'll see if it's been associated with a public IP address or not. And it has been, PubIP-East4.

[Video description begins] He clicks an option called "ipconfig1" and a blade called "ipconfig1" opens. [Video description ends]

Network Interfaces and PowerShell

[Video description begins] Topic title: Network Interfaces and PowerShell. The presenter is Dan Lachance. [Video description ends]

In this demonstration, I'm going to use PowerShell cmdlets to work with network interfaces. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So the first thing I'm going to do is run get-aznetworkinterface, so we can get a list of network interfaces, and I'm going to pipe that to select, tell it I want to see only the name Property.

[Video description begins] He execute the following command: get - aznetworkinterface | select name. The output displays the names of network interface and the prompt does not change. [Video description ends]

Now that returns the names of network interfaces, which is fine. Now, the next thing that I want to do is I want to create a new network interface. But to do that, there's going to be some preliminary work I'll begin with, the first of which is going to be getting a handle on a network, a VNet. And then within that subnet that I'm going to use to associate the network interface. So the network interface then can be associated with a specific subnet. So to get started, I'm going to create a variable that I'm going to call $vnet. Now the vnet variable will store the result of running Get-AzVirtualNetwork, and I'm going to look for a VNet called Vnet1 in a resource group called resource group 1.

[Video description begins] He executes the following command: $vnet = Get - Azvirtualnetwork - Name Vnet1 - ResourceGroupName Rg1. [Video description ends]

So I'm going to go ahead and press Enter, and if I just type in $vnet and press Enter, we can see it's got a pointer or a handle to that VNet in the Azure Cloud, it's returning some information.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Now the next thing I want to do is create a subnet variable, and to do that I'm going to have to return some subnet configuration information. I'm going to do that by running the Get-AzVirtualNetworkSubnetConfig cmdlet. I'm going to give it the name of the subnet. So the -Name is Subnet1, and then I'm going to point to the vnet variable we just set up a moment ago, $vnet, because the subnet is contained within the VNet. The return result of this I want stored in a variable called $subnet.

[Video description begins] He executes the following command: $subnet = Get - AzVirtualNetworkSubnetConfig - Name Subnet1 - VirtualNetwork $vnet. [Video description ends]

Okay, so we've got $vnet, our virtual network, and we've got $subnet, these are two variables that I've created. Now the next thing I want to do is start getting some IP configuration information within a network interface. So there's a bunch of ways that we can do this of course. The next thing I'm going to do is create a public IP address.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

I'm going to put that in a variable called $pubIP. And this is going to store the result of running New-AzPublicIpAddress, and I'm going to name this PubIP-, let's say, East5, I'm creating a new one. And the resource group association where I want that deployed is going to be called Rg1, the allocation method, let's say I want this to be a static public IP address. And the next thing I'll specify is the location, -location canadacentral, can't forget about that one. And then I'm going to just make sure that looks like the variable contains the right kind of information, so $pubIP.

[Video description begins] He executes the following command: $pubIP = New - AzPublicIpAddress - Name PubIP - East5 - resourcegroupname Rg1 - allocationmethod static - location canadacentral . [Video description ends]

Okay, so we've got a vnet variable, a subnet variable, and a public IP variable.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So now what I want to do is I want to create a network interface IP configuration. Because remember, network interfaces contain one or more IP configurations that in turn are linked to things like public IP addresses. So I'm going to make another variable called $ipconfig. It's going to store the result of running New-AzNetworkInterfaceIpConfig, that's a long one. The name is let's say going to be ipconfig-east1. The subnet association here, -subnet, is going to be our variable $subnet and -publicipaddress. And in the same way as we do with subnet, we're going to reference here, our pubIP variable, so $pubIP, And I want this to be the primary configuration, so -primary. So I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: $ipconfig = New -AzNetworkInterfaceIpConfig - name ipconfig - east1 $subnet -publicipaddress $pubIP -primary. [Video description ends]

Now we've got that variable. So again, we've got the $vnet variable, we've got the $subnet variable. We've got the public IP variable, we used that up above. Now we've got the ipconfig variable. So we have a lot of stuff going on, lots of variables. Now having done that, now we can put it all together, because I want to create a new network interface.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

To do that I'm going to run New-AzNetworkInterface. So there was some preamble work that had to be taken care of ahead of time. So New-AzNetworkInterface -name, let's say we call this, East-, or actually, how about NIC-East5 and I'm going to put this in a resource group. That's going to be Rg1, the location here, let's say canadacentral. And then this is the key here, at this point is I'm going to use the -ipconfiguration parameter, and I'm going to pass it our $ipconfig variable that we set up previously. And let's see, that looks correct. I'm going to press Enter, and we got our returned output.

[Video description begins] He executes the following command: New - AzNetworkInterface - name NIC - East5 - resourcegroup Rg1 - location canadacentral - ipconfiguration $ipconfig. [Video description ends]

So at this point if I were to get-aznetworkinterface, and we'll just pipe that to select, again and just ask for the name.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Then we're going to see the NIC that we just created, that would be NIC-East5. Let's take a look at that in the portal for a second.

[Video description begins] He switches to the All resources blade. [Video description ends]

So I'm going to go to All resources, network interfaces.

[Video description begins] He clicks an option called "NIC - East5" and the corresponding blade opens. [Video description ends]

Well, let's just refresh that filtered list.

[Video description begins] He clicks an option called "IP configuration" under the section labeled "Settings" in the navigation pane. A blade called "NIC - East5 | IP configurations" opens. [Video description ends]

There it is, NIC-East5. I'm going to click on that and I'm going to go and do IP configurations,   where we can see there it is, ipconfig-east1 as we named it.

[Video description begins] He clicks an option called "ipconfig-east1" and a blade called "ipconfig-east1" opens. [Video description ends]

And if I open that up we'll see it's associated with the public IP address we created in PowerShell as well, which was called if you recall PubIP-East5. So it worked.

Azure Routing and the Portal

[Video description begins] Topic title: Azure Routing and the Portal. The presenter is Dan Lachance. [Video description ends]

Routing tables are used to control network traffic flow, to route packets to the intended destination with the most efficient route possible. 

[Video description begins] The Microsoft Azure web portal is open. [Video description ends]

And so a routing table, in the physical network infrastructure world, is in memory on a routing device. However, in Azure, we can create a route table resource in which we then configure routing table entries. And then we can associate it with a subnet so that services on that subnet can use that routing table entry. Let's get started by creating a route table, so I'm going to click Create a resource here in the portal. And I'm going to search for route table, and we're going to get started with it in this manner.

[Video description begins] A blade called "Route table" opens. It includes a button called "Create". [Video description ends]

So I'm going to go ahead and choose Route table, and then I'm going to click Create. I'm going to call this RouteTable1.

[Video description begins] A blade called "Create route table" opens. It includes options called "Name", "Resource group", and "Location". [Video description ends]

I will deploy it into a resource group that exists already called Rg1, location Canada East. And that looks okay, I'll click Create. After a moment, we see that the deployment succeeded.

[Video description begins] He clicks a button called "Create" and a notification pop-up box appears. It includes a button called "Go to resource". [Video description ends]

So I'm going to click Go to resource to open it up.

[Video description begins] A blade called "Route Table1" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. [Video description ends]

Because what we need to do now is we need to add a routing table entry or a route. So I'm going to go down to Routes, we can see there are none, and I'm going to click Add.

[Video description begins] He clicks an option called "Routes" under the section labeled "Settings" in the navigation pane. A blade called "Route Table1 | Routes" opens. It includes a table of three columns and zero row. It also includes a button called "Add". [Video description ends]

So you have to have a reason to do this, you have to have a need to route traffic to a specific destination.

[Video description begins] A blade called "Add route" opens. [Video description ends]

In our example, let's say that we want to route traffic to a firewall appliance for further inspection. So for this route name or route table name, how about I call it FirewallInspection? And for the address prefix, I want this to be the default route. Because what I'm going to end up doing is associating this route table with a subnet. And so I want every service on the subnet to use this routing table entry as the default route. So 0.0.0.0/0 is how you specify the default route in IPv4. For the next hop type, in this example, I'm going to choose Virtual appliance. You could choose Internet, Virtual network, Virtual network gateway, I'm going to put in Virtual appliance. And let's say that we have a specific virtual appliance at a specific IP address. So I'm going to go ahead and put in that address, and then I'm going to click OK. So at this point, we're going to have a single route added to this route table resource.

[Video description begins] The Add route blade closes. The previous table now displays three columns and one row . [Video description ends]

And we can see it now shown in the list. What I'm then going to do is go to the Subnets blade within the route table, and I'm going to click the Associate button.

[Video description begins] A blade called "RouteTable1 | Subnets" opens. [Video description ends]

And I want to associate this with a particular subnet.

[Video description begins] A blade called "Associate subnet" opens. [Video description ends]

So from the list, what I'm seeing are virtual networks that are in the same region or location as the route table. You always have to watch out for this in Azure. So for example, if I go to the Overview blade, notice this is in Canada East.

[Video description begins] The location is Canada East. [Video description ends]

Well, let's just take a look at our virtual networks here. I'm going to duplicate the current browser page.

[Video description begins] He opens a duplicate window of the Microsoft Azure web portal. [Video description ends]

Except the difference is that we're going to browse here and look at VNets. So I'm going to go home, and let's just click Virtual networks.

[Video description begins] The Virtual networks blade opens. It includes a table with four columns and four rows. [Video description ends]

The point here is, for example, look at Vnet1, it's in Canada Central, yet Vnets 2 and 3 are in Canada East. Well, our route table is in Canada East.

[Video description begins] He switches back to the original window of the Microsoft Azure web portal. [Video description ends]

And so when we go to associate subnets, we're not going to see Vnet1 because it's in a different region or location.

[Video description begins] The RouteTable1 | Subnets blade opens. It includes a table with four columns and zero row. [Video description ends]

Okay, so having gone over that, let's choose Vnet2 and a particular subnet that we want this route table to be associated with.

[Video description begins] The Associate subnet blade opens. [Video description ends]

So in this case, I'm going to choose Subnet1, okay, so let's click OK for that, and we'll save that association.

[Video description begins] The previous table now displays four columns and one row . [Video description ends]

And we can now see it is listed here.

[Video description begins] The Virtual networks blade opens. [Video description ends]

Now another way to look at this is to go, let's see, into the virtual network and the subnet itself to see the association with the route table.

[Video description begins] The Vnet 2 blade opens. [Video description ends]

So in this case, I'll click Vnet2, and then I'm going to look at the subnets for this VNet, so for example, there's Subnet1.   

[Video description begins] He clicks the Subnets option and the Vnets2 | Subnets blade opens. [Video description ends]

If I click on that to pull up the settings for the subnet, one of the many things I'll see here is the association with the route table.

[Video description begins] A blade called "Subnet1" opens. [Video description ends]

And notice, of course here, it has RouteTable1. This isn't read-only, though, I could have selected it from here. You can enable that association between subnet and route table from multiple points.

Azure Routing and the CLI

[Video description begins] Topic title: Azure Routing and the CLI. The presenter is Dan Lachance. [Video description ends]

In this example, the goal is going to be to create an Azure route table and a route table entry. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So to get started with this, I'm going to use the az network route-table create command. Now I'm going to first specify -g, I want this to be in a resource group called Rg1 dash alpha location will be canadacentral let's say, and the name of this will be RouteTable2. So that's going to give me a new route table resource in Azure, although it's kind of useless as it is because there are no routing table entries within it, nor is it associated with a subnet. Okay, looks good, so the provisioning status we can see quite clearly such that it has succeeded. Let's clear the screen and let's do this, let's do az network route-table list. Let's query so we only see the name property, we don't need to see anything else. Just to verify it's there, we know it's there, but here it is for sure, RouteTable2, looks good.

[Video description begins] He execute the following command: az network route - table list - - query [] .name . The output displayed is ["RouteTable2","RouteTable1"]. The prompt does not change. [Video description ends]

So the next thing I want to do is create an entry. Now to do that, I have to run az network route-table route create. So kind of a longer bit of syntax there, the resource group is Rg1, the route, so --route-table-name, what was it called? It was called RouteTable2, that's what we've just created. And I want to add a new route, now what do you want to call this one? Let's call it Firewall, that's just the name of the routing table entry in the route table, that's what we're setting up here. And I'm going to set --next-hop, --next-hop, that looks correct. Then I'm going to specify the type as being a virtual appliance, and I'm going to set --address-prefix. And this is going to be for the default routes 0.0.0.0/0.

And finally the --next-hop, and this is where we're going to have -ip-address. And I'm going to put in the IP address of that virtual appliance, let's say it's 10.0.1.250. Well, I've got an ambiguous option error, it's not a problem, when you get these errors don't sweat it, just take a look at the exact message to first find out where the problem lies. Next hop type, okay so it's a syntax error on my part. I have for the parameter after Firewall up here --next-hop and I forgot the dash and type has two ts, it's just horrible. No problem, we can fix that, clear the screen, up arrow key to that command and let's make it right. So, it could have told me what to do, so next-hop-type. Becomes a little harder to read when it wraps lines, but that's okay, we can get around it.

[Video description begins] He execute the following command: az network route - table route create - g Rg1 - - route - table - name RouteTable2 - n Firewall - - next - hop - type VirtualAppliance - - address - prefix 0.0.0.0/0 - - next - hop - ip - address 10.0.1.250. The output displays the details of route creation. [Video description ends]

So now it's going to create the routing table entry, and let's just check our work so far in the portal. So I'm going to minimize this, and what we want to do is go to All resources so we can filter it for route table types of objects.

[Video description begins] He switches to the Microsoft Azure web portal and opens the All resources blade. [Video description ends]

So the Type here is set to all, let's filter it. I'm going to click there, uncheck Select all go down to the R's, Route table or route, depending how you want to pronounce it, it's the same thing. And there's RouteTable2 so I'm going to go ahead and click on that to open it up and I want to go look at the routes.

[Video description begins] A blade called "RouteTable2" opens. [Video description ends]

So we've just added a route in the CLI, so let's go to Routes and check it out.

[Video description begins] He clicks an option called "Routes" under the section labeled "Settings" in the navigation pane. The blade called "RouteTable2 | Routes" opens in the content pane. [Video description ends]

And we can see it's showing up here, so it was called Firewall as we specified in our command line. Once I corrected the error, there's the address prefix, so that's the default route and there's the next hop the traffic will be sent to.

Azure Routing and PowerShell

[Video description begins] Topic title: Azure Routing and PowerShell. The presenter is Dan Lachance. [Video description ends]

You can use PowerShell cmdlets as well as the GUI and CLI to create a route table resource. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

And within it configure routing table entries, and you would do this because you want to control the traffic flow. And often this is done, for example, if you want to control the flow of traffic between VNets, cross a VPN. Or perhaps to allow traffic to flow first to a firewall appliance for inspection before going elsewhere. So to get started, I'm going to go ahead and create a new route. I'm going to create a variable first called route, and I'm going to store the result of running new-azrouteconfig.

And I'm going to name this Firewall, and I'm going to set the address prefix -addressprefix to be the default route. 0.0.0.0/0, it doesn't have to be the default route, you can build a routing table entry for specific target networks. It doesn't have to be every network, but that's what I'm doing here. The next thing I want to do is specify -nexthoptype, just like you would see in the GUI. And in this case, I'm going to set it to a virtualappliance, as in I have a firewall. I want to route traffic to, for further inspection but I have to give it the IP address of it, and that would be a private IP address, right? Not a public facing IP address if it had one, so this, I'm going to specify as nexthopipaddress.

[Video description begins] He executes the following command: $route=new - azrouteconfig - name Firewall - addressprefix 0.0.0.0/0 - nexthoptype virtualappliance - nexthopipaddress 10.0.1.240. No output returns and the prompt does not change. [Video description ends]

And let's say it's at 10.0.1.240, so I've created a route variable, the next thing I want to do is I want to create a new route table. So to do that, I'm going to run new-azroutetable and I'm going to call this RouteTable3 because I know I've already got two. It's going to go into a resource group named Rg1. Location here, let's say, will be canadacentral. And I want to add a route to it, so -route $route, and I can also add a comma and keep adding multiple routes if I wanted to. But I've only got the single variable, and that's going to be fine in this case for this example.

[Video description begins] He executes the following command: new - azroutetable - name RouteTable3 - resourcegroupname Rg1 - location canadacentral1 - route $route. The output displays the creation details of route table 3. He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And at this point I could run get-azroutetable and, of course, what I probably should do is select just the name, so I'm going to pipe that to select and say I only want to see the names of them.

[Video description begins] He executes the following command: get - azroutetable | select name. The output displayed is Name RouteTable2 RouteTable3 RouteTable1. The prompt does not change. [Video description ends]

And we see the existence of RouteTable3, let's just check that on the portal for a second. So if we go in to All resources, let's filter it out for route table objects just so we can look at it from this perspective.

[Video description begins] He switches to the Microsoft Azure web portal and opens the All resources blade. [Video description ends]

We don't have to do this, but it's kind of fun to do it, so let's go into Route table.

[Video description begins] A blade called "RouteTable3" opens. [Video description ends]

 Let's go find RouteTable3, there it is and I want to see if we have a route in it. That's really what I'm doing here because we defined a route at the command line in PowerShell but did it take? There's only one way to find out.

[Video description begins] He clicks an option called "Routes" under the section labeled "Settings" in the navigation pane. The blade called "RouteTable3| Routes" opens in the content pane. [Video description ends]

Well, actually there's more than one way but this is one of the ways. So there it is, Firewall, default route, and we can see the Next Hop is set to 10.0.1.240 but we're not finished.

[Video description begins] He switches back to the PowerShell command window. [Video description ends]

There's more to the fun, what I want to do now is associate this with a subnet.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So we can do that in a number of ways, such as here in PowerShell. I'm going to use a variable that I'm calling vnet to start and, essentially, all I want to do is point to an existing VNet called Vnet1, so I', going to store that in the vnet variable.

[Video description begins] He executes the command: $vnet = Get - AzVirtualNetwork - Name VNet1 - ResourceGroupName Rg1. No output returns and the prompt does not change. [Video description ends]

Now the next thing that I want to do is I want to make sure I modify the configuration of a subnet in Vnet1. And specify that I want to add a routing table or associate a route table. To actually associate the route table with the subnet, I'm going to use the Set-AzVirtualNetworkSubnetConfig cmdlet. I'm going to tell it that my virtual network is my vnet variable and that the subnet is called Subnet1.

And I've got the IP address prefix for the subnet, I know it's 10.0.1.0/24, I don't want to change it, so that's what it is currently. And I'm going to keep it that way, I'm then going to use -RouteTable and specify our $routetable variable. And I'm going to pipe the whole thing to the Set-AzVirtualNetwork cmdlet to write the change to the network, essentially to commit it.

[Video description begins] He executes the command: Set - AzVirtualNetworkSubnetConfig - VirtualNetwork $vnet - Name 'Subnet1' - AddressPrefix 10.0.1.0/24 - RouteTable $routetable | Set - AzVirtualNetwork. [Video description ends]

After that's done, I'm going to go take a look at it in them, so I'm just going to minimize this.

[Video description begins] He switches to the Microsoft Azure web portal and opens the Virtual networks blade. [Video description ends]

We're going to go look at our Virtual networks, in this case, I want to take a look at Vnet1 and Subnet1 within it. So Vnet1, there it is, let's wait for this to pop up,

[Video description begins] He clicks an option called "Vnet1" under the Name header and a blade called "Vnet1" opens. [Video description ends]

I'm going to click Subnets, we want Subnet1.

[Video description begins] He clicks an option called "Subnets" under the section labeled "Settings" in the notification pane. A blade called "Vnet1 | Subnets" opens in the content pane. it contains a table with four columns and two rows. A column header called "Name" contains options called "Subnet2" and "Subnet1". [Video description ends]

There's Subnet1, I'm going to click on it and let's see if it took the association with RouteTable3. And after a second, we can see indeed that change has been taken place.

[Video description begins] A blade called "Subnet1" opens. [Video description ends]

Azure VNet Peering Overview

[Video description begins] Topic title: Azure VNet Peering Overview. The presenter is Dan Lachance. [Video description ends]

VNet peering allows you to connect Azure VNets together. Now why would you want to do this? You might do this because you know you've got services deployed on each of the VNets or even on just one of them that needs access to resources on another VNet. Now that already will work, however, we're talking about doing this with reduced network latency. When you peer VNets together, the two VNets might be in the same Azure region or they might be in different regions, but if they're in the same region, you end up with reduced network latency. Now one of the things about this also is that inter-VNet traffic is private and this is because it's not being sent over the Internet. So sending traffic from VNet1 to VNet2, for example instead, traverses Microsoft's backbone network.

In our diagram, we have two VNets, on the left we've got VNet1, on the right, we've got VNet2. Whether they're in the same region or not, is not relevant in terms of connectivity. Although in the same region as we know, there's even more reduced network latency. But what's happening in this particular example instead of pairing the two VNets together directly, which is certainly an option, this is yet another thing to consider. You might link them to a centralized what I'm going to call a hub VNet, where you've got a VPN gateway defined. So by doing this, you can peer VNets to the Hub VNet, and as long as using gateway transit is enabled, it's a checkbox when you're configuring, the VNet peered connection in the GUI if you enable that option. Then you'll be able to go through the centralized VPN gateway when you peer a VNet to the hub VNet and have access to other VNets.

[Video description begins] VNet Peering - PowerShell. [Video description ends]

You can also configure VNet peering besides the GUI, besides the portal, using PowerShell.

[Video description begins] The command reads: $vnet1 = Get - AzVirtualNetwork - Name VNet1 `- ResourceGroupName Rg1 . [Video description ends]

So here we're creating a variable called VNet1, which is really just using the Get-AzVirtualNetwork cmdlet to retrieve VNet1 from from a resource group called Rg1. We're doing the same thing for a VNet called VNet2.

[Video description begins] The command reads:$vnet2= Get - AzVirtualNetwork - Name VNet2 ` - ResourceGroupName Rg1 . [Video description ends]

And then we are starting to add the virtual network peering connection. So we're creating one called VNet1 to VNet2, and our virtual network is our VNet1 variable.

[Video description begins] The command reads: Add - AzVirtualNetworkPeering - Name VNet1 - VNet2 ` - VirtualNetwork $vnet1 -RemoteVirtualNetworkld ` $vnet2.Id . [Video description ends]

And the remote virtual network ID is our VNet2 variable .Id, so calling upon the property of it. And then we would do the same thing in the reverse direction so that we can link VNet2 to VNet1's ID.

[Video description begins] The command reads: Add - AzVirtualNetworkPeering - Name VNet2 - VNet1 ` - VirtualNetwork $vnet2 -RemoteVirtualNetworkld ` $vnet1.Id . [Video description ends]

As you might imagine, you can also set up VNet peering using the Azure CLI.

[Video description begins] VNet Peering - CLI. [Video description ends]

So in our first statement, we'll be creating a variable called VNet1 and it's going to store the result of running az network vnet show.

[Video description begins] The command reads: vnet1 - $(az network vnet show - - resource - group Rg1 - - name VNet1 - - query id - out tsv) . [Video description ends]

So vnet show is used to return the details about a specific VNet. So telling it to go into resource group 1, the VNet is named VNet1, and we're using query so we can return just the ID property. And we're setting the output to tsv, which stands for top separated values.

[Video description begins] The command reads: vnet2 - $(az network vnet show - - resource - group Rg1 - - name VNet2 - - query id - out tsv) . Code ends. [Video description ends]

We're doing the same thing for VNet2, so basically we want to make sure we store the IDs in these two respective variables. The next thing we're doing is running az network vnet peering create.

[Video description begins] The command reads: az network vnet peering create - - name VNet1-VNet2 \ - - resource - group Rg1 - - vnet - name vnet1 \ - - remote - vnet - id $vnet2 - - allow - vnet - access. [Video description ends]

And we're naming this first one VNet1 to VNet2. We're specifying the resource group and the VNet name here VNet1, and then the remote VNet which is VNet2. Remember VNet2 is a variable that will contain the ID. And we're allowing VNet access and we do the same type of thing in reverse.

[Video description begins] The command reads: az network vnet peering create - - name VNet2-VNet1 \ - - resource - group Rg1 - - vnet - name vnet2 \ - - remote - vnet - id $vnet2 - - allow - vnet - access. [Video description ends]

So what we're doing is simply setting up a peered connection between two VNets.


Configuring VNet Peering
In this demonstration, I'm going to use the portal to enable a VNet peering connection between two VNets. 
The overall purpose being reduced network latency, especially when those VNets are within the same Azure region. So we get started here in the portal, I'm going to go to the Virtual networks view.
I've got two virtual networks, Vnet2 and Vnet3, that are both in the Canada East region. And because I know I've got services deployed on both of those VNets that need to communicate with services on the other respective VNet, I'm going to create a peered connection between them.

[Video description begins] He clicks an option called "Vnet2" under the Name header and a blade called "Vnet2" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. It includes sections labeled "Settings" and "Monitoring". [Video description ends]

So I'm going to start in Vnet2, now when I click to open that up, I'm going to scroll down in the navigation bar until I get to the Peerings blade.

[Video description begins] He clicks an option called "Peerings" under the section labeled "Settings". A blade called "Vnet 2 | Peerings" opens. It includes a table with three columns and zero row. The column headers are "Name", "Peering status", and "Peer". It also includes a button called "Add". [Video description ends]

So when I open the Peerings blade, there currently are no peering connections. So I'm going to go ahead and create one by clicking the Add button, and there are some details I'll have to specify.

[Video description begins] A blade called "Add peering" opens. [Video description ends]

First thing is the name of the peering from Vnet2 to the remote network. Well, I'm going to call this Vnet2 to Vnet3, because that's ultimately what I'm going to do. However, it doesn't like the name, and the reason is because I need to remove the spaces from it, after which it has no problem with it. There's no problem with uppercase letters or anything like that. Down below, I need to choose the target virtual network. So we're in Vnet2 right now, so the peered virtual network, I'm going to select here as Vnet3. And I have to give a name for the peered connection from Vnet3 back to Vnet2, it's a two-way street. Why don't we be consistent, call that Vnet3toVnet2? Then I have a number of options about connectivity.

So do we want to allow virtual network access from services on Vnet2 to Vnet3? Probably, so I've got that Enabled, and what about the reverse direction, from Vnet3 to Vnet2? I'm going to leave that Enabled as well. But you really have to know which services are on the VNets and what they need to communicate with on the respective VNet that they're peered with. So I'm going to leave it Enabled in both directions. What about traffic that's forwarded or routed to Vnet3? Do we want to allow that traffic that doesn't originate from Vnet3, but forwarded to it, to come into Vnet2? We can either enable that or disable it, the default is Disabled. And the same thing, do we want to allow forwarded traffic from Vnet2, so it didn't originate on Vnet2, to come into VNet3?

That's also disabled by default. Now if you are setting up a peered connection, let's say, for this VNet to a centralized hub VNet that has a VPN gateway, you could choose to allow gateway transit. You might do this if you have a number of VNets that you want to link together through a centralized hub location. I don't have that, so I'm not going to turn that on. So I'm going to go ahead and click OK.

[Video description begins] The Add peering blade closes. The previous table now displays three columns and one row. [Video description ends]

After a moment, it looks like it's completed. So here in Vnet2, we have the Vnet2toVnet3 peered connection with the status of Connected. Let's look at this from the perspective of Vnet3.

[Video description begins] He clicks an option called "Vnet3" under the Name header and a blade called "Vnet3" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. He clicks the Peerings option and a blade called "Vnet 3 | Peerings" opens. It includes a table of three columns and one row. [Video description ends]

So if we go into Vnet3 and take a look at its Peerings, there's one, Vnet3toVnet2, and it also is Connected.

VNet Peering and PowerShell

[Video description begins] Topic title: VNet Peering and PowerShell. The presenter is Dan Lachance. [Video description ends]

You can use PowerShell to configure VNet peering. 

[Video description begins] The PowerShell command window is open. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The thing you need to consider are the VNets you're going to peer together because you're going to need variables that point to each of those VNets. I'm going to start by creating a variable called $vnet1. And it's simply going to store the return result of Get-AzVirtualNetwork where I'm giving the name of the VNet I'm interested in, and the resource group into which it was deployed. So that's my first VNet that I want to peer.

[Video description begins] He executes the command: $vnet1 = Get - AzVirtualNetwork - Name VNet1- ResourceGroupName Rg1. No output returns and the prompt does not change. [Video description ends]

I'm going to do the same type of thing with the up arrow key, but I'll change a few references here. Notably, I'm going to call the variable VNet2, and I'm going to point to a VNet I have that's actually called VNet2, and it's in resource group 1.

[Video description begins] He executes the command: $vnet2= Get - AzVirtualNetwork - Name VNet2 - ResourceGroupName Rg1. No output returns and the prompt does not change. [Video description ends]

So I've got two variables here then that point to the VNets I want to peer together. So all you really need to do is peer the VNets by specifying the source and target, virtual networks and given name for the peering connection, of course. So I'm going to go ahead and start with Add-AzVirtualNetworkPeering, and I'm going to call this one VNet1-VNet2, so that's the direction. So the source, VirtualNetwork with the -VirtualNetwork parameter is going to be my $vnet1 variable. And the -RemoteVirtualNetwork parameter is going to refer to $vnet2.Id. So I'm calling upon the ID property to get the ID of the second virtual network. I'll just go ahead and press Enter.

[Video description begins] He executes the command: Add - AzVirtualNetworkPeering - Name VNet1 - VNet2 - VirtualNetwork $vnet1 -RemoteVirtualNetworkld $vnet2.Id. The output displays the details of creating a peering between two virtual networks and the prompt does not change. [Video description ends]

And after a moment, it will make that peering connection in that direction from VNet1 to VNet2.

[Video description begins] He switches to the Virtual networks blade. [Video description ends]

And we can go ahead and check our work. 

[Video description begins] He clicks an option called "Vnet1" under the Name header and a blade called "Vnet1" opens. [Video description ends]

So if I go into VNet1 here in the portal, and if we were to take a peek at our peerings, so I'll pop up the Peerings blade.

[Video description begins] He clicks an option called "Peerings" under the section labeled "Settings". A blade called "Vnet 1 | Peerings" opens. [Video description ends]

There it is, VNet1-VNet2 but the peering status is Initiated. Well, it's not finished because we have to do the same thing in the opposite direction. Now in the GUI, you're really killing two birds with one stone, aren't you? Because you configure the VNet connection and both sides of the connection are done. But that's not the case here in PowerShell, but it's not a big deal.

[Video description begins] He switches back to the PowerShell command window. [Video description ends]

We just have to add the connection basically in the opposite direction.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So to do that, I'm going to use the same cmdlet again, Add-AzVirtualNetworkPeering. I'm going to call this one though, VNet2-VNet1, so for that direction. And then this particular perspective, the virtual network, the source virtual network is VNet2 and the remote virtual network is VNet1. So specifically, the ID property of the $vnet1 variable. Let's go ahead and press Enter to finish this peering connection. After which, we'll just go ahead and check our work in the portal.

[Video description begins] He executes the following command: Add - AzVirtualNetworkPeering - Name VNet2 - VNet1 - VirtualNetwork $vnet2 -RemoteVirtualNetworkld $vnet1.Id. [Video description ends]

Okay, so it looks like it took. Let's go. 

[Video description begins] He switches back to the Vnet 1 | Peerings blade. [Video description ends]

Well, first of all, let's actually refresh what we already have here. Notice now the peering status shows Connected. That makes sense, because it's done in both directions now.

[Video description begins] The Vnet 2 | Peerings blade opens. [Video description ends]

If we go to VNet2 and look at the Peerings, we can see that we've got the VNet2-VNet1 peered connection that has a peering status of Connected. Notice now that VNet2 of course has more than one VNet peering connection to different VNets. We can see the peer from this one's perspective, this is VNet2. And that's perfectly normal.


Azure ExpressRoute Overview
Microsoft Azure ExpressRoute gives you a private dedicated network circuit that you can use to link an on-premises data center or network directly into the Azure cloud. 
So it gives you a dedicated private network link that does not traverse the Internet, as a site-to-site VPN solution would, as an example. And you might even use both side by side, you might have a site-to-site VPN linking your on-prem network into Azure. You might also have an ExpressRoute circuit for redundancy purposes. With ExpressRoute, you have really two primary billing models. You can select metered, which means that you will be paying per gigabyte of outbound data transfer. However, you also have an unlimited option where you pay a flat fee per month which means what it says, it's unlimited in terms of data transfer.
You can also provision more than a single circuit. So this might be useful if you've got different geographical locations that you want to provision a configuration for a private dedicated link that connects into the Azure cloud. With ExpressRoute, you can have a service key. The service key gets generated automatically when you provision an ExpressRoute resource in Azure. So we see an example of what the key might look like. And this is a key that you would provide to your service provider. Now that usually comes in the form of you using the service provider, like a telecom or a network provider locally. You would have an account with them, you would sign into the web portal, and configure the Azure ExpressRoute circuit by pasting this key in there. You can get from 50 megabits per second up to 10 gigabits per second for an Azure ExpressRoute circuit.
So the way that we provision this, from beginning to end, is we start by creating an ExpressRoute resource in Azure. We then would copy the service key. The service key is generated automatically, and it's going to be in the Overview blade of your ExpressRoute resource. So you'll copy that and enter it into your service provider portal to provision ExpressRoute. After which, if you give it a bit of time, the provider status, when you look at the ExpressRoute resource in Azure. In the Overview blade, the provider status will change to Provisioned. And after we've done that, then we can configure specific peering connections, such as Azure private peering connections. Perhaps to link on-premises resources, such as individual virtual machines, even. To our Azure environment through the ExpressRoute circuit.
There are some variations to Azure ExpressRoute to think about, such as ExpressRoute Direct and ExpressRoute Global Reach. With ExpressRoute Direct, it doesn't use a service provider. Clients can make direct connections to Microsoft ExpressRoute Direct routers. And this way, we can have dual links up to 100 gigabits per second. In order for you to take advantage of ExpressRoute Direct, though, you have to send an enrollment email to Microsoft. Specifically to ExpressRouteDirect@microsoft.com. With a couple of details, including your subscription ID and the locations in question that you want to use to make an ExpressRoute Direct connection. ExpressRoute Global Reach is used to link ExpressRoute circuits together.
Now, why would we do this? Well, what you could do as an Azure customer is you could use basically the Microsoft Azure backbone. To allow connectivity from one on-premise location to another. But instead of using a standard WAN over the Internet. You're linking each of those on-premises networks to the Microsoft backbone through ExpressRoute Global Reach. So it allows you to form, then, your own private overlay network between on-premises networks, which sits upon the global Microsoft network. And you're making that connection to Microsoft through ExpressRoute.


Configuring ExpressRoute
In Azure, an ExpressRoute connection gives you a dedicated private network link from your on-premises network or data center directly into the Azure cloud as opposed to going over the Internet through a site-to-site VPN. 

[Video description begins] A web page called "Connect to Microsoft Azure | Megaport" is open. It includes a button called "Create an Account". [Video description ends]

Now, part of configuring this will be to know which provider you're going to use in a region that supports ExpressRoute. In this example, I'm looking at the megaport.com website. And from there, if you don't have an account, creating an account with your provider so that you have a web portal where you can configure part of the ExpressRoute connection. But the first thing we have to do in Azure in the portal is actually create an ExpressRoute resource.

[Video description begins] He switches to the Microsoft Azure web portal. [Video description ends]

So I'm going to start by clicking Create a resource. I'll type in expressroute, and I'll select ExpressRoute, and I'll click Create.

[Video description begins] A blade called "ExpressRoute" opens. It includes a button called "Create". [Video description ends]

I'll have to fill in a few details here, the first of which is the name of the circuit. 

[Video description begins] A blade called "Create ExpressRoute circuit" opens. [Video description ends]

So for example, I'm just going to call this first circuit, Circuit1. And I would choose the appropriate provider from the list or depending on where I am in the world, will determine which type of provider I'm going to use. So for example, let's say I select Megaport and I have a peering location. I'll just select here Dallas as an example. And then I can select the bandwidth I want for this particular circuit. So from 50Mbps all the way up to 10. I'm going to start at 50Mbps. But naturally, think about the workloads that will be using this ExpressRoute circuit when you're finished configuring it, to determine what you really need for bandwidth. The default SKU is Standard. I can go for Premium if I'm going to have more than 4000 routes as we see here in the helper screen, or if I need the ability to connect more than 10 virtual networks, and so on.

[Video description begins] He hovers the cursor over a help icon beside the SKU option. [Video description ends]

So I'm going to leave it on Standard for my requirements. The billing model is either Unlimited. So that means what it says, you get a flat monthly charge. Or it's Metered, where you pay per gigabyte of outbound data transfer. I'm going to leave it on Metered, actually. I'm going to switch that over. And I'm going to deploy this into an existing resource group.

[Video description begins] He selects Rg1 from the Resource group drop-down list. [Video description ends]

And I can specify the location where I want this to be deployed. So, maybe I'll choose (US) West Central US. Okay, and I'm going to go ahead and click Create.

[Video description begins] The Create ExpressRoute circuit closes. [Video description ends]

And after a moment, we can see in our notification area that it succeeded, the deployment of the ExpressRoute circuit.

[Video description begins] He clicks a button called "Notifications". [Video description ends]

So I'm going to click Go to resource so we can take a quick little peek at it.

[Video description begins] A blade called "Circuit1" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. The Overview option is selected in the navigation pane. The content pane includes Circuit status, Provider status, and Service key. [Video description ends]

What's important here in the Overview blade is the service key. This is what you would need to enter when you are configuring your ExpressRoute circuit on the provider side in the web portal interface. You get to specify the key among some other details. Once that's been done, you'll see that the provider status here will change from Not provisioned to Provisioned, at which point we can then look at things like Connections and Peerings.

[Video description begins] A blade called "Circuit1 | Peerings" opens. It contains a table with five columns and three rows. The column headers are "Type", "Status", "Primary subnet", "Secondary subnet", and "Last modified by". [Video description ends]

For example, if I go down to Peerings, we might want to create an Azure private peered connection. 

[Video description begins] He click an option called "Azure private" under the Type header. A blade called "Private peering" opens. [Video description ends]

Now by doing that, I might for example, want to link my on-premises environment such as maybe even a specific on-premises virtual machine that I want connected to an Azure VNet using the ExpressRoute dedicated circuit. So instead of traversing the Internet to make that VM on-premises talk to Azure, we could do it through the circuit. So we could fill out these types of peering connections. However, because our circuit is not provisioned on the provider side, we can't follow through. But this is normally what you would do. And you can even specify a shared key to authenticate the on-premises environment with the Azure environment through ExpressRoute.                    
                    
Azure Policies Overview
Microsoft Azure policies are all about controlling access to Azure resources.
So we can use built-in policies or, if they don't suit our needs, we can use custom policies that we've created to control resource access.
A policy is really a JSON rule file that we can apply to the creation of new resources in Azure. You can also apply policies to existing ones, maybe to determine if they're compliant with the security baseline. Now, custom policies can be created manually. You could copy an existing policy and tweak it. You can even get policy documents from GitHub repositories. So Azure Policies are considered to be more granular than RBAC. Consider the fact that with role-based access control, or RBAC, you can determine if a technician can or cannot create Azure virtual machines. However, with policies we can get much more granular. And determine which types of virtual machines are allowed to be deployed. And into which regions and so on. So we specify things like locations. Maybe Canada east is an acceptable location where virtual machines can be deployed but not anywhere else.
We can also specify that a default tag value be applied if it's not been applied by the user. Policies can also accept parameter values. This way you don't have to hard-code things like names into the policy itself. So it lends itself to be modular and reusable. So parameter values then can be fed into a policy. The policy would have been assigned either to a subscription, which means it flows down to everything in that subscription like resource groups and ultimately resources. Also, it could be tied to a specific resource group. It could be tied to a management group. A management group is used to organize multiple subscriptions. And you can also configure an exclusion. So let's say that you've assigned a policy to check for virtual machine disk encryption to the subscription. That flows down to everything in that subscription. But you might want to exclude a resource group where there are virtual machines used for testing purposes. And so they don't need their disks to be encrypted. So you don't want the policy applied there. So you could exclude a resource group within the subscription.
There are a number of Azure Policy effects, such as audit. Which is used for logging where it generates a warning. Or AuditIfNotExists. So this means that if a resource doesn't exist, then auditing would be enabled. DeployIfNotExists, so if a resource doesn't exist, create it. And then deny. So this would be used, for example, to mark non-compliant items as being non-compliant. Now, they wouldn't be deleted, they'd just show up as non-compliant. Such as our example, of using a policy to check for virtual machine disk encryption. So all the machines that are specified as being non-compliant are easily identified.
Then there's the notion of Azure Policy initiatives. This really is essentially a group of policies lumped together. Now why would we do that? Well, because they're related. The policy group or initiative then is assigned just as normally would be done, to a subscription, or a resource group, and so on. So as an example, imagine that we want to be able to harden regional Azure resources. So that might be an initiative. Then we could organize policies within that that would make that happen. Such as to ensure VM disk encryption is enabled. And also ensuring that endpoint protection is enabled. So the initiative would contain those two policies in this example. So it's all about, in this case, security compliance.
You can manage Azure Policies using the portal. You can also do it using the CLI and using PowerShell cmdlets.


Policy Assignment and the Portal
There are many different reasons you would apply policies in an Azure environment. Policies either control what other Azure technicians can do. Such as limiting where certain types of virtual machines can be deployed in terms of regions. Or you might want to check for security compliance for your existing deployed resources. So to get started, here in the portal, I'm going to search for Policy.
And then, I'm going to click on Policy to open up the Policy area.
The first thing I want to do is just take a look at some existing policy Definitions.
There are plenty of pre-built or built-in definitions. Of course, you could also build your own. And they're all listed here, but we can filter them such as by type, whether it's custom or built-in, or by category. For example, if I deselect everything here, and if I were to choose, let's say, Network, then I see policies related only to networking. Or of course, I could select everything in terms of category, and then filter by words, such as the word encrypt. So for example, here we see, we've got options for checking whether or not disk encryption should be applied on virtual machines. That is actually what we're going to do here.
So under the Assignments view on the left, we'll see any policies that were assigned to part of the Azure hierarchy. Whether it's a management group, which is used to organize multiple subscriptions, whether you've assigned a policy to a subscription, or even to a resource group. And of course, if you've assigned a policy to a subscription, it flows down to all resource groups in the subscription. Now, we're going to click Assign policy up at the top here.
And we're going to work with this checking for disk encryption at the VM level. First thing we have to do is determine the scope where we want this policy assignment to take place. It's set by default at the subscription level, but if I click on my options button, the Launch scope selector button on the far right, if I have a management group, which I do, I could assign the policy to a management group.
And we haven't selected the policy yet, but that means the policy, whatever it is, would be applied to all subscriptions that are under the management group. Or we could tie it to a subscription. Or even a specific resource group within the subscription. I want this to be applied at the subscription level. So the policy assignment will flow down to all resource groups under my Pay-As-You-Go subscription, that's fine.

[Video description begins] He clicks a button called "Select" and the Scope blade closes.[Video description ends]

That was the default selection. Now, I could exclude specific resource groups. 

[Video description begins] He clicks a button called "Options" adjacent to a text box called "Exclusions". A blade called "Exclusions" opens. [Video description ends]

So if I have a resource group that should not have this policy, which we haven't yet selected, applied, I could choose a Resource Group to exclude. I'm not going to do that.

[Video description begins] He clicks a button called "Cancel" and the Exclusions blade closes. [Video description ends]

Now, we have to specify the policy definitions. So I'm going to click the selector button to do that.

[Video description begins] He clicks a button called "Options" adjacent to a text box called "Policy definition". A blade called "Available Definitions" opens. It includes a filter box labeled “Search” [Video description ends]

Now from here, I can filter. So I'm going to type in the word encrypt. And I'm interested in the one that we looked at previously, Disk encryption should be applied on virtual machines. So basically, in this particular example, I'm assigning a policy that's really used to check for compliance, in this case, at the security configuration level. I'm going to go ahead and select that.

[Video description begins] He types encrypt in the Search filter box and its corresponding list appears under a section labeled “Policy Definition” [Video description ends]

There are many other policies we could have chosen, but this is what I'm using in this example.

[Video description begins] He clicks a button called "Select". The value "Disk encryption should be applied on virtual machines" is displayed in the Policy definition and Assignment name text boxes. [Video description ends]

So I want to make sure that this policy is enforced, and I'm going to click the Review + create button.

[Video description begins] The Review + create tab opens. [Video description ends]

There's really nothing else I want to do here, so I'm going to create this assignment by clicking the Create button. We can now see that the assignment succeeded.

[Video description begins] The Policy | Assignments page opens. It displays Total Assignments as 1. It includes a table with five columns and one row. The column headers are name, Scope, Type, Policies, and Category. [Video description ends]

So we now have our disk encryption being checked on virtual machine disks being applied to the subscription scope, the Pay-As-You-Go subscription. And at this point, we can then wait for that to happen. Now, how long does that take to happen? Can we force it along? No, you cannot. So we can take a minimum of 15 minutes, and depending on how many virtual machines you have in your subscription, actually, really depends on how many objects you have deployed in your subscription, it can take longer. So the more objects, the longer it takes. But at any point in time, you can come back and you could check the Compliance view to see if it's yet completed doing its search for virtual machines. And we can see here, our assignment is listed here, hasn't even started.

[Video description begins] He clicks an option called "Compliance" in the navigation pane. A page called "Policy | Compliance" opens in the content pane. It displays Overall resource compliance as 100%.It includes a table with five columns and one row. The column headers include Name, Scope, and Compliance state. He points to row entries labeled “Disk encryption should be applied on virtual machines” and “Not started” under the Name and Compliance column headers respectively [Video description ends]

So it hasn't even checked virtual machines to look at their compliance state.


Policy Assignment and the CLI
You can use the Azure CLI to manage policies.

[Video description begins] The Microsoft Azure web portal opens. The Policy page is open. [Video description ends]

Here in the Azure portal, I've already opened up policies, where we can go and take a look at policy Definitions.

[Video description begins] He clicks the Definitions option under the Authoring section in the navigation pane. The Policy | Definitions page opens. [Video description ends]

Now this is in the GUI console. Of course, we can view policy definitions as well in the CLI. But before we do that, here in the portal we can also view policy Assignments, of which we have one for disk encryption being checked at the Pay-As-You-Go subscription Scope level.

[Video description begins] He clicks the Assignments option under the Authoring section in the navigation pane. The Policy | Assignments page opens. It includes the table with five columns and one row. The column headers are name, Scope, Type, Policies, and Category. [Video description ends]

Let's open up Cloud Shell and let's explore this just a little bit.

[Video description begins] He clicks an icon labeled “cloud shell” and a command prompt window called "PowerShell" opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I'll do here in the Cloud Shell is I'm going to type az policy -h for help to see what the next level commands would be.

[Video description begins] He executes the following command: az policy - h. The output displays various commands. The prompt does not change. [Video description ends]

Such as assignment, if I want to create a policy assignment as opposed to working with policy definitions. So I'm going to run cls to clear the screen and az policy assignment -h.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. He executes the following command: az policy assignment - h. The output displays various commands. The prompt does not change. [Video description ends]

From here, we'll then see the next level commands after that, such as creating an assignment.

[Video description begins] He clears the screen and the prompt does not change [Video description ends]

So we can learn more about that, I'll just use the up-arrow key here, by changing this to az policy assignment create -h for help once again. And then we're seeing some details about what we would do to actually create a policy assignment, along with some examples of how that would actually be done.

[Video description begins] He executes the following command: az policy assignment create - h. The output displays various command details with examples. The prompt does not change. [Video description ends]

Now having done that, let's take a look at a few other things related to policies, such as az policy definition list.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So I want to list policy definitions the way we looked at the policy definitions view in the GUI.

[Video description begins] He executes the following command: az policy definition list. The output displays detailed listing of code. The prompt does not change. [Video description ends]

Now there are quite a few of them and each of them has quite a few properties, as we can see here, so the listing can be somewhat long. What we can do is query the output of this using the cli --query parameter.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So in other words, let's bring up that previous command, let's use the up-arrow key, az policy definition list. But this time, what I'm going to do is use --query. And I'm going to put in open and closing square bracket, which indicates that we have an array of items. There's multiple policy definitions. Dot. And the property I'm interested in is displayName, where name has a capital N. This is only going to show me the names of the policies as opposed to all of the details for each of them.

[Video description begins] He executes the following command: az policy definition list --query [].displayName. The output displays names of the policies. The prompt does not change. [Video description ends]

And we can see as we scroll back up through the output that there are quite a few of them. Now having done that, I'm just going to clear the screen here for one second. We can also view policy assignments.

[Video description begins] He clears the screen and the prompt does not change [Video description ends]

So I could run az policy assignment list. We'll see any assigned policies.

[Video description begins] He executes the following command: az policy assignment list. The output displays details of assigned policy. The prompt does not change. [Video description ends]

Here we've got one that's assigned for checking disk encryption, and we can see when it was created, who was it assigned by, and we have all of those details. Now we could also specifically ask for that information, meaning we could ask for specific assignments at a specific scope level.

[Video description begins] He clears the screen and the prompt does not change [Video description ends]

So for example, we're going to run az policy assignment list and I'm going to use --scope. And what I've put in double quotes here is a reference to my subscription ID. So I want to see any assignments made at the subscription level.

[Video description begins] He executes the following command: az policy assignment list --scope "/subscriptions/048b82ac-4519-403b-ab05-6b4305502109". The output displays details of assigned policy. The prompt does not change. [Video description ends]

Now we're going to see the same kind of output because I only have one assignment. But nonetheless, it is showing us our disk encryption should be applied on virtual machines assignment. Let's just minimize the Cloud Shell here and verify this.

[Video description begins] The Policy | Assignments page opens. [Video description ends]

So we do see that we have our disk encryption policy here, this assignment made at the Pay-As-You-Go subscription level.

Policy Assignment and PowerShell

[Video description begins] Topic title: Policy Assignment and PowerShell. The presenter is Dan Lachance. [Video description ends] 

Here in the Azure portal, we know that we can go into the Policy tool and go to the Assignments view to assign a policy at a given scope, whether it's a subscription, resource group, and whatnot.

[Video description begins] The Microsoft Azure web portal opens. The Policy | Assignments page is open. [Video description ends] 

However, we can also do that in PowerShell.

[Video description begins] He clicks the cloud shell icon and the Powershell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So the first thing I'm going to do here is I'm going to create a variable called $rg for resource group. And I'm going to store in that the result of get-azresource group, and the name is going to be rg1. So if I do $rg, we can see it's got a reference to my resource group.

[Video description begins] He executes the following command: $rg = get-azresourcegroup -name rg1. No output is displayed and the prompt does not change. [Video description ends]

The next thing I want to do is create a variable to store the definition of a policy.

[Video description begins] He executes the following command: $rg. The output displays details of resource group Rg1. The prompt does not change. [Video description ends]

So to do that, I've created a $definition variable, and it will store the result of running Get-AzPolicyDefinition, which I am then piping to Where-Object.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

Now I've got the space backtick here to wrap that to the next line. Where-Object then has an expression, where we're looking at the display name of each policy definition until we find one that equals Audit VMs that do not use managed disks.

[Video description begins] He executes the following command: $definition = Get-AzPolicyDefinition | ` >> Where-Object { $_.Properties.DisplayName -eq "Audit VMs that do not use managed disks" }. The output displays warning messages and the prompt does not change. [Video description ends]

So Where-Object is a filtering type of cmdlet, so I've got the open and the closing curly brace and within my expression. The $_ is a built-in PowerShell variable. It's a placeholder that allows you to process a collection of items. Here the collection of items is the collection of policy definitions. And then from there, we can call upon the .Properties.DisplayName property. Now after we've done that, we should have the policy definition for Audit VMs that do not use managed disks stored in our dollar sign definition variable. There are some warning messages here about some changes taking place with these PowerShell cmdlets, and that's fine. What I want to do then is clear the screen and let's just see what's in $definition.

[Video description begins] He clears the screen and the prompt does not change. He executes the following command: $definition. The output displays details of the definition and the prompt does not change. [Video description ends]

Looks good. Looks like we've got the definition of a policy. So the next order of business is to assign that policy.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

To do that, I'm going to use the New-AzPolicyAssignment cmdlet. And I'm going to assign a name. It's going to be called VMs-ManagedDisks, and the DisplayName, Check for VM Managed Disks, then -Scope. And I'm going to reference my variable $rg. It points to resource group one. And within that, I'll call upon the ResourceID property. So that's what I'm going to do to set the scope of where that policy should be applied. And then, of course, I have to tell it the policy definition using -PolicyDefinition and I'll use our $definition variable. Again, we've got a few warnings as these cmdlets are always changing.

[Video description begins] He executes the following command: New-AzPolicyAssignment -Name "VMs-ManagedDisks" -DisplayName "Check for VM Managed Disks" ` >> -Scope $rg.ResourceId -PolicyDefintion $definition. The output displays warning messages and assignment details. The prompt does not change. [Video description ends]

But in the end, the assignment should have taken place. Now, we can take a look at that even in the portal to see if that's true. So we're already in the Assignments view.
If I do a Refresh, then we should see that there it is right there, Check for VM Managed Disks. And it's applied not just to the subscription, but rather to a resource group, Rg1, within the subscription.


Custom Policies
Although there are many built-in policies that you can assign in Azure, such as for checking security compliance, like checking if virtual machines have disk encryption enabled. Or for doing other things like limiting which types of virtual machines can be created in certain regions. There are times you might need to build your own custom policy. 
To do that here in the portal, I'm going to search for Policy to open up the Policy tool.
Now in the Policy tool, if I go to Definitions, I'll see a list of all of the policy definitions that are available.

[Video description begins] He clicks the Definitions option under the Authoring section in the navigation pane. The Policy | Definitions page opens. [Video description ends]

I can filter it so that, for example, I can view only Custom policies. Now there are none, at least not yet. We're going to add a custom policy definition by clicking the add Policy definition button up above.

[Video description begins] He clicks a drop down list box called “Type” and a list opens. He selects an option labeled “Custom”. A blade called "Policy definition" opens. [Video description ends]

Now when I do that, I have to fill in a few items. Notably, I have to specify the actual policy rule in JSON format.

[Video description begins] He enters the following code under a section called "POLICY RULE", code starts: { “policyRule”: { “if”: { “field”: “tags”, “exists”: “false” }, “then”: { “effect”: “append”, “details”: [ { “field”: “tags”, “value”: { “costCenter”: “yhz” } } ] } }, “parameters”: {} }. Code ends. [Video description ends]

So I've placed my own custom JSON text here. So I've got a policyRule and what we're looking at is when we have a resource deployment occurring, we want to check to see if any tags have been applied. So if tags haven't been applied, so exists false, then the effect is going to be append, we want to append some tags. So to the tags field, I want to add costCenter with a value of yhz. Now this is a way that we could enforce some consistency to a degree when it comes to adding tags to newly created resources. 

[Video description begins] He clicks a button called "Options" adjacent to a text box called "Definition location" under a section called “BASICS”. A blade called "definition location" opens.[Video description ends]

So to create this custom policy, first of all, I'm going to define the location at the top, as let's say subscription level.  

[Video description begins] He clicks a drop-down list box called "Subscription" and selects an option called "Pay-As-You-Go". He clicks a button called "Select" and the blade closes. [Video description ends]

And I'm going to call this name, Add Cost Center Tag. And down below, I'm going to apply it to an existing category. These are categories of policy definitions, let's say Tags.

[Video description begins] He selects a radio button called "Use existing". [Video description ends]

And of course, we have our rule listed down below.

[Video description begins] He clicks a drop-down list box called "Category" and selects and option called "Tags". [Video description ends]

And that's it. I'm going to scroll down at the bottom, and I'm going to click Save to save this custom policy definition. which, as we can see now, is clearly shown here.

[Video description begins] The Policy definition blade closes. The Policy | Definitions page opens. [Video description ends]

Now we can use this for assignments. 

[Video description begins] He clicks the Assignments option under the Authoring section in the navigation pane and the Policy | Assignments page opens. It displays Total Assignments as 2. [Video description ends]

So for example, if I go to the Assignments view, we can then actually assign that custom policy. 

[Video description begins] He clicks the Assign policy button and its corresponding blade opens. It includes Basics, Parameters, Remediation, and Review + create tabs. The Basics tab is selected. [Video description ends]

So I could choose Assign policy, just like we normally would with a built-in policy. The only difference is, we're going to select our custom policy. So for Policy definition down below because you might have quite a large list, you might want to filter it by Custom.

[Video description begins] He clicks the Options button adjacent to the Policy definition text box. A blade called "Available Definitions" opens. [Video description ends]

 There it is, Add Cost Center Tag.

[Video description begins] He clicks a drop-down list box called "Type" and selects an option called "Custom". [Video description ends]

I can select that and I can decide where I want that applied.

[Video description begins] He clicks a button called "Select" and the Available Definitions blade closes. A value Add Cost Center Tag is displayed in the Policy definition and Assignment name text boxes. [Video description ends]

So let's say for example, we want to change it from the subscription to a resource group.

[Video description begins] He clicks the Options button adjacent to the Scope text box and its corresponding blade open. [Video description ends]

So I can go back to my Scope selector. And within my subscription, maybe I'll apply that to a specific resource group where we might deploy resources.

[Video description begins] He clicks a drop-down list box called "Resource Group" and selects an option called "Rg1". [Video description ends]

And I'll go ahead and select that.

[Video description begins] He clicks the Select button and the Scope blade closes. [Video description ends]

And at this point, I'm going to click Review + create and then I will create the policy assignment.

[Video description begins] The Review + create tab opens. [Video description ends]

Now the next thing we'll do is just test that out by creating something in that resource group.  

[Video description begins] He clicks the Create button and the Assign policy blade closes. The Policy | Assignments page opens. It displays Total Assignments as 3. [Video description ends]

So let's just go Home, let's choose Create a resource.

[Video description begins] The Microsoft Azure home page opens. [Video description ends]

Let's say it's going to be a storage account, so I'm going to type in storage account.

[Video description begins] He enters storage account in a search box called "Search the Marketplace". The search list includes an option labeled “Storage account – blob, file, table, queue”. He selects the option. [Video description ends]

We'll select that. We're going to choose Create, and at this point we're going to go through and just basically create a very simple storage account.

[Video description begins] A blade called "Storage account - blob, file, table, queue" opens. He clicks a button called "Create". [Video description ends]

 I'll deploy it into resource group 1 because that's where a policy applies.

[Video description begins] A blade called "Create storage account" opens. It includes tabs called "Basics", "Networking", "Advanced", "Tags", and "Review + create". The Basics tab is selected.[Video description ends]

And I'll just give it a unique name that I know won't be used by anything else.

[Video description begins] He clicks a drop-down list box called "Resource group" and selects an option called "Rg1". [Video description ends]

And really that's about it.

[Video description begins] He enters storacct333325 in a text box called "Storage account name". [Video description ends]

 All I really want to do is create the storage account. 

[Video description begins] He clicks a button called "Review + create" and the Review + create tab opens.[Video description ends]

So I'm just going to go right to the review and create it.  

[Video description begins] He clicks a button called "Create" and the Create storage account blade closes. [Video description ends]

Now back here in the Policy tool, if I look at the Compliance view, make sure you track that assignment.

[Video description begins] The Policy | Compliance page opens. It includes a table with six columns and three rows. The column headers include Name, Scope, and Compliance state. [Video description ends]

Right now, it currently says it's not yet been started. These things can take a little bit of time before they kick in. So as we keep clicking Refresh, we can see for our Add Cost Centre Tag policy that we've got a Compliance state now of Non-compliant.

[Video description begins] He clicks the Refresh button and the Overall resource compliance value changes to 71%. [Video description ends]

Currently, it's 18 out of 24 resources, so 75%. However, if we keep clicking Refresh, that will change as it keeps evaluating the resources in our subscription to see which ones do not have that specific cost center tag. 

[Video description begins] He clicks value "Add Cost Center Tag" under the Name column header. A blade called "Assignment Details" opens. [Video description ends]

So, we can click directly on that custom assignment to open that up and view the details about it. Such as scrolling down to see a list of the non-compliant resources. In this case, that do not have the cost center tag applied.


Policy Compliance
While you can use Azure Policies to limit resource management in the Azure environment, you can also use it to check for compliance, such as with security standards.
To get started here in the portal, I'm going to search for Policy up in the top bar. And I'm going to open up the Policy tool, where the first thing we should do is look at any existing policy assignments.
Now bear in mind that when you make a policy assignment, such as at the subscription level for that type of scope.

[Video description begins] He clicks the Assignments option under the Authoring section in the navigation pane and the Policy | Assignments page opens. It displays Policy Assignments as 3. It also includes the table with five columns and three rows. The column headers include name, Scope, Type, Policies, and Category. [Video description ends]

Depending on how many objects are in your subscription will determine how long it takes before you can expect compliance reports. So for example, we've got an assignment here for a policy called Disk encryption should be applied on virtual machines. That's been applied at the Pay-As-You-Go subscription level.

[Video description begins] He clicks the Compliance option in the navigation pane and the Policy | Compliance page opens. It includes the table with six columns and three rows. The column headers include Name, Scope, and Compliance state. [Video description ends]

So when we go to the Compliance view, if it's not yet had time to run we have to just wait and click on Refresh until such time we start getting some information. So for example, we can see the Disk encryption should be applied on virtual machines compliance report here for the Pay-As-You-Go subscription. And currently the Compliance state is Non-compliant. So 0 out of 1. So it means we have zero out of one applicable item that are compliant with that.

[Video description begins] He clicks a second row which includes row entry labeled "Disk encryption should be applied on virtual machines" under the Name column header. A blade called "Assignment Details" opens. It includes a table with seven columns and one row. The column headers include Name, Compliance state, Resource Type, Location, and Scope. [Video description ends]

So if we take a look at that by opening it up, opening up the assignment details. Then when we scroll down towards the bottom, we'll see the offender. So what is the one item that was not compliant? Well, in this case we're talking about disk encryption, which applies to a virtual machine, shows us the name of the virtual machine. And we can see the Compliance state for it is that it's Non-compliant.

[Video description begins] He points to a row entry labeled "winsrv2019-1" under the Name column header. [Video description ends]

Now if we click on the Details link for that, we'll get a bit more insight as to what's going on.

[Video description begins] A blade called "Compliance details" opens. [Video description ends]

So here it says, No related resources match the effect details in the policy definition. In this case, looking for encrypted disks.

[Video description begins] He closes the Compliance details blade. [Video description ends]

So by viewing these compliance reports, we can determine whether certain machines are compliant with security standards such as this one. And if not, we know where to focus our energy to bring those devices into compliance.


Policy Remediation
You can configure remediation tasks for certain types of Azure Policies when it comes to non-compliant resources.
An example of this would be a custom policy that uses the modify policy effect. Let's take a look at this here in the portal. I'm going to start by going to the Azure Policy tool.
And we'll first start by looking at an existing definition for a custom built policy.
So I'm going to change the Type drop-down list here on the right to Custom, there it is. Add Cost Center Tag, going to click to open up that custom policy definition, and let's take a look at the definition down below.

[Video description begins] He clicks the Add Cost Center Tag row entry under the Name column header and its corresponding blade opens. It includes tabs called "Definition" and "Assignments". [Video description ends]

What's happening is we're looking for a tag in resources called CostCenter.

[Video description begins] The Definition tab includes a code. He refers to the following code snippet, code starts: "parameters": {}, "policyRule": { "if": { "field": "tags['CostCenter']", "exists": "false" }, "then": { "effect": "modify", "details": { "roleDefinitionsIds": [ “/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c” ], “operations”: [ { “operation”: “add”, “field”: “tags[‘CostCenter’]”, “value”: “YHZ” } ] } } } },. Code ends. [Video description ends]  

Now, depending on where we assign this policy will determine what it's going to look at.

[Video description begins] He highlights the following line of code: "field": "tags['CostCenter']",. [Video description ends]  

Is it going to look at all resources in the subscription or just certain ones in a resource group? Depends on where this custom policy is assigned at which scope level. So if there is not a CostCenter tag, so if that works out to be false, what should we do?

[Video description begins] He highlights the following line of code: "exists": "false". [Video description ends]

Well, we want to add a CostCenter tag with an appropriate value. So then the effect is modify. 

[Video description begins] He highlights the following line of code: "then": { "effect": "modify",. [Video description ends]

And what we want to do is make sure that we add a specific tag, in this case the CostCenter tag, with the value of YHZ.

[Video description begins] He highlights the following lines of code, code start: “operation”: “add”, “field”: “tags[‘CostCenter’]”, “value”: “YHZ”. Code ends. [Video description ends]

Now, this will certainly apply to newly created resources, they will automatically have this tag added. But for existing ones, we'd have to check the compliance. So let's see what that looks like. 

[Video description begins] The Add Cost Center Tag blade closes. [Video description ends]

Let's close out of here, and let's go back to our Compliance view over here on the left, where we can see our Add Cost Center Tag has been applied to the Pay-As-You-Go or subscription scope.

[Video description begins] He clicks the Compliance option in the navigation pane and the Policy | Compliance page opens. It includes the table with six columns and several rows. The column headers include Name, Scope, and Compliance state. [Video description ends]

And we can see that currently the state is Non-compliant, 0 out of 34 resources are compliant with that. So if we click on that, we'll be able to see the resources in question. In this case, it's going to be any resource that does not have that tag value.

[Video description begins] He clicks the row with row entry labeled “Non-compliant” under the Compliance state column header. The Assignment Details blade opens. It includes tabs called "Resource compliance", "Events", "Remediation tasks". The Resource compliance tab is selected. It includes a table with seven columns and several rows. The column headers include Name, Compliance state, Resource Type, Location, Scope, and Last evaluated. [Video description ends]

So, CostCenter with a value of YHZ. We can scroll down and we can see the identity of those specific resources. So for example, the first one is a virtual machine called winsrv2019-1. Over on the far right, if I click the three dots button, I can select the Compliance reason to see why it's not compliant.

[Video description begins] A blade called "Compliance details" opens. [Video description ends]

It's not compliant because the CostCenter tag doesn't even have a value, so there's nothing there. It needs to have a value of YHZ. 

[Video description begins] He closes the Compliance details blade. [Video description ends]

So what I can do is create a remediation task by clicking that button of the same name up here at the top. 

[Video description begins] A blade called "New remediation task" opens. It includes table with four columns and several rows. The column headers are Name, Resource Type, Location and Scope. [Video description ends]

When you create a remediation task, you are remediating in alignment with what that policy says should exist. In this case, that's the Add Cost Center Tag policy that wants the CostCenter tag with the value of YHZ to be applied. So we have a list of the resources here in our subscription that really need to be remediated and have that item added, that tag. So I'm going to go ahead and click the Remediate button at the bottom. And we can see a remediation task has successfully been created.

[Video description begins] The New remediation task blade closes. The Assignment Details blade opens. The Remediation tasks tab is open. It includes a table with six columns and several rows. The column headers include Last Updated, Remediation State, Policy Definition, Scope, Locations, and Remediated Resources. [Video description ends]

And it shows it here, when we're looking at our Policy compliance, we can see under the Remediation tasks tab that it's currently In Progress. So back here in our Compliance view, if we click Refresh, we can see that for our Add Cost Center Tag custom policy, the non-compliant state is changing.

[Video description begins] The Policy | Compliance page opens. [Video description ends]

 It will take a bit of time, we can keep on clicking the Refresh button. But now we've got 86% resource compliance. 

[Video description begins] He clicks the Add Cost Center Tag row entry under the Name column header. The Assignment Details blade opens. [Video description ends]

So if I click to open that up, let's go back and take a peek at the status of our remediation task. So if go to the Remediation tasks, we can see its Complete.

[Video description begins] He clicks the Remediation tasks tab. [Video description ends]

And if I clicked on it, then we'll be able to see some further detail.

[Video description begins] A blade called "Remediation task" opens. It includes a table with seven columns and several rows. The column headers include Name, Resource Type, Location, Scope, Deployment Id, and Related events. [Video description ends]

Now just because it's complete, it doesn't mean that every resource in the subscription has been modified to be compliant. It means that it's complete in that the instructions have been sent, it just might not completely be done. So here we can see the resources against which that modify effect for adding that tag value has succeeded. So for example, for vnet1, a virtual network, let's take a look at that. If we actually click to open up that resource, did it or did it not automatically tag it?

[Video description begins] He clicks a row entry labeled “vnet1” under the Name column header. A page called "Vnet1" opens. It is divided into two parts. The first part is a navigation pane. The second part is a content pane. [Video description ends]

Let's take a look. So I'm going to go Tags.

[Video description begins] He clicks an option called "Tags" in the navigation pane and a page called "Vnet1 | Tags" opens. [Video description ends]

Now if there were any tags here already, we'll see those in addition to the new one. And it looks good. We apparently had a tag here called Project with the value of ABC. And now we can see CostCenter: YHZ has been added. And this is a result of having created a remediation task.

                    
Azure AD Role Overview
In Azure Role-Based Access Control, otherwise called RBAC is a way to delegate permissions to others to manage Azure resources.  

[Video description begins] Azure Role-based Access Control (RBAC). [Video description ends]

There are a number of built in roles that you can select from or you can define your own custom roles if they don't suit your needs. Some examples of built in roles include the owner role.

[Video description begins] Azure Built-in RBAC Roles. [Video description ends]

Now if you have the owner role, you have full resource management control of all resources in Azure. We haven't yet talked about the scope of where that applies, but unto itself that's what it means. Think of an RBAC role as being a collection of related permissions. You've got the contributor role. So resource control, other than changing RBAC access. Reader role, which implies read-only access. Other examples would include CDN endpoint reader for Content Delivery Network endpoint reader. So you can read endpoints. But that's it, can you configure them. Cost Management contributors you can read and write Azure cost configurations including working with budgets, virtual machine administrator login as it implies. You can read VMs in the portal and login with admin credentials.

[Video description begins] Azure Custom RBAC Role Process. [Video description ends]

Now there are many more built in roles than that, that's just to give us a sampling of what we might expect. But you can also work with custom roles. Maybe you need one role that combines virtual machine and cost management permissions for example. So what you would do is create a custom JSON role file, this is just a text file that uses JSON syntax. You have to know what that syntax is to properly define the role, and then you can create the role from that file. For example in PowerShell, you can do that with the New-AzRoleDefinition cmdlet, or in the CLI you might use AZ role definition create.

[Video description begins] Azure Custom RBAC Role JSON File. Several lines of code are displayed. [Video description ends]

Working with a custom RBAC role file uses JSON syntax, you could even type this into your favorite text editor, it doesn't matter. But notice we've got the opening and closing curly braces at the very top and the very bottom. And the first item we see defined here is the "Name": custom VM roles It's got its own ID, the IsCustom flag third line down is set to true. We have a Description, and then we have a collection of actions. What are the permissions grouped together here within this role? So it looks like we have a bunch of read access to all items indicated with the asterisk in storage, network and compute, and then the ability to start and restart virtual machines. So this is what we would see within a custom RBAC role definition file.

[Video description begins] RBAC Role Assignment. [Video description ends]

Now we can assign roles, whether they're built in or custom at a variety of levels within the hierarchy in Azure. But before we get to that, let's talk about which principals we can assign it to. You can assign roles to users individually, but it's normally easier to do it on a group level. So you just add members to the group, they get the permissions for the roles assigned to the group. You could also do it for service principles. Think of a service principle as being kind of a dummy user account used by software. It's not actually user logging in, it's a software component that might require access, let's say, to some other resource like a storage account.

Then you've got managed identities. Now, this is something this is a built in type of security principle that's managed automatically by Azure. So this would be used for example, when if you're a software developer, you building custom solutions in Azure that need to authenticate to certain Azure services. So depending on what you're working with, will determine whether Azure creates the managed identity or not. So let's say that we've assigned a role to a group.

[Video description begins] RBAC Assignment Scopes. [Video description ends]

Where does that apply in the Azure hierarchy? Well, we can assign that at the subscription level, which means that the group members would have those permissions from the role for everything in the entire subscription, it flows down through the hierarchy down to resource groups and down to individual resources in resource groups. However, you could also assign RBAC roles to a specific resource group. And naturally those permissions would only apply for resources in the resource group. And if you need to be very granular, you can also assign it to a specific resource. So let's say you need to allow a virtual machine login for a group for one particular virtual machine. You can certainly do that by assigning the scope for that particular virtual machine resource.

[Video description begins] Inherited RBAC Assignments. [Video description ends]

Pictured on the screen we have a screenshot that shows us how inheritance works in the portal. So in the upper left, notice that we're looking at a resource group called Rg1. And if you look in the navigation panel, the Access Control (IAM) blade has been selected. That's what we're seeing on the right, we are viewing the permissions. And over on the right we can see Network Contributor which is a role has been assigned to a Group. That's called Central_Region_Canada and that was applied at this resource. Remember this resource is the Rg1 resource group. So the members of that group will have the network contributor role for resources in Rg1. Down below notice the Owner role, which was assigned to the Azure_Admins Group. Now, these groups are Azure AD groups. Notice over to the far right it says that that was (Inherited) from the Subscription level. So it's inherited from above but it's still applies here.


Azure AD Role Portal Assignment
You can use the Azure Portal to assign roles and also to view where the roles are effective. 

[Video description begins] A web portal called "Microsoft Azure" opens. [Video description ends]

We're talking about Role-Based Access Control, or RBAC. So to get started here in the portal, I'm going to search for subscription, and I'm going to go to the subscription level, because I want to start by applying a role there.

[Video description begins] He selects an option called “Subscriptions” from the search result and a page called "Subscriptions" opens. It includes a table with five columns and one row. The column headers are Subscription name, Subscription ID, My role, Current cost, and Status. [Video description ends]

Then we can examine how those permissions flow down the hierarchy, that means to resource groups within the subscription and within resource groups to individual resources. So let's start by opening up a subscription.

[Video description begins] He clicks a row entry called "Pay-As-You-Go" under the Subscription name column header and its corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Now when you want to assign RBAC roles, regardless of which level you're doing it at, you always go into the properties of the item, in this case, the Subscription. And in the navigation bar, you click on Access control (IAM). Now from here, you'll be able to see any role assignments.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

You can choose to View role assignments.

[Video description begins] A tab called “Role assignments” opens. [Video description ends]

So if I click View, I can see that listed over here on the right, but I can also +Add role assignments, which we're going to do. So I'm going to click +Add, Add a role assignment. And the first thing I need to do is select the appropriate Role.

[Video description begins] From a list of options, he selects an option called “Add role assignment” and a blade called "Add role assignment" opens. [Video description ends]

I can choose from the alphabetical list of role names. And bear in mind that a role is really just a collection of related permissions. So what I'm going to do is type in the word virtual just to filter this out. And we'll see here we've got a Virtual Machine Contributor role, which allows with the creation of virtual machines and management of them. So I'm going to leave that as the Role.

[Video description begins] He clicks a drop-down list box called "Role" and selects an option called "Virtual Machine Contributor". [Video description ends]

Now I can assign the access to Azure AD users, groups, or service principals.

[Video description begins] He types, “east” in a text box called “Select”. [Video description ends]

So what I'm going to do here is take a look for a group by the name of east. And sure enough, I have an existing Azure AD group I've created previously called EastAdmins. I want to assign this role to that group. So EastAdmins is now showing up down below as a selected member.

[Video description begins] He selects an option called “EastAdmins”. [Video description ends]

I'm going to save that.

[Video description begins] He clicks a button called "Save" and the Add role assignment blade closes. [Video description ends]

Now at this point, we want to check our work right here at this level, at the subscription level. So I'm just going to scroll over a little bit to the right so we can kind of see everything, including our scroll bar. And at the subscription level, notice for the Virtual Machine Contributor role, EastAdmins is part of that. And we can see that that is a Group and that it was assigned at the Scope of This resource. Now why don't we take a look at a resource group somewhere within the Subscriptions.

[Video description begins] He clicks a link called “Home” and the corresponding page opens. [Video description ends]

So for that I'm just going to go to Home, actually, I'll just open up my navigation bar on the left, and I'll just choose Resource groups.

[Video description begins] A page called "Resource groups" opens. It includes a table with three columns and five rows. The column headers are Name, Subscription, and Location. [Video description ends]

I'm going to open up the properties of an existing Resource group.

[Video description begins] He clicks a row entry called “Rg1” under the Name column header and its corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And we know that to get to the RBAC portion of that item, we need to click on Access control (IAM), so I'm going to do that.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

Now I don't want to make a role assignment here, what I want to do is View role assignments, so I'm going to click the View button. And I'm just going to scroll over just a little bit so we can see what's happening here.

[Video description begins] The Role assignments tab opens in the content pane. [Video description ends]

And as I scroll down, notice that EastAdmins has the Virtual Machine Contributor role that is effective here in my resource group. However, it says Inherited, and it was inherited from the Subscription level. So why don't we go into an object within this resource group to take a peek.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

So for example, if I click on Overview here for the resource group, one of the things I'll be able to do is see the resources down below that are in that resource group. It doesn't matter which one I pick. I'm just going to click on this network security group to open it up.

[Video description begins] He clicks a row entry called “NSG-Windows” and its corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And as is the case with what we've been looking at so far to get to the RBAC section, we click Access control (IAM), so this is for an individual resource.

[Video description begins] The corresponding page opens. [Video description ends]

Let's View the role assignments over on the right, and we'll see, of course, that Virtual Machine Contributor EastAdmins is shown here with inheritance coming from the Subscription level.

[Video description begins] The Role assignments tab opens. [Video description ends]

So that's all that we need to do to be able to grant permissions to Azure resources through the use of roles in the portal.


Azure AD Role CLI Assignment
RBAC roles can be assigned using the Azure CLI.
Here in the portal I'm going to click on Cloud Shell to start up the CLI, and I'm going to start by creating a role assignment using az role assignment create.

[Video description begins] A command prompt window called "PowerShell" opens in the web portal. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I have to do is specify the name of the role that I want to grant, in this case --role and in quotes, "SQL DB contributor". I then have to determine who the assignee is with the --assignee parameter who you assigning this to. Now it could be a service principle and Azure AD group, in this case, it's an Azure AD user, specifically jhill. And then I've got the full email address or user name of that account. I want to make sure that the SQL DB contributor role is assigned to jhill, and I want the scope to be a resource group. So --resource-group, and Rg1. Could go ahead and press Enter to create that role assignment.

[Video description begins] He executes the following command: az role assignment create --role "SQL DB Contributor" --assignee jhill@quick24x7test.onmicrosoft.com --resource-group Rg1. The output displays several lines of code. The prompt does not change. [Video description ends]

And it looks like it's good. We've got some returned JSON, and we can check our work here in the portal. Let's just minimize this.

[Video description begins] He switches back to the Microsoft Azure web portal. He clicks an option called "Resource groups" and a page called "Resource groups" opens. [Video description ends]

Let's go into the Rg1 Resource group to see if user J Hill is shown there with the SQL DB Contributor role.

[Video description begins] He clicks a link called "Rg1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

 So I'm going to go to Access control (IAM) for Rg1.

[Video description begins] He clicks an option called "Access control (IAM)" in the navigation pane. The corresponding page opens in the content pane. [Video description ends]

And what we want to do in there is View the role assignments, so I'll just go ahead and click on that, scroll over a little bit and let's go down and take a peek.

[Video description begins] He clicks a button called "View" in the content pane. The Role assignments tab opens. [Video description ends]

Sure enough their SQL DB Contributor and Jen Hill is a member of that role at this level, This resource. It wasn't inherited from the subscription, so let's go back into the CLI.

[Video description begins] He switches back to the PowerShell command prompt window. [Video description ends]

So I can also view assignments from within here, of course as you might imagine, so az role assignment list --, let's say resource group rg1 since that's what we just looked at in the portal.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And we can see here that user principalName J Hill is assigned here.

[Video description begins] He executes the following command: az role assignment list --resource-group rg1. The output displays several lines of code. The prompt does not change. [Video description ends]

And we can also see that the roleDefinitionName is SQL DB Contributor, and this is for the resource group of course Rg1 that we asked for, up above in the command line.

[Video description begins] He points to the output. [Video description ends]

We can also remove role assignments from here as well.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

To do that I would use the az role assignment delete command syntax. I need to specify the assignee, so --assignee, and it's going to be the user we just added here in this example, jhill. And have to specify the role because she might be assigned with multiple roles at that level, so --role SQL DB Contributor. And the scope where that was applied, that I want to remove it from, is the Rg1 resource group. So let's go ahead and press Enter. Now, that's going to remove that role assignment.

[Video description begins] He executes the following command: az role assignment delete --assignee jhill@quick24x7test.onmicrosoft.com --role "SQL DB Contributor" --resource-group Rg1. No output is displayed and the prompt does not change. [Video description ends]

So I'm just going to use the up arrow key, back to where we were listing role assignments for resource group 1, or Rg1. And notice now nothing is returned.


Azure AD Role PowerShell Assignment
PowerShell cmdlets can be used to manage RBAC role assignments. Here in the portal, I'm going to launch the Cloud Shell to access those PowerShell cmdlets.

[Video description begins] The Microsoft Azure web portal opens. He clicks an icon called “Cloud Shell” and the PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

The first thing I'm going to do is create a new role assignment. Now to do that, I'm going to use the New-AzRoleAssignment PowerShell cmdlet. I'm going to use the -SignInName parameter. And I'm going to assign this to an Azure AD user jhill@quick24x7test.onmicrosoft.com. Now I could also apply this to a service principle in Azure AD or a group. But in this case, it's an individual Azure AD user. I have to specify the RoleDefinitionName, so I'll specify that parameter. In this example, it's going to be the SQL DB Contributor. And as we know when we work with RBAC, we have to determine the scope where the assignee can exercise those privileges. In this case -ResourceGroupName, Rg1. I could specify a subscription or an individual resource, here I want it done at the resource group level. So I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: New-AzRoleAssignment -SignInName jhill@quick24x7test.onmicrosoft.com -RoleDefinitionName "SQL DB Contributor" -ResourceGroupName Rg1. The output displays the details of the role assignment. The prompt does not change. [Video description ends]

Now we can verify this using PowerShell cmdlets. So I'm just going to clear the screen and what we're going to do, is we're going to retrieve role assignments for Rg1 for that user.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

To do that, I'm going to use Get-AzRoleAssignment -ResourceGroupName is Rg1, that's where we just assigned it. -SignInName is going to be our user J Hill. Let's go ahead and press Enter and see what it returns.

[Video description begins] He executes the following command: Get-AzRoleAssignment -ResourceGroupName Rg1 -SignInName jhill@quick24x7test.onmicrosoft.com. The output displays the details of the role assignment. The prompt does not change. [Video description ends]

So we're seeing that user Jen Hill has been assigned the SQL DB Contributor role. And of course we asked for this at the Rg1 resource group level so she has those permissions for SQL database deployments within the Rg1 resource group. Now naturally, we need to know how to be able to remove role assignments using PowerShell.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

We know how to add them and check them, what about removing them? We do that with the Remove-AzRoleAssignment PowerShell cmdlet. As you might expect, in this case, we're going to use -SignInName and specify our Azure AD user sign in name, the email address. I'm going to specify the role with -RoleDefinitionName. It's going to be SQL DB Contributor. And I have to apply that to a scope. Where do you want to remove that from? Well, that would be -ResourceGroupName of Rg1, so I'm going to go ahead and press Enter to remove the role assignment.

[Video description begins] He executes the following command: Remove-AzRoleAssignment -SignInName jhill@quick24x7test.onmicrosoft.com -RoleDefinitionName "SQL DB Contributor" -ResourceGroupName Rg1. No output is displayed and the prompt does not change. [Video description ends]

We're going to check our work. I'll use the up arrow key to bring up previous commands.

[Video description begins] He executes the following command: Get-AzRoleAssignment -ResourceGroupName Rg1 -SignInName jhill@quick24x7test.onmicrosoft.com. No output is displayed and the prompt does not change. [Video description ends]

Up to where we get back to Get-AzRoleAssignment and when I press Enter, nothing is returned because user J Hill no longer has that role assigned in Rg1.

Azure AD Custom Roles

[Video description begins] Topic title: Azure AD Custom Roles. The presenter is Dan Lachance. [Video description ends]

If the built in roles for RBAC in Azure don't meet your needs, you can then define your own custom roles in a JSON formatted file as I've got open here. So it's a JSON formatted file, it's just a text file really.

[Video description begins] He opens a WordPad file called "Create_Custom_Role.json". It contains several lines of code. [Video description ends]

I've got the opening and the closing curly braces. And here, I'm defining the Name of my custom role to be Custom - Network Resource Reader. IsCustom is set to true and I've also got a description here that says, Ability to view network resources. Then you have to define what this role's actions are, what can someone do in terms of permissions if they are assigned this role. So here for actions, I'm specifying Microsoft.Network/*, so all Microsoft Network types of resources in Azure, but the ability to only read them, read.

There are no definitions for NotActions, only actions that we want to allow. And for the AssignableScopes here, I've set it at the subscription level with the ID of my Azure subscription. So now, how do we take this and create a custom role? Well, there are a number of ways that that can be done. We can do this in PowerShell and that's actually what I'm going to do here. So the next thing I need to do is launch the Cloud Shell so I can get to a place where I can issue PowerShell commands.

[Video description begins] He opens the Microsoft Azure web portal. He clicks the Cloud Shell icon and the PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So I'm going to go ahead and launch Cloud Shell. Now, the first thing I have to think about is that the file that we just looked at for our custom JSON role definition was on-premises. I need to get it up here in the cloud in Cloud Shell. So I've got this button at the top here in the bar where I can upload and download files. I'm going to go ahead and click Upload/Download files, and then I'll choose Upload. So I've specified my file and it looks like the upload has completed. So the first time you open Cloud Shell, you're asked to set up storage. And this is one of the reasons so you can have persistent storage of items that you might deal with, in this case, a file I've uploaded. If I do dir, I can see indeed, there's the Create_Custom_Role.json file that we were just looking at in WordPad just a few minutes ago.

[Video description begins] He executes the following command: dir. The output displays a list of files in the directory. The prompt does not change. [Video description ends]

So what I want to do then is I want to make sure I create a new role from this. So I'm going to do that with the new-azroledefinition PowerShell cmdlet. I'm going to pass it the -inputfile parameter with the value of, in this case, create. And I can even use my tab completion to spell out the rest of it since I'm in the same subdirectory. Let's see what happens. I'm going to go ahead and press Enter to create this custom role, and it should be done.

[Video description begins] He executes the following command: new-azroledefinition -inputfile ./Create_Custom_Role.json. The output displays the details of the newly created role. The prompt does not change. [Video description ends]

Now, we can check this here in the portal. So again, it's called Custom - Network Resource Reader. So let's say we were going to go to the subscription level and apply that role.

[Video description begins] He switches back to the Microsoft Azure web portal. He clicks an option called "Subscriptions". A page called "Subscriptions" opens. [Video description ends]

So I'm going to go into my subscription.

[Video description begins] He clicks a row entry labeled "Pay-As-You-Go". A blade called "Pay-As-You-Go" opens. [Video description ends]

We know that in the GUI when you want to work with RBAC, you go into Access control (IAM). So I'm going to do that.

[Video description begins] He clicks an option called "Access control (IAM)" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

And one of the things that we're going to do here is click +Add, Add role assignment.

[Video description begins] The corresponding page opens. [Video description ends]

And, we have a unified drop down list here of both built in and custom roles. Now remember, our role starts with the word custom. And you can actually select it from the list, or you can even filter the list if you so choose.

[Video description begins] He clicks a drop-down list box called “Role”. [Video description ends]

So if I type in custom, we can see right away, Custom - Network Resource Reader. That's the role we just created. And we can see the description here, Ability to view network resources. That's what we've just created. Now, you can also remove that from PowerShell. So let me just go back here into PowerShell.

[Video description begins] He closes the page. He switches back to the PowerShell command prompt window. [Video description ends]

Let's get rid of that.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

I'm going to run get-azroledefinition, and I'm going to specify the name of it, which is going to be Custom - Network Resource Reader, the spaces between those items. Now when I do that, all it does is return that yes, that role is there, that definition exists. So I'm going to bring up that command again with the up arrow key.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader". The output displays the details of the role. The prompt does not change. [Video description ends]

What I want to do is pipe the result of that to the remove-azroledefinition cmdlet. So we're going to retrieve that specific role and pass it through and delete it. Are you sure you want to do, or we can actually suppress that message.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader" | remove-azroledefinition. A confirmation message appears. [Video description ends]

Let me just Control+C out of there.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So, if I bring back that full command again, I can just add -force, if I could spell that over correctly over here. And it will suppress that message so it will remove that role.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader" | remove-azroledefinition -force. No output is displayed and the prompt does not change. [Video description ends]

So if we use our up arrow key to go back a little bit, where we were getting that role definition, it no longer exists.

[Video description begins] He executes the following command: get-azroledefinition -name "Custom - Network Resource Reader". No output is displayed and the prompt does not change. [Video description ends]

Resource Locking Overview

[Video description begins] Topic title: Resource Locking Overview. The presenter is Dan Lachance. [Video description ends]

The purpose of Microsoft Azure resource locks is to control when others can modify or delete Azure resources of any type, whether that's intentional or unintentional.

[Video description begins] Azure Resource Locks. [Video description ends]

So it's a way to basically check out a resource, so to speak. And while it's checked out, in a manner of speaking, it can't be either modified or it can't be entirely deleted. We can set resource locks at the subscription level. And similar to how you apply RBAC roles at the subscription level and it flows down to everything in the subscription, like resource groups and resources, the same thing is true with Azure resource locks. If you set a resource lock at the subscription level, it will flow down to resource groups and resources. You could, of course, apply an Azure resource lock initially at the resource group level, or you might lock an individual resource such as a storage account, to prevent the modification of its properties. Now you can set the Azure resource lock to be read-only.

[Video description begins] Azure Resource Lock Levels. [Video description ends]

What that means is you are allowing read-only access to the item, so that it can't be reconfigured, so to speak. Or you could set it to not allow deletion or to prevent deletion of the resource.

[Video description begins] Azure Resource Lock Inheritance. [Video description ends]

So the inheritance, as we've mentioned, starts at the subscription level, then applies to resource groups, and then applies to individual resources. Now if you don't want that, in other words, you don't want the locking applying everywhere, simply specify the lock at the resource group or the individual resource level.

[Video description begins] VM and storage account are displayed as the individual resources. [Video description ends]

And you can disable or unlock the subscription, the resource group or the resource, at any point in time, once you've deemed it appropriate to allow modifications or the potential for deletion. Bear in mind that modification and deletion of an Azure resource is only possible anyways if somebody has the appropriate permissions to do so, which is usually granted through RBAC roles.

Resource Locking and the Portal

[Video description begins] Topic title: Resource Locking and the Portal. The presenter is Dan Lachance. [Video description ends]

In Microsoft Azure, a resource is an object that you define in the cloud, such as a virtual machine or a disk that you would attach to a virtual machine or a storage account or a SQL server. Any of those things are resources. And so we have the ability to use the portal to lock resources. Why would you do that? You would do it because you want to prevent either a modification of a resource, you want it to be read-only, or you want to prevent the deletion of it.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

So we can set locking at various levels in the Azure hierarchy, such as at the subscription level. Now, that's what I'm going to do.

[Video description begins] He clicks the Subscriptions option and the corresponding page opens.[Video description ends]

For example, here if I go into the subscription, I'll be able to open it up, to reveal its properties, and I am interested primarily in resource locking.

[Video description begins] He clicks the Pay-As-You-Go row entry and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

So I'm going to scroll all the way down under Settings where I see Resource locks.

[Video description begins] He clicks an option called "Resource locks" and the corresponding page opens. [Video description ends]

Any existing resource locks at this level will be shown. It says This resource has no locks. Okay, well, I could click +Add, and I could add a lock at this level.

[Video description begins] A section called "Add lock" opens. [Video description ends]

And when I do that, I specify a name and I can determine if it should be a Read-only lock, so to prevent modifications, or if I want to prevent deletions.

[Video description begins] He clicks a button called "Cancel". [Video description ends]

 I'm not going to do that though I could, but I'm not going to. Instead, I'm going to navigate to Resource groups.

[Video description begins] He clicks an option called "Resource groups" from the left-hand navigator and a page called "Resource groups" opens. [Video description ends]

So what I want to do then is take a look at the resource locking options at the Resource group level, which would be inherited by the resources in the Resource group. I'm going to click on my resource group Rg1.

[Video description begins] The corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And in the Overview blade, one of the things you'll see over on the bottom right are the resources in that resource group. So let's scroll down in the navigation bar and let's take a look at resource locks. So it's listed a little bit differently here. Under Settings, it just says Locks.

[Video description begins] He clicks an option called “Locks” and the corresponding page opens. [Video description ends]

If we take a look, we'll see if there are any locks that have been made here. Now, we've got the Subscription icon where we could take a look at subscription level locks.

[Video description begins] He clicks an icon called "Subscription" and a page called "Resource locks" opens. [Video description ends]

We were just there a few moments ago.

[Video description begins] He clicks a link called “Rg1 | Locks” and the Locks page opens. [Video description ends]

It's just a shortcut to get there. However, we can also add locks at this specific level for this particular Resource group.

[Video description begins] He points to Rg1. [Video description ends]

So that's what I'm going to do. I'm going to click Add. And I'm going to call this, let's say Lock1. And I'm going to set it as a Read-only lock here.

[Video description begins] He clicks a drop-down list box called “Lock type” and selects an option called “Read-only”. [Video description ends]

I could add Notes if I so chose, I don't choose to so I'm just going to click OK. And after a moment, we can see that Lock1 shows up here as Read-only for resource group 1. If I click Subscription once again, then we can see that it shows up at the subscription level and we can see the Scope that it's applied to is only rg1.

[Video description begins] The Resource locks page opens. [Video description ends]

Notice, you can Edit it to change any settings related to that or Delete that lock.

[Video description begins] He switches back to the Locks page. [Video description ends]

 If I go back to the Resource group, you can see the lock here.

[Video description begins] He clicks a link called "Lock1" and a page called "Edit lock" opens. [Video description ends]

And if you click on it, it'll pull up the items where you can modify its settings. But you can't delete it from here, you'd have to go to the subscription level and that's to be expected. Now, let's take a look at some of the resources within Rg1.

[Video description begins] He closes the page. [Video description ends]

We can do that by just scrolling up, clicking Overview. We'll see any resources deployed into this resource group, as we mentioned previously, listed in the bottom right.

[Video description begins] The corresponding page opens. [Video description ends]

For example, here's a resource group called, or pardon me, here's a network security group NSG called NSG-Windows.

[Video description begins] A blade called "NSG-Windows" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

If I click to open it up, we'll be able to look at the Locks for that particular individual resource.

[Video description begins] He clicks an option called "Locks" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

When I click Locks here, notice we can see Lock1 is applied Read-only. And it says Parent resource locks, can't edit them here. Click on the locks scope to go to that scope. Okay, so we'd have to go up to in this case rg1 to take a look at it. But interestingly, if we try to delete this resource, so let's say go back to Overview and normally we'll just go to Delete here.

[Video description begins] He clicks an option called "Overview" in the navigation pane and the corresponding page opens in the content pane. He clicks a button called "Delete" and a message box labeled “Delete network security group” opens. [Video description ends]

And normally, if you have the role permissions to do this it would succeed. Let's go ahead and say, Yes get rid of it.

[Video description begins] He clicks a button called “Yes”. [Video description ends]

It says, I can't do it, cannot do it because there is a lock.

[Video description begins] Another message box opens. [Video description ends]

And it's at the Rg1 level. So therefore, that's not going to happen. It's read-only, which will also prevent modifications here to this particular object.

[Video description begins] He clicks an option called "Inbound security rules" and the corresponding page opens. [Video description ends]

So for example, if I go to Inbound security rules, let's say I go to +Add a new rule, we'll just fill in a couple of blanks here really quickly.

[Video description begins] He clicks a button called "Add" and a page called "Add inbound security rule" opens. [Video description ends]

So I'm just going to accept all of the defaults and I'm going to click Add.

[Video description begins] The page closes and a message box opens. [Video description ends]

Well, it didn't even like that. So I can't even modify it, let alone delete it. Bear in mind, we set a read-only type of lock at the resource group level and it's flowing down at the resource level. So to get rid of all of this, what I could do is go up to the subscription level, as we saw because that's where it allows us to actually delete locks.

[Video description begins] He switches back to the Subscriptions page. [Video description ends]

So I'm going to do that, I'm going to go back into my Pay-As-You-Go subscription. And I'm going to scroll down and look at Resource locks.

[Video description begins] He clicks the "Pay-As-You-Go" row entry and the corresponding blade opens. [Video description ends]

And we'll see the resource lock applied at the resource group level.

[Video description begins] He clicks an option called “Resource locks” and the corresponding page opens. [Video description ends]

So I'm just going to take a look at that.

[Video description begins] He clicks the "Lock1" link and the "Edit lock" page opens. [Video description ends]

Now of course, we can only edit what's there, but if we scroll to the right to see what's over on the far end, there's the Delete option.

[Video description begins] He clicks the Cancel button and the page closes. [Video description ends]

So I'm going to press Delete, and now it's gone.

[Video description begins] The Lock1 link is deleted. [Video description ends]

Resource Locking and the CLI

[Video description begins] Topic title: Resource Locking and the CLI. The presenter is Dan Lachance. [Video description ends]

Resource locking can be managed using CLI commands just as well as it can be done using the portal.

[Video description begins] The Microsoft Azure web portal opens. He clicks the Cloud Shell icon and the PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

So I'm going go into the Azure CLI and I'm going to start by using the az -h command because I don't know what the syntax is. So there's a lot of stuff here, the next level commands after az.

[Video description begins] He executes the following command: az -h. The output displays a group and various commands with their description. The prompt does not change. [Video description ends]

I'm going to guess it might be in the Rs for resource lock, but I don't see anything like that. Okay, not that. I'm going to next guess that it's somewhere in the Ls. Here it is, lock, Manage Azure locks.

[Video description begins] He highlights the following text in the output: lock: Manage Azure locks. He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

So therefore, I can do az lock -h to try to figure out how to proceed from here.

[Video description begins] He executes the following command: az lock -h. The output displays the help on the az lock command. The prompt does not change. [Video description ends]

So, to Create a lock, Delete a lock, list locks, and so on. Got it. So, I'm going to run az lock create, and I'm going to create a lock here called Lock2.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

And I'm going to set it at the resource group level. I don't have to, I could set it at the subscription level. I could even set it at an individual resource level. But commonly, you would find it would be done at the resource group level, in this case, Rg1. I'm going to specify --lock-type and I'm going to set it to readonly. So I want to prevent modification, which also includes preventing deletion. So it's called Lock2, this looks good.

[Video description begins] He executes the following command: az lock create --name Lock2 --resource-group Rg1 --lock-type readonly. The output displays the details of the lock created. The prompt does not change. [Video description ends]

Let's check it out in the portal to see what it looks like in Rg1. So let's see.

[Video description begins] He switches back to the Microsoft Azure web portal. [Video description ends]

I'm going to go to my navigator up here on the left and go to the Resource groups view, where we are going to see Rg1.

[Video description begins] A page called "Resource groups" opens. [Video description ends]

I'm just going to go ahead and click to open that up.

[Video description begins] A blade called "Rg1" opens. The blade is divided into two parts: navigation pane and content pane. [Video description ends]

Let's go down and check the locks for it shall we. So scroll down and we're going to take a look at the locks, there it is, Locks. And we can see that Lock2 Read-only has been set here.

[Video description begins] He clicks an option called “Locks” under a section called “Settings” in the navigation pane and its corresponding blade opens in the content pane. It includes a table with four columns and one row. The column headers are Lock name, Lock type, Scope, and Notes. [Video description ends]

And again, it's been set at this level rg1. Now of course, if we scroll over to the far right, we can choose to Edit or Delete it. We could also go up to the Subscription level, where we'll see all the locks in the subscription, even if they weren't tied to the subscription levels.

[Video description begins] He clicks a button called "Subscription" and the corresponding page opens. It includes a table with four columns and one row. The column headers are Lock name, Lock type, Scope, and Notes. [Video description ends]

There it is. And from here, we can also Edit and Delete it at that level. But of course, we can also do that in the CLI.

[Video description begins] He switches back to the PowerShell command prompt window. The following prompt is displayed: /home/danlachance72>. [Video description ends]

Back here in the CLI, for example, we might run az lock list.

[Video description begins] He executes the following command: az lock list. The output displays the list. The prompt does not change. [Video description ends]

And here, we'll see that we do have a lock that's applied it's called Lock2, it's been applied to Rg1, and the locking level has been set to ReadOnly.

Resource Locking and PowerShell

[Video description begins] Topic title: Resource Locking and PowerShell. The presenter is Dan Lachance. [Video description ends]

You can use PowerShell cmdlets to manage resource locking in Azure.

[Video description begins] The PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started here in PowerShell, I'm going to run get command and I'm going to search for any cmdlets that have resourcelock in their name. So I'm going to pad the string resource lock with an asterisk on either end. So as long as it's got resource lock in the name, I want to see the cmdlet.

[Video description begins] He executes the following command: get-command *resourcelock*. The output displays the list of the commands with the word resourcelock in tabular format. It include four column and eight rows. The column headers are CommandType, Name, Version, and Source. The prompt does not change. [Video description ends]

And right away we can see for instance, New-AZResourceLock to create a new lock, or Get-AZResourceLock to retrieve a list of locks through Azure. We even have the option to remove or set a lock.

[Video description begins] He highlights the row entries under the Name column header in the output. [Video description ends]

And if I wanted more details on any one of these, I could run get-help, let's say a new-azresourcelock. I could ask for detail, and maybe pipe it to more to stop after the first screen full of output.

[Video description begins] He executes the following command: get-help new-azresourcelock -detail | more. The output displays the details and syntax of the command. The prompt does not change. [Video description ends]

Here I can see the syntax for this cmdlet, including the parameters, such as -LockId, -LockLevel and so on, even to the point where I'll see an example of how I can actually create a resource lock.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

Let's get started by retrieving resource locks with get-azresourcelock. I'm going to press Enter.

[Video description begins] He executes the following command: get-azresourcelock. The output displays the details related to resource lock. The prompt does not change. [Video description ends]

So it looks like we already have a lock called Lock2 that has been applied to a resource group called Rg1. And the level we can see here has been set as ReadOnly. So what I want to do is remove that lock. In order to do that, I need to get this LockId.

[Video description begins] He highlights the LockId value in the output. [Video description ends]

So in order to do that through variables, I'm going to create a variable called $lock.

[Video description begins] He clears the screen and the prompt does not change. [Video description ends]

So the variable's $lock and it's going to equal the return value of running get-azresourcelock. I'll specify a lock name of lock2 and we know that that applies to a resource group called rg1. But I need the lockid property. Notice I've enclosed that expression within opening and closing parentheses. That's because .lockid will be a property of us retrieving that lock with that statement. Otherwise it'll think we're looking at lockid as being a property of rg1.

[Video description begins] He executes the following command: $lock=get-azresourcelock -lockname lock2 -resourcegroupname rg1.lockid. The output reads: Get-AzResourceLock: LockNotFound : The lock 'lock2' could not be found. The prompt does not change. [Video description ends]

Actually, let's see what that would look like in terms of an error if we didn't have those parenthesis there, what would it look like? Okay, well, we're getting some kind of a message about lock2 could not be found. So it's having a problem finding all of this. However, if I bring up the previous command where we did have our open and close parentheses, it didn't give us any complaints.

[Video description begins] He executes the following command: $lock=(get-azresourcelock -lockname lock2 -resourcegroupname rg1).lockid. No output displayed and the prompt does not change. [Video description ends]

And so if we just run $lock to see what's in the variable, looks like it's got the lockid because that's what we asked for, that's the property that's stored in the variable.

[Video description begins] He executes the following command: $lock. The output reads: /subscriptions/048b82ac-4519-403b-ab05-6b4305502109/resourceGroups/Rg1/providers/Microsoft.Authorization/locks/Lock2. The prompt does not change. [Video description ends]

Then given that we have that it's at this point that we are able to remove that resource locks. We have a lockid. We can do that with remove-azresourcelock -lockid, and we'll just pass it my variable now $lock. And actually if I don't tell them anything, it asks me for confirmation which I'll Ctrl C to that and then I'll clear the screen and bring up that command again, I'm just going to add -force to suppress it asking me and after a moment looks like it's done.

[Video description begins] He executes the following command: remove-azresourcelock -lockid $lock -force. The output reads: True. The prompt does not change. [Video description ends]

We can verify this with get -azresourcelock.

[Video description begins] He executes the following command: get-azresourcelock. No output displayed and the prompt does not change. [Video description ends]

Previously it showed us lock2 for rg1, the resource group but now it shows nothing because it's been successfully removed.

Resource Locking and Templates

[Video description begins] Topic title: Resource Locking and Templates. The presenter is Dan Lachance. [Video description ends]

Not only can you use the CLI PowerShell and the portal to manage resource tags in Azure, but you can also apply tagging from an ARM template. ARM standing for Azure Resource Manager. I've got an example here in WordPad, where essentially what we're looking at here is the type.

[Video description begins] A WordPad file called “Resource_Lock_Azure_ARM_Template.json” opens. It contains the following code, code starts: { “$schema”: "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#", “contentVersion”: “1.0.0.0”, “parameters”: {}, “variables”: {}, “resources”: [ { “type”: “Microsoft.Authorization/locks”, “apiVersion”: “2015-01-01”, “name”: “Rg3Lock”, “properties”: { “level”: “ReadOnly”, “notes”: “my notes” } } ], “outputs”: {} }. Code ends. [Video description ends]

This is Microsoft.Authorization/locks. I've got a name here. So I'm going to create a resource lock here, and I'm going to name it Rg3Lock. The level will be ReadOnly, and we can specify any additional notes.

[Video description begins] He highlights "my notes". [Video description ends]

What we don't see in here is the scope to which the resource lock will be applied. That happens at deployment time when the template is deployed.

[Video description begins] He opens the Microsoft Azure web portal. [Video description ends]

So let's go ahead and see that. Here in the portal, I'm going to click Create a resource because I want to create a template deployment from my template.

[Video description begins] A page called "New" opens. [Video description ends]

So I'm going to search for template, I'll choose Template deployment.

[Video description begins] A blade called "Template deployment (deploy using custom templates)" opens. [Video description ends]

 I'll choose Create, there are a bunch of ways that this could be done, I could have created this template deployment from the CLI or PowerShell.

[Video description begins] He clicks a button called "Create" and a blade called "Custom deployment" opens. [Video description ends]

I've decided I want to do it this way. So I can choose for example, Build your own template in the editor, now we already have it so I can just click Load file.

[Video description begins] He clicks a link called "Build your own template in the editor". A page called "Edit template" opens. [Video description ends]

So I've specified the template file that we looked at a moment ago in WordPad.

[Video description begins] A dialog box called "Open" opens. He selects the file. [Video description ends]

So it's going to create a lock called Rg3Lock. It's going to be ReadOnly. So I'm going to go ahead and Save that.

[Video description begins] He clicks a button called "Save". The Custom deployment blade opens. [Video description ends]

And it automatically pops up into the Custom deployment for that template where we can choose the Resource group where you want that applied.

[Video description begins] He clicks a drop-down list box called "Resource group" and selects an option called "Rg3". He selects a checkbox below a section called “TERMS AND CONDITIONS”. [Video description ends]

Let's say Rg3, and I'm going to have to go down and agree to the terms and conditions and I can click Purchase. So now the template deployment has begun. In other words, the lock to resource group Rg3 is in the midst of being applied. Now once it says it's done, which it just did, we're going to go to the resource group and take a look at the locks. So in the Resource group navigation bar, I'm going to click down on Locks and lo and behold there's our lock Rg3 and it's set as Read-only.


Resource Tagging Overview
In Azure, we know that a resource is something that can be deployed in the cloud, whether it's a SQL database or whether it's a virtual machine, a storage account, a network interface, and so on.

[Video description begins] Azure Resource Tagging. [Video description ends]

Well, we can tag resources and what that really means we're doing is we're adding metadata to them. Now why would you want to do that? You want to add tagging to resources because it allows you to add meaningful additional information to them. Such as related to a department, that that resource might have been deployed by, or a client, that resource should be billed to, or a project it should be billed to, or a cost center.

And you can organize or filter out resources and track them for billing purposes by tags. Wouldn't it be great if we could ask for anything related to project A, in terms of billing, so we can see the costs associated to that project. That's where resource tagging might be used. So it's metadata such as project with the value of XYZ or department, human resources or cost center, YHZ, or state testing as opposed to production. Now the thing about this is that a resource tag is a name and value pair. And you can use it as we know for searching, filtering, to group resources, and for billing purposes.

You can also use policies in Azure to enforce tagging. For example, you could set a policy so that any new resources deployed let's say in a particular resource group will automatically have a cost center tag applied with a specific value. That can be automated. Each resource can have up to a maximum of 50 tags. Now not every single type of Azure resource will support tags, but the vast majority of what you're going to want to do it to, they will support it. The other thing about this is that resource group tags are not inherited. So if you add a tag to a resource group, that does not mean it will automatically flow down and set that tag for all of the resources in the resource group. If you want to do that, look at working with Azure policies that have a modify effect for tagging purposes. You can use the CLI to work with resource tagging.

[Video description begins] Azure Resource Tagging - CLI. [Video description ends]

In our first example, we've got az tag list that's being piped to the line filtering grep tool in UNIX and Linux. And we're asking to display the tagName property.

[Video description begins] The following command is displayed: az tag list | grep "tagName". [Video description ends]

What that will do is give you a list of all of the tags in the entire Azure subscription. You can create a tag with az tag create, here we're naming it DeptID.

[Video description begins] The following command is displayed: az tag create --name DeptID. [Video description ends]

We can also add tag values with az tag add-value.

[Video description begins] The following command is displayed: az tag add-value --name DeptID --value 1234. [Video description ends]

So here we're adding it to DeptID, the value is 1234. You can even apply to a specific resource such as az network vnet update.

[Video description begins] The following command is displayed: az network vnet update -g rg1 -n vnet1 --set tags.DepID=4555. [Video description ends]

So we're applying a tag to a specific VNet in a resource group called rg1. And the name of that is vnet1. And we're using --set tags. and then Dept ID equals in this case the values of 4555. Resource tagging is also possible using PowerShell.

[Video description begins] Azure Resource Tagging - PowerShell. [Video description ends]

In our first example, we're creating a variable called $storaccount. And it's essentially going to point to a storage account. Now we get that by running get-azresource.

[Video description begins] The following command is displayed: $storacct=get-azresource -resourcename storacct3345 -resourcegroupname rg3. [Video description ends]

We specify the name of the resource, in this case, the storage account name and the resource group it's deployed into. So then our variable can be used to refer to that storage account. And in our second example, that's exactly what's being done. We're calling upon our variable. Then we're calling upon .tags and .add, because we want to add the CostCenter tag with the value of YHZ to the storage account.

[Video description begins] The following command is displayed: $storacct.tags.add("CostCenter","YHZ"). [Video description ends]

Then to commit that to the resource to the storage account, we run set-azresource. We use the -tag parameter.

[Video description begins] The following command is displayed: set-azresource -tag $storacct.tags -resourceid $storacct.resourceid -force. [Video description ends]

And in this case, we refer to the $storacct variable .tags property. And we use the -resourceid parameter and give the ID, the resource ID of our storage account variable to write to. And I'm using -force here just to suppress any messages that might pop-up asking you for sure here in PowerShell. The next thing I can do is retrieve resources.

[Video description begins] The following command is displayed: (Get-AzResource -Tag @{"CostCenter"="YHZ"} ).Name. [Video description ends]

Here, I'm using Get-AzResource with the -Tag parameter. And I refer to the tag within curly braces after the @ symbol. So in quotes, I've got CostCenter, it's the name of the tag, equals and then in quotes, I've got the value I'm looking for, YHZ. Now all of that is enclosed within open and close parentheses because if I don't do that, it's going to try to use .Name as a property of YHZ. That's not quite it. We need .Name to be a property of the return result of what executes first within the parentheses, in other words, retrieving the tags. We want to make sure we get the name of the resource. So what that command will really do is it's going to show us the names of all Azure resources in the subscription that have "CostCenter" = "YHZ". So it could potentially be a pretty long listing. In our last example, we can also remove tags.

[Video description begins] The following command is displayed: $storacct.tags.remove("CostCenter"). [Video description ends]

So in this case, we've already got our storage account pointing to in this case to storage account. Doesn't have to be a storage account, could be pretty much any type of resource that supports tagging. But we're calling upon the variable .tags.remove. And in parentheses and double quotes, I'm just giving it the name of the tag I want to remove, in this case CostCenter.


Resource Tagging and the Portal
Tagging resources in Azure is useful because tags are metadata. It's key and value pairs up to 50 that you could add for each individual Azure resource. You might want to tie a resource to a cost center, or a department, or a project, or something like that. Which facilitates searching, grouping, and even looking at things on a per billing basis for specific tags.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

 So I'm going to go ahead here and get started in Azure by going to the All resources view where I'm going to open up an existing resource.

[Video description begins] He clicks an option called "All resources" and the corresponding page opens. [Video description ends]

It doesn't matter which one it is, let's say I scroll down and open up a virtual machine.

[Video description begins] He clicks a resource name called "WinSrv2019-1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

When you click on an Azure resource, in the navigation panel, you'll see Tags. And when you click Tags, you'll see any existing tags or key and value pairs that have been assigned to that resource. And you can make changes to them up to having 50 key and value pairs.

[Video description begins] He clicks an option called “Tags” and its corresponding page opens in the content pane. [Video description ends]

Currently this virtual machine has two. Project : ABC is the first tag and CostCenter with the value of YHZ is the second one. And I can even add a third one here. So for example, I might tie it to a department. So I'm going to put it Department. Now if I've already created that, as I start typing it'll show up.

[Video description begins] He enters Department in a text box under a column name called "Name". [Video description ends]

However, nothing's popping up so this is a brand new tag I'm creating. And I'm going to set the Value to IT.

[Video description begins] He enters IT in a text box under a column name called "Value". [Video description ends]

So we've now got a third tag that we are adding here to this particular resource. Now we can go back and remove any one of these at any point in time. However, I'm going to click Save. So now that we've got those listed, we see the third one has been added at the bottom. If I were to go to another resource, let's close out of this virtual machine. Let's just pick a storage account and let's look at the tags for it.

[Video description begins] He clicks a resource name called "storacct333325" in the All resources page and the corresponding blade opens. [Video description ends]

And when I click on Tags, I'll see whatever it's been tagged with already.

[Video description begins] He clicks the Tags option and its corresponding page opens. [Video description ends]

And bear in mind, Azure administrators can apply policies that can add default tags. So there might be times when you're creating a resource and you don't add tags. And after you check it, after it's been created, there are tags. That's because of a policy. Anyway, here we can see this storage account has CostCenter : YHZ. If I were to type department, we'll notice it already knows it exists. And in the same way, it knows it's already got a value that's been typed in for another resource. And that's fine, we can go ahead and work with that.

[Video description begins] He enters Department under the Name column and IT under the Value column. [Video description ends]

When I click that, it's kind of like a little filter, Now, notice that we've also got a little square icon also over here, and it allows me to show resources with this tag. So let's do it for the first one here, CostCenter : YHZ.

[Video description begins] A page called "Resource with tag CostCenter : YHZ" opens. It includes a table with five columns and several rows. The column headers are Name, Type, Resource group, Location, and Subscription. [Video description ends]

it'll show me resources that have been tagged with that item. So specifically, we can see that all of these items are listed here. And let's just kind of move over a little bit so we can see them all. So they're all listed here as being items that are tagged with that same value. So we can see at the top here, Resources with tag CostCenter : YHZ. Now when you're creating a new resource, for example, let's just get out of here, we're not going to save that. I'm going to click Create a resource.

[Video description begins] He closes the Resource with tag CostCenter : YHZ page. The New page opens. [Video description ends]

Let's say we were going to create a brand new storage account. It could be anything but let's say that's what it was.

[Video description begins] He enters Storage account in the Search box and selects the corresponding option. A blade called "Storage account - blob, file, table, queue" opens. [Video description ends]

Now when you're in the midst of creating a new resource in Azure, during the creation, whether in the GUI or at the command line, you can specify tags.

[Video description begins] He clicks a button called "Create" and a blade called "Create storage account" opens. It includes tabs called "Basics", "Networking", "Advanced", "Tags", and "Review + create". [Video description ends]

We can see the Tags part of the wizard right here.

[Video description begins] He clicks the Tags tab. [Video description ends]

And when you go there, it's going to look familiar, you can put in the name and value, up to 50 of them. Okay, so we can do that as well. Let's go back to our All resources view.

[Video description begins] The All resources page opens. [Video description ends]

Because another aspect of working with tags in the GUI here in the portal, is that you can modify a selection of objects in terms of tagging. What that means is if I were to, let's say, put check marks by a couple of these resources, I can then click the Assign tags button up at the top of the view.

[Video description begins] A blade called "Assign tags" opens. [Video description ends]

Now within here, I'll see each of the selected items listed and I can delete tags and make changes. But I can also add one up here. So for example, if I wanted to, I could put in a tag, let's call it Stage. And for Value I'm going to put in Testing.

[Video description begins] He enters Stage under the Name column header and Testing under the Value column header. [Video description ends]

So it's the testing stage that I'm applying to this and I'm going to go ahead and click Save.

[Video description begins] The blade closes. [Video description ends]

So if I look at any one of these items, let's say this storage account, this second one here that was part of our initial selection.

[Video description begins] A blade called "cs210037ffe9de77ec8" opens. [Video description ends]

We can also see it says it assigned it to three resources. But let's just check this one anyway. If I go to Tags, I'll see whatever was already applied previous to my last action.

[Video description begins] He clicks the Tags options and its corresponding page opens. [Video description ends]

But I will also see that Stage was added with the value of Testing.

Resource Tagging and the CLI

[Video description begins] Topic title: Resource Tagging and the CLI. The presenter is Dan Lachance. [Video description ends]

The CLI can prove very handy when it comes to manipulating tags in an Azure environment. 

[Video description begins] The PowerShell command prompt window opens. The following prompt is displayed: PS /home/danlachance72>. [Video description ends]

To get started here, I'm going to type in az tag list. Now when I do that, it should show me details about all of the tags in this entire subscription, but there's too much metadata here.

[Video description begins] He executes the following command: az tag list. The output displays details of all tags. The prompt does not change. [Video description ends]

All I really want to see are the names of tags. So I'm going to clear the screen, I'm going to use the up arrow key to bring up that previous command.

[Video description begins] He executes the following command: cls. The screen gets cleared and the prompt does not change. [Video description ends]

And I'm going to use --query [ ] because it's an array or list of items. And for each of them, we want to see tagName, where Name has a capital N.

[Video description begins] He executes the following command: az tag list --query [].tagName. The output reads: [ "CostCenter", "ms-resource-usage", "Stage", "Project", "Department" ]. The prompt does not change. [Video description ends]

That's better. So now I can see the names of tags, not the values that have been applied in my entire subscription. I want to add a new one. So I'm going to run az tag create. And I want to create one, --name, called ClientID. We might want to do this if we want to track resources based on clients, for doing projects for clients, for billing purposes, for chargeback to clients.

[Video description begins] He executes the following command: az tag create --name ClientID. The output displays the details of the newly created tag. The prompt does not change. [Video description ends]

So what I've done is created the tag called ClientID.

[Video description begins] He executes the following command: clear. The screen gets cleared and the prompt does not change. [Video description ends]

And we can verify this, of course, if we bring up, using the up arrow key, our az tag list command where we're querying for tagName.

[Video description begins] He executes the following command: az tag list --query [].tagName. The output displays the lists of tags. The prompt does not change. [Video description ends]

There's ClientID shown at the bottom of the list, perfect. Now I want to add a value for the ClientID tag and then we can apply it to a resource. So to add a value, I'm going to run az tag add-value --name, well, the name of the tag is ClientID and --value. I'm going to set it to a value of 1234.

[Video description begins] He executes the following command: az tag add-value --name ClientID --value 1234. The output displays the details of the value added to the tag. The prompt does not change. [Video description ends]

Now I want to apply that to a resource. So to do that, I'm going to use, let's say, az network vnet update. I'm going to apply this to a VNet, a virtual network, that's deployed in a group, -g, called rg1, resource group 1. -n for the name of the VNet, is Vnet1, and --set tags. in this case ClientID. And of course, I could also specify the value here, 1234, that I want to add to that VNet.

[Video description begins] He executes the following command: az network vnet update -g rg1 -n Vnet1 --set tags.ClientID=1234. [Video description ends]

So by adding the value up above, what we're really simply doing is making it available to be assigned to individual resources.

[Video description begins] He opens the Microsoft Azure web portal. A blade called "Vnet1 | Tags" is open. [Video description ends]

And if we flip over here into the portal where I've pulled up the tags for Vnet1, we indeed will see that ClientID with a value of 1234 has been successfully added.


Resource Tagging and PowerShell
You can use PowerShell cmdlets to manage tags in an Azure environment.
So to get started, I want to make sure I get a handle on a specific storage account that I've already created. And I want to store that in a variable that I'm going to call storacct. So we can see here $storacct. And I'm going to tell it I want to run get-azresource-resourcename. Here's the name of the storage account I have. And it's in a resource group called rg1. Now I want to do this because I want to apply tags to that storage account.

[Video description begins] He executes the following command: $storacct=get-azresource -resourcename storacct333325 -resourcegroupname rg1. No output is displayed and the prompt does not change. [Video description ends]

So now let's just run $storacct to make sure we have a handle on that storage account. Looks good and currently we can see the tags for it CostCenter YHZ.

[Video description begins] He executes the following command: $storacct. The output displays the details of the variable storacct. The prompt does not change. [Video description ends]

Now what I want to do is add something new. So I'm going to go ahead in terms tags and run $storacct. We have that variable the points to the $storacct.tags.add. And in parenthesis and I will start double quotes. I want to set the Stage key with the value of Development and I'm going to go ahead and press Enter.

[Video description begins] He executes the following command: $storacct.tags.add("Stage", "Development"). No output is displayed and the prompt does not change. [Video description ends]

Now let's just clear the screen with cls and use the up arrow key to bring up our $storacct variable. Notice that Stage and Development the key and value pair have been added as a tag for that storage account. I can also do other stuff like this.

[Video description begins] He executes the following command: $storacct. The output displays the details of the variable storacct. The prompt does not change. [Video description ends]

So in parenthesis get-azresource -tag. And I'm going to specify here an @ symbol with an open curly brace, and in quotes I'm going to say Stage and = Development put all of the each of these items in quotes. And the next thing I'm going to do is close off my curly bracket and my parentheses and .Name. What does this mean? Well, it means that what I want to do is I want to show the names of any Azure resources that have that listed tag name and value. So "Stage"="Development". When I press enter, we still don't see anything here.

[Video description begins] He executes the following command: (get-azresource -tag @{"Stage"="Development"}).Name. No output is displayed and the prompt does not change. [Video description ends]

Well, that's strange because when we looked at our variable, it returned Stage Development. Well, that's the variable. It's not been committed to Azure yet. So what we need to do is run set-azresource to apply the change -tag, and then $storeacct.tags the tags property. Because we know that the tags property here contains what we just modified plus what was already there to begin with. So, $storeacct.tags -resourceid give it the resource ID that's going to be $storeacct.resourceid. Great working with variables isn't it makes things much easier. I'll just use -force to suppress any questions. And after that's done, it will have committed that change to that resource.

[Video description begins] He executes the following command: set-azresource -tag $storacct.tags -resourceid $storacct.resourceid -force. The output displays the details of the changes made. The prompt does not change. [Video description ends]

So I'm going to clear the screen we're going to use the up arrow key to get-azresource once again. And now we can see our storage account storacct333325.

[Video description begins] He executes the following command: (get-azresource -tag @{"Stage"="Development"}).Name. The output reads: storacct333325. The prompt does not change. [Video description ends]

Indeed is tagged with "Stage"="Development".                    


Azure Monitoring Overview
In order to keep your Azure environment secure and running optimally, you should perform monitoring.
Now in order to monitor something to determine if something is abnormal, you need to know what is normal. And that's where monitoring baselines kick in. Whether it's for determining what normal activity looks like at the network level, for the amount of network transmissions, for example. What is normal when it comes to activity on a host. Such as how much memory is usually used within normal workload conditions, or how busy the CPU is. And that also goes for an application, which could be spread out across multiple virtual machine hosts. Monitoring baselines will vary from one company to another, even from one department within an organization to another. Depending on how technology is being used. So an anomaly from the normal usage could indicate a security incident. It could just be a normal spike in activity. But if we gather enough activity over time, we'll know that that occurs.
So a security baseline then can be used to detect anomalies. And performance baselines can also be used simply to detect that things are busy or that they have slowed down. And in response we might resize virtual machine instances. Or configure autoscaling accordingly to accommodate the increase or decrease in those workloads. So baseline anomalies could show up as busy CPU utilization. Which could be indicative beyond of just a busy workload of cryptocurrency mining, if the machine has been infected, or ransomware. If we have excessive network traffic way beyond normal that could be indicative of a distributed denial of service or a DDoS network attack. Or we might have device operating system changes while the hardware is the same. Now that would mean that we might have a Windows host that is all of a sudden a Linux host, but everything else about it looks the same. So that could be indicative of someone having infected the machine or maybe booted it from a USB drive into a different OS, and so on. The other thing to think about is system and data access outside of regular work hours at irregular times. So there are a lot of different aspects of Azure resources that we might monitor to determine if there's an anomaly of some kind.
Now Azure monitoring gives us a number of options to track this stuff, including centrally. So we can monitor Azure resource activity logs. Now these activity logs are essentially audit logs of management tasks applied to Azure resources. Such as starting and stopping a VM or reconfiguring a VM or a web app. We can also look at the Azure Performance Diagnostics Windows VM extension. If you enable performance diagnostics, then you're getting more details on metrics like CPU utilization and traffic in and out, and disk I/O activity, for monitoring purposes. You can also pin a lot of these items to custom dashboards. So that you can pull up a dashboard and see what's of relevance for you when it comes to monitoring your Azure environment. You can also work with Azure Application Insights if you want to track activity and performance metrics for a specific web app. So that's really what that one is about.
Here on the screen we have a screenshot of monitoring some performance metrics for an individual VM or virtual machine. So we can see the CPU average utilization, the network traffic total, the disk bytes total, the disk operations per second on average. These are important metrics to monitor. However, we can also monitor things centrally instead of doing this and going to an individual Azure resource, in this case a VM.
And that's where Log Analytics workspaces kick in. This is centralized monitoring of Azure log data and also performance metric data. So configuration and log data feeds into Azure Monitor from the Log Analytics workspace. You can also run log queries in the Log Analytics workspace. Or from Azure Monitor, again, because Azure Monitor gets a lot of its data from Log Analytics workspaces. Your alert notifications can be configured in the Log Analytics workspace.
Now, there are a number of data sources that Log Analytics workspaces draw upon. Including storage account logs, Azure activity logs, physical and virtual servers. And you can even link it to your existing System Center Operations Manager or SCOM environment, if you have one. Now by adding servers to the Log Analytics workspace. It means that their performance metrics and log data can be collected centrally in the Log Analytics workspace.


Individual Resource Monitoring
There's a wealth of information available for each and every Azure resource whether you're interested in monitoring the performance of an item or auditing who did what to it from a management perspective or viewing things like operating system log details for VMs. 
All of this is available here in the portal. So I'm going to start in the portal by clicking to open up an existing virtual machine.

[Video description begins] He clicks a virtual machine called "WinSrv2019-1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And the first thing we're going to do is click on the Activity log on the left.

[Video description begins] He clicks an option called "Activity log" in the navigation pane and the corresponding page opens in the content pane. It includes a table with six columns and three rows. The column headers are Operation name, Status, Time, Time Stamp, Subscription, and Event initiated by. [Video description ends]

This is a log that really only relates to the management of this resource in Azure. And so on the right the default Timespan is the Last 6 hours. Let's get more stuff shown here by changing that, let's say, to the Last month and I'll click Apply.

[Video description begins] He clicks a drop-down list box called "Timespan" and selects an option called "Last month". He clicks a button called "Apply". [Video description ends]

Now we'll see that there are quite a few other operations related to the management of this VM. When we filter in that way we can see the name of the operation, whether it succeeded or not, the date and time stamp, the subscription it applies to and the user that initiated it. We can also further filter this. So for example, for Event severity, let's say the only thing I'm really interested in are Critical and Error messages, I'm not interested in seeing Warning or Informational.

[Video description begins] He clicks a drop-down list box called "Event severity". [Video description ends]

So I can unselect those or deselect them and now I've got a really small filtered list. And I can click on any one of these specific activity log entries to get more detail.

[Video description begins] He clicks an Operation name called "VirtualMachines" and the corresponding blade opens. [Video description ends]

Now, we also have other options for monitoring here.

[Video description begins] He closes the blade. [Video description ends]

I'm going to scroll way down in the navigation bar down to the Monitoring section where I'm going to click on Metrics. This is more related to the performance in this case of the VM.

[Video description begins] The corresponding page opens in the content pane. [Video description ends]

So we can select a metric from the drop-down list. For example, I'll just go down in this list and choose Percentage CPU.

[Video description begins] He clicks a drop-down list box called "Metric" and selects an option called "Percentage CPU". [Video description ends]

Now the Percentage CPU item is added here and we can see its value. We can see it's been plotted against the timeline on the bottom, and the percentage going across the top, from the bottom to the top.

[Video description begins] He points to a graph. [Video description ends]

We can also add metrics, you have more than one thing shown at the same time.

[Video description begins] He clicks a button called "Add metric". The options called "Scope", "Metric Namespace", "Metric", and "Aggregation" are displayed. [Video description ends]

So I'm going to go ahead and maybe and add Disk Read Bytes/second. And when you do that it will be plotted.

[Video description begins] He clicks a drop-down list box called "Metric" and selects an option called "Data Disk Read Bytes/Sec (Deprecated)". [Video description ends]

You'll see it might have a value. So we can see the values are being plotted but notice in the legend it's a different color. So this could be very important as well.

[Video description begins] He points to the graph. [Video description ends]

So we can monitor these metrics to track how this is doing. So performing well, do we maybe need to resize the VM, maybe scale it up so it can handle the workload better? That type of thing. We can also go to Logs over on the left.

[Video description begins] He clicks an option called “Logs” and its corresponding page opens in the content pane. [Video description ends]

Now it's not enabled by default, so I'm going to go ahead and click the Enable button. Now when you do that, you're going to have to select the subscription and a Log Analytics workspace that you want this associated with. So I'm okay with the default selection for the Log Analytics workspace. So I'm going to go ahead and click Enable.

[Video description begins] He clicks a button called "Enable" and a message box called "Submiting deployment" is displayed. [Video description ends]

Once that's enabled and you're still in the Logs blade, over on the right you'll see that things have changed.

[Video description begins] A tab called "New Query 1" is displayed. It is divided into two parts: navigation pane and content pane. [Video description ends]

You've got a query builder tab at the top here, it's called New Query 1. So this is a log query and down the left, you have a bunch of table names that you can select from.

[Video description begins] He points to the navigation pane. [Video description ends]

 Now if you expand any of these table names, what you will be exposing are the fields or columns within those tables.

[Video description begins] He expands a table name called "SecurityEvent". [Video description ends]

And you can see the data type is string or whatever it happens to be depending on the nature of what you're looking at. You can actually start selecting items.

[Video description begins] He expands a table name called "AzureActivity". [Video description ends]

So for example, if I double-click on one of these items, such as a column, I could see it puts it in here over on the right.

[Video description begins] He double-clicks a column name called "ActivityStatus (string)". The ActivityStatus column name is displayed in a text box called "Type your query here or click one of the example queries to start" in the content pane. A section called "Get started with sample queries" is also displayed in the content pane. It includes tabs called "History", "Performance and availability", and "3 more". [Video description ends]

But of course you can also select from some example query. So if I go to Performance and availability, I could start scrolling down and saying maybe I want to view Virtual Machine available memory and I could run that.

[Video description begins] He clicks a button called "Run" in a section called "Virtual Machine available memory". A code snippet is displayed. [Video description ends]

It puts in the query statement here, where for example, the name of the table which is case sensitive is Perf. And then I'm piping that to where and I'm asking for TimeGenerated over an hour ago and so on and you can run the query by clicking Run. If there are no results, then you're going to get a message that says there are no results. Otherwise, you'll see some of the details. So this is one thing that we can do here, work with log queries within an individual resource. Let's go up to Diagnostic settings here for this Windows virtual machine.

[Video description begins] He clicks an option called “Diagnostic settings” and its corresponding page opens in the content pane. [Video description ends]

So I've got a storage account selected here for storage.

[Video description begins] He points to a storage account called "storacct333325" in a drop-down list box called "Diagnostics storage account". [Video description ends]

And I'm going to choose Enable guest-level monitoring.

[Video description begins] He clicks a button called "Enable guest-level monitoring". The corresponding page opens in the content pane. It includes tabs called "Overview", "Performance counters", "Logs", "Crash dumps", "Sinks", and "Agent". [Video description ends]

The next thing I can do is determine under Overview, for example, which performance counters I'm interested in gathering. There are some default selections.

[Video description begins] He clicks a link called "Configure performance counters" and the Performance counters tab opens. He points to a table with two columns and six rows. The column headers are Performance counter and Sample rate (seconds). [Video description ends]

I can go to Logs and determine which operating system logs I'm interested in and some details.

[Video description begins] He clicks the Logs tab. [Video description ends]

So for example, I'm interested in the Application log with Critical, Error, Warning types of events, severities. And I could do the same type of thing for the Security and System logs. And I can even ask for additional items like IIS web server logs if there is one available there.

[Video description begins] He selects a checkbox called "IIS logs" and a value called "wad-iis-logfiles" is displayed in a text box called "Storage container name". [Video description ends]

And I can save all of these settings.

[Video description begins] He clicks a button called "Save". [Video description ends]

So when you enable the diagnostic settings, you're really saying I want to start to get more details of the inner workings of the workloads running in those, well, in this case in this VM.
Log Analytics Workspaces

[Video description begins] Topic title: Log Analytics Workspaces. The presenter is Dan Lachance. [Video description ends]

In Azure, a Log Analytics workspace is a resource that you can create and configure in the Azure environment.

[Video description begins] The Microsoft Azure web portal opens. A blade called "All resources" is open. It includes a table with four columns and several rows. The column headers are Name, Type, Resource group, Location, and Subscription. [Video description ends]

To get started here in the portal, I'm going to look at my All resources view. And I'm going to filter it for objects that are Log Analytics workspaces because I already have some here.

[Video description begins] He clicks a drop-down list box called "Type" and deselects an option called "Select all". He further selects an option called "Log Analytics workspace". [Video description ends]

So I'm going to filter for Log Analytics workspaces, click outside of it. Here I can see I've got a couple of them. Now why would you have more than one Log Analytics workspace? Here I've got some for different regions or locations, Canada Central I see under the Location heading and East US.

[Video description begins] He points to the table. [Video description ends]

Well that's one reason, you might want to have your centralized logging through the Log Analytics workspace per region. But you could have multiple Log Analytic workspaces within the same region. Maybe because you have different monitoring requirements for different resources within the same region. So to get started to add a new Log Analytics workspace, I'm going to click the Add button.

[Video description begins] A blade called "New" opens. [Video description ends]

And I'm going to search up log analytic, and there it is.

[Video description begins] He clicks an option called "Log Analytics" and the corresponding blade opens. [Video description ends]

Now I'm going to select Log Analytics and choose Create.

[Video description begins] He clicks a button called "Create" and a blade called "Log Analytics workspace" opens. [Video description ends]

First thing I have to do is create a name for it or specify a name. So I'm going to call it LogAnalytics-2.

[Video description begins] He enters LogAnalytics-2 in a text box called "Log Analytics Workspace". [Video description ends]

I'm going to deploy this into an existing resource group.

[Video description begins] He clicks a drop-down list box called "Resource group" and selects an option called "Rg1". [Video description ends]

Now, up above, it's kind of outlined my name in red, in a red outline, because that name is taken. And so I'm going to put in some characters to make that a unique name and I'll kind of click outside of it. And now the name is unique.

[Video description begins] He enters LogAnalytics-2yhz76 in the Log Analytics Workspace text box. [Video description ends]

So make sure you adhere to your naming standards within your organization when you change some of these names. I'm going to specify the location where I want this specific Log Analytics workspace. So I'm going to choose Canada Central.

[Video description begins] He clicks a drop-down list box called "Location" and selects an option called "Canada Central". [Video description ends]

I'm going leave it with my Pay-as-you-go subscription for the pricing tier and I'm going to choose OK.

[Video description begins] He clicks a button called "OK". The All resources blade opens. [Video description ends]

And now back here in the All resources view, I can see my newly created Log Analytics workspace.

[Video description begins] He points to LogAnalytics-2yhz76 in the table. [Video description ends]

So I'm going to go ahead and click on it to open it up. Because one of the first things that you really should contend with is which data sources are connected. To your newly created Log Analytics workspace.

[Video description begins] He clicks LogAnalytics-2yhz76 under the Name column header and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Because remember, this serves as a centralized performance metric and log data feed. Where's that coming from? Well, we can scroll down and go under Workspace Data Sources. Here we can click Virtual machines and we're going to see all of the virtual machines that we've got deployed.

[Video description begins] The corresponding page opens in the content pane. It includes a table with six columns and several rows. The column headers are Name, Log Analytics Connection, OS, Subscription, Resource group, and Location. [Video description ends]

But I can see here that they are connected to other workspaces.

[Video description begins] He points to the Log Analytics Connection column. [Video description ends]

So I could go in and click on a specific virtual machine and disconnect it from that workspace, and then connect it to this one.

[Video description begins] He clicks a resource name called "WinSrv2019-1" and the corresponding blade opens. [Video description ends]

Now, they may not already be connected to other Log Analytics workspaces if you don't have any already defined.

[Video description begins] He clicks a button called "Disconnect" and a dialog box called "Disconnect" opens. He clicks a button called "Yes" and the dialog box closes. [Video description ends]

That would be one thing that we would do.

[Video description begins] He switches back to the LogAnalytics-2yhz76 | virtual machines blade. [Video description ends]

The other thing is to look at Storage account logs and add storage account logs as well.

[Video description begins] He clicks an option called "Storage account logs" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

And if you go to Azure Activity log, you'll also be able to link a subscription or connect your subscription here into your Log Analytics workspace.

[Video description begins] He clicks an option called "Azure Activity log" in the navigation pane and the corresponding page opens in the content pane. It includes a table with two columns and one row. The column headers are Subscription and Log Analytics Connection. [Video description ends]

So that that type of activity, that would be the management of Azure resources, shows up centrally here in your Log Analytics workspace.

[Video description begins] He clicks a subscription called "Pay-As-You-Go" and the corresponding blade opens. He clicks a button called "Connect". [Video description ends]

Also, if you go in the navigation bar in your workspace to Workspace summary.

[Video description begins] He closes the blade and returns to the LogAnalytics-2yhz76 | Azure Activity log blade. [Video description ends]

Here you can add components such as Network Performance Monitor.

[Video description begins] He clicks an option called "Workspace summary" in the navigation pane and a blade called "Overview" opens. [Video description ends]

So if I were to click Add, I could search in the Azure Marketplace for Network Performance Monitor.

[Video description begins] He clicks a button called "Add" and a blade called "Marketplace" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

And I would add this one, this is from Microsoft.

[Video description begins] He selects an option called "Network Performance Monitor" and the corresponding page opens in the content pane. [Video description ends]

 If I wanted to be able to monitor connectivity, let's say between virtual machine endpoints or different subnets in my environment.


Log Analytics Workspace Data Sources
A Log Analytics workspace in Azure is created automatically.

[Video description begins] The Microsoft Azure web portal opens. The home page is open. It includes a table with three columns and several rows. The column headers are Name, Type, and Last Viewed. [Video description ends]

It is automatically created for the region in which you deploy resources. So notice here in my example, I have two default workspaces, one for the Canada Central region because I've deployed resources there. And also another for Eastern US because I've also deployed resources there.

[Video description begins] He points to the Name column in the table. [Video description ends]

So you can build your own manual Log Analytics workspace or work with the ones that are created automatically. You can think of it as a centralized way as the name implies to analyze logged information. So instead of going to view the log details for each and every Azure resource, instead you can have it collected in one location. So, for example, let's open up one of these default Log Analytics workspaces.

[Video description begins] He clicks a row entry and the corresponding blade open. It is divided into two parts: navigation pane and content pane. [Video description ends]

What's important is determining the data sources attached to the workspace. So, you can see that when you open up the workspace, if you scroll down in the navigation bar on the left. And you go to the Workspace Data Sources section. You can see that we can click on Virtual machines to pull up that blade.

[Video description begins] He clicks an option called "Virtual machines" in the navigation pane and the corresponding page opens in the content pane. It includes a table with six columns and several rows. The column headers are Name, Log Analytics Connection, OS, Subscription, Resource group, and Location. [Video description ends]

This will give me a list of all of my VMs and I'll see which ones are attached to this workspace. As opposed to other workspaces or just not connected to any workspace at all.

[Video description begins] He points to the Log Analytics Connection column. [Video description ends]

So we have a number of them here that are connected. Now you can select and click on an individual, in this case, virtual machine, and either disconnect or connect it at any point in time.

[Video description begins] He clicks a row entry called "AppServer2" under the Name column header and the corresponding blade opens. [Video description ends]

Now Connect is unavailable because this VM AppServer2 is already connected to this Log Analytics workspace. 

[Video description begins] He closes the blade. [Video description ends]

But let's say we went to this other virtual machine which is showing us Not connected to any workspace, well, then I have the option to click Connect.

[Video description begins] He clicks a row entry called "WinSrv2019-2" under the Name column header and the corresponding blade opens. [Video description ends]

So we've got a number of options available from that perspective.

[Video description begins] He closes the blade. [Video description ends]

 And by connecting the virtual machine here, you are allowing yourself to have a centralized place here in the Log Analytics workspace. To view all of the log information for all of these attached items.

[Video description begins] He points to the Name column. [Video description ends]

Now those are just Virtual machines. Other data sources include Storage accounts logs.

[Video description begins] He clicks an option called "Storage accounts logs" in the navigation pane and the corresponding page opens in the content pane. [Video description ends]

So in the same way you can go there and you can click Add if there are none there already added.

[Video description begins] He clicks a button called "Add" and a blade called "Add storage account log" opens. [Video description ends]

And you can specify storage accounts that you want to add to this centralized Log Analytics workspace.

[Video description begins] He clicks an option called "Storage account Please select a storage account" and a blade called "Choose storage account" opens. [Video description ends]

So if I were to select a Storage account, I can then specify the Data Type.

[Video description begins] He selects a storage account called "storacct333325" and the Choose storage account blade closes. [Video description ends]

So what type of stuff is stored in that storage account in terms of logging that you want it connected here.

[Video description begins] He clicks an option called "Data Type Please select a data type" and a blade called "Data Type" opens. [Video description ends]

So maybe, for example, I know I've got some IIS logs stored there.

[Video description begins] He selects an option called "IIS logs" and the Data Type blade closes. [Video description ends]

So I could go ahead and select that and add it here.

[Video description begins] He clicks a button called "OK" and the Add storage account log blade closes. [Video description ends]

You can also take a look at Azure activity logs.

[Video description begins] He clicks an option called "Azure Activity log" in the navigation pane and the corresponding page opens in the content pane. It includes a table with two columns and one row. The column headers are Subscription and Log Analytics Connection. [Video description ends]

Now activity logs are essentially kind of like audit logs that give you information about the management of Azure resources themselves. As opposed to what's happening within them, such as for a virtual machine. And so you can link or connect your subscriptions. 

[Video description begins] He clicks a row entry called "Pay-As-You-Go" under the Subscription column header and the corresponding blade opens. [Video description ends]

So if I go to my subscription, I could choose Connect to connect that here to have that information here as well.

[Video description begins] He closes the blade. [Video description ends]

 So you have a number of different data sources then so that you can centrally collect logged information from your Azure environment.
Log Queries

[Video description begins] Topic title: Log Queries. The presenter is Dan Lachance. [Video description ends]

In Azure, it's important to have the skills to properly create log queries and also to be able to interpret the results for the general overall well being and improved performance, perhaps, of your workloads running in Azure. Now you can work with log queries for an individual resource.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

For example, I can open up an individual virtual machine and in the navigation bar on the left, if I scroll all the way down, under Monitoring, I can then go to Logs.

[Video description begins] He clicks a Virtual machine called "WinSrv2019-1" and the corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Now from here I can start to conduct log queries.

[Video description begins] He clicks an option called "Logs" in the navigation pane and the corresponding page opens in the content pane. It includes a tab called "New Query1". It is divided into two parts: navigation pane and content pane. [Video description ends]

So I can start typing in things where I can refer over on the left here to table names. There's a table, for example, called Event, and if I expand that I can see the fields within it, I can start referring to them.

[Video description begins] He expands a table name called "Event" in the navigation pane. [Video description ends]

So for example, if I want to see everything in the Event table, I can simply say Event and I can continue on and tell it I want to count, or sort, and so on.

[Video description begins] He enters Event in a text box called "Type your query here or click one of the example queries to start". [Video description ends]

But if all I want to do is just take a look at that table, then I could just run that query.

[Video description begins] He clicks a button called "Run" and the result is displayed in the content pane. [Video description ends]

And if there are results, I would see them here. And you also have the option of using a number of Example queries.

[Video description begins] He clicks an option called "Example queries". A new tab called "New Query 2" opens. In the content pane tabs called "History" and "Performance and availability" are displayed. [Video description ends]

If I click that up at the top, so for example, maybe I'll look at Performance and availability and I could scroll through and there are numerous items here.

[Video description begins] He selects the Performance and availabilty tab. [Video description ends]

So such as Virtual Machine free disk space, when I click Run, it puts those query statements in here up above.

[Video description begins] He clicks a button called "Run" in a section called "Virtual Machine free disk space". [Video description ends]

And I can go ahead and run the query. Of course, I can select the Time range.

[Video description begins] He clicks a button called "Run". [Video description ends]

It doesn't have to be the Last 24 hours, maybe the Last 7 days, and that type of thing.

[Video description begins] He clicks a drop-down list box called "Time range" and selects an option called "Last 7 days" and clicks a button called "Run". [Video description ends]

So when you're working with these types of queries, that's what you can do.

[Video description begins] He selects the New Query 1 tab. [Video description ends]

Now, you can also do this from the perspective if I go Home here of a Log Analytics workspace in Azure.

[Video description begins] He clicks a link called "Home" and the Microsoft Azure home page opens. [Video description ends]

So if I open up a specific Log Analytics workspace, then I can go to Logs, and I can pretty much do the same type of thing.

[Video description begins] He clicks a Log Analytics workspace and a corresponding blade opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Now, when you first enable logging in your Azure environment, it might take time before it starts to populate this and you can start to use it.

[Video description begins] He clicks an option called "Logs" and the corresponding page opens in the content pane. It includes a tab called "New Query 1". [Video description ends]

And that's why up here I've got another browser window open, where to learn how to work with log queries, this is very useful. You've got a Demo environment made available by Microsoft.

[Video description begins] He opens a new tab and a page called "Get started with log queries in Azure Monitor" is open. [Video description ends]

Now when you select it, you can sign in using your normal Azure credentials, and then start to work with log queries.

[Video description begins] A web page called "Logs - Microsoft Azure" opens. It includes a tab called "New Query 1". It is divided into two parts: navigation pane and content pane. [Video description ends]

So we could see on the left, we're in the Demo environment where we can see a number of interesting categories. 

[Video description begins] He expands an option called "Security" in the navigation pane. [Video description ends]

For example, if I go under Security, then I'll start to see a number of table names. These are table names. So for example, there's SecurityAlert. If I expand that, I then see the fields or columns if you wish within the SecurityAlert table.

[Video description begins] He expands a table name called "SecurityAlert". [Video description ends]

So interesting. So if I start typing in, watch it, let's put in securityalert, but I'm going to put it in all lowercase letters.

[Video description begins] In the content pane, he enters securityalert in the Type your query here or click one of the example queries to start text box. He clicks the Run button. [Video description ends]

If I try to run this query, I'm going to get a SYNTAX ERROR. And that's because the table names are case sensitive. So if I were to put in SecurityAlert in proper or initial caps and then run it, now we have some results showing up down there. Now when you're constructing these log queries, you can start to type things in, I'm going to put in a space. I'm going to type in a vertical pipe, which is a pipe symbol. I want to take the result of what's on the left and feed it into something on the right such as counting the number of occurrences or ordering them or summarizing them or doing something of that nature. So let's say, for example, that we want to run a search. So I'm going to type in the word search in and then I'm going to specify the name of the table. And we know that the name of the table is going to be case sensitive. So SecurityAlert. It would tell it I'm looking for ssh. And I could even, if I really wanted to, I could pipe it and tell it I want to only take, let's say, 5 entries.

[Video description begins] He enters search in (SecurityAlert) "ssh" | take 5 in the Type your query here or click one of the example queries to start text box. He clicks the Run button. [Video description ends]

And then, of course, what I'm going to do is click Run to run that query. We can see the result of the query is now showing down below. We've got some security alerts for Failed SSH brute force attacks. In your environment, you'll be able to click the Save button to save the query so you can run it in the future. Now, this is not a complicated query that we've got here. It's a one liner, but sometimes it can get quite complex and you're going to want to reuse them as opposed to recreating them every time. You'll find them by going into the Query explorer under Saved Queries.

[Video description begins] He clicks an option called "Query explorer" and the corresponding blade opens. [Video description ends]

You can also go into Azure Monitor. So Azure Monitor up at the top, I'll just click Monitor.

[Video description begins] A blade called "Monitor | Overview" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Monitor is simply a way to bring together a lot of your different log information throughout your entire subscription, for example. So let's say here in Monitor, I were to click on Logs over on the left.

[Video description begins] He clicks an option called "Logs". A blade called "Select a scope" opens. It includes a table with three columns and several rows. The column headers are Scope, Resource type, and Location. [Video description ends]

Or from here I can select a scope. So let's say, I select my Pay-As-You-Go subscription and I click Apply.

[Video description begins] He clicks a button called "Apply" and the blade closes. A blade called "Monitor | Logs" opens. It includes the New Query 1 tab. [Video description ends]

And so now we're in the very familiar interface where we can begin running our queries. We can also navigate different types of tables. And of course we can see the columns so we can start building our queries and working with the results and saving them and getting to them from the Query explorer.
Dashboard Queries

[Video description begins] Topic title: Dashboard Queries. The presenter is Dan Lachance. [Video description ends]

You can run Azure log queries from within specific resources or from a Log Analytics workspace, or even from Azure Monitor.

[Video description begins] The Microsoft Azure web portal opens. [Video description ends]

So I'm going to go into Monitor by searching for that in the portal here in the top search bar and I'll choose Monitor.

[Video description begins] He clicks an option called "Monitor" and a blade called "Monitor | Overview" opens. It is divided into two parts: navigation pane and content pane. [Video description ends]

Azure Monitor brings everything together in one location. So that you can query Logs for items, for example, in the scope of your entire subscription, or it could be a resource group.

[Video description begins] He clicks an option called "Logs" and the corresponding page opens in the content pane. The New Query 1 tab is open in the content pane. [Video description ends]

But at any rate here, I've got a default workspace Log Analytics workspace object selected here.

[Video description begins] He clicks a link called "Select Scope" and the Select a scope blade opens. [Video description ends]

I could choose Select Scope and change that up if I so chose, but I'm going to leave it as it is because what I want to do is just run a basic query here.

[Video description begins] He closes the blade. [Video description ends]

I'm going to look in the Heartbeat table and let's say we run it.

[Video description begins] He enters Heartbeat in the Type your query here or click one of the example queries to start text box. He clicks the Run button. [Video description ends]

Well, there are no results found for the Last 24 hours, but how about we go back 7 days and run that again?

[Video description begins] He clicks the Time range drop-down list box and selects the Last 7 days option. He clicks the Run button. [Video description ends]

Think of a Heartbeat as being a "I am alive" type of message sent by computers in Azure. And we can see down below, we do have some activity related to that, including showing the ComputerIP addresses. Now, we know that we can save log queries, I could click the little Save button here.

[Video description begins] A blade called "Save" opens. [Video description ends]

And I can give this a name and save it as either a Query or a Function.

[Video description begins] He clicks a drop-down list box called "Save as". [Video description ends]

If you save it as a Function, then you could call that from another query using the short name of the function. But at any rate, and then you can specify a Category. Now, that's fine, but we can also pin this to a dashboard.

[Video description begins] He closes the Save blade. [Video description ends]

So I'm going to go ahead and click the Pin to dashboard button here.

[Video description begins] A blade called "Pin to another dashboard" opens. It includes tabs called "Select existing" and "Create new". [Video description ends]

We could choose an existing one or create a new one, I'm going to create a new one.

[Video description begins] He clicks the Create new tab. [Video description ends]

And I'm going to call it Dashboard1.

[Video description begins] He enters Dashboard1 in a text box called "Dashboard name". [Video description ends]

It's going to be for my Pay-As-You-Go subscription and I can specify the Location, let's say Canada Central for this.

[Video description begins] He clicks a drop-down list box called "Location" and selects an option called "Canada Central". [Video description ends]

And then I'm going to choose Apply.

[Video description begins] He clicks a button called "Apply" and the blade closes. The home page of the Microsoft Azure opens. [Video description ends]

Now, here in the portal, you can search for dashboard at any time up in the bar and I'm going to choose Shared dashboards.

[Video description begins] A blade called "Shared dashboard" opens. It includes a table with four columns and one row. The column headers are Name, Go to dashboard, Location, and Subscription. [Video description ends]

And I can see Dashboard1 listed here, so I'm going to click to open that up.

[Video description begins] He clicks a row entry called "Dashboard1" and the corresponding blade opens. [Video description ends]

However, it says No data for the given query. And if I try to refresh the update, still no joy. Now, that's because it's the Past 24 hours by default, so there's no data to show for that. So let's choose the Past 7 days, I'll click Apply.

[Video description begins] He clicks a drop-down list box called "UTC Time" and selects an option called "Past 7 days". [Video description ends]

And after a moment we should see that we have our result for Heartbeat messages sent from computers. Now at this point, it says This dashboard has unpublished changes. We just changed the time range filter. So I'm going to go ahead and choose Publish changes.

Video description begins] He clicks a button called "Publish changes". [Video description ends]

So this way, we can put the types of resultant log query information that's relevant to us at the time on a dashboard for quick access.
