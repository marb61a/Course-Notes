                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 38


Resource Group Budgets
  - In Azure, you create budgets so that you can be notified when a certain percentage of a given value has been reached
    - For example, if you set a budget for $500 per month, you might want to be notified when you get to 80% of that $500.
  - We can go in and take a look to make sure that issues such as leaving virtual machines or databases running by mistake hasn't occurred
    - That's why you have an increase in cost, we can do this at the subscription level.
  - If we were to go into an Azure subscription, we can click on the subscription to open it up, and can click Budgets and manage the budgets from there.
  - But what we're talking about in this particular case is doing same type of thing but at the resource group level.
  - It only applies to charges for resources deployed to a specific resource group
    - In our Resource groups view, we are going to click on a resource group we have called Rg1.
  - In the Overview blade over on the right, we can see any resources currently deployed there
    - In this case, it's only a single storage account
    - However, as we scroll down in the navigation bar for the resource group, we can see Cost analysis, Cost alerts, and Budgets
    - Well, Cost alerts allows me to add an alert which ends up creating a budget
    - We are just going to go here to the Budgets view, we don't have any budgets currently.
  - We are going to go ahead and click the Add button to add a new budget
    - Remember again, the budget is really about sending a numeric threshold value for costs.
  - Then setting up some kind of an alert notification mechanism
    - Rg1 is the current scope and we are not going to change that
    - We could click Add filter, if we want to filter within the resource group by something else.
  - Maybe for example, by ServiceName. Maybe we are only interested in looking at sql database costs within Rg1 and sending alerts for that
    - However, we are going to remove that filter by clicking the little x.
    - Down below, we are going to call this Rg1Budget1All, indicating it's for all costs, not by particular service or anything like that.
  - We are going to leave it on billing month, but you can change the period to be something different
    - Like monthly, maybe you only want to track this and be notified from a quarterly perspective or annual
    - However here we want it done every Billing month
  - We can see the start and ending date for that
    - We'll leave those set as they are, so two years into the future, pretty much
    - We are going to set the BUDGET AMOUNT to 500, so $500 and that will be in the currency specified with my subscription
  - We can see our past five month maximum costs, which can help us sometimes gauge what we should be putting in for my budget amount
    - However, we are going to leave mine at $500 we could go down to the bottom but are going to click Next>.
  - We'll scroll back up here because we can specify the percentage of that budget amount, then we want to trigger an alert
    - Let's say it's 80% of that $500, which works out as we can see here to be $400.
  - We could select an existing Action group, if we have one, we don't, we could create one by going to Manage action group
    - Action groups let you define targets that should receive things like notifications
    - Whether it's through email, or SMS text messages, or push notifications and so on
    - However, we already have the option built-in here when we are creating a budget to send an alert message to a group
    - We are going to specify a group here for my organization
    - They were the ones that will receive a notification when we get to 80% of our budget on a monthly billing basis.
  - Having done that, we are going to go ahead and click on Create
    - It's going to validate my selections, after which it will create the budget.
    - After a moment, we get a notification in the upper right that the Budget was created
    - Here, in the Rg1, navigation panel under the Budgets blade, we can see our budget now exists.
  - At any point in time, we can click on the Name of the budget and open it up 
    - And either edit it to change any of the items within it, such as the Amount, or we can delete the budget.


Azure ARM Template Editor
  - Azure Resource Manager templates, otherwise called ARM, for Azure Resource Manager, allow you to define your resources as code
    - It's often referred to as Infrastructure as Code.
  - You could use a template or a blueprint to specify that you want to create a storage account, a virtual machine,
    - A web application, a public IP address, all of these things together
    - It allows for the automation for the deployment and management of resources
    - In the portal, we can create a template deployment by choosing Create a resource
    - We could type in template, and are going to select Template deployment.
    -A template is technically just a text file that uses json syntax.
    - From this screen, we can select from Common templates that are available here in Azure.
  - To create a Linux virtual machine, Windows virtual machine, a web app, a SQL database
    - You could also, down below, select a GitHub quickstart template from the list
    - Whether you want to start working with things like Azure container services or kubernetes
    - Which is kind of an orchestration platform for containerized applications
    - Or we might go down and choose things like an Azure DNS zone that we want to create
    - It could be any type of resource, a backup vault to be created, content delivery networks, on and on and on
    - Or you could Build your own template in the editor
    - When we do that, it takes me into an editor environment where we have the base skeletal format for the JSON.
  - We can also specify Variables. If you want to allow for template reusability, you shouldn't be hard coding value
    - Things like storage account names or virtual machine names
    - Instead, those should be variables, and you can specify those parameters to pass in values to those variables
    - At this point, we could load an existing file
    - When we choose Load file, it allows us to search for file on-premises, on our local computer that we are doing this from
    - That is a template that we want to bring in here, or we could choose Quickstart template, for example.
  - We are going to go through and select just a very simple template
    - How about we search for storage, and we'll take a look here for storage account
    - What we want to do is basically create a very basic storage account using a template, so that we can at least see the code here
    - We will choose storage-account-create, from the template list, OK.
    - What it's done is populated all of the json syntax here in my ARM template for the creation of a storage account.
  - Notice there are some variables here. A variable is being defined here for the storageAccountName
    - If we click Variables over here on the left and expand it by clicking little triangle, we can see storageAccountName.
  - Of course, when we click it, it takes me to that line
    - We can use this template editor to tweak what we've just essentially imported from a Quickstart template
    - We can make changes, if we know what we are doing
    - Once happy with this, we can actually save it, so click Save, at this point it's saved my changes here in the GUI
    - What we can then do is actually run a deployment from that template.
    - For example, we want to deploy a storage account into Rg1, that's a Resource group.
  - Based on the template definition will determine what you need to specify
    - If pretty much everything is hardwired and there are no variables, then you might not have much to specify at all
    - But here we can specify the Storage Account Type. And the Location will be determined by looking at the Resource group up above
    - And then calling upon its .location property.
  - That's going to be taken care of. Notice what's missing is the name
    - What will the name of the storage account be? 
    - In the template the storage account name is going to be determined by concatenating some text items together
    - Just go back here for a moment in our web browser, and let's step through what we just did to create that template
    - We created a Template deployment, we chose Create, we wanted to use the template editor here in the GUI, and we clicked on Quickstart template
    - Essentially what we searched for here was storage, we want to create a storage account using the template
    - So, storage-account-create, we did OK, if we take a look here at the code within the template
    - When it comes to dealing with the storage account name, it's concatenating the word store, so that's going to be the prefix
    - Then it's going to generate a unique string from the resource group ID. And so, that is how the name will be derived.
    - Okay, let's get back to where we were, Save that and deploy it into Rg1 then go ahead and agree with it and click Purchase.
  - After a moment, our template deployment has succeeded for a storage account
    - We can go to the resource group, that's one way to navigate here
    - In the Overview blade, we'll see any items deployed in this location
    - We might have to click Refresh, a time or two until we see new items
    - Here's our new storage account, it's got store as part of the prefix of the name followed by what looks like some kind of a unique string
      - The same thing would appear, of course, if we were to go to the Storage accounts view
      - Creating a storage account is the same, regardless of how you actually do it, the end result is the same
      - Our storage account is now showing up as having been created from a template that we pulled up in the template editor.


