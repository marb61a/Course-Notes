                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Additional Material Course Notes Part 10


Code Web App Deployment (Cont)
  - Then depending upon what we suspect the workload will be, not only for a specific web app
    - But if you're having multiple web apps linked with the app service plan, that might dictate how much horsepower you need
    - Tt the top, notice we're looking at some Production pricing tiers
    - We also have Dev / Test and also Isolated, we are not going to change that
    - We are just going to close that by clicking the x, leave it as it is and click Next: Monitoring> 
    - We are also not going to Enable Application Insights at this point.
  - If you really want to track the performance of a web app, especially as you're testing it
    - To push it into production, you're going to want to do that, but we can turn that on later
    - If it's not supported for our specific type of configuration, then you'll see that we can't turn it on
    - It says Application Insights is not supported for your current selection here, Runtime Stack, Operating System, and so on
    - If we go back, if we were to make a change to some of the selections, let's go choose a Runtime stack. Let's say ASP.NET V4.7
  - Now let's go to Next: Monitoring > and notice that Application Insights is now available
    - It wants to create a new configuration for Application Insights
    - We can choose to either not do that or do it, choose No at this point
  - Then we are going to click Next for tags, we are not going to add any tagged information so click Next: Review + create >
    - It's going to verify that my selections make sense and that they will work
    - Everything looks good so, go ahead and click Create to build this web application
    - Remember, it's also going to build our app service plan. We'll take a look at both of those in a moment once they're deployed
  - What we're going to do is go back home here and go to All resources
    - Only because I want to make sure that we look at both the app service plan and the web app
    - We are going to deselect all types here, choose App Service and App Service plan.
    - So we can see our app service plan resource and our web app or app service.
  - Start then by going into the app service plan and just poking around for a minute
    - In the Overview blade for the App Service plan, we can see some common metrics like CPU Percentage, Memory Percentage, Data In, Data Out.
    - This is all very relevant stuff to look at to determine the performance level of the apps that are linked to your service plan
    - By the way, if you click on the Apps blade over on the left, you'll see the apps that are part of the service plan.
  - Currently, as we know, there is only one, our web app or our web app service
    - We can also take a look at the scaling up blade, if we decide that maybe we need less horsepower
    - We're paying too much and we don't need the power, or we need more juice to be able to accommodate the web application workload.
    - This is the stuff that we saw when we were creating our web application and service plan
    - And also choose to scale out horizontally so we can configure auto scaling.
  - That's the app service plan, go back to All resources and open up our actual app service or web application
    - In here, we'll get a lot of details much like we did for the app service plan, but it's much more specific to our app.
    - For example, we've got a URL here using the standard default DNS suffix, we've got a Browse button here we can click.
    - This is what the default page looks like based on my selections.
    - Naturally, you would change that, of course, scroll down, we'll see some things that are available such as the Configuration blade.
    - There's a lot of stuff that you can configure here to tweak how your app behaves
  - We've got Connection strings such as for databases, the Default documents that'll be pulled up 
    - For different things such as the homepage You've got Authentication / Authorization options
  - If you choose On here, you can select from quite a wide array of authentication providers such as Azure AD or Facebook, Google, Microsoft account
    - Because by default, it is anonymous access
    - We have a number of items here, Custom domains, TLS/SSL settings
    - We can also see here's where our WebJobs option is, and so on
    - At this point, we have deployed a simple code-based web application.


Docker Web App Deployment
  - Many developers these days deploy applications in containers.
  - A container is a logical isolation boundary in which you will find all of the application components
    - A larger application might consist of multiple containers with different modules or micro services
    - Luckily, we have an easy way to deploy containerized apps here in Azure
    - Whether you want to use a public container image, or you have your own private one that's tweaked to your needs
  - Get started in the portal,click Create a resource
    - And just as if you were creating a regular web app as in not container based, you search up web, you click Web App, you click Create
    - It's during the wizard, during creation, that we'll get to specify that we want a containerized application.
  - When you deploy this into a resource group, in this case, it's, let's say, we want to have a Linux-based VM hosting my containerized app
    - What we need to do is think carefully about the resource group placement.
  - We already have a resource group called Rg1 that already has a Windows-based web app
    - Mixing Windows and Linux when it comes to web apps and Docker containers and so on can cause problems in Azure
    - In other words, you should have a separate resource group to deploy a Linux-based containerized app
    - That's why I'm going to choose Rg7, there's nothing in there
    - Down below we have to specify the web app name, in the example call this dockerwebapptestyhz
    - It's going to use the .azurewebsites.net DNS suffix, we can always change that later with the custom domain
  - Here Code is the default, we don't want that
    - Before we switch it, notice we can select a Runtime stack depending on the language we want to use to write the code for our web app
    - But when you switch to Docker Container, you don't get that
    - You have to put everything in the Docker Container
    - You get to choose whichever language or languages you want to use
    - We can choose whether we want Linux or Windows as the back end VM engine
    - We are going to leave it on Linux, let's say and put it in the main region
  - Down below we've got an App Service Plan, it's going to create the App Service Plan
    - It contains the details about the sizing. We can see here it wants to use Premium V2 P1v2. 210 ACUs, an ACU is an Azure Compute Unit
    - It's a measure of the compute power that's available, that's fine
    - Having done that, click Next to go to Docker, this is where we can specify if we want to have just a single container
    - For a very small app, or maybe testing a single component, or a single microservice, or we could have Docker Compose.
  - Docker Compose is a way to manage multiple related application containers
    - You'll find that larger apps consist of multiple containers
    - In this case, though, we are going to just go back to the simpler Single Container
    - We have to choose where the container image comes from, a container image, is kind of like an operating system image
  - Where it already has an operating system then the files and perhaps some configurations for that OS
    - Maybe even some apps and configurations
    - In the same way, a container image has all the software required to run a given piece of software
    - And maybe any tools and configuration settings available. So we can elect to pull an image from Quickstart
    - We've got a couple of standard basic examples here.
  - This one's based on NGNIX, or you can go to an Azure container registry that you might have created
    - Where you've got your own private customized images, or maybe you want to go out to Docker Hub
    - Docker Hub here lets you store publicly visible images.
    - You can store private ones up there if you have a Docker Hub account.
    - Go to Docker Hub, when we go to Docker Hub, we can search for something.
    - For example we are looking for a WordPress type of website
    - When we search for WordPress I'll have a lot of different container images.
  - Specifically here we've got the WordPress official image
    - We can see the Docker command on a Docker host to pull down that container image locally would be docker pull wordpress
    - So wordpress is the name of that image, that's important because back here in Azure, we need to specify that name here
    - There are thousands upon thousands of container images available on Docker Hub.
  - You can optionally specify a start up command when the container starts
    - But the container does not house an operating system, that's one of the reasons containerized apps fire up so quickly
    - It's because they use the underlying OS already running and in our case that's going to be Linux
  - The validation has passed, go ahead and click Create to deploy our containerized web application, after a moment the deployment is complete
    - Click Go to your resource and let's check it out, we will have created both a web app service as well as an app service plan
    - Let's actually check that out, let's Duplicate this web page in the portal.
  
