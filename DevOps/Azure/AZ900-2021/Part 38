                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 38


Work with Data Lake Datasets (Cont)
  - It's kind of a combination of the C# programming language along with structured query language, or SQL to give it a bit more power
    - The reason it exists is because structured query language under itself is really not designed to handle Big Data
    - Whereas this is designed to work with that through, in this case Azure Data Lake Analytics
    - What we're doing here is when creating a file is creating a tiny dataset
    - We can bring this dataset in from many other ways but for example creating a file here called customerdata.csv
    - This is going to have a CustomerID column, or field definition along with amount
    - We can feed it a couple of sample rows here, Customer1, with a numeric amount of 190, Customer2, with numeric amount of 100.
    - Your U-SQL jobs can be much more complex, and they can actually deal with processing of data.
  - All we are doing here is trying to illustrate a very basic simple example, so you get the sense of the construct
    - The overall skeletal framework that is used to work with Data Lake Analytics and start to process information
    - Once this has been done go ahead and click Submit
    - Before we do that actually, before we submit we can also adjust the performance
    - The AUs because what we are doing here is determining how many things can be processed parallel at once.
  - Depending on the nature of your U-SQL, we'll determine if you need to do this
    - Because this is very simple, we don't need to adjust that, so go ahead and submit this.
    - The job is submitted, it's going to take us to a new dashboard where we can see it's currently in the preparation phase
    - After which it'll be queued for processing, it'll be run, and then we'll be able to examine the result
    - In this case, the result should be that we've got that customer data file with the data in it
    - We can now see that the status of our job is such that it has succeeded.
  - If we go for example to the Data tab here, look at any Outputs, we can see indeed we've got customerdata.csv file
    - Run the Data explorer option here, just to go through our data, and sure enough notice there it is, customerdata.csv, it's in our data lake storage
    - If we're to actually open that up and preview, we can see our two customers along with the amounts that were specified in our U-SQL script


IoT Overview
  - The Internet of Things, otherwise called IoT is really just a general umbrella term that refers to a large variety of devices that communicate over the Internet
    - That relates to Microsoft Azure in the sense that we can register devices with this central location in the Azure Cloud
    - We can receive data from these IoT devices and monitor them through the Azure IoT Hub
  - Things like water pressure valves and gauges and their current settings, baby monitors
    - Smart cars that allow their details about their internal systems and their location to be made available over the Internet in a secured manner
    - Medical equipment that can be controlled through the Internet, as well as home automation features
    - Things like environmental control and turning on lights, and so on
    - This is just but a subset of examples of IoT types of devices that have Internet connectivity
  - The thing to be careful of with this is with consumer grade IoT devices
    - Often, security is just not a priority
    - In many cases, you'll find that firmware might not even be updatable when there are security holes 
    - That are revealed about a specific type of consumer grade IoT product, like a home automation device
    - As with all security hardening in IT, when it comes to IoT devices we should always take care to make sure that default settings
    - Like credentials to access a web interface on the IoT device are changed
  - IoT devices should be placed on an isolated and secured network
    - The reason for this is because if an IoT device is compromised
    - We want to make it as difficult as possible for the attacker to connect to other devices on the network where the IoT device resides
    - By putting it on its own protected network, we're adding that extra layer of security
  - When we work with the Azure IoT services, we have a centralized way to securely receive this information from IoT devices
    - From there, we might even feed that data into things like Azure machine learning
    - To determine if vulnerabilities might exist or if there's suspicious activity related to those IoT devices that needs to be addressed


IoT Central
  - Azure IoT Central is an Azure managed service
    - This means the underlying complexities of setting up the infrastructure to support the IoT central service
    - Whereby we can work with our IoT devices, those complexities are hidden from us so we can focus on actually doing what the service offers
    - Which is to centrally manage IoT devices, so it is a separate Azure resource that we deploy
    - We have a URL that would use the DNS suffix of .azureiotcentral.com for the IoT central website
    - It provides us the ability to centrally manage IoT devices that have been registered through the IoT hub
  - It also allows us to monitor them, and we can even build triggers 
    - That look at some of the data that we're monitoring and can take specific actions
    - Such as the pressure in a valve in a remote planned exceeding a given threshold value that is considered safe and acceptable
  - Notice that the URL uses the DNS suffix as we've mentioned of .azureiotcentral.com
    - This one was created using a template and you can see here the page lists CONTOSO
    - Notice on the left in the navigator we can also explore IoT devices that are registered
    - As we drill deeper into this sample Azure IoT central management portal, we can start exploring devices
  - In the example, we are exploring a refrigerator IoT enabled device
    - Where we can see some telemetry items such as items related to gyroscopes and pressure, and so on
    - Depending on the nature of the IoT device will determine what is seen here
    - Again, we can configure actions that would look at thresholds that might be exceeded
    - In this case, maybe a temperature for a refrigerator getting too low or too high
    - That could trigger the sending of an email to administrators to do something about this


IoT Hub
  - Azure IoT Hub is a separate type of Azure resource that you can deploy much like you might deploy an Azure Virtual Machine
    - Azure Io Central uses an IoT Hub, but the IoT Hub isn't directly manageable in this particular case
    - You might wonder, what does the IoT Hub exactly do? 
    - The purpose of the IoT Hub, as the name implies, hub meaning some kind of a centralized repository where we have IoT devices that are connected
  - From there, we can receive messages from IoT devices
    - So details about the statistics related to what that IoT device does, such as monitoring temperature controls in a building
    - We can also configure it so that we send commands to control those remote IoT devices, such as to adjust the temperature
    - Developers can choose a wide variety of programming languages to do that in
    - Before all of this can happen, IoT devices need to be connected to the IoT Hub.
  - That's done through connection strings that will show up after you've built your IoT Hub resource
    - There's a device registration connection string to initially get a device connected to IoT Hub
    - When you deploy your IoT Hub, one of the things you'll get to deal with is the IoT sizing 
    - Which really deals with the number of messages for throughput that you want your IoT Hub to be able to handle
  - Not only device registration is of interest here, but also device message transmission
    - Either from the device to the IoT Hub or command sent from the IoT Hub to devices to control them
    - What might we use Azure IoT Hub for? Well, because there's a wide variety of IoT devices out there, the uses are many as well.
  - We could use it for medical device tracking, not only to track the device itself and where it is
    - But also, of course, to track all of the detailed statistics provided by that IoT device
    - Which could include things like vital signs of the patient to which that medical device is connected
    - IoT Hubs can also be used to register and track information related to industrial machinery controls
    - Or remote building, heating ventilation, and air conditioning control.
  - IoT devices will make a connection to IoT Hub and transmit data using a number of different protocols
    - Depending on the configuration, one of which is HTTPS over TCP port 443
    - However, we've also got AMQP. This is the Advanced Message Queuing Protocol
    - This is a standard for IoT device transmission of data that uses port 5672
    - And it's designed to work on a number of different platforms not, for example, just Windows.
  - MQTT is the Message Queuing Telemetry Transport
    - This is another type of protocol used by IoT devices that uses TCP port 1883
    - Which one should you use?, AMQP is a mature standardized protocol that provides more potential functionality than MQTT does
    - But it does so at a cost of higher overhead
