                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 46


Azure Policies and Initiatives
  - We can assign policies using a specific scope, which could include a specific resource group
    - If we assign a policy to a resource group, then it applies to child items within that resource group
    - Remember that policies apply not only to the creation of new resources but to existing ones
    - So for example, if we've got a virtual machine type that's been deployed in a resource group 
    - With a policy assigned to it that specifies only another virtual machine size that was allowed, then we'll see this show up as being non-compliant
  - We can also assign policies to a management group. A management group essentially allows us to work with policies across more than one Azure subscription
    - We can also, of course, assign a policy to an entire Azure subscription, and that will flow down through the hierarchy
    - Under the subscription, of course, we would have resource groups under which, we would then have resources themselves
    - This could include the likes of virtual machines, storage accounts, and so on.
  - Bear in mind also that the permissions get inherited by the child objects throughout this hierarchy
    - There are exclusions that are permitted
    - You might specify at the subscription-level that there are only specific Azure regions to which virtual machines of a certain kind can be deployed
    - But you might make an exclusion on a specific resource group
    - Then we have to think about policy effects, where we can deny, for example, the creation of something that doesn't fall into the scope of the policy
  - We can append data, we can deploy only if something doesn't exist
    - We can audit if it doesn't exist. So in the case of deny, for example, as a policy effect
    - Which we specify within the policy document itself
    - What we're talking about doing is notifying or making a note of items that are non-compliant
    - So imagine, if the policy only allows a specific virtual machine size
    - Yet there are existing virtual machines that do not use that same sizing, and so that's a violation of our policy
    - Non-compliant items are then marked as non-compliant, but they wouldn't be deleted


Assign Built-In RBAC Roles
  - The purpose of Role-Based Access Control, or RBAC, in Microsoft Azure is to control permission's assignment to Azure resources
    - In the Azure Portal, we've signed in not as a global administrative type of account, but as a regular user, jgold
    - In this case, we are looking at the virtual machine's view, and despite the fact that we might try to refresh the view, nothing shows up.
  - Now, what is being demonstrated here is that user jgold does not have access in this particular example to virtual machines
    - The same thing could be said about going to the storage accounts view where nothing shows up at all, at least for this particular user, jgold
  - However, in the Azure portal, when we have signed in using an administrative account, in this case, stefan.samms
    - We can see indeed there are virtual machines, and there are storage accounts
    - So one way that you can work with role-based access control is on a per individual resource basis
  - For example, we could go into the Properties of a storage account and could choose access control, IAM, and then we could choose Roles
    - Over here, we can see role definitions related to this particular type of item
    - In this case, the storage accounts, we've got some Backup options, some Monitoring, Reader, and Data Access options etc
  - What we could do is click the Add button to add a role assignment 
    - Where we could chose a role and a specific principle that should have that privilege
    - It doesn't really matter, other than what your needs are
  - We are going to go into a particular virtual machine, let's say East Windows VM1
    - Then go into Access control, IAM and click on Roles
    - What we want to look at is adding a role, so click the Add button and choose Add role assignment
  - From this list, we have roles here that are specific, in this case, to this class of resource, in this case, a virtual machine
    - So whether we want to set as a virtual machine contributor
    - If you click the little informational icon, it will describe what permissions are allowed if you set the user or group as an occupant of this role
  - Here, it says virtual machine contributor lets you manage virtual machines but not access them
    - And not the virtual network or storage account that they might be connected to
    - Well, if that's what we want here, go ahead and select it
    - Then, down below, we can choose from users and groups and we are going to use our HQ_AzureIT group
  - We are making sure that this group is assigned the virtual machine contributor role
    - In this case for a specific virtual machine called eastwindowsvm1, now, user jgold is a member of this group.
    - Go ahead and click Save to save that role assignment and then it says the role assignment succeeded
  - After signing out and signing back in with that same user account
    - Notice that in the virtual machines view, we see that single virtual machine to which the role grants me access
    - In this case, for virtual machine contributor purposes
  - If we go to other views like Storage accounts and so on
    - We don't even see the storage account associated with that virtual machine
    - If we go to things like virtual networks, we also don't see anything
    - This is although, we know that those are also required for a virtual machine to function properly
  - Back inn the Azure Portal as the global administrator account
    - So not the regular user jgold to which we have assigned a role through a group membership
    - Go in to the Resource groups view and pop-into the Properties blade for our resource group, it too has an Access Control, IAM, option
    - Click on that, we can also add a role assignment from here.
  - Except, when you look at the list of roles, it's going to be much longer
    - Because it accounts for the different types of Azure resources
    - Including virtual machines that might be deployed into this resource group
    - By setting these permissions on a resource group, you are then applying this to the resources deployed within the resource group
    - You can see then how role-based access control can facilitate permissions management to Azure resources


Create a Custom RBAC Role Using the CLI
  - In Microsoft WordPad, we've created a custom role file using JSON syntax
    - Where we've got an open curly brace and a closing curly brace
    - Then we've got things like the name of this custom role that we are going to build
    - It's going to be called The Overseer and the IsCustom flag is set to true, because it is a custom RBAC role that we am creating
  - We've got a description here, and importantly, here we've got the Actions
    - What can anyone that might be assigned to this role do? Well, they have access to read all items
    - So */read, to be able to see if it will have read only access to everything within a subscription because down below for the AssignableScope
    - We have set the specific subscription ID for our Azure subscription
  - In the Azure portal if you're wondering how do we find out what our subscription ID is
    - One way is simply to go into your search box at the top
    - We've searched for sub so that we can choose Subscriptions and all our subscriptions will be listed here along with the subscription ID
  - Using the Azure CLI that we've downloaded and installed locally on the on-premises station
    - We've already run the az space login command and we have authenticated to our Azure subscription.
  - The next thing we are going to do is create a role using the az role definition create command
    - So --role-definition, we simply refer to the path and name of the json file that we looked at that defines the role
    - Assignable scope, and the actions that are either allowed or not allowed
    - Go ahead and press Enter to create the role, after a moment, we can see that we've got some returned JSON which indicates that the custom role was created
  - In WordPad, you can even clean it up a little bit so things are on one line instead of wrapped across multiple lines, if it's easier to read this way
    - So we've got our new custom role called The Overseer, that will have been created
    - It's a custom role and as we described earlier, it will provide read-only access to resources within the listed Azure subscription
  - Back in the CLI, we can use the az role definition list command, -- custom-role-only true, so only show custom roles
    - We are going to pipe that to the Windows find command
    - Because all we want to see is the roleName attribute, or lines that display that, notice here we can see our custom role, The Overseer

