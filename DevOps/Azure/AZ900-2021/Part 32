                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 32


Azure SQL Database GUI Deployment
  - Azure SQL database is a managed service, and in the cloud, what this really means is that we have an easy way to quickly provision something
    - In this case, an Azure SQL database, without worrying about the underlying complexities
    - Like virtual machines, and the operating systems, and installing the database software, in this case, Microsoft SQL Server.
    - In the portal, see how this works by starting with clicking on Create a resource in the upper left.
    - In the Databases category, on the right then choose SQL database.
  - The first thing tha needs to be done is tie this to a resource group
    - There is already one, so put it in that resource group, and theb give this a Database name.
  - Start by calling this for example sqldb172, this name needs to be checked for uniqueness
    - Once it is okay, and it's been typed in correctly, and there are no invalid characters, we'll get this little green check mark over on the right.
    - Down below, we can either tie this to an existing SQL server instance hosted in Azure or can click Create new
    - Call this sqlsvr, for SQL Server, 172, again it has to wait for the name to be checked, and it looks good. 
    - Then specify some server admin login info, so user name, and I will confirm the password.
    - Go ahead and click on Select.
  - We're creating a new SQL server instance, which is good, then scroll down and leave it on the default Compute and storage configuration.
    - 10 DTUs, that's database transaction units, and 250 gigabytes
    - Although we could click on Configure database and depending on our workload
    - We could choose the amount of data that we want to be able to accommodate and the database transaction units using these two sliders
    - This is because it's always dependent upon your specific workload.
  - In this case, click Next: Additional settings.
    - We can determine whether I want to have a blank database or use some kind of existing data from a sample data set or a backup
    - Leave it blank by leaving it on None and then click Next.
  - We can tag this, perhaps to tie it to a project or department, but for the example leave that as it is
    - Finally, on the Review page, I can see the estimated cost per month.
    - We need to be careful with this
    - This is one of those types of resources in Azure you make sure you shut down or even delete the moment you no longer need it, so you don't incur charges.
    - Go ahead and click Create.
  - After a moment, we have a message that says our deployment is complete
    - It's created a firewall rule here to allow inbound port 1433 traffic to SQL, then we've got the database and the server
    - Of course, we're going to see all those items here if we go to the All resources view and start to filter the view.
    - Type in sql, here we can see our SQL server deployed in the cloud.
  - We didn't have to worry about all the complexities that would normally be involved with that if we had deployed a SQL server on premises ourselves
    - Click on the SQL server here in Azure to pop up its Properties blade.
    - From within here, for example go to the SQL databases view
    - We can see it is hosting one of our SQL databases, sqldb172, which currently has a status of Online.
    - Then just close out of this.
  - If we go into our SQL database instance, so I'll click on it to pull up its Properties blade
    - Then we have options we can configure, such as Geo-Replication, if we want it replicated to other locations in different Azure regions.
  - When we go further down, we'll see that we have a number of options related to things like security
    - So we've got some Advanced Data Security options available for the database, so vulnerability assessments
    - There is also Dynamic Data Masking to mask some kind of important information, such as the entering of credit card numbers
    - This is configured by configuring what are called masking rules.
  - Go back to the Overview here for our database, we can see the SQL server name
    - This is what you need if you want to make a connection to this, for example, from on-premises
    - At the same time, even from here within the database Properties blade
    - We could click the Set server firewall button and can see the current Client IP address as seen on the Internet.
    - From here, we have the option of making sure that we add a rule that could
    - For example, contain that IP address or other address ranges that we want to allow access from
    - Notice we've got an Add client IP button at the top that fills all that stuff in for me to allow connectivity.


Azure SQL Database CLI Deployment
  - The first thing to do is run az sql --help. This is a great way to get a sense of what the syntax will be as you begin working with this.
    - Notice that you can work with Azure SQL databases as well as servers, and so on.
  - Clear this screen, and I'm going to start by running az sql server create --name
    - Let's say, call it sqlsvr456. And then, I'm going to put that in a --resource-group that I've already got called rg1
    - For --location add the proper location and then --admin-user for the SQL server, specify a value for that.
    - Then --admin-password. Now make sure you have the two dashes in front of these parameters
    - Otherwise you get some kind of an error related to that
    - Go ahead and specify the password here that is to be used for that deployment
    - Go ahead and press Enter to build our Azure SQL Server instance.
    - That that's successfully completed, I'm going to go ahead and build a SQL database tied to that server.
    - So az sql db create, so I've got to deploy this into a resource group
    - --resource-group rg1 in this case and --server and then we've got to tie it to a server in this case, sqlsvr456
    - Call this database using --name, and for example db456.
    - The next consideration is that if you're gotta be using any kind of code or tools on-premises to reach into Azure to work with that SQL database
    - Then you're going to need to have a firewall exception created in Azure
    - Go ahead and deal with that under that assumption. So I'm going to clear the screen with CLS, and I'm going to run az sql server firewall-rule create.
  - We are creating a firewall rule for SQL server, --resource-group rg1, and the server, --server sqlsvr456, and -n
    - For example how about calling the rule AllowInboundSQL? 
    - Then --start-ip-address
    - Because we are behind a NAT firewall, we need to specify the public IP address as known out on the Internet for the connection here to work properly
    - Go ahead and specify that address.
    - After doing that we can then begin to specify the ending IP address
    - In this case, it's going to be the same thing because it's one IP
    - Once verified that that is correct, and it looks correct, I'm going to use --end-ip-address
    - In this case, I'm going to use the exact same thing because it's only one IP we want to allow in, and that's our public IP address
    - We arw going to make sure I don't have any typos here, press Enter to create that, and it looks like it's created
  - Go ahead and check our work in the Azure portal.
    - In the portal in the left-hand navigator, click SQL databases and here's db456 which we can see it's tied to our server.
    - Go take a look at it, it look like it's online and ready to go.
    - Go to All resources, and I'll filter the list of Azure resources with things that start with SQL.
    - There's our SQL server, sqlsvr456, and in the Properties blade
    - Scroll down under the Security section until we see firewalls and virtual networks
    - Notice on the right that we've got our AllowInboundSQL rule for our public IP address.


Azure SQL Database PowerShell Deployment
  - Use PowerShell to deploy an Azure SQL database, in the PowerShell ISE we have this in a script.
    - Commented out the first line, that's what the hashtag or pound symbol means because I've already connected to my Azure account and authenticated it.
  - The first thing we're doing here is building a new Azure SQL server using that cmdlet
    - We are tying it or deploying it into a resource group
    - We are specifying a SQL server name and then specifying the Azure location or region, and then we are specifying -SqlAdministratorCredentials
    - We have got the back tick symbol here that's not just a single quote, it's a back tick
    - That allows us to continue the expression on the next line here in PowerShell.
