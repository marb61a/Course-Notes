                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 2


  - We've also got network virtualization seen here in the bottom right. 
    - A term that comes to mind in line with that is software defined networking, or SDN, which is used extensively in cloud computing. 
    - Software defined networking really means that we provide cloud customers with an easy way to configure virtual network settings and routing tables etc 
    - Rather than have them actually make a connection to the underlying hardware like routers that do that, we provide an easier interface.
    - There is also desktop virtualization, where an entire user desktop might run on a centralized server that actually runs multiple user desktops concurrently. 
  - So the end user then would need a thin client device with not a lot of processing and maybe not even any local storage. They would need network access to the server that hosts the virtual desktops. So there's a lot of types virtualization that can be used, both on-premises and in the cloud.
    - The benefits of virtualization in Microsoft Azure? 
    - One is cloud tenant isolation. By allowing customers to provision their own separate virtual machines and Active Directory instances
    - Those serve sort of as security boundaries so that one tenant can't access virtual machines and Active Directory instances that are deployed by other tenants
  - Virtualization allows for the rapid provisioning of virtual machines
    - Users can simply make a selection in the Azure portal to deploy a Linux or a Windows virtual machine that perhaps has additional software 
    - It happens after just a few clicks or it can also be managed and deployed programmatically at the command line.
  - Rapid and easy provisioning of virtual machines is one of the great things about using cloud computing in Azure. 
    - A lot of the other services that are available in Azure, whether it comes to big data processing and analytics, 
    - Or whether talking about running databases of any type or talking about hosting websites, all of that depends on virtual machines
  - In some cases, some of these are called managed services, which means that we don't actually specify the virtual machine deployment details, 
    - For example when deploying a SQL Server database in the cloud we can just focus on the database side and Azure takes care of the virtualization for us.


Cloud Computing and Economies of Scale
  - The economies of scale work great wonders in the Cloud. 
  - One of the reasons is because all of these pooled resources like storage erase, physical hypervisors that run virtual machines,
    - Network equipment like routers and switches, and even inter-data center network links for Azure, all of these are done on a very large scale. 
    - This is the responsibility of Microsoft in the Azure data centers
  - One of the great things about economies of scale is that things are cheaper in bulk
    - This can be examined from a couple of different perspectives, one being from Microsoft's. 
    - Purchasing a large amount of physical rack mount servers is going to end up being cheaper than buying one or two, especially over time. 
    - If you are a repeat customer, buy equipment from that hardware vendor.
  - At the same time because we've got numerous cloud tenants, in other words Microsoft Azure customers, and this is on a very large scale, it means that Microsoft can afford to charge what they are charging for usage fees, subscription costs in Azure because of the large volumes that they're dealing with with customers. So cloud tenants or customers for Microsoft Azure will pay a monthly subscription cost. And depending on the cloud service, there might be additional usage fees on top of that, such as charging for the amount of time that virtual machines are running.
  - The other consideration is that with an on-premises IT environment, the organization is responsible for all of the upfront costs of setting up the network infrastructure, buying storage arrays and backup systems and servers, and so on. So this is a capital expenditure, otherwise called Capex.
  - Now when we look at cloud computing, all of that stuff that we've just described at the hardware level is not the responsibility of the cloud customer, but rather, the responsibility of the cloud provider, in this case, Microsoft Azure. So that means as a Cloud customer that is using Microsoft Azure services, we have an ongoing operating expenditure on a monthly basis to pay for our usage of Cloud services. And that's called Opex.
  - So with Cloud economies of scale, providers are able to allow Cloud customers to pay small fees for using services that otherwise might not even be possible for smaller organizations on premises.


Public Clouds
  - Public clouds share a lot of the same characteristics that other cloud types do. We'll talk about other cloud types later.
  - With the public cloud, one characteristic is broad access. 
    - In this context, we're talking about having access to cloud services over a network, in this case, the Internet. 
    - Resource pooling means that the underlying hardware infrastructure, so the network configuration, rough routers and switches, and also things like storage arrays, physical storage, hypervisor service that run virtual machines. All of this is pooled together and made available to be provisioned by Microsoft Azure customers.

The rapid elasticity side really reflects how quickly and easy it is to provision these cloud resources such as virtual machines or a new storage account. It can be done in moments, using a variety of different methods. Of course, self-provisioning refers to the fact that the cloud customer is the one that provisions resources. So for instance, if we want to deploy a new Linux virtual machine in Microsoft Azure, we don't need to contact a Microsoft Azure data center IT technician to do that for us. We do it ourselves, and we're going to learn about all the different ways that that can be done.

Metered usage reflects the fact that we are charged based on what we are using in Microsoft Azure. So the more data that you have stored and the more often it's accessed, the more it will cost. The more virtual machines you have deployed in Azure and the longer they're kept running, the more you will be charged.

Public clouds are available to anybody that has access to the Internet. In order to work with Microsoft Azure, you are going to need to create an account. But bear in mind that with the public cloud computing environment, the cloud provider owns the underlying IT infrastructure.

When it comes to cloud resource management, so working with things like Azure Virtual Machines, or web applications running in Azure or databases, those are resources, they can be managed using a web browser interface. That would be the Azure Portal, we're going spend a lot of time there.

We can also use other GUI tools, such as those that are available from Microsoft, like the Storage Explorer tool. It's just another way to reach out to your cloud subscription and work with things like storage accounts. We can use command line tools to manage Azure resources.

We'll be learning about how to use PowerShell cmdlets to do that as well as how to use the Azure CLI. And of course, developers will be interested in hooking into exposed APIs, Application Programming Interfaces, which really just allow developers to work with cloud services at a programmatic level. Even for example, if we've got a component of an application running on premises, you can reach out to the cloud and talk to cloud services programmatically.

With public clouds, the responsibility for the IT configuration and ongoing management could be split between the cloud provider and the cloud customer depending on the specific service being used. So for example, if we deploy a Linux virtual machine manually in the Azure cloud, then we are the ones that are responsible for applying updates to that virtualized Linux operating system. And it's up to us to determine how that virtual machine is configured and what software is installed within it. But at the same time, if we look at the underlying physical hypervisor server that runs virtual machines, that would be the responsibility of Microsoft in Azure data centers to make sure that hardware's kept up and running and kept patched at the firmware level, and so on.

The other thing to bear in mind in Azure is some cloud service offerings. An example of this might be a certain type of virtual machine size that determines the horsepower of that virtual machine. Some of those, as well as other services, might only be available in some Azure geographical regions and not others.

Private Clouds
  - Another type of cloud is a private cloud. It shares the same characteristics as other types of clouds such as public clouds, however, from a different perspective.

One of the cloud characteristics we have to consider is broad access. In the case of a private cloud, we're talking about access to cloud services over a network. But in this case, the network is limited in scope. It's not accessible by all users over the Internet that want to sign up with an account. That's a public cloud. A private cloud instead, uses equipment that is owned by and used by only a private organization.

So the resource pooling really boils down to being the underlying hardware infrastructure owned by the organization. Whether it's on a small scale, such as a very tiny private cloud defined on perhaps a couple of rack mount servers in a small server closet to a larger enterprise that has offices in different countries that has its own data centers. And again with its own private cloud services available.

Yet another characteristic of a cloud is rapid elasticity, which would allow, in this case, only people within the organization to use private cloud services. Self-provisioning means that the users of cloud services can provision or de-provision cloud resources at will. So for example, if you're a department manager within an organization using a private cloud and you decide you need another virtual machine to support business processes used by your department, then you might access some kind of a web portal. Or perhaps there's an automated template that's been prepared to be used in this context to quickly deploy that type of virtual machine.

And finally, metered usage means that all of the usage of private cloud resources are being tracked. They might wonder why is that within a single organization. Well, within a single organization, we might charge how many cloud resources in our private cloud are being consumed by various departments within the company. And then we might track that and on a monthly or quarterly basis, we might charge back the cost of those resources that were consumed back to that department within the organization.

So if I have a cloud then, we'll use virtualization, because that is one of the aspects of cloud computing. But remember that just because virtualization is used on-premises, it doesn't mean that we have a private cloud. So let's say you've got a Microsoft Hyper-V hypervisor on-premises running on a server. And from it you're running a bunch of virtual machines. Or maybe you're using VMware ESXi hosts, and you've got a couple of virtual machines running. Does that mean we have a cloud? No, it does not because if we go back here, we can see that these are the characteristics that must be met in order to say that we have a cloud. It's not just virtualization, which really falls under resource pooling, but also these other characteristics.

So with a private cloud we know now that the organization owns the IT infrastructure and whatever cloud services that the organization has deemed should be available, are available only to that organization. And not to anyone over the Internet that wants to subscribe. From a responsibility standpoint, this means that all of the IT responsibility, starting with determining what kind of hardware we need and acquiring it, and then applying firmware updates and installing operating systems, installing software, getting licenses, configuring software, troubleshooting and updating software. All of that falls under the responsibility of the organization that owns the private cloud. And we talked about departmental chargeback, which falls under the cloud characteristic of metered usage.

Hybrid Clouds

[Video description begins] Topic title: Hybrid Clouds. Your host for this session is Dan Lachance. [Video description ends]

Like public and private cloud computing, a hybrid cloud shares the same types of cloud characteristics, one of which is broad access. In the context of a hybrid cloud, we're really talking about using IT systems or services on-premises and in the cloud or combining cloud types like public and private. So the broad access will vary depending on what type of a hybrid cloud we're talking about. But generally speaking, broad access means allowing access IT services that are available in the cloud, over a network.

The resource pooling aspect means having all of the underlying hardware infrastructure that makes these cloud services available to cloud consumers. Whether that's in the public cloud or the private cloud, whether it's public cloud and on-premises systems, and so on.

The rapid elasticity cloud characteristic means that we can quickly deploy or provision and deprovision cloud resources as we need them and alternatively as we don't need them.

Self-provisioning means that we have the ability to deploy services like virtual machines and databases, whether it's in a private cloud, a public cloud, and in this context with a hybrid, it really could be a combination of both.

The metered usage would apply certainly to public cloud computing, where as a cloud customer, we are charged based on our consumption of public cloud services. In the case of a hybrid cloud which could also involve a private cloud, we might also be charged by the IT department in our organization for the amount of resources that were used by a specific department within the company. Or maybe not even a department, perhaps a specific project team. We want to build costs for our private cloud based on what was used for a particular project.

With a hybrid cloud, we're talking about the use of more than one type of IT computing environment, hence the word hybrid or combination thereof. So the use of public cloud services through Microsoft Azure. The use of private cloud services if we've got an on-premises dedicated cloud. And even perhaps the use of on-premises services that aren't even in a cloud environment. An example of that might be replicating an on-premises SQL database into the Azure cloud to increase availability.

Hybrid clouds are also often used when companies are adopting cloud computing. So where we've got the on-premises migration of either IT systems like websites or servers that we want to move into the cloud, as well as the migration of data that currently might reside on-premises and moving that into the cloud.

Often during the migration, we have what we call a hybrid cloud computing environment because some of our IT systems or services and data are on-premises, some are in the public cloud. And you could run that for an extended period of time, maybe that's your design. Maybe you're using the cloud as an alternative site in case something happens to your on-premises location. Or you might only do with this during migration to the cloud.

So we could have parallel systems running in both locations on-premises and in the cloud, or we might over the long term keep this as a permanent solution. And commonly, this is done with things like on-premises data that gets replicated to the public cloud. That could be in the form of as we discussed a SQL database or we might simply be using Microsoft Azure as an off site backup storage location.

So we could look at things like database replicas that might exist in different parts of our networks such as on-premises, in the public cloud, even in the public cloud in different geographical regions. However, that unto itself would still be public cloud, and therefore not considered a hybrid type of cloud solution.

We've discussed how cloud storage could be considered a hybrid type of solution if we've got cloud data stored on-premises and in the cloud. And as we mentioned, it might be replicated or just periodically backed up for safe keeping.

Community Clouds

[Video description begins] Topic title: Community Clouds. Your host for this session is Dan Lachance. [Video description ends]

Community clouds are an interesting cloud type. Like public clouds, private clouds, and hybrid clouds, community clouds adhere to the standard cloud computing characteristics such as broad access. In this context, we're talking about accessing community cloud services over a network such as the Internet, but it's limited. For example, we might only have certain specific cloud IT services that are geared towards the finance industry, or specific governments in countries, or maybe to the medicinal and hospitalization type of industries.

Resource pooling means putting all of the underlying infrastructure resources together that allow cloud computing services to be available to customers. In this context, if we, for example, need to adhere to certain US government standards, there might be certain hardware security modules that deal with the cryptographic key storage that are used in terms of underlying resources that are required for compliance in order for specific government agencies to even use cloud computing in the first place.

Rapid elasticity means the same thing in the community cloud as it would, for instance, with the public cloud. It means that we have the ability as a cloud customer to quickly provision or deprovision cloud services as we need them. And the self-provisioning would be the same, whereby we might have a web interface through which we provision these community cloud services. And it might also be available at the command-line level and programmatically through exposed APIs from the cloud provider.

Metered usage would apply the same in that we are charged for our use of community cloud service offerings based on a certain fee. And that fee might be, for example, virtual machines that are running on an hourly basis. Or it could be the amount of storage that we're using and how often we put data into storage in the cloud and read data from that storage in the cloud.

Community clouds have limited access. For example, Microsoft Azure has specific government cloud options that are supported for the US government, and also, for example, for specific countries like Germany. It can also be used for specific industries that need certain regulatory compliance in place, such as the medical industry.

Community clouds are really for groups that have the same IT computing requirements and often that deals with laws and regulations related to data privacy. It can also deal with things like the physical location of data. In other words, where are the Azure data centers that will be housing this information and running these cloud-based systems?

We could also require specific security controls be put in place, as we mentioned earlier. HSM or hardware security module types of devices are used to store cryptographic keys for safekeeping. And that might be required by laws or regulations to be used in conjunction with IT services in the cloud.

There might also be industry-specific cloud software that needs to be used. For example, maybe only certain approved software can be used by US government agencies in the cloud.

Azure IaaS

[Video description begins] Topic title: Azure IaaS. Your host for this session is Dan Lachance. [Video description ends]

Infrastructure as a Service is a type of cloud service model. It's a term that's often simply referred to as IaaS and it really applies to IT administrators that want to deploy some kind of infrastructure components in a cloud computing environment. And that is certainly something that we can do with Microsoft Azure.

Examples of Microsoft Azure Infrastructure as a Service items include things like storage, so building a storage account in Azure. Deploying Linux or Windows Virtual machines in the Azure cloud. Or configuring virtual network items like, VNets and subnets into which we can then deploy things like virtual machines and Azure. Load balancers so that we can take incoming client requests for an application and distribute it among a number of backend hosts that support that application.

We can configure IP addresses. For instance, we might want to make sure that we have a public IP address assigned to an Azure IaaS virtual machine, so that we can reach into it from outside of the cloud, over the Internet. So maybe we want to be able to manage a Linux virtual machine from our on-premises environment through an SSH connection. We can also configure route tables to control traffic flow in the cloud. All of these are examples of Infrastructure as a Service type of items available in Azure.

With Azure Infrastructure as a Service, we have to think about who is responsible for these components. Whether it be Microsoft at the Azure data center side or whether it's us as a cloud customer. [Video description begins] IaaS can be a shared responsibility. [Video description ends] So Microsoft Azure, the cloud provider is going to be responsible for things like the physical hypervisor servers on which our virtual machine guests run. Microsoft is also responsible for the underlying network hardware, the routers, and the switches, and the network connections, as well as physical storage being made available.

As cloud customers, what are we responsible for? Well, it's up to us to deploy Linux or Windows virtual machines, [Video description begins] A virtual machine is also known as a VM. [Video description ends]to configure virtual networks in the Azure cloud appropriately, with the correct IP address ranges for subnets in the VNets, [Video description begins] A virtual network is also known as a VNet. [Video description ends] into which we would deploy things like virtual machines. It's also up to us to determine how we want to provision our cloud storage. So how many cloud storage accounts we want to build in Azure? How their properties are configured? And also whether data is encrypted, whether it's replicated across regions, and so on. That becomes our responsibility as customers.

We can manage Azure Infrastructure as a Service items that we've discussed, like virtual machines and storage accounts, using the Azure portal. That's something we're going to take a look at, it's essentially the web graphical user interface to manage Azure resources. We can use the Azure CLI, we can use Azure PowerShell cmdlets. And for developers, the Azure REST API can be used to communicate with APIs that are exposed for all Azure services.

Azure PaaS

[Video description begins] Topic title: Azure PaaS. Your host for this session is Dan Lachance. [Video description ends]

Azure Platform as a Service, otherwise called PaaS, applies to IT administrators and developers. These are the types of IT people that would be interested in Platform as a Service offerings.

Now let's find out why that is because there are many examples of Platform as a Service in Azure, the first of which is Azure Active Directory, otherwise called AAD. Normally, we might have an on-premises Active Directory domain controller that has a replica of the Active Directory domain database. That would contain things like user accounts, computers, for those computers joined to the domain, groups, and so on.

Well, instead of provisioning a virtual machine and installing the Active Directory services role and all of that manual work, we can simply deploy a new instance of Azure Active Directory very quickly in the Azure Cloud. We don't have to worry about the underlying virtual machines, because if we were manually deploying virtual machines, it wouldn't be Platform as a Service. It would be Infrastructure as a Service.

Other examples of Platform as a Service include deploying Azure SQL databases in the Azure Cloud. Deploying the Azure Search solution or the Azure Content Delivery Network or CDN, which is used to place content geographically nearest users that will be requesting it to speed up the experience. So these are all examples of things that we could deploy very quickly without having to manually deploy the underlying virtual machines that would support these services. So in other words, these are examples also of managed services.

With Platform as a Service in Azure, there is shared responsibility where the cloud provider, Microsoft, is responsible for the underlying servers that will run things like Active Directory and Microsoft SQL Server. But we as the cloud customers have a different type of responsibility. We would be responsible, for instance, for the contents that would be stored within Azure Active Directory, such as user accounts that we might create for authentication and groups and the privileges they have through role-based access control. We would be responsible for that.

Also, if we were deploying Azure SQL databases, we would be responsible for the specific configuration of how that works and whether we've got replicas. And also, of course, the data that's stored within those Azure SQL databases.

Like pretty much everything in Azure, Platform as a Service offerings can be accessed in a number of ways when it comes to deploying, configuring, and just ongoing management. We can use the Azure Portal, the web GUI. We can use Azure CLI commands. We can use Azure PowerShell cmdlets to talk to Platform as a Service offerings. And of course, at the development level, developers can talk to Platform as a Service items such as Azure SQL databases through exposed APIs, and they can do that using the REST API.

Azure SaaS

[Video description begins] Topic title: Azure SaaS. Your host for this session is Dan Lachance. [Video description ends]

Software as a Service, otherwise called SaaS, is one of those cloud service models that applies primarily to end users.

What does that mean using the word primarily? What it really means, is that end users benefit from the use of Software as a Service, such as office productivity tools that are cloud based. However, IT technicians are still responsible for making configuration changes or applying security settings that will influence how end users use those solutions.

So examples of Software as a Service would include cloud-based solutions related to things like email, or calendaring, office productivity tool such as Office 365, which can also include things like SharePoint Online.

With Software as a Service, the shared responsibility is split between the cloud provider and the cloud consumer. So the cloud provider is responsible for all of the underlying hardware to make those services available. So the underlying servers that might run Microsoft Exchange Mail Server software, so it's available for cloud-based mail, and office productivity software.

But we as the cloud customer, we're SaaS end users, Software as a Service, we're responsible for configuring the behavior of those solutions, including some security settings, whatever is available with the specific solution we're talking about, and also the data that results from it. So we would be responsible, for example, for how data is treated or backed up, archived, or replicated that we might be working with, in SharePoint Online, for example.

So we can manage Software as a Service settings using a web browser, for example, using the Office 365 web portal to provision users or control what they can access. We can also use command line tools to do the same things. For instance, we might use PowerShell cmdlets to authenticate to Azure Active Directory which is used by Office 365. We might also use separate PowerShell cmdlets to make a connection to SharePoint Online, so we begin managing that aspect of the Office 365.

On-Premises vs. Cloud

[Video description begins] Topic title: On-Premises vs. Cloud. Your host for this session is Dan Lachance. [Video description ends]

Years ago, when cloud computing was a newer thing, there were a lot of comparisons made as to how we could use cloud computing or on-premises IT solutions, one or the other, not both together. But the reality is we can use a hybrid of both. It doesn't necessarily have to be just black and white.

So let's talk about on-premises IT computing versus cloud computing. And we'll start from the context of hardware. With on-premises IT systems, we as the private organization are entirely responsible for selecting, then acquiring and waiting for hardware to be shipped. Including things like racks for server rooms or data centers, rack-mount servers, UPS battery systems, storage appliances, firewall appliances, routers, switches, the list goes on and on. In the cloud, that's the provider's problem, not us as a cloud consumer.

The same goes for the configuration of that hardware, the ongoing management, firmware updates that need to be applied perhaps over time, and the eventual decommissioning of it and finding replacement hardware. On-premises that would fall entirely on the organization, but in the cloud, that responsibility falls on the cloud provider.

If we look at the same type of thing but from a software perspective, on-premises, private organization is responsible. The selection, the acquisition and the licensing of whatever software solutions are needed to meet business needs. Now in the cloud, the acquisition part isn't a big deal because the cloud provider will have something available such as Office 365 and its variety of options. However, licensing is an interesting topic, because if we've already purchased licenses, let's say for the Windows Server operating system or maybe for Microsoft SQL Server and we're running all that on-premises, when we migrate to the cloud some Azure Cloud offerings will allow us to bring our own license, BYOL. So we can reuse our investment in licenses and not have to pay for it all over again, just because we're migrating to the cloud.

The configuration of software, the ongoing management, the application of updates, and the eventual decommissioning of software, all of this is our responsibility if we are doing all of this on-premises. However, in the cloud, depending on the specific cloud service model you're talking about, most or all of this could be the cloud provider's responsibility. The reason I say it may or may not be the cloud provider's responsibility is, imagine that you're deploying software in the form of a Linux virtual machine in Azure. So you're manually deploying that. That's Infrastructure as a Service. You as the cloud customer, then, are responsible for updating that operating system and installing software in that virtual machine and updating it as well. So it really depends on the specific cloud service model that you're talking about when it comes to software and who is responsible for what.

The next thing to consider is that if we've got a physical disaster, when we have an on-premises environment, it might be beneficial to use the cloud as an alternate site. Now that means that we could have IT systems that run on-premises. So web applications, database servers and so on, that could be duplicated and left running in the cloud. And depending on our requirements, we might even have continuous data replication to the cloud, so in the event of a physical disaster, everything is ready to go in the cloud.

The other thing to consider is the responsibilities, as we mentioned. On-premises really means that the private organization is pretty much responsible for everything. In the cloud, generally speaking, the cloud provider is responsible for a lot of the infrastructure, certainly when it comes to hardware.

We also have to think about the cost. We want to make sure that we dispel the myth that cloud computing is always cheaper than the alternative, which would be to host everything yourself on-premises. That's not always the case necessarily. It's not as simple as that. We have to consider the fact, though, that we've got capital expenditures when it comes to purchasing and paying upfront for all of this hardware that we're running on-premises. We don't have that Capex or that capital expenditure, when it comes to exclusively using cloud computing. In that case, we've got an operating expense over time with a monthly subscription and usage payment. So that's Opex, or operating expenditures. [Video description begins] With the cost of cloud computing, Capex vs Opex needs to be considered. [Video description ends]

And in the cloud, we can also configure billing alert so that we can be notified when a certain cost threshold is exceeded. So that we can go take a look and perhaps realize that we left databases running in the cloud for a test environment when we're actually finished with them. And remember, when you leave things running in the cloud, you're still paying for them, so very important to watch that. And we'll focus on that in more detail later when we talk about cost management.

Cloud Migration

[Video description begins] Topic title: Cloud Migration. Your host for this session is Dan Lachance. [Video description ends]

Cloud migration deals with migrating on-premises IT environments into the Azure cloud. Things like specific IT systems, such as servers, or even specific IT workloads running on a server. So imagine that you've got an on-premises file server, that's also doubling as a database server. And so you might choose the database workload as something you might migrate into the Azure cloud, while leaving the file server on-premises.

We can also migrate data that's currently housed on-premises into the cloud as long as it meets specific security requirements that might be applicable based on the industry we're in or the government agency that we might doing this for.

We have to also consider the suitability of on-premises IT solutions for migration into the Azure cloud. We need to make sure that we can map existing on-premises services to an equivalent solution in the cloud. Now in some cases you might simply be able to take what you're running on-premises and move it essentially into the cloud. Or, in other cases you might have to find a functional equivalent that is already made available through Azure service offerings. Then you need to consider security standards, such as whether or not you need to encrypt data at rest, such as data stored in a storage account in the Azure cloud.

With cloud migration, an important term to be aware of is lift and shift migration. What this means is we're taking an existing IT solution, and we're migrating it to the cloud without changing it. [Video description begins] The IT solution is migrated to the cloud without any changes made to the source. [Video description ends] So an example of this might be migrating a physical or a virtual server that we currently have running on-premises and migrating it to Azure. So really, we're changing the hosting environment in which that virtual machine or maybe we're converting a physical to a virtual. We're changing the hosting environment, but the operating system and its configuration remains exactly as it was on-premises, unchanged.

The Azure Migrate Service is an offering that can help with such types of migrations. It allows us to evaluate the migration suitability for things like virtual machines that we currently have running on-premises, and the workloads that they support. [Video description begins] Virtual Machines are also known as VMs. [Video description ends]

It can also take a look at IT system dependencies. For instance, you might have a front end web application that depends on a back end data base running in a different virtual machine. So that kind of system dependency would be caught by the Azure Migrate Service, because you don't want to be in a situation where you're only migrating one part of the solution to the cloud, only to realize it then doesn't work in the cloud.

The Azure Migrate Service can also provide cost estimations as to what you might be looking at for monthly charges on a recurrent basis after you've migrated specific workloads to the cloud.

So the Azure Migration Service Process begins with creating what's called a project. It then requires running an on-premises collector virtual machine. And this is designed to run in a VMware vCenter type of environment. Now that collector virtual machine will then gather data from on-premises and that gets sent to the Azure project.

Next, that discovered data is organized into specific groups. And this discovered data really comes from on-premises virtual machines that we're considering migrating to the Azure cloud. [Video description begins] The groups consist of the VMs that were discovered. [Video description ends]

Finally, the last step of working with the Azure Migration Service Process is to assess the results, to determine in fact if it is a migration that will take place. [Video description begins] The assessment needs to be viewed or downloaded. [Video description ends]

Exercise: Cloud Solutions and Business Objectives

[Video description begins] Topic title: Exercise: Cloud Solutions and Business Objectives. Your host for this session is Dan Lachance. [Video description ends]

In this exercise, the first thing you will do is list cloud computing characteristics, followed by defining the correlation between cloud computing and virtualization. What is the relationship? Next, you're going to explain the difference between public and private clouds. And finally, you'll provide examples of when to use hybrid cloud solutions.

At this point, pause the video, think about these four items, and then come back to view the solutions.


Cloud computing encompasses a number of defining characteristics including broad access. This means that cloud computing IT services are made available over a network, such as the Internet as in the case of a public cloud, or even an intranet, an internal network in the case of a private cloud. Resource pooling means the cloud provider is pooling together all of the underlying hardware infrastructure that makes all of these cloud computing services available. Things like hypervisor servers, things like physical storage arrays, routers, and switches.

Rapid elasticity is another cloud characteristic which really means that using, more often than not, a self-provisioning portal or commands that cloud consumers can rapidly deploy or provision cloud resources as needed. In the same way, they can rapidly deprovision them when they're no longer needed to save on costs. In the cloud, another characteristic is metered usage, which means that our usage of cloud services is tracked and we pay for what we use.

A private cloud means that the organization owns the IT infrastructure and that those cloud services running on that IT infrastructure are available to that organization. It's a private cloud. However, a public cloud means that the cloud provider owns the IT infrastructure and the public cloud provider services are available to anybody over the Internet that wants to sign up. [Video description begins] These are the differences between a private and a public cloud. [Video description ends] With either type of cloud, the same cloud characteristics such as broad access, resource pooling, rapid elasticity, and so on would apply.

There is definitely a relationship between virtualization and cloud computing. And that relationship is such that cloud computing depends on virtualization. However, if you're using virtualization, such as running a hypervisor on-premises, that itself does not mean that you've got a cloud. You have to really meet the cloud characteristics, which would include the items that we discussed, like broad access over a network, resource pooling, metered usage, self-provisioning, and so on.

With hybrid cloud computing, we are combining a couple of cloud computing and IT system models, such as combining a public and a private cloud, or public cloud computing along with on-premises systems that talk to the public cloud.

Common uses for this would be when we are migrating on-premises systems and data to the cloud. So therefore, the hybrid solution could be only temporary in that type of a case. Or it could be more permanent where we are depending on the cloud as an alternate location to run our IT systems and perhaps replicate data to. So we would do it perhaps for reasons of high availability, which would be perhaps for the longer term.


Azure Data Centers

[Video description begins] Topic title: Azure Data Centers. Your host for this session is Dan Lachance. [Video description ends]

Microsoft Azure data centers are the physical side of Microsoft Azure cloud computing. A couple of terms come to mind when talking about data centers, as we see here. Physical facilities is one of them. A data center is a physical facility, often a very large building or a collection of buildings that house computing equipment. In this case, for potentially thousands of different cloud customers.

Now, in the case of Microsoft Azure, these physical facilities, or data centers, exist currently in 140 countries around the globe. Although that will be changing over time. Then physical security becomes an important aspect of it, due to the fact that we do have a centralized location physically, that houses a lot of potentially sensitive data for many different customers. So as a result, you'd be hard-pressed to get a specific address for a Microsoft Azure data center, as the actual physical locations are not disclosed.

One data center component to consider, much like you would if you had a data center owned by a single large organization or even a server room within a building, is HVAC. Heating and ventilation and air conditioning. Within a data center, on a large scale, it's absolutely crucial that we've got pathways for air to travel. So that we can take warm air exhaust and feed it away from equipment, often out of the facility, and then, of course, have cool air fed into the facility from the outside and maybe through air-conditioning units that are filtered to equipment intake fans.

The next thing that we should consider is the number of equipment racks that would exist within a data center. It's often a very large number because pretty much everything these days, every physical computing device, is an appliance that can be rack mounted. Whether it's a hypervisor server that's used to host virtual machines running in the Azure cloud environment. Whether it's storage arrays that Azure customers enjoy when it comes to provisioning cloud storage. Whether it's physical routers and switches to provide network connectivity. UPSs, UPSs, uninterruptible power supplies, are used for short-term battery power for a device to shut down gracefully when it detects that the AC power from the power grid is no longer there. For longer-term power supplies, we looked at things like power generators that might run, for instance, off of diesel fuel.

At the physical security level, we have to consider things like fencing around the perimeter of an Azure data center. Along with both interior and exterior alarm systems, often in the form of motion detection sensors. And then, of course, physical guards on premises to check badges. Mantrap doors work in such a way that after access to an outer door is granted and the door opens there's an area within the door that the person must wait before they can enter a second inner door. The outer door has to close first. And often these doors are locked, of course. And they are controlled, or access is granted, through a proximity card. And all entry and exit points in the facility are logged centrally.

Microsoft performs thorough background checks on all employees. Especially those that work in Microsoft Azure data centers. Within the data center, specific rooms that might contain a specific type of equipment, such as storage arrays, might be in a locked area that requires additional access beyond just gaining access to the facility itself. In the same way, we can also have locked equipment racks so that in order to gain access physically to a device, whether it is a rack-mount server or a router or a storage array, access must be granted to the rack itself. We have to physically be able to open the rack before we can even get our hands on the equipment.

So all of these things together provide a secure physical environment for an Azure data center.

Azure Regions

[Video description begins] Topic title: Azure Regions. Your host for this session is Dan Lachance. [Video description ends]

Microsoft Azure regions are an important concept to understand. Whether you're managing Azure at the command line, or whether you're doing it using GUI tools like the Azure portal. And in some cases you'll see references to, not an Azure region, but rather a location. Either way, it's the same thing.

An Azure region is geographical in nature. We are talking about a physical region whereby Azure resources can be deployed. And when you actually deploy new resources like a virtual machine, let's say, in Azure, you need to specify the location or region. Currently, Azure has a presence within 140 countries, and that is organized into 54 regions. But bear in mind that while these numbers are current, they're always changing. Microsoft is always looking at expanding Azure with more regions in additional countries.

Microsoft Azure also supports some special Azure government cloud options, and those specific regions are not disclosed anywhere. Unlike standard Azure cloud regions like East US and Canada Central, are made available.

Pictured on the screen, we get a sense of what an Azure region really is. We can also see a bit of a hierarchy. So you can think here of a region as being interconnected over the Internet by the wide area network link. So on the left, we've got Region 1. Let's say that's East US. Then we've got Region 2. Now, Region 1 and Region 2 are my labels. In Azure, they would actually be named East US and, in this case, Region 2 is Central India. So they can be very far apart from one another. And you can deploy Azure resources into disparate regions like this. And you might do that for availability in case there is some kind of a regional disaster. Although in this case we're talking about pretty much opposite sides of the planet, so it's an extreme example.

What we see within each region is a set of data centers, and we'll talk about availability zones shortly. But essentially we've got very high speed network links within a region compared to between regions.

Availability zones, or otherwise called AZs, exist within a Microsoft Azure region. And often, you'll find that most regions have three availability zones, although in some cases, you won't see that. This means that we've got one or more data centers. So what we're really saying is that there is not a one-to-one correlation between an Azure availability zone mapping to one data center. It's not always that simple. You could have an availability zone that consists of, let's say, three data centers.

Then we have to think about Azure Service Availability and how it relates to regions. The first thing we have to bear in mind is Azure Services, so the cloud stuff that we as customers want to use, varies. It varies in its availability from one region to the next. So as an example, if we want to use the Azure search feature, when we configure that and deploy it, we won't be able to specify a location or region of Canada East, at least not currently. And again this is always in flux. Another example would be the deployment of G-Series VMs, virtual machines, high-end virtual machines. This specific series or type of VM is not available in Central US.

Now G-Series virtual machines might be important to you if you need to accommodate very large database workloads and you need as much CPU, memory, and processing power that you can get. So in some cases this could be very important, but we do need to understand that when we go to manage and deploy resources, they will vary in their availability, in some cases from one region to another.

Azure Availability Zones

[Video description begins] Topic title: Azure Availability Zones. Your host for this session is Dan Lachance. [Video description ends]

If we had to sum up Azure Availability Zones in one word, we would simply use the word availability.

Pictured on the screen, we have two availability zones, or AZs. One on the left, AZ 1, and another on the right, AZ 2. On the left with AZ 1, notice we have a picture of a single data center. So in other words, an availability zone doesn't have to be, but it can equate to a single Azure data center. But on the right, we've got three data centers. So what we're seeing here then is that an availability zone can consist of more than just one data center. So what we're talking about using this for is to spread out services to increase availability.

Now, how is that? Well, we might replicate data between availability zones, so that if there's some kind of a catastrophe or a failure in one availability zone, the data is still available elsewhere. And it doesn't have just to be data, it could be an entire application ecosystem that we've duplicated in another AZ.

With Azure Availability Zones, we get the benefit of high availability of IT systems and data. And we know that an Azure Availability Zone could consist of one or more data centers. But then we've got the notion of fault domains. The purpose of a fault domain is essentially to spread out our deployed services like virtual machines that we might create in Azure. Spread them out if we've got a cluster of them across multiple physical data center racks. Where each rack has its own network switch, at least one, its own power source, its own hypervisor, and so on. And that way if there's some kind of an unanticipated failure within an Azure data center in a rack. So whether it's power-related, network-related, or hypervisor-related, at least we will still have some of our virtual machines that were deployed to another fault domain. And so when you start deploying resources, this happens automatically.

Then we've got the notion of an update domain. So an update domain is a little bit different here because instead of an unpredictable or unanticipated failure, we have a planned maintenance type of downage of something like a hypervisor server. Maybe Microsoft needs to apply configuration changes or updates. So, instead of bringing down a whole bunch of physical hypervisor servers in an Azure data center simultaneously, one would be brought down, its configuration changes and or updates will be applied, and then once that's back up and running then the next server would get the same treatment where it would be perhaps brought down or reconfigured, updates are applied, that type of thing.

And the whole purpose here is that when updates need to be applied, we don't end up with the service outage. It minimizes what is affected. And we're not talking here about how we, as Azure customers, might deploy virtual machines manually ourselves, because we are responsible for updating them. So this is more at the underlying Azure data center level.

Pictured on the screen, we've got an example of deploying a virtual machine using the Azure portal, the web interface. [Video description begins] A section of the Azure web interface displays, specifically the INSTANCE DETAILS section. There is a Virtual machine name field, set to vm1. There are Region, Availability options, and Availability zone drop-down lists. The Availability options is set to Availability zone. Availability zone has no value, but a note below the drop-down list indicates that there are no availability zones available for the selected location. There is a hyperlink to View locations that support availability zones. [Video description ends]

Notice here, the selected region is Canada East. And when we take a look at availability zones within that region, it says that there are no availability zones available. Now that depends on the region. So some regions are much larger than others and will have numerous Availability Zones within them. So depending on which region you work with, as in this case when deploying a virtual machine, you can expect, in some cases, to not have the choice of Availability Zone. It simply depends on the region that is selected.

Azure Resource Manager

[Video description begins] Topic title: Azure Resource Manager. Your host for this session is Dan Lachance. [Video description ends]

Azure Resource Manager, otherwise called ARM for short, is often used to manage related Azure resources together as a group. Although you don't have to do that. You can use ARM, for example, to deploy or manage a single virtual machine. But it really shines when you're talking about something like a web application which might consist of a front end load balancer, a public IP address, numerous virtual machines to host the website, or the web front end, and then even some back end databases. Which also includes storage. So all of those things together, all of those different Azure resources, can be managed as a single unit through an Azure Resource Manager resource group.

So we use ARM to deploy resources, so to create new things like virtual machines, storage accounts, virtual networks, databases, and so on. But we can also use ARM to manage existing resources, maybe to change a configuration or to remove a deployed resource.

So what is an Azure resource? Well, it's pretty much anything that you can deploy in the Azure Cloud, including things like a web application that's hosted in Azure. Maybe a Cosmos DB NoSQL compliant database or an Azure SQL database. Or a storage account, because you want to store files such as Office productivity files in the Cloud. Also virtual machines that we deploy, these are all resources. So if we've got a single application, it might consist of all of these items. And so we could organize these into what's called a resource group.

You'll notice that when you deploy and manage Azure resources, whether it's through command line tools or through the Azure portal, the web GUI, you'll always have to deal with the resource group. For example, if you're deploying a virtual machine, one of the things you have to do is either deploy it into an existing resource group or define a new resource group.

Here we see an example of an ARM Template. When we work with ARM Template files, they use JSON file format, J-S-O-N. It looks kind of like JavaScript, but it's not JavaScript, it's JSON. So here we see parameters. So we can set a default parameter, in this case for a virtual machine name, where the default value, if not specified otherwise, would be MyVM. [Video description begins] The presenter highlights the following code: "parameters"l {"virtualMachines_vm1_name": {"defaultValue": "MyVM", "type": "String" },. [Video description ends]

We can see the location, or region, into which this virtual machine will be deployed, in this case canadaeast. [Video description begins] He highlights the code: "location": "canadaeast",. [Video description ends] We can see the virtual machine size listed below, which determines the underlying horsepower, like virtual CPUs, the amount of RAM. Whether it uses solid state drives and so on. [Video description begins] He highlights the code: "properties": {"hardwareProfile": { "vmsize": "Standard_B1s". [Video description ends]

In the Azure portal, when we deploy a resource, in this example, if we've deployed a virtual machine. So we've created a new Azure virtual machine in the Azure Cloud. [Video description begins] He displays a section of the Azure web interface, which lists several settings. [Video description ends] When you get to the end of the screens, the Wizard in the GUI, you'll see that there's a link, as we see outlined here in the bottom right, to download a template for automation. [Video description begins] He highlights the link in the image. [Video description ends] So in other words, the Azure portal is essentially tracking all of your choices when you deploy your resource. And then you have the option to download a template, so that you could reuse that template to deploy more resources of that type. Now, of course, you might want to change things like the specific name of a virtual machine and so on. Or you could customize it and parameterize it as we were talking about previously.

Now you can also deploy ARM templates in numerous ways, such as through the Azure portal as seen here. [Video description begins] The presenter displays a page from the ARM Template Deployment Portal. The heading is Custom deployment. [Video description ends] When you create a template deployment in Azure portal, this is what you see. You could build your own template in the editor, there's a built in editor online, where you can also import a template. [Video description begins] He points to the Build your own template in the editor link in the Learn about template deployment section. [Video description ends]

Remember, template is a file that uses JSON syntax. So you can build it in the cloud, if you already built it, you could import it into the cloud. And there's also a list here of common templates for creating things like Linux or Windows virtual machines or a web app. And you can even connect to templates over the Internet, such as through GitHub.

In this example, we're talking about the Azure CLI, the command line interface, which you can download and install so that you have command line management of Azure. So here we're deploying an ARM template through the CLI. In the first command, az group create, we are creating a resource group. The resource group is called rg1 and it's been deployed on a location, or a region, called Canada central. [Video description begins] The complete command is: az group create --name rg1 --location "Canada central". [Video description ends]

Next thing we see is a command that says, az group deployment create. We are creating a deployment. We want to deploy or create resources in Azure. In this case using a JSON formatted template file. So we're giving our deployment a name. Here I'm calling it, deployment1, referencing my resource group rg1. And then I'm specifying a local template file, in this case, mytemplate.json. But you could also specify a location elsewhere over the Internet. Again, as in the case of connecting to an ARM template, that you might want to deploy from GitHub. And then you might specify parameters. In this case, such as a parameter for MyVM. [Video description begins] The complete command is: az group deployment create \ --name deployment1 \ --resource-group rg1 \ --template-file mytemplates.json \ --parameters "MyVM". [Video description ends]

We can also deploy ARM templates using PowerShell. In the first line we're creating a variable called $rg that contains the text rg1. That's the name of the resource group. And we're setting the location variable to Canada east. [Video description begins] The presenter highlights two commands. The first is: $rg = "rg1". The second command is: $location = "Canada east". [Video description ends]

Then we're using the New-AzResourceGroup cmdlet to build a resource group. [Video description begins] He highlights the command: New-AzResourceGroup -Name $rg -Location $location. [Video description ends] And then we're building a New-AzResourceGroupDeployment. So we're referencing our resource group name and a local TemplateFile. In this case on the root of drive C called mytemplate.json. [Video description begins] He highlights the command: New-AzResourceGroupDeployment -ResourceGroupName $rg - TemplateFile c:\mytemplate.json. [Video description ends] But just like with the Azure portal, with the Azure CLI, we don't have to reference a local template file. We can actually point to one over the Internet, such as stored in a GitHub repository.

Azure Resource Groups

[Video description begins] Topic title: Azure Resource Groups. Your host for this session is Dan Lachance. [Video description ends]

The Azure Resource Manager, or ARM, method of managing Azure resources allows us to group resources together. So for example if we've got a web application that consists of a front end load balancer, and a couple of load balanced web servers and backend databases. All of those items together could be grouped into a single resource group to facilitate management. And we can even build resource group templates or ARM templates that allow us to deploy and manage these resources together.

[Video description begins] The presenter switches to an instance of the Azure portal in a Web browser. The URL is https://portalazure.com/#home. The Home page displays. There is a toolbar, which includes a search bar, and a navigation pane with several options, including Dashboard, Favorites, and App Services. There is also a content pane. [Video description ends]

So here in the Azure portal, we can see that on the left we've got a Resource groups view. When I click it, any resource groups that I've already defined will be shown. [Video description begins] He clicks Resource groups in the navigation pane. The Resource groups page opens in the content pane. There are Add, Edit columns, and Refresh buttons. There is a Filter by name field and All locations, All tags, and No grouping drop-down lists. The resource group table headings are NAME, SUBSCRIPTION, and LOCATION. A message indicates that there are no resource groups to display. There is also a Create resource group button. [Video description ends] Currently I don't have any, but we can add a resource group at this point by clicking the Add button. [Video description begins] He points to the Add button on the toolbar. [Video description ends]

Now aside from doing that, if I were, for example, to deploy a new virtual machine. So let's say I click on Virtual machines on the left [Video description begins] He clicks Virtual machines in the navigation pane. The Virtual machines page opens in the content pane. There is a toolbar, filter options, and a table with no data. A message indicates that there are no virtual machines to display. [Video description ends] and then click the Add button in the Virtual machines view, you'll also notice that as you deploy resources here in Azure, [Video description begins] He clicks Add on the toolbar of the Virtual machines page. The Create a virtual machine wizard launches. The Basics tabbed page of the wizard displays. [Video description ends] you also get the chance to select an existing resource group, but you can also create a new one here while you're deploying this resource. [Video description begins] He points to the Resource group drop-down list and then to the Create new hyperlink. [Video description ends]

So what I'm going to do then is close out of this Create a virtual machine window and I'm going to go back to the Resource groups view over on the left, [Video description begins] He closes the wizard and clicks Resource groups in the navigation pane. [Video description ends] and I'm going to click Add. So we can have one here. [Video description begins] He clicks Add on the toolbar of the Resource groups page. The Create a resource group wizard launches. The Basics tabbed page displays. [Video description ends]

First thing I have to do is tie it to a subscription. So I've only got one subscription that's listed here, my pay as you go subscription. [Video description begins] In the PROJECT DETAILS section, he points to the Subscription drop-down list. [Video description ends] And then I need the name of a resource group. So I'm going to call my first resource group Rg1. Now if this were a resource group that would be used to manage the Azure resources to support a web application, I would have a more meaningful name. Perhaps the name of the web application followed by Rg. It's important in Azure that you have a standard when it comes to naming conventions for items. So in this case, I'm just going to stick with Rg1 for resource group one. [Video description begins] In the Resource group field, he types "Rg1". [Video description ends]

Then I have to determine into which region I want to create this resource. Currently it's set to Central US. If I open the drop-down list, I can choose whichever one makes the most sense. [Video description begins] In the RESOURCE DETAILS section, he expands the Region drop-down list. Several regions are listed including Australia East, Brazil South, and Canada East. [Video description ends] Because I'm on the East Coast of Canada, I'm going to choose Canada East. And then I'm going to click Next. [Video description begins] The Tags tabbed page of the wizard opens. There is a table with three columns: NAME, VALUE, and RESOURCE. [Video description ends]

Here we can build a tag or we can add multiple tags, which is really just metadata. You can do this for more than just resource groups in Azure. You might, for example, do it for storage accounts or virtual machines so you could tag it and assign it to a specific department or a billing cost center or something like that. So for here I'm going to create a new tag called Project. And let's say that this is going to be for a project that we are currently working on called ProjectA. [Video description begins] In the first data row of the table, he types "Project" in the NAME field and "ProjectA" in the VALUE field. The RESOURCE value is automatically set to Resource group. [Video description ends] So that's what I'm going to tag this resource group with. You don't have to tag.

Now the next things I'll do is click the Review + Create button down at the bottom. [Video description begins] The Review + Create tabbed page of the wizard displays. [Video description ends] And here we have a little summary of what we are configuring, which is a resource group, which will be deployed in the Canada East region. [Video description begins] The SUMMARY list also displays the Subscription value of Pay-As-You-Go. [Video description ends] And then I'll go ahead and click Create. [Video description begins] The wizard closes and a message indicates briefly that the resource group was created. [Video description ends]

After a moment if we refresh the Resource groups view, we'll see clearly that we've got our resource group, Rg1, listed here. [Video description begins] On the Resource groups page, he clicks Refresh. The Resource group Rg1 is listed. [Video description ends] So I could click on it to select it to open up its properties blade. And we kind of have a navigator here on the left related to the property categories for the resource group called Rg1. [Video description begins] He clicks Rg1. It opens its own page. [Video description ends]

And as we scroll down for example, we can see we've got tags and [Video description begins] He clicks Tags in the navigation pane. The Tags page opens. [Video description ends] we can see that we've got a Project tag with the value of ProjectA. [Video description begins] He points to the listed tags. [Video description ends] However, I'm going to go ahead and close that property sheet for that resource group. [Video description begins] He returns to the Resource groups main page. [Video description ends]

And if I were once again to click on Virtual machines on the left [Video description begins] He clicks Virtual machines in the navigation pane. The Virtual machines page opens. [Video description ends] and then click the Add button in the Virtual machines view. [Video description begins] He clicks Add on the toolbar. The Create a virtual machine wizard opens. The Basics tabbed page displays. [Video description ends] Notice that when we go to deploy our virtual machine we now have our Rg1 resource group available from the drop-down list. Again, we could create a new one, but we have a couple of ways that we can work with it here in the Azure Portal.

Azure Portal

[Video description begins] Topic title: Azure Portal. Your host for this session is Dan Lachance. [Video description ends]

The Microsoft Azure portal is a GUI tool, a graphical user interface type of tool, that comes in the form of a web application. This facilitates managing Azure resources. So it's a GUI management tool that also supports RBAC self-provisioning. RBAC stands for role based access control. We'll talk about that a lot more later, but for now what it means is that we could give other administrators limited access to manage specific resources in Azure instead of everything.

The Azure portal has a lot of functionality. And part of this includes, of course, creating and managing Azure resources. So for example, you can very quickly, using the portal, deploy a new Linux or Windows virtual machine, or a storage account to store files in the cloud, or even quickly deploy in Azure SQL database. You don't have to know any commands to type in, it's all done visually.

We can also work with ARM templates, Azure resource manager templates. ARM templates use the JSON file syntax and they allow us to create and manage Azure resources of any type. So we can use an ARM template to create resources like storage accounts in virtual machines. We can also use the portal to edit templates. We can also import existing templates into the portal and maybe tweet them. And we can also even download ARM templates. Because whenever you deploy your resource in the Azure portal, it's watching what you're doing and tracking in the background what that comprises of in terms of JSON commands. And so you can then download an ARM template based on what you've deployed in the GUI.

In the Azure portal, we can also tag resources. Tagging means you're adding extra metadata, such as assigning a virtual machine and a storage account to a specific project, or maybe to a specific department within a large organization. The benefit of tagging is that you can then search based on the tag. So for instance, show me all deployed Azure resources related to project A, or I would like to see all deployed Azure resources for billing purposes related to the human resources department.

We can also search for resources within the Azure portal. So instead of rummaging around through potentially dozens, hundreds, even thousands of deployed resources in a larger subscription, we could simply search for what we're looking for, such as a specific virtual machine that we want to manage.

There's also this notion of the Azure Cloud Shell. When we talk about the Azure Cloud Shell, we're talking about either issuing commands using a Linux-style bash shell or using PowerShell cmdlets. Now why would we want to do this? Well, we're talking about command line management of Azure resources. So instead of having to download, and install, and configure, and authenticate to some command line tool like the Azure CLI or Azure PowerShell, which you can do, and we'll talk about later, instead you can simply launch the Azure Cloud Shell within the portal, and you're already authenticated.

So the PowerShell also supports a number of built-in languages. If you want to work with Node.js, or Java, or Python, it's available. It also support Azure file share storage. So if you need to store something in a file persistently between Azure Cloud Shell sessions, well, you can do it. So Azure Cloud Shell is yet another benefit of working through the Azure portal.

Navigate the Azure Portal

[Video description begins] Topic title: Navigate the Azure Portal. Your host for this session is Dan Lachance. [Video description ends]

The Azure portal is a web-based GUI management tool for Azure resources. I've popped in the URL of portal.azure.com and it, of course, has changed it and it wants me to pick an account to login with. [Video description begins] The Microsoft login page displays in the Web browser. The Pick an account dialog box displays. There is one user account and an option to use another account. [Video description ends]

So I'm going to go ahead and choose my Azure account, at which point it wants me to specify the password for that account. [Video description begins] The presenter clicks stefan.samms at outlook.com. The Enter password dialog box opens. [Video description ends] So I'm going to go ahead and put the password in and choose Sign in. And after a moment I will be brought to the main home screen in the Azure portal, where we can see that we've got a quick way to quickly jump into things like virtual machines. [Video description begins] He enters the passwords and clicks Sign in. The Azure portal opens to the Home page. The URL is https://portalazure.com/#home. There is a toolbar with a search bar, along with a navigation pane and a content pane that displays several apps. [Video description ends]

If I click that it takes me into the Virtual machines viewer. [Video description begins] He clicks Virtual machines in the content pane. The Virtual machines page opens. There is a toolbar, fields for filtering, and a table of virtual machines arranged in columns that include NAME, TYPE, and STATUS. [Video description ends] I can see I've got two of them that currently have a status of Running. [Video description begins] He points to the virtual machines in the table. [Video description ends]

If I go back to Home I can also view Storage accounts and do the same type of thing. [Video description begins] He returns to the Home page, then clicks Storage accounts. The Storage accounts page opens. There is a toolbar, fields for filtering, and a table of virtual machines arranged in columns that include NAME, TYPE, and KIND. [Video description ends]

Of course, we've got a left-hand navigator, so if we want to view SQL databases, [Video description begins] He clicks SQL databases in the navigation pane. The SQL databases page opens. It has a similar layout to the other pages. [Video description ends] or if we want to view Azure Active Directory, [Video description begins] He clicks Azure Active Directory in the navigation pane. The Default Directory - Overview page opens. This page has its own navigation and content panes. [Video description ends] and perhaps then view users or groups that are defined, we can do that. [Video description begins] He clicks Users in the navigation pane. The Users - All users page opens. [Video description ends]

Now on the topic of Azure Active Directory, which serves as a storage location for additional users and groups, that type of thing, we can switch between multiple Azure Active Directory instances if we have them. In the upper right where my user account name is, it says DEFAULT DIRECTORY, but if I click on that I can switch to another Azure Active Directory instance. [Video description begins] He clicks his user name on the Azure portal toolbar. The user details display along with a Switch directory link. [Video description ends] It's kind of like having multiple Active Directory domains in a larger network. [Video description begins] He clicks Switch directory. The Directory + subscription pane displays. [Video description ends]

You might do that for different business units, one might be for testing and development, while the other is for production. [Video description begins] A default directory is specified as well as links to favorite directories. [Video description ends] Either way, when I click another existing Azure Active Directory instance, it switches me to it in the portal. [Video description begins] He clicks quick24x7.com in the Favorites list. A new instance of the Azure portal opens on the Home page. [Video description ends] So for example, if I were to go to Azure Active Directory now and click on Users, I have a different listing of users that I did previously, because now I'm in a different named Azure Active Directory instance. [Video description begins] He switches to the Azure Active Directory page and points out the differences from the previous time this page was accessed. [Video description ends]

If I click on the Virtual machines view, notice here that we don't see anything. [Video description begins] He opens the Virtual machines page from the navigation pane. No virtual machines are listed. [Video description ends] Well, its because we are tied to a different Azure Active Directory instance. So if I flip back to the default directory, so I'll switch back to the default directory where we began working. [Video description begins] He accesses the Directory + subscription pane again and clicks Default Directory. The Azure portal reloads to the Home page. [Video description ends] And again, if I go back and look at Virtual machines, there they are. [Video description begins] He clicks Virtual machines in the navigation pane. Two virtual machines are listed. [Video description ends]

So we have a couple of things that are important here in terms of navigating through the Azure portal. Now in the left-hand navigator, I can hide the text labels once I begin getting used to what these icons mean. [Video description begins] He collapses the navigation pane so that the icon labels are not displayed. Tooltips display as he moves the pointer over each icon. [Video description ends] For example, the plus sign naturally means I want to create some kind of an Azure resource, [Video description begins] He clicks the plus icon. The New page opens. The available categories include Networking, Storage , and Web. [Video description ends] and we've got a number of categories here. So if I want databases, I can see Databases, and of course, I can always search for something. So if I'm interested in Ubuntu Linux, I could search for ubuntu. [Video description begins] He clicks in the Search field and types "ubuntu". [Video description ends]

Now we also have couple of buttons across the top that we should be aware of. [Video description begins] He returns to the Azure portal Home page. [Video description ends] The first here looks like a command prompt icon, and when I hover it, it says Cloud Shell. Cloud Shell allows me to run either CLI commands or PowerShell commands right here through the Azure portal, without having to download and install the Azure CLI or Azure PowerShell files. [Video description begins] He clicks Cloud Shell on the toolbar. [Video description ends] Now because I've never done it, it says you don't have any storage for this, so if you want to have any kind of persistence, if you want to save any files between sessions, you need this set up. [Video description begins] He points to the dialog box that displays. The Subscription field has a value of Pay-As-You-Go. [Video description ends]

Well, it wants to tie it to my subscription, I'm just going to go ahead and click Create storage, so we can see how this works. And notice here we've now got some storage that was created for Azure Cloud Shell, and this says, it's initializing our account for use with Cloud Shell. [Video description begins] He clicks Create. The PowerShell window opens. [Video description ends] And after a moment I'm in an Azure Cloud Shell prompt. [Video description begins] The prompt is PS Azure :\>. [Video description ends] So for example, if I simply type az, which we normally do for the Azure CLI, just like we would if we downloaded and installed the Azure CLI on our on-premises station. The difference is we're already authenticated here, and we've got all of the options available for that. [Video description begins] He runs the command az. The output is a list of Azure options and their descriptions. [Video description ends]

Now in the future, so let's go ahead and close the Azure Cloud Shell. [Video description begins] He returns to the Azure portal Home page. [Video description ends] In the future when we run the Azure Cloud Shell, it's not going to have to set up our storage or anything like that, because we've already done it the first time. So when I click on it, [Video description begins] He clicks PowerShell on the toolbar and the PowerShell window opens. [Video description ends] we can then determine whether we want to run PowerShell, or whether we want to go into a more Linuxy environment through Bash. [Video description begins] In the PowerShell toolbar, he clicks the Select environment drop-down list, that's set to PowerShell, and selects Bash. A message displays indicating that a switch to Bash will create a new session and PowerShell running processes will go to the background. [Video description ends] And if I click Confirm, it will switch over and do just that. [Video description begins] He clicks Confirm. A Bash session starts up. [Video description ends]

So we can either work in a Bash type of environment if we're used to Unix and Linux, or we can work in a PowerShell more Windows-based type of environment. And we can switch back and forth as you can see just by clicking that little icon. [Video description begins] He closes PowerShell and returns to the Azure Home page. [Video description ends]

Now the other thing to bear in mind here [Video description begins] He clicks Directory + Subscription on the toolbar. The Directory + subscription pane opens. [Video description ends] is that we can also filter based on our subscriptions and our directories. [Video description begins] In the Switch directory section, he expands the Set your default directory drop-down list. The options include Sign in to your last visited directory, Default Directory, and quick24x7.com. [Video description ends] So we can see that we've got a couple of Azure Active Directory instances. So we can determine how that appears here in the Azure portal. [Video description begins] He closes the pane and returns to the Azure Home page. [Video description ends]

The alarm bell is for any notifications in this session, such as the creation or the deletion of an Azure resource. [Video description begins] He points to the Notification icon on the toolbar. [Video description ends] We've also got some graphical configuration settings for the portal, [Video description begins] He clicks Settings on the toolbar. The Settings pane opens. Settings that can be configured include the default view, themes, and toast notifications. [Video description ends] and some timeout items, such as logging out when there's a period of time for inactivity. And of course, we can click on our account name over here and sign out, or as we know, switch to a different Azure Active Directory instance.

Now when you're looking at a view, so for example, let's say that we go to the Virtual machines view, [Video description begins] He opens the Virtual machines page from the navigation pane. [Video description ends] bear in mind that you can also edit the columns here at the top. And when you do that, you can determine what you want to see. [Video description begins] He clicks Edit columns on the toolbar. The Edit columns pane opens. There is an Available columns list and a Selected columns list with back and forward arrows between them. [Video description ends] The selected volumes are listed on the right, what's available to you is listed on the left. And if I'm interested in Tags, let's say, because I've tagged my resources, I can select that column and move it over to the Selected columns area on the right. [Video description begins] He clicks Tags in the Available columns and clicks the forward arrow. Tags is added to the Selected columns list. [Video description ends]

When I apply it, then the tags will be here. [Video description begins] He closes the pane and points to the virtual machines table. TAGS has been inserted as the last column of the table. [Video description ends] And from here I have an easy way to edit, to make a change to any tags, here we can see it's ProjectB, and so on. [Video description begins] He clicks the pencil icon in the TAGS column and the Tags pane opens. He closes the Tags pane. [Video description ends]

Also, notice the filtering that is available here. So if I only want to see virtual machines that have Linux in the name, then I can just type in Linux and it's only showing me that. [Video description begins] In the filters section. he types "linux" in the Filter by name field. One result is returned. [Video description ends] I can also filter by other things like tagging. So if I open up tagging here maybe I only want to see stuff related to ProjectA. [Video description begins] He expands the Tags filter. There is a Filter tags field, All or Any radio buttons, and tag names with checkboxes. He selects the ProjectA checkbox. [Video description ends] And so when I do that and close the drop-down, it filters it and shows me only that. [Video description begins] One result is returned. [Video description ends] So I can see here that if I hover over the tags item for that virtual machine, indeed it is set to ProjectA.

So it's important to spend a bit of time, then, to get used to the Azure portal, because if you're going to be working in the GUI, this is going to be your home as it relates to Azure resource management.

Azure CLI

[Video description begins] Topic title: Azure CLI. Your host for this session is Dan Lachance. [Video description ends]

The Microsoft Azure CLI is a command line interface tool. It lets you manage Microsoft Azure resources from a command line environment.

Now you could also launch this through the Azure Cloud Shell. In other words, when you're authenticated to the Azure portal, the GUI, you can launch Azure Cloud Shell and gain access to the CLI. Or you could download and install it on one of your machines on-premises. And the machine on-premises can be running Windows, it can be running Linux or it can be running the MacOS. And within any of these operating systems you can then issue Azure CLI commands if you know the syntax.

Now the syntax, once it's installed, begins with az followed by a hierarchy or a subset of commands. So for example one of the first things you should know is how to retrieve the version of the Azure CLI. Because if you are looking at an example on the Internet on how to do something in the CLI and you've got a CLI installation that's a year or two old, what you see on the Internet might be newer and it might not be available in your installed version. So we can run az --version, so we know what version of the CLI we're running.

We can learn about the syntax with az --help, where we might notice that there's a vm command. So then we can get further help on that, because it is a hierarchy, by typing in az vm --help. Then we're going to get a help screen showing us what we can do with Azure virtual machines through the CLI.

Now an important command, of course, is az login. This allows you to authenticate to your Azure account so you can actually start managing your subscription and the resources within it. When you issue the az login command you're going to see a screen that looks like this, where there's a note about having launched a web browser where you'll have to sign into your Azure account if you're not already signed in. Then after you sign in, you'll see the clear text listed down below here beginning with cloudName. It returns information about your specific Azure account. [Video description begins] The account details are as follows: [{"cloudName": "AzureCloud", "id": "048...2109", "isDefault": true, "name": "Pay-As-You-Go", "state": "Enabled", "tenantID": "258e...bf7c", "user": { "name": "hotmail.com", "type": "user"}}]. [Video description ends]

Now at this point, you will be authenticated and you can actually start to do things like deploy virtual machines either manually or through an ARM template, or work with storage accounts or databases, websites, work with user accounts, and groups and permissions in Azure. Basically, the sky is the limit but you'll be able to find out about the syntax by using az --help.

Install and Configure the Azure CLI

[Video description begins] Topic title: Install and Configure the Azure CLI. Your host for this session is Dan Lachance. [Video description ends]

The Azure CLI, or command line interface, allows us to manage Azure resources at the command line level. Now, we can run this using Azure Cloud Shell which is accessible through the Azure portal. But in this example, we're going to talk about how you can download and then run the Azure CLI on any station of your choosing on-premises. [Video description begins] The presenter switches to the Microsoft Azure - Install the Azure CLI page in the Web browser. [Video description ends]

So here in my web browser, I've gone to the documentation related to installing the Azure CLI. And we can see here there are instructions detailing how this is done for the Windows platform, the macOS, and Linux variants. We're going to be doing this in Windows. So I'm going to choose Install on Windows. [Video description begins] He clicks the Install on Windows link. The Install Azure CLI on Windows page displays. [Video description ends] And I'm going to choose Download the MSI installer. [Video description begins] He clicks the Download the MSI Installer button. [Video description ends] And after a moment we can see that the Azure CLI is in the midst of downloading.

Once the CLI is downloaded we can go ahead and run the installation. [Video description begins] He right-clicks the install file on the download bar and selects Open. The Microsoft Azure CLI Setup wizard launches. [Video description ends] So I'm going to go ahead and accept the terms in the license agreement and I'm going to choose Install. And after a moment we'll click Finish to complete the installation. [Video description begins] He accepts the licence agreement terms and finishes the installation. [Video description ends]

Now on that same station, I can go to a command prompt where I can begin by typing az. [Video description begins] A command prompt window opens. The prompt is C:\>. He enters the command: az. [Video description ends] Now what's happening here is we're testing that the Azure CLI has been installed. This is the prefix that starts all of the other hierarchical commands that follow az. [Video description begins] The output is a list of commands with their associated descriptions. [Video description ends]

So looks like we have something, which is good, it's recognized. If I type az --version, then we'll get some versioning information related to Azure CLI components. And it's always important to make sure that we know exactly which version of the CLI that we are using, which we see here is 2.0.59. [Video description begins] He runs the command: az --version. The output is a list of components with their associated version numbers. [Video description ends] Now the reason that's important is to make sure that if we're looking at documentation on how to do something from the CLI that it will work in our version of it.

If I were to type az --help, then from here I would see some next level commands that would be available after az, such as vm, or storage, or sql. [Video description begins] He runs the command: az --help. The output is a list of commands with their associated descriptions. [Video description ends] Well, that means then it's like I type az vm --help to get the next level commands after az vm. [Video description begins] The output is a list of commands with descriptions, related to VMs. [Video description ends] So for example, we see here create. And we can even take that a step further, az vm create --help, to even learn more about how to use this command line syntax. [Video description begins] He runs the command: az vm create --help. The output is a list of example syntax for using the create command. [Video description ends] Now, we have examples of how to do it. So to create a Debian virtual machine, for example, so a Linux variant.

Now at the same time, it's also important that we know how to authenticate to our account in Azure, of course, so that we can manage resources. And we can do that with az login command. [Video description begins] He runs the command: az login. [Video description ends] That's going to open up a web browser page like we see here where we can sign in to our Azure account if we're not already signed in. So I'm going to go ahead and click next to continue signing in. And then I'll go ahead and specify the password and I'll click Sign in. It then says that we have logged into Microsoft Azure, so it will redirect me to some CLI documentation, and I can go back to the command prompt and continue working. So here it is, it's redirected us automatically. [Video description begins] The Azure documentation displays in the Web browser. [Video description ends]

Let's flip back to the command prompt for a second. [Video description begins] He switches to the command prompt. [Video description ends] Back here we can see a note about how it launched a browser for us to login. And after successfully authenticating we can see that we are connected to our AzureCloud subscription. [Video description begins] He points to the following account details: [{"cloudName": "AzureCloud", "id": "048...2109", "isDefault": true, "name": "Pay-As-You-Go", "state": "Enabled", "tenantID": "258e...bf7c", "user": { "name": "hotmail.com", "type": "user"}}]. [Video description ends]

And so now that we are connected to our Azure account, we could issue commands like az vm list to list out virtual machine information for what we've got in our current cloud subscription. We can see it's all been returned here. So we if we kind of scroll back up, we can see that the first returned item would be our first virtual machine, and of course, a lot of details related to it. And as we go back up we can see things like the specific names of things. So, for example, as we go down here we can see that we've got the location or region, canadaeast, for our virtual machine named eastlinuxvm1. And as we start scrolling down, then we have all the further details for that virtual machine, including the admin user name, the computer name, and so on.

Azure Cloud Shell CLI

[Video description begins] Topic title: Azure Cloud Shell CLI. Your host for this session is Dan Lachance. [Video description ends]

In this demonstration, I'll use the Azure Cloud Shell CLI to deploy a Linux virtual machine. [Video description begins] The presenter switches to an instance of the Microsoft Azure portal in the Web browser. The home page is open. [Video description ends]

I've already signed into the Azure portal. So up in the bar at the top, I'm going to click the command prompt icon that will let me launch the Cloud Shell. Once the Cloud Shell loads, I need to ensure that I'm using either Bash or PowerShell. [Video description begins] He clicks Cloud Shell on the toolbar. The PowerShell window opens, but the environment is set to Bash. [Video description ends] In this case, I'm using a Bash environment which is very familiar for Unix and Linux people. And I'm going to stick with this.

If I were to type az --version, I can see the version of the Azure CLI that is available here. [Video description begins] The output is a list of the Azure components and their version numbers. [Video description ends] And I can kind of scroll up and get the overall version at the very top, 2.0.59 is what it says here. [Video description begins] He points to the azure-cli version. [Video description ends]

So now what I want to do is clear the screen with the clear command and deploy an Azure virtual machine. To do that, I'll use the az vm create command. I'm going to use -n, and the name of this virtual machine will be eastlinuxvm2. And I'm going to assign it to a resource group with -g called rg1. I'm going to use --image, and I'm going to base this on Centos Linux. I'm going to generate some SSH keys, so --generate-ssh-keys, where the public one will be stored inside of the newly created virtual machine. And the private part of the key pair will be stored here in the Bash shell environment. Or, if you're actually doing this from a Linux station on-premises with the CLI installed, the private key will be stored on that machine. And I'm going to create a user here using --admin-username called azureuser.

We're going to go ahead and press Enter to begin the creation here of this virtual machine using the Azure Cloud Shell. [Video description begins] He runs the command: az vm create -n eastlinuxvm2 -g rg1 --image Centos --generate-ssh-keys --admin-username azureuser. [Video description ends]

So now that our virtual machine is deployed, we can see the public IP address that it was assigned by default. [Video description begins] The output is: { " fqdns": "", "id": "/subscriptions...eastlinuxvm2", "location": "canadaeast", "macAddress": "00...98", "powerState": "VM running", "privateIpAddress": "10.1.1.7", "publicIpAddress": "52.235.37.149", "resourceGroup": "rg1", "zones": "" }. [Video description ends]

So at this point, what I'm going to do within the Cloud Shell is use the ssh command to SSH into our newly deployed virtual machine. So to do that, I'll type ssh. The account we created was azureuser, that's what we created in our command line up here above, and I'm going to use an @ symbol and specify the public IP address of the virtual machine as we see it listed up above. [Video description begins] He runs the command: ssh azureuser@52.235.37.149. [Video description ends]

And when I go ahead and press Enter, it asks if I want to trust the unique digital fingerprint [Video description begins] The output indicates that the authenticity of host 52.235.37.149 can't be established and requires confirmation to continue connecting. [Video description ends] because it's the first time we've connected. I'll go ahead and type in yes and press Enter. And after a moment, we're in.

We know by looking at the command prompt that we have successfully SSHed into that remote host in the cloud. [Video description begins] A warning message indicates 52.235.37.149 has been permanently added to the list of known hosts. The prompt changes to [azureuser@eastwestlinuxvm2 ~]$. [Video description ends] And from here, it's business as usual. Which means we can issue any standard commands that we would issue normally in Linux once connected to the host, such as ifconfig, where we can see the internal IP address, the private IP assigned for the subnet into which that Linux host was deployed. [Video description begins] He runs the command: ifconfig. There are two large blocks of output. The first is for eth0 and has values such as netmask, ether, and txpackets. [Video description ends]

Azure PowerShell

[Video description begins] Topic title: Azure PowerShell. Your host for this session is Dan Lachance. [Video description ends]

Micorsoft PowerShell has been around for quite a while. We're up to version 6 these days. Azure PowerShell focuses on how to use PowerShell commands or cmdlets to manage the Azure environment.

So PowerShell, then, is a command line interface tool. But it's not just for developers. Administrators use it to manage the file system on a Windows client or manage the DHCP service on a Windows Server. Even third-party vendors are into PowerShell such as, managing VMWare virtual machines through PowerShell or managing Amazon Web Services through PowerShell. But here, the focus is on managing the Azure environment through PowerShell. And doing stuff in the command line provides many benefits including automation and repeatability that otherwise might be somewhat cumbersome using the Azure portal or the Web GUI.

One way to get into Azure PowerShell is through Azure Cloud Shell. What this means is that we would first authenticate to Azure, using the Azure portal, the web GUI interface, from which we could then launch the Azure Cloud Shell where Azure PowerShell is available.

Now we can also download, install, and run Azure PowerShell on any of our on-premises stations as well. Whether we are running the Windows, Linux, or MacOS operating systems. Now we have to bear in mind that if we're installing Azure PowerShell on the Windows platform, one form of the installer is an MSI file, a Microsoft installer file. Or we could download a ZIP file. We can also do an installation directly from within PowerShell itself. Such as Install-Module -Name, and you notice that a lot of the Microsoft Azure modules have an Az prefix. [Video description begins] The complete command is: Install-Module -Name Az. [Video description ends]

Depending on the distribution of Linux you're running, such as Ubuntu Linux, you can install components using apt-get install followed by the name of the package. And you'll need privileges to do this. A regular Linux user won't be able to do this. So we could do this, for instance, to install PowerShell on Linux in the first place, so we could get support to run Azure PowerShell cmdlets.

Pictured on the screen, we have some examples of how Azure PowerShell syntax works. As a matter of fact, it really stems back to how regular PowerShell works where we have PowerShell commands, otherwise called cmdlets, that take the form of verb dash noun. So, for example, Get is a verb, Command is a noun, separated by a dash, Get-Command. What this lets us do is retrieve a list of PowerShell cmdlets and specifically here, from specific modules where a module is really just a library or collection of PowerShell cmdlets.

So in the first command, we're really saying, show me PowerShell cmdlets related to working with Azure Compute, which means virtual machines. [Video description begins] The command is: Get-Command -Module Az.Compute. [Video description ends] Second command really is saying, show me PowerShell cmdlets related to working with Azure SQL. [Video description begins] The command is: Get-Command -Module Az.Sql. [Video description ends]

Then we've got another cmdlet where the prefix or the verb is different. It's not Get, which is retrieve really, but rather Set, to make a change. And what we are doing here is setting the Azure Context. Why would you want to set AzContext? Well, you might be working in an environment where you have multiple Azure subscriptions and so you can set the Azure Context to a particular subscription before you start working with it using Azure PowerShell cmdlets. [Video description begins] The command is: Set-AzContext. [Video description ends]

You can also get help using the Get-Help cmdlet. So if I know, for instance, there's a cmdlet called Connect-AzAccount, and I don't know how to use it but I want to figure it out, I could use Get-Help, give it the name of the cmdlet, in this case Connect-AzAccount, and if I even want detailed help, including syntax examples if available, I could use -detail at the end. [Video description begins] The command is: Get-Help Connect-AzAccount -detail. [Video description ends]

The Connect-AzAccount is a very important cmdlet because it allows you to authenticate to your Azure account. After which, of course, you can use PowerShell cmdlets to work with your Azure resources.

Install and Configure Azure PowerShell

[Video description begins] Topic title: Install and Configure Azure PowerShell. Your host for this session is Dan Lachance. [Video description ends]

While you can run PowerShell cmdlets through the Azure portals, specifically in Azure Cloud Shell, you can also install the Azure PowerShell module, which contains all the cmdlet definitions on-premises. And that's what I'm going to do here. I've already started PowerShell as an administrator as we see here listed in the upper left of the window. [Video description begins] The presenter switches to the Select Administrator: Windows PowerShell window. The prompt is PS C:\WINDOWS\system32>. [Video description ends]

So to get the PowerShell module installed, I'm going to type, install-module-name az. And then I'll press Enter. I get a message about needing a new version of a provider to talk to a repository on the Internet. [Video description begins] A Nuget provider is required to continue. Instructions for its installation display. [Video description ends] So I'm going to go ahead and press Enter which is the default of yes, we allow this to happen.

Then I get a message about trusting installing something from a repository out on the Internet. [Video description begins] The message relates to an untrusted repository and asks if the installation should proceed. [Video description ends] I am going to type in yes because this time if I just press Enter the default here it says is no. So I do trust it. So what we're doing is reaching out to a repository to install this PowerShell module. The good thing about doing it from PowerShell is that it's the same method as long as you've got PowerShell running on Windows, or the MacOS, or even Linux.

Now we have a red message that says some commands are already available on the machine, and it gives me some name of the cmdlets. And that will happen if you've got different versions of modules installed. So all you have to do to avoid this and to use the latest installed version is to use the -AllowClobber parameter. No problem, let's clear the screen. Let's bring up our command initially that we used to install the module. And we'll simply add to the end of it -allowclobber, that's one word, and we'll press Enter. [Video description begins] He runs the command: install-module -name az -allowclobber. The output is the untrusted repository message. [Video description ends] And again, we going to type in yes to trust the repository and let it be on its way. And now notice this time no errors, we are good to go.

And now if I run get-module and use wildcards looking for PowerShell modules, which are essentially libraries of cmdlets, if I look for them that begin with az. and I use -list to show me what's been installed, not necessarily what's loaded in memory, we can see we've got all kinds of these great Azure PowerShell modules available, such as Az.Compute. [Video description begins] He runs the command: get-module *az.* -list. The output is a table of modules with the column headings: ModuleType, version, Name, and ExportedCommands. [Video description ends] And we can even see some of the cmdlets listed here for working with virtual machines, Cdn for Content Delivery Network, Az.Accounts for working with account information, and so on.

So what I could do is run things like get-command -module, let's say, az.compute. So show me the PowerShell cmdlets related to compute. [Video description begins] He runs the command: get-command -module az.compute. The output is a question asking whether to run software from an untrusted publisher. [Video description ends]

Now here it wants me to trust this file to do that. So I'm going to choose that I always want to run, so a. And here we now see a list of the many PowerShell cmdlets available within that module [Video description begins] The output is a list of cmdlets such as Remove-AzVmzzDataDisk. [Video description ends] where we can remove things like data disks or we can save virtual disks. And as we go further up through the list of commands because there's a lot of them available here, we see one for example called New-AzVM.

So if I clear the screen, I can also run get-help. So get-help new-azvm. And I can even ask for detail by putting in -detail. [Video description begins] He runs the command: get-help new-azvm -detail. The output is a question checking whether to run Update-Help. [Video description ends] Now, it says do you want to make sure you run Update-Help so that you have the most up-to-date information? Sure, I have some time. I'll go ahead and type in the letter y for yes and press Enter.

After a moment the update is complete. So if I scroll back up here we'll see examples of how we can actually use this cmdlet to work with new virtual machines that are being created through PowerShell. So we have the synopsis Creates a virtual machine, and we can see the many parameters available potentially to be used with the New-AzVM cmdlet. And as we scroll further down because we asked for detail with -detail, we can see a detailed listing of each and every parameter. And furthermore, down at the bottom we'll start seeing examples of how to use this cmdlet to create a virtual machine. [Video description begins] He points to different sections of the output. [Video description ends]

The last thing we'll do here is talk about how to authenticate to our Azure account here in PowerShell so we can actually do things like manage Azure resources. To do that I'm going to run connect-azaccount. That's going to pop up this Sign in screen for Azure, [Video description begins] He runs the command: connect-azaccount. The Sign in to your account dialog box opens. [Video description ends] so I'll go ahead and put in my credentials. And then I'll go ahead and click Sign in. [Video description begins] He enters his username and clicks Next, then he enters his password and clicks Sign in. [Video description ends] And after a moment, indeed we can see that we are connected to our Azure account. [Video description begins] The output lists the account, subscription, tenantId, and environment. [Video description ends]

Azure PowerShell Syntax

[Video description begins] Topic title: Azure PowerShell Syntax. Your host for this session is Dan Lachance. [Video description ends]

Azure Powershell cmdlets are a great way to manage your Azure resources at the command line. One way to do it is to install and download the Azure Powershell modules on your on-premises station. But another way that we're going to look at is through the Azure portal, where we can launch the Azure Cloud Shell. [Video description begins] The presenter switches to the Microsoft Azure portal in the Web browser. The Home page displays. [Video description ends]

So, I've already signed into the portal and I've got an icon at the top that's for the Cloud Shell, it kind of looks like a command prompt icon. So, I'm going to go ahead and click on it. That's going to start my Azure Cloud Shell, which I will maximize for a moment. [Video description begins] He clicks Cloud Shell on the toolbar. [Video description ends] I want to make sure in the upper left I'm using PowerShell and not a Linuxy Bash type of environment. [Video description begins] The Cloud Shell window opens in the PowerShell environment. The command prompt is PS Azure:\>. [Video description ends] And right away, I'm ready to go, I'm authenticated.

So I'm going to clear the screen with cls and I'm going to run get-azvm. This is the cmdlet I know will list Azure virtual machines. [Video description begins] He runs the command: get-azvm. The output is a list of two virtual machines under column headings which include ResourceGroupName, Name, and Location. [Video description ends] And we can see that we've got two of them here. They're deployed in resource group called RG1. We can see their names, their locations, which is the Azure region, and so on.

Now I can filter this list out a little bit. So for instance, I can run get-azvm, and if I only want to see a few of these details, I could use the the select alias. Now I say alias because select is an alias that technically actually points to select-object, but it's less to type. So I'll go with select, and I'm going to select the name comma and location properties, and I'll press Enter. And notice that we've filtered out the other properties that might not be of interest to us at the time. [Video description begins] He runs the command: get-azvm | select name, location. The output is the list of two VMs, but arranged only by Name and Location. [Video description ends]

Now I'm going to run get-command because I'm wondering is there anyway to stop a virtual machine from PowerShell? So I'm going to put wildcard asterisks symbols around the word stop. And while we have a lot of cmdlets with the word stop, one that jumps out here is Stop-AzVM. Sounds like what we want. [Video description begins] He runs the command: get-command *stop*. The output is a cmdlets list. He points to Stop-AzVM. [Video description ends] So I'm going to clear the screen and get help on it, get-help stop-azvm, maybe -example if I'm just looking at syntax examples, that might help. [Video description begins] He runs the command: get-help stop-azvm -example. The output lists the cmdlet name, a synopsis, and an example of its usage. [Video description ends]

Well, indeed as we thought, it does stop a virtual machine. Says so right here, and it's a pretty simple syntax. We give it the resource group, the virtual machine was deployed into, and of course, the name of the virtual machine, and we're ready to go. So I'm going to go ahead and run stop-azvm -resourcegroupname, in this case, it's rg1. Well, let's take a look at that actually, we're going to minimize this. [Video description begins] He switches to the Virtual machines page in the Microsoft Azure portal. [Video description ends]

So, I do have a virtual machine called eastlinuxvm1 and it's running, that's the status, and it's in a resource group called Rg1. So let's pop up our Cloud Shell again, and let's make this happen, [Video description begins] He returns to the Cloud Shell. [Video description ends] -name is eastlinuxvm1, and I'll press Enter. [Video description begins] He runs the command: stop-azvm -resourcegroupname rg1 -name eastlinuxvm1. The output contains several warnings and a message that the virtual machine is stopping operation. [Video description ends]

So, it says this cmdlet will stop the virtual machine. You sure you want to continue? The default is yes, if I just press Enter. So, I'll just press Enter. And after a moment it will begin the process of shutting down the virtual machine. So I'm just going to go ahead and minimize this and refresh my list of virtual machines here in the portal. [Video description begins] He switches to the Azure portal Virtual machines page. The eastlinuxvm1 VM has a status of Running. [Video description ends] And after a moment, we'll see that the virtual machine will be stopped. And sure enough, we can see that it's actually deallocating. So, after a moment, the state of the virtual machine will be stopped. [Video description begins] He clicks Refresh on the toolbar. The eastlinuxvm1 status changes to Deallocating. [Video description ends]

So we can use PowerShell cmdlets here in the Azure Cloud Shell which might be a little easier to work with than having to download it and install it on an on-premises station. But it really depends how you want to use it.

Exercise: Describe the Azure Cloud

[Video description begins] Topic title: Exercise: Describe the Azure Cloud. Your host for this session is Dan Lachance. [Video description ends]

In this exercise, you will begin by explaining the difference between Azure regions and Azure availability zones. Next, you will describe the purpose of Azure Resource Manager. Next, you will list PowerShell cmdlets related to working with Azure virtual machines. And you'll do this in the Azure Cloud Shell. The last thing you'll do is list CLI commands related to working with Azure SQL Database in the Azure Cloud Shell.

Now's a good time to pause the video and think about each of these four items. And then come back to view the solutions.

[Video description begins] The solution commences. [Video description ends]

An Azure region is essentially a geographical location that consists of one or more availability zones. And you can even enable things like replication between various regions so that if there's a region-wide outage or catastrophe, your data exists already elsewhere in another region because it's already been replicated there. An availability zone, or an AZ, contains one or more data centers that have high-speed network links. Definitely faster than the network links that would link different Azure regions together over the Internet.

The Azure Resource Manager, otherwise called ARM, allows us to manage Azure resources as a group. Although technically, you could have an Azure resource group that is only used to contain a single item like one virtual machine. So we can use the GUI, the Azure portal, to work with Azure Resource Manager. So such as working with Azure Resource Manager or ARM templates. [Video description begins] The command line can also be used. [Video description ends]

Also bear in mind that ARM templates are files that are in the JSON file format. And they define the Azure resources that we want to either deploy, or manage in some way, or delete. All through a template that we could deploy within the portal using the Azure CLI or using Azure PowerShell.

The next thing I'll do here is start the Azure Cloud Shell here in the portal using the Cloud Shell icon up at the top. [Video description begins] The presenter switches to the Azure portal in the web browser. [Video description ends] And to start with here, I'm going to start by working in PowerShell.[Video description begins] He clicks Cloud Shell and the PowerShell window opens. The prompt is PS Azure:\>. [Video description ends] I need to list PowerShell cmdlets that are related to working with Azure virtual machines.

So to do that, I can run get-command -module az.compute. And I can even pipe that to more. [Video description begins] He runs the command: get -command -module az.compute | more. [Video description ends] And here we can see, we've got a number of cmdlets [Video description begins] The output is a table with four columns: CommandType, Name, Version, and Source. There are several rows of data. An example of a cmdlet is Add-AzImageDataDisk. [Video description ends] that are specifically related to working with Azure virtual machines. And the components related to them like disks, and setting the AzVMSize, the virtual machine sizing, which determines the VCPUs, the amount of RAM, and so on.

Now, we can also work with the Azure CLI here in Azure Cloud Shell. Currently in the upper left, you can see it says PowerShell. So I can go ahead and click there and choose Bash Shell or Bash. [Video description begins] On the PowerShell toolbar, the presenter clicks the Select environment drop-down list and selects Bash. A message displays indicating that a switch to Bash will create a new session and PowerShell running processes will go to the background. He clicks Confirm. [Video description ends] And once I switch to that, it's kind of like I am in Linux, where if I just type in az and press Enter, it will recognize it as the Azure CLI. [Video description begins] He runs the command: az. The output is a list of commands and their descriptions. [Video description ends] So I'm going to just run clear to clear the screen.

Now here, I can take a look at commands related to any aspect of managing Azure resources. For example, if I just run az --help, I will get a list of the next level commands such as sql. [Video description begins] He runs the command: az --help. The output is a list of commands and their descriptions. [Video description ends] And if I need to list commands related to working with Azure SQL, well, I know where to work from here.

I can clear the screen and run az sql --help. And now I can see I can work with managing things like databases or data warehouses [Video description begins] He runs the command: az sql --help. The output is a list of commands and descriptions related to SQL. [Video description ends] and we can even take it a step further. So az sql db --help to learn more about the syntax related to working with the database. [Video description begins] He runs the command: az sql db --help. The output is a list of commands and descriptions related to databases. [Video description ends] So to create a database, to delete it, to list databases available on a server, to rename it, and so on.
