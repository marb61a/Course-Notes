                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 14


Configure Azure File Storage (Cont)
  - You can add directories within it as well, so you can make subordinate subdirectories to organize large amounts of files. 
    - How about I click Upload to upload some content here?
  - On the right, it opens up an Upload files blade. So I'm going to click the little folder icon, the blue folder icon, to upload a file. 
    - Choose an on-premises file.
    - Once that is done click the Upload button
  - The next thing to do is to figure out how we can make a connection to the shared folder from a virtual machine running within the Azure cloud. 
    - You just as well could do it from on-premises, as long as TCP port 445 is opened up.
  - Go ahead and close this. When you're looking at a Azure file share, like we are now, you're going to see this Connect button up at the top.
    - You can see how you can make a connection to it. For example, using the net use command in Windows
    - Copy the net use command to the Windows Clipboard,
    - Go to see what we've got here for virtual machines. I'm going to click Virtual machines on the left.
  - There should be a Windows virtual machine here  and it says the status is it's running
    - Open that up and take note of the public IP.
  - On my on-premises computer here, I'll use the remote desktop protocol client to connect to that IP with the appropriate name and password defined 
    - Add in the public IP address for that virtual machine and click Connect.
    - In my virtual machine is open up a command prompt, do this manually but there are many ways this could be done and paste in that net use command.
    - Go ahead and press Enter to see what happens, It will it completed successfully
  - Check out z: dir, the image file should be present And 
    - In the GUI, let's just say, here in my virtual machine in Azure, go to this PC on the left in Windows Explorer
      - There will be the network location for shared files, and there's the image file


Azure Key Vault
  - The Azure Key Vault is a secured location in the Azure cloud
    - What does it store and how is it really used?So what we can do is store secrets like cryptographic keys. 
    - You can even import or generate certificates, PKI certificates. You can create your own passwords, why would you do this?
  - You would store this in a central, safe location, all of these different types of security mechanisms
    - Because then you could have applications that your developers might build that will access the key vault to gain access to these items
    - That might be required to make connections to other application components out on the network, for example
  - Now when it comes to standards compliance, Azure Key Vault is backed by FIPS 1402-2 Level 2 HSM. 
    - What's that? it's a hardware security module
    - A HSM device is a firmware device that is used at certain standards. 
    - This is a US government compliance standard for trustworthiness, to store the secrets
    - You can also take existing HSM keys that you might already have on-premises or with another provider and bring them in to your Azure Key Vault
  - To manage this whole ecosystem of secrets, start by creating a key vault in Azure
    - Do this whether you're going to use the portal or command line tools
    - From there, you can then create secrets
    - You can generate PKI certificates, you can create secret passwords. Or you can upload secrets like certificates, for example. 
    - Lastly, you would then configure apps. Now this is more of a developer thing, normally, to retrieve secrets from the key vault.


Implement an Azure Key Vault
  - Create an Azure Key Vault and do it using the Azure portal
    - Why would you create a Key Vault? 
    - You create an Azure Key Vault because you want to store some kind of a secret, like passwords, or PKI certificates, or cryptographic keys
    - Because your applications need that information, maybe to connect to other application components.
  - To begin the process of building my Azure Key Vault here in the portal click Create a resource, over on the left.
    - Search for the word key, and right away I see Key Vault
    - Click Create, and then fill in the blanks,
      - What do you want to call this? for example call it kv1, for Key Vault 1? 
      - If not unique add some characters to it to make it unique, while adhering to organizational naming standards.
  - Tie this, or deploy into an existing resource group. 
    - There are no changes to any of the other items. 
    - Notice that it says all networks can access this vault, potentially you can control the source from which a request to connect to the Key Vault comes from.
      - Leave it on the default for now, and I'll click Create, just to get our Key Vault created, after a moment, it will be created.
    - A little notification that popped up here. I can get that back by clicking the alarm bell.
    - Just click All resources, over on the left.
  - Look for kv, to filter out the list, the created key vault will be there, click on it to open up its properties.
    - At any point in time, if I decide that I want to delete it, there is a Delete option
    - I can also choose to move it to another resource group, or even a different Azure subscription. 
  - Scroll down just a little bit, and take a look at Access policies.
    - I can see an existing access policy, or I can click Add new, where there is a choice a template. 
    - Maybe I only want someone to be able to manage secrets instead of PKI certificates stored in this Key Vault. 
    - I could choose that template, and choose a principal
      - Principal is a user or a group that I want to select that would have access to do that.


Create an Azure Key Vault Secret
  - An Azure Key Vault is only useful if it contains some kind of secret. Secrets like PKI certificates or cryptographic keys or passwords
    - These would be used by code built by developers
    - The code would access the vault here. Gain access to some of these secrets, which it might need to authenticate to other services elsewhere.
  - In the portal goto the All resources view on the left. Where in the Filter by name field, I'll type kv because I know my key vault starts with that prefix.
  - Click it to open up its properties blade, scroll down, under Settings, I see Keys. 
    - Click it, any keys I've created that are stored in the vault will be listed here. 
    - There are none, currently, but I could click Generate or Import. 
    - I could generate key pairs, or I could also import them from here or restore from backup.
  - There are options, in this case, related to the generation of keys. 
    - It says Generate, it could be RSA, EC, I've got the Key Size, call this Key1 for example
    - Leave the defaults and just go ahead and create it. So now we've got a key called Key1 that now exists in this particular key vault.
    - Just click to follow that further down and down to get to the details related to it.
  - Down below see the Permitted operations,  How can this key be used? 
    - For encryption, decryption, signatures, verifying signatures, and so on.
  - Click the Secrets view, I can click Generate/Import. And I'm going to make a manual secret here called, how about, Secret1.
  - Enter in a secret value. Remember, this is what would be used by applications that reach into this vault to grab this stuff
    - Click Create. So I've now got a secret called Secret1 in the vault. And if I click it and just keep clicking on the links to get to the details. 
    - We could see, for example, if it's got an activation date of when it's allowed to start being used, when it expires.
    - I can also choose the Show Secret Value button to actually show my secret value.
    - Finally, we can also work with PKI certificates here, either importing them or generating them.
    - Go to Certificates and click the Generate/Import button, we can generate them or import files.
  - We also get to choose things like a Certificate Authority. Certificate authority, or CA, is at the top of the hierarchy and it's the one that issues certificates. 
    - Bear in mind that if you generate a self-signed certificate, really, no device will trust it. 
    - Because every device, even mobile phones, such as within a web browser or external to the web browser.
    - Has a list of trusted certificate authorities whose certificates it will trust. 
    - That's why when you connect to online banking, for instance, your web browser or your app on your mobile phone will trust a certificate. 
    - Because it trusts the certificate authority that issued it.
  - This will not be created

