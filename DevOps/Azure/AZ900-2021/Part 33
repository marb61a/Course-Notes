                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 33


Azure SQL Database PowerShell Deployment (Cont)
  - What we are doing is then running new object of type System.Management.Automation.PowerShell or PSCredential
    - The argument list is going to have the username, in this case cirving
    - Then convert to a secure string, a password that is being specified here, within double quotes.
  - Then what's happening is we're building our new Azure SQL database and tying it to our SQL server instance that we've created above
    - We can then call this database db112
  - Add a new Azure SQL Server firewall rule to allow incoming SQL traffic from the appropriate IP address
    - Which happens to be the public IP address for our on-premises environment.
    - Go ahead and run this script by clicking the Run Script button up at the top.
    - After a moment or two, we can see it looks like the script has completed running
    - Check the work in the portal, take a look for sqlsrv3362 and db112.
    - In the portal, I've gone to the All resources view and filtered for anything that starts with SQL, S-Q-L, and we can see indeed, we've got sqlsrv3362.
    - Open that Properties blade up, and go down under Firewalls and virtual networks, we can see our Allow incoming SQL firewall rule that was created.
    - We can also see that we've got DB or database 112 that was created as the result of our PowerShell script.
  - The only other thing to bear in mind is don't leave these database resources running in Azure if you're not using them
    - This because you will pay for using them even if they're running, and you're not actually using them
    - So remove these resources when you no longer need them immediately


Connect to Azure SQL Database
  - Once you've deployed Azure SQL database in the Azure cloud, how do you connect to it?
    - In the Azure portal, we've already deployed Azure SQL database, so there is a SQL server instance and a database already up and running.
  - Go ahead and click on the link to open up the Properties blade for the SQL server instance.   
    - The first thing to do is scroll all the way down under Security and look at Firewalls and virtual networks.
    - We've already added a firewall exception to allow my current client IP address, my public IP.
    - We've also made a firewall rule to allow traffic from this address
    - This is our on-premises public IP as it's known out on the Internet.
    - The other thing that we can do here, is open up the Properties blade for our deployed SQL database in the cloud.
    - From here, we can see the server name that we can simply copy.
  - Go to the on-premises environment and launch the SQL Server Management Studio tool
    - Specifically, this is the Microsoft SQL Server Management Studio tool for SQL Server 2014
    - Click Connect over on the left.
    - What we want to do is connect to a database engine.
    - We want to make sure that I've got the SQL Server name that I copied from Azure listed here, and I do.
  - When we deployed that SQL Server, we specified an admin name of cirving, so that is there
    - We just have to supply the password that I specified when I deployed that SQL server instance
    - Once we've done that, I can go ahead and click on the Connect button.
  - Because the firewall allows connectivity from this host behind a NAT firewall
    - We can see now that we are indeed connected to our Azure SQL database instance
    - Go down under Databases to take a peek, here's db112 or database 112
    - If we flip back to the portal, we can see indeed that is the name of our Azure deployed SQL database.


Azure Database Migration Service
  - The Azure Database Migration Service allows you to keep your existing data and simply move it into the cloud
    - We're talking about moving database workloads from an on-premises IT environment into Microsoft Azure
    - The movement of that data can happen through a site-to-site VPN tunnel that you would have first defined 
    - Between your on-premises network and an Azure virtual network or you might do that movement of data through an ExpressRoute circuit.
  - ExpressRoute does not go through the Internet
    - Instead, it is a dedicated network circuit from your on-premises network directly into the Azure cloud
    - Depending on where you are in the world, this may not be an option
    - Generally, it is conceptually a choice that we at least have to examine when we're going to be moving or migrating data from on-premises into Azure.
  - The Azure database migration process begins with discovery
    - What we're talking about discovering are database items available on-premises
    - The next thing is assessing the workloads that use those databases to determine whether or not they can be migrated into Azure.
  - The convert part of the process means that we want to take a look at the database schema on-premises
    - The schema is the blueprint of what type of data is allowed to be stored
    - We want to make sure that, that schema will function correctly in the Azure environment
    - This is normally not an issue unless, on-premises, you've customized your database schema to support non-standard data types, for example.
  - That's all considered pre-migration in terms of tasks
    - The next thing that we have is to actually migrate the schema and data objects
    - Depending on the amount of data you're talking about and the speed of your network link to the Azure cloud
    - We'll determine how long it will take to bring across very large data sets
  - Next, we've got data synchronization, so the data that's migrated into Azure is kept in sync with on-premises data during this transitory process
    - Finally, at the cutover stage, we actually cut ties with the on-premises data source
    - So there is no longer synchronization between on-premises and Azure cloud hosted data.


SQL Server Migration Assessment
  - The SQL Server Migration Assessment tool allows you to run this on-premises
    - You can assess what you currently have running and which are likely candidates for being migrated into the Azure cloud
  - Go to the Microsoft.com website, and I've searched the downloads for the Migration Assistant
    - We can see here, Data Migration Assistant (v4.2 at the time of this recording), download that tool
  - Once it's downloaded, go ahead and run the installer, so it's called the DataMigrationAssistant.msi, right-click on that and choose Install
    - Choose Next and accept the terms of the license agreement, click Next again, and it'll just go ahead and run the installation.
    - There's a check box here on the installation screen to launch the Microsoft Data Migration Assistant
    - We could launch it after through my Start menu, but go ahead and turn that check mark on, and click Finish
    - Now it's loading the Microsoft Data Migration Assistant.
  - The first thing to do here is click the new button, the plus sign, to create a new migration project.
    - We can build in assessment project, which is what we're going to do
    - To assess our on-premises SQL databases to test their suitability to be migrated to Azure
    - However, we can also actually perform a migration but we're not going to build a migration project here, just assessment
    - The project name here is going to be <City Name>Proj1 because the city is where this is happening on-premises
    - The source server will be SQL, the target will be Azure SQL database, click create, then click Next.
    - Give it some details, such as the name of the on-premises server to be used
  - Fill that in, that's our on-premises SQL server and it uses Windows Authentication, we could choose the appropriate authentication type
    - If unsure what to choose here, talk to your on-prem SQL people and click Connect
  - We will know it's made a good connection because we have a list of valid databases that are being hosted on that SQL server instance
    - This means we can choose one of the databases in question that we are thinking about migrating to Azure, and click Add
    - We can see it's been added here and we can add and remove sources at will here to determine what we want our assessment to be run against
    - We can go ahead and click Start Assessment in the bottom right.
  - Once the assessment is complete, we can see that we are in step 3, where we're reviewing the results
    - We can see our SQL server on-premises listed over here on the left
    - And then we can see our listed items of unsupported features.
    - The service broker feature not being supported in the Azure cloud and when we select that unsupported feature, we get some details listed over on the right
    - We also get some recommendations about what we might be able to do to resolve this issue once the database has actually been migrated into the Azure Cloud.
  - Remember that once you're happy with this, you can actually add an actual migration project,
    - Where you can actually start moving data into the cloud
    - This migration assistant is a great tool then for you to evaluate your on-premises SQL databases 
    - And how likely they are as candidates for running in the Azure cloud.

