                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 34


Azure SQL Geo-Replication
  - To increase fault tolerance and availability for Azure SQL, we have the option of enabling Geo-Replication.
    - We've already got Azure SQL deployed
    - Go to the All resources view, and if I filter that view for anything that has a prefix of SQL, we can see both.
    - We've got a SQL Server and a single SQL database instance hosted on that server.
  - Click on the server to open up its Properties blade, you'll notice that we don't have any options related to Geo-Replication, at least not at the server level
    - Back out of that, if we go into the database property sheet, notice that Geo-Replication is an option.
  - Currently, we can see that we've got an area on the map here in Eastern Canada 
    - This is where we've currently got our current SQL database deployed That's the Azure region or location.
  - We can see the status of that replica is that it's online
    - Down below, it says for secondaries, Geo-Replication is not configured, and we can see here the list of target regions.
    - For example say we want this to be replicated to Canada Central as a different region.
  - The secondary type is by default set to a readable replica of our Azure SQL database
    - Then for the target server, we have to configure settings which means that we need another Azure SQL server instance
    - If we don't have one then we have to create one here. So I'm going to call this sqlsvr172_central
    - Notice that it's going to tell me over here if it likes underscores, upper case letters, lower case letters
    - Notice here, it doesn't like a lot of the items that are specified here in the name.
    - Call it soemthing that will keep to the naming schema eg sqlsvr172central
    - Then specify the credentials and password here which do not have to be the same as they are for the primary server holding the master writable replica.
    - Once that's been filled in, go ahead and click Select.
  - Rally we're creating a new SQL Server instance to accommodate our Geo-Replication to a different Azure region
    - Leave the standard pricing tier as it is, and then click OK.
  - Currently, we have a message about the deployment being in progress up here in the upper right in the Azure portal.
    - Scroll up here, and take a look here, after a moment, we'll see that it will reflect that we've got Geo-Replication 
    - From one of our regions to the other
    - Very quickly there will be a little check mark in these regions that are filled in with the solid color
    - You can see the other regions that are not filled in, and they do not have a check mark
    - Therefore, we don't have a replica of this SQL database in those locations.
  - Scroll down, we can see that represented in textual form
    - Not only do we have our original online master replica in our region listed here at the top
    - But we can also see we've got a secondary now in the other region, and it's currently listed as being readable.
  - Click the ellipsis button, the three dots with the context menu next to the word readable
    - We will have the option to force a failover which essentially promotes this to be the primary replica
    - And the other current primary would then become a secondary although it does say that this can cause some data loss while you're doing this
    - Notice that we do have the option also of stopping replication, for example if there's a failure or a disaster in our primary region


NoSQL Overview
  - In the Microsoft Azure Environment, you can choose to deploy a SQL compliant type of database or a NoSQL database
    - It's important to know the difference between the two
    - With NoSQL databases, we have a less rigid schema than with a traditional, relational database, such as MySQL or Microsoft SQL Server
  - The schema, remember, is the blueprint of what type of data is allowed to be stored
    - With NoSQL, it's really designed to be much less structured to allow or accommodate for the storage of many different types of data
    - NoSQL is also designed for high scalability because it's really what is often used to work with very large data sets.
  - High performance and availability are a big part of NoSQL. Essentially, the manipulation and analysis of big data
    - With NoSQL, each stored row can actually store different types of data
    - That's unlike a relational database structure that has a blueprint or schema that defines exactly what can be stored in each row within a table
  - We don't have that kind of structured limitation with a NoSQL database
    - There are a number of different types of storage configurations for NoSQL databases, such as key and value pairs
    - Or NoSQL document stores, or graph database stores, but in the end, a NoSQL database is not relational.
  - NoSQL uses horizontal scaling extensively as a traditional relational database system can as well.
    - What this means is scaling out, as we see pictured in the diagram by adding database servers to handle the workload
    - This can be done for clustering purposes, for load balancing, and for replication of data.
  - Common NoSQL products include Azure CosmosDB, Azure Redis memory caching, which allows us to take data and cache it in memory
    - Data that is accessed frequently, so that subsequent requests are a service from the cache, which is much quicker than reading it from disk.
  - There are also numerous database options, including for NoSQL available to the Azure marketplace
    - You can choose to deploy a new Virtual Machine instance that has a variety of different NoSQL products installed and configured for you already.


CosmosDB
  - Azure CosmosDB is a NoSQL database option available in Microsoft Azure. So it's a NoSQL solution that is globally distributed across Azure regions. 
    - This global distribution means that users can contact the nearest replica of CosmosDB to work with the data. 
    - That way, there's a better user experience instead of accessing it across multiple Azure regions.
  - Azure CosmosDB supports default encryption of data at rest
    - It's used by a lot of popular services that you've probably heard of, like Xbox, Office 365, and Skype
    - When you start to deploy Azure CosmosDB, you begin by creating an Azure CosmosDB account, as we'll see in another demonstration
    - You also get to select the appropriate API for the account type
  - Now, we might choose, for example, a certain type of account type like Gremlin if we want to use graph databases
    - Or MongoDB if we're using a document type of database, and so on
  - We can import data into CosmosDB from a number of different sources, including SQL databases
    - Even though CosmosDB is generally considered NoSQL, we still have the option of bringing in SQL data to store it in here
    - We also can specify CSV or comma separated value files as a data source or JSON files, and even standard NoSQL compliant databases like MongoDB.


Deploy CosmosDB
  - Microsoft Azure CosmosDB is a great choice when you have vast amounts of unstructured data that you want to store and manage in the cloud
    - Start here in the left-hand navigator in the Azure Portal by clicking Create a resource, and I'll search for cosmos.
    - From here, I'll choose Azure Cosmos DB, and then I'll click Create.
    - The first thing I'll do is place this into a resource group, and then, down below I need to create a Cosmos DB account name.
  - Call this something appropriate for example cosmosdb-acct172
    - Be careful because in some cases in Azure if you start to use weird symbols like underscores, it'll tell you
    - Luckily we have this kind of easy notification that there's something wrong with the name, so, just be aware of that.
  - For the API, we can determine exactly what it is we want to configure Cosmos DB as because really it's kind of like a multi-model type of solution
    - So, do we want to treat it as a core SQL solution?
    - Or do we want it to adhere to the MongoDB API standard, or Cassandra
    - Or is it a table type of data store or a graph type of NoSQL data store?, in this example choose Azure Cosmos DB for Mongo DB API.
  - We would do that if we knew that we had perhaps an application or some code that was already written that needs to talk to the MongoDB API to access data
    - We are going to specify an appropriate location.
    - We are also going to disable geo-redundancy
    - That was enabled by default for Cosmos DB, we also want to leave multi-region writes disabled since we've disabled geo-redundancy
    - When we click Next, we then have to place this into an Azure Vnet, so choose a Vnet and a subnet.
  - Right now it's set to allow access from the Azure Portal, which is great
    - We can use this portal GUI interface to make a connection to my Cosmos DB and also to connect to it and look at performance metrics and things of that nature.
    - Conveniently, it also has our current public IP address listed here, and click Allow to add what is essentially, a firewall exception for CosmosDB
    - So that if we need to get in from on-premises, maybe we are using a MongoDB GUI management tool
    - That we will be able to get in, or maybe there are some code segments running on-premises on a server that need 
    - To talk in Azure to our Cosmos DB to work with that, turn on Allow for that and click Next for tagging.
