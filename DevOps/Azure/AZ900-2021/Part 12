                    AZ900 Microsoft Azure Cloud Fundamentals 2021
                    Course Notes Part 12


Azure Blob Storage GUI Management (Continued)
  - Click Next to review settings
    - It maybe running a file validation based on my selection looks good, so go ahead and create the BlobStorage account.
  - We can see clearly our deployment is underway, we have a link here to our new storage account down below
    - Notice on the left also, we've got a view just for Storage accounts.
  - Click that, to see any storage accounts
    - Remember, if you don't see your new storage account here, you can always click Refresh until such time that it shows up and the deployment has completed. 
    - Our account should be showing up here, I'm going to click on the link for he name of my storage account to go and do its properties blade
  - There are a number of things that I can do here
    - For example, if I scroll all the way down, I can click on Blobs and it says, we don't have any containers yet.
    - Remember, containers are kind of like folders used to organize Blobs, click Container and then name properly
  - Then down below I can determine whether it should be private, so no anonymous access allowed. 
    - Or anonymous read access for the blob only, or anonymous read access for containers and blobs. 
    - Start with Private (no anonymous access); OK, and after a moment there's the pics container
    - Click it to open it up. That gives me a new properties blade related to the container, and from here I can upload Blobs.
    - Go ahead and upload Blobs. When I do that on the far right, I'll click the Select a file button.
  - After selecting a local file, and you can have multiple files
    - Open up Advanced to specify details about the upload whether it should be treated as a block blob or an append blob. 
    - In this case it's going to be a block blob.
  - Click Upload and after a moment we can see it's uploaded the file, it will be showing up right here in the list
  - Click on it to see some details, or properties related to it. Notice that by default server-side encryption is enabled for protection of data at rest. 
    - What I'm going to do then for the URL is click the little copy icon
    - Open a new web browser window, we're going to see if we can access this Blob data, over HTTP using a web browser.
    - Paste that URL up here, by default there should be an error message, resource not found.
    - That's because we didn't allow anonymous access, if you recall.
  - Go back into Azure, back to the point where we can actually go into our folder. 
    - You should be looking at the overview on the left
    - Click the Change access level button at the top and here it is, private (no anonymous access). 
    - Choose Blob (anonymous read access for blobs only).
  - Click OK to try this, it says it successfully applied the change. 
    - Go back into our browser here where previously it failed, and refresh it now we have access to the image. 
    - We can see how we can build a storage account and configure a variety of Blob Storage options, 
      - Then how we can start to work with content in the Blob Storage account.


Azure Blob Storage CLI Management
  - You can use the Azure CLI to manage Azure storage accounts and the contents within them.
  - Build a new storage account in Azure, az login has been run, and authentication to my Azure account is done. 
    - The next thing to do here is to run the az storage account create, command prefix
    - Use -n for name, and call this store something. 
    - Make sure you adhere to the naming standards for Azure resources in your organization.
  - Then I'm going to use -g and specify if I want this deployed in a resource group previously created eg rg1
    - Use the -l switch for location, or Azure region and then --sku to determine the type of replication I want. 
    - In this case use "Standard_LRS". That's locally redundant storage replication, essentially within an Azure datacenter
      - as opposed to geo-redundancy across regions.
  - Go ahead and do this and press Enter.
    - This going to create the storage account, and it's going to be called what you wanted. 
    - We can see it's returned a lot of information about what it's just done. 
    - What we're looking for here is the provisioningState being set to Succeeded
      - clear the screen and run az storage account list.
  - Again, I'm going to get a lot of information for each storage account, which is fine
    - If I just want to see the names of the storage accounts use the up arrow key to go through my previous command history
    - Then use a vertical bar or pipe symbol, now you can shift your backslash key on your keyboard to get that. 
    - Which means I want to take the result of the command on the left and feed it into what I'm about to specify to the right of the pipe. 
    - This is the Windows find command.
    - Tell it in quotes I'm looking for "name", N-A-M-E which is a little more digestible. 
    - Here I can quickly determine that yes, our new storage account, stor1988, has been created
    - When you want to work with a storage account, let's say programmatically as a developer
    - Or like we are here in a command line environment, you need an access key
    - Here in the portal, if I go to the Storage accounts view, I can see our storage account is there. 
    - If I click on it, there's access keys shown here in the Properties blade.
  - There are couple of access keys, key1 and key2, and you can regenerate them independently of one another. 
    - That one could still be used by code that might reference a specific connection string or a key. While the other one, you are changing, because from a security standpoint, it's pretty smart to change keys periodically to enhance security. Now I could copy the keys here.
  - Copy for example the first key. It doesn't matter which one you use when you are using command line tools or programmatic access. 
    - At the CLI you might wonder, well how do I do that from the CLI? 
    - How do I list keys? Well you can if you really want to. 
    - You would run az storage account keys list, and then you'll see the same type of thing that we would have looked at. 
      - There will be an error because I didn't tell it which storage account which may be useful.
  - Continuing the example --account-name stor1988, and then the resource group we have to specify too, --resource-group, in this case, rg1. 
    - Then tell it --output, in tabular format, so table
    - This means being able to easily digest Key1 and Key2
    - This then could be highlighted and copied this might make you wonder, why do we care? 
    - Why do we have to copy it, it is because I want to create a container in my storage account and then upload an on-premises file into that container.
  - This cannot be done until you start working with the access key, one of them, either one, it doesn't matter
    - To start clear the screen, and what I want to do is I want to create a container, so az storage container create. 
    - If unsure what to do from here, use --help to get help on what follows next, along with examples.
  - At the end to create my storage account container, specify name, --name. 
    - For example pictures to hold images, --account-name, with the two c's here. Is going to be stor, S-T-O-R 1988
    - That's not all I need because I need the account keys. 
    - Use --account-key and just paste that key in there
    - There is no need to memorize that, so you can also stuff that into a variable or work with it however you please. 
      - Go ahead and press Enter to build that container,
    - It looks like it says "created": true. Well, that's good news. 
    - In the current directory on drive C called samplefiles, if I do a dir, I've got a file called img.jpg.
  - Upload that. So do that, I'm going to run az storage blob upload, that makes sense, and then I'm going to use --container-name, 
    - Which in this case is pics --name. What do you want to call the blob? 
    - Call it the same thing, img.jpg --file,  Where's the file? that would be c:\samplefiles\img.jpg.
  - There are no spaces in my folder or filename so I don't need to put anything in quotes
    - Bear in mind, that could be an issue depending on how you're doing this. 
    - This has to be tied to my storage account, for example, --account-name is stor1988
    - Ensure we type that in correctly. It'll always give us errors if we don't spell things correctly, so it's not a problem to quickly fix them. 
    - The next thing is the account key, of course, --account-key which can be pasted that in there. 
    - Assuming the syntax is correct, press Enter, it will upload that file
    - After this has finished go to the portal to check.
  - When we were last here in the portal, we were looking at our storage account properties blade and we had gone to the access keys. 
    - Drill down a bit further down, shall we? Let's go down into Blobs, and there's the pics container, and
    - There is the img JPG file. So we can work with this if we need to using the Azure CLI.

