                    Functional PHP 7
                    Course Notes


                    Section 1 - PHP 7 CRASH COURSE
1 - The Course Overview
Brief intro to the instructor & the course
There are a few different reasons to learn Functional Programming
  - It is very high in the minds of programming communities
  - There is widespread industry and platform adoption
  - It provides an alternative paradigm to OOP
  - It allows developers to enhance their skills
There are some prerequisites
  - PHP 7.1 on any OS
  - A lightweight IDE
  - Composer for dependency management
  - A desire to learn

2 - Static Versus Dynamic Typing
The differences between static and dynamic typing can be unclear sometimes
Static
  - The type of variable is known at compile time
  - Code correctness is ensured by the compiler
  - It is more verbose
  - Explicitly declare variables with their type before use
  - Languages such as C, C++, Java
Dynamic
  - The type of variable is known at run time
  - Type issues manifest at runtime
  - Code is much more succinct
  - There is no need to define variables beforehand
  - PHP < 7, Python, JS
The reason PHP before 7 is said is that in PHP7 there is gradual typing
  - You can turn on type checks
    - Example Syntax -- declare(strict_types=1)
  - Code is more correct and self documented
  - This helps both code completion by IDE's and static code analysis
Example Syntax
  // An example of a strictly typed function
  // The declaration is the first line in a file 
  declare(strict_types=1);
  
  // both the input type of string and returntype of array are guaranteed
  function toCsv(string $csv): array{
    return explode(',', $csv);
  }
  
  toCsv('The,quick,brown,fox,jumped,over,the,lazy,dog');
  
  // Arrays are zero indexed so 
  array([0] => The, [1] => quick etc);

3 - The Closure Class
There are some things necessary to understand
  - Functions are first class objects
  - Functions are instances of the closure class
    - Anonymous functions (AKA Lambda Expressions)
  - Functions have methods
  - They bind to objects
Example Syntax
  // The objective of this code is to map over an array
  $factor = 10;
  
  // The mapping function is called a callable as it has no name and is an anonymous function
  // The use keyword brings the $factor variable into the closure
  $result = array_map(function(int $number) use ($factor): int {
    return $number * $factor;
  }, [10, 20, 30]);
  
  Array(
    [0] => 100
    [1] => 200
    [2] => 300
  )
A closure is defined as a lexical scope that is formed around a function declaration
  - Function scopes get inherited

Example Syntax
  // Anonymous functions or Lambda Expressions
  $source = {1, 2, 3, 4, 5];
  
  array_reduce(
    array_map(($x) => pow($x, 2), $source),
    ($x, $y) => $x + $y);

4 - Higher-Order Functions



                    Section 2 - WHY CONSIDER FUNCTIONAL PROGRAMMING?
1 - Reasoning About Your Code

2 - Declarative Programming

3 - Testable Functions



                    Section 3 - FUNDAMENTALS OF FP
1 - What Is Functional Programming?

2 - Pure Functions

3 - Loops Versus Recursion

4 - FP Transformation



                    Section 4 - FUNCTIONAL EVALUATION STRATEGIES
1 - Lazy Versus Eager Evaluation

2 - Partial Function Application

3 - Currying



                    Section 4 - COMPOSITION
1 - The Composer Of Functions

2 - Defining Composition

3 - PRamda Functional Library

4 - Auto-Currying And Composition

5 - Course Summary
A quick summary of what the course has covered. 
There are also some quick final words from the instructor.
