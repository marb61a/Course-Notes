                    PHP 7 Programming Solutions 
                    Course Notes


                    Section 1 - BUILDING A FOUNDATION
1 - PHP 7 Installation Considerations
This is intended as a quick start section
There are 3 primary means of acquiring PHP7
  - Downloading and installing from source code
    - This gives the best control but can be tedious
    - You will need to have a C compiler eg MinGW or Visual Studio has a built in compiler on Windows
    - On Linux run gcc
    - When installing from a command line the procedure is 
      - Configure -> Make -> Make Test -> Make Install 
      - Use the help -> configure --help
  - Installing pre-compiled binaries
    - This will be platform dependent
    - On my my Ubuntu system, the command will be
      - sudo apt-get install php7
      - The graphical Synaptic tool can also be used but PHP 7 must be chosen not PHP5
  - Installing an *AMP package eg WAMP, LAMP etc

2 - Using PHP Server, Defining MYSQL, and Installing PHPUnit
Using a web server
  - This is an obvious way to test your applications
  - Develop a virtual host definition for a web server
  - An easy to use alternative is to use the built in PHP 7 web server
To activate the local PHP server
  - Navigate to the appropriate folder
  - At the command line type the following command
    - php -s localhost:8080
    - You can use the -t flage and folder path to specify alternative document root
      - This is a security measure and is a requirement of some PHP frameworks including Zend
Defining a test MYSQL db
  - There is sample data included with the course available at
    - https://github.com/dbierer/php7cookbook
  - This also includes the setting information needed to setup the MySQL db with appropriate settings
Installing PHPUnit
  - This is the most porpular means of testing PHP code
  - A solid suite of tests is a requirement for any well developed applications
  - Few developers actually write these tests
  - Some luck few have an independent group to write tests for them
  - PHPUnit is available at the following address
    - https://phpunit.de
  - The phar command
    - This stands for PHP archive
    - It is based on tar
    - It is a collection of PHP files packed together into a single file

3 - Implementing Class Autoloading
There are both advantages and disadvantages in PHP OOP placing each class in its own file
  - The main advantage is the ease of maintenance and the improved readability
    - This is the recommended approach
  - The major disadvantage is that each class definition must be included
    - Whether using include or its variants
PHP has a function for auto-loading classes that have not been loaded
  - In order to use autoloading there needs to be a global _autoload() function
  - This is a special function which is called automatically by the PHP engine
  - The name of the requested class will appear as a parameter when _autoload() is invoked
  - Because _autoload() is a function is must be in the global namespace
  - There are limitations to this approach
  - The section will show the spl_autoload_register() function which gives greater flexibility
Example Syntax
  // Loader.php file
  <?php
    //autoload classes as needed
    namespace Application\Autoload;
    
    class Loader {
      const UNABLE_TO_LOAD = "Unable to load class";
      
      // Array of directories
      protected static $dirs  = array();
      protected static $registered = 0;
      
      protected static function loadFile($file){
        if(file_exists($file)){
          require_once $file;
          return TRUE;
        }
        
        return FALSE;
      }
    }
  ?>

4 - Hoovering a Website

5 - Building a Deep Web Scanner

5 - Creating a PHP 5 to PHP 7 Code Converter



                    Section 2 - USING PHP 7 HIGH PERFORMANCE FEATURES
1 - Understanding the Abstract Syntax Tree

2 - Understanding Differences in Parsing

3 - Understanding Differences in foreach() Handling

4 - Improving Performance Using PHP 7 Enhancements

5 - Iterating Through a Massive File

6 - Uploading a Spreadsheet into a Database

7 - Recursive Directory Iterator



                    Section 3 - WORKING WITH PHP FUNCTIONAL PROGRAMMING
1 - Developing Functions

2 - Hinting at Data Types

3 - Using Return Value Data Typing

4 - Using Iterators

5 - Writing Your Own Iterator Using Generators



                    Section 4 - WORKING WITH PHP OBJECT-ORIENTED PROGRAMMING
1 - Developing Classes

2 - Extending classes

3 - Using Static Properties and Methods

4 - Using Namespaces

5 - Defining Visibility

6 - Using Interfaces

7 - Using Traits

8 - Implementing Anonymous Classes



                    Section 5 - CORE PROGRAMMING
1 - Using PDO to Connect to a Database

2 - Building an OOP SQL Query Builder

3 - Handling Pagination

4 - Defining Entities to Match Database Tables

5 - Tying Entity Classes to RDBMS Queries

6 - Embedding Secondary Lookups into Query Results

7 - Implementing jQuery DataTables PHP Lookups



                    Section 6 - BUILDING SCALABLE WEBSITES
1 - Creating a Generic Form Element Generator

2 - Creating an HTML Radio Element Generator

3 - Creating an HTML Select Element Generator

4 - Implementing a Form Factory

5 - Chaining $_POST Filters

6 - Chaining $_POST Validators

7 - Tying Validation to a Form



                    Section 7 - ACCESSING WEB SERVICES
1 - Converting between PHP and XML

2 - Creating a Simple REST Client

3 - Creating a Simple REST Server

4 - Creating a Simple SOAP Client

5 - Creating a Simple SOAP Server



                Section 8 - LOOKING AT ADVANCED ALGORITHMS
Using Getters and Setters
Implementing a Linked List
Building a Bubble Sort
Implementing a Stack
Building a Binary Search Class
Implementing a Search Engine
Displaying a Multi-dimensional Array and Accumulating Tools



IMPLEMENTING SOFTWARE DESIGN PATTERNS
Creating an Array to Object Hydrator
Building an Object to Array Hydrator
Implementing a Strategy Pattern
Defining a Mapper
Implementing Object-Relational Mapping
Implementing the Pub/Sub Design Pattern



IMPROVING WEB SECURITY
Filtering $_POST Data
Validating $_POST Data
Universal Error Handler
Securing Forms with a Token
Building a Secure Password Generator
Safeguarding Forms with a CAPTCHA
Encrypting/Decrypting without mcrypt



BEST PRACTICES, TESTING, AND DEBUGGING
Using Traits and Interfaces
Universal Exception Handler
Universal Error Handler
Customizing Sessions Using the session_start Parameters
