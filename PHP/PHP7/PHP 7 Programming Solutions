                    PHP 7 Programming Solutions 
                    Course Notes


                    Section 1 - BUILDING A FOUNDATION
1 - PHP 7 Installation Considerations
This is intended as a quick start section
There are 3 primary means of acquiring PHP7
  - Downloading and installing from source code
    - This gives the best control but can be tedious
    - You will need to have a C compiler eg MinGW or Visual Studio has a built in compiler on Windows
    - On Linux run gcc
    - When installing from a command line the procedure is 
      - Configure -> Make -> Make Test -> Make Install 
      - Use the help -> configure --help
  - Installing pre-compiled binaries
    - This will be platform dependent
    - On my my Ubuntu system, the command will be
      - sudo apt-get install php7
      - The graphical Synaptic tool can also be used but PHP 7 must be chosen not PHP5
  - Installing an *AMP package eg WAMP, LAMP etc


2 - Using PHP Server, Defining MYSQL, and Installing PHPUnit

3 - Implementing Class Autoloading

4 - Hoovering a Website

5 - Building a Deep Web Scanner

5 - Creating a PHP 5 to PHP 7 Code Converter



                    Section 2 - USING PHP 7 HIGH PERFORMANCE FEATURES
1 - Understanding the Abstract Syntax Tree

2 - Understanding Differences in Parsing

3 - Understanding Differences in foreach() Handling

4 - Improving Performance Using PHP 7 Enhancements

5 - Iterating Through a Massive File

6 - Uploading a Spreadsheet into a Database

7 - Recursive Directory Iterator



                    Section 3 - WORKING WITH PHP FUNCTIONAL PROGRAMMING
1 - Developing Functions

2 - Hinting at Data Types

3 - Using Return Value Data Typing

4 - Using Iterators

5 - Writing Your Own Iterator Using Generators



                    Section 4 - WORKING WITH PHP OBJECT-ORIENTED PROGRAMMING
1 - Developing Classes

2 - Extending classes

3 - Using Static Properties and Methods

Using Namespaces
Defining Visibility
Using Interfaces
Using Traits
Implementing Anonymous Classes



CORE PROGRAMMING
Using PDO to Connect to a Database
Building an OOP SQL Query Builder
Handling Pagination
Defining Entities to Match Database Tables
Tying Entity Classes to RDBMS Queries
Embedding Secondary Lookups into Query Results
Implementing jQuery DataTables PHP Lookups



BUILDING SCALABLE WEBSITES
Creating a Generic Form Element Generator
Creating an HTML Radio Element Generator
Creating an HTML Select Element Generator
Implementing a Form Factory
Chaining $_POST Filters
Chaining $_POST Validators
Tying Validation to a Form



ACCESSING WEB SERVICES
Converting between PHP and XML
Creating a Simple REST Client
Creating a Simple REST Server
Creating a Simple SOAP Client
Creating a Simple SOAP Server



LOOKING AT ADVANCED ALGORITHMS
Using Getters and Setters
Implementing a Linked List
Building a Bubble Sort
Implementing a Stack
Building a Binary Search Class
Implementing a Search Engine
Displaying a Multi-dimensional Array and Accumulating Tools



IMPLEMENTING SOFTWARE DESIGN PATTERNS
Creating an Array to Object Hydrator
Building an Object to Array Hydrator
Implementing a Strategy Pattern
Defining a Mapper
Implementing Object-Relational Mapping
Implementing the Pub/Sub Design Pattern



IMPROVING WEB SECURITY
Filtering $_POST Data
Validating $_POST Data
Universal Error Handler
Securing Forms with a Token
Building a Secure Password Generator
Safeguarding Forms with a CAPTCHA
Encrypting/Decrypting without mcrypt



BEST PRACTICES, TESTING, AND DEBUGGING
Using Traits and Interfaces
Universal Exception Handler
Universal Error Handler
Customizing Sessions Using the session_start Parameters
