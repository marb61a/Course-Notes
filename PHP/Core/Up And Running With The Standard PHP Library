                    Up And Running With The Standard PHP Library 
                    Course Notes
                   
                   
                   Section 1 - Introduction
1 - Welcome
Quick introduction to both
  - The author
  - The material to be covered by the course
The SPL, as it's known, is a collection of really useful classes for traversing, filtering and sorting files, data, and objects.

2 - What you should know before watching the course
The instructor says that this is an intermediate course so you need to be comfortable writing PHP scripts.
Most of the exampls involved will only be a few lines but you will need to be comfortable with PHP syntax
Virtually every feature in the standard PHP library is object oriented
Some features are abstract classes so you'll need to know what an abstract class is and how you can extend it

3 - Using the exercise files


                   
                   Section 2 - Introducing the Standard PHP Library (SPL)
1 - What is the Standard PHP Library
The SPL was introduced in PHP 5 and has been part of the language since 2004
Since 5.3 it has become a default component and cannot be disabled
According to PHP documentation is a collection of of interfaces and classes that are meant to solve common problems, in other words
it defines a series of structures such as such as doubly linked lists, stacks, queues and heaps.

2 - Introducing SPL Iterators
Iterators are regarded as a very useful aspect of the SPL
Iterators are a series of classes that make it easy to traverse a structure including arrays etc
Iterators can be chained which can be very advantageous
Internally, all iterators implement the iterator interface which has 5 methods
  - Rewind moves the iterator back to the first element.
  - Key returns the key of the current element.
  - Current returns the value of the current element
  - Next moves to the next element 
  - Valid checks whether there's another element to move to

3 - Using SPL Iterators
All SPL iterators are built in classes
This means that you create an iterator by creating an instance of the class using the New keyword
Many of the Iterators allow you to set options using class constants
This means that the constant is preceeded by the class name and the scope resolution operator which is two colons 
  - Example Syntax
  FilesystemIterator::SKIP_DOTS
 This constant sets the options to skip the dot files which represent current and parent directories
You can set options either at the same time as you are instantiating or by using the Iterators setFlags() method
You are able to chain Iterators to finely tun which of the elements as selected during a traverse of a structure
For example, the following uses file system iterator to traverse the current directory.
  - Example Syntax
    $dir = new FilesystemIterator('.');
    By default, this will include every file.
To restrict this to jpeg files you can pass the first iterator as an argument to RegexIterator like here
  - Example Syntax
    $dir = new FilesystemIterator('.');
    $jpegs = new RegexIterator($dir, '/\.jpg/i');
You are able to restrict it even further by passing it as an argument to LimitIterator
  - Example Syntax
    $dir = new FilesystemIterator('.');
    $jpegs = new RegexIterator($dir, '/\.jpg/i');
    $second_two = new LimitIterator($jpegs, 2 , 2);
The second argument to LimitIterator specifies the offset at which to begin counting from 0
The third argument specifies how many elements to traverse.
The result of the above chain is to select the third and fourth jpegs in the current directory
You can then use a foreach loop to do something with the files
  - Example Syntax
    foreach($second_two as $file){
      // do something with the $file
    }
Although working with a foreach loop may make it feel like working with an array you are not
Every element in the loop is an object which is very important to remember when traversing a filesystem
Usually there is no need to convert an iterator to an array but it is easy to do so using
  - iterator_to_array()

                   
                   
                   Section 3 - Exploring Files And Directories
1 - Inspecting single directories with DirectoryIterator

2 - Inspecting single directories with FilsesystemIterator

3 - Inspecting directories reursively with RecursiveDirectoryIterator

4 - Getting information about files with SplFileInfo

5 - Working on text files with SplFileObject

6 - Using SPLFileObject to convert a CSV to an array

7 - Exporting data to a download file with SplTempFileObject


                   
                   Section 4 - Filtering Values
1 - Filtering a directory with GlobIterator

2 - Using regular expressions to filter directories with RegexIterator

3 - Extracting data from XML with RegexIterator and SimpleXML

4 - Specifying a range of items with LimitIterator

5 - Creating a custom filter with CallbackFilterIterator

6 - Creating a recursive callback filter

7 - Extending FilterIterator to create a reusable filter

8 - Creating a custom filter with RecursiveFilterIterator

9 - Overriding the RecursiveFilterIterator constructor

10 - Using ParentIterator to find elements that have children
 
 
 
                   Section 5 - Array Iterators
1 - Converting between arrays and iterators

2 - Filtering values from JSON

3 - Using multidimensional arrays with iterators

4 - Extending RecursiveIteratorIterator to build nested lists


                   
                   Section 6 - Combining And Merging Iterators
1 - Combining iterators with AppendIterator

2 - Merging values from different iterators with MultipleIterator                   
                  
                  
                   
                   Section 7 - Other Iterators
1 - Creating a repeat sequence with InfiniteIterator

2 - Treating the final element differently with CachingIterator

3 - Using RecursiveCachingIterator with multidimensional structures

4 - Generating an ASCII graphic tree with RecursiveTreeIterator

5 - NoRewindIterator and EmptyIterator                   
                   
                   
                   Section 8 - SPL Data Structures
1 - Doubly Linked Lists, Stacks, Queues

2 - Sorting XML and JSON with 

3 - Using SplStack and SplQueue

4 - Understanding heaps

5 - SplMinHeap and SplMaxHeap

6 - Sorting XML and JSON with SplHeap

7 - Finding important information with SplPriorityQueue

8 - Keeping priority items in chronological order

9 - Speeding up array access with SplFixedArray


                   
                   Section 9 - Conclusion
1 - Goodbye 
