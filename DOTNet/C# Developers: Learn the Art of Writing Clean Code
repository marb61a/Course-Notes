                    C# Developers: Learn the Art of Writing Clean Code
                    Course Notes
A lot of the concepts discussed can easily applied to other languages


                    Section 1 – Introduction
1 - About the Course
A high level introduction to the syllabus of the course

2 - About Your Instructor
A brief bio of the instructor

3 - Source Codes
A link to the project source coude used in the course

4 - Asking Questions
How to ask questions on the Udemy site



                    Section 2 – Common Code Smells
1 - Poor Names
Poor names are a very common code smell
  - There are a few different categories
  - Mysterious Names  -- Names that force you to look elsewhere to understand the meaning
    - SqlDataReader dr1;                            // Clearer to use dataReader/reader
    - int od;                                                         overdueDays
    - void Button1_Click();                                           CheckAvailability_Click()
    - class Page1 {}                                                  ViewCustomerPage
  - Another type of poor naming is Meaningless Names
    - void BeginCheckFunctionality_StoreClientSideCheckboxIDsArray();
    // This will force you to look at the implementations
    // There is also likely to be multiple puropses in the method which again is poor practice
    // When a function has more than 10 lines of code it is probably doing too many things
  - Names With Encodings
    - int iMaxRequests;
      - This type of prefixing variables with data type is called Hungarian Notation
      - There is no need to use this in IDE's
    - var m_objCollection = new StringCollection();
      - If for example it was used to store country names then is name should be countryNames
  - Another category is Ambiguous Names
    - bool MultiSelect() {}
    // Data type is nullable integer
    - int? incidentNameId;
  - Noisy Names
    - Customer theCustomer                           // Should be just customer 
    - List<Customer> listOfApprovedCustomers;        //                approvedCustomers
Example Syntax
  // The example uses Visual Studio to demonstrate code
  // The example also avoids using manual renaming to ensure that there are no
  // code breakages caused by renaming, find and replace is also not recommended
  // instead a Visual Studio plugin called resharper is used to automate the renaming process
  using System.Drawing;

  namespace CleanCode.Names
  {
      public class Names
      {
          public Bitmap Method1(string n)
          {
              var b = new Bitmap(n);
              var g = Graphics.FromImage(b);
              g.DrawString("a", SystemFonts.DefaultFont, SystemBrushes.Desktop, new PointF(0, 0));
              g.DrawString("b", SystemFonts.DefaultFont, SystemBrushes.Desktop, new PointF(0, 20));
              g.DrawString("c", SystemFonts.DefaultFont, SystemBrushes.Desktop, new PointF(0, 30));
              return b;
          }
      }
  }

2 - Poor Naming Conventions

3 - Poor Method Signatures

4 - Long Parameter List

5 - Output Parameters

6 - Variable Declarations on the Top

7 - Magic Numbers

8 - Nested Conditionals

9 - Switch Statements

10 - Duplicated Code

11 - Comments

12 - Long Methods



                    Section 3 - Complete Refactoring Examples
1 - WebForms Example - Part 1

2 - WebForms Example - Part 2



                    Section 4 - Additional Resources
1 - Final Words

2 - Get My Other Courses with a Discount
Links to coupon codes for courses by the same instructor
