                    Entity Framework Core: Getting Started
                    Course Notes



                    Section 1 - Course Overview
1 - Course Overview
Introduction to the course and the author
  - .NET is becoming more cross platform and Entity Framework is making the same transition
  

                    Section 2 - Introducing a New, Lightweight Version of EF
1 - Introduction
This course is designed with a certain type of person in mind
  - New to EF\EF Core
    - EF Core has be rewritten from scratch
    - If new to Entity Framework you will learn why you would use it
  - CTO\Manager

2 - Course Overview
The course is designed to provide a thorough introduction to EF Core
A high level overview of the syllabus of the course

3 - Module Overview
An overview of the material to be covered in the module
  - This module will consist of high level conceptual material

4 - What Is Entity Framework?
Entity Framework is the set of .NET API for performing Data Access in softwrae
  - It is the official MS tool for data accessing
A brief history of EF
Entity Framework is a part of a class of software called Object Relational Mappers
  - ORM software reduces friction between classes and how data is stored in relational databases
  - Without an ORM there would be a lot of code needing to be written to transform database data to class instances
  - There is a lot more to EF and ORM in general but the above is the main purpose
EF is different than many other ORM applications
  - Other ORM apps infer that the Database tables and classes are of a similar structure
  - On the other hand EF has a mapping layer inbetween which increases flexibility
  - EF does start these mapping with some assumptions which are referred to assumptions
Entity Framework increases developer productivity and provides consistency in tbe tasks that it does
  - There is of course a learning curve involved especially for advanced features
  - In simpler scenarios the learning curve can be relatively quick
EF makes use of LINQ syntax
  - LINQ-to-entities allows for a consistent and strongly typed query language
  - LINQ-to-objects allows for querying other parts of .net
  - Do not blindly use tools

5 - What Is Entity Framework Core?
EF Core was first released in June 2016
Entity Framework Core is a lightweight and extensible version of EF
The are some main themes from .NET Core in addition to new features
  - That it should be built using lightweight composable API
  - It should also be cross platform to run on multiple operating systems
  - It should also be built using modern software development practices
EF Core is Open Source and is available on Github
  - https://github.com/aspnet/EntityFrameworkCore

6 - Where Can You Use EF Core?
EF Core runs on .NET Core
.Net Core runs both inside .NET and separately on other platforms such as Linux
  - You can also use it on UWP
  - Bear in mind that although it can work it may to better to use a different approach
    - Using Linux etc means the you have to run .NET Core on Windows you can run .NET and EF6

7 - EF6 Features Not Coming to EF Core
Some EF features will not come to EF Core at all
  - There is no EDMX Designer
    - The course instructor has not used this feature and uses Code-First approach
  - There are 3rd party tools available though

8 - How Entity Framework Works
A high level look at how Entity Framework operates, 4 cmain areas
  - Domain Classes which have nothing to do with EF but just defines classes
  - EF API to define a Data Model based on those classes, generate LINQ queries and save changes
  - Track changes, build and execute SQL and create objects
  - Manage all interactions witht the data storage
The Data Model will be dependent on existing classes (true of existing projects)
  - Some developers will however be starting a new project and will be planning how the domain will function
  - This will help in defining the classes
  - Then the classes can be coded, when it is time to add data persistence db context classes can be created
  - These will define data models that wrap those classes
  - The data framework can then be used with EF migration to create and evolve the db
  - This is not always the case for project evloution as there could be an existing db
    - This may not reflect what the domain classes should look like but they do provide a good head start
    - Using EF Core it is possible to reverse engineer a db table into a db context class
  - Reverse engineering from an exiting database is called scaffolding
Example Syntax
  // The eqivalent table and class
  // Classes are not required to exactly match db schema
  // EF does have rules that will infer what the schema will look like
    - Name of the table being mapped to is plural
  // These are facets of the schema and do not drive business logic
  public class customer{
    public int Id{get; set;}
    public string FirstName{get; set;}
    public DateTime DateOfBirth{get; set;}
  }
  
  Table Name: Customers
  id(PK, int, not null)
  First_Name(nvarchar(30), not null)
  DateOfBirth(date, not null)

9 - Familiar EF Features in EF Core

10 - New Features of EF Core

11 - What About EF6?

12 - Review
A brief review of what the chapter has covered

13 - Resources
Resources provided by the course instructor



                    Section 3 - Creating a Data Model and Database with EF Core
1 - Introduction
Intro to what this module will cover

2 - Overview
Overview of the syllabus of the section

3 - Setting up the Solution
Create a new

4 - Adding in the Domain Classes

5 - Adding EF Core with the Nuget Package Manager

6 - Adding EF Core via PowerShell Commands

7 - Creating the Data Model

8 - Specifying the Data Provider and Connection String

9 - Understanding EF Core Migrations

10 - Adding Your First Migration

11 - Scripting Database Creation Script from the Migration

12 - Creating the Database Directly from the Migration

13 - Preparing Your System for .NET Core

14 - Recreating the Model in .NET Core

15 - Using EF Core Migrations in .NET Core CLI

16 - Review
A brief review of what the chapter has covered

17 - Resources
Resources provided by the course instructor



                    Section 4 - Exploring Mappings and Migrations
1 - Introduction

2 - Overview

3 - Understanding Many-to-Many in EF Core

4 - Creating a Many-to-Many Relationship

5 - Creating a One-to-One Relationship

6 - Scripting and Migrating the Database After the Model Changes

7 - Understanding EF Core Migrations' Scaffolding Command

8 - Scaffolding a Model from an Existing Database

9 - Review
A brief review of what the chapter has covered

10 - Resources
Resources provided by the course instructor



                    Section 5 - Interacting with Your EF Core Model
1 - Introduction

2 - Overview

3 - Inserting Simple Objects

4 - Batch Commands When Saving

5 - Querying Simple Objects

6 - So, You Don't Want Every Row?

7 - Updating Simple Objects

8 - Disconnected Updates

9 - Deleting Objects with EF Core

10 - Querying with Raw SQL and Stored Procedures

11 - Custom Functions in LINQ to EF Queries

12 - Executing Raw SQL for Non-query Commands

13 - Review
A brief review of what the chapter has covered

14 - Resources
Resources provided by the course instructor



                    Section 6 - Querying and Saving Related Data
1 - Introduction

2 - Overview

3 - Changes to Solution Since Previous Module

4 - Inserting Related Data - Basics

5 - Querying Related Data: Eager Loading

6 - Retrieving Related Data Using Projections

7 - Explicitly Loading Related Data

8 - Using Related Data to Filter Objects

9 - EF Core's Disconnected Graph Behaviors

10 - Changes and Additions to Change Tracker

11 - Review
A brief review of what the chapter has covered

11 - Resources
Resources provided by the course instructor



                    Section 7 - Using EF Core in Client Applications
1 - Introduction

2 - Overview

3 - Adding Some Real World Logic

4 - Using EF Core with WPF
4m 16s
Patterns for EF Core in Connected Apps
5m 15s
Tips for Implementing Many-to-Many When Connected
4m 59s
Universal Windows Platform Apps with EF Core
2m 28s
Exploring EF Core Usage in the UWP App
5m 56s
Summary
1m 48s
Resources
0m 19s
8
Using EF Core with ASP.NET Core
29m 14s
Introduction
0m 24s
Overview
1m 12s
Your EF Core Projects and ASP.NET Core
2m 31s
Understanding EF Core Integration with ASP.NET Core
5m 1s
Wiring up SamuraiContext and Web API
6m 12s
Designing EF Logic for Disconnected Access
5m 47s
Wiring up the Web API Controller
2m 59s
Watching the Web API in Action
3m 2s
Review
1m 31s
Resources
0m 28s
9
Simplified Testing with EF Core's InMemory Provider
24m 20s
Introduction
0m 25s
Overview
0m 47s
Testing with the New InMemory Provider
7m 7s
Refactoring the WPF Solution to Dynamically Use the Correct Provider
4m 22s
Testing in the ASP.NET Core Solution
4m 17s
Using InMemory to Test Methods That Use EF Core
4m 58s
Review
1m 14s
Resources
1m 7s
10
Cross Platform EF Core and a Look at Upcoming Tooling
37m 23s
Introduction
0m 31s
Overview
1m 30s
EF Core with .NET Core csproj Support in Visual Studio 2017
4m 23s
Migrating the ASP.NET Core Solution Created in Visual Studio 2015
3m 2s
Switching to SQLite & Running EF Core Migrations in VS2017
4m 48s
Coding with EF Core in Visual Studio Code
2m 19s
EF Core & Visual Studio Code in Windows
4m 29s
Interacting with Raw Data While Still in Visual Studio Code
2m 51s
Coding & Debugging EF Core in OS X with PostgreSQL
5m 38s
Exploring Data Created by EF Core in OS X
3m 52s
Review
1m 44s
Key Takeaways About EF Core
1m 51s
Resources
0m 20s
