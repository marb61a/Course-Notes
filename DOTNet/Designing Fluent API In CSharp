                    Designing Fluent API In CSharp
                    Course Notes
                    
                    
                    Section 1 - Course Overview
1 - Course Overview
Brief intro to the instructor
A very quick overview of the course
There is only one main pre-requisite for the course
  - Intermediate knowledge of C#
    - More specifically Generics, Interfaces, Inheritance and Uni Testing
  
                    
                    Section 2 - Designing Fluent API's in C#
1 - The Benefits Of Fluent API's
A demonstration of the the benefits of using Fluent API's
Example Syntax
  // This is a LINQ related demonstration
  using System.Collections.Generic;
  using System.Linq;
  
  namespace FluentApi{
    class LinqExample{
      // This is the fluent example and all the processing is done fairly quickly
      public IEnumerable<Shape> ProcessViaLinq(IEnumerable<Shape> input){
        return input
          .where(x => x.Color == "Blue")
          .OrderBy(x => x.Width)
          .ThenBy(x => x.Height)
      }
      
      public IEnumerable<Shape> ProcessWithoutLinq(IEnumerable<Shape> input){
        var output = new List<Shape>();
        foreach(var shape in input){
          if(shape.Color == "Blue"){
            output.Add(shape);
          }
        }
        
        output.sort(CompareShapes);
        return output;
      }
      
      private int CompareShapes(Shape x, Shape y){
        var compareValue = x.Width.CompareTo(y.Width);
        if(compareValue != 0)
          return compareValue;
        
        return x.Height.CompareTo(y.Height);
      }
    }
  }
  
  // The INotifyPropertyChanged interface (should be familiar to C#)
    namespace System.ComponentModel{
      // This notifies clients that a property value has changed
      // Writing unit tests for this can be extremely tedious
      public interface INotifyPropertyChanged{
        // This event occurs when a property value changes
        event PropertyChangedEventHandler PropertyChanged;
      }
    }

    // Continuing above where we expect change events for first name, last name and full name
    using System.ComponentModel
    namespace FluentApi{
      class Person : INotifyPropertyChanged{
        public event PropertyChangedEventHandler PropertyChanged;

        public string FirstName;
        public string LastName;
        public string FullName;
      }
    }
    
    // Unit test for verrifying that the above has fired
    

2 - Course Synopsis

3 - Domain Specific Languages And Fluent API's

4 - Collaboration And Refinement Of Fluent API Drafts

5 - Feedback, Tests And Documentation

6 - Recap
A brief recap of the material covered in this section


                    
                    Section 3 - 
1 - Method Chaining

2 - Characteristics Of Fluent API's

3 - Components Of Fluent API's

4 - Type Inference And Verbose Method Signatures

5 - Recap
A brief recap of the material covered in this section


                    Section 4 -
1 - Path To The First Passing Test                     

2 - Adding A Simple Fluent Call

3 - Refactoring To Accomodate Fluent Tests

4 - Exclusive Notification Verification 

5 - Recap
A brief recap of the material covered in this section
  
  
  
                    Section 5 - Case Study Fluent Mapper
1 - The Path To The First Working Test

2 - New Pattern Context Arc

3 - Hiding Implementation Details

4 - A Completed Context Arc
