                    C# Intermediate: Classes, Interfaces and OOP
                    Course Notes


                    Section 1 – About this Course
1 - What You are Going to Learn
A high level overview of what the course will cover

2 - Who is Your Instructor
A quick introduction to the author

3 - Source Codes
A link to all the source code used in the example

4 - Exercises

5 - Asking Questions
A guide to asking questions properly using the Udemy platform



                    Section 2 – Classes
1 - Introduction to Classes 
A class is a building block of a software application
An object is an instance of a class
Example Syntax
  // Declaring Class, this uses Pascal case, in this the first letter of every word should be uppercase
  // This is slightly different than camel case where the first letter of the first word is lowercase
  // In C# camel case is used when naming method parameters
  public class Person {
    // Each class can hav fields and methods which are referred to as members of that class
    // Again this starts with an access modifier, then a datatype then a name/identifier
    // Public is rarely used is real world applications
    public string Name;
    
    // A method, this has a return type, in this case it is void which means that there is no return type
    public void Introduce(){
      Console.WriteLine("Hi, My name is " + Name);
    }
  }
Creating an Object
Example Syntax
  // Using the example class from above to create code
  Person person = new Person();
  // A shorter way to write this is, var is a C# key word
  var person = new Person();
  // The object members can now be accessed
  person.Name = "Jack";
  person.Introduce();
Class Members
  - C# has 2 different types of class members
    - Instance which are accessible from the object
      - Example Syntax
        var person = new Person();
        person.Introduce();
    - Static which are accessible from the class
      - Example Syntax
        Console.Writeline();

2 - Constructors

3 - Object Initializers 

4 - Methods 

5 - Fields 

6 - Access Modifiers 

7 - Properties 

8 - Indexers 

9 - Summary

10 - Exercises



                    Section 3 - Association between Classes
1 - Class Coupling 

2 - Inheritance 

3 - Composition 

4 - Favour Composition over Inheritance 

5 - Summary



                    Section 4 – Inheritance - Second Pillar of OOP
1 - Access Modifiers 

2 - Constructors and Inheritance 

3 - Upcasting and Downcasting 

4 - Boxing and Unboxing 

5 - Summary

6 - Exercises



                    Section 5 – Polymorphism: Third Pillar of OOP
1 - Method Overriding 

2 - Abstract Classes and Members 

3 - Sealed Classes and Members 

4 - Summary

5 - Exercises



                    Section 6 – Interfaces
1 - What is an Interface?

2 - Interfaces and Testability 

3 - Interfaces and Extensibility 

4 - Interfaces are NOT for Multiple Inheritance

5 - Interfaces and Polymorphism 

6 - Summary

7 - Exercises



                    Section 7 – What's Next?
1 - Final Words

2 - My Other Courses
A quick introduction to the instructor's other courses.

3 - Get My Other Courses with a Discount
Coupons to get the instructor's other courses at discounted prices



                    Section 8 – Bonus: Students' Code Reviews
1 - StopWatch Exercise

2 - Stack Exercise

3 - Workflow Engine Exercise

