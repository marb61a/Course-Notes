                    LINQ Fundamentals For C# 6
                    Course Notes


                    Section 1 - Course Overview
1 - Course Overview
A brief introduction to the course and instructor
LINQ - Language INtegrated Query 
Using the features of LINQ is highly recommended by the instructor
Students should be able to use LINQ in their own applications by the end of the course



                    Section 2 -  An Introduction
1 - The Start
An introduction to the course by the author

2 - What is LINQ?
When C# was in earlier versions the designers wanted a query feature to be added to the language
  - This was because where the data was determined the tools and API's that could be used to access it
  - For example if data was in-memory you would use the generic collection classes provided by .NET
  - If the data was on a SQL Server then you would need to use ADO.net
  - There are also an entire set of tools for querying XML data
Microsoft designed LINQ to have one common API to replace the above

3 - Writing a Report without LINQ
The example is to list the 5 largest files inside a directory
Example Syntax
  // The instructor uses the Windows directory for the example but that is not copulsory
  // You can see what files these should be using the command line
  // dir /os which will order these files by size
  // After using the name of a method in a program using ctrl-. will generate the method in Visual Studio
  using System;
  using System.Collections.Generic;
  using System.IO;
  using System.Linq;
  using System.Text;
  using System.Threading.Tasks;
  
  namespace Introduction{
    class Program{
      static void Main(string[] args){
        // Windows uses forwardslashes rather than backslashes
        string path = @"C:\windows";
        ShowLargeFilesWithoutLinq(path);
      }
      
      private static void ShowLargeFilesWithoutLinq(){
        // Without LINQ create an instance of the directoryinfo class which isin the system.io namespace
        DirectoryInfo directory = new DirectoryInfo(path);
        // This returns an array of file info objects
        FileInfo[] files = directory.GetFiles();
        Array.Sort(files, new FileInfoComparer());
        
        for(i = 0; i < 5; i++){
          FileInfo file = files[i];
          // Using C# 6 string interpolation
          // The -20 value will left justify the response, the + will right justify
          // The N will write out as a number so that there will be commas, the 0 is for
          // the number of places after the decimal point
          Console.WriteLine($"{file.Name, -20 } : {file.length, 10:N0}");
        }
      }
    }
    
    // The IComparer interface only needs a single method
    public class FileInfoComparer : IComparer<FileInfo>{
      // This method returns -1 if the first file is less than the second file
      // return a 0 if they are equal and a 1 if it is greater that the file that it is compared to
      public int Compare(FileInfo x, FileInfo y){
        return y.Length.CompareTo(x.Length);
      }
    }
  }

4 - Writing a Report with LINQ
This section will reimplement the previous example this time using LINQ instead
Example Syntax 
  // With LINQ example
  using System;
  using System.Collections.Generic;
  using System.IO;
  using System.Linq;
  using System.Text;
  using System.Threading.Tasks;
  
  namespace Introduction{
    class Program{
      static void Main(string[] args){
        string path = @"C:\windows";
        ShowLargeFilesWithLinq(path);
      }
            
      public static void ShowLargeFilesWithLinq(string path){
        // LINQ can appear mysterious at first
        var query = from file in new DirectoryInfo(path).GetFiles()
                    orderby file.length descending
                    select file;
        // The above makes use of one version of syntax which is similar to SQL, below is the second of 2 types of syntax
        // The take 5 is added to the method calls and removed from the for loop and they each return the same
        var query = from file in new DirectoryInfo(path).GetFiles()
                    .OrderByDescending(f => file.Length)
                    .Take(5);
        
        foreach(var file in query.Take(5)){
          Console.WriteLine($"{file.Name, -20 } : {file.length, 10:N0}");
        }
      }
    }    
  }

5 - The Roadmap



                    Section 3 - LINQ and C#
1 - Introduction
An introduction to the material to be covered in the section

2 - Evolving the Language
The ability to write easy to read & non verbose code has been a while coming in C#
LINQ is designed to work against data sources
Example Syntax
  // The example is imagined to be be LINQ designers on a whiteboard
  // Sequence is used to represent a data source eg Database or Array
  // Common filters like Where should be easy to express not just that you wish to filter but how
  Sequence<Employee> scotts = employees.Where(name == "Scott");
  
  // The equivalent of above in C# 2.0
  // IEnumerable can be iterated over
  IEnumerable<Employee> scotts = 
    EnumerableExtensions.Where(
      delegate(Employee e){
        return e.name == "Scott";
      } 
    )
  
  // LINQ today -- Lokks like SQL
  var scotts = 
    from e in employees
    where e.name == "Scott"
    select e

3 - The Power of IEnumerable
Example Syntax
  // This will be a console application
  // Employee.cs file
  namespace Features{
    public class Employee{
      public int Id { get; set; }
      public string Name { get; set; }
    } 
  }
  
  // The Program.cs file
  using System;
  using System.Collections.Generic;
  using System.Linq;
  using System.Text;
  using System.Threading.Tasks
  
  namespace Features{
    class Program{
      static void main(string[] args){
        Employee [] developers = new Employee[]
        {
          new Employee {Id = 1, name = "Jack"}
          new Employee {Id = 2, name = "Joe"}
        };
        
        List<Employee> sales = new List <Employee>()
        {
          new Employee {id = 3, name = "Jim"}
        };
      }
    }
  }
There are a few different methods that can be used to iterate over the collections above
  - Both of the above collections have a method called GetEnumerator() which can be used
  - This is because both implement and interface called IEnumerable<T>
If using Visual Studio by hovering over a mthod and pressing F12 will show the metadata view of the class
  - This metadata will show IEnumerable<T> as one the interfaces
  

4 - Creating an Extension Method

5 - Understanding Lambda Expressions

6 - Using Func and Action Types

7 - Using var for Implicit Typing

8 - Query Syntax versus Method Syntax

9 - Summary
A quick summary of the what the chapter covered



                    Section 4 - LINQ Queries
1 - Introduction
An introduction to the material to be covered in the section

2 - Creating a Custom Filter Operator

3 - Creating an Operator with Yield Return

4 - Deferred Execution Explained

5 - Taking Advantage of Deferred Execution

6 - Avoiding Pitfalls of Deferred Execution

7 - Exceptions and Deferred Queries

8 - All About Streaming Operators

9 - Querying Infinity

10 - Summary
A quick summary of the what the chapter covered



                    Section 5 - Filter, Ordering & Projecting
1 - Introduction
An introduction to the material to be covered in the section

2 - A File Full of Fuel Efficiency

3 - How to Process a CSV File with LINQ

4 - Implementing a File Processor

5 - Finding the Most Fuel Efficient Car

6 - Filtering with Where and First

7 - Quantifying Data with Any, All, Contains

8 - Projecting Data with Select

9 - Flattening Data with SelectMany

10 - Summary
A quick summary of the what the chapter covered



                    Section 6 - Joining, Grouping & Aggregating
1 - Introduction
An introduction to the material to be covered in the section

2 - Adding a Second Data Source

3 - Joining Data with Query Syntax

4 - Joining Data Using Method Syntax

5 - Creating a Join with a Composite Key

6 - Grouping Data

7 - Using a GroupJoin for Hierarchical Data

8 - Challenge Answer: Group by Country

9 - Aggregating Data

10 - Efficient Aggregation with Extension Methods

11 - Summary
A quick summary of the what the chapter covered



                    Section 7 LINQ to XML
1 - Introduction
An introduction to the material to be covered in the section

2 - System.Xml.Linq

3 - Building Element-oriented XML

4 - Functional Construction for Less Code

5 - Load and Query XML with LINQ

6 - Working with XML Namespaces
8m 57s
Summary
0m 57s
8
LINQ and the Entity Framework
39m 40s
Introduction
0m 42s
Setting up the Entity Framework
5m 56s
Inserting Data into a New Database
5m 53s
Writing a Basic Query with LINQ
5m 5s
Working with IQueryables and Expression Trees
7m 12s
Caveats and Pitfalls of Remote LINQ
7m 40s
An Advanced LINQ Query
6m
Summary
1m 8s
