                    LINQ Fundamentals For C# 6
                    Course Notes


                    Section 1 - Course Overview
1 - Course Overview
A brief introduction to the course and instructor
LINQ - Language INtegrated Query 
Using the features of LINQ is highly recommended by the instructor
Students should be able to use LINQ in their own applications by the end of the course



                    Section 2 -  An Introduction
1 - The Start

2 - What is LINQ?

3 - Writing a Report without LINQ

4 - Writing a Report with LINQ

5 - The Roadmap



                    Section 3 - LINQ and C#
1 - Introduction
An introduction to the material to be covered in the section

2 - Evolving the Language
The ability to write easy to read & non verbose code has been a while coming in C#
LINQ is designed to work against data sources
Example Syntax
  // The example is imagined to be be LINQ designers on a whiteboard
  // Sequence is used to represent a data source eg Database or Array
  // Common filters like Where should be easy to express not just that you wish to filter but how
  Sequence<Employee> scotts = employees.Where(name == "Scott");
  
  // The equivalent of above in C# 2.0
  // IEnumerable can be iterated over
  IEnumerable<Employee> scotts = 
    EnumerableExtensions.Where(
      delegate(Employee e){
        return e.name == "Scott";
      } 
    )
  
  // LINQ today -- Lokks like SQL
  var scotts = 
    from e in employees
    where e.name == "Scott"
    select e

3 - The Power of IEnumerable
Example Syntax
  // This will be a console application
  // Employee.cs file
  namespace Features{
    public class Employee{
      public int Id { get; set; }
      public string Name { get; set; }
    } 
  }
  
  // The Program.cs file
  using System;
  using System.Collections.Generic;
  using System.Linq;
  using System.Text;
  using System.Threading.Tasks
  
  namespace Features{
    class Program{
      static void main(string[] args){
        Employee [] developers = new Employee[]
        {
          new Employee {Id = 1, name = "Jack"}
          new Employee {Id = 2, name = "Joe"}
        };
        
        List<Employee> sales = new List <Employee>()
        {
          new Employee {id = 3, name = "Jim"}
        };
      }
    }
  }
There are a few different methods that can be used to iterate over the collections above
  - Both of the above collections have a method called GetEnumerator() which can be used
  - This is because both implement and interface called IEnumerable<T>
If using Visual Studio by hovering over a mthod and pressing F12 will show the metadata view of the class
  - This metadata will show IEnumerable<T> as one the interfaces
  

4 - Creating an Extension Method

5 - Understanding Lambda Expressions

6 - Using Func and Action Types

7 - Using var for Implicit Typing

8 - Query Syntax versus Method Syntax

9 - Summary
A quick summary of the what the chapter covered



                    Section 4 - LINQ Queries
1 - Introduction
An introduction to the material to be covered in the section

2 - Creating a Custom Filter Operator

3 - Creating an Operator with Yield Return

4 - Deferred Execution Explained

5 - Taking Advantage of Deferred Execution

6 - Avoiding Pitfalls of Deferred Execution

7 - Exceptions and Deferred Queries

8 - All About Streaming Operators

9 - Querying Infinity

10 - Summary
A quick summary of the what the chapter covered



                    Section 5 - Filter, Ordering & Projecting
1 - Introduction
An introduction to the material to be covered in the section

2 - A File Full of Fuel Efficiency

3 - How to Process a CSV File with LINQ

4 - Implementing a File Processor

5 - Finding the Most Fuel Efficient Car

6 - Filtering with Where and First

7 - Quantifying Data with Any, All, Contains

8 - Projecting Data with Select

9 - Flattening Data with SelectMany

10 - Summary
A quick summary of the what the chapter covered



                    Section 6 - Joining, Grouping & Aggregating
1 - Introduction
An introduction to the material to be covered in the section

2 - Adding a Second Data Source

3 - Joining Data with Query Syntax

4 - Joining Data Using Method Syntax

5 - Creating a Join with a Composite Key

Grouping Data
6m 35s
Using a GroupJoin for Hierarchical Data
6m 44s
Challenge Answer: Group by Country
3m 18s
Aggregating Data
4m 9s
Efficient Aggregation with Extension Methods
7m 44s
Summary
0m 40s
7
LINQ to XML
32m 46s
Introduction
0m 51s
System.Xml.Linq
1m 25s
Building Element-oriented XML
7m 21s
Functional Construction for Less Code
5m 13s
Load and Query XML with LINQ
7m 59s
Working with XML Namespaces
8m 57s
Summary
0m 57s
8
LINQ and the Entity Framework
39m 40s
Introduction
0m 42s
Setting up the Entity Framework
5m 56s
Inserting Data into a New Database
5m 53s
Writing a Basic Query with LINQ
5m 5s
Working with IQueryables and Expression Trees
7m 12s
Caveats and Pitfalls of Remote LINQ
7m 40s
An Advanced LINQ Query
6m
Summary
1m 8s
