                    Implementing and Securing an API with ASP.NET Core
                    Course Notes


                    Section 1 - Course Overview
1 - Course Overview
A quick overview of the course by the instructor
There are a couple of prerequisites for the course
  - The student should be familiar with Entity framework & ASP.NET Core


                    Section 2 - Getting Started
1 - Introduction
An introduction of the material coming in the section

2 - What Is HTTP?
HyperText Transfer Protocol

3 - What Is REST?
When designing API you will need to become familiar with Resource Based Architectures
  - Resources are representations of real world entities eg People, Payments
  - This is usually nouns, the relationship is usually nested eg People have addresses etc
  - In Web API's you are usually dealing with hierarchies or webs not relational models
  - Realational models and hierarchies can look similar buth are very different in key ways
  - In order to repesent the resources URI's will be used to indicate paths to these resources eg /people
  - Having the resource in the URI is a very common idea
  - For things not about these resources query strings will be used i.e non-data elements including formating or paging etc
REST - Introduced by Roy Fielding and it revolutionised thinking
  - Stands for REpresentational State Transfer or having a representation of a resource and a way to transfer that
  - It includes concept such as separation of client and server
  - It insists that server requests are stateless
  - It encourages cacheable requests, this helps increase scalability
  - Uniform Interface this is simply using URI's to define what the API looks like 
    - It wants them to be as easy to read as possible
REST does however come with some problems
  - To have an API qualify as truly REST based can be difficult
  - The community is split on REST dogma
  - There is a lot to learn from REST style architecture
When building API's on the web there are 2 main camps
HTTP\RPC
  - Verbs are included in the API eg /getCustomersByName
  - The URI ends up being the endpoints to those API
REST
  - Resource URI's, HTTP Verbs are good
  - Instead of including them in the API having a Stateless server as well as Content Negotiation
  - This is so different content can be served to different types of user
  - Link Relations & Hypermedia revolves around having links to other operations in returned media
  - Having the full extent of Link Relations and Hypermedia which is often called HATEOAS can be overwhelming

4 - Where Are You Going?

5 - Demo: Starting the Project

6 - Demo: Using Postman

7 - Demo: What's in the Project?

8 - What You've Learned
A quick run through of what the section covered


                    Section 3 - Reading Data
1 - Introduction
An introduction of the material coming in the section

2 - API Basics
Nouns are good, verbs are bad
  - URI's should point at nouns
    - It should preferably be plural eg /api/cutomers or /api/games
  - Use Identifiers to locate individual items in a URI
    - This does not have to be an internal key eg /api/customers/123
    - It could be used though in /api/games/halo-3 
      - There is only going to be one Halo-3 game so a constructed key can be used
      - This not only reads better but avoids exposing primary keys
  - Status Codes which are defined in HTTP
    - A full list of status codes is available at the following location
      - 
    - At a minimum it is suggested to use 200, 400, 500
    - You will probably use more but probably not more than 10
  - Formatting Results
    - There is a need for formatting different data types
    - These aill normally be accompanyed by accept
      - Some examples include
        - JSON -- application/json
        - XML -- text/xml
        - JSONP -- application/javascript

3 - First Controller
Example Syntax
  namespace MyCodeCamp.Controllers{
    public class CampsController : Controller {
      // There are alternatives to using IActionResult such as object etc 
      // These can be difficult to debug and the instructor wants to be as close to HTTP as possible
      public IActionResult Get(){
        // When using IActionResult you need to specify status code of return
        // OK will return 200, what you are returning from an action is a result code that you want to return to the client
        // This is a fundamental difference between writing webpages in MVC6 and writing API
        return OK(new {Name = "Jack", FavouriteColor = "Black" });
      }  
    }
  }

4 - First Route
After creating the frst controller is creating the first route
  - app.UseMvc() in the sample startup.cs file
    - app.UdeMvc() is
Example Syntax
  namespace MyCodeCamp.Controllers{
    public class CampsController : Controller {
      public IActionResult Get(){
        return OK(new {Name = "Jack", FavouriteColor = "Black" });
      }  
    }
  }

5 - The Data Model
There is a GitHub repository available with sample data available at
  - https://github.com/shawnwildermuth/WebAPICoreResources
  - Downloading as a zip file is recommended
  - Copy the data folder over to the project, it will need to be included in the project
  - To create a database using the entity framework pieces using the command line
    - dotnet ef database update
  - There is a local version of SQL Server installed with Visual Studio so db work can be done

6 - Getting Collections
Example Syntax
  // Even though the data project has been added to the solution does not mean that it is available
  // in the new projetc, a reference will need to be added to the project.json file
  namespace MyCodeCamp.Controllers{
    [Route("api/[controller]")]
    public class CampsController : Controller {
      [HttpGet("")]
      public IActionResult Get(){
        var camps = null;
        
        return OK(camps);
      }  
    }
  }

7 - Seeding the Database

8 - Getting Items

9 - Summary
A quick summary of the chapter material



                    Section 4 - Modifying Data via an API
1 - Introduction
An introduction of the material coming in the section

2 - Designing URIs
When designing URI's there will be a need to leverage the verbs inside the requests
  - These will be POST, GET, PUT & DELETE
  - What should be returned eg Status Codes

3 - Demo: Model Binding

4 - Demo: Implementing POST

5 - Demo: Logging

6 - Demo: Implementing PUT

7 - Demo: Implementing DELETE

8 - Summary
A quick summary of the chapter material



                    Section 5 - Entities and Models
1 - Introduction
An introduction of the material coming in the section

2 - Demo: Adding a View Model

3 - Demo: Using Model Mapping

4 - Demo: Customizing Mapping

5 - Demo: Mapping URLs

6 - Demo: Building a UrlResolver

7 - Demo: Using a Surrogate Key

8 - Demo: Using Mappings in POST

9 - Demo: Using ModelState and Validation

10 - Demo: Using Mappings in PUT

11 - What You've Learned



                    Section 6 - Associations in APIs
1 - Introduction
An introduction of the material coming in the section

2 - Demo: An Association Controller

3 - Demo: Association GET

4 - Demo: Mapping to a Model

5 - Demo: Association POST

6 - Demo: Adding Validation

7 - Demo: Association PUT

8 - Demo: Association DELETE

9 - Demo: The Talk Association

10 - What You've Learned



                    Section 7 - Functional APIs
1 - Introduction
An introduction of the material coming in the section

2 - Demo: Creating a Functional Controller

3 - What You've Learned



                    Section 8 - Securing APIs
1 - Introduction
An introduction of the material coming in the section

2 - Security Basics

3 - How SSL Works

4 - Demo: Supporting SSL

5 - Demo: Supporting CORS

6 - Authentication Basics

7 - Demo: Using Identity

8 - Demo: Cookie Authentication

9 - Demo: Using Identity Information

10 - What You've Learned



                    Section 9 - Token Authentication
1 - Introduction
An introduction of the material coming in the section

2 - What Are JSON Web Tokens?

3 - Demo: Generating JWTs

4 - Demo: Validating JWTs

5 - Demo: JWT Middleware

6 - Demo: Using Claims

7 - Demo: Authorizing with Claims

8 - What You've Learned



                    Section 10 - Versioning Your API
1 - Introduction
An introduction of the material coming in the section

2 - Versioning Methods

3 - Demo: Adding Versioning

4 - Demo: Using Versioning Attributes

5 - Demo: Using a Versioned Controller

6 - Demo: Versioning a Payload

7 - Demo: Customizing Versioning Methods

8 - Demo: Use Versioning Conventions

9 - What You've Learned



                    Section 11 - REST Constraints
1 - Introduction
An introduction of the material coming in the section

2 - What Are REST Constraints

3 - What Is Caching?

4 - Demo: Implementing ETags

5 - Demo: Using ETags in Updates/Deletes

6 - Understanding Uniform Interface

7 - Demo: Implementing Link Collections

8 - The REST of Constraints

9 - What You've Learned

