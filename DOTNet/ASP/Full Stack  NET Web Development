                    Full Stack .NET Web Development 
                    Course Notes


                    Section 1 - GETTING TO WORK WITH ASP.NET CORE
1 - The Course Overview
Brief introduction to the instructor & the syllabus of the course
The goals of the course are that you are after the course able to 
  - Efficiently build a HTTP API using the latest version of the ASP.NET framework built on top of .NET core
  - Define the boundaries between projects and their responsibilities using good patterns and practices
  - Use the HTTP API to follow the REST standard
  - Create a basic UI wil HTML, CSS and Javascript
  - Store the data in a SQL Server database using the Entity Framework
  - Write Unit & Integration tests
There are some pre-requisites
  - Good understanding of the C# language
  - A basic understanding of the .NET platform
  - Basic understanding of the HTTP API and web development
  - Have .NET core platform installed

2 - Setting up the Environment
You can use Visual Studio 2017 if on a Windows system
If you use Ubuntu then the installation instructions are available here
  - https://www.microsoft.com/net/core#linuxubuntu
To see which version of dotnet is installed, open a terminal and type
  - dotnet --version
To see available commands at the terminal type
  - dotnet --help
To create a new project
  - dotnet new
  - This will bring up a list of available templates
  - dotnet new console -n MyApp                     // The -n parameter indicates a name option, console is the type of app
  - cd MyApp                                        // Change into the project directory
  - dotnet run                                      // Runs the project, there will be errors at this stage
  

3 - ASP.NET Core Application Structure

4 - Working with Controllers

5 - Dealing with Status Codes



                    Section 2 - EXPLORING ASP.NET CORE BUILT-IN FEATURES
1 - Dependency Injection

2 - Application Settings

3 - Logging

4 - Filters



                    Section 3 - EXTENDING ASP.NET CORE INFRASTRUCTURE
1 - Middleware

2 - Caching

3 - Distributed Caching with Redis



                    Section 4 - DISCUSSING SOLUTION ARCHITECTURE AND LAYERING PROJECTS
1 - Solution Architecture Overview

2 - Creating Web API Project

3 - Creating Core Project



                    Section 5 - IMPLEMENTING DOMAIN AND SERVICES IN CORE PROJECT
1 - Creating Domain Models

2 - Implementing Repositories

3 - Defining Application Services

4 - Dealing with Data Transfer Objects

5 - Handling DTO with AutoMapper


                    
                    Section 6 - IMPLEMENTING WEB API USING RESTFUL STANDARD
1 - Defining API Controllers

2 - Handling Business Logic

3 - Handling Exceptions with Middleware

4 - Executing HTTP Requests


                    
                    Section 7 - UNIT AND INTEGRATION TESTING OF WEB API
1 - Writing Unit Tests
To create a new test project
  - dotnet new xunit -n Cubo.Tests                                                       //xunit is a .net testing framework
To add a reference to the project from the cli
  - dotnet add Cubo.Tests/Cubo.Tests.csproj reference ../src/Cubo.Core/Cubo.Core.csproj  // Cubo is the path is the example
To add the test project to the solution file
  - dotnet sln add tests/Cubo.Tests/Cubo.Tests.csproj
Example Syntax
  // Cubo.Tests.csproj should look like this
  <Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
      <TargetFramework>
        netcoreapp1.1
      </TargetFrameWork>
    </PropertyGroup>
    <ItemGroup>
      <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.0.0"/>
      <PackageReference Include="xunit" Version="2.2.0"/>
      <PackageReference Include="xunit.runner.visualstudio" Version="2.2.0"/>
    </ItemGroup>
    <ItemGroup>
      <ProjectReference Include="..\..\src\Cubo.Core\Cubo.Core.csproj"/>
    </ItemGroup>
  </Project>

2 - Extending Unit Tests

3 - Writing Integration Tests

4 - Extending Integration Tests



                    Section 8 - IMPLEMENTING THE FRONT-END PART
1 - Creating the UI Layout

2 - Writing Scripts to Perform the HTTP Requests

3 - Styling the Views



                    Section 9 - STORING DATA IN THE SQL SERVER
1 - Creating a Database and Configuring the Entity Framework

2 - Implementing the SQL Repositories

3 - Testing the Application and Making Final Adjustments
