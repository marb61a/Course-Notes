                    ASP.NET Core Test Driven Development
                    Course Notes
                    
                    
                    Section 1 - Introduction
1 - Welcome
A brief welcome from the instructor to the course

2 - What You Should Know
There are some pre-requisites for the course
  - A good understanding of C#
    - You should know what Classes and Interfaces are
  - ASP.Net MVC
  - A basic understanding of Test Driven Development

3 - Using The Exercise Files
How to make use of the exercise files that accompany the course


                    
                    Section 2 - Get Started With TDD In ASP.NET Core
1 - TDD And Tools
The course will be using certain tools
  - Visual Studio 2017 Community Edition
  - Resharper (Paid Tool but 30 day free trial available)
    - You don't have to use Resharper but there may be additional typing involved
  - There are also some libraries which will be used
    - xUnit which is a unit testing framework
      - https://xunit.github.io
    - Moq which is a fremwork for creating mocks
      - https://github.com/Moq/moq4/wiki/Quickstart
There will also be some C# design patterns used in the demo application to show how they work with TDD
  - Repository Pattern
    - Repositories are responsible for interfacing with the data store
    - The services will perform business logic
    - The MVC controllers will present data to and take information from the user
TDD Basics
At the core of Test Driven Development is the Red, Green, Refactor cycle
  - Red -> Write a test that fails
  - Green -> Make a small change that makes tests pass
  - Refactor -> Restructure the code to improve code quality
The course will stick to the basics of how to apply TDD is ASP.Net Core using C#

2 - Dependency Injection (DI) And Inversion of Control (IoC)
Dependency Injection is a key component of writing testable code
  - Not only does it separate class responsibilities but can make writing code easier
Dependency Injection and Inversion of Control are often used together
  - IoC is a design principle
    - It states that your framework should be responsible for creating and calling classes
  - DI is a design pattern
    - Your classes are provided the dependencies you need to run
Example Syntax
  // A sample controller
  public class HomeController : Controller
  {
    private readonly ILogger _logger;
    
    public HomeController(ILogger, logger){
      _logger = logger;
    }
    
    public IActionResult Index(){
      _logger.Log("Someone visited the home page!");
      return View();
    }
  }

3 - Configure The App For Testability


                    
                    Section 3 - Write Untested Code
1 - Test Base Case

2 - Test N+1 Case

3 - Refactor Code And Tests

4 - Complete Test Cases

5 - Finish And Run The App

                    
                    Section 4 - Test Changes In Untested Code
1 - TDD In Untested Code

2 - Make Untestable Code Testable

3 - Confidently Change Your Code Part 1

4 - Confidently Change Your Code Part 2

5 - Refactor Your Existing Code



                    Section 5 - Conclusion
1 - Next Steps
Some recommendations from the instructor on where to proceed from this course
