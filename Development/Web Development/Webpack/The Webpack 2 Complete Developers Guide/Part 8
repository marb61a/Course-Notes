                    Webpack 2: The Complete Developer's Guide
                    Course Notes Part 8


9 - Chunk Hashing for Cache Busting
There is another change needed to the example
  - Vendor files don't update that often so caching can be used
  - Browsers often used cached versions of files
  - Chrome dev-tools has a section under settings which allows for caching to be disabled while dev-tools is open
    - While developing it may be better to not get a cached version of a file
Example Syntax
  // Webpack config file
  var webpack = require('webpack');
  var path = require('path');
  var HtmlWebpackPlugin = require('html-webpack-plugin');
  
  const VENDOR_LIBS = [
    'react', 'loadsh', 'redux', 'react-redux', 'react-dom', 'faker', 'react-input-range', 'redux-form', 'redux-thunk'
  ]
  
  module.exports = {
    entry: {
      bundle: './src/index.js',
      vendor: VENDOR_LIBS
    },
    output: {
      path: path.join(__dirname, 'dist'),
      // Using the chunk hash which is a hash of the file contents
      // Everytime the file changes the hash will too
      filename: '[name].[chunkhash].js'
    },
    module: {
      rules: [
        {
          use: 'babel-loader',
          test: /\.js$/,
          exclude: /node_modules/
        },
        {
          use: ['style-loader', 'css-loader],
          test: /\.css$/
        },
      ]
    },
    plugins: [
      new webpack.optimize.CommonsChunkPlugin({
        // Webpack has some issues when changes are made to bundle and puts them in vendor
        // changing to using an array of names fixes that gotcha
        names: ['vendor', 'manifest']
      }),
      new HtmlWebpackPlugin({
        template: 'src/index.html',
      })
    ]
  }

10 - Cache Busting Wrapup
Hashes depend on the contents of the file, any changes will change the hassh
  - This is what busts the cache 
Example Syntax
  - Just adding a console.log('hi');
  - This is just an example so as to force a bundle.js rebuild which will change hash
  - Script tags from the HTMLWebpackPlugin are automatically updated, including the hash

11 - Cleaning Project Files
By default you will get multiple bundle and manifest files as they are not overwritten when rebuilt
Installing a module to help take care of this issue
  - npm install --save-dev rimraf
  - Rimraf takes care of command inconsistencies between OSX and Windows
    - The rm command which removes files is not available on Windows
Example Syntax
  // Editing the package.json file
  {
  "name": "upstar_music",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    // If we run npm clean it will run rimraf on the directory dist
    "clean": "rimraf dist",
    // This ensure that files are removed and then rebuilt so no duplicates
    "build": "npm run clean && webpack"
  },
  "repository": "https://github.com/StephenGrider/WebpackProject",
  "author": "",
  "license": "ISC",
  "dependencies": {
    "faker": "^3.1.0",
    "lodash": "^4.17.2",
    "react": "15.4.1",
    "react-dom": "15.4.1",
    "react-input-range": "^0.9.2",
    "react-redux": "^4.4.6",
    "react-router": "^3.0.0",
    "redux": "^3.6.0",
    "redux-form": "^6.3.2",
    "redux-thunk": "^2.1.0"
  },
  "devDependencies": {
    "babel-core": "^6.17.0",
    "babel-loader": "^6.2.0",
    "babel-preset-env": "^1.1.4",
    "babel-preset-react": "^6.16.0",
    "css-loader": "^0.26.1",
    "style-loader": "^0.13.1",
    "webpack": "2.2.0-rc.0"
  }
}
  
