                    Webpack 2: The Complete Developer's Guide
                    Course Notes Part 5


                    Section 4 â€“ Building for Performance with Webpack
1 - Introduction to Code Splitting
This is the point of the course where the basics have been covered and advanced topics are introduced
Code Splitting is a very big part of Webpacks success
The course will be reusing the previous code to demonstrate code splitting
  - Then there will be another larger example used (React based)
Codesplitting - Webpack allows for bundle.js to be split and then decide programatically when to load
each separate piece

2 - Codesplitting in Practice
Using 2 files in the example for code splitting
  - index.js
    - Only this loads up until the user clicks a button at which point the image_viewer will load
  - image_viewer.js
Example Syntax
  // Wiped the existing index.js file
  const button = document.createElement('button');
  button.innerText = 'Click Me';
  // Do not use capital C 
  button.onclick = () =>{
  
  }
  
  document.body.appendChild(button);

3 - On Demand Code Loading
Example Syntax
  // index.js file
  const button = document.createElement('button');
  button.innerText = 'Click Me';

  button.onclick = () =>{
    // System is a global variable inside Javascript
    // It is part of the ES6 specification
    // If the image viewer had imports they would be pulled in too
    // This is Async code and returns a promise
    System.import('./image_viewer').then(module => {
      console.log(module)
    })
  }
  
  document.body.appendChild(button);
  
  // image_viewer files
  export default () => {
    import smallimage from 'small_image_path';
    import '../styles/image_viewer.css';

    const image = document.createElement('img');
    image.src = small;

    document.body.appendChild(image);
  }
  
4 - System Import Calls
A behind the scenes look at how the rebuilt example
  - This uses the console in the developer tools
  - Also using the network tab filtering for only JS files
    - When reloading the page  there is only a bundle.js file loaded
    - After clicking the button there is a file called 0.bundle.js loaded
The generated bundle.js file has much more text than previously
  - By using code spliting there will be JSONP callbacks added to load chunks
    - There is no magic behind the scenes in Webpack
  - There is also a list of modules
A quick run through the 0.bundle.js file
  - This has the logic on creating the image
This shows that our code is being split into 2 different files
  - Webpack looks for calls to System.import
Example Syntax
  // index.js file
  const button = document.createElement('button');
  button.innerText = 'Click Me';

  button.onclick = () =>{
    System.import('./image_viewer').then(module => {
      module.default();
    })
  }
Later example will use a much more real world example using code splitting for
  - React and React Router

