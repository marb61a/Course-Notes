                    Webpack 2: The Complete Developer's Guide
                    Course Notes Part 3


6 - The Style and CSS Loaders
Example Syntax
  // CSS Files -> Created new styles directory and image_viewer.css file
  img{
    border: 10px solid black;
  }
  
  // image_viewer.js
  import '../styles/image_viewer.css';
  
  const image = document.createElement('img');
  image.src = 'image url';
  
  document.body.appendChild(image);
  
  // Webpack needs to be taught how to handle css files
  // There will be 2 additional modules installed
  // css-loader & style-loader
  // To install -> npm install --save-dev style-loader css-loader
  
  // Webpack config file
  const path = require('path');
  
  const config = {
    entry: './src/index.js',
    
    output: {
      path: path.resolve(__dirname. 'build'),
      filename: 'bundle.js'
    },
    module: {
      rules: [
        {
          use: 'babel-loader',
          test: /\.js$/
        },
        {
          use: ['style-loader', 'css-loader'],
          test: /\.css$/
        }
      ]
    }
  }

7 - Loaders are Tricky!
Using the dom browser as part of the developer tools
  - This shows that the CSS is being loaded in the head of the html
  - This has been injected by the style & css loaders
  - There is no connection between webpack and the css
  - It uses a module.push where the css is plain text
  - Webpack does not actually modify the html but adds code to the bundle file which tells the bundle file how to update
    the html document afer it has loaded
  - This may not agree with standards for handling css

8 - The Extract Text Plugin
This is an alternative approach for handling css to the previous section
There is a specific version of Webpack Text Extraction plugin used
  - npm install --save-dev extract-text-webpack-plugin@2.0.0-beta.4
  - This plugin will take a reference to a loader, run Webpack with it, take any text that was generated by that load
    save it into a separate file in the output directory
Example Syntax
  // Webpack config file
  const path = require('path');
  const ExtractTextPlugin = require('extract-text-webpack-plugin');
  
  const config = {
    entry: './src/index.js',
    
    output: {
      path: path.resolve(__dirname. 'build'),
      filename: 'bundle.js'
    },
    module: {
      rules: [
        {
          use: 'babel-loader',
          test: /\.js$/
        },
        {
          // loader & use are identical in the webpack world but loader is needed here
          loader: ExtractTextPlugin.extract({
            loader: 'css-loader'
          }),
          test: /\.css$/
        }
      ]
    },
    plugins: [
      new ExtractTextPlugin(style.css)
    ]
  }
  
