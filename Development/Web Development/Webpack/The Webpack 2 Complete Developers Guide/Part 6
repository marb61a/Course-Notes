                    Webpack 2: The Complete Developer's Guide
                    Course Notes Part 6


                    Section 5 â€“ Applying Webpack to a Real Project
1 - A Real World Project
Some features of Webpack will need to be tested on larger apps for a more effective learning experience
  - Some features will also only make sense on a larger app
The sample project to be used is located on GitHub at
  - https://github.com/StephenGrider/WebpackProject
  - It is a React JS project
  - Either clone or download as a zip file
    - git clone https://github.com/StephenGrider/WebpackProject.git
  - npm install to install the dependencies

2 - Setting Up Babel
Example Syntax
  var webpack = require('webpack');
  var path = require('path');
  
  module.exports = {
    entry: './src/index.js',
    output: {
      path: path.join(__dirname, 'dist'),
      filename: 'bundle.js'
    },
    ,
    module: {
      rules: [
        {
          use: 'babel-loader',
          test: /\.js$/,
          exclude: /node_modules/
        }
      ]
    }
  }

3 - Minimum Webpack Config
Continuing updating the webpack config file from the Rect Sample project
Example Syntax
  var webpack = require('webpack');
  var path = require('path');
  
  module.exports = {
    entry: './src/index.js',
    output: {
      path: path.join(__dirname, 'dist'),
      filename: 'bundle.js'
    },
    ,
    module: {
      rules: [
        {
          use: 'babel-loader',
          test: /\.js$/,
          exclude: /node_modules/
        },
        {
          use: ['style-loader', 'css-loader],
          test: /\.css$/
        },
      ]
    }
  }
  
  // .babelrc file syntax
  {
    "presets": ["babel-presets-env", "react"]
  }

This will take a lot longer than the previous project as it is a lot larger than the previous example
  - The initial bundle.js file generated is 3.2 mb in size so reducing that will be very important
  - Sample application is a music manager application

4 - Vendor Asset Caching
Recommended asset size limits are 250kb, at this point the sample app stands at 3.5 mb
Any optimisations made with webpack will have absolutely no effect on run time performance
There are a few different tried and tested methods of reducing a bundle.js file
  - The first optimisation will be Code Splitting
    - In this scenario we will be splitting our code from vendor code
  - The code splitting will rely on caching to work
    - Caching will save on loading code fully as some will already be on a visitors system and wont need a full reload
    - https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31

5 - More on Vendor Caching
Continuing on about using code splitting and caching to improve the bundle.js file size
  - Vendor code changes happen infrequently
  - Our codebase changes much more regularly

6 - Refactoring for Vendor Splitting
Example Syntax
  var webpack = require('webpack');
  var path = require('path');
  
  const VENDOR_LIBS = [
    'react', 'loadsh', 'redux', 'react-redux', 'react-dom', 'faker', 'react-input-range', 'redux-form', 'redux-thunk'
  ]
  
  module.exports = {
    entry: {
      bundle: './src/index.js',
      vendor: VENDOR_LIBS
    },
    output: {
      path: path.join(__dirname, 'dist'),
      filename: '[name].js'
    },
    module: {
      rules: [
        {
          use: 'babel-loader',
          test: /\.js$/,
          exclude: /node_modules/
        },
        {
          use: ['style-loader', 'css-loader],
          test: /\.css$/
        },
      ]
    }
  }
The speed of Webpack will depended on the machine  
The example ends with 2 large files, bundle.js and vendor.js
