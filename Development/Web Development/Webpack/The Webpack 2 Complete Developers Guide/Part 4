                    Webpack 2: The Complete Developer's Guide
                    Course Notes Part 4


9 - Handling Images with Webpack
Changing the image handling
  - images stored locally will load quicker
There are 2 new image loaders to be installed
  - image-webpack-loader & url-loader, image webpack-loader will automatically compress images
  npm install --save-dev image-webpack-loader  url-loader
Example Syntax
  // Webpack config file
  const path = require('path');
  const ExtractTextPlugin = require('extract-text-webpack-plugin');
  
  const config = {
    entry: './src/index.js',
    
    output: {
      path: path.resolve(__dirname. 'build'),
      filename: 'bundle.js'
    },
    module: {
      rules: [
        {
          use: 'babel-loader',
          test: /\.js$/
        },
        {
          loader: ExtractTextPlugin.extract({
            loader: 'css-loader'
          }),
          test: /\.css$/
        },
        {
          test: /\.(jpe?g|png|gif|svg)$/,
          use: [
            {
              loader: 'url-loader',
              options: { limit: 40000 }
            },
            'image-webpack-loader'
          ]
        }
      ]
    },
    plugins: [
      new ExtractTextPlugin(style.css)
    ]
  }

10 - Automatic Image Compression
New folder created -> assets
Site to source free images 
  - http://lorempixel.com
Example Syntax
  // image_viewer.js syntax
  import bigimage from 'big_image_path';
  import smallimage from 'small_image_path';
  import '../styles/image_viewer.css';
  
  const image = document.createElement('img');
  image.src = small;
  
  document.body.appendChild(image);
  
  const bigImage = document.createElement('img');
  bigImage.src = big;
  
  document.body.appendChild(bigImage);
  
  // The large image will be saved as a separate file
  // The small image will be encoded into the bundle file as a base64 string

11 - Public Paths
Example Syntax
  // Webpack config file
  const path = require('path');
  const ExtractTextPlugin = require('extract-text-webpack-plugin');
  
  const config = {
    entry: './src/index.js',
    
    output: {
      path: path.resolve(__dirname. 'build'),
      filename: 'bundle.js',
      // URL loader emits the url of the file with output.publicPath prepended to the url
      publicPath: 'build/'
    },
    module: {
      rules: [
        {
          use: 'babel-loader',
          test: /\.js$/
        },
        {
          loader: ExtractTextPlugin.extract({
            loader: 'css-loader'
          }),
          test: /\.css$/
        },
        {
          test: /\.(jpe?g|png|gif|svg)$/,
          use: [
            {
              loader: 'url-loader',
              options: { limit: 40000 }
            },
            'image-webpack-loader'
          ]
        }
      ]
    },
    plugins: [
      new ExtractTextPlugin(style.css)
    ]
  }
