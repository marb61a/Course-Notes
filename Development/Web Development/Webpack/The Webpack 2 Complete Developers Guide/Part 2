                    Webpack 2: The Complete Developer's Guide
                    Course Notes Part 2


                    Section 3 â€“ Handling Project Assets
1 - Introduction to Loaders
Module loaders are used to do some preprocessing on files before they are added to bundle.js file
They are commonly used for transpiling ES2015, CSS
  - EG Babel
Babel has support for multiple transpilations to ES5
There are 3 separate modules needed to get Babel working
  - babel-loader -- This teaches Babel how to work with Webpack
  - babel-core -- Knows how to take in code parse it and generate output files
  - babel-preset-env -- Ruleset for telling Babel exactly what pieces of ES6 code to look for and how to turn it into ES5
To install
  - npm install --save-dev babel-loader babel-core babel-preset-env 

2 - Babel Setup for ES2015
Loaders can be applied to any type of file
  - It does make sense to limit to certain types of files
Example Syntax
  const path = require('path');
  
  const config = {
    entry: './src/index.js',
    
    output: {
      path: path.resolve(__dirname. 'build'),
      filename: 'bundle.js'
    },
    // In Webpack 1 these preprocessing steps were called loaders
    // In Webpack 2 they are part of the module systems each loader is called a rule
    module: {
      rules: [
      ]
    }
  }
  
  module.exports = config;

3 - Babel Configuration
A continuation of the previous chapter
Example Syntax
  const path = require('path');
  
  const config = {
    entry: './src/index.js',
    
    output: {
      path: path.resolve(__dirname. 'build'),
      filename: 'bundle.js'
    },
    // In Webpack 1 these preprocessing steps were called loaders
    // In Webpack 2 they are part of the module systems each loader is called a rule
    module: {
      rules: [
        {
          use: 'babel-loader',
          // If the file ends is js then babel is applie due to the regex
          test: /\.js$/
        }
      ]
    }
  }
A new file is created .babelrc
.babelrc Syntax
  {
    // You need double inverted commas on both sides
    "presets": ["babel-preset-env"]
  }

4 - Refactor to ES2015 Modules
Example Syntax
  // Sum.js Syntax
  // Now using ES2015 Syntax
  const sum = (a, b) => a + b;
  
  export default sum;
  
  // Index.js Syntax
  import sum from './sum';
  
  const total = sum(10, 5);
  console.log(total);

5 - Handling CSS with Webpack
Example Syntax
  // image_viewer.js syntax
  const image = document.createElement('img');
  image.src = 'image url';
  
  document.body.appendChild(image);

  // Index.js Syntax
  import sum from './sum';
  import './image_viewer';
  
  const total = sum(10, 5);
  console.log(total);
