                    Web Performance
                    Course Notes Part 1


                    Section: 1 - Introduction
Introduction to Web Performance
Introduction to the course and to the instructor
Applications should perform well
  - For people on high end and older equipment
  - Whether you are near or further from a data center
  - It should also do this over time
Performance will have trade offs

2 - Thinking About Performance
What does is meant by performance and why does it matter
  - 0.1 second is the time taken to load that makes users feel a system is instantaneous
  - About 1 second is the limit for users attention who will not feel the system is responsive
  - About 10 seconds is the limit for keeping users focused, for longer delays users will typically do other tasks
  - Slower pages will result in lower page views and conversions
  - It is harder to be fast as applications are getting bigger
  - Not all performance needs are the same
  - There are 3 main types of performance
    - Network Load Performance
    - JavaScript (Parsing, Compilation) Performance 
    - Rendering Performance
  - The importance of types of performance depends on the app
  - People's perception reaction times differ from one environment to another but the following are good for web apps
    - 0 - 100ms -- Instant Reaction
    - 100 - 300ms -- A slight perceptible delay
    - 300 - 1000ms -- Task Focus, perceptible delay
    - 1000+ ms -- Mental context switch
    - 10000+ ms -- The person will normally leave
  - RAIL is a set of benchmarks from Google
    - It is an acronym standing for Response Animation Idle Load
    - Response
      - Tap/Click to paint less than 100ms
    - Animation
      - Each frame completes in less than 16ms
      - Drag to paint in less than 16ms
    - Idle 
      - Use idle time to proactively schedule work
      - Complete that work in 50ms chunks
    - Load
      - Satisfy response goals during full load
      - Get first meaningful paint in less than 1000ms
 Improving performance is about getting progressively better
  - Know what is important in your app and what are pain-points

3 - The Importance of Measurement
When optimising remember
  - Do not tune for speed unless you have done proper measurements
  - Also do not optimise unless one part of the code overwhelms the rest
  - Sometimes trying to improve performance actually causes slowdown
  - There is a cost to every abstraction and everything has a tradeoff
  - Performance must be monitored constantly
  - There are some things to remember while testing
    - Is testing being done on high-end equipment rather than realistic consumer options
    - Are there simulations of poor quality network speeds being done
    - What is the available budget for improving performance
  - Do not get carried away with measuring either
  - Thinking about app design and architecture is better than micro benchmarking
