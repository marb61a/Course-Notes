                    Web Performance
                    Course Notes Part 2


Section 2 - JavaScript Performance
1 - The Cost of JavaScript
  - There is a problem on the client-side
    - You cannot buy servers to improve client-side performance
    - There is a lot of time spent compressing assets, removing requests and reducing latency
      - This does not tackle the prolem of when the app is running
  - Sometimes parsing and compiling is the culprit
  - The amount of JavaScript involved is growing at a large rate especially on mobile
    - Javascript is a compiled language
    - Most browsers just-in-time (JIT) compilation
    - There are things that are needed to be known about JIT
      - It means that there is compilation step
      - It means that it happens moments before execution
      - That means it happens on our clientâ€™s machine
      - This also means that they are paying the cost and/or doing the hard work

2 - Parsing
  - The source code is the true intention of the application
    - The engine though still has to figure out what this means
  - Parsing is slow and can take time
    - On mobile devices it can be as slow as 1MB/s
  - One way to reduce parsing time is to reduce the code that needs to be parsed
  - Another way is to do only as much parsing as needed
    - This can translate into parsing as little as can be gotten away with
  - Parsing happens in 2 phases
    - Eager Parsing (Full Parse)
      - This is what most people think of when thinking about parsing
    - Lazy Parse (Pre-parse)
      - This is where a minimum level of parsing is done initially and then fully later
  - On a general level Lazy Parsing can be a good thing
  - The basic rules of parsing (Lazy)
    - Scan through the top level scope
      - Parse all the code that can be seen to be doing something
    - Items such as class declarations can be skipped
      - They can be parsed as and when they are needed
  - There can be issues when doing lazy pasrsing
    - Depending on code structure code could end up being both lazy and eager parsed
    - This is very poor pratice as doing things twice is slower than doing it once
  - https://github.com/nolanlawson/optimize-js
    - Shown by course instructor but the project is unmaintained

3 - Reducing Parsing Times Exercise
  - Exploring why measuring is important
  - Using the optimize js assoicated website to experiment
    - https://nolanlawson.github.io/test-optimize-js/
    - The idea is to try different browsers and different libraries

4 - Reducing Parsing Times Solution
  - There is a drop down list of available libraries
  - Optimize should improve times for these libraries
  - Every millisecond saved can be important
  - JQuery can be much faster in Chrome than in Firefox
  - Optimize may make some libraries slower
  - All of these results come down to implementation details of the browsers
    - These will change with each release

5 - ASTs and Initial Execution
  - Once code is parsed it is turned into an AST
    - AST Abstract Syntax Tree
  - At its easiest explanation
    - Code has gone from being represented by a large string to a data structure
  - JavaScript has things like variable hoisting which may affect parsing 
    - These will need to be watched

6 - The Optimizing Compiler
  - What makes JavaScript run fast is the Optimizing Compiler
  - There are 3 things that will be looked at in the where the Optimizing Compiler helps out
  - Speculation Optimisation
  - Hidden Classes for Dynamic Classes
  - Function Inlining
  - JavaScript can be difficult
  - Code Example, available at
    - 

7 - Deoptimization, Deleting Properties
  -

8 - Deleting, Feeding Objects Exercise
  -

9 - Deleting, Feeding Objects Solution
  -
  

