                    Build Your First Production Quality React App
                    Course Notes Part 3


10 - Prevent Empty Form Values With Conditional Submit Handlers
At present there is nothing in the application to prevent empty values being submitted
  - Even just pressing return will generate nameless todos
  - This means there is a need for form validation
  - At present because we are updating the current todo we know if it is valid before the form is submitted
    - This works to our advantage and avoids the need for conditional code
  - Add a handleEmptySubmit function to the app.js file
    - Remember again to prevent the default behaviour 
    - Add setState and an error message to the state
  - Create a new constant submitHandler in the render method before return
    - const submitHandler = this.state.currentTodo ? this.handleSubmit : this.handleEmptySubmit;
  - Change the handleSubmit value in the todoForm from handleSubmit to submitHandler
  - You will then need to add handleEmptySubmit to the proptypes to ensure correct bindings
  - Inside todoApp div and above the todoForm you will need to enseure that the error message will be shown
    - {this.state.errorMessage && <span className='error'> {this.state.errorMessage} </span> }
  - Edit the error class in the app.css file to make it more prominent
  - Update the setState using errorMessage to use an empty string
    - We need to do this as it will remove the warning message from the app

11 - Use ES2016 Property Initializer Syntax In ES6 Classes
In the app.js component we are using the constructor to define the applications initial state
  - The custom methods are also bound to this using bind
    - This ensures that the methods have correct context when reading state or calling setState for updates
  - These statements are redundant and are easily forgotten
    - Create-react-app ships with appropriate configuration to allow for property initializer syntax
  - Converting the constructor code to property initializers will be the task of the video
    - Start by grabbing the entire initial state object and putting it above the instructor
    - Remove the this from this.state
      - state is now an instance property of the class
    - If you initialise the custom methods as properties then there is no need for binding
      - handleSubmit(evt) becomes handleSubmit = (evt) => {} as it becomes a fat arrow function
      - When these are done the bind statements can be removed
      - The only thing that the constructor should have at this stage is a call to super
    - You will get a warning as the constructor is not doing anything and can be removed

12 - Update Data In A List Without Mutations
In order to update the isComplete status on a todo there are a couple of things that need to be done
  - The todo has to be retrieved from an array of existing todos
  - The second is to toggle the isComplete property on the todo and the list updated
  - There is also a need to avoid mutating the existing object
The instructor has added a list of unit tests which need to be ran
The section will use only 1 of the set of added tests at first
  - In the Jest testing framework you are able to skip tests
  - Add .skip after the test keyword in the helpersSpec file
  - findById will need to be imported
    - Add a findById empty(for the moment) function to the helper file 
      - add list and id as inputs to the findById function
      - Use the built in find method
      - Take in an item from the list and compare the id is equal
        - export const findById = (id, list) => list.find(item => item.id === id);
  - Removed the skip from the toggleTodo should toggle the isComplete prop of a todo test
    - This will just change the isComplete flag from false to true
    - Add toggleTodo to imports
    - Add the toogleTodo export function to the helpers file
      - It takes in a single argument which represents a todo object
        - The spread operator is used to represent todo properties
        - The isComplete is the overwritten by the direct opposite !isComplete
          - export const toggleTodo = (todo) => ({...todo, isComplete: !todo.isComplete });
  - Unskipped the toggleTodo should not mutate the original todo test
    - Ensuring that what we get back from toggleTodo is not a reference to the same todo
  - Unskipping the updateTodo should update an item by id test
    - Takes in a list of todos
    - An updated to do where th isComlete is changed to true
    - We expect to get our list back with the update reflected
    - import updateTodo from the helpers file
  - Unskipping the final test updateTodo should not mutate the original array test
    - This is done to make sure the previous test has not changed the existing array

13 - Pass Data To Event Handlers With Partial Function Application
Handling marking todos as complete in the app
  - findByid, toggleTodo and updatedTodo need to be added to imports in the app.js file
  - Adding a handleToggle function to app.js
    - This is an arrow function which takes the id as an argument
    - For the state updates from this method to actually happen we need to pass it down as a prop to the todoItem component
    - todoItem is a child of todoList
    - Add the handleToggle to the TodoList as part of the render metod in the JSX
    - In the todoList component add props.handleToggle to the todoItem
    - In the TodoItem component the handleToggle will be the onChange event handler
      - This causes an issue as handleToggle will receive an event object by default
      - We need to define an inline function here which calls props.handleToggle
        - We are doing this because we need to pass data into our handler that isn't an event object
        - This is something that happens a lot in React components that deal with collections of data
      - This gets passed in the id from the todo which is todo.id
      - This also means that the defaultChecked property can be changed to checked
    - To do some refactoring
      - We can remove the inline function and assign it to a variable prior to the return
        - This means that we can call the variable in the onChange method
        - We can then go a stage further by removing the function altogether and using bind
          - null will be the first argument as we do not want to reset the context
          - Having the ability to partially apply a function through bind is very useful 
          - This will be used in multiple places in the program so wrapping it in a utility function will help even more
      - Add a new file -> lib -> utils.js
        - also add -> lib -> utils.test.js
      - The test file will import the partial created in the utils file
        - There is also a simple function which takes in 2 numbers and returns their sum
        - The test partially applies the add function with the first value 1
        - Then the inc function is called with 2 and the return value is expected to be 3
      - In the utils file export a constant called partial
        - The error in the test will now be undefined as inc is not being returned yet
        - The first argument is fn representing a function, the second being the rest operator
          - it will be ...args as it will take the rest of a comma separated list of arguments and put them in an array
        - Then call bind on the function and add null to avoid a change of context
        - The arguments from args need to be passed into bind but bind takes arguments as a comma separated list
        - This time we will use the spread operator which looks the exact same as it has the 3 dots
        - A second test is added and takes as 3 arguments and the test passes
          - This means that we can partial apply a function with as many arguments as we want and call it
        - We need to import the util file into the TodoItem file to make use of partial
          - we use partial to remove bind
