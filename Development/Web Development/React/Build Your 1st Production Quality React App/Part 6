                    Build Your First Production Quality React App
                    Course Notes Part 6


18. Filter Data on Property Values
There are 3 tests created each of which is related to a filterTodos function
  - This function will take in a route value
  - It then returns a filtered todo list which is based on that route
The first test will be to test that the root route will return all todos
  - Again an array of todos is the first item added to the function
    - The actual and expected values are then compared
  - The expectation of this test is that all todos will be returned as it is the root route
The second test covers the /complete route
  - the expectation of this test is that only completed todos will be shown
The third and final test covers the /active rout
  - This time the expectation is that only uncompleted todos will be shown
As usual all tests will fail when npm test is run for the first time
  - We start of rectifying this by importing the filterTodos to the test file
  - Then we go into the helpers file where we will define the filterTodos function
    - This will take in a list and route as arguments
    - Then we will use a switch case on the route value
      - item.isComplete for the '/complete' route and the opposite for the active route
      - The default case will return the entire list
Next we add the filterTodos to the imports in App.js
  - In order to use the filter function we need access to our route which will come from context
    - This is because it belongs to the router component which wraps the entire app
  - Under state add a static value
    - This is called contextTypes and is an object
      - route: React.PropTypes.string
  - In the render method above the return statement add a new constant displayTodos
    - Set that equal to a call to filterTodos
      - Pass in this.state.todos followed by this.context.route
    - Replace the this.state.todos in the todos attribute on the todolist with displayTodos

19. Keep Application State in Sync with Browser History
When you click a link in the footer it changes the filtering of the todoList
  - When the browser back button is clicked the url changes but the filter doesn't
  - The only time that the state property is dealt with is in Router and the handleLinkClick file
    - This means that it will only happen when we click on one of the links in the footer
In order to change this so that the state changes on back or forward broswer clicks
  - We need to registee a handler at the on pop state event
  - We will use a component lifecycle method in this case componentDidMount
Above the render method we will add the componentDidMount method
  - Add window.onpopstate which equals an arrow function
    - Add this.setState to the function and use route and getCurrentPath as the values
  - This will fire each time we use the back or forward button of the browser

20. Load Data From a Server with fetch
As it stands the todos are heard code into the application's initial state
  - We will integrate a server api JSONServer node module
    - npm i -g json-server
Add a new file at the project root
  - The file itself will be called db.json
  - There will be some dummy sample todos in JSON format added
To run the JSONServer using the cli
  - json-server -p 8080 --watch db.json
    - Like in a lot of other packages the watch directive reloads upon saved changes
    - You also use the filename so it knows where to look for its data
    - We can use curl -localhost:/8080 to check if everything is working
Next we add a new file under the lib directory
  - This file will be called todoService.js
  - This is where we will keep all code related to the API calls
  - The first is to add a const baseUrl which will cover the localhost and port
  - The first thing that the API needs to do is to load the todos into the application when it starts
    - Export a const function loadTodos
    - Returning fetch(baseUrl) will return a response object
    - We simply want the JSON formatted data from that response
    - This can be done using a promise where response is piped into response.json
    - This will return another promise with just the json formatted data
  - The todo service will then need to be imported to App.js to be used in the application
    - We can then begin by removing the hardcoded sample todos from state
    - Under the contextTypes method we will add the componentDidMount lifecycle method
      - Then loadTodos() is called and because in the definition it is already resolved to JOSN it will call the todos array
      - This means that .then can be called with todos passed in to setState
      - Once again because key and property names are the same they don't need to be used twice

21. Save Data to the Server with fetch
The application is setup to load todos from the todos endpoint
  - This can be changed so that there can be todos saved to the server
  - To accomplish this the first thing is to add a new function to the service file
  - Export a new function called createTodo which will take todo as the argument
  - This will then use fetch to add it to the server
  - Just like the loadTodos function there will be a return of fetch with the baseUrl argument first
  - By default fetch will send a GET request to the server
  - To enable the ability to post to the server there will need to be a second argument passed in
  - This second argument will be an object with some options
    - Some of the options needed are 
      - Method type
      - Some headers are also needed
        - Both the accept and content-type are set to application/json
      - We have to define body for the content we want to save to the server
        - In the body property we need to stringify the objects
  - Again pipe the response into res.json
  - Also remember to add the createTodo to the imports in App.js
  - Ensure that you add the createTodo to the handleSubmit function where it will take newTodo
    - To ensure it works add a promise which logs out to the console
  - This will add our added todos to the db.json file

22. Show Temporary Messages in a React Application
When an item is added to our todos we are performing an optimistic UI update
  - This means that we are updating the todos in the state without waiting for a server response
  - This means that the UI is very responsive but it would be good to have confirmation of a successful update
To do this we will begin by replacing the console.log in the promise attached to createTodo in the handleSubmit function
  - The todo added message can be added as a property to setState
  - This then needs to be rendered out, we can add this.state.message and add a new span with className of success
  - This todo added message though do not move so there will be a new function added to make it temporary
The function showTempMessage is added to avoid having the todo added message stay on screen
  - It takes a message in as its argument
  - Then there is a setTimeout message called 
  - This calls this.setState again
    - Again it takes in a message but this time it takes an empty string
    - The timeout value is then set to 2.5 seconds
    - The createTodo promise can be change to showTempMessage
The css can then be added for the success className
  - It will just change the text colour to green

23. Update data on the Server with fetch
At this stage the application can add new todos to the server
  - It can also load todos from the server
  - It can not at this stage toggle todos from the server so this is what this section will cover
To change todo status will need a new function which will make a PUT request to the server
  - It will look very similar to the existing createTodo function
  - The function will be called saveTodo
    - The first difference will be baseUrl will be have the todo id added and it will all be interpolated
      - `${baseUrl}/${todo.id}`
    - The next difference will that this function uses a PUT request instead of POST
  - The saveTodo function will have to be added to the imports in App.js
The next stage is to refactor the handleToggle function in App.js
  - Add a new const which will be a function which takes the first 2 parts of the todo pipeline
    - This function is called getToggledTodo
  - As the updated item can now be gotten a new const is added updated() which calls getToggledTodo
    - This will take in the id and this.state.todos
  - getUpdated now only needs to be passed in updated()
  - Add a saveTodo with updated passed in and a promise attached
    - This will again show a temporary message
    - Checking the db.json file will reflect the changes made to each todo such as completion

24 - Delete Data On The Server With fetch
The application handles removing items from the state
  - These deletes are not reflected on the server
  - If todos are deleted then the browser is refreshed the todos reappear
  - This is because they are still persisted on the server
To persist these deletes there will be another call to fetch added
  - Again this will need a new function in the appService file
  - This will again be similar to the 2 functions that have already been added
  - The function will be called destroyTodo
  - This function does not need the entire todo just its id so that is the argument passed in
  - The url can then also be changed to address the id directly
  - The method will also change to be DELETE
  - There is no need for the body or getting JSON back
  - Again this will need to be added to imports in the App.js file
  - Navigate to the handleRemove method in the App.js file
  - Add a call to destroyTodo which takes in id
  - Add a call to then which will display a temporary message to show todo has been removed
  - The db.json file will again refelct the changes made by deleting todos
  
