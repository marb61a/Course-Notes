                    Build Your First Production Quality React App
                    Course Notes Part 5


16. Build a Link Component to Navigate to Routes in React
The link component will be used to navigate to routes within the application
In order to keep things organised we will create a router directory under components
  - Within this directory we will need to have 2 files
    - Link.js that will hold our component
    - index.js to hold all the components and export them from a single source
Index.js can have just an export link statement at this stage
Link.js will have to have some boilerplate added
  - React and Component will be imported
  - The usual render & return methods will be added
    - Return will return a hyperlink
      - Instead of exposing a name or label property in the return method we will use JSX
      - JSX gives the ability to specify content inbetween tags and then render it out in a render method
      - This is done using the children property of props
  - We need to create a footer component to have a place to put links
    - Go into the todo directory and add a new file -> Footer.js
    - Ensure that React and the newly created link file are imported
    - This will be a stateless functional component
    - This will be called Footer and is exported
    - The return method will return some JSX
      - Create a div
      - Add some link components to the div
        - Link must have an uppercase L at the start or else there will be errors
  - Add Footer to todo/index.js to be exported
    - Footer will also need to be imported into App.js
  - Footer will then be added to the render method in App.js
    - Footer component can be added right below todoList component
    - This should then show the three links when the browser reloads
  - The footer div is then given a className in order to be able to give it some styling
  - Some padding is added as a rule in App.css to avoid the links appearing crowded
  - Adding to attributes to each link so that links can go places
    - All will get a to '/'
    - Active will go to '/active/'
    - Complete will go to '/complete'
  -The Link.js file must be updated to do something with the to property from the links
    - The a href changes from # to  this.props.to initially but this cause a problem so reverts
    - When the # changes each time a link is clicked will cause a full page refresh which is not good
    - The compnent will then get a handleClick function to handle link clicks
      - This will take evt as a parameter
      - Also preventDefault will need to be used to prevent page reload
      - We want the link component to update the browsers address bar and history without the full reload
      - To do this we will use the browsers history API
        - history.pushState() which takes 3 arguments
          - The first is a state object which we don't need so will pass in null
          - The second is a page title which we will use an empty string for for the time being
          - The third is the location we want to add to the browsers history
          - Due to issues with restricted globals being used in React instead of history. use this.props.history.
            - There may also be issues with pushState()

17. Use React Context to Manage Application State Through Routes
As it stands the footer uses the Link component to render the hyperlinks
The app is also using history and pushState
  - This is fine for url history but without querying the doucment location we have no way of knowing the app route
  - This should be put in the app state and should be done higher up in the component tree
    - This will make it more accessible to components that need it
We will do the above by creating a router component
  - Start by adding a file Router.js to the router folder
  - Import both React and Component
  - Export the class Router which will extend Component
  - Add a render method and return a div with this.props.children
  - The router will also need to get some state
  - We will just use some property initialiser syntax (state = {})
  - The router will maintain a single state property which will represent the current route
  - Initially we wll have to calculate our route
  - We will assign route using a getCurrentPath function
  - We will define the getCurrentPath function outside the defined router class
  - Inside the getCurrentPath function, path will be defined as document.pathname.location
  - To keep the path simple only the last segment of the pathname will be returned
  - To get the needed segment the substring will get the lastIndexOf('/')
  - This will set the state's route property when loaded but wont be updated when a link is clicked
  - Create a method that will handle the call to history.pushState in this component
    - Above the return statement in the render method we will add a new method handleLinkClick to do that
    - This method will accept a single argument
    - We then use setState and pass it in an object which contains route
      - Because the value name and property name are the same in ES6 you only use it once
    - We then call the history pushState to update the browser history
      - The push state will again take null, empty string and route as arguments
  - Add an export in the index.js file in the router directory for the Router component
  - In the main index.js file where the app is rendered add an import for the Router
  - We can then wrap the app tag in the router tags
The next item is to push history when a link is clicked
  - The obvious way of passing handleLinkClick via props has problems
    - The first is that in a complex app this may involve passing the same link down many levels
      - This has issues with maintenance 
    - The second issue is that app is being placed in the oruter through a call to this.props.children
      - This means that we cannot just add props on to the app component in the render function
  - The way that this will be handled is by making use of the React context mehanism
    - The first thing that we need to do to use context is to expose they types we want available to our child components
    - We start by defining a static value on our component (Router.js)
    - The childContextTypes will be an object
      - The object will contain properties
        - route: React.PropTypes.string
        - linkHandler: React.PropTypes.func
    - We then need to define a method that will get the values out of the component
    - We do theat by adding a method getChildContext
      - This method returns an object
        - route: this.state.route
        - linkHandler: this.handleLinkClick
    - We then will go to the Link.js file so we can consume the context
      - We go to the top of the class and define a static value
      - This will be an object called contextTypes
        - They are the same exact values that have been exposed in Router
    - Because history.pushState is already taken care of in the Router component
      - We can instead call the linkHandler function
        - This will need to be passed a route
        - We can do this through this.props.to
    - We also have access to route through context
      - Because of this we can apply an active class to our link in the render method
        - This happens when a link matches the active route
        - const activeClass = this.context.route === this.props.to ? 'active' : '';
        - add a className attribute called activeClass to the link href
        - Add some css style for the active link (makes the link bold)
