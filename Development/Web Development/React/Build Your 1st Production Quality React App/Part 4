                    Build Your First Production Quality React App
                    Course Notes Part 4


14. Create a Pipe Function to Enable Function Composition
Looking at the handleToggle method in the app.js file
  - The constants todo and toggled only exist to be passed along to the next line and never used again
  - It would be good practice to get rid of these intermediate values as they are only there until the next line runs
  - This could be resolved very easily by nesting the variable but the code would get messy
  - Ths instructor recommends using a pipe utility
    - This will allow us to take the results of one function and pass it in to the next one
  - The first step is to add some tests to the utils test file to ensure that the pipe utility is working properly
    - Two new functions are added increment & double
      - they take a number in and either double or increment it
    - The two tests ensure that each can be passed to the other and the expected values returned
  - You will also need to add pipe to the import alongside partial
  - Add the export const pipe to the utils function
    - The arguments for pipe are 2 functions f and g
    - This will need to return a function
      - (f, g) => () => {}
    - You will need to use the rest operator as an argument in the returned function
  - Adding a third test to the test file
    - This will be a test to check that the pipe works with more 2 functions
    - On first run this test will fail as it expects 9 but returns 4
    - This is because the existing pipe utility is not working properly and only the first two methods
      passed into the test are assessed and then stopped
  - The existing pipe utility is renamed and in now not exported
  - This is replaced with a new pipe function
    - This new pipe utility will be the one to be exported
    - This will now take in an amount of functions of variable length rather than 2 like previously
    - This takes an array of functions and returns a function
    - The way to do it is to use reduce which uses the old pipe function
      - By using reduce without an initial value, it will take the first 2 items in the functions array
        pass them to _pipe, pipe them together and return a function
      - It will take this value and the next one and do the same as above
      - This goes on for as long as needed
    - At this point all tests pass
  - You will need to import pipe & partial into app.js
  - At this point you will update the handleToggle method
    - You can eliminate some of the code by then using the imported pipe method
    - updateTodo has two arguments so will need to be applied partially
    - updatedTodos can be updated to take in the getUpdatedTodos with id and this.state.todos as arguments

15. Remove Items from a List without Mutations
Added a couple of remove todo tests to the tests file
  - The first test is to remove an item by its ID
    - It takes in an array of todos and removes on based on its ID
  - The second test is to ensure that the existing array is not mutated
  - These will both fail at first
There will need to be added to the imports removeTodo 
  - the tests will still fail at this point as we need to add a removeTodo function to the helpers function
Add an initial removeTodo to the helpers file and ensure that it is exported
  - The function will take a list and an id value as arguments
  - We want to return an array of items except the one that matches the id
    - Just like in the updateTodos we start by getting an index value
    - Then we use the list.findIndex
    - We then add a predicate function which is going to take items from the array and do the comparison
      - The comparison will check item.id against the passed in id value
  - We then return a new array
    - This array will consist of all the items from the beginning up to the removeIndex
    - The spread operator is used to spread values out into the array
    - We also need all the items after the one that we are removing
    - We will use the spread operator again this time from removeIndex +1
  - This ensures that tests are passing
After adding the the removeTodo functionality its time to add the ability to the UI
  - Ensure that the application is running & open
  - In the app.js file add removeTodo to the imports
  - Then a handleRemove function needs to be added
    - It takes an id and an event object
    - handleRemove will be called from the onClickable link
    - To prevent the link from updating the address bar it is necessary to use preventDefault on the event object
    - Then is to get the updatedTodos and set it as a call to removeTodos
      - The list of existing will need to be passed in and is gotten from the state, follow by id
      - Then state will need to be updated, using this.setState({todos: updatedTodos});
  - We will be calling handleRemove from the removeItem component
    - Navigate to the render method 
    - Pass it in as a prop to todoList
      - handleRemove={this.handleRemove}
  - Navigate to the todoList component
    - In the todoItem inside the todos map add a handleRemove property
      - handleRemove={props.handleRemove}
  - Navigate to the todoItem component
    - Inside the list item create a hyperlink with an x between the <a></a>
    - This will give something to click on to remove an item
    - Because the id of each specific handelRemove item will need to be added
    - Add a constant handleRemoveoutside the return block
      - Set that as a call to partial, this will partially apply the handleRemove function
      - Add an onClick to the a href with the locally declared handleRemove passed in
      - Each item will then have an x beside the items which when clicked will remove todos
    - To clean up the UI as the functionality is working
      - Put the hyperlink inside a span with a classname of delete-item
      - Inside app.css define the delete-item class
        - x will be hidden by default but will appear on hover
