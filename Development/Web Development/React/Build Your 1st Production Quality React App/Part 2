                    Build Your First Production Quality React App
                    Course Notes Part 2


6 - Refactor React Components To Be Stateless Functional Components
Changing the TodoList in to its own component from being rendered in the main app component
  - A new file will need to be added to the components todo directory -- TodoList.js
  - Again this will be a stateless functional component
  - A new file index.js is created which will hold all imports and export them again
    - This will clean up imports as it will come from a single source
  - Add an instance of the TodoList to ensure that it shows
  - Remove the TodoList from the app.js markup and move it to the TodoList file
    - This will again cause an undefined error
    - Again this.state changes to props
    - A todos attribute will need to be added to app.js to allow the TodoList to be seen
Creating a separate component for an individual todo list item
  - Add a new TodoItem.js file to the components/todo directory
  - Move the li from TodoList to TodoItem
    - Again the todo will need to changed to props in order to be seen
    - Uses the spread operator to get properties rather than todo.id etc
    - Moving the key property to TodoList from TodoItem as there will be a problem iterating

7 - Validate Component Input With Prop Types In React
*****  React.PropTypes is deprecated since React 15.5.0
        -  npm module prop-types
        - To ignore warnings from React about this 
          - Add the following to the line before propTypes // eslint-disable-next-line
React has a method for validating input
  - PropTypes
To use propTypes in a component
  - Call the component and its propTypes property (will be an object)
    - keys should match property names
    // Its important to note that when referencing PropTypes off of React to pick the type for
    // our property that there is an uppercase P at the beginning, where as its lower when defining the object
  - currentTodo: React.PropTypes.string,
  - handleInputChange: React.Proptypes.func
  - To insure that the property is passed in use isRequired()
    - This can be used anywhere if a component needs certain properties
  - Adding PropTypes to TodoList
    -todos:  React.PropTypes.array.isRequired 
  - Adding PropTypes to TodoItem
    - It receives an entire object so there are going to be several properties
    - name: React.PropTypes.string.isRequired
    - isComplete: React.PropTypes.bool
    - id: React.PropTypes.number.isRequired

8 - Add Data To A List Without Mutations
The existing todos have been statically added 
  - This will have to be changed so that new todos can be added dynamically
  - The example will use a helper function to take care of this
    - create-react-app comes with the testing framework Jest built in so the example will be done in TDD format
      - New folder src -> lib
        - New files src -> lib -> todoHelpers.js & todohelpers.test.js
  - npm test starts up jest
    - More information on Jest available at -- https://facebook.github.io/jest/
  - Initial run will fail as each example must contain at least one test
    - Sample test code is added
      - Test will basically have existing todos add a new one and see if the result matches expected
      - Test will have 2 main sections
        - arrange which is where variables etc is called
        - act where the code we are testing is called
  - Next test fail as addTodo has not been defined in the todoHelpers file
  - After adding a blank addTodo function to the helpers file and then exporting it
    - Test fails again but this time because it is expecing array rather than undefined
  - Add list, item as inputs to the function, list will be the needed array and item the object we want to pass in
    - Test passes
  - As list is an array there are array methods such as push() etc available
  - A second test is added to test that the existing todo array should not be mutated
    - Second test fails as the array is mutated
    - Using list.push mutates the existing array
  - Change the array method to concat rather than push 
  - The will add a new item into a new array
    - The second test passes
    - Refactor to use spread operator and the tests still pass

9 - Update React Application State From Form Input
As of now there is no way to submit new todos in the application
  - This is where we will wire up a form for submitting the new todos
  - Add import of todoHelpers to app.js to import addTodo function
  - Add handleSubmit() function to app.js
  - Ensure that you add the handleSubmit property to the todoForm
  - Add the handleSubmit to the todoForm (make sure to use props rather than this!!)
  - Ensure that you add the onSubmit as a propType & it is required
  - The handleSubmit function in add.js
    - It will take an evt 
    - Use preventDefault to prevent the form from submitting the form through a GET
      - This would refresh the page
    - Add a const newTodo which will have a name of currentTodo and a false isComplete value
  - Add a function that will generate a random number for ID's in todoHelpers
    - export const generateId = () => Math.floor(Math.random()*100000);
  - Use the generated id as a key in the handleSubmit function
    - You will then need to add the todo to list of existing todos
    - Then use the updated todos to update the application state
      - This.set state which will take in an object
      - todos: updatedTodos
      - Clear the form input then by setting currentTodos to an empty string
    - You will need to bind the onSubmit mthod in the same way that was done for handleInputChange
      - this.handleSubmit = this.handleSubmit.bind(this);
