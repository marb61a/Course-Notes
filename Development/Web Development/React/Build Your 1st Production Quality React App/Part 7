                    Build Your First Production Quality React App
                    Course Notes Part 7


22. Show Temporary Messages in a React Application
When an item is added to our todos we are performing an optimistic UI update
  - This means that we are updating the todos in the state without waiting for a server response
  - This means that the UI is very responsive but it would be good to have confirmation of a successful update
To do this we will begin by replacing the console.log in the promise attached to createTodo in the handleSubmit function
  - The todo added message can be added as a property to setState
  - This then needs to be rendered out, we can add this.state.message and add a new span with className of success
  - This todo added message though do not move so there will be a new function added to make it temporary
The function showTempMessage is added to avoid having the todo added message stay on screen
  - It takes a message in as its argument
  - Then there is a setTimeout message called 
  - This calls this.setState again
    - Again it takes in a message but this time it takes an empty string
    - The timeout value is then set to 2.5 seconds
    - The createTodo promise can be change to showTempMessage
The css can then be added for the success className
  - It will just change the text colour to green

23. Update data on the Server with fetch
At this stage the application can add new todos to the server
  - It can also load todos from the server
  - It can not at this stage toggle todos from the server so this is what this section will cover
To change todo status will need a new function which will make a PUT request to the server
  - It will look very similar to the existing createTodo function
  - The function will be called saveTodo
    - The first difference will be baseUrl will be have the todo id added and it will all be interpolated
      - `${baseUrl}/${todo.id}`
    - The next difference will that this function uses a PUT request instead of POST
  - The saveTodo function will have to be added to the imports in App.js
The next stage is to refactor the handleToggle function in App.js
  - Add a new const which will be a function which takes the first 2 parts of the todo pipeline
    - This function is called getToggledTodo
  - As the updated item can now be gotten a new const is added updated() which calls getToggledTodo
    - This will take in the id and this.state.todos
  - getUpdated now only needs to be passed in updated()
  - Add a saveTodo with updated passed in and a promise attached
    - This will again show a temporary message
    - Checking the db.json file will reflect the changes made to each todo such as completion

24 - Delete Data On The Server With fetch
The application handles removing items from the state
  - These deletes are not reflected on the server
  - If todos are deleted then the browser is refreshed the todos reappear
  - This is because they are still persisted on the server
To persist these deletes there will be another call to fetch added
  - Again this will need a new function in the appService file
  - This will again be similar to the 2 functions that have already been added
  - The function will be called destroyTodo
  - This function does not need the entire todo just its id so that is the argument passed in
  - The url can then also be changed to address the id directly
  - The method will also change to be DELETE
  - There is no need for the body or getting JSON back
  - Again this will need to be added to imports in the App.js file
  - Navigate to the handleRemove method in the App.js file
  - Add a call to destroyTodo which takes in id
  - Add a call to then which will display a temporary message to show todo has been removed
  - The db.json file will again refelct the changes made by deleting todos
  
