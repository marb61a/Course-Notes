                    Introduction To Reactive Programming
                    Course Notes Part 3


6 - New Requests From Refresh Clicks
Trying to implement the feature so that when referesh is clicked that we get more users
Example Syntax
  var refreshButton = document.querySelector('.refresh');
  var refreshClickStream = Rx.Observable.fromEvent(refreshButton, 'click');
  
  // Whenever refreshed it will map to a different url
  // However there is a flaw as it maps clicks to Url's then if it is never clicked
  // then there will never be a Url so there will need to be an initialiser 
  var startupRequestStream = Rx.Observable.just('https://api.github.com');
  
  var requestOnRefreshStream = refreshClickStream
    .map(ev => {
      var randomOffset = Math.floor(Math.random()*500);
      return ''https://api.github.com/users?since=' + randomOffset;
    })
  
  // Merge has events from either stream
  var responseStream = refreshOnRequestStream.merge(startUpRequestStream)
  .flatMap(requestUrl => {
    Rx.Observable.fromPromise(jQuery.getJSON(requestUrl));
  })
  
  function createSuggestionStream(responseStream){
    function responseStream.map(listUser => 
      listUser[Math.floor(Math.random() * listUser.length)]
    )
  }
  
  var suggestion1Stream = createSuggestionStream(responseStream);
  var suggestion2Stream = createSuggestionStream(responseStream);
  var suggestion3Stream = createSuggestionStream(responseStream);

7 - Clear Data While Loading With RXJS-Startwith
Example Syntax
  // In the example application there is a bug on the refresh 
  // Old data is not cleared immediately, instead it stays until new data arrives
  var refreshButton = document.querySelector('.refresh');
  var refreshClickStream = Rx.Observable.fromEvent(refreshButton, 'click');
  
  var startupRequestStream = Rx.Observable.just('https://api.github.com');
  
  var requestOnRefreshStream = refreshClickStream
    .map(ev => {
      var randomOffset = Math.floor(Math.random()*500);
      return ''https://api.github.com/users?since=' + randomOffset;
    })
  
  var responseStream = refreshOnRequestStream.merge(startUpRequestStream)
  .flatMap(requestUrl => {
    Rx.Observable.fromPromise(jQuery.getJSON(requestUrl));
  })
  
  function createSuggestionStream(responseStream){
    function responseStream.map(listUser => 
      listUser[Math.floor(Math.random() * listUser.length)]
    )
    .startWith(null)
    .merge(refreshClickStream.map(ev => null))
  }
  
  var suggestion1Stream = createSuggestionStream(responseStream);
  var suggestion2Stream = createSuggestionStream(responseStream);
  var suggestion3Stream = createSuggestionStream(responseStream);
  
  // Rendering function
  function renderSuggestion(suggestedUser, selector){
    var suggestionEl = document.querySelector(selector);
    if(suggestedUser === null){
      suggestionEl.style.visibility = 'hidden';
    } else {
      suggestionEl.style.visibility = 'visible';
      var usernameEl = suggestionEl.querySelector('.username');
      usernameEl.href = suggestedUser.html_url;
      usernameEl.textContext = suggestedUser.login;
      var imageEl = suggestionEl.querySelector('img');
      imageEl.src = "";
      imageEl.src = suggestedUser.avatar_url;
    }
  }

8 - Sharing Network Requests With RXJS-Merge


9 - Using Cached Network Data With RXJS 


10 - An Overview Of Reactive Concepts
