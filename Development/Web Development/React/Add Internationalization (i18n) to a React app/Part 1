                    Add Internationalization (i18n) to a React app using React Intl
                    Course Notes


1 - Install And Configure The Entry Point Of react-intl
Start by adding react-intl to a project
  - Using the yarn package manager -- yarn add react-intl
Example Syntax
  // This uses an existing example app
  // Creating a new messages.js file
  export default {
    // There will be keys added here which will correspond to the languages that will be supported
    'en-US': {},
    'es-ES': {},
    'fr-FR': {}
  }
  
  // The entry point of this app is the src/index.js file
  // Import from the new messages.js file just created
  import messages from './messages';
  
  // You will also need to do some imports from the react-intl library
  // addLocaleData gives React the ability to format plural in relative time according to the users language
  // IntlProvider is a required component to use react-intl, it requires a single element passed as a child
  import {addLocaleData, IntlProvider} from 'react-intl';
  
  // Then each language has a locale file that will need to be imported
  import en from 'react-intl/locale-data/en';
  import es from 'react-intl/locale-data/es';
  import fr from 'react-intl/locale-data/fr';
  
  // When imports are done instantiate addLocaleData passing it an array
  // Each of the languages will be spread in the array
  addLocaleData([...en, ...es, ...fr]);
  
  // The next step is to get the user's locale, using the browser navigator
  // The first value in the array is tpically the user's favoured language
  let locale = (navigator.languages && navigator.languages[0])
    // Some browsers may not support navigator.languages
    || navigator.language
    // This may be an option for internet explorer users
    || navigator.userLanguage
    // This is the fallback if none of the others are available
    || 'en-US';
  
  // Then wrap the app component with the IntlProvider component and provide it 2 properties
  <IntlProvider>
    <App locale={locale} messages={messages[locale]}/>
  </IntlProvider>
  
2 - Convert A Hard Coded String Using react-intl FormattedMessage
Example Syntax
  // Add some strings to the messages.js file
  // The nested objects are a personal choice of the instrcutor as it provides structure and readability
  // However reat-intl expects a flat object
  export default {
    'en-US': {
      detail: {
        toggle: "Toggle",
        purchase: "Purchase this book from : ",
        reviewsHeading: "Reviews"
      }
    },
    'es-ES': {
      detail: {
        toggle: "Palanca",
        purchase: "Compre este libre de : ",
        reviewsHeading: "Comentarios"
      }
    },
    'fr-FR': {
      detail: {
        toggle: "Basculer",
        purchase: "Achetez ce livre a partir de : ",
        reviewsHeading: "Avis"
      }
    }
  }
  
  // Adding a utils.js file, this is because in order to use the nested structure above there will
  // need to be a utility added called flatten messages
  // This function is take directly from the react-intl documentation
  export function flattenMessages(nestedMessages, prefix = ""){
    return Object.keys(nestedMessages).reduce((messages, key) => {
      let value = nestedMessages[key];
      let prefixedKey = prefix ? `${prefix}.${key}`;
      
      if(typeof value === 'string'){
        messages[prefixedKey] = value;
      } else {
        Object.assign(messages, flattenMessages(value, prefixedKey));
      }
      
      return messages;
      
    }, {});
  }
  
  // This utils file will now have to be imported into the App.js file
  import { flattenMessages } from './utils';
  
  // The locale messages will then be ran through the flattenMessages function
  ReactDOM.render(
    <IntlProvider>
      <App locale={locale} messages={flattenMessages(messages[locale])}/>
    </IntlProvider>
    document.getElementById('root');
  )
