                    Redux Once And For All
                    Course Notes Part 3


To avoid potential errors due to mistypes etc which may cause silent failures which are very hard to see and debug
  - Redux uses Action Creators
  - An Action Creator is simply a file which generates objects to avoid manual typing when a dispatch is needed
  - In a larger real world application Action Creators would go into their own folders
Example Syntax
  // bankActions.js Action Creator file
  // In JS const values normally use uppercase, using const to replace having to repeatedly type
  // string is good practice as it gets rid of the risk of mistypes
  export const DEPOSIT = 'deposit';
  export const WITHDRAW = 'withdraw';
  
  export const deposit = (amount) => {
    return{type: DEPOSIT, amount}
  }
  
  export const withdraw = (amount) => {
    return{type: WITHDRAW, amount}
  }

Install React-Redux
  - npm install react-redux
  - You will need to import this into your files
    - import { connect } from 'react-redux';
    - Using connect will help avoid having to use containers
    - Connect takes 2 methods mapStateToProps() & mapDispatchToProps

Example Syntax
  // App.js file
  mapStateToProps = (state) => {
    return{
      balance: state.balance
    }
  }
  
  mapDispatchToProps = (dispatch) => {
    return {
      onDeposit: amount => dispatch(deposit(amount)),
      onWithdraw: amount => dispatch(withdraw(amount))
    }
  }
  
  // You will then pass these into connect and the components that you want inject this into
  // You can delete the app container component as this now does that functionality and exports to other components
  export default connect(mapStateToProps, mapDispatchToProps)(app)


Part 3
Reusing the code prior to adding the react-redux connect function
  - Demonstrating immutability
  - The app component is a presentational component which means that it renders markup but is not aware of how data arrives
    - It only expects the data to arrive as props
    - The majority of components will be similiar to this
  - The app container component also renders the props (the balance etc )
  - A run through of what the course has covered this far
  - The connect() function is a curried function
    - A curried function returns a function therefore there are two sets of parentheses
    - Curried functions like other items in React are from functional programming
  - Context is a React mechanism which makes any object available to any component in the hierarchy
    - This is done directly without props
    - You are not supposed to do use this directly
Example Syntax
  // Continuing the Bank Application index.js
  import React from 'react';
  import ReactDom from 'react-dom';
  import { createStore } from 'redux';
  import { provider } from 'react-redux';
  import backReducer from './bankReducer';
  import App from './App';
  import './index.css';
  
  const bankStore = createStore(bankReducer);
  
  ReactDom.render(
    <Provider store={bankStore}>
      <App />
    </Provider>,
    document.getElementByID('root');
  )
  
Again Object mutation should be avoided as it can cause issues in the application
  - Make a copy of the item in question and then perform operations on it
  - The same is true for state objects
There is also a quick demonstration of various ES6 syntax features
  - The spread operator in particular is demonstrated
  - Javascript does not have immutability by default but can be done using things like filter etc
  

Part 4
Starting exercise for demonstrating immutability, the exercise is in a github repo
  - https://github.com/cassiozen/js-immutable-exercise
  - Again use npm install & npm start to initialise repo
  - The exercises are to demonstrate various Array immutable manipulations
Example Syntax
  // Some of the exercises from the cloned repo immutable.test.jsfile
  describe('Immutable manipulations for arrays', () => {
    test('Array Shallow copy', () => {
      const fruitBasket = ['Oranges', 'Bananas', 'Apples'];
      
      // Make a copy of the array object and operate on that to avoid mutation
      const updatedFruitBasket = fruitBasket;
      
      // The same as above but using the spread operator to make a shallow copy to be operated on
      const updatedFruitBasket = [...fruitBasket];
      
      expect(updatedFruitBasket).toEqual(['Oranges', 'Bananas', 'Apples']);
      expect(updatedFruitBasket).not.toBe(fruitBasket);
    });
    
    test('Immutable Append', () => { 
      const fruitBasket = ['Oranges', 'Bananas', 'Apples'];
      
    })
  })


Part 5
