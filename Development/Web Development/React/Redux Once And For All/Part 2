                    Redux Once And For All
                    Course Notes Part 2


Part 2
Continuing using the example form the previous section
Example Syntax
  - npm install -s redux
    - This will install redux and add the save the entry to the package.json file
// Adding a BankReducer.js file in the src directory
// This application will have only 1 reducer file, larger react based apps will have more
// A reducer is a function that receives state and a dispatched action
  export default(state, action) ={
    // An action is a simple JS object, usually with a type key but could be something else eg name
    // It usually looks something like {type: 'create_account'}
    if(action.type === create_account){
      // This will be the new application state
      return {balance: 0}
    } else if(action.type === deposit){
      // This will use the previous state and update it
      return {balance: state.balance + action.amount}
    } else if (action.type === withdraw){
      return {balance: state.balance - action.amount}
    }    
  }
In larger Redux applications using multiple if else statements for actions may not be practical
  - Instead in that type of application switch is used instead
 // Switch version of the above 
 switch(action.type){
  case create_account:
    return {balance: 0}
  case deposit:
    // To ensure that amount returns a numerical value, it is wrapped in parseFloat
    // State values are immutable
    return {balance: state.balance + parseFloat(action.amount)}
  case withdraw:
    return {balance: state.balance - parseFloat(action.amount)}
  default:
    return state;
 }

To create a store in React you will need to import createStore
Example Syntax
  // Creating a store (there can be more than one in an application)
  // Also the reducer function from  above wiil need to be imported as it is a parameter in the store
  const bankStore = createStore(bankReducer);

Its a good idea to separate Redux from presentational components
Example Syntax
  class AppContainer extends Component {
    // The lifecycle method ensures that the action is dispatched and the store initiated
    componentWillMount(){
      bankStore.dispatch({
        type: 'create_account'
      });
      bankStore.subscribe(() => {
        // This is rarely used to force a component to rerender, it is rarely used because it is not needed much
        this.forceUpdate()
      })
    }
    
    deposit = (amount) => {
      bankStore.dispatch({
        type: 'deposit', amount
      })  
    }
    
    withdraw = (amount) => {
      bankStore.dispatch({
        type: 'withdraw', amount
      })  
    }
    
    render(){
      // This will interact with the store & getState is method provided by Redux
      const storeState = bankStore.getState();
      return(
        <App 
          balance={storeState.balance}
          onDeposit={this.deposit}
          onWithdraw={this.withdraw}
        />
      )
    }
  }
  
  export default AppContainer;
When looking at app dispatch behaviour using logging rather than console.log
It good practice for presentational components not to know about Redux

The above application is fragile
  - Retyping code, redundacy etc will compromise the app durability
Example Syntax
  // Changing the sample application code to be more like redux
  // The INIT action is automatically called by Redux, this mens that there is an initiation action created automatically
    - This means that we can get rid of the create_account dispatch
    - The create_account case from the switch statement will also be removed
  // bankReducer.js
    // The state makes use of ES6  default parameters
    // where the state is undefined is initialises it with a default value
    export default(state = {balance: 0}, action) => {
      switch(action.type){
        case deposit:
          return {balance: state.balance + parseFloat(action.amount)}
        case withdraw:
          return {balance: state.balance - parseFloat(action.amount)}
        default:
          return state;
      }
    }

    // App.js file
    class AppContainer extends Component{
      // This changes from componentWillMount as the state already is initiated
      // this is also the correct way of performing this
      componentDidMount(){
        // In real world applications there is a need to unsubscribe as if there were many different
        // subscriptions there would be a memory leak
        bankStore.subscribe(() => {
          this.forceUpdate();
        })
      }
    }
 
