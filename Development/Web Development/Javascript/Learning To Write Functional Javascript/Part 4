                    Learning To Write Functional Javascript
                    Course Notes Part 4


  // Logging Function (functional version)
  // This function is now a higher order function
  // Each function when returned creates a closure
  function logger(styles, useCss=true ){
    let entry;
    
    return function configLogger(logger, logMethod='log'){
      const log = logger[logMethod],
      
      return function loggerColor(color, message = ''){
        const style = styles[color];
        
        return function(value = null){
          // Create an entry message (true = browser / false = server)
          if(useCss)
            entry = [`%c${message}`, entry[0]];
          else
            entry = [`${style[1]}${message}${styles['reset'][1]}`];

          // Log Message
          log.apply(logger, [...entry, value]);
          return value;
        }
      }
    }
  }
  
  logger(styles, false)(console)('blue')('Anything', {id: 322})
The next video will show how to start leaving behind this style of code  
  
2 - Replacing Loops with Higher-Order Functions
How to replace the various types of loops with Higher Order function
Most recursive functions in Javascript can be rewritten without recursion
Example Syntax
  // Recursive Example
  const list = [12, 6, 4, 66, 4, 5];
  
  for(let i = 0; i < list.length; i++){
    const item = list[i];
    console.log('for loop ---->', item);
  }
  
  let i = list.length;
  while(i--){
    const item = list[i];
    console.log('while loop ---->', item);
  }
  
  // This is the above code refactored to use functional styles programming
  // The predicate function will retrun true or false depending on the current item passing a test
  function every(predicate, list, i = 0){
    let allPassing = true;
    for(let i = 0; i < list.length; i++){
      const item = list[i];
      if(!predicate(item)){
        allPassing = false;
        break;
      }
    }
    return allPassing;
  }
  
  // The some function is the opposite of the every function
  function some(predicate, list){
    let onePassed = false;
    let i = list.length;
    
    while(i--){
      const item = list[i];
      if(predicate(item)){
        onePassed = true;
        break;
      }
    }
    return onePassed;
  }
  
  // Some predicate functions for testing
  // gt = greater than, lt = less than
  const gt3 = n => n > 3;
  const lt5 = n => n < 5;
  

3 - A Better Way to Map and Filter

4 - Reasoning with Reduce

5 - Rendering UI Components with Higher-Order Functions

