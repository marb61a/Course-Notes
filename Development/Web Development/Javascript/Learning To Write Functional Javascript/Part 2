                    Learning To Write Functional Javascript
                    Course Notes Part 2


3 - Thinking of Functions in Terms of Their Return Values
Lambda functions were introduced in ES6 
  - They use what are called fat arrow functions
Example Syntax
  // Getting the area of a cylinder
  const pi = math.PI;
  
  const multiply = (n, m) => n * m;
  const sum = (a, b) => a + b;
  const divide = (n, d) => n / d;
  const squared = n ** 2;
  const doubled = multiply(n, 2);
  
  // An non strict function, in JS if a pure function and takes no arguments then it is essentially a
  // constant
  const height = 10;
  const diameter = 20;
  
  const diamToRadius = (diam) => divide(diam/2);
  const toPerimeter = (diam) => multiply(pi, diam);
  
  const areaCircle = (radius) => multiply(pi, squared(radius));
  // Aliasing the function
  const areaRect = multiply;
  
  function surfaceAreaCylinder(height, diameter){
    const areaTop = areaCircle(diamToRadius(diameter));
    const sideArea = areaRect(toPerimeter(diameter), height);
    
    return sum(doubled(areaTop), sideArea);
  }
  
  const totalArea = surfaceAreaCylinder(height, diameter);
  
  // The surfaceAreaCylinder function can be rewritten as a lambda function
    const surfaceAreaCylinder = (height, diameter) => sum(
      doubled(
        areaCircle(
          diamToRadius(diameter)
        )
      ), areaRect(toPerimeter(diameter), height)
    )

4 - How to Identify and Encapsulate Impurities within Our Programs
Things like
  - DB Queries, DOM events & HTTP requests are impure
A single impurity can have large effects on your logic
  - Referential transparency could be very compromised if there are impure functions interacting with pure ones
Example Syntax
  // a sample stub so that the example can pretend to use a web browser
  const document = require('./stub/document.js'); 
  const pi = math.PI;
  
  const multiply = (n, m) => n * m;
  const sum = (a, b) => a + b;
  const divide = (n, d) => n / d;
  const squared = n ** 2;
  const doubled = multiply(n, 2);
  
  const diamToRadius = (diam) => divide(diam/2);
  const toPerimeter = (diam) => multiply(pi, diam);
  
  const areaCircle = (radius) => multiply(pi, squared(radius));
  const areaRect = multiply;
  
  function surfaceAreaCylinder(height, diameter){
    const radius = diamToRadius(diameter);
    const areaSide = areaRect(toPerimeter(doubled(radius), height);
    const topArea = areaCircle(radius);
    const topBottom = doubled(topArea);
    
    return sum(doubled(areaTop), sideArea);
  }
  
  // Getting the height value from the sample stub document
  // This also shows why calling the dom can be dangerous, changes in values non existing elements for example
  // const height = document.querySelector('.height').value;
  
  // One way to provide safety is 
  function getDimensions(heightSel, diamSel){
    return function impureDimens(){
      const height = document.querySelector(heightSel);
      const diameter = document.querySelector(diamSel);

      if(!height || !diameter){
        return void(0);
      }

      return[height.value, diameter.value];
    }
  }
  
  // Pure
  const dimens = getDimensions('.height', '.diameter');
  // Impure
  const hd = dimens();
  // Do something with the results
  const area = surfaceAreaCylinder(hd[1], hd[0]);

A pure function cannot fun an impure function and still be pure
  - It can setup and return an impure function
    - We can defer execution and check results and pass them into our logic
    
