                    Advanced Asynchronous JavaScript
                    Course Notes Part 1


                    Section 1 - Introducing Advanced Asynchronous JavaScript
1 - Introducing Advanced Asynchronous JavaScript
Introduction to the course 
  - Also a quick run through of the syllabus
This is the advanced course, it is recommended that the previous course has been completed
Notes from the previous course are available here
  - https://github.com/marb61a/Course-Notes/blob/master/Javascript/Async/Asynchronous Programming in JS
Some of the course will be more difficult than usual workday problems
Rx will be implemented from the ground up
Observable was a niche topic but has become more mainstream since Angular 2 was released



                    Section 2 - Minimal Observable Implemetation
1 - Observable Interface Changes
The course uses ES6 syntax
Example Syntax
  class Observable{
    // An observable at its most fundamental is a function
    // Everything that can be done with an observable can be built on top of the subscribe function
    constructor(subscribe){
      this._subscribe = subscribe;
    }
    
    subscribe(observer){
      return this._subscribe(observer);
    }
    
    // Most API's on the internet are callback based, this means that when using Rx libraries
    // there will have to be adaptation to use them in observables
    static timeout(time){
      // The Rx can pass either 3 callbacks or an observer to simplify things the course will use
      // the observer version, under the hood the 3 callbacks are put into an observer
      // You must keep in mind that there will need to be an unsubscribe an unsubscribe after using subscribe
      return new Observable(function(subscribe){
        const handle = setTimeout(function(){
          // Using the newer syntax -> next instead of onNext
          observer.next();
          observer.complete();
        }, time);
        
        // A subscription object is just an object with an unsubscribe method
        return{
          unsubscribe(){
            clearTimeOut(handle);
          }
        }
      });
    }
  }

2 - Multiple Subscribes to One Observable
Subscribing multiple times to the one observable
Example Syntax
  class Observable{
    constructor(subscribe){
      this._subscribe = subscribe;
    }
    
    subscribe(observer){
      return this._subscribe(observer);
    }
    
    static timeout(time){
      return new Observable(function(subscribe){
        const handle = setTimeout(function(){
          observer.next();
          observer.complete();
        }, time);
        
        return{
          unsubscribe(){
            clearTimeOut(handle);
          }
        }
      });
    }
  }
  
  const obs = Observable.timeout(500);
  // This will lead to the second timeout being called, this is because of the nature of Observables
  // Observables can be though of as functions in object clothing, it is a function with an object wrapper
  // This is a key difference between observables and promises, if you call promises multiple times you will not
  // get multiple sets of side effects with observables you can. This is a cold observable and the setTimeout will
  // not be set until subscribe is called
  setTimeout(5000, function(){
    obs.subscribe({
      next(v){
        console.log("next");
      },
      complete(){
        console.log("done!!!");
      }
    })
    obs.subscribe({
      next(v){
        console.log("next");
      },
      complete(){
        console.log("done!!!");
      }
    })
  })
Lazy evaluation is not doing work until you need to do it
