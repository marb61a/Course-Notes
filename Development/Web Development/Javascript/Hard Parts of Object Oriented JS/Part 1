                    JavaScript: The Hard Parts of Object Oriented JavaScript
                    Course Notes Part 1


                    Section 1 - Introduction
1 - Course Introduction
Introduction to the course and the author
There are 5 capabilities that the instructors teaching company looks for in students
  - Analytical problem solving with code
  - Technical Communication (can a solution be implemented just from an explanation)
  - Engineering best practices such as Debugging, Use of documentation
  - Empathic and thoughtful commmunication (non-technical)
  - Language and Computer science experience
  - The top 2 are the most important
    - The course is aimed at developing these 5 factors

2 - Object Oriented Paradigm
OOP is still a huge part of software development
  - The course will cover different ways of using sub-classes
  - It makes it easier to add functionality and features to software
  - It is easier to reason about for developers
  - It is efficient(performant) in terms of memory
  - Code does need to be properly organised as it gets more complex



                    Section 2 - Object Creation
1 - Creating an Object
Example
  - Building a quiz game with users
  - Example user data 
    name: Phil    score: 4
    name: Julia   score: 5
  - The ability to increase score is the functionality needed
  - What is the best way to store this data & functionality
    - This would be in an object because an object would allow for data and functionality to be bundled up together
 Example Syntax
  // This is the principle of encapsulation
  // JS is not strict about it's implementation
  const user1 = {
    name: "Phil",
    score: 4,
    increment: function() {
      user1.score++
    }
  };
  
  // In reality there would be much more functionality
  // Decrease score, Delete user, Login User etc
  user1.increment();

2 - Object dot Notations
An alternative object creation
  // Using dot notation
  // You can assign properties to an object
  const user2 = {};     // Object literal
  
  user2.name = "Julia";
  user2.score = 5;
  user2.increment = function() {
    user2.score++;
  }

3 - Object.create
Another way to create which gives fine grained control over what the object will have access to
Example Syntax
  // Using the Object.create method
  // Using .create, on the left side will always create an empty object
  const user3 = Object.create(null); 
  
  user3.name = "Eva";
  user3.score = 9;
  user3.increment = function() {
    user3.score++;
  }

4 - Creating Objects with Functions
Example Syntax
  // Creating an object using a function
  // This is an easy approach to reason about but can have issues adding features
  // There will also be issues with performance 
  function userCreator(name, score) {
    const newUser = {};
    newUser.name = name;
    newUser.score = score;
    newUser.increment = function() {
      newUser.score++;
    }
    
    return newUser;
  }
  
  const user1 = userCreator("Phil", 4);
  const user1 = userCreator("Julia", 5);
  user1.increment();
