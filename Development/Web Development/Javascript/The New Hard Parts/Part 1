                    JavaScript: The New Hard Parts
                    Course Notes 


                    Section 1 - Introduction
1 - Introduction
The course is expected to be very demanding
  - Students will need to be explain their code clearly
Brief introduction to the instructor
Being a great engineer means the ability to build quality products
The material is asked by a lot of interviewers
Students background is agnostic so CS degree is not necessary
Candidates should meets 5 criteria
  - Analytical problem solving with code
  - Technical Communication
  - Engineering best practices and approach
  - Non-technical communication
  - Language and computer science experience
The 5th and final criteria is often the least important
  - It's important not to just know the latest framework
  - Understanding of language specific syntax will evolve

2 - JavaScript Code Execution
Running / calling / invoking a function
  - This is not the same as defining a function
When you execute a function you create a new execution context comprising
  - The thread of execution from the line by line execution of function code
  - A local memory location where anything defined in the function is stored
Example Syntax
  const num = 3;
  
  function multiplyBy2(inputNumber) {
    const result = inputNumber * 2;
    return result;
  }
  
  const output = multiplyBy2(4);
  const newOutput = multiplyBy2(10);


                    Section 2 - Asynchronous JavaScript
1 - Introducing Asynchronicity
Asynchronicity is the backbone of modern web development in JavaScript
JavaScript is single threaded
  - This means that one command at a time executes
  - It also has a synchronous execution model which means that each line is executed in the order it appears
  - What if there are times needed to execute certain pieces of code
  - There may be a need to wait on something to complete before running new code
  - This causes a conundrum between delaying code execution and avoiding thread blocking
Example Syntax
  // Solution 1
  // This solution although fairly intuitive is not tenable as it blocks further code execution
  // This does use some material from the first course
  // It is important to understand this in order to be able to handle later parts of the course
  function display(data){
    console.log(data)
  }
  
  const dataFromAPI = fetchAndWait('https://twitter.com/will/tweets/1')
  
  // The user can do nothing at this point and clicking will have no effect!!
  // No further JS code can be ran at this point which could take different amounts of time
  
  display(dataFromAPI)
  console.log(“Me later!”);

Any Asynchronous solutions should have some goals
  - Be able to do tasks that take a long time to complete
  - Continue running our JavaScript code line by line without one long task blocking further JS execution
  - When the task completes, we should be able to run functionality knowing that task is complete and data is ready!

2 - Asynchronous Web Browser APIs
There has to be a whole new range of features used in Asynchronous coding
  - These are from outside the JS engine itself
  - These are browser features such as the DOM, XHR, Browser storage etc
  - JavaScript is only a small feature of browsers
Example Syntax
  // Solution 2 from the same problem as the previous section
  // This is the only way to solve the conundrum from the previous section
  // There are know in some places as background threads
  // There are some failings with this solution but it is an extension of this solution
  // under the hood
  function printHello(){
    console.log(“Hello”);
  }
  
  // The timer is not part of JS , it is a part of the browser
  // There needs to be strict rules on this and there are edge cases
  // The setTimeout is a facade function
  setTimeout(printHello, 1000);
  
  console.log(“Me first!”);

3 - Asynchronous Web Browser APIs Q&A
Some questions from students in the course
  - What would happen if there was further deferring inside setTimeout
  - What would happen with the call stack if something was being operated on at the present moment?
