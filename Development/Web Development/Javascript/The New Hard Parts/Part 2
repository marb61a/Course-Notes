                    JavaScript: The New Hard Parts
                    Course Notes Part 2


4 - Calling the Outside World
Example Syntax
  // Reusing the previous example
  function printHello(){
    console.log(“Hello”);
  }
  
  function blockFor1Sec(){
    // Blocks in the JS thread for 1 sec (1000ms)
    // This will sit on the call stack, it cannot return to the call stack
    // while another function is executing
    
  }
  
  // setTimeout is a facade function for a browser feature : timer function
  // It completes instantaneously, this is blocked from completing, the rule in JS
  // is that the call stack must be emptied and all global synchronous code ran in order
  // for printHello to go back on the stack, it is added to the callback queue, this is checked
  // using what is called the event loop
  setTimeout(printHello, 0);
  
  blockFor1Sec();
  
  console.log("Me First!!!");

5 - Calling the Outside World Q&A
Some questions from students
  - Callback queue is a JS feature
  - There is only some prioritisation
  - It is a queue structure not a stack
  - Task queue gets processed at the end of the iteration

6 - Wrapping Up Web Browser APIs

7 - Asynchronous Exercises



                    Section 3 - Promises
1 - Introducing Promises
Interacting with the world outside JS needs rules
Promises can be readability enhancers
  - These are special objects that get returned immediately when we make a call to a web browser/API etc
    - This feature must be set up to return promises and not all are
  - They act as a placeholder for information that we hope to get back from the browsers background work
  - The functionality to be deferred can be attached until the background work is done
    - This is done using the .then method
  - Promise object will automatically trigger running the functionality
    - The value returned from the features work will be the function's input

2 - Promises
Example Syntax
  // Solution 3
  // These are the 2 pronged functions that both initiate background web browser work
  // and also return a special placeholder object called a Promise object
  

3 - Promises Q&A

4 - Promises & Microtask Queue

5 - Microtask Queue Q&A

6 - Wrapping Up Promises



                    Section 4 - Iterators
1 - Return Function Inside a Function

2 - Return Next Element with a Function

3 - Iterator Function

4 - Iterators Exercise



                    Section 5 - Generators
1 - Generators

2 - Generator Functions with Dynamic Data

3 - Generators Q&A

4 - Introducing Async Generators

5 - Async Generators

6 - Async Generators Q&A



                    Section 6 - Final
1 - Async Await

2 - Wrapping Up
Some final thoughts from the instructor

