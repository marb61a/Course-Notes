                    Asynchronous Programming in Javascript
                    Course Notes Part 6


6 - Exercises 18 - 19
Exercise 18 Retrieve url of the largest boxart
Let's try combining reduce() with map() to reduce multiple boxart objects to a single value: the url of the largest box art.
Syntax
	function() {
		var boxarts = [
				{ width: 200, height: 200, url: "http://cdn-0.nflximg.com/images/2891/Fracture200.jpg" },
				{ width: 150, height: 200, url: "http://cdn-0.nflximg.com/images/2891/Fracture150.jpg" },
				{ width: 300, height: 200, url: "http://cdn-0.nflximg.com/images/2891/Fracture300.jpg" },
				{ width: 425, height: 150, url: "http://cdn-0.nflximg.com/images/2891/Fracture425.jpg" }
			];

		// You should return an array containing only the URL of the largest box art. Remember that reduce always
		// returns an array with one item.
		return boxarts.
		reduce((acc, curr) => 
		  (acc.width * acc.height > curr.width * curr.height) ? acc : curr)
		  .map(boxart => boxart.url)
	}

Exercise 19 Reducing with an initial value
Sometimes when we reduce an array, we want the reduced value to be a different type than the items stored in the array. 
Let's say we have an array of videos and we want to reduce them to a single map where the key is the video id and the value 
is the video's title. Using reduce() can be challenging because sometimes the type of the objects in the collection differs
from the type that we want to come out of reduce(). The result of reduce() will usually be the same type as whatever the acc
value is. If you provide an acc value you would expect what comes out of reduce to be that type.
Inside of a map, filter, reduce functions etc never ever change a variable that you do not own!!!!
Using object mutation can creat a lot of complexity in an application 
Map, Filter etc never mutate arrays they create new data from old data
Because of prototypical inheritance every object in Javascript is like a linkedlist of objects
Syntax
	return videos.
		reduce(function(accumulatedMap, video) {
		var clone = Object.create(accumulatedMap);
		clone[video.id] = video.title;
		return clone;
		},	
  	{});
Object.seal() can be used to lock down objects

7 - Exercise 20
Exercise 20: Retrieve the id, title, and smallest box art url for every video.
This is a variation of the problem we solved earlier, where we retrieved the url of the boxart with a width of 150px. This 
time we'll use reduce() instead of filter() to retrieve the smallest box art in the boxarts array.
You will need to use reduce as you will be comparing items to find the smallest
You will use 2 concatAll() on 3 dimensions as it flattens by 1 each time
Syntax
	return movieLists.
		concatMap(movieList =>
    	movieList.videos.concatMap(video =>
    		video.boxarts.reduce((acc, curr) => 
     			acc.width * acc.height < curr.height * curr.width ? acc : curr).
				map( boxart =>
					({
						id: video.id,
						title: video.title,
						boxart: boxart.url
					})
				)
		  )         
    )	

8 - Exercises 21 - 23
Zipping Arrays
Sometimes we need to combine two arrays by progressively taking an item from each and combining the pair. If you visualize a
zipper, where each side is an array, and each tooth is an item, you'll have a good idea of how the zip operation works.
Exercise 21: Combine videos and bookmarks by index
Use a for loop to traverse the videos and bookmarks array at the same time. For each video and bookmark pair, create a 
{videoId, bookmarkId} pair and add it to the videoIdAndBookmarkIdPairs array.
Syntax
// There is the video and bookmarks arrays above this but this is where the functionality occurs
	counter,
	videoIdAndBookmarkIdPairs = [];

	for(counter = 0; counter < Math.min(videos.length, bookmarks.length); counter++) {
    videoIdAndBookmarkIdPairs.push({videoId: videos[counter].id, bookmarkId: bookmarks[counter].id })
  }

	return videoIdAndBookmarkIdPairs;

Exercise 22: Implement zip
Let's add a static zip() function to the Array type. The zip function accepts a combiner function, traverses each array at
the same time, and calls the combiner function on the current item on the left-hand-side and right-hand-side. The zip
function requires an item from each array in order to call the combiner function, therefore the array returned by zip will
only be as large as the smallest input array.
Syntax
  // JSON.stringify(Array.zip([1,2,3],[4,5,6], function(left, right) { return left + right })) === '[5,7,9]'
  Array.zip = function(left, right, combinerFunction) {
    var counter,
      results = [];

    for(counter = 0; counter < Math.min(left.length, right.length); counter++) {
    // This generalises the zip functioin
      results.push(combinerFunction(left[counter], right[counter]))
    }
    return results;
  };

Exercise 23 Combine Videos And Bookmarks By Index
Let's repeat exercise 21, but this time lets use your new zip() function. For each video and bookmark pair, create a 
{videoId, bookmarkId} pair.
Syntax
  return Array.
		zip(
    	videos,
      bookmarks,
      (video, bookmark) => ({videoId: video.id, bookmarkId: bookmark.id})
    )
It can seem difficult to move away from loops but the functions being learned are much more self descriptive
It is important to master these functions
There are many ways to process a collection and many of what seemed new are just specialisations of an overall pattern

9 - Exercise 24
Exercise 24: Retrieve each video's id, title, middle interesting moment time, and smallest box art url.
This is a variation of the problem we solved earlier. This time each video has an interesting moments collection, each 
representing  a time during which a screenshot is interesting or representative of the title as a whole. Notice that both 
the boxarts and interestingMoments arrays are located at the same depth in the tree. Retrieve the time of the middle
interesting moment and the smallest box art url simultaneously with zip(). Return an {id, title, time, url} object for 
each video.
Syntax
return movieLists.
		concatMap(movieList => 
    	movieList.videos.concatMap(video => {
      	var middleInterestingMoment = 
        	video.interestingMoments.filter(moment => moment.type === "Middle");
  			var smallestBoxArt = video.boxarts.reduce(
        	(smallestSoFar, current) => 
          	smallestSoFar.width * smallestSoFar.height < current.width * current.height ?
          	smallestSoFar : current);
  			return Array.zip(middleInterestingMoment, smallestBoxArt, (moment, boxart) => ({
                  id: video.id,
                  title: video.title,
                  time: moment.time,
                  url: boxart.url
          }));
       })
		);
When solving problems like the one above you will ask yourself which is the right function to use as there are only 5
Zip allows you to use as many arrays as you like


										Section 4 - Creating Trees
1 - Debugging Async
Debugging these progrgams will differ from what would have been done previously
Debugging tools are built for debugging existing imperative programs
Debugging async programs can be very difficult
Instead of the usual procedure of step overs you will set breakpoint run set breakpoint run ...
Chrome is the browser used for debugging
  - Add a breakpoint and play(using the play button)
Browser optimisations may cause bugs
Unit tests should be very much the same
Most JS testing frameworks support Async testing

2 - SQL Comparison
Quick overview of the material covered thus far
Some of the examples used thus far are very similar to SQL
  - The syntax is different but the concepts are very similar
Map, filter very same as SQL concepts
SQL Example Syntax
  - SELECT videos.name, lists.name FROM video videos FROM list lists WHERE list.id = video.listid 
  - The same in JS is
    var videoNamesAndListNames = lists.map(list =>
      videos.filter(video => video.listid === list.id)
      .map(video => {
        name: video.name,
        listName: list.name
      })).concatAll()
The same operations occur in
  - Filter & WHERE
  - Map & SELECT

3 - Exercise 25
Exercise 25: Converting from Arrays to Trees
When information is organized in a tree like a JSON expression, relationships point from parent to child. In relational 
systems like databases, relationships point from children to their parents. Both ways of organizing information are
equivalent, and depending on the circumstances, we might get data organized in one way or another. It may surprise you to 
learn that you can use the 5 query functions you already know to easily convert between these representations. In other words, not only can you query arrays from trees, 
you can query trees from arrays.
We have 2 arrays each containing lists, and videos respectively. Each video has a listId field indicating its parent list. 
We want to build an array of list objects, each with a name and a videos array. The videos array will contain the video's 
id and title. In other words we want to build the following structure:
Syntax 
  return lists.map( list => 
        ({"name": list.name, 
          videos: videos
            .filter(video => video.listId === list.id).map(
             video => ({id: video.id, name: video.name, title: video.title})
        )})
      )

4 - Exercise 26a

5 - Exercise 26b

6 - Exercise 27



                    Section 5 - Handling Events with Observables
1 - Exercises 28 - 30

2 - Exercise 31

3 - Observables And Events
Example Syntax
  // Taking an existing example and evolving it into a mouse drag event
  // The example as it exists at the beginning of the demonstration
  var moviesWithHighRatings = 
    movieLists.
      concatMap(function(movieList){
        return movieList.videos.
          filter(function(video){
            return video.rating === 5.0;
          })
      })
   
   // The mouse drags example
   var drags = 
    element.mouseDowns.
      concatMap(function(mouseDown){
        return element.mouseMoves.
          // takeUntil is similar to filter as it takes a collection and makes it smaller
          takeUntil(element.mouseUps)
      })

4 - Anatomy Of An Observable

5 - Creating A setTimeout Observable

6 - Observables vs Promises

7 - Exercise 32

8 - Exercise 33



                    Section 6 - Handling HTTP Requests with Observables
1 - Exercise 34

2 - Searching Wikipedia

3 - JSONP as an Observable

4 - Composing a Stream

5 - Displaying AutoComplete Data

6 - distinctUntilChanged

7 - Catching Errors

8 - Handling Empty Searches

9 - Showing The Search Box

10 - Close Button Observable

11 - Completing The Close Button

13 - Audience Questions



                    Section 7 - Observable In Depth
1 - Creating an Observable Class
Example Syntax
	// A subject is both a producer and consumer
	// The example is for creating an observable everytime somebody calls a method on a class
	function Observable(forEach){
		this._forEach = forEach;
	}
	
	Observable.Prototype = {
		forEach: function(onNext, onError, onCompleted){
			if(typeOf onNext === 'function'){
				this._forEach({
					onNext: onNext,
					// If onError is null substitute it for this empty function
					onError: onError || function(){},
					// This is the same as the previous example
					onCompleted: onCompleted || onCompleted
				})
			} else{
				// 
				return this._forEach(onNext);
			}
		}
	}
	
	new Obervable(function forEach(observer){
	
	})
	
2 - Observable Map Function

3 - Observable Filter Function

4 - Using the Observable Class

5 - Observable Take Function

6 - Implementing A Better Object.observe

7 - Binding Between Views And Models

8 - Syncing Data with the Server

9 - Observables As Animations
                    
