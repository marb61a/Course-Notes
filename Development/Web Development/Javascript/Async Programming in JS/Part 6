                    Asynchronous Programming in Javascript
                    Course Notes Part 6


6 - Exercises 18 - 19
Exercise 18 Retrieve url of the largest boxart
Let's try combining reduce() with map() to reduce multiple boxart objects to a single value: the url of the largest box art.
Syntax
	function() {
		var boxarts = [
				{ width: 200, height: 200, url: "http://cdn-0.nflximg.com/images/2891/Fracture200.jpg" },
				{ width: 150, height: 200, url: "http://cdn-0.nflximg.com/images/2891/Fracture150.jpg" },
				{ width: 300, height: 200, url: "http://cdn-0.nflximg.com/images/2891/Fracture300.jpg" },
				{ width: 425, height: 150, url: "http://cdn-0.nflximg.com/images/2891/Fracture425.jpg" }
			];

		// You should return an array containing only the URL of the largest box art. Remember that reduce always
		// returns an array with one item.
		return boxarts.
		reduce((acc, curr) => 
		  (acc.width * acc.height > curr.width * curr.height) ? acc : curr)
		  .map(boxart => boxart.url)
	}

Exercise 19 Reducing with an initial value
Sometimes when we reduce an array, we want the reduced value to be a different type than the items stored in the array. 
Let's say we have an array of videos and we want to reduce them to a single map where the key is the video id and the value 
is the video's title. Using reduce() can be challenging because sometimes the type of the objects in the collection differs
from the type that we want to come out of reduce(). The result of reduce() will usually be the same type as whatever the acc
value is. If you provide an acc value you would expect what comes out of reduce to be that type.
Inside of a map, filter, reduce functions etc never ever change a variable that you do not own!!!!
Using object mutation can creat a lot of complexity in an application 
Map, Filter etc never mutate arrays they create new data from old data
Because of prototypical inheritance every object in Javascript is like a linkedlist of objects
Syntax
	return videos.
		reduce(function(accumulatedMap, video) {
		var clone = Object.create(accumulatedMap);
		clone[video.id] = video.title;
		return clone;
		},	
  	{});
Object.seal() can be used to lock down objects

7 - Exercise 20
Exercise 20: Retrieve the id, title, and smallest box art url for every video.
This is a variation of the problem we solved earlier, where we retrieved the url of the boxart with a width of 150px. This 
time we'll use reduce() instead of filter() to retrieve the smallest box art in the boxarts array.
You will need to use reduce as you will be comparing items to find the smallest
You will use 2 concatAll() on 3 dimensions as it flattens by 1 each time
Syntax
	return movieLists.
		concatMap(movieList =>
    	movieList.videos.concatMap(video =>
    		video.boxarts.reduce((acc, curr) => 
     			acc.width * acc.height < curr.height * curr.width ? acc : curr).
				map( boxart =>
					({
						id: video.id,
						title: video.title,
						boxart: boxart.url
					})
				)
		  )         
    )	

8 - Exercises 21 - 23
Zipping Arrays
Sometimes we need to combine two arrays by progressively taking an item from each and combining the pair. If you visualize a
zipper, where each side is an array, and each tooth is an item, you'll have a good idea of how the zip operation works.
Exercise 21: Combine videos and bookmarks by index
Use a for loop to traverse the videos and bookmarks array at the same time. For each video and bookmark pair, create a 
{videoId, bookmarkId} pair and add it to the videoIdAndBookmarkIdPairs array.
Syntax
// There is the video and bookmarks arrays above this but this is where the functionality occurs
	counter,
	videoIdAndBookmarkIdPairs = [];

	for(counter = 0; counter < Math.min(videos.length, bookmarks.length); counter++) {
    videoIdAndBookmarkIdPairs.push({videoId: videos[counter].id, bookmarkId: bookmarks[counter].id })
  }

	return videoIdAndBookmarkIdPairs;

