                    Asynchronous Programming in Javascript
                    Course Notes Part 4


2 - Exercises 6 - 11
Exercise 6 Syntax
Use forEach() to loop through the videos in the newReleases array and, if a video has a rating of 5.0, add it to the videos array.
	videos = [];
	newReleases.forEach(function(video){
	    if(video.rating === 5.0){
		videos.push(video);
	    }
	  })
	return videos;

Exercise 7 Syntax
To make filtering easier, let's add a filter() function to the Array type. The filter() function accepts a predicate.
A predicate is a function that accepts an item in the array, and returns a boolean indicating whether the item should be retained in
the new array.
	Array.prototype.filter = function(predicateFunction) {
	var results = [];
	this.forEach(function(itemInArray) {
	    if(predicateFunction(itemInArray)){
		results.push(itemInArray);
	    }
		});
	return results;
};

Exercise 8 Syntax
Chain filter and map to collect the ids of videos that have a rating of 5.0
	return newReleases.
    		filter(video => video.rating === 5.0).
   	 	map(video => video.id);

Exercise 9 Syntax
Flatten the movieLists array into an array of video ids
	movieLists.forEach(movieList => {
		movieList.videos.forEach(video => {
			allVideoIdsInMovieLists.push(video.id);
		});
	});

Exercise 10 Syntax
Let's add a concatAll() function to the Array type. The concatAll() function iterates over each sub-array in the array and 
collects the results in a new, flat array. Notice that the concatAll() function expects each item in the array to be another array.
	Array.prototype.concatAll = function() {
	var results = [];
	this.forEach(function(subArray) {
	    subArray.forEach(function(item){
		results.push(item);
	    })
		});
		return results;
	};

	// JSON.stringify([ [1,2,3], [4,5,6], [7,8,9] ].concatAll()) === "[1,2,3,4,5,6,7,8,9]"
	// [1,2,3].concatAll(); // throws an error because this is a one-dimensional array

Exercise 11 Syntax
Use map() and concatAll() to project and flatten the movieLists into an array of video ids
ConcatAll only works on arrays of arrays not objects which cintain arrays hence comes after mapping in the example
	return movieLists.map(movieList => 
		movieList.videos.map(video => video.id))
	.concatAll();

3 - Exercise 12
Retrieve id, title, and a 150x200 box art url for every video
There's just more one thing: you can't use indexers. In other words, this is illegal:
	var itemInArray = movieLists[0];
Developers not comfortable with nested collections
Being Comfortable is key to becoming good at async programming
Syntax
	return movieLists.
	  map(function(movieList) {
		return movieList.videos.
		  map(function(video) {
			return video.boxarts.
			  filter(function(boxart) {
				return boxart.width === 150;
			  }).
			  map(function(boxart) {
				return {id: video.id, title: video.title, boxart: boxart.url};
			  });
		  }).
		  concatAll();
	  }).
	  concatAll();
Flatten by n - 1 for example if you have 3 levels of mapping concatAll 2 times
Ensure that your code is readable even in multiple nesting levels
Keep mapping until you have a variable bound to everything you need to create a result 

