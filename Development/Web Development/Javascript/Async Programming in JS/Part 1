                                  Asynchronous Programming in Javascript
                                  Course Notes Part 1
                    
                    
                    Section 1 - Building Blocks
1 - Introduction - 
Introduces the instructor and what is to come in the course. 
  - There is also a small dip into some preconceptions regarding Async programming. 
  - There are also some code samples used to illlustrate the road ahead.

2 - Javascript Tutorial
The second video is a very basic run through of some new ES6 syntax and some of the functions which are important
going through the course such as Map and Filter as well as a function which will be made by participants.

3 - Creating Collections 
Using map(), filter() and concatAll() to get a list of favourite Netflix titles
Example Syntax
  // Top rated movie collection example
  var getTopRatedFilms = user => 
    user.getVideoLists
    map(videoList =>
      videoList.videos.
      filter(video => video.rating === 5.0))
    concatAll();

  getTopRatedFilms(user)
    .forEach(film => console.log(film));
  
4 - Iterators and Observables
What is the difference between an event and an array
Events and arrays are both collections
Mistakes were made in the GOF design patterns book
Iterator pattern is in ES6
Iterators and Observables are deeply related
Iterators have producers and consumers
  - Consumers request information one ane piece at a time until the producer says I have no more or error occured
Syntax in example 
  - var iterator = [1,2,3].iterator();
  - console.log(iterator.next());
  - when run this will give the next number at eash iteration and a done false message until done is true
The iterator enables you to use a data structure without knowing anything about its internal implementation details and 
consume the elements in the structure
The new for of loop uses this
Map, Filter and ConcatAll can be implemented using an iterator
Observer Pattern syntax example
    - document.addEventListener(
      "mousemove";
      function next(e){
        console.log(e);
   })
This pattern was used to communicate a change to a model to the view or vice versa
In Javascript they are DOM events
In iterator pattern consumers are in control they decide when to get the next value but in the observer pattern
the producer is in control
The iterator and observer pattern are symmetrical
Iterator and Observer have different semantics
Javascript deals with push streams regularly which was not foreseen at time of book
Multiple different streams API are available 
  - DOM Events
  - Websockets
  - Server-sent Events
  - Node Streams
  - Service Workers
  - jQuery Events
  - XMLHttpRequest
  - setInterval
Various mechanisms for indication of completion
There should be one interface for push streams in Javascript
  - Observable
    - Array is an iterable which is something you can ask to give you an iterator
    - Observable === Collection + Time -- a collection that arrives over time
    
