                    Asynchronous Programming in Javascript
                    Course Notes Part 5
                    
                    
4 - Exercises 13 - 14
Exercise 13 - Implement concatMap()
Nearly every time we flatten a tree we chain map() and concatAll(). Sometimes, if we're dealing with a tree several levels
deep, we'll repeat this combination many times in our code. To save on typing, let's create a concatMap function that's just
a map operation, followed by a concatAll.
Syntax
	Array.prototype.concatMap = function(projectionFunctionThatReturnsArray) {
	return this.
		map(function(item) {
			return projectionFunctionThatReturnsArray(item);
		}).
		// apply the concatAll function to flatten the two-dimensional array
		concatAll();
	};

Exercise 14 -Use concatMap() to retrieve id, title, and 150x200 box art url for every video
Let's repeat the exercise we just performed. However this time we'll simplify the code by replacing the map().concatAll() 
calls with concatMap().
Syntax
	return movieLists.concatMap(
		movieList =>
		movieList.videos.concatMap(
			video => 
				video.boxarts.
				filter( boxart => boxart.width === 150 && boxart.height === 200 ).
				map( boxart =>
					({
						id: video.id,
						title: video.title,
						boxart: boxart.url
					})
				)
		)
	)


5 - Exercises 15 - 17
Reduce takes an array with many values an reduces it to an array with a single value
Reduce is written in such a way that it cannot be implemented over an observable, it is regarded as a code smell is reduce
is doing too much specifically if inside a function that returns one value. This is a shortcut that works when looking at an 
array definition but when looking at array and observable cases there is only one definition of reduce that will work for 
both arrays and observables and that is to return an array of one or observable of one
Reduce is for when you need to look at 2 values at least at the same time 

Exercise 15 Use forEach to find the largest box art
In this example we use forEach to find the largest box art. Each time we examine a new boxart we update a variable with the currently 
known maximumSize. If the boxart is smaller than the maximum size, we discard it. If it's larger, we keep track of it. Finally we're
left with a single boxart which must necessarily be the largest.
Syntax
	function() {
		var boxarts = [
				{ width: 200, height: 200, url: "http://cdn-0.nflximg.com/images/2891/Fracture200.jpg" },
				{ width: 150, height: 200, url: "http://cdn-0.nflximg.com/images/2891/Fracture150.jpg" },
				{ width: 300, height: 200, url: "http://cdn-0.nflximg.com/images/2891/Fracture300.jpg" },
				{ width: 425, height: 150, url: "http://cdn-0.nflximg.com/images/2891/Fracture425.jpg" }
			],
			currentSize,
			maxSize = -1,
			largestBoxart;

		boxarts.forEach(function(boxart) {
			currentSize = boxart.width * boxart.height;
			if (currentSize > maxSize) {
				largestBoxart = boxart;
				maxSize = currentSize;
			}
		});

		return largestBoxart;
	}
	
Exercise 16
Let's add a reduce() function to the Array type. Like map. Take note this is different from the reduce in ES5, which returns
a value instead of an Array!
Syntax
	// [1,2,3].reduce(function(accumulatedValue, currentValue) { return accumulatedValue + currentValue; }); === [6];
	// [1,2,3].reduce(function(accumulatedValue, currentValue) { return accumulatedValue + currentValue; }, 10); === [16];
	Array.prototype.reduce  = function(combiner, initialValue){
		var counter,
			accumulatedValue;
		
		// If array is empty do nothing
		if(this.length === 0){
			return this;
		} else {
			// If the user didn't pass an initial value, use the first item.
			if(arguments.length === 1){
				counter.length = 1;
				accumulatedValue = this[0];
			} else if (arguments.length >= 2){
				counter = 0;
				accumulatedValue = initialValue;
			} else{
				throw "Invalid arguments.";
			}
			// Loop through the array, feeding the current value and the result of
			// the previous computation back into the combiner function until
			// we've exhausted the entire array and are left with only one value.
			while(counter < this.length) {
				accumulatedValue = combiner(accumulatedValue, this[counter])
				counter++;
			}
			return [accumulatedValue];
		}
	}

Exercise 17
Retrieve the largest rating. Let's use our new reduce function to isolate the largest value in an array of ratings.
Syntax
	function() {
		var ratings = [2,3,1,4,5];
		// You should return an array containing only the largest rating. Remember that reduce always
		// returns an array with one item.
		return ratings.
		reduce(function(acc, curr){
		  return acc > curr ? acc : curr;
		})
	}

