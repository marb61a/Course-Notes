                    Safer JavaScript with the Maybe Type
                    Course Notes


1 - Course Introduction Safer JavaScript with the Maybe type
Brief introduction to the course
The course will use the Crocks library for demonstrating concepts
  - https://github.com/evilsoft/crocks
  - There are other similar other libraries available

2 - Understand the Maybe Data Type
Example Syntax 
  // A sample utility file utils.js where there are a few simple utility functions being exported
  // Beginning code
  const inc = n => n + 1;
  
  const dbl = n => n * 2;
  
  const toUpper = s => s.toUpperCase();
  
  module.exports = {
    dbl,
    inc,
    toUpper
  }
  
  // index.js will pull in utils.js
  const { inc } = require('../utils.js');
  
  const input = 2;
  
  const result = inc(input);
  
  console.log(result);      // Should be 3

3 - Create a Maybe with a `safe` Utility Function
Example Syntax
  // example index.js file
  const {inc, toUpper} =  require('../utils');             // These are just utility functions
  const Maybe = require('crocks/Maybe');
  
  // Any value that is not a number will result in a nothing
  const safeNum = val => typeof val === 'number' ? Maybe.Just(val) : Maybe.Nothing();
  
  // This will prevent errors if the inputS was not a string
  
  // If this number was change to for example an array there would be a nothing returned
  const inputN = safeNum(5);
  const resultN = inputN.map(inc);
  
  const inputS = 'Test';
  const resultS = toUpper(inputS);
  
  console.log(resultN);           // Just 6
  console.log(results);           // TEST
  
  
4 - Unwrap Values from a Maybe

5 - Safely Access Object Properties with `prop`

6 - Safely Access Nested Object Properties with `propPath`

7 - Flatten Nested Maybes with `chain`

8 - Recover from a Nothing with the `alt` method

9 - Recover from a Nothing with the `coalesce` Method

10 - Compose Functions for Reusability with the Maybe Type

11 - Apply a function in a Maybe context to Maybe inputs

12 - Make your own functions safer by lifting them into a Maybe context
