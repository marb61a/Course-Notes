                    Coercion In Javascript 
                    Course Notes Part 3


                    Section 3 - Implicit vs Explicit Coercion (continued)
4 - Implicit Coercion Booleans 
Example Syntax
  var foo = "123";
  // This forces a to boolean coercion
  if (foo){                       // Yup
    alert("Sure.");
  }
  
  foo = 0;
  if (foo){                       // Nope
    alert("Right.");
  }
  // The instructor says this is one of the worst line of code in JS
  // In this case both sides are turned into numbers and compared
  // Don't ever do a double equals where either side can be true or false
  if (foo == false){              // Yup
    alert("Yeah.");
  }
  
  var baz = foo || "foo";
  baz;                            // "foo"

5 - Double Equals Issues
Continuation of the previous section
  - Some of the logic operators eg && and || are very similar to using a ternary operator
Example Syntax
  var foo = "123";
  // When a string is compared to a number then it is changed to a number as is the boolean
  // the boolean will be 1 and the number is 123 which are not equal
  if(foo == true){                // Nope
    alert('WAT!!');
  }
  
  foo = [];
  if(foo){                        // Nope
    alert('Sure');
  }
  if(foo == false){               // Yup
    alert('WAT!!');
  }

6 - Implicit Coercion The Bad Parts
Example Syntax
  // A list of what are in the instructors opinion the worst offenders
  "0" == null;                    // false
  "0" == undefined;               // false
  // This is argued as a gotcha by the instructor as there is little reason for it being true
  "0" == false;                   // true
  "0" == NaN;                     // false
  "0" == 0;                       // true
  "0" == ""                       // false
  
  false == null;                  // false
  false == undefined;             // false
  false == NaN;                   // false
  // This is used in a lot of other languages but the instructor disagrees with using it in JS
  false == 0;                     // true
  false == "";                    // true
  false == [];                    // true
  false == {};                    // false
  
  "" == null;                     // false
  "" == undefined;                // false
  "" == NaN;                      // false
  "" == 0;                        // true
  "" == [];                       // true
  "" == {};                       // false
  
  0 == null;                      // false
  0 == undefined;                 // false
  0 == NaN;                       // false
  0 == [];                        // true
  0 == {};                        // false 

Again never use the double equals with boolean
  - == true or == false
The instructor recommends asking yourself a couple of questions
  - Can either value be true or false
  - Can either value ever be [], "" or 0
Coercion is a way to help hide away details of implementation

7 - Implicit Coercion The Safe Parts
Example Syntax
  42 == "43";                     // false
  "foo" == 42;                    // false
  "true" == true;                 // false
  
  42 == "42";                     // true
  "foo" == [ "foo" ]              // true

// Demonstrating primitive to native and back coercion
  // This involves wrapping the primitive like boxing in other languages
  // this is an implicit coercion
  var foo = "123";
  foo.length;                     // 3
  
  foo.charAt(2);                  // 3

  foo = new String("123");
  var baz = foo + "";
  typeof baz;                     // String

