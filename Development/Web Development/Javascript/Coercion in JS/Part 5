                    Coercion In Javascript 
                    Course Notes Part 5


8 - Double Vs Triple Equals
== vs ===
Example Syntax
  == - checks value
  === - checks value and type
  - The instructor is of the opinion that this is incorrect as the spec as the double equals checks the type too
The instructor recommends that the best way to think about the differences is
  == - Allows coercion
  === - Disallows coercion
  - Also they behave identically when types match
Example Syntax
  var foo = [];
  var baz = "";
  if(foo == baz){                 // yup
    alert("Doh");
  }
  if(foo === baz){                // nope
    alert("Phew");
  }
  
  foo = 0;
  if(foo == ""){                 // yup
    alert("Aargh");
  }
  if(foo === ""){                // nope
    alert("Phew");
  }
The instructor has a hitlist of examples that he thinks that JS should change
  Number("") === 0;
  Number(false) === 0;
  Number(true) === 1;
  Number(null) === 0;
  
  String([]) === "";
  String([null]) === "";
  String([undefined]) === "";

9 - Helpful Implicit Coercion
Where coercion may be helpful
Example Syntax
  var foo = "3";
  if(foo === 3 || foo === "3"){   // Yup
    alert("Thanks, but...");
  }
  
  // The instructor recockons that this is a better solution than above
  if(foo == 3){                   // Yup
    alert("Thats Nicer");
  }
  
  if(typeof foo === "string"){    // Yup
    alert("typeof always retruns a string");
  }

  Example Syntax for null and undefined
  var foo;
  if(foo == null){                // Yup
    alert("Thanks!");
  }
  
  foo = null;
  if(foo == null){                // Yup
    alert("Thanks again");
  }
  
  foo = false;
  if(foo == null){                // Nope
    alert("Phew");
  }

Proper concise code that is well written presents fewer options for errors
  - Concise is not always better

The performance of == vs ===
  - Can be tested
    - One test is by the course instructor -- https://jsperf.com/triple-equals-vs-double-equals/5
    - There are many tests available
  - Coercion does have a slight impact on performance
    - === triple equals is faster then the double equals == 
  - You can not make assertions about performance out of context!!
    - Most performance differences are inconseqential
  - Source code is for the developer not the computer
  - You should use === where it's safer and == where it's more helpful

10 - Coercion Resources And Surprises
There is a tool to help understand coercion
  - https://jsperf.com/triple-equals-vs-double-equals/5
                    
