                    Coercion In Javascript 
                    Course Notes Part 2


                    Section 2 - Coercion
1 - ToString
Coercion happens from one value type to another value type
Abstract operations
  - Related to the toString() method
  - If you use the toString abstract operation on an object the object will look to see if it has a toString method
    - If it does it is then invoked
  - If you return anything other than a string from a toString() Javascript will allow
Example Syntax 
  // This happens when you stringify objects
  // This may cause issues for single value arrays as you wolud be left with a value with no information
  []                -> ""
  [1, 2, 3]         -> "1, 2, 3"
  [null, undefined] -> ","
  [[], [], [], []]  -> ",,,"
  [,,,,]            -> ",,,"          // Trailing comma is ignored!!!!
  
  {}                -> "[object Object]"
  {a: 2}            -> "[object Object]"

Function stringification is non standard and depends on implementation
  - You maybe better avoiding this

2 - ToNumber
Takes any value and makes it into a number
Example Syntax
  ""            0       // The instructor does not like empty string going to 0
  "0"           0
  "-0"          -0
  " 009 "       9       // Whitespace and 0's are stripped out
  "3.14159"     3.14159
  "0."          0
  ".0"          0
  "."           NaN
  "0xaf"        175
Primitive values tend to be much more reasonable in behaviour than object
The instructor feels that the first entry has had such a bad effect on coercion that if resolved would fix many issues
that are present in coercion
All languages should ask what to do with corner cases
Example Syntax
  false         0
  true          1 
  null          0
  undefined     NaN
The instructor reckons that instead of resolving false and true to numbers like other languages and instead of that
resolved to NaN that might fix some issues
Example Syntax
  ToNumber(object) : ToPrimitive(number)
    - The first function that the ToPrimitive calls in valueOf()
      - This then falls back to toSting()
Example Syntax
  [""]          0
  ["0"]         0
  ["-0"]        0
  [null]        0
  [undefined]   0
  [1,2,3]       NaN
  [[[[]]]]      0

3 - ToBoolean
The ToBoolean abstraction operation is much more straightforward
Example Syntax
  // The following rules only apply to genuine ToBoolean operations as JS has
  // operations which look like they are performing ToBoolean but are not
  // Truthy means that if a legitimate ToBoolean operation is done on a value it will become the true value
  // Falsy means that if a legitimate ToBoolean operation is done on a value it will become the false value
  Falsy                 Truthy
  ""                    "foo"
  0, +0, -0             23
  null                  {a:1} 
  NaN                   [1,3]
  false                 true
  undefined             function(){}
                        ...

