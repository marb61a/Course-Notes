                    Coercion In Javascript 
                    Course Notes Part 3


                    Section 3 - Implicit vs Explicit Coercion
1 - Explicit Coercion Strings & Numbers
There is not a direct way to call toPrimitive() or toNumber()
Operations in other languages such as casting are explicit coercions
Example Syntax
  // Explicit Coercion, this is sometimes called conversion in JS
  // It is used a lot but still has a bad reputation
  var foo = "123";
  // This indicates using base10
  // Some say parseInt is a coercion
  var baz = parseInt(foo, 10);
  baz;                            //123
  
  // This is similar to type casting in other languages
  // This is an explicit coercion
  baz Number(foo);
  baz;                            //123
  
  baz = +foo;                     //Explicit?
  baz;                            //123
  
  baz = 456;
  foo = baz.toString();
  foo;                            //"456"
  
  foo = String(baz);
  foo;                            //"456"
  
The terms explict and implicit are subjective to the developer involved
  - Be consistent in the approach do not mix and match
JavaScript uses behind the scenes boxing of primitives
  - It is not explicitly coercion but part of that family

2 - Explicit Coercion Booleans
Example Syntax
  var foo = "123";
  var baz = Boolean(foo);
  baz:                              // true
  
  // Most developers use this rather than the Boolean function which in according to instructor 
  // should not be the situation
  baz = !!foo;
  baz;                              // true
  
  // Explicitly implicit
  // This is idiomatic code from languages such as Java
  // Instructor recommends against using this
  baz = foo ? true : false;
  baz;                              // true
  
  // Advanced programmers don't use the parentheses as you can drop them on constructor calls 
  // This example takes advantage of operator precedence
  var now = +new Date();
  // now = Date.now(); -- ES5 only
  
  var foo = "foo";
  // ~N -> -(N + 1)
  if(~foo.indexOf("f")){
    alert("Found it");
  }

3 - Implicit Coercion Strings & Numbers 
This happens as a side effect of some operation
The instructor disagrees with the notion that implicit coercion is always evil
Example Syntax
  var foo = "123"
  // Minus only works on arithmetic so the string is converted to a number implicitly
  var baz = foo - 0;
  baz;                            // 123
  
  // When both sides are strings both are implicitly coerced to numbers as minus only works on math
  baz = foo - "0";
  baz;                            // 123
  
  // Dividing by 1 and multiplying by 1 also causes coercion and is sometimes used in other languages
  baz = foo/1;
  baz;                            // 123
  
  // There are 2 different ways of using the plus sign, if both sides are numbers then numerical addition 
  // takes place but if one is a string the the plus sign refers string concatenation
  baz = 456;
  foo = baz + ""
  foo;                            // "456"
  
  foo = baz - "";
  foo;                            // 456
There is no performance hit from using explicit coercion rather than implicit

4 - Implicit Coercion Booleans 
Example Syntax
  var foo = "123";
  // This forces a to boolean coercion
  if (foo){                       // Yup
    alert("Sure.");
  }
  
  foo = 0;
  if (foo){                       // Nope
    alert("Right.");
  }
  // The instructor says this is one of the worst line of code in JS
  // In this case both sides are turned into numbers and compared
  // Don't ever do a double equals where either side can be true or false
  if (foo == false){              // Yup
    alert("Yeah.");
  }
  
  var baz = foo || "foo";
  baz;                            // "foo"

5 - Double Equals Issues
Continuation of the previous section
  - Some of the logic operators eg && and || are very similar to using a ternary operator
Example Syntax
  var foo = "123";
  // When a string is compared to a number then it is changed to a number as is the boolean
  // the boolean will be 1 and the number is 123 which are not equal
  if(foo == true){                // Nope
    alert('WAT!!');
  }
  
  foo = [];
  if(foo){                        // Nope
    alert('Sure');
  }
  if(foo == false){               // Yup
    alert('WAT!!');
  }

6 - Implicit Coercion The Bad Parts
Example Syntax
  // A list of what are in the instructors opinion the worst offenders
  "0" == null;                    // false
  "0" == undefined;               // false
  // This is argued as a gotcha by the instructor as there is little reason for it being true
  "0" == false;                   // true
  "0" == NaN;                     // false
  "0" == 0;                       // true
  "0" == ""                       // false
  
  false == null;                  // false
  false == undefined;             // false
  false == NaN;                   // false
  // This is used in a lot of other languages but the instructor disagrees with using it in JS
  false == 0;                     // true
  false == "";                    // true
  false == [];                    // true
  false == {};                    // false
  
  "" == null;                     // false
  "" == undefined;                // false
  "" == NaN;                      // false
  "" == 0;                        // true
  "" == [];                       // true
  "" == {};                       // false
  
  0 == null;                      // false
  0 == undefined;                 // false
  0 == NaN;                       // false
  0 == [];                        // true
  0 == {};                        // false 

Again never use the double equals with boolean
  - == true or == false
The instructor recommends asking yourself a couple of questions
  - Can either value be true or false
  - Can either value ever be [], "" or 0
Coercion is a way to help hide away details of implementation

7 - Implicit Coercion The Safe Parts
Example Syntax
  42 == "43";                     // false
  "foo" == 42;                    // false
  "true" == true;                 // false
  
  42 == "42";                     // true
  "foo" == [ "foo" ]              // true

// Demonstrating primitive to native and back coercion
  // This involves wrapping the primitive like boxing in other languages
  // this is an implicit coercion
  var foo = "123";
  foo.length;                     // 3
  
  foo.charAt(2);                  // 3

  foo = new String("123");
  var baz = foo + "";
  typeof baz;                     // String

8 - Double Vs Triple Equals
== vs ===
Example Syntax
  == - checks value
  === - checks value and type
  - The instructor is of the opinion that this is incorrect as the spec as the double equals checks the type too
The instructor recommends that the best way to think about the differences is
  == - Allows coercion
  === - Disallows coercion
  - Also they behave identically when types match
Example Syntax
  var foo = [];
  var baz = "";
  if(foo == baz){                 // yup
    alert("Doh");
  }
  if(foo === baz){                // nope
    alert("Phew");
  }
  
  foo = 0;
  if(foo == ""){                 // yup
    alert("Aargh");
  }
  if(foo === ""){                // nope
    alert("Phew");
  }
The instructor has a hitlist of examples that he thinks that JS should change
  Number("") === 0;
  Number(false) === 0;
  Number(true) === 1;
  Number(null) === 0;
  
  String([]) === "";
  String([null]) === "";
  String([undefined]) === "";

9 - Helpful Implicit Coercion
Where coercion may be helpful
Example Syntax
  var foo = "3";
  if(foo === 3 || foo === "3"){   // Yup
    alert("Thanks, but...");
  }
  
  // The instructor recockons that this is a better solution than above
  if(foo == 3){                   // Yup
    alert("Thats Nicer");
  }
  
  if(typeof foo === "string"){    // Yup
    alert("typeof always retruns a string");
  }

  Example Syntax for null and undefined
  var foo;
  if(foo == null){                // Yup
    alert("Thanks!");
  }
  
  foo = null;
  if(foo == null){                // Yup
    alert("Thanks again");
  }
  
  foo = false;
  if(foo == null){                // Nope
    alert("Phew");
  }

Proper concise code that is well written presents fewer options for errors
  - Concise is not always better

The performance of == vs ===
  - Can be tested
    - One test is by the course instructor -- https://jsperf.com/triple-equals-vs-double-equals/5
    - There are many tests available
  - Coercion does have a slight impact on performance
    - === triple equals is faster then the double equals == 
  - You can not make assertions about performance out of context!!
    - Most performance differences are inconseqential
  - Source code is for the developer not the computer
  - You should use === where it's safer and == where it's more helpful

10 - Coercion Resources And Surprises
There is a tool to help understand coercion
  - https://jsperf.com/triple-equals-vs-double-equals/5
