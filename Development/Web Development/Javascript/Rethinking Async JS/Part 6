                    Rethinking Asynchronous Javascript
                    Course Notes Part 6


6 - Exercise 3 Solution Questions Part 1
A series of Questions & Answers from students
  - The previous solution is better in the sense that the promise chain and the out put is kept separate
  - Functions should be as single purpose as purpose as possible
 - Promises resolved just once and it is immutable
 - All JS functions that have nothing passed in is the same as undefined
If you have two different then on the same promise is goes in the order
	- First registered - first executed 
  - You should not concern yourself with the implementation details here
Promise is built into ES6
If a promise fails then the whole flow fails
  - There is an implied rejection which propogates through the then's

7 - Exercise 3 Solution Questions Part 2
The Promise has to be called with the new keyword
There are two separate steps
  - Promise being resolved
  - How you respond to the resolution
  - This is an important separation of concerns
  - The message is to understand separately
There are promise libraries which should be read to understand
There is no hard rule on where you should register error handlers
If you wish to recover from an error somewhere in the promise chain then you shoul have an error handler
  - If you assume that an error is unrecoverable or fatal anywhere in the chain then put a catch at the end
You return a promise to get back to the main chain, nesting promises may cause promise hell

8 - Exercise 4 
Chaining promises together is very limiting as you will need to know in advance how many steps are in the process
  - There will be cases where this is not feasible
  - The challenge will need to have steps for an arbitrary length
    - You will render each step as soon as the previous one has completed

9 - Exercise 4 Solution
Example Syntax
   function getFile(file){
    return new Promise(function(resolve){
      fakeAjax(file, resolve);
    });
  }

  ["file1", "file2", "file3"]
    .map(getFile)
    // reduce takes in to values, the first in an initialising value
    .reduce(function combine(chain, pr){
      return chain.then(function(){
        return pr;
      }).then(output);
    }, Promise.resolve())
    .then(function(){
      output("Complete");
    })

10 - Abstractions

11 - Sequences and Gates

12 - Exercise 5

13 - Exercise 5 Solution

14 - Exercise 6



                    Section 5 - Generators
1 - Generator Example
A generator is a new form of function introduced in ES6
	- At first is may not seem that is has anything to do with Async programming
All functions is Javascript have a run to completion semantic
  - This means that it will always run to the end of that function before another one comes in
  - This is very important as it allows us to reason about things in a single threaded fashion
Generators do not have a run to completion semantic
  - Generators are a syntactic form of declaring a state machine
  - Generators have a new keyword yield, it is similar to pause
  - They can be thought of as something akin to a pausable function
  - When paused everything on the inside of the function is completely blocked
    - This is only a localised blocking
Example Syntax
  // Function * tells the engine that it is a generator
  // You can add the star to the name instead
  function* gen(){
    console.log("Hello");
    // The generator decides when it wants to pause, there is no pre-emptive interupting
    // this is what is called co-operative concurrency
    yield;
    console.log(" World");
  }
  
  // Athough it looks like calling and running a function, calling a generator does not run any of its code
  // Instead it produces an iterator
  var it = gen();
  it.next();                                        // Hello
  it.next();                                        // World
