                    Rethinking Asynchronous Javascript
                    Course Notes Part 9


3 - Reactive Sequences
Rx has a lot of stuff to learn and requires a lot of effort to learn
The author will use his own asynquence library which he added async to in order to demonstrate  Observables
  - This is to avoid becoming bogged down in learning RxJS
  - The functionality is very similar and going between the two should be transparent
  - Taking a Reactive Sequence and making an RX Observable should be fairly painless and vice versa
  - This takes the most common items from Rx and thus reduces the 200kb library to 3kb
Example Syntax
  // JQuery is used for convenience
  function fromEvent(el, eventType){
    return ASQ.react(function(proceed){
      $(el).bind(eventType.proceed);
    });
  }
  
  // This is also known as an Observable
  // rsq is for Reactive Sequence. a Reactive Sequence can be thought of as a sequence template
  var rsq = fromEvent(btn, "click");
  
  rsq
    .val(function(evt){
        return evt.target.className;
    })
    .then(function(done, className){
      if(/foobar/.test(className)){
        done(className);
      }
    })
    .val(function(className){
      console.log(className);
    })
  
  // An alternate implementation of the from event
  function fromEvent(el, eventType){
    // RxJS has a of() method too for making a reactive sequence
    var rsq = ASQ.react.of();
    // You can manually push data into Reactive Sequences
    $(el).bind(eventTYpe, req.push);
    return rsq;
  }
  
  // Another example using the of() method of making sequences
  var rsq1 = ASQ.react.of();
  var rsq2 = ASQ.react.of(1, 2, 3);
  var x = 10;
  
  setInterval(function(){
    rsq1.push(x++);
    rsq2.push(x++);
  }, 500);
  
  // Will return 1: 10, 1: 12, 1: 14....
  rsq1.val(function(v){
    console.log("1: ", v);
  });
  
  // Will return 1: 11, 1: 13, 1: 15....
  rsq2.val(function(v){
    console.log("2: ", v);
  });

Higher level operations such as key presses can also be defined as streams
  - This is one of the most important ideas of reactive programming
Example Syntax
  // Higher level streams demo
  var rsq1 = fromEvent(btn, "click"),
      rsq2 = fromEvent(inp, "keypress"),
      
      // In RxJS terminology .all is called .zip
      rsq3 = ASQ.react.all(rsq1, rsq2),
      // In RxJS terminology .any is called .merge
      rsq4 = ASQ.react.any(rsq1, rsq2);
  
  rsq3.val(function(evt1, evt2){
  
  });
  rsq4.val(function(evt){
  
  })

4 - Exercise 8
The Exercise in the chapter is to get used to observables
  - It is not designed to be a difficult exercise rather one to get thinking about using observables
  
5 - Exercise 8 Solution Part 1
Example Syntax
  // There are several different ways to solve this exercise
  $(document).ready(function(){
    var $btn = $("#btn"),
        $list = $("#list"),
        
        clicks = ASQ.react.of(),
        timer = ASQ.react.of();
    
    $btn.click(function(evt){
      clicks.push(evt);
    });
    
    setInterval(function(){
      timer.push();
    }, 1000);
    
    // Again using the ASQ library  instead of RxJS, in RxJS zip is the equivalent of all
    var msgs = ASQ.react.all(clicks, timer);
    
    msgs.val(function(){
      $list.append($("<div>Clicked</div>"));
    })
  })
