                    Rethinking Asynchronous Javascript
                    Course Notes Part 5


3 - Promise Flow Control
Using the API is where people normally start learning about promises
Very rare to have a single asychronous action in a modern Javascript programme
Managing how all steps in your programme occur is called Flow Control
Chaining Promises
  - If you have 2 promises the return of the first promise inside a handler should be the second promise   
Example Psedocode
  doFirstThing()
    .then(function(){
      return doSecondThing();
    })
    .then(function(){
      return doThirdThing();
    })
    .then(
      complete, 
      error
    );
The fact that the promises are using a vertical chain rather that being nested is the least important factor
Delay Example Syntax
  function delay(num){
    return new Promise(function(resolve, reject){
      setTimeOut(resolve,num);
    })
  }
  delay(100)
  .then(function(){
    return delay(50);
  })
  .then(function(){
    return delay(200);
  })
  .then(function(){
    console.log('All Done');
  })
Meaning of Life Example Syntax
  function getData(d){
    return new Promise(function(resolve, reject){
      setTimeOut(function(){
        resolve(d);
      }, 1000);
    })
  }
  var x;
  
  getData(10)
  .then(function(num1){
    x = 1 + num1;
    return getData(30);
  })
  .then(function(num2){
    var y = 1 + num2;
    return getData("The meaning of life : " + (x + y));
  })
  .then(function(answer){
    console.log(answer);
  })

4 - Exercise 3
This is similar to the previous exercise
- The challenge is to sequence promises

5 - Exercise 3 Solution
Solution Syntax (get file section only)
  function output(text){
    consle.log(text);
  }

  function getFile(file){
    return new Promise(function(resolve){
      fakeAjax(file, resolve);
    });
  }
  
  // Get files in parallel
  var file1 = getFile("file1");
  var file2 = getFile("file2");
  var file3 = getFile("file3");
  
  // This renders as each file finishes but only as the previous completes
  file1
    .then(output)
    .then(function(){
      return file2;
    })
    .then(output)
    .then(function(){
      return file3;
    })
    .then(output)
    .then(function(){
      return output("complete");
    });
  
