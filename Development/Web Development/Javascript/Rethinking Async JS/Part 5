                    Rethinking Asynchronous Javascript
                    Course Notes Part 5


3 - Promise Flow Control
Using the API is where people normally start learning about promises
Very rare to have a single asychronous action in a modern Javascript programme
Managing how all steps in your programme occur is called Flow Control
Chaining Promises
  - If you have 2 promises the return of the first promise inside a handler should be the second promise   
Example Psedocode
  doFirstThing()
    .then(function(){
      return doSecondThing();
    })
    .then(function(){
      return doThirdThing();
    })
    .then(
      complete, 
      error
    );
The fact that the promises are using a vertical chain rather that being nested is the least important factor
Delay Example Syntax
  function delay(num){
    return new Promise(function(resolve, reject){
      setTimeOut(resolve,num);
    })
  }
  delay(100)
  .then(function(){
    return delay(50);
  })
  .then(function(){
    return delay(200);
  })
  .then(function(){
    console.log('All Done');
  })
Meaning of Life Example Syntax
  function getData(d){
    return new Promise(function(resolve, reject){
      setTimeOut(function(){
        resolve(d);
      }, 1000);
    })
  }
  var x;
  
  getData(10)
  .then(function(num1){
    x = 1 + num1;
    return getData(30);
  })
  .then(function(num2){
    var y = 1 + num2;
    return getData("The meaning of life : " + (x + y));
  })
  .then(function(answer){
    console.log(answer);
  })

4 - Exercise 3
This is similar to the previous exercise
- The challenge is to sequence promises

5 - Exercise 3 Solution
Solution Syntax (get file section only)
  function output(text){
    consle.log(text);
  }

  function getFile(file){
    return new Promise(function(resolve){
      fakeAjax(file, resolve);
    });
  }
  
  // Get files in parallel
  var file1 = getFile("file1");
  var file2 = getFile("file2");
  var file3 = getFile("file3");
  
  // This renders as each file finishes but only as the previous completes
  file1
    .then(output)
    .then(function(){
      return file2;
    })
    .then(output)
    .then(function(){
      return file3;
    })
    .then(output)
    .then(function(){
      return output("complete");
    });
  
6 - Exercise 3 Solution Questions Part 1
A series of Questions & Answers from students
  - The previous solution is better in the sense that the promise chain and the out put is kept separate
  - Functions should be as single purpose as purpose as possible
 - Promises resolved just once and it is immutable
 - All JS functions that have nothing passed in is the same as undefined
If you have two different then on the same promise is goes in the order
	- First registered - first executed 
  - You should not concern yourself with the implementation details here
Promise is built into ES6
If a promise fails then the whole flow fails
  - There is an implied rejection which propogates through the then's

7 - Exercise 3 Solution Questions Part 2
The Promise has to be called with the new keyword
There are two separate steps
  - Promise being resolved
  - How you respond to the resolution
  - This is an important separation of concerns
  - The message is to understand separately
There are promise libraries which should be read to understand
There is no hard rule on where you should register error handlers
If you wish to recover from an error somewhere in the promise chain then you shoul have an error handler
  - If you assume that an error is unrecoverable or fatal anywhere in the chain then put a catch at the end
You return a promise to get back to the main chain, nesting promises may cause promise hell

8 - Exercise 4 
Chaining promises together is very limiting as you will need to know in advance how many steps are in the process
  - There will be cases where this is not feasible
  - The challenge will need to have steps for an arbitrary length
    - You will render each step as soon as the previous one has completed

9 - Exercise 4 Solution
Example Syntax
   function getFile(file){
    return new Promise(function(resolve){
      fakeAjax(file, resolve);
    });
  }

  ["file1", "file2", "file3"]
    .map(getFile)
    // reduce takes in to values, the first in an initialising value
    .reduce(function combine(chain, pr){
      return chain.then(function(){
        return pr;
      }).then(output);
    }, Promise.resolve())
    .then(function(){
      output("Complete");
    })

10 - Abstractions

11 - Sequences and Gates

12 - Exercise 5

13 - Exercise 5 Solution

14 - Exercise 6



                    Section 5 - Generators
1 - Generator Example
A generator is a new form of function introduced in ES6
	- At first is may not seem that is has anything to do with Async programming
All functions is Javascript have a run to completion semantic
  - This means that it will always run to the end of that function before another one comes in
  - This is very important as it allows us to reason about things in a single threaded fashion
Generators do not have a run to completion semantic
  - Generators are a syntactic form of declaring a state machine
  - Generators have a new keyword yield, it is similar to pause
  - They can be thought of as something akin to a pausable function
  - When paused everything on the inside of the function is completely blocked
    - This is only a localised blocking
Example Syntax
  // Function * tells the engine that it is a generator
  // You can add the star to the name instead
  function* gen(){
    console.log("Hello");
    // The generator decides when it wants to pause, there is no pre-emptive interupting
    // this is what is called co-operative concurrency
    yield;
    console.log(" World");
  }
  
  // Athough it looks like calling and running a function, calling a generator does not run any of its code
  // Instead it produces an iterator
  var it = gen();
  it.next();                                        // Hello
  it.next();                                        // World

2 - Messaging
Generators are very important for the future of Async JS programming
  - The instructor recommends reading and learning as much as possible on Generators
Example Syntax
  function *main(){
    yield 1;
    yield 2;
    yield 3;
  }
  
  var it = main();
  
  it.next();                                        // {value: 1, done: false}
  it.next();                                        // {value: 2, done: false}
  it.next();                                        // {value: 3, done: false}
  it.next();                                        // {value: undefined, done: true}
  
When you do a return from a generator it immediately completes the generator
  - Whatever you have returned is sent out as the value
  - When you use a yield you send out the value and a done false
  - forOf is included specifically for using with Generators and ES6
You can also pass messages into the generator
Example Syntax
  // A little helper for the instructor to save space on the slides
  // This basically wraps up a .next in something a little cleaner
  function coroutine(g){
    var it = g();
    return function(){
      return.it.next.apply(it, arguments);
    }
  }
	
	var run = coroutine(function*(){
		// The brackets around yield are gramatically required
		var x = 1 + (yield);
		var y = 1 + (yield);
		yield(x + y);
	})
	
	run();
	run(10);
	console.log("Meaning of Life: " + run(30).value);

3 - Messaging Questions
A series of questions from students
	- Generators do not ever have to completely finish
		- Some times never ending generators are part of part of app design
	- It is entirely ok to only partially consume a generator
	- You can't start a generator twice within single threaded Javascript

4 - Async Generator
Example Syntax
	function getData(d){
		setTimeout(function(){
			run(d);
		}, 1000)
	}
	
	var run = coroutine(function*(){
		var x = 1 + (yield getData(10));
		var y = 1 + (yield getData(30));
		var answer = (yield getData(
			"Meaning of Life: " + (x + y);
		));
		console.log(answer);
	})
	
	run();

5 - Promises Generator

6 - Exercise 7

7 - Exercise 7 Solution

8 - Quiz
A quiz for students attending
  - What is callback hell, why do callbacks suffer from inversion of control and why are they unreasonable
  - Essentially a quiz on material covered in the course thus far



                    Section 6 - Observables
1 - Events-Promises
Concurrency can be thought of as event + promises
  - A lot of Async is event related
Example Syntax
  // This promise has a problem beacuse promises can only fire once
  // You could move the promise inside the click event for inversion but that is not a solution either
  // this is because you will have conflated the events and promises and there would be complexity getting 
  // data out form this structure
  var p1 = new Promise(function(resolve, reject){
    $('#btn').click(function(evt){
      var className = evt.target.classname;
      if(/foobar/.test(className)){
        resolve(className);
      } else {
        reject();
      }
      
    })
  });
  
  p1.then(function(className){
    console.log(className);
  })
  
Promises will not model well in an event oriented world
Example Syntax
  // Refactoring the above code to use lists and arrays
  $("#btn").click(function(evt){
    [evt]
    .map(function mapper(evt){
      return evt.target.className;
    })
    .filter(function filterer(className){
      return /foobar/.test(className);
    })
    .forEach(function(className){
      console.log(className);
    })
  })

2 - Observables
Observables are part of userland libraries in JS
  - There is a proposal but no guarantee that they will become part of the language
The implementation of Obervables used in the example is from RxJS
  - This is a port of the Rx library in Javascript
Example Syntax
  // Sample code from RxJS
  // An observable created from an event takes a DOM element and an event name, it automatically hooks the DOM
  // element to the event name and when the event fires it pumps another piece of data through the chain (observable)
  // There are about a dozen or so ways to create an observable
  var obsv = Rx.Observable.fromEvent(btn, "click");
  
  obsv
    // map() in the async world is invoked each time so an event stream is very similar to an array but over time
    .map(
      function mapper(evt){
        return evt.target.className;
      }
    )
    .filter(
      function filterer(className){
      return /foobar/.test(className);
      }
    )
    // This is an exclusion, this is asyncronous, it allows an item through as distinct until changed
    .distinctUntilChanged()
    // This is normally at the end of the chain
    .subscribe(
      function(data){
        var className = data[1];
        console.log(className);
      }
    )
    
RxJS has about 250 different methods available so is a relatively large library
  - RX Marbles has graphical diagrams of Observables
    - http://rxmarbles.com
  - It is very highly recommended by the course instructor

3 - Reactive Sequences
Rx has a lot of stuff to learn and requires a lot of effort to learn
The author will use his own asynquence library which he added async to in order to demonstrate  Observables
  - This is to avoid becoming bogged down in learning RxJS
  - The functionality is very similar and going between the two should be transparent
  - Taking a Reactive Sequence and making an RX Observable should be fairly painless and vice versa
  - This takes the most common items from Rx and thus reduces the 200kb library to 3kb
Example Syntax
  // JQuery is used for convenience
  function fromEvent(el, eventType){
    return ASQ.react(function(proceed){
      $(el).bind(eventType.proceed);
    });
  }
  
  // This is also known as an Observable
  // rsq is for Reactive Sequence. a Reactive Sequence can be thought of as a sequence template
  var rsq = fromEvent(btn, "click");
  
  rsq
    .val(function(evt){
        return evt.target.className;
    })
    .then(function(done, className){
      if(/foobar/.test(className)){
        done(className);
      }
    })
    .val(function(className){
      console.log(className);
    })
  
  // An alternate implementation of the from event
  function fromEvent(el, eventType){
    // RxJS has a of() method too for making a reactive sequence
    var rsq = ASQ.react.of();
    // You can manually push data into Reactive Sequences
    $(el).bind(eventTYpe, req.push);
    return rsq;
  }
  
  // Another example using the of() method of making sequences
  var rsq1 = ASQ.react.of();
  var rsq2 = ASQ.react.of(1, 2, 3);
  var x = 10;
  
  setInterval(function(){
    rsq1.push(x++);
    rsq2.push(x++);
  }, 500);
  
  // Will return 1: 10, 1: 12, 1: 14....
  rsq1.val(function(v){
    console.log("1: ", v);
  });
  
  // Will return 1: 11, 1: 13, 1: 15....
  rsq2.val(function(v){
    console.log("2: ", v);
  });

Higher level operations such as key presses can also be defined as streams
  - This is one of the most important ideas of reactive programming
Example Syntax
  // Higher level streams demo
  var rsq1 = fromEvent(btn, "click"),
      rsq2 = fromEvent(inp, "keypress"),
      
      // In RxJS terminology .all is called .zip
      rsq3 = ASQ.react.all(rsq1, rsq2),
      // In RxJS terminology .any is called .merge
      rsq4 = ASQ.react.any(rsq1, rsq2);
  
  rsq3.val(function(evt1, evt2){
  
  });
  rsq4.val(function(evt){
  
  })

4 - Exercise 8
The Exercise in the chapter is to get used to observables
  - It is not designed to be a difficult exercise rather one to get thinking about using observables
  
5 - Exercise 8 Solution Part 1
Example Syntax
  // There are several different ways to solve this exercise
  $(document).ready(function(){
    var $btn = $("#btn"),
        $list = $("#list"),
        
        clicks = ASQ.react.of(),
        timer = ASQ.react.of();
    
    $btn.click(function(evt){
      clicks.push(evt);
    });
    
    setInterval(function(){
      timer.push();
    }, 1000);
    
    // Again using the ASQ library  instead of RxJS, in RxJS zip is the equivalent of all
    var msgs = ASQ.react.all(clicks, timer);
    
    msgs.val(function(){
      $list.append($("<div>Clicked</div>"));
    })
  })

6 - Exercise 8 Solution Part 2
Example Syntax
  // Continuing to use the example from previous section
  $(document).ready(function(){
    var $btn = $('#btn'),
        $list = $('#list'),
        
        clicks = ASQ.react.of(),
        msgs = ASQ.react.of(),
        latest;
   
    $btn.click(function(evt){
      clicks.push(evt);
    });
    
    setInterval(function(){
      if(latest){
        msgs.push('Clicked!');
        latest = null;
      }
    }, 1000)
    
    clicks.val(function(evt){
      latest = evt;
    })
    
    msgs.val(function(msg){
      $list.append($("div>" + msg + "msg"))
    })
        
  })

Sampling differs from debouncing


                    Section 7 - CSP (Communicating Sequential Processes)
1 - Concurrency Channels
Exercise 10 will be a much more sophisticated exercise than others
CSP is about modelling concurrency and channels
	- A channel is similar to a stream or pipe
  - There is a difference as there is no buffer size and has the idea of back pressure built in
    - This active stream is similar to the hot and cold observables in rx
  - A channel offers something allows producer and consumer communication
  - There is no queueing of messages in channels it is 1 message  
This was invented back in the 60's
  - It bares some similarity to actor model design pattern
  - A key difference is with actors when you send a message its asynchronous
This is used extensively in the Go programming language
Example Syntax
  var ch = chan();
  
  // In Javascript generator functions use *, it can be attached to the the function keyword or name
  // There are more details on generators at the following address as well as above examples
  // https://github.com/marb61a/Course-Notes/blob/master/Javascript/ES6/ES6 The Complete Developer's Guide
  function *process1(){
    yield put(ch, "Hello");
    var msg = yield.take(ch);
    console.log(msg);
  }
  
  function *process2(){
    var greeting = yield.take(ch);
    yield put(ch, greeting + " World");
    console.log("done!");
  }
  
  // The above returns Hello World and done!
  

2 - Blocking Chains
Example Syntax
  // A more complex example than the one from the previous example
  // csp is from a library for csp
  // The functions use a while true loop which will run forever
  // These processes can be used to model how the processes in an application can run
	csp.go(function*(){
    while(true){
      yield csp.put(ch, Math.random());
    }
  });
  
  csp.go(function*(){
    while(true){
      yield csp.take(csp.timeout(500));
      var num = yield csp.take(ch);
      console.log(num);
    }
  })
  
Example Syntax
  // One of the canonical examples of CSP
  csp.go(function*(){
    var table = csp.chan();
    
    csp.go();
    csp.go();
    
  })
  
  function* player(name, table){
  
  }

3 - Event Channels

4 - Exercise 9

5 - Exercise 9 Solution

6 - Recap

7 - Exercise 10

8 - Wrap Up

