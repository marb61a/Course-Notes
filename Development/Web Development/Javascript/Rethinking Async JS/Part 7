                    Rethinking Asynchronous Javascript
                    Course Notes Part 7


2 - Messaging
Generators are very important for the future of Async JS programming
  - The instructor recommends reading and learning as much as possible on Generators
Example Syntax
  function *main(){
    yield 1;
    yield 2;
    yield 3;
  }
  
  var it = main();
  
  it.next();                                        // {value: 1, done: false}
  it.next();                                        // {value: 2, done: false}
  it.next();                                        // {value: 3, done: false}
  it.next();                                        // {value: undefined, done: true}
  
When you do a return from a generator it immediately completes the generator
  - Whatever you have returned is sent out as the value
  - When you use a yield you send out the value and a done false
  - forOf is included specifically for using with Generators and ES6
You can also pass messages into the generator
Example Syntax
  // A little helper for the instructor to save space on the slides
  // This basically wraps up a .next in something a little cleaner
  function coroutine(g){
    var it = g();
    return function(){
      return.it.next.apply(it, arguments);
    }
  }
	
	var run = coroutine(function*(){
		// The brackets around yield are gramatically required
		var x = 1 + (yield);
		var y = 1 + (yield);
		yield(x + y);
	})
	
	run();
	run(10);
	console.log("Meaning of Life: " + run(30).value);

3 - Messaging Questions
A series of questions from students
	- Generators do not ever have to completely finish
		- Some times never ending generators are part of part of app design
	- It is entirely ok to only partially consume a generator
	- You can't start a generator twice within single threaded Javascript

4 - Async Generator
Example Syntax
	function getData(d){
		setTimeout(function(){
			run(d);
		}, 1000)
	}
	
	var run = coroutine(function*(){
		var x = 1 + (yield getData(10));
		var y = 1 + (yield getData(30));
		var answer = (yield getData(
			"Meaning of Life: " + (x + y);
		));
		console.log(answer);
	})
	
	run();

5 - Promises Generator

6 - Exercise 7

7 - Exercise 7 Solution

8 - Quiz
A quiz for students attending
  - What is callback hell, why do callbacks suffer from inversion of control and why are they unreasonable
  - Essentially a quiz on material covered in the course thus far


