                    Rethinking Asynchronous Javascript
                    Course Notes Part 8


                    Section 6 - Observables
1 - Events-Promises
Concurrency can be thought of as event + promises
  - A lot of Async is event related
Example Syntax
  // This promise has a problem beacuse promises can only fire once
  // You could move the promise inside the click event for inversion but that is not a solution either
  // this is because you will have conflated the events and promises and there would be complexity getting 
  // data out form this structure
  var p1 = new Promise(function(resolve, reject){
    $('#btn').click(function(evt){
      var className = evt.target.classname;
      if(/foobar/.test(className)){
        resolve(className);
      } else {
        reject();
      }
      
    })
  });
  
  p1.then(function(className){
    console.log(className);
  })
  
Promises will not model well in an event oriented world
Example Syntax
  // Refactoring the above code to use lists and arrays
  $("#btn").click(function(evt){
    [evt]
    .map(function mapper(evt){
      return evt.target.className;
    })
    .filter(function filterer(className){
      return /foobar/.test(className);
    })
    .forEach(function(className){
      console.log(className);
    })
  })

2 - Observables
Observables are part of userland libraries in JS
  - There is a proposal but no guarantee that they will become part of the language
The implementation of Obervables used in the example is from RxJS
  - This is a port of the Rx library in Javascript
Example Syntax
  // Sample code from RxJS
  // An observable created from an event takes a DOM element and an event name, it automatically hooks the DOM
  // element to the event name and when the event fires it pumps another piece of data through the chain (observable)
  // There are about a dozen or so ways to create an observable
  var obsv = Rx.Observable.fromEvent(btn, "click");
  
  obsv
    // map() in the async world is invoked each time so an event stream is very similar to an array but over time
    .map(
      function mapper(evt){
        return evt.target.className;
      }
    )
    .filter(
      function filterer(className){
      return /foobar/.test(className);
      }
    )
    // This is an exclusion, this is asyncronous, it allows an item through as distinct until changed
    .distinctUntilChanged()
    // This is normally at the end of the chain
    .subscribe(
      function(data){
        var className = data[1];
        console.log(className);
      }
    )
    
RxJS has about 250 different methods available so is a relatively large library
  - RX Marbles has graphical diagrams of Observables
    - http://rxmarbles.com
  - It is very highly recommended by the course instructor

