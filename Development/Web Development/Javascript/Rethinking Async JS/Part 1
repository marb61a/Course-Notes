                    Rethinking Asynchronous Javascript
                    Course Notes Part 1
                    
                    
                    Section 1 - Parallel vs Async
1 - Course Introduction
Introduction to both the course and instructor
Course will be indepth
Instructor developed asynquence
  - https://github.com/getify/asynquence
Instructor prefers to learn the concepts of why rather than starting to use libraries etc without understanding why it works
Callbacks have some very serious deficiencies which will be discussed
New level of competency is an understanding of promises & generators and how they mix

2 - Single Threaded Javascript
Most people think that Async and Parallel are the same but they arent
An explanation of the differences is available 
  - https://www.quora.com/What-are-the-differences-between-parallel-concurrent-and-asynchronous-programming

3 - Concurrency
People think that concurrency means things occuring at the same time which the instructor partially agrees with
Instructor personally defines concurrency as 2 higher level tasks happening within the same timeframe
Demo of micro vs macro level tasks -- not official terminology
The operations have to happen on the same thread
Thread may suffer problems with contention 
Synchronous XHR has been deprecated and was a very bad idea
Synchronous XHR information available at
  - https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests
Interleaving operations give the impression of better performance and the ability for concurrency
Callbacks are insufficient for dealing with the complexity of modern Javascript



                    Section 2 - Callback
1 - Callback Hell
There is a website available with JS callback examples
  - http://callbackhell.com
Async Callback Example Syntax
  setTimeout(function(){
    console.log("callback");
  }, 1000);
The author call this example a continuation with 2 halves
  - 1st half is everything outside the timeout including the call itself
  - 2nd is everything inside the callback
Callbacks == Continuations
Callback Hell Example Syntax
  setTimeout(function(){
    console.log("one");
    setTimeout(function(){
      console.log("two");
      setTimeout(function(){
        console.log("three");
      }, 1000);
    }, 1000);
  }, 1000);
Sometimes referred to as the pyramid of doom
Not just about nesting or indentation
Example above in Continuation Passing Style Syntax
It suffers the same problems as above but the nesting is much more subtle
  function one(cb){
    console.log("one");
    setTimeout(cb, 1000);
  }
  function two(cb){
    console.log("two");
    setTimeout(cb, 1000);
  }
  function three(cb){
    console.log("three");
    setTimeout(cb, 1000);
  }
  one(function(){
    two(three);
  })

2 - Exercise 1
# Instructions
1. This exercise calls for you to write some async flow-control code. To start off with, you'll use callbacks only.
2. Expected behavior:
  - Request all 3 files at the same time (in "parallel").
  - Render them ASAP (don't just blindly wait for all to finish loading)
  - BUT, render them in proper (obvious) order: "file1", "file2", "file3".
  - After all 3 are done, output "Complete!".
Managing state through callbacks may seem simple but is difficult
