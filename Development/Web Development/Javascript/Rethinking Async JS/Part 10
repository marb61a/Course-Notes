                    Rethinking Asynchronous Javascript
                    Course Notes Part 10


6 - Exercise 8 Solution Part 2
Example Syntax
  // Continuing to use the example from previous section
  $(document).ready(function(){
    var $btn = $('#btn'),
        $list = $('#list'),
        
        clicks = ASQ.react.of(),
        msgs = ASQ.react.of(),
        latest;
   
    $btn.click(function(evt){
      clicks.push(evt);
    });
    
    setInterval(function(){
      if(latest){
        msgs.push('Clicked!');
        latest = null;
      }
    }, 1000)
    
    clicks.val(function(evt){
      latest = evt;
    })
    
    msgs.val(function(msg){
      $list.append($("div>" + msg + "msg"))
    })
        
  })

Sampling differs from debouncing


                    Section 7 - CSP (Communicating Sequential Processes)
1 - Concurrency Channels
Exercise 10 will be a much more sophisticated exercise than others
CSP is about modelling concurrency and channels
	- A channel is similar to a stream or pipe
  - There is a difference as there is no buffer size and has the idea of back pressure built in
    - This active stream is similar to the hot and cold observables in rx
  - A channel offers something allows producer and consumer communication
  - There is no queueing of messages in channels it is 1 message  
This was invented back in the 60's
  - It bares some similarity to actor model design pattern
  - A key difference is with actors when you send a message its asynchronous
This is used extensively in the Go programming language
Example Syntax
  var ch = chan();
  
  // In Javascript generator functions use *, it can be attached to the the function keyword or name
  // There are more details on generators at the following address as well as above examples
  // https://github.com/marb61a/Course-Notes/blob/master/Javascript/ES6/ES6 The Complete Developer's Guide
  function *process1(){
    yield put(ch, "Hello");
    var msg = yield.take(ch);
    console.log(msg);
  }
  
  function *process2(){
    var greeting = yield.take(ch);
    yield put(ch, greeting + " World");
    console.log("done!");
  }
  
  // The above returns Hello World and done!
  

2 - Blocking Chains
Example Syntax
  // A more complex example than the one from the previous example
  // csp is from a library for csp
  // The functions use a while true loop which will run forever
  // These processes can be used to model how the processes in an application can run
	csp.go(function*(){
    while(true){
      yield csp.put(ch, Math.random());
    }
  });
  
  csp.go(function*(){
    while(true){
      yield csp.take(csp.timeout(500));
      var num = yield csp.take(ch);
      console.log(num);
    }
  })
  
Example Syntax
  // One of the canonical examples of CSP
  csp.go(function*(){
    var table = csp.chan();
    
    csp.go();
    csp.go();
    
  })
  
  function* player(name, table){
  
  }

3 - Event Channels

4 - Exercise 9

5 - Exercise 9 Solution

6 - Recap

7 - Exercise 10

8 - Wrap Up
A brief wrap up of what the course has covered
