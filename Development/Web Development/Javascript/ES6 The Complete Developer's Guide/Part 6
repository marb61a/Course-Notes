                    ES6 Javascript: The Complete Developer's Guide
                    Course Notes Part 6


Section: 7 - The 'reduce' Helper
1 - Condensing Lists with Reduce
Reduce is probably the toughest to learn but also the most flexible
Example Syntax
  var number = [10, 20, 30];
  var sum = 0;
  
  // With reduce there is an initial value passed in after the function
  // That value is arbitrary but is decided based on what we want to do with the reduce
  numbers.reduce(function(sum, number){
    return sum + number;
  }, 0);


2 - A Touch More of Reduce
Example Syntax
  var primaryColors = [
    {color: 'red'},
    {color: 'yellow'},
    {color: 'blue'}
  ];

// Second value is the first argument passed into the function
primaryColors.reduce(function(previous, primaryColor){
  previous.push(primaryColor.color);
  
  return previous
}, []);


3 - Ace Your Next Interview with Reduce
Using a common Technical interview problem called The Balanced Parens problem to demonstrate the reduce usage
In the The Balanced Parens problem you are asked to write a function to find if the parenthese are balanced
The question is usually asked, given a string are the parentheses correctly balanced
Example Syntax
  function balancedParens(string){
  // By putting the exclamation mark infront of the function it turns it into an expression which return a boolean
  // In this this case 0 returns true and any other numer false
    return !string.split("").reduce(function(previous, char){
      // To avoid edge cases where parentheses balance but are in the correct order
      if(previous < 0){
        return previous;
      }
      
      if (char === "(" ){
        return ++previous;
      }
      if (char === ")" ){
        return --previous;
      }
      
      return previous;
    
    // Using a counter as the second parameter which increases by one for opening brackets
    // And then decreases by one for closing brackets, if counter greater than 0 then they are unbalanced
    }, 0);
  }
  
  balancedParens("((((");
  

4 - Exercise 1
Solution Syntax
  var trips = [{ distance: 34 }, { distance: 12 } , { distance: 1 }];
  var sum = 0;

  var totalDistance = trips.reduce(function(sum, trip){
      return sum + trip.distance;   
  }, 0);

5 - Exercise 2
Solution Syntax
  var desks = [
    { type: 'sitting' },
    { type: 'standing' },
    { type: 'sitting' },
    { type: 'sitting' },
    { type: 'standing' }
  ];

  var deskTypes = desks.reduce(function(acc, desk) {
      if (desk.type === 'sitting'){
          acc.sitting++;
      } else {
          acc.standing++;
      }

      return acc;
  }, { sitting: 0, standing: 0 });

6 - Exercise 3
Suggestion to use both the reduce and the find functions
Solution Syntax
var numbers = [1,1,2,3,4,4];
 
function unique(array) {
  return array.reduce(function(arr, acc) {
     if (!arr.find(numFind => acc === numFind))
        arr.push(acc);
     return arr;
  },[]);
}
unique(numbers);

                    
