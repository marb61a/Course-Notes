                    ES6 Javascript: The Complete Developer's Guide
                    Course Notes Part 18


                    Section: 17 - Promises and Fetch
1 - Code Execution in Javascript
ES6 has a native implementation of Promises
  - In JS there is no pausing of execution of code
  - Use of setInteral and similar will defer execution
  - You may need for things to complete before continuing execution hence Promises

2 - Terminology of Promises
Promises have 3 different states
  - Unresolved which is when still waiting for something to finish
  - Resolved which is where something has finished and is ok
  - Rejected is where something has finished and it went bad

3 - Creating Promises
Example Syntax
  // The vast majority of Promise use will be with Ajax but are not mutually dependent
  promise = new Promise((resolve, reject) =>{
    //resolve();
    // Will put the promie in the rejected state
    reject();
  });
  

4 - Then and Catch
Example Syntax
  promise = new Promise((resolve, reject) =>{
    resolve();
  });
  
  // Only called if the promise is resolved
  promise
    .then(() => console.log("finally finished") )
    .then(() => console.log('I was also ran') )
    // Will run when promise is rejected
    .catch(() => console.log('uh oh') )
  
5 - Async Code with Promises
Example Syntax
  promise = new Promise((resolve, reject) =>{
    setTimeout(() => {
      resolve();
      // Time is in milliseconds
    }, 3000);
  });
  
  promise
    .then(() => console.log("finally finished") )
    .then(() => console.log('I was also ran') )
    .catch(() => console.log('uh oh') );

6 - Ajax Requests with Fetch
Promises works well with the fetch helper
  - fetch is built into the browser
Example Syntax
  // Specifically using HTTPS
  url = "https://jsonplaceholder.typicode.com/posts/";
  
  //When making a request with fetch the response does not immediately include the data
  fetch(url)
    // Pulls some json data from the response
    .then(response => response.json())
    .then(data => console.log(data))

7 - Shortcomings of Fetch
Example Syntax
  url = "https://jsonplaceholder.typicode.com/posts/";
  
  fetch(url)
    .then(response => console.log(response))
    // If using fetch, an error above 300 does not enter the catch case
    // This is at odds with all other libraries
    // Fetch will only return the catch case when the network request fails completely
    .catch(error => console.log('Bad', error)); 
                                        
