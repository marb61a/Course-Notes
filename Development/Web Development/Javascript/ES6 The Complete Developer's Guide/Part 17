                    ES6 Javascript: The Complete Developer's Guide
                    Course Notes Part 17


9 - Symbol.Iterator with Generators
Symbol Iterator is a tool the teaches objects how to respond to the for-of loop
This section will refactor the code from the previous couple of chapters
Example Syntax
  const testingTeam = {
    lead: 'Amanda',
    tester: 'Bill',
    // ES6 allows for dynamic key interpolation
    [Symbol.iterator]: function*(){
      yield this.lead;
      yield this.tester;
    }
  }

  const engineeringTeam = {
    testingTeam,
    size: 3,
    department: 'Engineering',
    lead: 'Jill',
    manager: 'Alex',
    engineer: 'Dave',
  }
  
  function* TeamIterator(team){
    yield team.lead;
    yield team.manager;
    yield team.engineer;
    yield* team.testingTeam;
  }
  
  const names = [];
  for(let name of TeamIterator(engineeringTeam)){
    names.push(name);
  }
  
  names;

10 - Complexities of Symbol.Iterator
Example Syntax
  // Refactoring the engineering team from the previous example
    const testingTeam = {
      lead: 'Amanda',
      tester: 'Bill',
      [Symbol.iterator]: function*(){
        yield this.lead;
        yield this.tester;
      }
    }

    const engineeringTeam = {
      testingTeam,
      size: 3,
      department: 'Engineering',
      lead: 'Jill',
      manager: 'Alex',
      engineer: 'Dave',
      [Symbol.iterator]: function*(){
        yield this.lead;
        yield this.manager;
        yield this.engineer;
        yield* this.testingTeam;
      }
    }

    const names = [];
    for(let name of engineeringTeam){
      names.push(name);
    }

    names;

11 - Generators with Recursion
Example Syntax
  // Example will make use of a tree data structure
  // Tree structures are used a lot in web development 
  class Comment{
    constructor(content, children){
      this.content = content;
      this.children = children;
    }
  }
  
  const children = [
    new Comment('good comment', []),
    new Comment('bad comment', []),
    new Comment('meh', [])
  ];
  
  const tree = new Comment ('Great Post', children);
  tree;

12 - More on Generators and Recursion
Example Syntax
  // Continuing the previous example
  class Comment{
    constructor(content, children){
      this.content = content;
      this.children = children;
    }
    
    *[Symbol.iterator](){
      yield this.content;
      // Array helpers do not work with generators
      for(let child of this.children){
        yield* child;
      }
    }
  }
  
  const children = [
    new Comment('good comment', []),
    new Comment('bad comment', []),
    new Comment('meh', [])
  ];
  
  const tree = new Comment ('Great Post', children);
  const values = [];
  for(let value of tree){
    values.push(value);
  }
  values;

                    
