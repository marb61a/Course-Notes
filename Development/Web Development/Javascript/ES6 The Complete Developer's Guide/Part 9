                    ES6 Javascript: The Complete Developer's Guide
                    Course Notes Part 9
                    
                    
Section: 10 - Arrow Functions
1 - Fat Arrow Functions
Example Syntax
  ES5 Syntax Example
  const add = function(a, b){
    return a + b;
  }
  
  add(1, 2);
  
  ES6 Syntax
  // ES6 replaces the function keyword with what is called a fat arrow
  // The above example will become
  const add = (a, b) => {
    return a + b;
  }
  
  add(1, 2);
  
  // This can be further abbreviated as there is only a single JS expression into this
  // Return is not needed with a single expression as there is an implicit return which means an automatic return
  // There are exceptions for example if the single expression had a lot of logic and you wanted to put it on a separate line
  const add = (a, b) => a + b;
  
  add(1, 2);

2 - Advanced Use of Arrow Functions
Example Syntax
  // If there is a single argument going in to the function then the brackets from that can be removed too
  const double = number => 2 * number;
  
  double(8);
  
  // If there are no arguments then the parentheses have to be used
  const double = () = {
    return 2;
  }
  
  //Do not use semi colon after then function inside a bracket you will get a token error
  const double = (number => number * 2;)
  
  Array Example
  const numbers = [1, 2, 3];
  
  // ES5 Syntax example
  numbers.map(function(number){
    return 2 * number;
  });
  
  // ES6 Syntax version of above
  numbers.map(number => 2 * number);


3 - When to Use Arrow Functions
There are problems which fat arrow functions solve
Example Syntax
  // Using the ES5 example there will be a type undefined error on this.teamName
  // This is due to the value being lost and we will need to use something like bind
  // For the example to work
  const Team = {
    members: ['Jane', 'Bill'],
    teamName: 'Super Squad',
    teamSummary: function(){
      return this.members.map(function(member){
        return `${member} is on team ${this.teamName}`;
        
      // Using ES5 solution which binds the this.teamName context to the current context
      // You can also assign this to a variable and used that eg ver self = this and then self.teamName
      }.bind(this));
    }
  }
  
  team.teamSummary();


4 - When to Use Arrow Functions Continued
Using the previous example but using ES6syntax instead
Example Syntax
  const Team = {
    members: ['Jane', 'Bill'],
    teamName: 'Super Squad',
    teamSummary: function(){
    // Arrow functions use Lexical this which basically says how this is interpreted depends on
    // Where it is being placed
      return this.members.map((member) => {
         return `${member} is on team ${this.teamName}`;
      })
    }
  }
  
  team.teamSummary();

5 - Exercise 1
Solution Syntax
  const fibonacci = (n) => {
    if (n < 3) return 1;
    return fibonacci(n - 1) + fibonacci(n - 2);
  };

6 - Exercise 2
Solution Syntax
  const profile = {
    name: 'Alex',
    getName: function(){
          return `${this.name}`;
      }
    };

                    
