                    ES6 Javascript: The Complete Developer's Guide
                    Course Notes Part 12
                    
                    Section: 13 - Rest and Spread Operator
1 - Capturing Arguments with Rest and Spread
These are operators again about writing less code
Example Syntax
  // The triple dot represents the Rest Operator
  function addNumbers(...numbers){
    return numbers.reduce((sum, number) => {
      return sum + number;
    }, 0)  
  }
  
  addNumbers(1, 2, 3, 4, 5, 6, 7);
  

2 - The Rest on Rest and Spread
The Spread operator is closely related to the Rest operator 
Where as the rest operator is fundamentally used to gather the Spread operator is the the opposite
Example Syntax
  // Example uses displaying a palet of colours to users
  const defaultColours = ['red', 'green'];
  const userFavouriteColours = ['orange', 'yellow'];
  const fallColours = ['fire red', 'fall orange'];
  
  // You can also combine arrays with concat
  // Using this syntax provides clarity in code
  // To add another array is simply a matter of using the ...name
  // You can also add individual elements
  ['blue', ...fallColours, ...defaultColours, ...userFavouriteColours];

  // You can also mix spread and rest operators
  Example Syntax
  function validateShoppingList(...items){
    if(items.indexOf('milk') < 0 ){
      return ['milk', ...items];
    }
    
    return items;
  }
  
  validateShoppingList('oranges', 'bread', 'eggs');
  
3 - Look to Use Rest and Spread in This Case
Example uses creating a new JS library
Example Syntax
  const mathLibrary = {
    // If you rename this you risk breaking other users code
    calculateProduct(a, b){
      return a * b;
    }
    // The above can be refactored insted of haveing duplicate code to avoid braking
    // Using this type of refactoring and deprecating of methods is a good use case of rest and spread
    calculateProduct(...rest){
      return this.multiply(...rest);
    }
    
    multiply(a, b){
      return a * b;
    }
  }

4 - Exercise 1
Solution Syntax
  function product(...numbers) {
    return numbers.reduce((acc, number) => {
      return acc * number;
    }, 1);
  }

  product(1, 2, 3, 4, 5);

5 - Exercise 2
Solution Syntax
  function join(array1, array2) {
    return [...array1, ...array2];
  }
               
6 - Exercise 3
Solution Syntax
  function unshift(array, ...values) {
    return [...values, ...array];
  }

  unshift(array, 1, 2, 3, 4, 5);
  
