                    ES6 Javascript: The Complete Developer's Guide
                    Course Notes Part 13
                    
                    
                  Section: 14 - Destructuring
1 - Goldmine of ES6: Destructuring
This is a very commonly used feature of ES6
Example Syntax
  // ES5 Syntax
  var expense = {
    type: 'Business'
    amount: '$45USD'
  }
  
  var type = expense.type;
  var amount = expense.amount;
  
  // ES6 Syntax
  // This is not creating an object
  const { type, amount } = expense;
  
  type;
  amount;

2 - Destructuring Arguments Object
Pulling properties off an object, the amount of code can be reduced
Example Syntax
  // ES5 Syntax
  var savedFiled = {
    extension: 'jpg',
    name: 'repost',
    size: 14040
  }
  
  function fileSummary(file){
    return `The file ${file.name}.${file.extension} is of size ${file.size}`
  }
  
  fileSummary(savedFiled);
  
  // ES6 Style destructured
  // To add properties from another object add a comma and another set of brackets
  // For example ({ name, extension, size }, { color })
  function fileSummary({ name, extension, size }){
    return `The file ${name}.${extension} is of size ${size}`;
  }

3 - Destructuring Arrays
In object destructuring objects the goal is to pull properties when destructuring arrays it is to pull elements
Example Syntax
  const companies = [
    'Google',
    'Facebook',
    'Uber'
  ]
  
  // Use square brackets when destructuring an array
  // You can also use the spread operator
  const [ name ] = companies;

4 - Destructuring Arrays and Objects *At the Same Time*
Example Syntax
  const companies = [
    {name: 'Google', location: 'Mountain View'},
    {name: 'Facebook', location: 'Menlo Park'},
    {name: 'Uber', location: 'San Francisco'}
  ]
  
  // There is two sets of destructuring happening hence the double set of brackets 
  const [{ location }] = companies;
  location;
  
  // Second Example
  const Google = {
    locations: ['Mountain View', 'New York', 'London'];
  }
  
  const { locations: [ location ]} = Google;
  location;

5 - So...When to Use Destructuring?
Example Syntax
  // Long argument list can be challenging to rememer the order
  function signup({ username, password, email, dateOfBirth, city }){
    // Create a new user
    
  }
  
  signup('myname', 'mypassword', 'myemail@example.com', '1/1/1990', 'New York' );
  
  // Instead of using a list of arguments the user object can now be passed in
  // This negates worrying about argument order which is an additional layer of complexity
  const user : {
    username: 'myname',
    password: 'mypassword',
    email: 'myemail@example.com',
    dateOfBirth: '1/1/1990'
    city: 'New York'
  }
  
  signup(user);

6 - More on When to Use Destructuring
Example Syntax
  // Using array destructuring
  const points = [
    [4, 5],
    [10, 1],
    [0, 40]
  ];
  
  points.map(([ x, y ]) => {
    return {x, y};  
  })

7 - Exercise 1
Solution Syntax
  const profile = {
    title: 'Engineer',
    department: 'Engineering'
  };

  function isEngineer({ title, department }) {
    return `${title}` === 'Engineer' && `${department}` === 'Engineering';
  }

  isEngineer(profile);

8 - Exercise 2
Solution Syntax
  const classes = [
    [ 'Chemistry', '9AM', 'Mr. Darnick' ],
    [ 'Physics', '10:15AM', 'Mrs. Lithun'],
    [ 'Math', '11:30AM', 'Mrs. Vitalis' ]
  ];


  const classesAsObject = classes.map(([subject, time, teacher]) => {
      return { subject, time, teacher };
  });

9 - Exercise 3
Solution Syntax
  const numbers = [1, 2, 3];

  function double([ singleNum, ...newNumber ]) {
      if(!singleNum){
          return [];
      }
      return [singleNum * 2, ...double(newNumber) ];
  }
  
