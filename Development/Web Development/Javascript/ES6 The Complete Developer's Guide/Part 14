                    ES6 Javascript: The Complete Developer's Guide
                    Course Notes Part 14


                    Section: 15 - Classes
1 - Introduction to Classes
Javascript uses prototype inhertitance rather than object inhertitance
Classes are used to separate code
They are not a full solution
Example Syntax
  function Car(options){
    this.title = options.title;
  }
  
  // New methods are added on the protoype of the constructor
  Car.prototype.driver = function(){
    return 'vroom';
  }
  
  const car = new Car({title: 'Focus'});
  car.drive();
  car;

2 - Prototypal Inheritance
Example Syntax
  function Car(options){
    this.title = options.title;
  }
  
  Car.prototype.drive = function(){
    return 'vroom';
  }
  
  function Toyota(options){
    // Runs any initialisation that occurs on the car as well
    Car.call(this, options);
    this.color = options.color;
  }
  
  // To  be able to call the Car drive method
  Toyota.prototype = Object.create(Car.prototype);
  Toyota.prototype.constructor = Toyota;
  
  Toyota.prototype.honk = function(){
    return 'beep';
  }
  
  const toyota = new Toyota({color: "Red", title: "Daily Driver"});
  
  toyota;
  toyota.drive();
  toyota.honk();

3 - Refactoring with Classes
Example Syntax
  class Car{
    constructor({ title }){
      this.title = options.title;
    }

    drive(){
      return 'vroom';
    }
  }

  const car = new Car({ title: 'Toyota' });
  car;
  car.drive();

4 - Extending Behavior of Classes
Example Syntax
  class Car{
    constructor({ title }){
      this.title = options.title;
    }

    drive(){
      return 'vroom';
    }
  }

  class Toyota{
    constructor({ options }){
      super(options);  // This calls the car constructor
      this.color = options.color;
    }

    honk(){
      return 'beep';
    }
  }

  const toyota = new Toyota({color: "Red", title: "Daily Driver"});
  toyota.honk();
  toyota.drive();
  toyota;

5 - When to Use Classes
Javascript classes have been embraced by a large amount of the JS community
Example Syntax
  React.createClass({
    doSomething(){
    
    }
    
    doSomethingElse(){
    
    }
  });
  
  // This is much easier to use
  class MyComponent extends Component{
    doSomething(){
    
    }
    
    doSomethingElse(){
    
    }
  }

6 - Exercise 1
Solution Syntax
  class Monster {
    constructor(options){
      options = {
          name: 'dragon'
      };
      this.name = options.name;
      this.health = 100;
    }
  }

7 - Exercise 2
Solution Syntax
  class Monster {
    constructor(options) {
      this.health = 100;
      this.name = options.name;
    }
  }

  class Snake extends Monster {
      constructor(options){
          super(options);
      }
      bite(snake){
          snake.health = this.health - 10;
      }
  }

                    
