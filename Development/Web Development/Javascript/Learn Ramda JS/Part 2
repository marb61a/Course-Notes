                    Learn Ramda.js
                    Course Notes Part 2



3 - Convert a QueryString to an Object using Function Composition in Ramda
// Beginning Code
  // Requiring Ramda and using destructuring to get some of its functions
  const { identity, compose, fromPairs, map, split, tail } = require('ramda');
  
  const queryString = '?page=2&pageSize=10&total=203';
  
  const parseQs = identity;
  
  const result = parseQs(queryString);
  console.log(result);
  
// Ending Code
  const { identity, compose, fromPairs, map, split, tail } = require('ramda');
  
  const queryString = '?page=2&pageSize=10&total=203';
  
  // The process will again go from left to right
  // Tail is used to eliminate the question mark at the start of the string
  // This leaves only key-value pairs which are then split at the ampersand
  // what is left at this point is an array of key-value pair strings, these
  // are then mapped over and split at the equals sign which will give an array of
  // arrays the inner arrays which will each have a key and a value string, the Ramda fromPairs 
  // will take in the 2 value arrays and return them in property value format in an object
  // it will look like {page: '2', pageSize: '10', total: '203'}
  const parseQs = compose(fromPairs, map(split('=')), split('&'), tail);
  
  const result = parseQs(queryString);
  console.log(result);
  
  

4 - Select a Subset of Properties from a Collection of Objects in Ramda
// Beginning Code
  // Requiring Ramda
  const R = require('ramda');
  
  const products = [
    {name: 'Jeans', price: 80, category: 'clothes'},
    {name: 'Hoodie', price: 60, category: 'clothes'},
    {name: 'Jacket', price: 120, category: 'clothes'},
    {name: 'Cards', price: 35, category: 'games'},
    {name: 'iPhone', price: 649, category: 'electronics'},
    {name: 'Sauce Pan', price: 100, category: 'housewares'},
  ];
  
  const result = products;
  console.log(result);

// Ending Code
  const R = require('ramda');
  
  const products = [
    {name: 'Jeans', price: 80, category: 'clothes'},
    {name: 'Hoodie', price: 60, category: 'clothes'},
    {name: 'Jacket', price: 120, category: 'clothes'},
    {name: 'Cards', price: 35, category: 'games'},
    {name: 'iPhone', price: 649, category: 'electronics'},
    {name: 'Sauce Pan', price: 100, category: 'housewares'},
  ];
  
  // Picking a subset of an array can be donse several different ways
  // Many use the array.map function and then use each property, this
  // may not be suitable when selecting a large number of properties
  // Ramda itself has serveral options such as its own map function which
  // can be used in conjunction with Pick to select properties to pick
  // from an array. This is such a common operation however that instead
  // of doing the 2 operations seperately it can be done at once using the
  // built-in project function
  const getNameAndPrice = R.project(['name', 'price']);
  
  const result = getNameAndPrice(products);
  console.log(result);
  
  
