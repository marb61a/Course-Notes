                    Learn Ramda.js
                    Course Notes Part 4
                    
                    
7 - Change Object Properties with Ramda Lenses
// Beginning Code
  const R = require('ramda');
  
  const person = {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }

// Ending Code
  const R = require('ramda');
  
  const person = {
    firstName: 'Fred',
    lastName: 'Flintstone'
  }
  
  // To create a lense in Ramda pass 2 functions to lens(), the first function will be a getter function
  // the second function will then be a setter, this getter setter is so common that there is an even
  // more concise way available in Ramda
    const fLens = R.lens(R.prop('firstName'), R.assoc('firstName'));
  
  // This is the same operation as above 
    const fLens = R.lensProp('firstName');
  
  // The view function will take the fLens const and the person object to be used on
        const result = R.view(fLens, person);
  
  // R.set will take the fLens const as the first argument, the second argument will be the value that the
  // property wishes to set that the lense focuses on, the third will be the object again. The original object
  // is still there as the data is immutable and a copy is made to be worked on
        const result = R.set(fLens, 'Wilma', person);
  
  // Getting a property, converting it to uppercase. The Over function will take a lense and run a function
  // over the focus of that lense. The paramaters are the lens, then the function to be run on the data in
  // this case the toUpper() function and finally the object
  const result = R.over(fLens, R.toUpper, person);
  
  console.log(result);
  
  

8 - Add and Remove Items in Arrays using Filter, Reject and Partition in Ramda
// Beginning Code
  const R = require('ramda');
  
  const pets = [
    {name: 'Spike', type: 'dog'},
    {name: 'Mittens', type: 'cat'},
    {name: 'Rover', type: 'dog'},
    {name: 'Fluffy', type: 'cat'},
    {name: 'Fido', type: 'dog'}
  ];

// Ending Code
  const R = require('ramda');
  
  const pets = [
    {name: 'Spike', type: 'dog'},
    {name: 'Mittens', type: 'cat'},
    {name: 'Rover', type: 'dog'},
    {name: 'Fluffy', type: 'cat'},
    {name: 'Fido', type: 'dog'}
  ];
  
  // To list the dogs
  const dogCheck = pet => pet.type == 'dog';
  
  // This is the ramda filter method
      const result = R.filter(dogCheck, pets);
  
  // To list the cats instead of the dogs
  const result = R.reject(dogCheck, pets);
  
  // To list both dogs and cats use the partition method which creates a nested array
  // the first values are from the predicate and the second from rejecting the predicate
  const result = R.partition(dogCheck, pets);
  
  console.log(result);
  
