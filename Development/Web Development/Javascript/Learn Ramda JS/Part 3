                    Learn Ramda.js
                    Course Notes Part 3


5 - Handle Branching Logic with Ramda's Conditional Functions
// Beginning Code
  const R = require('ramda');
  
  const products = [
    {name: 'Jeans', price: 80, category: 'clothes'},
    {name: 'Cards', price: 35, category: 'games'},
    {name: 'iPhone', price: 649, category: 'electronics'},
    {name: 'Freaknomics', price: 30, category: 'books'}
  ];
  
  const pLens = R.lensProp('price');
  
  const applyDiscount = R.curry((perc, amt) => amt - (amt * (perc/100)));
  
  const adjustPrice = R.over(pLens, applyDiscount(50));
  
  const result = R.map(adjustPrice, products);
  console.log(result);

// Ending Code
  const R = require('ramda');
  
  const products = [
    {name: 'Jeans', price: 80, category: 'clothes'},
    {name: 'Cards', price: 35, category: 'games'},
    {name: 'iPhone', price: 649, category: 'electronics'},
    {name: 'Freaknomics', price: 30, category: 'books'}
  ];
  
  const pLens = R.lensProp('price');
  
  const applyDiscount = R.curry((perc, amt) => amt - (amt * (perc/100)));
  
  // This will have the Ramda ifElse function applied
  // The ifElse function takes 3 arguments, the first argument is a
  // predicate function, the second argument is the function to be run
  // on the object if the predicate evaluates to true, the third is if
  // the predicate evaluates to false.
        const adjustPrice = R.ifElse(
          R.propEq('category', 'clothes'),
          R.over(pLens, applyDiscount(50)),
          R.identity
        )
   
  // Another way of running the above is to use the Ramda when function, this runs when a condition is
  // matched, this has a counterpart which does the opposite, the unless function
        const adjustPrice = R.when(
          R.propEq('category', 'clothes'),
          R.over(pLens, applyDiscount(50)),
        );
      
      
  // It maybe the case where you want different properties to have different actions, eg you will want
  // different discounts to different items. This will then use the cond function, this function takes
  // arrays of arrays as its first argument, each inner array conatains a predicate function and a function
  // incase the predicate evaluates to true, this will return undefined for values not handled. In order to
  // eliminate these the Ramda T function is used, this will essentially do nothing but return true, identtity
  // will then return the remaining items untouched, the R.cond function is not limited to a couple of different
  // conditions, many different conditions can be used
  const adjustPrice = R.cond(
    [
      [
        R.propEq('category', 'clothes'), R.over(pLens, applyDiscount(50))],
        R.propEq('category', 'electronics'), R.over(pLens, applyDiscount(10))],
        [R.T, R.identity]
    ]
  );
  
  const result = R.map(adjustPrice, products);
  console.log(result);



6 - Declaratively Map Predicates to Object Properties Using Ramda where
// Beginning Code
  const R = require('ramda');

  const products = [
    {name: 'Jeans', price: 80, category: 'clothes', stock: 100},
    {name: 'Hoodie', price: 60, category: 'clothes', stock: 20},
    {name: 'Sneakers', price: 120, category: 'clothes', stock: 30}
    {name: 'Cards', price: 35, category: 'games', stock: 10},
    {name: 'iPhone', price: 649, category: 'electronics', stock: 5},
    {name: 'Sauce Pan', price: 100, category: 'housewares', stock: 200},
  ];
  
  const predicate = R.T;
  
  const getResults = R.pipe(R.filter(predicate), R.pluck('name'));
  
  const result = getResults(products);
  console.log(result);

// Ending Code
  const R = require('ramda');

  const products = [
    {name: 'Jeans', price: 80, category: 'clothes', stock: 100},
    {name: 'Hoodie', price: 60, category: 'clothes', stock: 20},
    {name: 'Sneakers', price: 120, category: 'clothes', stock: 30}
    {name: 'Cards', price: 35, category: 'games', stock: 10},
    {name: 'iPhone', price: 649, category: 'electronics', stock: 5},
    {name: 'Sauce Pan', price: 100, category: 'housewares', stock: 200},
  ];
  
  // R.where takes an object as its first argument, this maps keys from the target object
  // to predicate functions that will check that property individually
  const predicate = R.where({
    category: R.equals('clothes'),
    
    // Arguments are passed in to lt (less-than) in different order than normal
    // The R.__ is a placeholder
    stock: R.lt(R.__, 50)
  });
  
  const getResults = R.pipe(R.filter(predicate), R.pluck('name'));
  
  const result = getResults(products);
  console.log(result);
