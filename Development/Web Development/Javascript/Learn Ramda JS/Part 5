                    Learn Ramda.js
                    Course Notes Part 5


9 - Build a Functional Pipeline with Ramda.js
// Beginning Code
  const R = require('ramda');

  const teams = [
    {name: 'Lions', score: 5},
    {name: 'Tigers', score: 4},
    {name: 'Bears', score: 6},
    {name: 'Monkeys', score: 2}
];

// Ending Code
  const R = require('ramda');

  const teams = [
    {name: 'Lions', score: 5},
    {name: 'Tigers', score: 4},
    {name: 'Bears', score: 6},
    {name: 'Monkeys', score: 2}
  ];
  
  // Create a function and return only the top scoring team
  const getTopTeam = function(teams){
    // Start with sorting by descending score
    // R.sort is used which takes 2 items from the array at a time
    const sorted = R.sort((a, b) => b.score - a.score, teams);
    
    // Get the top scoring team using the head() function from Ramda
    // This will esentially grab the 0 index from an array
    const topTeam = R.head(sorted);
    
    // Grab the name property from the object
    // R.prop will take then name of a function and an object and return the value of
    // that property
    const topName = R.prop('name', topName);
    
    return topName;
  }

  const result = getTopTeam(teams);
  console.log(result);



10 - Pick and Omit Properties from Objects Using Ramda
// Beginning Code
  const R = require('ramda');
  
  const product = {
    name: 'widget',
    price: 10,
    shippingWeight: '2 lbs'
  }
  
  const result = ''
  console.log(result)

// Ending Code
  const R = require('ramda');
  
  const product = {
    name: 'widget',
    price: 10,
    avgRating: 4.5,
    shippingWeight: '2 lbs',
    shippingCost: 2,
    shippingMethod: 'UPS'
  }
  
  // If for example we wish to have result as a new object that just has the name and price properties from product
  const getProps = R.pick(['name', 'price']);
  const result = getProps(product);
  
  // If a property does not exist it will not be seen eg category does nt exist on the product object
  // If for example it will exist sometimes but you wish to have it listed even if undefined for consistency
  // Changing the method from pick to pickAll will allow this to happen
  const getProps = R.pickAll(['name', 'price', 'category']);
  const result = getProps(product);
  
  // You may wish to get prperties in a more programatic way, this can be done using pickBy
  // pickBy will take a predicate function
  // This will pick any value that is numeric, it is not limited on returning solely on the property value 
  const getProps = R.pickBy(val => Number(val));
  
  // When getting the value it also gets a key
  const getProps = R.pickBy((val, key) => R.contains('shipping', key));
  const result = getProps(product);
  
  // There maybe cases where it is stuff to be excluded rather than included that is needed
  const getProps = R.omit(['shippingWeight', 'shippingCost']);
  const result = getProps(product);
  
  // There is no omit variant like pick and pickBy but using negation with pickBy and contains
  // will do the same thing
  const getProps = R.pickBy((val, key) => !R.contains('shipping', key));
  const result = getProps(product);
  
  
  console.log(result)
