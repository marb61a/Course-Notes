                    Learn Ramda.js
                    Course Notes Part 6


11 - Curry and Uncurry Functions with Ramda
Example Syntax
  // Beginning code
  const R = require('ramda');
  
  const add = (a, b) => a + b;
  
  const result = add(1, 2);
  console.log(result);
  
  // Currying the function so that the function can be called with a single argument
  // and get back another function that will accept the 2nd argument at a later point in the code
  // Ending code
  const R = require('ramda');
  
  const add = a => b => a + b;
  const inc = add(1);
  
    // This will not work with 2 values
    const result = inc(3); // returns 4
    
  // To work will need 2 function calls
  const result = add(1)(2);
  console.log(result);
  

12 - Declaratively Map Data Transformations to Object Properties Using Ramda evolve

13 - Count Words in a String with Ramda's countBy and invert

14 - Handle Errors in Ramda Pipelines with tryCatch

15 - Create an Array From a Seed Value with Ramda's unfold

16 - Convert a Promise.all Result to an Object with Ramda's zip and zipObj

17 - Filter an Array Based on Multiple Predicates with Ramda's allPass Function

18 - Create a Query String from an Object using Ramda's toPairs function

19 - Convert Object Methods into Composable Functions with Ramda

20 - Sort an Array of Objects by Multiple Fields with Ramda's sortWith

21 - Refactor a Promise Chain to Function Composition using Ramda

22 - Refactor to a Point Free Function with Ramda's useWith Function

23 - Get a List of Unique Values From Nested Arrays with Ramda


24 - Debug Function Compositions with Ramda's Tap Function
                    
                    
