                    Learn Ramda.js
                    Course Notes Prt 1


1 - Refactor to Point Free Functions with Ramda using compose and converge
Example Syntax
  // The lambda library must be included, code starting off example
  const R = require('ramda');
  
  const person = {
    id: 1,
    name: Joe
  }
  
  const generateUrl = (id) => "avatar-url";
  
  const getUpdatedPerson = (person) => {
    const url = generateUrl(person.id);
    return R.assoc('avatar', url, person);
  }
  
  const result = getUpdatedPerson(person);
  console.log(result);
  
  // Code at the end of example, this refactors the existing code
  const R = require('ramda');
  
  const person = {
    id: 1,
    name: Joe
  };
  
  const generateUrl = (id) => `https://img.socialnetwork.com/avatar/${id}.png`;
  
  // Using the built-in Compose property, the arguments are passed in right to left
  // The propOr property is so that default values can be defined
  const getUrlFromPerson = R.compose(generateUrl, R.propOr('default', 'id'));
  
  // This will take 2 arguments because all of these functions are automatically curried
  // The getUrlFromPerson array will be an array of transformation functions
  // The identity property from Ramda will essentially take in the person and just return it
  // This will then go into the getUrlFromPerson and is passed left until resolved
  const getUpdatedPerson = R.converge(R.assoc('avatar'), [getUrlFromPerson, R.identity]);
  
  const result = getUpdatedPerson(person);
  console.log(result);
  
  

2 - Eliminate Function Arguments (Point-Free Style) with Ramda's Converge
Example Syntax
  // Index.js, using standard JS syntax
  const shouldBeTrue = [6, 3, 4, 5, 2, 1];
  const shouldBeFalse = [3, 4, 5, 2, 1];
  
  // xs is an array passed in 
  const isFirstBiggest = xs => {
    // Comparator function and the biggest always goes to the front in the example
    xs[0] == xs.sort((a, b) => b-a)[0]
  } 
  
  console.log(isFirstBiggest(shouldBeTrue));
  console.log(isFirstBiggest(shouldBeFalse));
  
  // Index.js after using the Ramda functions
  const shouldBeTrue = [6, 3, 4, 5, 2, 1];
  const shouldBeFalse = [3, 4, 5, 2, 1];
  import {converge, equals, head, sort, descend, identity} from 'ramda';
  
  const isFirstBiggest = converge(equals, [
    head,
    // This can be swapped out and assigned to a variable eg const biggestItem = compose(head, (sort(descend(identity))))
    compose(head, (sort(descend(identity))))
  ])

  console.log(isFirstBiggest(shouldBeTrue));
  console.log(isFirstBiggest(shouldBeFalse));
  
  
