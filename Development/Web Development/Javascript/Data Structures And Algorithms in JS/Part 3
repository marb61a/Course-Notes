


                   Section 3 - Recursion
1 - Why Recursion?
Most people remember a syntax
Recursion is a method which calls itself 
It is just a way of taking a proceedure which operates again and again, in some cases it could be replaced by a loop
They provided elegant solutions to Don't Repeat Yourself (DRY)

2 - Tracing Recursive Execution
Example Syntax
  // This will cause an infinite loop
  var callMe = function(){
    callMe();
    callMe();
    callMe('Anytime'):
  }
  
  callMe();
  
  // One way to avoid infinite loops
  var callMe = function(){
    return 'No more infinite loops';
    
    callMe('Anytime'):
  }
  
  callMe();
  
  // Using an if statement to avoid infinite looping
  var tracker = 0;
  var callMe = function(){
    tracker++;
    if(tracker === 3){
      return 'loops';
    }
    callMe('Anytime'):
  }
  
  callMe();

3 - Template for a Recursive Function

4 - Looping

5 - Factorial with Loop

6 - Factorial with Recursion

7 - Exercise: Recursion Interview Questions
  - https://github.com/kuychaco/algoClass/blob/master/recursion/recursionIntro.js

8 - Recursive Reverse Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/recursion/recursionIntro.js

9 - Recursive Multiplier Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/recursion/recursionIntro.js

10 - MinStack Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/stack.js

11 - Implementing a Queue with Two Stacks Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/queue.js



                    Section 4 - Time Complexity
1 - Space vs. Time Complexity
Introduction to Time Complexity
  - What is it that makes an algoritm fast
There are a couple of different complexities that will be discussed
  - Time Complexity and Space Complexity

2 - Calculating Time Complexity

3 - Understanding Big-O

4 - Calculating Big-O of JS Operations

5 - Calculating Big-O of Loops

6 - Exercise: Calculating Time Complexity
  - http://slides.com/bgando/sorting#/0/20

7 - Calculating Time Complexity Solution
