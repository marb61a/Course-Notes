                    Data Structures And Algorithms in Javascript 
                    Course Notes Part 5


                    Section 8 - Reviewing Core Concepts
1 - Review: Time Complexity

2 - Review: Elementary Sorting

3 - Review: Recursion

4 - Review: Merge Sort

5 - Review: Quick Sort Part 1

6 - Review: Quick Sort Part 2

7 - Review: Stacks & Queues

8 - Review: Linked Lists

9 - Review: Trees Part 1

10 - Review: Trees Part 2



                    Section 9 - Binary Trees
1 - Binary Search Tree Overview

2 - Exercise: Binary Search Trees
  - https://github.com/kuychaco/algoClass/blob/master/data-structures/binarySearchTree.js

3 - Pseudocoding a Binary Search Tree

4 - BST Search Procedure

5 - BST Review & Scoping Discussion

6 - Pseudocoding the BST contains() Method

7 - Binary Search Tree Exercise Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/binarySearchTree.js

8 - In-Order Traversal

9 - Pseudocoding In-Order Traversal Part 1

10 - Pseudocoding In-Order Traversal Part 2

11 - Pre-Order Traversal

12 - Post-Order Traversal

13 - Initial Time Complexity for a BST

14 - Deleting Min/Max Nodes

15 - BST Review

16 - Pseudocoding Min/Max Deletion

17 - Reviewing the Min/Max Pseudocode Part 1

18 - Reviewing the Min/Max Pseudocode Part 2

19 - Exercise: Deleting Single-Child Nodes
  - https://github.com/kuychaco/algoClass/blob/master/data-structures/binarySearchTree.js

20 - Deleting BST Nodes Solution Part 1

21 - Deleting BST Nodes Solution Part 2

22 - Exercise: Deleting Two Children

23 - Deleting Two Children Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/binarySearchTree.js

24 - Analysis of Time Complexity



                    Section 10 - Graphs & Paths
1 - Graph Vocabulary & Representations

2 - Pseudocoding the Matrix Constructor

3 - Pseudocoding the addNode() Method

4 - Pseudocoding the addEdges() Method

5 - Exercise: Adding Nodes and Edges

6 - Adding Nodes and Edges Solution

7 - Adjacency List

8 - Pseudocoding an Adjacency List

9 - Exercise: Implement a Graph
  - https://github.com/kuychaco/algoClass/blob/master/data-structures/graph.js

10 - Implement a Graph Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/graph.js


                    Secion 11 - Depth & Breadth-First Search
1 - Graph Traversing & Depth-First Search

2 - Pseudocoding DFS Part 1

3 - Pseudocoding DFS Part 2

4 - Breadth-FIrst Search

5 - Pseudocoding BFS

6 - Breadth-First Search with a Graph Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/graph.js

7 - BFS Graph Stack Trace Part 1

8 - BFS Graph Stack Trace Part 2

9 - Depth-First Search with a Tree Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/tree.js

10 - Breadth-First Search Solution
  - https://github.com/kuychaco/algoClass/blob/solutions/data-structures/graph.js

11 - Breadth-First Search Stack Trace



                    Section 12 - Hash Tables
1 - Hash Tables

2 - Pseudocoding a Hashing Function

3 - Key Components Of A Hash table

4 - Pseudcoding set(), get() & remove()

5 - Handling Collisions

6 - Exercise Implementing A Hash Table

7 - Implementing A Hash Table Solution


                    Section 13 - Next Steps
1 - Next Steps
                                    
