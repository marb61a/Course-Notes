                    Introduction To Reactive Programming
                    Course Notes Part 2


4 - Async Requests And Responses in RXJS
The example will build a small piece of UI
Example Syntax
  // Getting a stream of strings
  var requestStream = Rx.Observable.just('https://api.github.com/users);
  var responseStream = requestStream
    .flatMap(requestUrl => {
    // You don't normally map to observables
      Rx.Observable.fromPromise(jQuery.getJSON(requestUrl));
    })
  responseStream.subscribe(response => {
      console.log(response);
    })
  
  // Non recommended method
    requestStream.subscribe(requestUrl => {
      // Promises are a simplified version of an observables\event stream
      // Observables are more powerful as ther can be multiple events

      responseStream.subscribe(response => {
        console.log(response);
      })

      // Using JQuery to get a promise, not the way that you would use when using observables
      //  jQuery.getJSON(requestUrl)
      //    .done(response => {
      //      console.log(response);
      //  })
    })

5 - Rendering On The DOM With RXJS
Logging the data to the console is not enough for the example
  - The data needs to be rendered on the DOM
Example Syntax
  The page in the example is generated using standard HTML
  - The example calls for the users Github data being added to the href property inside a list of suggestions
  - The <img/> element will hold the users avatar
  var refreshButton = document.querySelector('.refresh');
  
  var requestStream = Rx.Observable.just('https://api.github.com/users);
  var responseStream = requestStream
    .flatMap(requestUrl => {
      Rx.Observable.fromPromise(jQuery.getJSON(requestUrl));
    })
  
  // To handle the 3 users from the example will call for creating a stream for each of them
  function createSuggestionStream(responseStream){
    function responseStream.map(listUser => 
      listUser[Math.floor(Math.random() * listUser.length)]
    )
  }
  
  var suggestion1Stream = createSuggestionStream(responseStream);
  var suggestion2Stream = createSuggestionStream(responseStream);
  var suggestion3Stream = createSuggestionStream(responseStream);
  
  function renderSuggestion(userData, selector){
    var element = document.querySelector(selector);
    var usernameEl = element.querySelector('.username');
    usernameEl.href = userData.html_url;
    usernameEl.textContext = userData.login;
    var imageEl = element.querySelector('img');
    imageEl.src = userData.avatar_url;
  }
  
  // Event steams do nothing by themselves, you need to subscribe
  suggestion1Stream.subscribe(user => {
    renderSuggestion(user, '.suggestion1')
  });
  
  suggestion2Stream.subscribe(user => {
    renderSuggestion(user, '.suggestion2')
  });
  
  suggestion3Stream.subscribe(user => {
    renderSuggestion(user, '.suggestion3')
  });

