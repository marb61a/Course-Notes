                    The Coding Interview Bootcamp: Algorithms + Data Structures
                    Course Notes Part 3


                    Section 6 – MaxChars
1 - Max Chars Problem
The solutions to this particular problem can be applied to many different string problems
The problem to be solved in this section is
  - Given a string, what is the character that is most commonly used in the string
    - For Example aaaabbbbbcccccccccc -> this would return c as the most commonly used character
    - The method for solving is to convert a string to an object and count the keys of the object to find the most common

2 - Max Chars Character Map
Example Syntax
  // An example solution to help guide the solution to the MaxChars problem
  const string = "Hello There";
  const chars = {};
  
  for(let char of string){
    // If you were just to add 1 to the values you would be left with null values
    // By using the or the value of 1 is then assigned
    chars[char] = chars[char] + 1 || 1;
  }
  
  // Another more verbose solution is 
  for(let char of string){
    if(!chars[char]){
      chars[char] = 1;
    } else {
      chars[char]++;
    }
  }
  
  chars;

3 - Max Chars Solution

4 - Max Chars Solution Continued



                   Section 7 – The Classic FizzBuzz!
1 - FizzBuzz Problem Statement
This is a hugely popular question for interviews
  - It has been used millions of times
The challenge is as follows
  - Write a program that console.log numbers from 1 - N
  - For multiples of 3 print fizz instead of the number
  - For multiples of 5 print buzz instead of the number
  - For numbers which are multiples of both print fizzbuzz

2 - Solving FizzBuzz with Style
Example Solution
  function fizzBuzz(n) {
    // If asked the fizzbuzz question then use the more well known and less fancy solution
    for(let i = 0; i <= n; i++){
      // This will use modulus where a number is divide and if there is no remainder its true
      // The double ampersands mean that if the first part is not true then the second part does not need to be
      // checked, this short circuits checks and can save wasting time checking things which don't need to be checked
      if(i % 3 === 0 && i % 5 === 0){
        console.log('fizzbuzz');
      } else if (i % 3 === 0) {
        console.log('fizz');
      } else if (i % 5 === 0){
        console.log('buzz');
      } else {
        console.log(i);
      }
    }
  }
  
  module.exports = fizzBuzz;



                    Section 8 – Array Chunking
1 - Array Chunk Problem Statement
The challenge for this section is to take an array and a chunk size, the array is then divided into
subarrays which are the same length as the chunk size
  - One example is -- chunk([1, 2, 3, 4], 2) which becomes [[1, 3], [3, 4]]

2 - Chunk Solution #1
A diagram of the solution to the chunk problem, the process is as follows
  - Create an empty array to hold chunks called chunked
  - For each element in the unchunked array 
  - Retrieve the last element in chunked
  - If the last element does not exist or if it length is equal to chunk size then push
    a new chunk into chunked with the current element
  - Else add the current element into the chunk

3 - More on Chunk
Example Syntax
  // The first solution to the chunk solution problem
  function chunk(array, size){
    // This will follow the process from aboe
    const chunked = [];
    
    for(let element of array){
      const last = chunked[chunked.length - 1];
      
      if(!last || last.length === size){
        chunked.push([element]);
      } else {
        last.push(element);
      }
    }
    
    return chunked;
  }
  
  module.exports = chunk;

4 - Chunk Solution #2

5 - Even More on Chunk!

                   
