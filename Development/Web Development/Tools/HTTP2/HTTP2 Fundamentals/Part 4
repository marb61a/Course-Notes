                    HTTP2 Fundamentals 
                    Course Notes Part 4


                    Section 4 - Server Push
1 - Introduction
Introduction to the section
Server Push allows communitation to be pushed by the server
Standard practice has a client asking a server for resources and anytime anthing else is wanted a further request is made
This has an effect as there are separate requests needed for each resource which impacts performance
There are different schemes available for trying to improve performance
  - Inlining which means including the actual Javascript content, CSS styles in the html pages
    - This is not practical as it prevents reuse of code and prevents caching
    - This is not the best of options

2 - Server Push
Server Push is an option available in HTTP2
The server will push resources to the client without the need for a client request
The way the Server Push works is
  - The client sends a request to a server
  - The server responds by sending a PUSH_PROMISE frame
    - This is sent on the same stream as the original request
    - This contains a Header Block Fragment which contains request header fields
There are certain requirements that must be met for the server to push down data
  - It should be safe in the context of not having any effect on the resource itself
  - It should be cacheable so that the client may cache it
  - There is no request body included
  - If the SETTINGS_ENABLE_PUSH is set to 0 the server should not try and push
If the client does not wish to receive data it can send a RST_STREAM frame
  - There are 2 different error codes available
    - Use cancel on the reset stream if not wanting to receive cached data
    - Refuse stream is used when it has not even begun to process and is refusing the stream
Server Push has several practical usages
  - Pushing referenced resources
  - Cache Invalidation
Push is a fantastic technology but does not replace
  - Websockets
  - It could however be combined with server sent events

3 - Demo Server Push In Action
A quick demonstration on Server Push in action
  - The example again uses nghttp2 server for demonstration

4 - Summary
Brief summary of the material covered in the chapter


                   
                    Section 5 - Security, Proxies And More
1 - TLS, SSL And HTTP2
Introduction to what the section will cover
HTTP2 does not require security it can work over either plain text or SSL/TLS
  - This is because of disagreements over cypher algorithms
  - Most browser vendors will not support HTTP2 over plaintext
  - Aside from adding security there may be additional overhead
SSL\TLS are frequently used interchangebly
  - They are technically different
  - SSL stands for Secure Sockets Layer, TLS for Transport Layer Security
  - TLS is the successor to SSL3 and is built on SSL
  - People are usually referring to HTTPS when discussing this
TLS provides 3 main things
  - Encryption, Authentication and Integrity
TLS adds to the overhead from TCP 3 way handshake
  - The TLS handshake uses Asssymetric Encryption
  - ALPN which stands for Application Layer Protocol Negotiation was added to save on overhead
    - There is nothing to stop this from being used with other protocols

2 - TLS Overhead
Independently of anything the world is already moving to HTTPS
  - All social media sites for example are using HTTPS
  - ALPN has made performance impact minimal
  - It is important to remember the the assymetric encryption is only used for the key exchange
The other costs of TLS
  - Certificate cost and administrative costs
    - Let's encrypt is a free site for certificates, its site is available at
    - It has also automated away many admin costs
      - https://letsencrypt.org

3 - Caches And Proxies
There are questions about using HTTP2 and how it interacts with
  - Proxies\Reverse Proxies
  - Caches

4 - Other Important HTTP2 Frames
PING Frames - These are use to check if a connection is still alive
GOAWAY Frame - Used to either gracefully shut down a connection or indicate that there has been a serious error

5 - Summary
Brief summary of the material covered in the chapter


                   
