                    HTTP2 Fundamentals 
                    Course Notes Part 4


                    Section 4 - Server Push
1 - Introduction
Introduction to the section
Server Push allows communitation to be pushed by the server
Standard practice has a client asking a server for resources and anytime anthing else is wanted a further request is made
This has an effect as there are separate requests needed for each resource which impacts performance
There are different schemes available for trying to improve performance
  - Inlining which means including the actual Javascript content, CSS styles in the html pages
    - This is not practical as it prevents reuse of code and prevents caching
    - This is not the best of options

2 - Server Push
Server Push is an option available in HTTP2
The server will push resources to the client without the need for a client request
The way the Server Push works is
  - The client sends a request to a server
  - The server responds by sending a PUSH_PROMISE frame
    - This is sent on the same stream as the original request
    - This contains a Header Block Fragment which contains request header fields
There are certain requirements that must be met for the server to push down data
  - It should be safe in the context of not having any effect on the resource itself
  - It should be cacheable so that the client may cache it
  - There is no request body included
  - If the SETTINGS_ENABLE_PUSH is set to 0 the server should not try and push
If the client does not wish to receive data it can send a RST_STREAM frame
  - There are 2 different error codes available
    - Use cancel on the reset stream if not wanting to receive cached data
    - Refuse stream is used when it has not even begun to process and is refusing the stream
Server Push has several practical usages
  - Pushing referenced resources
  - Cache Invalidation
Push is a fantastic technology but does not replace
  - Websockets
  - It could however be combined with server sent events

3 - Demo Server Push In Action
A quick demonstration on Server Push in action
  - The example again uses nghttp2 server for demonstration

4 - Summary
Brief summary of the material covered in the chapter


                   
                    Section 5 - Security, Proxies And More
1 - TLS, SSL And HTTP2
Introduction to what the section will cover
HTTP2 does not require security it can work over either plain text or SSL/TLS
  - This is because of disagreements over cypher algorithms
  - Most browser vendors will not support HTTP2 over plaintext
  - Aside from adding security there may be additional overhead
SSL\TLS are frequently used interchangebly
  - They are technically different
  - SSL stands for Secure Sockets Layer, TLS for Transport Layer Security
  - TLS is the successor to SSL3 and is built on SSL
  - People are usually referring to HTTPS when discussing this
TLS provides 3 main things
  - Encryption, Authentication and Integrity
TLS adds to the overhead from TCP 3 way handshake
  - The TLS handshake uses Asssymetric Encryption
  - ALPN which stands for Application Layer Protocol Negotiation was added to save on overhead
    - There is nothing to stop this from being used with other protocols

2 - TLS Overhead
Independently of anything the world is already moving to HTTPS
  - All social media sites for example are using HTTPS
  - ALPN has made performance impact minimal
  - It is important to remember the the assymetric encryption is only used for the key exchange
The other costs of TLS
  - Certificate cost and administrative costs
    - Let's encrypt is a free site for certificates, its site is available at
    - It has also automated away many admin costs
      - https://letsencrypt.org

3 - Caches And Proxies
There are questions about using HTTP2 and how it interacts with
  - Proxies\Reverse Proxies
  - Caches

4 - Other Important HTTP2 Frames
PING Frames - These are use to check if a connection is still alive
GOAWAY Frame - Used to either gracefully shut down a connection or indicate that there has been a serious error

5 - Summary
Brief summary of the material covered in the chapter


                    
                    Section 6 - Working with HTTP2 Libraries And Servers
1 - Browser Support
An introduction to what the module will cover
The ecosystem can be more or less be divided into 3 areas
  - Browsers
  - Servers
  - Libraries
The vast majority of browsers already provide support for HTTP2
  -  To check this out try -- www.caniuse.com

2 - Hosting HTTP2 Applications
When it comes to servers there are 2 aspects
  - Simply hosting a site running on HTTP2 using static pages
  - Hosting web apps (ASP, Java applications etc)
Web Hosting (supports HTTP2 unless stated)
Hosting .net
  - IIS on Windows 10
  - Windows Server 2016#
  - NGinx (will require mono if used on Linux or OSX)
  - Kestrel which is a newcomer and is often used during development stage (No HTTP2)
Hosting Java Applications
  - Apache HTTP 2.4
  - Jetty 9.x
  - Tomcat 9
Hosting Node Applications
  - node-http2
  - node-spdy
  - ExpressJS 5 +

3 - Working With Client-Side Libraries
There are Client and Server side libraries
Client Side Libraries include
  - Netty, Jetty & OKHttp which are all JVM platform
    - Http2 on the JVM requires JDK8 and above
    - You must use ALPN extensions in the class path
      - This extension will be already included from JDK9 on
  - node-http2 which comes from Node.js
  - ngHttp2 which is a C based library

4 - Demo High Level Client Requests
A demo on how to interact with Http2 using the same semantics as with Http1.x
The demonstration will make use of
  - Java & OkHttp

5 - Demo Low Level Client Requests
This will be digging into the guts of Http2
This example will make use of the netty project
  - There are a large number of files and folders but the example concentrates on the Http2 folder  

6 - Demo Low Level Server Handling

7 - Demo Programmatic Server Push

8 - Summary
Brief summary of the material covered in the chapter


                    
                    Section 7 - Adapting Existing Applications
1 - Years of Optimisations
Looking at adapting existing applications and API to make use of HTTP2
There have been many years of optimisations to improve webpage load time
  - TCP is not built for working with HTTP
HTTP2 removes many shortcomings and the need for work arounds
  - This means that some optimisations will need to be reversed
  - Some optimisations such as inlining maybe counter-productive

2 - Multiple TCP Connections
One method of optimising has been to open multiple connections to the same server
  - One example is to have parallel coneections for images, css and html
  - There maybe an issue where browsers restrict the number of open connections to 6
One method of bypassing this is to use domain sharding which is where resources are spread out over multiple servers
  - For example html off one server, images and css from another
  - You don't have to have separate physical servers and can have multiple servers on the one machine
    - The limit of 6 is based on hostname so you can use aliases
This approach does have some negative impacts
  - A socket requires resources
    - This is both on the client and server
    - It will be especially true if domain sharding on a single physical server
  - TCP overhead
    - Every TCP connection requires its own 3 way handshake
  - DNS Lookups
    - Every new host needs a new name lookup so domain sharding can have an impact
With HTTP2 using a single connection and providing full multiplexing it makes little sense for some of the optimisations
such as domain sharding

3 - Concatenation Of Files
Concatentation is when files such as js files and css files are concatenated into one file
  - This reduces both the requests that are needed but also the TCP overhead
There are some negatives about concatenation though
  - It adds complexity to the build process
  - It will have an impact on caching
  - It will impact the rendering page 
  - Concatenation should be eliminated using HTTP2

4 - Spiriting Of Images

5 - Minifying
Minifying is the compacting of source code
  - Machines do not need whitespace which can bulk up a file size
  - Removing whitespace and other characters can substantially reduce file size

6 - Resource Inlining

7 - Content Delivery Netwoks

8 - Supporting Both Protocols

9 - Impact on HTTP And REST API's

10 - Moving To HTTP2

11 - Summary
Brief summary of the material covered in the chapter
