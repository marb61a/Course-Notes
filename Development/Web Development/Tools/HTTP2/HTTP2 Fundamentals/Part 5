                    HTTP2 Fundamentals 
                    Course Notes Part 5


                    Section 6 - Working with HTTP2 Libraries And Servers
1 - Browser Support
An introduction to what the module will cover
The ecosystem can be more or less be divided into 3 areas
  - Browsers
  - Servers
  - Libraries
The vast majority of browsers already provide support for HTTP2
  -  To check this out try -- www.caniuse.com

2 - Hosting HTTP2 Applications
When it comes to servers there are 2 aspects
  - Simply hosting a site running on HTTP2 using static pages
  - Hosting web apps (ASP, Java applications etc)
Web Hosting (supports HTTP2 unless stated)
Hosting .net
  - IIS on Windows 10
  - Windows Server 2016#
  - NGinx (will require mono if used on Linux or OSX)
  - Kestrel which is a newcomer and is often used during development stage (No HTTP2)
Hosting Java Applications
  - Apache HTTP 2.4
  - Jetty 9.x
  - Tomcat 9
Hosting Node Applications
  - node-http2
  - node-spdy
  - ExpressJS 5 +

3 - Working With Client-Side Libraries
There are Client and Server side libraries
Client Side Libraries include
  - Netty, Jetty & OKHttp which are all JVM platform
    - Http2 on the JVM requires JDK8 and above
    - You must use ALPN extensions in the class path
      - This extension will be already included from JDK9 on
  - node-http2 which comes from Node.js
  - ngHttp2 which is a C based library

4 - Demo High Level Client Requests
A demo on how to interact with Http2 using the same semantics as with Http1.x
The demonstration will make use of
  - Java & OkHttp

5 - Demo Low Level Client Requests
This will be digging into the guts of Http2
This example will make use of the netty project
  - There are a large number of files and folders but the example concentrates on the Http2 folder  

6 - Demo Low Level Server Handling

7 - Demo Programmatic Server Push

8 - Summary
Brief summary of the material covered in the chapter


                    
                    Section 7 - Adapting Existing Applications
1 - Years of Optimisations
Looking at adapting existing applications and API to make use of HTTP2
There have been many years of optimisations to improve webpage load time
  - TCP is not built for working with HTTP
HTTP2 removes many shortcomings and the need for work arounds
  - This means that some optimisations will need to be reversed
  - Some optimisations such as inlining maybe counter-productive

2 - Multiple TCP Connections
One method of optimising has been to open multiple connections to the same server
  - One example is to have parallel coneections for images, css and html
  - There maybe an issue where browsers restrict the number of open connections to 6
One method of bypassing this is to use domain sharding which is where resources are spread out over multiple servers
  - For example html off one server, images and css from another
  - You don't have to have separate physical servers and can have multiple servers on the one machine
    - The limit of 6 is based on hostname so you can use aliases
This approach does have some negative impacts
  - A socket requires resources
    - This is both on the client and server
    - It will be especially true if domain sharding on a single physical server
  - TCP overhead
    - Every TCP connection requires its own 3 way handshake
  - DNS Lookups
    - Every new host needs a new name lookup so domain sharding can have an impact
With HTTP2 using a single connection and providing full multiplexing it makes little sense for some of the optimisations
such as domain sharding

3 - Concatenation Of Files
Concatentation is when files such as js files and css files are concatenated into one file
  - This reduces both the requests that are needed but also the TCP overhead
There are some negatives about concatenation though
  - It adds complexity to the build process
  - It will have an impact on caching
  - It will impact the rendering page 
  - Concatenation should be eliminated using HTTP2

4 - Spiriting Of Images

5 - Minifying
Minifying is the compacting of source code
  - Machines do not need whitespace which can bulk up a file size
  - Removing whitespace and other characters can substantially reduce file size

6 - Resource Inlining

7 - Content Delivery Netwoks

8 - Supporting Both Protocols

9 - Impact on HTTP And REST API's

10 - Moving To HTTP2

11 - Summary
Brief summary of the material covered in the chapter
