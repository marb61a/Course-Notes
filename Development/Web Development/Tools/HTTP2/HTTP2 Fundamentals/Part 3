                    HTTP2 Fundamentals 
                    Course Notes Part 3


                    Section 3 - Streams
1 - A Recap On HTTP 1.1 v HTTP2
A quick recap of the differences netween the two versions of the HTTP protocol

2 - Multiplexing And Streams
With HTTP2 there is only one connection per host
Multiplexing is a technique where multiple signals are combined into a single signal
  - The reverse operation is called demultiplexing
  - Both multiplexing and demultiplexing is very common at the transport layer
HTTP2 bring an approach similar to multiplexing
With HTTP2 on a single connection there can be multiple streams
Each stream is identified by an integer eg stream5
A stream is nothing more than a set of frames being exchanged between client and server
Streams initiated from client to server use odd numbers and the opposite uses even numbers
A stream with an id of 0 is used for connection control messages
Streams bring
  - Parallel requests and responses
    - This means faster response times
  - SETTINGS defines the maximum concurrency
    - This setting is specific to each endpoint
    - This is applicable only to the peer that receives the setting
Streams have state, this stream varies
  - What the actual frame is
  - What flags are set
  - Some states include 
    - IDLE, OPEN, RESERVED, HALF-CLOSED
    - When an endpoint is in the open state it can send or receive frames of any type
    - If a frame with the end stream flag set the state transitions to half-closed
    -  This can be remote or local
    - When closed it can only recieve frames of certain types eg Priority
Unless implementing the HTTP2 specification then you won't need to know the behind the scenes stuff

3 - Demo An HTTP2 Stream Exchange
Demo using the HTTP2 Gopher tiles example site
  - This example uses multiple small images to create a large image
  - Stream will once again be analysed in Wireshark
  - There is no sequence of stream id eg Stream 50 is not necessarily followed by Stream 51
  - Chrome limits open connections in HTTP1.x to 6
    - Using the HTTP1.x example will again show the waterfall effect

4 - Stream Priorities
Having multiple interleaved stream going back and forth necessitates that there be some sort of prioritisation
HTTP 2 has the ability to define the priority of a stream
Clients can use prioritisation for how they wish to receive responses
Servers can use to prioritise stream processing
  - Example is that some applications will give priority to certain content types
To give priority
  - A stream is given a weight which is an integer from 1 - 256
  - The lower the number the higher the priority
  - Streams are not isolated and one may depend on another
  - In addition to weight streams will also have a dependency property
  - Streams with no dependencies will have the dependency_id set to 0
  - Dependencies are not linear and can form trees
  
5 - Demo Priorities In Action
Demo using
  - nghttp2
  - Priorities will be based on content type
  - Example using a small application with different content types eg css etc
  - You will need to install nghttp2
    - It can be run using nghttpd command with different options
  - You will need a certificate
    - A self signed cert for testing purposes
  - You need to setup docs folder
    - If you wish to use port 442 you will need root privileges
  - Using chrome net-internals to show priorities
  
6 - Flow Control
If one stream fails it could have the consequence of blocking all other streams
  - This is the same problem which affected HTTP1.x
To solve this issue HTTP2 introduces flow control which is similar to flow control at the transport level
Recievers can increase or decrease window size from the default 64kb size
  - This adjusting the window size is whats known as flow control
  - It allows for control of saturation on the receiver side in case it cannot handle data coming in
Flow control in HTTP2 is available at 2 levels
  - Connection and Stream levels
  - This operates hop to hop rather than end to end as there can be intermediaries
Window Size can be changed
  - Using SETTINGS frame before communication takes place
  - Using WINDOW_UPDATE frame during communication
  - It only affects data frames
  - There is no standard implementation in the specification

7 - Summary
Brief summary of the material covered in the chapter


