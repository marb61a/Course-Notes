                    Asp.Net MVC 5 - Ultimate Guide - Indepth & Sample Project
                    Course Notes Part 1


Section 1: Introduction & Basics of Asp.Net Mvc
Course Introduction
  - The course will contain a project to be built by students which will put into practice the course teachings
  - The course will cover in depth many areas of ASP.net MVC including
    - Controllers, Views, Routing, HTTP, Model Binding, Entity Framework Code-First & Database-First, Web-API, State Management 
    - HTML helpers, Validations, Identity, Filters, Security, Exception Handling, Service Pattern, Repository Pattern
  
What is ASP.NET MVC? and MVC Architecture
  - ASP.net MVC is a Web Application Framework
    - It gives a powerful MVC based way to build dynamic web apps
    - There is a clear separation of concerns
    - Full control is also maintained of markup
    - The main advantages are the separation of concerns and faster performance
      - Other advanctages are the support for unit testing and dependency injection
      - There is faster performance than ASP.net Web Forms
      - There is no Page Lifecycle, Controls, Postback and ViewState
    - It is part of ASP.net and is an alternative to ASP.net Web Forms
  - MVC is an architectural pattern, it dictates that you write application code composed of 3 parts
  - Model
    - This is where the data structure and business logic is contained 
  - View
    - This is where application logic is and data is read in from the model
  - Controller
    - This is where execution flow commences
    - Execution starts from the controller, it fills data into the model object and passes model objects into the view

Controllers
  - This is the class which defines execution flow in an MVC application
  - The controller receives a request from a browser then calls the model, then calls the view
  - The controller is a class which can optionally be a public class
  - Syntax 
    public class classnameController : System.Web.MVC.Controller {}
  - Controller classes should inherit from System.Web.MVC.Controller
  - A controller name should alwayd be suffixed by controller

Action Methods
  - All methods in a controller are by default treated as action methods
  - Action methods execute whenever a browser sends a request
    - For example they then perform an action on the database and return the result to the browser
  - Syntax
  - public class classnameController : System.Web.MVC.Controller 
    {
      public returnType methodName(dataType params1)
      {
        ....
      }
    }


