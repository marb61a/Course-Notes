                    Learn and Understand NodeJS
                    Course notes Part 4


                    Section 6: Asynchronous Code, libuv, The Event Loop, Streams, Files, and moreâ€¦
1 - Javascript Aside: Javascript is Synchronous
Asynchronous means that more than 1 process is running simultaneously
Node does things asynchronously, V8 does not
Synchronous means one thing running at a time
JS is synchronous

2 - Conceptual Aside: Callbacks
Callbacks are functions passed to another function which we assume will be invoked at some time

3 - libuv, The Event Loop, and Non-Blocking Asynchronous Execution
Libuv is C++ System Events
Libuv handles OS events
Callbacks similar in concept to event listeners
Non-blocking in this case means that you can do things without stopping your program running
Non-blocking is made possible by Node doing things Asynchronously
Node has eased difficulties in running code asynchronously
Libuv - https://libuv.org

4 - Conceptual Aside: Streams and Buffers
Buffer - A buffer is a temporary holding spot for moving data from one location to another, it is intentionally
limited in its size
Stream  - A stream is a sequence of data made available over time, usually pieces of data that combine into a
whole.
Streams and buffers work in combination a lot of the time

5 - Conceptual Aside: Binary Data, Character Sets, and Encodings
Binary - Either 0 or 1
Known as base 2 because there are only the 2 digits
There are multiple tutorials on Binary available 
  - https://www.tutorialspoint.com/computer_logical_organization/binary_codes.htm
Character sets are representations of characters as numbers
  - Unicode -- https://unicode-table.com/en/
  - ASCII -- http://www.asciitable.com
Character encoding is how characters are stored in binary, code points or the numbers are converted and stored in Binary
  - One example is UTF-8 -- http://www.utf8-chartable.de
Javascript is not good at encoding so V8 has some mechanisms to help

6 - Buffers
Using buffers in Node
Node has built in buffer object, it is on the c++ side of things
Buffer Methods available at
  - https://nodejs.org/api/buffer.html
The Buffer class was introduced as part of the Node.js API to make it possible to interact with octet streams
The buffer holds raw 1's and 0's
Example Syntax
  - var buf = New Buffer('Hello', 'UTF-8');
    console.log(buf);
    console.log(buf.toString());
    console.log(toJSON());

You do not need to require Buffer
UTF-8 is the default encoding for Buffer
Running will output in Hex

7 - ES6 Typed Arrays
Not used in the rest of the course but good to learn
Typed arrays were introduced into ES6 to allow Javascript deal with binary data
Not part of V8 but Javascript itself
Example Syntax
  - var buffer = New ArrayBuffer
    var view = New Int32Array(buffer);
    
    view[0] = 5;
    view[1] = 15;
    console.log(view);

8 - Javascript Aside: Callbacks
The definition of a callback is done earlier
  - Callbacks are functions passed to another function which we assume will be invoked at some time
Syntax
  function greet(callback){
    console.log('Hello');
    var data = {
      name : 'John Doe'
    }
    callback(data);
  }
  greet(function(data){
    console.log('The callback was invoked');
    console.log(data);
  })
  greet(function(data){
    console.log('A different callback was invoked');
    console.log(data.name);
  })

