                                  Learn and Understand NodeJS
                                  Course notes Part 2


                    Section 4: Modules, Exports, and Require
1 - Conceptual Aside: Modules
Modules are nothing more than blocks of code to be reused, this is a new addition to the
Javascript language. Modules do not affect other code accidently.
CommonJS is basically a set of standards covering how modules should be built.

2 - Javascript Aside: First-Class Functions and Function Expressions
Important part of Javascript and fundamental to how Node works
First Class Functions - Everything that you can do with other types in Javascript you can do with functions. You can use them
like Strings, Numbers etc. A lot of programming languages do not have this feature but Javascript does.
Expression - An expression is a block of code that results in a value. Function Expressions in Javascript are possible because
Functions are first class, because they can have properties and methods just like any other object.
Function Statement - function name(){}
Function Expression - var name = function(){}
Creating Function expressions on the fly is very common

3 - Let's Build a Module
Building a small sample module
Modules help make code much more manageable
Using require import files
File path is passed in as a string
You can expicitly make code available using module.exports

4 - Javascript Aside: Objects and Object Literals
Example Syntax
  // Creates person object
  var person = {
    firstname: 'John',
    lastname: 'Doe',
    greet: function() {
      console.log('Hello, ' + this.firstname + ' ' + this.lastname);
    }
  };

  person.greet();

  console.log(person['firstname']);

5 - Javascript Aside: Prototypal Inheritance and Function Constructors
Inheritance is when one object gets access to the properties and methods of another object
Javascript implements inheritance differently than other languages, it uses prototypal inheritance
Prototype chain is a sequence of objects connected whose properties can be accessed down the line on any objects
without having to specify which one it is
Full discussion on prototypal inheritance is available here
  - http://javascript.info/prototype-inheritance
JavaScript has a few different ways of creating objects
  - Classes which are used by ES6 and are like blueprints
  - Function Constructors which are normal functions that are used to construct objects. The "this" variable points a new empty 
  object and is returned from the function automatically
__proto__ - shows the prototype object of an object (not recommended for production use)

6 - Javascript Aside: By Reference and By Value
How Javascript behaves when you pass a value to a function, whether you pass an object or a primitive
A primitive is a type of data that represents a single value eg number or string
Javascript uses pass by reference
This affects how require and modules work 

7 - Javascript Aside: Immediately Invoked Function Expressions (IIFEs)
Immediately Invoked Function Expressions are very important to understand how modules work
Scope is where in code you have access to a particular variable or function
IIFEs affect scope
The syntax is to turn a function into an expression 
  (function(){
  }());
This syntax turns the function into a function expression and immediately invokes it hence the name
Has allowed Javascript to approximate modules

8 - How Do Node Modules Really Work?: module.exports and require


9 - Javascript Aside: JSON
JSON is an acronym which stands for JavaScript Object Notation
JSON is a syntax for storing and exchanging data.
JSON is text, written with JavaScript object notation.
When exchanging data between a browser and a server, the data can only be text. JSON is text, and we can convert any 
JavaScript object into JSON, and send JSON to the server. We can also convert any JSON received from the server into JavaScript 
objects. This way we can work with the data as JavaScript objects, with no complicated parsing and translations.

10 - More on require
Require is a Javascript function
Example using stepping into a function
  - Using module.js file
  - http://stackoverflow.com/questions/10638059/javascript-debugging-line-by-line-using-google-chrome
Every module that you create gets an object created to represent it
This has access to a require function
If you have to require a file whose file extension is not js then you have to explicitly declare it as require will
incorrectly assume that the extension is js
Code written by me is wrapped inside a function expression in node and then run
When you create the file it is wrapped in a function which takes 5 parameters
  - exports
  - require
  - module
  - __filename
  - __dirname
This is then ran using an apply function in module.js
.apply is just a way of invoking something in Javascript

11 - Module Patterns
There is no one way to use module patterns it will depend on the architecture
First pattern is
  module.exports = function(){
    console.log('Hello World');
  }
This overwrites the exports empty object with a single function
  module.exports.greet = function(){
    console.log('Hello World');
  }
Normally the above is used as it allows much more explicit requires as it reaches down into the exports file for
a particular method
  var name = require('filepath').greet;
The third pattern replaces exports with own function
  function Greetr(){
      this.greeting = 'Hello World';
      this.greet = function(){
        console.log(this.greeting);
      }
    }
  module.exports = New Greetr;
The next pattern is very popular within javascript
  var greeting = 'Hello World';
  function greet(){
    console.log(greeting);
  }
  module.exports = {
    greet : greet
  }
This is called the revealing module pattern which exposes only the properties and methods you want via a returned object.
Its a very common way to structure code and protect code within modules.

12 - exports vs module.exports
When code is ran through Node it is wrapped in a function expression
Exports in this case is a shorthand for module.exports
It is two variables pointing at the same object
Althought they are both pointing at the same object exports does not work for all patterns seen so far
Syntax of example
  exports = function(){
    console.log('Hello World');
  }
  console.log(exports);
  console.log(module.exports);
The exports returns a function while the module.exports returns the empty object
In another language both would return the same but this is a quirk of Javascript
This is due to the pass by reference, in Javascript when a variable is set equal to a value then its a new spot in memory
In Javascript adding a method or property to an object is called mutating, it means that you have mutated the object
You can use exports if you mutate the object not if you replace the object
Just use module.exports!!

13 - Requiring Native (Core) Modules
The node file looked at is module.js
There is an if statement  which as ks for NativeModule and if it exists
Native Modules are the items seen in the /lib folder
The API documentation is where to find out more 
  - https://nodejs.org/dist/latest-v7.x/docs/api/
Node developers should always read the API documentation!!
You will use require to make modules available
  - Syntax
    var util = require('util');
util.log instead of console.log works similar but adds a time stamp

14 - Modules and ES6
Node JS added the feature of modules to JS as you need modular structure for large scale software
ES6 has now added the concept of modules to JS
ES6 has new syntax eg export or import

15 -Web Server Checklist
A list of things needed by Javascript to manage a server
