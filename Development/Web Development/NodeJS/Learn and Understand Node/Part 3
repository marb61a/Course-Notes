                    Learn and Understand NodeJS
                    Course notes Part 3


                    Section 5: Events and the Event Emitter
1 - Conceptual Aside: Events
Events in Node JS are when somethaing has happened in an app that can be responded to.
Many areas of software use the concept of events
In node there are actually 2 types of events
 - System Events -- C++ core libuv
 - Custom Events -- JS Core Event Emitter
Javascript events are faked using the node event emitter
Most core modules are built on top of this

2 - Javascript Aside: Object Properties, First Class Functions, and Arrays
Properties are the most important part of any JavaScript object
Object properties are the values associated with the object
Arrays are collections of values, it is a variable that can hold more than one value at a time
To add a value to an array is to push the values
In JS a function is a block of code designed to perform a particular task
It runs when something calls\invokes it
In JavaScript, functions are first-class objects, because they can have properties and methods just like any other object
Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.

3 - The Node Event Emitter - Part 1
Building a sample emitter
Multiple different ways to create
Example Syntax -
  function(){
    this.events = {};
  }
  
  Emitter.prototype.on = function(type, listener){
    this.events[type] = this.events[] || [];
    this.events[type].push(listener);
  }
  
  Emitter.prototype.emit = function(type){
    if(this.events[type]){
      this.events[type].forEach(function(listener){
        listener();
      })
    }
  }
  
  nodule.exports = Emitter;
An event listener is the code that responds to an event
You can have many listeners listening for the same event
Node JS emitter works similarly but is obviously much larger

4 - The Node Event Emitter - Part 2
Looking at the Node Event Emitter
All developers should be familiar with the Node API documentation
  - https://nodejs.org/api/
  - https://nodejs.org/api/events.html
A look through the Node source code specifically the events.js file
  - there is a function called EventEmitter
  - There are many different features
  - There is an emit function on the EventEmitter.prototype
  - Uses .call which is another way to invoke a function
  - Uses an array of functions which are looped through
Magic strings 
  - A string that has sme special meaning in the code
  - Not good because typos can cause bugs and can be very difficult to find with tools
Using Magic Strings in larger applications is not good practice and there are a few ways to avoid it
The example uses another module with configuration values which can replace the Magic Strings
Using properties as variables in place of Magic Strings helps tools and avoids typing bugs

5 - Javascript Aside: Object.create and Prototypes
Helping understand why the event emitter is a fndamental part of Node
Every object has a prototype
Class uses the extends keyword to implement inheritance
Example Syntax
  var person = {
    firstname : '',
    lastname : '',
    greet : function(){
      return this.firstname + ' ' + this.lastname;
    }
  }
  // This object will point to person as its prototype
  var john = Object.create(person);
  john.firstname = 'John';
  john.lastname = 'Doe';

Object.create is a very clean way to set up inheritance

6 - Inheriting From the Event Emitter
A lot of core modules inside Node inherit from the Event Emitter
Multiple different ways of setting up inheritance\prototype chain
Using util.js
  - Contains inherits function which takes 2 constructors -- ctor & superCtor
  - First is a constructor upon which you want to add new methods and properties
  - Second is where the methods and properties you want
Creates a brand new prototype chain by placing a prototype between 2 objects
Syntax
  var EventEmitter = require('events');
  var util = require('util');
  function Greetr(){
    this.greeting = 'Hello World';
  }
  util.inherits(Greetr, EventEmitter);
  Greetr.prototype.greet = function(){
    console.log(this.greeting);
    this.emit('greet');
  }
  var greetr1 = new Greetr();
  greetr1.on('greet', function(){
    console.log('Someone greeted!!');
  });
  greetr1.greet();

7 - Javascript Aside: Node, ES6, and Template Literals
New version of JS is called ECMAScript 2015/ES6
ES6 contains new feature to make writing JS code easier
Not every browser will support it
You may not be able to use the latest version of Node JS
Dont't mix JS versions
BabelJS allows you to write ES6 as it converts code to older JS
Example uses Visual Studio Code IDE and has its own settings
  - You may need jsconfig.json file to use with VS Code
Template Literal - This is a way to concatenate strings in ES6, it can be easier to work with than using + to 
concatenate a bunch of strings
Template literals use back ticks
  Syntax -
    var name = "John Doe";
    // Old style JS
    var greet = "Hello " + name;
    // ES6 Template literal style
    var greet2 = `Hello ${name}`;
Template literals are a lot quicker

8 - Javascript Aside: .call and .apply
.call and .apply can be used for invoking functions
Syntax
  var obj = {
    name: 'John Doe'.
    greet : function(){
    \\ES6 backticks template literal
      console.log(`Hello ${ this. name }`);
    }
  }
  obj.greet();y
  // Variable passed to call is what the this keyword will point to
  obj.greet.call({name : 'Jane Doe' });
  // The difference between call and apply is if you were passing in parameters to greet function in call they would
  // be sequential, one after the other, in apply they would be an array
  obj.greet.appl({name : 'Jane Doe' });
Using .call and .apply can be very powerful methods for borrowing methods

9 - Inheriting From the Event Emitter - Part 2
Adding one more line to complete patterns for inheriting
Reusing the previously made greetr function
Inside the constructor there can be added methods and properties directly on to the object being created
What if the event emitter adds properties and methods on to the object
Syntax
  function Greetr(){
    //New line added
    // It is equivalent to what in languages like Java etc would call the Super Constructor
    EventEmitter.call(this);
    this.greeting = 'Hello World';
  }
Second example Syntax
  var util = require('util');

  function Person(){
    this.firstname = 'John';
    this.lastname = 'Doe';
  }

  Person.prototype.greet = function(){
    console.log('Hello ' + this.firstname + ' ' + this.lastname );
  }

  function Policeman(){
    Person.call(this);
    this.badgenumber = '1234'
  }
  
  util.inherits(Policerman, Person);
  var officer = new Policeman();
  officer.greet();

10 - Javascript Aside: ES6 Classes
A new way to build objects which may make it easier
Because it does not change anything behind the scenes it is called Syntactic Sugar
Syntactic Sugar is a feature that changes only how you type something but does not change under the hood
  - Remeber that it is important to understand what is going on under the hood to avoid flawed assumptions
Reusing the sample code from above
You will need to add a line to the top of the file
  - 'use strict' -- this helps avoid mistakes and is recommended to be used, some packages may require using strict to operate
Syntax
  class Person{
    constructor (firstname, lastname){
      this.firstname = firstname;
      this.lastname = lastname;
    }
  }
This replaces the previously written code using function Person
It is still just setting up the prototype chain
Classes in JS are much different than classes in languages like Java or C#

11 - Inheriting From the Event Emitter - Part 3
Updating the previous event emitter example to use ES6 classes
Using strict will cause more errors as it will not allow certain things
To call parent of constructor just use super()
