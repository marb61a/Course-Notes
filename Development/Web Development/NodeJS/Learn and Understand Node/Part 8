                    Learn and Understand NodeJS
                    Course notes Part 8


3 - Static Files and Middleware
A lot of the work that you do when using Node and Express is the work that you do between the request and response
There are lots of different scenarios and it would be goog to have plugins available
Middleware is code that sits between 2 layers of software in the case of Node & Express between the request and response
There can be multiple levels of middleware
You can make you own custom middleware
Static files are files that are not processed by code in any way eg css files, image files etc
  - Static files are usually in the public folder in Node conventions
  
Example Syntax
  var express = require('express');
  var app = express();
  
  var port = process.env.port || 3000;
  
  app.use('/assets', function(req, res, next){
    console.log('Request Url:' + req.url);
	  next();
  });
  
  app.use('/', function(req, res){
    res.send('
      <html>
        <head>
          <link href=assets/style.css type=text/css rel=stylesheet />
        </head>
        <body>
          <h1>Hello world!</h1>
        </body>
      </html>');
  });
  
  app.get('/', function(req, res){
    res.send('<html><head></head><body><h1>Hello world!</h1></body></html>');
  });
  
  app.get('/person/:id', function(req, res){
    res.send('<html><head></head><body><h1>Person: ' + req.params.id + '</h1></body></html>');
  });
  
  app.get('/api', function(req, res){
    res.json({ firstname: 'John', lastname: 'Doe' });
  });
  
  app.listen(port);  
  
  Stylesheet syntax /public/style.css
    body{
      Arial, Helvetica, sans-serif;
    }

4 - Templates and Template Engines
Express has the ability to plugin different template engines
Express is also what is called unopinionated which means that you have the choice of what way you
want to do things eg Templates.
You have to use NPM to install the view engine
  - You have to set the view engine to make use of it eg app.set('view engine', 'jade');
EJS is the templating used in the example and it allows you to generate html from Javascript
  - http://ejs.co
Express looks for templates in the views folder by default
Example Syntax
  App.js Syntax
  var express = require('express');
  var app = express();
  
  app.use('/assets', express.static(__dirname + '/public'));

  app.set('view engine', 'ejs');

  app.use('/', function (req, res, next) {
    console.log('Request Url:' + req.url);
    next();
  });

  app.get('/', function(req, res) {
    // You do not need to add the file extension as it is set in the app.set view engine section
    res.render('index');
  });

  app.get('/person/:id', function(req, res) {
    res.render('person', { ID: req.params.id });
  });

  app.get('/api', function(req, res) {
    res.json({ firstname: 'John', lastname: 'Doe' });
  });

  app.listen(port);

  Index.ejs Syntax
  <html>
    <head>
      <link href="assets/style.css" type="text/css" rel="stylesheet" />
    </head>
    <body>
      <h1>Hello world!</h1>
    </body>
  </html>
  
  Person.ejs Syntax
  <html>
    <head>
      <link href="/assets/style.css" type="text/css" rel="stylesheet" />
    </head>
    <body>
      <h1>Person: <%= ID %></h1>
    </body>
  </html>
