                    Learn and Understand NodeJS
                    Course notes Part 9


5 - Querystring and Post Parameters
Getting data from HTTP Requests in Express
Example Syntax
  // App.js File
	var express = require('express');
  var bodyParser = require('body-parser');
  var app = express();
  
  var port = process.env.PORT || 3000;
  
  var urlencodedParser = bodyParser.urlencoded({extended: false});
  var jsonParser = bodyParser.json();
  
  app.use('/assets', express.static(__dirname + '/public'));

  app.set('view engine', 'ejs');
  
  app.use('/', function(req, res, next){
    console.log("Request URL is  " req.url);
    next();
  });
  
  app.get('/', function(req, res){
    res.render('person', {ID: req.params.id, Qstr: req.query.string});
  });
    
  app.get('/person/:id', function(req, res) {
    res.render('person', { ID: req.params.id });
  });
  
  app.post('/person', urlencodedParser, function(req, res){
    res.send("Thank You!!");
    console.log(req.body.firstname);
    console.log(req.body.lastname);
  });
  
  app.post('personjson', jsonParser, function(req, res){
    res.send("Thank You for the JSON data!!");
    console.log(req.body.firstname);
    console.log(req.body.lastname);
  });
  
  app.listen(port);
  
  // Index.js file
  <html>
    <head>
      <link href="assets/style.css" type="text/css" rel="stylesheet" />
		  <script src="https://code.jquery.com/jquery-1.11.3.min.js" ></script>
    </head>
    <body>
      <h1>Hello World!</h1>
      <form method="POST" action="/person">
        First name: <input type="text" id="firstname" name="firstname" /><br />
			  Last name: <input type="text" id="lastname" name="lastname" /><br />
			  <input type="submit" value="Submit" />
      </form>
      <script>
        $.ajax({
          type: "POST",
          url: "/personjson",
				  data: JSON.stringify({ firstname: 'Jane', lastname: 'Doe' }),
				  dataType: 'json',
				  contentType: 'application/json'
        })
      <script>
    </body>
  </html>

6 - RESTful APIs and JSON
REST is an acronym standing for REpresentational State Transfer
  - It is an architectural style for building API's
  - Basically is means that we decide that HTTP verbs & URL's mean something
    - HTTP verbs include POST, GET, DELETE, PUT and some more

7 - Structuring an App
In real world applications you need to have appropriate structure
Larger apps will need to be diffently structured that smaller apps
Express has many different structures is can use as it is not opinionated
Example uses the express generator installed globally
  - npm install express-generator -g
  - Using the express keyword will generate the structure of an a sample app
  - You will need to use npm to actually install the packages 
  - The express generator uses express.Router for routes
    - The approach is good for using a large number of routes as each set can be put in their own file
  - This is only one approach
Example Syntax
  - Controllers lie between the model and the view
  // Previous code is broken up into 2 controllers
  htmlcontroller.js
  var bodyParser = require('body-parser');
  var urlencodedParser = bodyParser.urlencoded({ extended: false });

  module.exports = function(app) {
    app.get('/', function(req, res) {
      res.render('index');
    });

    app.get('/person/:id', function(req, res) {
      res.render('person', { ID: req.params.id, Qstr: req.query.qstr });
    });

    app.post('/person', urlencodedParser, function(req, res) {
      res.send('Thank you!');
      console.log(req.body.firstname);
      console.log(req.body.lastname);
    });
  }
  
  apiController.js
    module.exports = function(app) {
    app.get('/api/person/:id', function(req, res) {
    // get that data from database
      res.json({ firstname: 'John', lastname: 'Doe' });
    });

    app.post('/api/person', function(req, res) {
      // save to the database
    });

    app.delete('/api/person/:id', function(req, res) {
      // delete from the database
    });
  }
  
  app.js
  var express = require('express');
  var app = express();
  
  // These controllers separate routes
  var apiController = require('./controllers/apiController');
  var htmlController = require('./controllers/htmlController');
  var port = process.env.PORT || 3000;

  app.use('/assets', express.static(__dirname + '/public'));
  app.set('view engine', 'ejs');
  app.use('/', function (req, res, next) {
    console.log('Request Url:' + req.url);
    next();
  });

  htmlController(app);
  apiController(app);

  app.listen(port);



                    Section 10: Javascript, JSON, and Databases
1 - Conceptual Aside: Relational Databases and SQL
Relational Databases
  - Typically a table with rows and columns
  - Not all data is put in one table
  - Avoid repeating yourself by breaking the information up as much as possible
SQL - Structured Query Language
  - Asks questions or queries of the database

2 - Node and MySQL
MySQL has a package on the npm registry
  - npm install mysql
Try use the most used package for the database you are using
Using MYSQL Workbench
  - https://www.mysql.com/products/workbench/
Tutorial on Node & MySQL
  - https://codeforgeek.com/2015/01/nodejs-mysql-tutorial/

3 - Conceptual Aside: NoSQL and Documents
NoSQL - Covers a variety of technologies
One type is a document DB - MongoDB is one of those
There are no tables
MongoDB uses JSON like documents
Changing technologies has superseeded the reason for using SQL in some cases

4 - MongoDB and Mongoose
Available here - https://www.mongodb.com
  - Install instructions available for installation on various platforms
Mongoose NPM package - http://mongoosejs.com
  - npm install mongoose
Cloud based service - https://mlab.com -- Free tier available
  - Demo of using Mongolab
    - Gives you a url to connect to

MongoDB uses a format called BSON (Binary JSON) which is a binary-encoded serialization of JSON-like documents
Full set of notes available on MongoDB available at 
  - Quick basic introduction to the material that will be covered by the section

5 - Web Server Checklist
Ability to work with databases
