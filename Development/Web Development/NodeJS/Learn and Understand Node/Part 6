                    Learn and Understand NodeJS
                    Course notes Part 6


                    Section 7: HTTP and being a Web Server
1 - Conceptual Aside: TCP/IP
A quick overview of TCP\IP, there is a much more indepth tutorial available at the following address
http://www.w3schools.com/website/web_tcpip.asp

2 - Conceptual Aside: Addresses and Ports
A quick overview of IP Addresses and Ports which handle the various protocols. There are 2 different types of IP addresses
there are tutorials much more indepth at the following locations
http://www.tutorialspoint.com/ipv4/index.htm
http://www.tutorialspoint.com/ipv6/index.htm

3 - Conceptual Aside: HTTP
HTTP is an acronym that stands for  Hypertext Transfer Protocol
It is essentially a set of rules for transferring data across the web
It is a format defining data transferred via HTTP
There are many different status codes for HTTP which operates via a request - response mechanism
The list of codes is available here
  - https://github.com/marb61a/Course-Notes/blob/master/Marketing/http%20status%20codes
MIME - This is a type which is a standard for defining the type od data being sent is 
MIME is an acronym that stands for - Multipurpose Internet Mail Extensions
The list of different MIME types is available here
  - https://www.sitepoint.com/web-foundations/mime-types-complete-list/

4 - http_parser
The Node JS parser code is located at 
  - https://github.com/nodejs/http-parser
A quick run through of the http_parser package
The http_parser breaks up the requests and responses into the proper format

5 - Let's Build a Web Server in Node
Using the _http_server.js file
  - Server object is an event emitter
  - It will invoke this when a request occurs
  - It passes to to the function that has been passed in 2 objects -- req, res where res is the stream to send responses back

Example Syntax
  var http = require('http');
  
  http.createServer(function (req, res) {
    // In HTTP responses begin with what is in the head
    res.writeHead(200, {'Content-Type': 'text/plain'});
    // There is also a send method available
    res.end('Hello World\n');

  }).listen(1337, '127.0.0.1');

6 - Outputting HTML and Templates
Example Syntax
  var http = require('http');
  var fs = require('fs');
  
  http.createServer(function(req, res){
    res.writeHead(200, {'Content-Type' : 'text\html'});
    var html = fs.readFileSync(__dirname + '/index.htm', 'utf-8');
    var massage = 'Hello World...';
    html = html.replace('{Message}', message);
    res.end(html);
  }).listen(1337, '127.0.0.1');
  
  index.html
  <html>
    <head></head>
    <body>
      <h1> Hello World</h1>
      // Template version 
      <h1> {Message}</h1>
    </body>
  </html>
A template is text designed to be the basis for final text or content after being processed
There is usually a specific template language so that the templating system knows hot to replace placeholders with values


7 - Streams and Performance
Using streams to improve performance
Using createReadStream method from fs
Create a readable file stream and then pipe it to stream
  - fs.createReadStream(_dirname + "/index.html").pipe(res)
This will take chunks of a file instead of waiting for a full file
This will improve performance levels and streams are fundamental to how the internet works anyway

8 - Conceptual Aside: APIs and Endpoints
API -- This is an acronym that stands for Application Programming Interface
It is a set of tools used to build a software application
On the internet these are made available via a set of URL's which accept and send only data via HTTP and TCP\IP
Endpoint - An Endpoint is one url in a web api
Sometimes that endpoint does multiple things by making choices based on the HTTP request headers

9 - Outputting JSON
Mime type = application/json
JSON similar to object literal syntax
You can use JSON.stringify(string) -- this will create a string in the JSON format
Serialize - Translating an object into a form that can be stored or transferred
CSV, XML and JSON are popular formats
DeSerialize is the opposite

10 - Routing
Routing is the mapping of HTTP requests to content
  - This is whether actual files exist on the server or not
Example Syntax
  var http = require('http');
  var fs = require('fs');
  
  if(req.url === '/'){
    fs.createReadStream(__dirname + '/index.html').pipe(res);
  }
  
  else if(req.url === '/api'){
    http.createServer(function(req, res){
      res.writeHead(200, {'Content-Type' : 'application/json'});
      var obj = {
        firstname: "John",
        lastname: "Doe"
      }
      res.end(JSON.stringify(obj));
    }).listen(1337, '127.0.0.1');
  }
  
  else {
    res.writeHead(404);
    res.end();
  }

11 - Web Server Checklist
A list of things needed by Javascript to manage a server
