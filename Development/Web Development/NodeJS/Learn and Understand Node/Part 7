                    Learn and Understand NodeJS
                    Course notes Part 7


                    Section 8: NPM: the Node Package Manager
1 - Conceptual Aside: Packages and Package Managers
The NPM ecosystem is the largest open source ecosystem in history
A package is just code that is managed by a package management system

2 - Conceptual Aside: Semantic Versioning (semver)
Versioning - Specifying the version of a set of code
Semantic - Implies that there is something conveys meaning
Looking at a version number should convey a meaning
In Node version numbers should go Major.Minor.Patch eg 1.7.10 
 - Small patches eg bugfixes would become 1.7.11
 - Minor feature additions 1.8.11
 - Big changes 2.0.0 (will probably cause breakages)
Semantic Versioning - http://semver.org

3 - npm and the npm registry: Other People's Code
NPM - Node Package Manager
Install -- npm install
Check version installed -- npm -v
https://www.npmjs.com - Package repositories
Be very careful about packages you install

4 - init, nodemon, and package.json
Installation of Moment JS which is a JS library for dates times etc
  - https://momentjs.com
npm init - This is used to generate the npm package manager
The package.json file is created by npm init which contains the settings of your app
You can use npm to install packages
  - npm install moment --save 
  - using save saves it to drive and also writes an entry into package.json
  - Creates a node_modules folder to hold your installed packages
  - Not just used for Node apps
In package.json
  - ^ in a package means that it is alright to update to anything within the major packages eg 2.10.7 could be 2.11.8 but not 3
  - ~ means to only update patches
  - Having package.json means that you can share with people
  - You dont share node_modules folder
  
5 - npm Global Installation (Article)
You may run across permission issues on Mac or Linux. If that happens to you, here's a helpful link directly from npm's website:
  - https://docs.npmjs.com/getting-started/fixing-npm-permissions

6 - init, nodemon, and package.json - Part 2
npm install - this will install dependencies listed in package.json
Dev dependencies are dependencies needed for development
Example package for dev-dependencies is jasmine-node
  - https://www.npmjs.com/package/jasmine
  - npm install jasmine-node --save-dev // will save to dev-dependencies section of the package.json
  - Jasmine has its own node_modules folder for dependencies as does some of these dependencies
Dev-dependencies are not needed for the app to run
To install globally(available anywhere)
  - npm install -g
  - You may need permissions on *nix based systems
  - Various places for global modules to be stored
Nodemon is a utility that will monitor for any changes in your code and restarts the server
  - https://nodemon.io
  - Nodemon has its own node_modules folder
  - Nodemon has its own CLI utility
  - nodemon "entrypoint" eg nodemon server.js
Because of the amount of dependencies there can be a lot of bloat
To update installed packeages
  - npm update

7 - Using Other People's Code
Using npm is using other peoples code
Research properly
  - See how popular the package is
  - Check Github for issues
  - Test well
  - Proper semantic versioning may not be used


                    Section 9: Express
1 - Installing Express and Making it Easier to Build a Web Server

2 - Routes
Using Express JS, the Express site is located at
  - https://expressjs.com
  
Example Syntax
  var express = require('express');
  var app = express();
  
  var port = process.env.port || 3000;
  
  app.get('/', function(req, res){
    res.send('<html><head></head><body><h1>Hello world!</h1></body></html>');
  });
  
  app.get('/person/:id', function(req, res){
    res.send('<html><head></head><body><h1>Person: ' + req.params.id + '</h1></body></html>');
  });
  
  app.get('/api', function(req, res){
    res.json({ firstname: 'John', lastname: 'Doe' });
  });
  
  app.listen(port);

3 - Static Files and Middleware
A lot of the work that you do when using Node and Express is the work that you do between the request and response
There are lots of different scenarios and it would be goog to have plugins available
Middleware is code that sits between 2 layers of software in the case of Node & Express between the request and response
There can be multiple levels of middleware
You can make you own custom middleware
Static files are files that are not processed by code in any way eg css files, image files etc
  - Static files are usually in the public folder in Node conventions
  
Example Syntax
  var express = require('express');
  var app = express();
  
  var port = process.env.port || 3000;
  
  app.use('/assets', function(req, res, next){
    console.log('Request Url:' + req.url);
	  next();
  });
  
  app.use('/', function(req, res){
    res.send('
      <html>
        <head>
          <link href=assets/style.css type=text/css rel=stylesheet />
        </head>
        <body>
          <h1>Hello world!</h1>
        </body>
      </html>');
  });
  
  app.get('/', function(req, res){
    res.send('<html><head></head><body><h1>Hello world!</h1></body></html>');
  });
  
  app.get('/person/:id', function(req, res){
    res.send('<html><head></head><body><h1>Person: ' + req.params.id + '</h1></body></html>');
  });
  
  app.get('/api', function(req, res){
    res.json({ firstname: 'John', lastname: 'Doe' });
  });
  
  app.listen(port);  
  
  Stylesheet syntax /public/style.css
    body{
      Arial, Helvetica, sans-serif;
    }

4 - Templates and Template Engines
Express has the ability to plugin different template engines
Express is also what is called unopinionated which means that you have the choice of what way you
want to do things eg Templates.
You have to use NPM to install the view engine
  - You have to set the view engine to make use of it eg app.set('view engine', 'jade');
EJS is the templating used in the example and it allows you to generate html from Javascript
  - http://ejs.co
Express looks for templates in the views folder by default
Example Syntax
  App.js Syntax
  var express = require('express');
  var app = express();
  
  app.use('/assets', express.static(__dirname + '/public'));

  app.set('view engine', 'ejs');

  app.use('/', function (req, res, next) {
    console.log('Request Url:' + req.url);
    next();
  });

  app.get('/', function(req, res) {
    // You do not need to add the file extension as it is set in the app.set view engine section
    res.render('index');
  });

  app.get('/person/:id', function(req, res) {
    res.render('person', { ID: req.params.id });
  });

  app.get('/api', function(req, res) {
    res.json({ firstname: 'John', lastname: 'Doe' });
  });

  app.listen(port);

  Index.ejs Syntax
  <html>
    <head>
      <link href="assets/style.css" type="text/css" rel="stylesheet" />
    </head>
    <body>
      <h1>Hello world!</h1>
    </body>
  </html>
  
  Person.ejs Syntax
  <html>
    <head>
      <link href="/assets/style.css" type="text/css" rel="stylesheet" />
    </head>
    <body>
      <h1>Person: <%= ID %></h1>
    </body>
  </html>

5 - Querystring and Post Parameters
Getting data from HTTP Requests in Express
Example Syntax
  // App.js File
	var express = require('express');
  var bodyParser = require('body-parser');
  var app = express();
  
  var port = process.env.PORT || 3000;
  
  var urlencodedParser = bodyParser.urlencoded({extended: false});
  var jsonParser = bodyParser.json();
  
  app.use('/assets', express.static(__dirname + '/public'));

  app.set('view engine', 'ejs');
  
  app.use('/', function(req, res, next){
    console.log("Request URL is  " req.url);
    next();
  });
  
  app.get('/', function(req, res){
    res.render('person', {ID: req.params.id, Qstr: req.query.string});
  });
    
  app.get('/person/:id', function(req, res) {
    res.render('person', { ID: req.params.id });
  });
  
  app.post('/person', urlencodedParser, function(req, res){
    res.send("Thank You!!");
    console.log(req.body.firstname);
    console.log(req.body.lastname);
  });
  
  app.post('personjson', jsonParser, function(req, res){
    res.send("Thank You for the JSON data!!");
    console.log(req.body.firstname);
    console.log(req.body.lastname);
  });
  
  app.listen(port);
  
  // Index.js file
  <html>
    <head>
      <link href="assets/style.css" type="text/css" rel="stylesheet" />
		  <script src="https://code.jquery.com/jquery-1.11.3.min.js" ></script>
    </head>
    <body>
      <h1>Hello World!</h1>
      <form method="POST" action="/person">
        First name: <input type="text" id="firstname" name="firstname" /><br />
			  Last name: <input type="text" id="lastname" name="lastname" /><br />
			  <input type="submit" value="Submit" />
      </form>
      <script>
        $.ajax({
          type: "POST",
          url: "/personjson",
				  data: JSON.stringify({ firstname: 'Jane', lastname: 'Doe' }),
				  dataType: 'json',
				  contentType: 'application/json'
        })
      <script>
    </body>
  </html>

6 - RESTful APIs and JSON
REST is an acronym standing for REpresentational State Transfer
  - It is an architectural style for building API's
  - Basically is means that we decide that HTTP verbs & URL's mean something
    - HTTP verbs include POST, GET, DELETE, PUT and some more

7 - Structuring an App
In real world applications you need to have appropriate structure
Larger apps will need to be diffently structured that smaller apps
Express has many different structures is can use as it is not opinionated
Example uses the express generator installed globally
  - npm install express-generator -g
  - Using the express keyword will generate the structure of an a sample app
  - You will need to use npm to actually install the packages 
  - The express generator uses express.Router for routes
    - The approach is good for using a large number of routes as each set can be put in their own file
  - This is only one approach
Example Syntax
  - Controllers lie between the model and the view
  // Previous code is broken up into 2 controllers
  htmlcontroller.js
  var bodyParser = require('body-parser');
  var urlencodedParser = bodyParser.urlencoded({ extended: false });

  module.exports = function(app) {
    app.get('/', function(req, res) {
      res.render('index');
    });

    app.get('/person/:id', function(req, res) {
      res.render('person', { ID: req.params.id, Qstr: req.query.qstr });
    });

    app.post('/person', urlencodedParser, function(req, res) {
      res.send('Thank you!');
      console.log(req.body.firstname);
      console.log(req.body.lastname);
    });
  }
  
  apiController.js
    module.exports = function(app) {
    app.get('/api/person/:id', function(req, res) {
    // get that data from database
      res.json({ firstname: 'John', lastname: 'Doe' });
    });

    app.post('/api/person', function(req, res) {
      // save to the database
    });

    app.delete('/api/person/:id', function(req, res) {
      // delete from the database
    });
  }
  
  app.js
  var express = require('express');
  var app = express();
  
  // These controllers separate routes
  var apiController = require('./controllers/apiController');
  var htmlController = require('./controllers/htmlController');
  var port = process.env.PORT || 3000;

  app.use('/assets', express.static(__dirname + '/public'));
  app.set('view engine', 'ejs');
  app.use('/', function (req, res, next) {
    console.log('Request Url:' + req.url);
    next();
  });

  htmlController(app);
  apiController(app);

  app.listen(port);



                    Section 10: Javascript, JSON, and Databases
1 - Conceptual Aside: Relational Databases and SQL
Relational Databases
  - Typically a table with rows and columns
  - Not all data is put in one table
  - Avoid repeating yourself by breaking the information up as much as possible
SQL - Structured Query Language
  - Asks questions or queries of the database

2 - Node and MySQL
MySQL has a package on the npm registry
  - npm install mysql
Try use the most used package for the database you are using
Using MYSQL Workbench
  - https://www.mysql.com/products/workbench/
Tutorial on Node & MySQL
  - https://codeforgeek.com/2015/01/nodejs-mysql-tutorial/

3 - Conceptual Aside: NoSQL and Documents
NoSQL - Covers a variety of technologies
One type is a document DB - MongoDB is one of those
There are no tables
MongoDB uses JSON like documents
Changing technologies has superseeded the reason for using SQL in some cases

4 - MongoDB and Mongoose
Available here - https://www.mongodb.com
  - Install instructions available for installation on various platforms
Mongoose NPM package - http://mongoosejs.com
  - npm install mongoose
Cloud based service - https://mlab.com -- Free tier available
  - Demo of using Mongolab
    - Gives you a url to connect to

MongoDB uses a format called BSON (Binary JSON) which is a binary-encoded serialization of JSON-like documents
Full set of notes available on MongoDB available at 
  - Quick basic introduction to the material that will be covered by the section

5 - Web Server Checklist
Ability to work with databases
