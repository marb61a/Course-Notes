                    Learn and Understand NodeJS
                    Course notes Part 7


                    Section 8: NPM: the Node Package Manager
1 - Conceptual Aside: Packages and Package Managers
The NPM ecosystem is the largest open source ecosystem in history
A package is just code that is managed by a package management system

2 - Conceptual Aside: Semantic Versioning (semver)
Versioning - Specifying the version of a set of code
Semantic - Implies that there is something conveys meaning
Looking at a version number should convey a meaning
In Node version numbers should go Major.Minor.Patch eg 1.7.10 
 - Small patches eg bugfixes would become 1.7.11
 - Minor feature additions 1.8.11
 - Big changes 2.0.0 (will probably cause breakages)
Semantic Versioning - http://semver.org

3 - npm and the npm registry: Other People's Code
NPM - Node Package Manager
Install -- npm install
Check version installed -- npm -v
https://www.npmjs.com - Package repositories
Be very careful about packages you install

4 - init, nodemon, and package.json
Installation of Moment JS which is a JS library for dates times etc
  - https://momentjs.com
npm init - This is used to generate the npm package manager
The package.json file is created by npm init which contains the settings of your app
You can use npm to install packages
  - npm install moment --save 
  - using save saves it to drive and also writes an entry into package.json
  - Creates a node_modules folder to hold your installed packages
  - Not just used for Node apps
In package.json
  - ^ in a package means that it is alright to update to anything within the major packages eg 2.10.7 could be 2.11.8 but not 3
  - ~ means to only update patches
  - Having package.json means that you can share with people
  - You dont share node_modules folder
  
5 - npm Global Installation (Article)
You may run across permission issues on Mac or Linux. If that happens to you, here's a helpful link directly from npm's website:
  - https://docs.npmjs.com/getting-started/fixing-npm-permissions

6 - init, nodemon, and package.json - Part 2
npm install - this will install dependencies listed in package.json
Dev dependencies are dependencies needed for development
Example package for dev-dependencies is jasmine-node
  - https://www.npmjs.com/package/jasmine
  - npm install jasmine-node --save-dev // will save to dev-dependencies section of the package.json
  - Jasmine has its own node_modules folder for dependencies as does some of these dependencies
Dev-dependencies are not needed for the app to run
To install globally(available anywhere)
  - npm install -g
  - You may need permissions on *nix based systems
  - Various places for global modules to be stored
Nodemon is a utility that will monitor for any changes in your code and restarts the server
  - https://nodemon.io
  - Nodemon has its own node_modules folder
  - Nodemon has its own CLI utility
  - nodemon "entrypoint" eg nodemon server.js
Because of the amount of dependencies there can be a lot of bloat
To update installed packeages
  - npm update

7 - Using Other People's Code
Using npm is using other peoples code
Research properly
  - See how popular the package is
  - Check Github for issues
  - Test well
  - Proper semantic versioning may not be used


                    Section 9: Express
1 - Installing Express and Making it Easier to Build a Web Server

2 - Routes
Using Express JS, the Express site is located at
  - https://expressjs.com
  
Example Syntax
  var express = require('express');
  var app = express();
  
  var port = process.env.port || 3000;
  
  app.get('/', function(req, res){
    res.send('<html><head></head><body><h1>Hello world!</h1></body></html>');
  });
  
  app.get('/person/:id', function(req, res){
    res.send('<html><head></head><body><h1>Person: ' + req.params.id + '</h1></body></html>');
  });
  
  app.get('/api', function(req, res){
    res.json({ firstname: 'John', lastname: 'Doe' });
  });
  
  app.listen(port);
