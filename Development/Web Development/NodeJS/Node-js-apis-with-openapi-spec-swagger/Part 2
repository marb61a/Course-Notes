                    Build Node-js API's With OpenAPI Spec Swagger
                    Course Notes Part 2


5 - Define A HTTP GET Endpoint With URL Parameters For A Node.js Server With Swagger
We want to access a todo by its ID so a todo endpoint with a /id will be put in place
Example Syntax
  /todo/{id}:
    description: "Retrieve a single todo by its id"
    operationId: "FindTodoById"
    produces:
      - "application/json"
    parameters:
      - name: "id"
        in: "path"
        description: "id of the todo to get"
        required: true
        type: "integer"
        format: "int64"
    responses:
      200: 
        description: "todo response"
        schema: 
          $ref: "#/definitions/Todo"
    x-swagger-router-controller: "FindTodoById"

6 - Define A HTTP DELETE Endpoint For A Node.js API Server With Swagger
There will also need to be a delete method on this endpoint
Example Syntax
  delete:
    description: "Delete a todo by ID"
    operationId: "DeleteTodoById"
    parameters:
      - name: "id"
        in: "path"
        description: "id of the todo to delete"
        required: true
        type: "integer"
        format: "int64"
    responses:
      204: 
        description: "todo deleted"
    x-swagger-router-controller: "DeleteTodoById" 

7 - Define an HTTP PUT Endpoint For A Node.js API Server With Swagger
Example Syntax:
  put:
    description: "Update a todo by Id"
    operationId: "Update todo by Id"
    parameters:
      - name: "id"
        in: "path"
        description: "id of the todo being updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "updated_todo"
        in: "body"
        description: "the updated todo"
        required: true
        schema:
          $ref: "#/definitions/Todo"
    responses:
      200:
        description: "todo updated"
      400:
        description: "Error"

8 - Mock API Responses With Swagger
To enable mock mode in swagger
  - swagger project start -m
  - This will return a mock response in the browser
  - The mock response will meet the requirements filled in the previous sections
  - This may not satisfy more complex needs
Creating a sample JS mocking file
  - In the mocks sub folder, create a GetAllTodos which is the same as the x-swagger-controller endpoint name
Example Syntax
  'use strict'
  
  module.exports = {
    GetAllTodos : GetAllTodos
  }
  
  function GetAllTodos(req, res, next){
    res.json([
      {
        todo_id: 0,
        todo: "Get some milk",
        author: "Jim",
        createddate: "2016-11-01T23:15:00.00Z",
        duedate: "2016-11-08T08:00:00.000Z",
        completed: false
      },
      {
        todo_id: 1,
        todo: "Get some cereal",
        author: "Austin",
        createddate: "2016-11-01T23:15:00.00Z",
        duedate: "2016-11-08T08:00:00.000Z",
        completed: false
      }
    ])
  }
Server will restart automatically but if you need to restart anytime type rs
