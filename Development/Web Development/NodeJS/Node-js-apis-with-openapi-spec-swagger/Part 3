                    Build Node-js API's With OpenAPI Spec Swagger
                    Course Notes Part 3


9 - Create A Node.js Function For A HTTP GET Request For A Swagger API
Code for each endpoint will be in the controllers folder
Each endpoint will get a separate file to keep the app tidy
Example Syntax
  // GetAllTodos.js     -> in the controllers folder
  // Example uses elasticsearch for the backend database
  // To install use npm install --save elasticsearch
  'use strict';
  var client = require('../helpers/es');
  
  // Expose the function
  module.exports = {
    GetAllTodos : GetAllTodos
  };
  
  function GetAllTodos(req, res){
    // Comes from the elasticsearch client
    client.search({
      index: 'todo',
      type: 'todo',
      // Querying for everything
      q: '*',
      _sourceInclude: 'todo_id, todo, completed, tags, author, completeddate, duedate'
    }, function(error, response){
      if(error){
        res.send(JSON.stringify(error));
      } else {
        // Formatting the returned data
        var results = [];
        results = response.hits.hits.map(function(map){
          return hit._source
        });
        res.header('Content-Type', 'application/json');
        res.end(JSON.stringify(results));
      }
    })
  }
  
  // In the helpers folder create a new file
  //es.js     -> contains the boilerplate for using elasticsearch
  'use strict';
  
  var Elasticsearch = require('elasticserch');
  var client = Elasticsearch.client({
    host: 'localhost:9200',
    error: 'error'
  })
  
10 - Create A Node.js function For A HTTP POST request For A Swagger API
Example Syntax
  // Creating the AddTodo.js in the controllers folder
  // Cors will need to be installed to stop swagger editor errors
  // npm install --save cors
  // It will also needed to be added to the app.js file
  // var cors = require('cors'); 
  // app.use(cors());     accept the default parameters
  
  'use strict';
  var client = require('../helpers/es');
  
  module.exports = {
    AddTodo : AddTodo
  }
  
  function AddTodo(req, res){
    client.create({
      index: 'todo',
      type: 'todo',
      id: req.swagger.params.todo.value.todo_id, 
      body: req.swagger.params.todo.value
    }, function(error, response){
        res.header('Content-Type', 'application/json');
        if(error){
          console.log(error);
          res.statusCode = 409;
          res.end(JSON.stringify(error));
        } else {
          console.log(`Todo ${req.swagger.params.todo.value.todo_id} added to Elasticsearch`);
          res.end();
        }
    })
  }

11 - Create A Node.js Function For A HTTP GET Request with URL parameters
Example Syntax
  // Creating FindToDoById
  'use strict';
  var client = require('../helpers/es');
  
  module.exports = {
    FindTodoById : FindTodoById
  }
  
  function FindToById(req, res){
    console.log(`Getting the todo with the id ${req.swagger.params.id.value}`);
    client.get({
      index: 'todo',
      type: 'todo',
      id: req.swagger.params.id.value
    }, function(error, response){
        res.header('Content-Type', 'application/json');
        if(error){
          res.end(JSON.stringify(error));
        } else {
          res.end(JSON.stringify(response._source));
        }
    })
  }
