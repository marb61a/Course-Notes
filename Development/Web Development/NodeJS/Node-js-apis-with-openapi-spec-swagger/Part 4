                    Build Node-js API's With OpenAPI Spec Swagger
                    Course Notes Part 4


12 - Create A Node.js function for an HTTP DELETE request for a Swagger API
Example Syntax
  // Creating a DeleteTodoById file
  'use strict';
  var client = require('../helpers/es');
  
  module.exports = {
    DeleteTodoById : DeleteTodoById
  }
  
  function DeleteTodoById(){
    console.log(`Deleting todo with the id ${req.swagger.params.id.value}`);
    client.delete({
      index: 'todo',
      type: 'todo',
      id: req.swagger.params.id.value
    }, function(error, response){
        res.header('Content-Type', 'application/json');
        if(error){
          res.end(JSON.stringify(error));
        } else {
          res.end(JSON.stringify(response));
        }
    })
  }
  
The example uses jq & curl
  - https://stedolan.github.io/jq/    JSON processor
  - curl -XDELETE                     Using delete method with curl

13 - Create A Node.js function for an HTTP PUT Request For A Swagger API
Example Syntax
  // Creating a UpdateTodoById file
  'use strict';
  var client = require('../helpers/es');
  
  module.exports = {
    UpdateTodoById: UpdateTodoById
  }
  
  function UpdateTodoById(req, res){
    console.log(`Updating todo with the id ${req.swagger.params.id.value}`);
    client.update({
      index: 'todo',
      type: 'todo',
      id: req.swagger.params.id.value,
      // When updating on Elasicsearch there is a body which contains a document which contains the updated documents
      // for the cluster
      body: {
        doc: req.swagger.params.updated_todo.value
      }
    }, function(error, response){
        res.header('Content-Type', 'application/json');
        if(error){
          res.statusCode = 400;
          res.end(JSON.stringify(error));
        } else{
          res.end();
        }
    })
  }

14 - Connect An Existing React Application To An API Server Created With Swagger
Using a sample react application that will be wired up and connected to Swagger
Example Syntax
  // Just the Todo.js file, there are others in the application
  var React = require('react');
  var Router = require('react-router');
  var AllTodos = require('./Todos/AllTodos');
  var SingleTodo = require('./Todos/SingleTodo');
  var NewTodo = require('./Todos/NewTodo');
  var Axios = require('axios');
  
  var Todo = React.createClass({
    getInitialState : function(){
      return{
        todos: [
        {
          todo_id: '',
          todo: '',
          author: '',
          duedate: '',
          completed: ''
        }
        ],
        todo: {
          todo_id: '',
          todo: '',
          author: '',
          duedate: '',
          completed: ''
        }
      }
    },
    componentDidMount: function(){
      // Gets the todos from Elasticsearch
      // This is not available inside a nested function so has to be added
      var _this = this
      // Axios is a http wrapper library which returns a promise for http calls
      Axios.get('http://localhost:10010')
        .then(function(res){
          _this.setState({todos: res.data})
        })
    },
    handleAddTodo: function(newtodo){
      // Adding a new todo to Elasticsearch
      newtodo.todo_id = this.state.todo.length;
      Axios.post('http://localhost:10010', newtodo)
        .then(function(res){
          console.log(res);
        })
    },
    displayTodo: function(todo){
      this.setState({todo: todo})
    },
    render: function(){
      <div className="row">
        <div className="row-md-4">
          <AllTodos todos={this.state.todos} displayTodo={this.displayTodo} />
        </div>
        <div className="row-md-4">
          <SingleTodo todo={this.state.todo} displayTodo={this.displayTodo} />
        </div>
        <div className="row-md-4">
          <NewTodo addTodo={this.handleAddTodo} />
        </div>
      </div>
    }
  })
  
  module.exports = Todo;
