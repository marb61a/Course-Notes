                    How To Use NPM Scripts As Your Build Tool
                    Course Notes Part 5


19 - Pull Out NPM Script Into Another File With PS
As the amount of npm scripts increases it maybe necessary to look at alternative ways to amnage them
There is an npm package available to help call package scripts
  - npm i p-s -D
Using the following command will remove the npm scripts and put them into a new JS file
  - node_modules/.bin/nps init
  - The new file is called package-scripts.js
  - Because of moving the npm scripts running npm run will no longer show a list of available scripts
    - npm -- --help 
      - The first flag is to be passed on to npm script not npm itself
Example Syntax
  // package.json file
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    "port": "1337"
  }
  // After running the nps init command only scripts are left in place
  "scripts": {
    "start": "nps",
    "test": "nps test",
    "prepush": "nps lint"
  }  
  
  // package-scripts.js file
  module.exports = {
    scripts: {
      // NPS does not support pre or post scripts
      default: 'node index.js && npm build server',
      test: {
        default: {
          script: 'nps lint,test.run',
          description: 'Run our mocha tests'
        }
        run: 'BABEL_ENV=test mocha spec/ --require babel-register',
      },
      cover: {
        default: 'nyc npm t && nps cover.clean',
        open: 'open coverage/index.html',
        clean: 'rm -rf .nyc_output'
      },
      lint: {
        // In this case npm-run-all is not supported, a list of scripts to be linted must be passed
        default: 'nps lint.js,lint.css,lint.css.fix',
        js: 'eslint --cache --fix ./',
        css: {
          default: 'stylelint \'**/*.scss\' --syntax scss',
          fix: 'stylefmt -R /src'
        }
      },
      watch: {
        default: 'npm-run-all --parallel watch:*',
        test: 'npm t -- --watch',
        lint: 'onchange \'**/*.js\' \'**/*.scss\' -- npm run lint'
      },
      build: {
        default: 'nps build.clean,build.html,build.js,build.css',
        clean: 'rm -rf public/$npm_package_version',
        html: 'cross-var pug --obj data.json src/index.pug --out public/$npm_package_version',
        css: 'node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css',
        js: 'mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js'
      },
      server:{
        default: 'nps --parallel server.create,server.launch',
        create: 'http-server public/$npm_package_version -p $npm_package_config_port',
        launch: 'open http://localhost:$npm_package_config_port'
      },
    }
  }

20 - Create A Bash Script To Replace A Complex NPM Script 
If NPM scripts begin to become unwieldy they can be split up into external script files
In this example 2 set of scripts will be converted into shell scripts
Example Syntax
  // Creating a new folder called scripts, add a file called test.sh
  // The permissions will need to be changed in order to run the file
  // chmod 777 test.sh on the script will be appropriate
  // test.sh
  #!/usr/bin/env bash                                   // This signifies that this is a bash script
  
  // Remove the quotation marks as it is not a json file
  // Also then these tests can be removed from the package.json file
  npm run lint
  BABEL_ENV=test mocha spec/  --require babel-register
  
  // Inside the package.json file it now reads
  "scripts": {
    "test": "./scripts/test.sh"
  }

Example Syntax
  // Creating a build.sh file
  // The permissions will need to be changed like the test script
  // If there are a few files needing permissions to be changed then using the recursive flag can be used
  // chmod -R 777 .
  #!/usr/bin/env bash                                   // This signifies that this is a bash script
  
  rimraf public/$npm_package_version,
  pug --obj data.json src/index.pug --out public/$npm_package_version,
  node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css,
  mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js
  
  // Inside the package.json file most of the build scripts can be removed
  "scripts": {
    "build": "./scripts/build.sh"
  }
