                    How To Use NPM Scripts As Your Build Tool
                    Course Notes Part 6


21 - Create A Node Script To Replace A Complex NPM Script 
Referencing external script in your package.json file can have a couple of advantages
  - It can make your file much more flexible
  - It will clean up your file so making it is easier to understand
Example Syntax
  // Converting 3 sets of scripts to JS scripts, tests, build & services
  // Start by making a scripts folder -- mkdir scripts
  // You can use the touch command to create all 3 files together --  touch scripts/{test,build,server}.js
  
  //test.js file
    // shelljs is an implementation of Unix shell commands in JS
    // There are notes on ShellJS available at the following url
    //  - https://github.com/marb61a/Course-Notes/blob/master/Javascript/Technical/Shell Scripting With Javascript
    // It will also need to be installed as a dev dependency - npm install shelljs -D
    import { exec } from 'shelljs';

    // Checking to see if the platform is Windows as Node offers a lot of possibilites for cross platform
    const isWindows = process.platform === "win32";
    // The double ampersand is the best way to do this in Windows
    const environment = isWindows ? "set BABEL_ENV=test&&" : "BABEL_ENV=test";

    exec(`S{ environment } mocha spec/ --require babel-register`);
  
  
  // build.js
    import { rm, exec } from 'shelljs';

    const version = process.env.npm_package_version;

    rm("-rf", `public/${ version }`);
    exec(`pug --obj data.json src/index.pug --out public/${ version }`);
    exec(`node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/${ version }/index.min.css`);
    exec(`mustache data-json src/index.mustache.js | uglifyjs > public/${ version }/index.min.js`);
  
  
  // server.js
    import { exec } from 'shelljs';

    // Destructuring from process.env
    const {
      npm_package_version: version, 
      npm_package_config_port: port
    } = process.env

    // http-server needs a second argument to signify an asynchronous operation
    exec(`http-server public/${ version } -p ${ port }`, {async: true});

    // Use opn instead of open for cross platform compatability
    exec(`opn http://localhost:${ port }`);
  
  
  // package.json
    "scripts" : {
      // Because we are using the import statement in the test.js file we will have to use Babel-Node
      // This will autocompile and run our code, in order to use Babel-Node the Babel-cli package must be installed
      // npm install babel-cli -D
      "test": "babel-node ./scripts/test.js",
      "build": "babel-node ./scripts/build.js",
      "server": "babel-node ./scripts/server.js"
    }
  
  // .babelrc file
    {
      "presets": ["es2015", "stage-0"],
      "sourceMaps": "inline",
      "compact": true,
      "env": {
        "test": {
          "plugins": ["babel-plugin-espower"]
        }
      }
    }
  
