                    How To Use NPM Scripts As Your Build Tool
                    Course Notes Part 3


12 - Use package.json Variables In NPM Scripts
NPM has package level variables that can be used in scripts such as name, version etc
To see NPM variables
  - npm run env | grep "npm_package" | less
Example Syntax
  "scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    // The $ signifies a variable
    "prebuild": "rm -rf public/$npm_package_version",
    "build:html": "pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"
  }

13 - Use Custom Config Settings In Your NPM Scripts
NPM supports custom configuration parameters
  - You can either sign in the package.json or at the command line
  - You can override the config parameters set in the package.json file below
    // This will change the port set in the file from 1337 to 1138
    - npm config set app-name:port 1138
Example Syntax
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    // Configures a port key, using the npm run env | grep config shows this port is now an environmental variable
    "port": "1337"
  }
  "scripts": {
    "start": "node index.js",
    "poststart": "npm run build && npm run server",
    "server": "npm-run-all --parallel server:*",
    // http-server will need to be installed using npm i http-server
    "server:create": "http-server public/$npm_package_version -p $npm_package_config_port",
    "server:launch": "open http://localhost:$npm_package_config_port",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    // The $ signifies a variable
    "prebuild": "rm -rf public/$npm_package_version",
    "build:html": "pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"
  }


14 - Run NPM Scripts With Git Hooks
To help enforce code quality it is good to run validation
There is an NPM package avilable to add Git hooks which aren't available out of the box
  - npm install husky -D
  - This can be useful if there are linting errors which may need to be bypassed to commit to Git
Example Syntax
  "scripts": {
    "start": "node index.js",
    "prepush": "npm run lint",
    "poststart": "npm run build && npm run server",
    "server": "npm-run-all --parallel server:*",
    "server:create": "http-server public/$npm_package_version -p $npm_package_config_port",
    "server:launch": "open http://localhost:$npm_package_config_port",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    "prebuild": "rm -rf public/$npm_package_version",
    "build:html": "pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"
  }

15 - Change The Level Of Console Output When Running NPM Scripts
When running npm script there are a range of flags that can be passed to change the level of log output
  -- loglevel silent or  --silent or -s will reduce log output considerable 
  -q for quiet
  -d for info
  -dd for verbose
  -ddd for hugely verbose

16 - Make NPM Scripts Cross Environment Friendly
If you want your scripts to run run on multiple OS then there are several considerations
There is an npm package available for helping with this problem
  - npm i cross-env -D
To delete across different platform there is an npm package available
  - npm i rimraf -D
The open/coverage command doesn't work on windows so there is an npm package needed
  - npm i opn-cli -D
The $ for signifying variables does not work on Windows so an npm package is needed
  - npm i cross-var -D
Example Syntax
  // Making scripts cross platform friendly
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    // Configures a port key, using the npm run env | grep config shows this port is now an environmental variable
    "port": "1337"
  }
  "scripts": {
    "start": "node index.js",
    "poststart": "npm run build && npm run server",
    "pretest": "npm run lint",
    // This will work on *nix machines but not Windows, by adding the cross-env variable it
    // sets the environment variables needed for each platform
    "test": "cross-env set BABEL_ENV=test mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    // Some versions of windows do not understand rm commands so change to using the rimraf command
    "postcover": "rimraf .nyc_output",
    // Again this is of use on *nix platforms, replace open with opn to make it multi platform usable
    "cover:open": "opn coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    // Although *nix systems are fine with singel quotes it does not work on Windows systems, use
    // escapes and change the single quotes to double
    "lint:css": "stylelint \"***/*.scss\" --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange \"**/*.js\'" \"**/*.scss\" -- npm run lint",
    "build": "npm-run-all build:*",
    // The $ signifies a variable, the % is used on Windows and goes before and after the variable
    // adding the cross-var will allow the changing to any variable to suit the environment
    "prebuild": "cross-var rimraf public/$npm_package_version",
    "build:html": "cross-var pug --obj data.json src/index.pug --out public/$npm_package_version",
    // cross-var will not work where the variable is part of a pipe so the entire command has to be passed as a string 
    "build:css": " cross-var "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css"",
    "build:js": "cross-var "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"",
    "server": "npm-run-all --parallel server:*",
    "server:create": "cross-var "http-server public/$npm_package_version -p $npm_package_config_port"",
    "server:launch": "cross-var "open http://localhost:$npm_package_config_port"",
    "prepush": "npm run lint"
  }  

17 - List Available NPM Scripts And Support Tab Completion
As the scripts section gets large it becomes easy to forget what scripts are available
Some of the ways that this can be avoided are
  - npm run | less
  // Add tab completion 
  - npm completion >> ~/.bashrc or ~/.zshrc
  // Stands for npm task list, use ntl at the command prompt and it will list scripts
  - npm install ntl -g

18 - Add Comments To Your NPM Scripts
As the amount of scripts increases it may become necessary for doumentation
  - Because the file is in json format it may be limiting
  - There are a couple of ways to get around this
  - These methods are for providing comments inside a package.json file
Example Syntax
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    "port": "1337"
  }
  "scripts": {
  // Running as is and piping through less will only print out the last comment as they share the same key
  // Another way is to use a shell comment character #
    "//": "run build and serve"
    // using a sample sheel comment character
    "start": "# run, build and serve \n\t node index.js",
    "poststart": "npm run build && npm run server",
    "pretest": "npm run lint",
    "//": "Run our mocha unit tests",
    "test": "cross-env set BABEL_ENV=test mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rimraf .nyc_output",
    "cover:open": "opn coverage/index.html",
    "//": "lint the Javascript and SASS"
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint \"***/*.scss\" --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange \"**/*.js\'" \"**/*.scss\" -- npm run lint",
    "build": "npm-run-all build:*",
    "prebuild": "cross-var rimraf public/$npm_package_version",
    "build:html": "cross-var pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": " cross-var "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css"",
    "build:js": "cross-var "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"",
    "server": "npm-run-all --parallel server:*",
    "server:create": "cross-var "http-server public/$npm_package_version -p $npm_package_config_port"",
    "server:launch": "cross-var "open http://localhost:$npm_package_config_port"",
    "prepush": "npm run lint"
  }  

19 - Pull Out NPM Script Into Another File With PS
As the amount of npm scripts increases it maybe necessary to look at alternative ways to amnage them
There is an npm package available to help call package scripts
  - npm i p-s -D
Using the following command will remove the npm scripts and put them into a new JS file
  - node_modules/.bin/nps init
  - The new file is called package-scripts.js
  - Because of moving the npm scripts running npm run will no longer show a list of available scripts
    - npm -- --help 
      - The first flag is to be passed on to npm script not npm itself
Example Syntax
  // package.json file
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    "port": "1337"
  }
  // After running the nps init command only scripts are left in place
  "scripts": {
    "start": "nps",
    "test": "nps test",
    "prepush": "nps lint"
  }  
  
  // package-scripts.js file
  module.exports = {
    scripts: {
      // NPS does not support pre or post scripts
      default: 'node index.js && npm build server',
      test: {
        default: {
          script: 'nps lint,test.run',
          description: 'Run our mocha tests'
        }
        run: 'BABEL_ENV=test mocha spec/ --require babel-register',
      },
      cover: {
        default: 'nyc npm t && nps cover.clean',
        open: 'open coverage/index.html',
        clean: 'rm -rf .nyc_output'
      },
      lint: {
        // In this case npm-run-all is not supported, a list of scripts to be linted must be passed
        default: 'nps lint.js,lint.css,lint.css.fix',
        js: 'eslint --cache --fix ./',
        css: {
          default: 'stylelint \'**/*.scss\' --syntax scss',
          fix: 'stylefmt -R /src'
        }
      },
      watch: {
        default: 'npm-run-all --parallel watch:*',
        test: 'npm t -- --watch',
        lint: 'onchange \'**/*.js\' \'**/*.scss\' -- npm run lint'
      },
      build: {
        default: 'nps build.clean,build.html,build.js,build.css',
        clean: 'rm -rf public/$npm_package_version',
        html: 'cross-var pug --obj data.json src/index.pug --out public/$npm_package_version',
        css: 'node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css',
        js: 'mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js'
      },
      server:{
        default: 'nps --parallel server.create,server.launch',
        create: 'http-server public/$npm_package_version -p $npm_package_config_port',
        launch: 'open http://localhost:$npm_package_config_port'
      },
    }
  }

20 - Create A Bash Script To Replace A Complex NPM Script 
If NPM scripts begin to become unwieldy they can be split up into external script files
In this example 2 set of scripts will be converted into shell scripts
Example Syntax
  // Creating a new folder called scripts, add a file called test.sh
  // The permissions will need to be changed in order to run the file
  // chmod 777 test.sh on the script will be appropriate
  // test.sh
  #!/usr/bin/env bash                                   // This signifies that this is a bash script
  
  // Remove the quotation marks as it is not a json file
  // Also then these tests can be removed from the package.json file
  npm run lint
  BABEL_ENV=test mocha spec/  --require babel-register
  
  // Inside the package.json file it now reads
  "scripts": {
    "test": "./scripts/test.sh"
  }

Example Syntax
  // Creating a build.sh file
  // The permissions will need to be changed like the test script
  // If there are a few files needing permissions to be changed then using the recursive flag can be used
  // chmod -R 777 .
  #!/usr/bin/env bash                                   // This signifies that this is a bash script
  
  rimraf public/$npm_package_version,
  pug --obj data.json src/index.pug --out public/$npm_package_version,
  node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css,
  mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js
  
  // Inside the package.json file most of the build scripts can be removed
  "scripts": {
    "build": "./scripts/build.sh"
  }

21 - Create A Node Script To Replace A Complex NPM Script 
Referencing external script in your package.json file can have a couple of advantages
  - It can make your file much more flexible
  - It will clean up your file so making it is easier to understand
Example Syntax
  // Converting 3 sets of scripts to JS scripts, tests, build & services
  // Start by making a scripts folder -- mkdir scripts
  // You can use the touch command to create all 3 files together --  touch scripts/{test,build,server}.js
  
  //test.js file
    // shelljs is an implementation of Unix shell commands in JS
    // There are notes on ShellJS available at the following url
    //  - https://github.com/marb61a/Course-Notes/blob/master/Javascript/Technical/Shell Scripting With Javascript
    // It will also need to be installed as a dev dependency - npm install shelljs -D
    import { exec } from 'shelljs';

    // Checking to see if the platform is Windows as Node offers a lot of possibilites for cross platform
    const isWindows = process.platform === "win32";
    // The double ampersand is the best way to do this in Windows
    const environment = isWindows ? "set BABEL_ENV=test&&" : "BABEL_ENV=test";

    exec(`S{ environment } mocha spec/ --require babel-register`);
  
  
  // build.js
    import { rm, exec } from 'shelljs';

    const version = process.env.npm_package_version;

    rm("-rf", `public/${ version }`);
    exec(`pug --obj data.json src/index.pug --out public/${ version }`);
    exec(`node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/${ version }/index.min.css`);
    exec(`mustache data-json src/index.mustache.js | uglifyjs > public/${ version }/index.min.js`);
  
  
  // server.js
    import { exec } from 'shelljs';

    // Destructuring from process.env
    const {
      npm_package_version: version, 
      npm_package_config_port: port
    } = process.env

    // http-server needs a second argument to signify an asynchronous operation
    exec(`http-server public/${ version } -p ${ port }`, {async: true});

    // Use opn instead of open for cross platform compatability
    exec(`opn http://localhost:${ port }`);
  
  
  // package.json
    "scripts" : {
      // Because we are using the import statement in the test.js file we will have to use Babel-Node
      // This will autocompile and run our code, in order to use Babel-Node the Babel-cli package must be installed
      // npm install babel-cli -D
      "test": "babel-node ./scripts/test.js",
      "build": "babel-node ./scripts/build.js",
      "server": "babel-node ./scripts/server.js"
    }
  
  // .babelrc file
    {
      "presets": ["es2015", "stage-0"],
      "sourceMaps": "inline",
      "compact": true,
      "env": {
        "test": {
          "plugins": ["babel-plugin-espower"]
        }
      }
    }
  
