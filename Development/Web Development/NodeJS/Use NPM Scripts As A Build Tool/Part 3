                    How To Use NPM Scripts As Your Build Tool
                    Course Notes Part 3


12 - Use package.json Variables In NPM Scripts
NPM has package level variables that can be used in scripts such as name, version etc
To see NPM variables
  - npm run env | grep "npm_package" | less
Example Syntax
  "scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    // The $ signifies a variable
    "prebuild": "rm -rf public/$npm_package_version",
    "build:html": "pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"
  }

13 - Use Custom Config Settings In Your NPM Scripts
NPM supports custom configuration parameters
  - You can either sign in the package.json or at the command line
  - You can override the config parameters set in the package.json file below
    // This will change the port set in the file from 1337 to 1138
    - npm config set app-name:port 1138
Example Syntax
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    // Configures a port key, using the npm run env | grep config shows this port is now an environmental variable
    "port": "1337"
  }
  "scripts": {
    "start": "node index.js",
    "poststart": "npm run build && npm run server",
    "server": "npm-run-all --parallel server:*",
    // http-server will need to be installed using npm i http-server
    "server:create": "http-server public/$npm_package_version -p $npm_package_config_port",
    "server:launch": "open http://localhost:$npm_package_config_port",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    // The $ signifies a variable
    "prebuild": "rm -rf public/$npm_package_version",
    "build:html": "pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"
  }


14 - Run NPM Scripts With Git Hooks
To help enforce code quality it is good to run validation
There is an NPM package avilable to add Git hooks which aren't available out of the box
  - npm install husky -D
  - This can be useful if there are linting errors which may need to be bypassed to commit to Git
Example Syntax
  "scripts": {
    "start": "node index.js",
    "prepush": "npm run lint",
    "poststart": "npm run build && npm run server",
    "server": "npm-run-all --parallel server:*",
    "server:create": "http-server public/$npm_package_version -p $npm_package_config_port",
    "server:launch": "open http://localhost:$npm_package_config_port",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    "prebuild": "rm -rf public/$npm_package_version",
    "build:html": "pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"
  }
