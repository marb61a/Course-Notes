                    How To Use NPM Scripts As Your Build Tool
                    Course Notes Part 4


15 - Change The Level Of Console Output When Running NPM Scripts
When running npm script there are a range of flags that can be passed to change the level of log output
  -- loglevel silent or  --silent or -s will reduce log output considerable 
  -q for quiet
  -d for info
  -dd for verbose
  -ddd for hugely verbose

16 - Make NPM Scripts Cross Environment Friendly
If you want your scripts to run run on multiple OS then there are several considerations
There is an npm package available for helping with this problem
  - npm i cross-env -D
To delete across different platform there is an npm package available
  - npm i rimraf -D
The open/coverage command doesn't work on windows so there is an npm package needed
  - npm i opn-cli -D
The $ for signifying variables does not work on Windows so an npm package is needed
  - npm i cross-var -D
Example Syntax
  // Making scripts cross platform friendly
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    // Configures a port key, using the npm run env | grep config shows this port is now an environmental variable
    "port": "1337"
  }
  "scripts": {
    "start": "node index.js",
    "poststart": "npm run build && npm run server",
    "pretest": "npm run lint",
    // This will work on *nix machines but not Windows, by adding the cross-env variable it
    // sets the environment variables needed for each platform
    "test": "cross-env set BABEL_ENV=test mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    // Some versions of windows do not understand rm commands so change to using the rimraf command
    "postcover": "rimraf .nyc_output",
    // Again this is of use on *nix platforms, replace open with opn to make it multi platform usable
    "cover:open": "opn coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    // Although *nix systems are fine with singel quotes it does not work on Windows systems, use
    // escapes and change the single quotes to double
    "lint:css": "stylelint \"***/*.scss\" --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange \"**/*.js\'" \"**/*.scss\" -- npm run lint",
    "build": "npm-run-all build:*",
    // The $ signifies a variable, the % is used on Windows and goes before and after the variable
    // adding the cross-var will allow the changing to any variable to suit the environment
    "prebuild": "cross-var rimraf public/$npm_package_version",
    "build:html": "cross-var pug --obj data.json src/index.pug --out public/$npm_package_version",
    // cross-var will not work where the variable is part of a pipe so the entire command has to be passed as a string 
    "build:css": " cross-var "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css"",
    "build:js": "cross-var "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"",
    "server": "npm-run-all --parallel server:*",
    "server:create": "cross-var "http-server public/$npm_package_version -p $npm_package_config_port"",
    "server:launch": "cross-var "open http://localhost:$npm_package_config_port"",
    "prepush": "npm run lint"
  }  

17 - List Available NPM Scripts And Support Tab Completion
As the scripts section gets large it becomes easy to forget what scripts are available
Some of the ways that this can be avoided are
  - npm run | less
  // Add tab completion 
  - npm completion >> ~/.bashrc or ~/.zshrc
  // Stands for npm task list, use ntl at the command prompt and it will list scripts
  - npm install ntl -g

18 - Add Comments To Your NPM Scripts
As the amount of scripts increases it may become necessary for doumentation
  - Because the file is in json format it may be limiting
  - There are a couple of ways to get around this
  - These methods are for providing comments inside a package.json file
Example Syntax
  "name": "",
  "version": "1.0",
  "description": "app description",
  "main": "entry point usually index.js or server.js",
  "config": {
    "port": "1337"
  }
  "scripts": {
  // Running as is and piping through less will only print out the last comment as they share the same key
  // Another way is to use a shell comment character #
    "//": "run build and serve"
    // using a sample sheel comment character
    "start": "# run, build and serve \n\t node index.js",
    "poststart": "npm run build && npm run server",
    "pretest": "npm run lint",
    "//": "Run our mocha unit tests",
    "test": "cross-env set BABEL_ENV=test mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rimraf .nyc_output",
    "cover:open": "opn coverage/index.html",
    "//": "lint the Javascript and SASS"
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint \"***/*.scss\" --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    "watch:lint": "onchange \"**/*.js\'" \"**/*.scss\" -- npm run lint",
    "build": "npm-run-all build:*",
    "prebuild": "cross-var rimraf public/$npm_package_version",
    "build:html": "cross-var pug --obj data.json src/index.pug --out public/$npm_package_version",
    "build:css": " cross-var "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/$npm_package_version/index.min.css"",
    "build:js": "cross-var "mustache data-json src/index.mustache.js | uglifyjs > public/$npm_package_version/index.min.js"",
    "server": "npm-run-all --parallel server:*",
    "server:create": "cross-var "http-server public/$npm_package_version -p $npm_package_config_port"",
    "server:launch": "cross-var "open http://localhost:$npm_package_config_port"",
    "prepush": "npm run lint"
  }  

