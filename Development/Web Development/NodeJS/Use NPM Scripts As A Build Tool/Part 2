                    How To Use NPM Scripts As Your Build Tool
                    Course Notes Part 2


8 - Use Pre And Post NPM Script Lifecycle Hooks
Npm scripts support the concept of pre and post scripts
  - Just by prepending the script with pre tells npm to run the script before
  - In the example cover will be for test coverage and nyc will generate a report when tests are run
    - postcover will run after the coverage script, it will clean up the nyc generated coverage files
    - The cover:open script will open the coverage report in a browser
      - npm run cover:open will open the report in the browser
Example Syntax
  "scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylermt -R src/"
  }

9 - Passing Arguments To NPM Scripts
Example Syntax
  // Creating a watch script for tests
  // Don't be tempted to copy thes test directives and rename to test:wtach and add a watch directive to the end
  // this would be brittle and would have problems if test scripts were changed
  "scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    // npm recognises the -- option as a way of supplying additional directives
    "test:watch": "npm-test -- --watch",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/"
  }

10 - Pipe Data From One NPM Script To Another
Example Syntax
  // Adding scripts to build a site
  // Pug is a templating engine                           // https://pugjs.org/api/getting-started.html
  // npm install pug-cli -D                               // Install the pug-cli and making it a devdependency
  // Adding various css scripts Sass
  "scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    "test:watch": "npm-test -- --watch",
    // Used to build all the build subscripts
    "build": "npm-run-all build:*",
    Using a prebuild script to remove the public folder before building assets
    "prebuild": "rm -rf public/",
    // index.pug is the template, data.json in the input, it has filesize info for all React versions
    // public is the output directory, to run the build npm run build:html
    "build:html": "pug --obj data.json src/index.pug --out public/",
    // For the CSS dependencies the installations will be Sass, PostCSS & Cssmin
    // npm -i node-sass postcss-cli cssmin _D
    // The | character will be used to pipe from one file into another
    // The -c is used to pass in a config file which tells postcss to run autoprefixer which adds any vendor prefixes
    // Then the file is passed to cssmin which minifies the css, that is then sent out to a file using > 
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/index.min.css",
    // Using mustache & uglify.js -> npm install mustache uglify-js -D
    // Uglify will minimise the js sent from the index file
    // Again the output is sent to a file using the > option
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/index.min.js"
  }

11 - Run NPM Scripts When Files Change With onChange
Example Syntax
ESLint does not support the watch flag
  - Instead the example with use the onChange utility
  - npm -i onchange -D
"scripts": {
    "start": "node index.js",
    "pretest": "npm run lint",
    "test": "mocha spec/ --require babel-register",
    "cover": "nyc npm -t ",
    "postcover": "rm -rf .nyc_output",
    "cover:open": "open coverage/index.html",
    "lint": "npm-run-all lint:**",
    "lint:js": "eslint --cache --fix ./",
    "lint:css": "stylelint '***/*.scss' --syntax scss",
    "lint:css:fix": "stylefmt -R src/",
    // A generic watch test to watch all the sub watches
    "watch": "npm-run-all --parallel watch:*"
    "watch:test": "npm-test t -- --watch",
    // Used instead of the watch flag
    // It tells what to run should any of the files change, by default it ignores the onchange folder 
    "watch:lint": "onchange '**/*.js' '**/*.scss' -- npm run lint",
    "build": "npm-run-all build:*",
    "prebuild": "rm -rf public/",
    "build:html": "pug --obj data.json src/index.pug --out public/",
    "build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/index.min.css",
    "build:js": "mustache data-json src/index.mustache.js | uglifyjs > public/index.min.js"
  }
