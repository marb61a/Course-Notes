                    Progressive Web Apps And Offline
                    Course Notes Part 4


                    Section 5 - Enhanced Server-side Rendering
1 - Performance Timeline
Server Side Rendering
  - There is a full set of notes on SSR (React oriented) at
    - https://github.com/marb61a/Course-Notes/blob/master/Javascript/React/Server Side Rendering with React and Redux
  - At the present moment in the app there is nothing visible in the body
  - It is very important to pay attention to the 3 main metrics brifely discussed earlier
    - Time to first paint, time to data, time to interactive
  - Pure client-side rendering requires JS to land before anything interesting can happen
    - CSS payloads are much smaller than JS payloads
  - The general solution for Server Side Rendering is difficult
    - Remember that browser JS  != to NodeJS
    - There is a sustainable and quick middleground available for many apps
    - The course will show this which the instructor calls enhanced client side rendering

2 - Enhanced Client-side Rendering
Enhanced Client-Side Rendering
  - This works for a wide range of apps with some URL-agnostic high level UI
  - There are 3 steps involved in the process
    - Boot the app with URL-agnostic HTML
    - Embed any critical CSS into the index.html file
    - Then add a loading spinner
  - This maybe a good use case for using CSS for interactivity rather than just JS
    - On example is instead of a onClick() JS maybe a CSS Hover effect
    - The instructor recommends using as much CSS in top level navigation as possible
Server Side Rendering
  - You wont have static hosting you will instead have a rendering server
  - There are dynamic HTML responses on a per request basis
  - It involves some special treatment of browser-only concepts
    - When using SSR you will need to be aware of JS core standards vs accepted conventions
      - When using libraries like JQuery that need AJAX and a full DOM then SSR is going to be very slow
      - This will require using alot of work arounds eg Stubbing & DOM virtualisation
    - XMLHttpRequest
    - window, navigator, sensors, localstorage etc
      - These will be very problematic for SSR (at least at the start)
  - Initial HTML response is slowed down considerably
    - However this is offset by URL-specific content being ready when it arrives
    
3 - Server-side Rendering

4 - Challenge 2: Enhanced Client-side Rendering

5 - Challenge 2: Solution



                    Section 6 - Promises
1 - Reviewing Promises

2 - Chaining & Creation




                    Section 7 - JavaScript Workers
1 - Introducing Web Workers
JS workers are not used enough
  - They could ease some pain in apps by being used more
  - They are parallel not just concurrent
    - Moving from 1 to 2 enables 1 to n
  - They each have their own independent script
     - You cannot share scope without passing information back and forth
  - They can send messages back to their creator
  - They must obey the same-origin policy
Example Syntax
  // app.js
  let w = new Worker('worker.js');
  
  w.postMessage({foo: 'bar'});
  console.log('App Sent');
  
  w.onmessage = (e) => {
    console.log(`App received ${e.data}`);
  }
  
  // worker.js example
  const log = console.info.bind(console);
  
  self.onmessage = ({ data }) => {
  
  }
  
  function doWork(){
  
  }

2 - Dedicated vs. Shared Workers

3 - Limitations & Features

4 - Terminating a Worker

5 - Challenge 3: Web Workers

6 - Challenge 3: Solution



                    Section 8 - Async Data
1 - Reviewing Async Methods

2 - Fetch API

3 - Fetch Requests

4 - Fetch & CORS

5 - Challenge 4: Using Fetch, Part 1

6 - Challenge 5: Using Fetch, Part 2

7 - Challenges 4 & 5: Solutions



                  Section 9 - Service Worker
1 - Introducing Service Worker

2 - Service Worker Features

3 - Challenge 6: Simple Service Worker

4 - Challenge 6: Solution

5 - Service Worker Review

6 - Intercepting Network Requests

7 - Service Worker Demo



                    Section 10 - Cache API
1 - Introducing Cache API

2 - Challenge 7: Fallback Image

3 - Challenge 7: Solution

4 - Introducing Caching Strategies

5 - Precache Caching

6 - Network with Cache Backup

7 - Cache, Update, and Refresh

8 - Challenge 8: Integrating Precache

9 - Challenge 8: Solution

10 - Challenge 9: Caching Dynamic Data

11 - Challenge 9: Solution

12 - Challenge 10: SPA Treatment of index.html

13 - Challenge 10: Solution



                      Section 11 -IndexedDB
1 - Introducing IndexedDB

2 - IndexedDB API

3 - IndexedDB & Promises

4 - Challenge 11: IndexedDB

5 - Challenge 11: Solution



                    Section 12 - Web Push
1 - Push API and Notification API

2 - VAPID for Web Push

3 - Structure of PushSubscription

4 - Challenge 12: Web Push

5 - Challenge 12: Solution



                    Section 13 - Notifications
1 - Introducing Notifications

2 - Challenge 13: Notifications

3 - Challenge 13: Solution



                    Section 14 - Background Sync
1 - Introducing Background Sync

2 - Background Sync Strategies

3 - Background Sync Demo

4 - Problems with App Cache



                    Section 15 - HTTP/2
1 - Introducing HTTP/2
There are further notes available on HTTP/2 at
  https://github.com/marb61a/Course-Notes/blob/master/Web%20Development/Tools/HTTP2 Fundamentals



                    Section 16 - Patterns for PWAs
1 - Application Shell Pattern

2 - PRPL Pattern



                    Section 17 - Wrapping Up
1 - Reviewing PWA Technologies

2 - Final Measurements


