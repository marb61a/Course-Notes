                    Progressive Web Apps And Offline
                    Course Notes Part 1


                    Section 1 - Progressive Web Applications and Offline
1 - Introduction
Introduction to the course & instructor

2 - Defining PWA
What is a Progressive Web App
  - It uses the latest advanced web technologies
  - Adopts a progressive enhancement tenet
  - It transcends what users will normally expect from a browser
    - EG Offline working and Push notifications
    - This limits some of the need for native app development
  - It also offers a native like experience
There are 10 characteristics of PWA's
  - Progressive in that they work for a variety of browsers
  - Responsive because mobile traffic has eclipsed desktop traffic
  - Works offline because PWA's should work regardless of absent or poor quality connections
  - App Like because you can add them and launch them from the home screen
  - Fresh because they should get up to date content without complex process
  - Safe because security is very important, HTTPS is used by about 60% of the web
  - Discoverable, they should have rich metadata for search engines
  - Re-engageable in the form of notifications so that users can be bought back into an app
  - Durable in that they should be able to store data so that it survives
  - Linkable, so that url linking is possible along with native deep linking
The course will cover all of this

3 - Project: Frontend Grocer
The course has a sample app which will be used during the course
  - It will need to be set up as part of Exercise 0
  - At the beginning of the course it works like a standard single page app
    - It is built in React but the work will be done in Vanilla JS
    - The React will work only as a thin view layer
  - During the course there will be support added for
    - Background Tasks
    - Notifications
    - Offline Boot
    - Custom 404 images
    - Offline Add-To-Cart
    - Background Sync
    - Native Look And Feel
    - Offline on iOS
    


                    Section 2 - Measuring Apps
1 - Quantifying Web App Success

2 - Chrome DevTools
Devtools are available at
  - https://developers.google.com/web/tools/chrome-devtools/
  
3 - Lighthouse & WebPageTest
Measuring Apps
  - There are important metrics which will be watched
    - Time to first paint
    - Time to interactive
    - Time to dynamic data
  - The chrome devtools course is recommended
    - There are notes on this course available
      - https://github.com/marb61a/Course-Notes/blob/master/General Web Development/Tools/Mastering Chrome Developer Tools
  - The course will be touching on HTTP2
  - Web Apps should perform at about 60 fps if performing well
    - Knowing how to read the flame chart on the performance tab in devtools is important
      - The flame chart shows how long each function takes to invoke
    - Keeping an eye on this chart during development is recommended
  - Lighthouse is a new tool for measuring performance
    - https://developers.google.com/web/tools/lighthouse/
    - This is a very new tool but has a great advantage as it can be run from Chrome Devtools
  - Webpagetest is a much older but extremely useful tool
    - https://www.webpagetest.org
    - It allows you to run speed tests from around the world
    - It uses real browsers at real connection speeds
      - This gives a much more realistic view of user experience
    - It supports many advanced features such as
      - Multi-Step Transactions, Scripting, Video Capture, Content Blocking and  Single Point of Failure Testing
    - This is free but the domain must be public if using the website version
      - A way around this is to host it yourself as the application is open source
      
4 - Challenge 0: Baseline
The first item will be to set up the project, get it running and test with Lighthouse
    - Clone the github repo
    - Use the yarn command to install
    - Beginning app should be available on the browser
    - Vapid keys are necessary for web push
      - web-push generate-vapid-keys --json > ./private/vapid.json
      - This command generates both public and private keys
      - This file is in json format so should be kept secret
    - The node version should be at least 7.10
    - To start the app use the following command
      - npm run watch
      - Also there are a couple of other options available for running everything
        // This first option is deprecated and npm run watch is recommended instead
        - ./run serve 
        - node ./server/cli/cli.js serve
    - To build the app use the following command
      - npm run build:prod
      - This may take a few minutes to do the first time
      - Webpack will do some tree shaking for unused code
    - Gzip works really well compressing reoccuring string
    - An environmental variable is added which will open a web based tool when building the app
      - ANALYZE=true npm run build:prod
      - This will show a graphical representation of what is making up the compressed app file
