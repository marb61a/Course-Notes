                    Progressive Web Apps And Offline
                    Course Notes Part 2


5 - Challenge 0: Solution
Windows 10 users are recommended to install the Linux subsystem
The installation procedure is available at the following url
  - https://msdn.microsoft.com/en-us/commandline/wsl/install-win10
  - This installs pieces of Ubuntu alongside Windows
  - This gives a true Bash environment
    - This means that setup is much faster



                    Section 3 - Mobile Simulation
1 - DevTools Devices Mode
Mobile Simulation
  - When running the app in Chrome/Firefox/Safari etc, the devices mode is the first thing to be reached for
  - The devices mode can do several things
    - It simulates device web experiences
    - It simulates sensor input
      - This includes GPS co-ordinates which can be simulated
      - Also device orientation and items like long press simulating righ-click
    - It is closer to Android than iOS
    - There is responsive breakpoint visualisation
    - This is still in Chrome
    
2 - iOS Simulator
iOS Simulator
  - Localhost is your machine
  - This is critical for testing Apple-specific features
  - This emulates even CPU architecture
  - This is more similar to a virtual machine
  - It allows you to test things you would not otherwise be able to do
  - Mobile Safari is different then desktop Safari
  - It is easy to connect Safari to the simulator
  - It is useful for validating against the 2 iOS JS engines
    
3 - Android Simulator
Android Simulator
  - 10.0.2.2 is the machine address
  - The simulator can be connected to devtools
  - You will need to install Android Studio
  - This can be an involved process
  - At least one member of the team should have this setup
  - Some of the PWA technology appears on Android first
  - Use standard sizes when creating a virtual device



                    Section 4 - Progressive Metadata
1 - Viewport Metatag
Progressive Metadata
The example application is at this point as if no-one had thought of mobile experience
The first thing to be examined is the viewport
Example Syntax
  // Viewport can be set so as to approximate what viewers expect from native apps
  // The name attribute and content attribute are convention and can be thought of as key-value pairs
  // Reccomended that user scalable be set to no as it will better approximate native app settings where zooming
  // is not available on many native apps eg Twitter on the address bar where no zoom is
  <meta name="viewport" content="width=device-width, initial-scale=1">
    - width is a positive integer or device-width
    - initial-scale is a positive number between 1.0 and 10.0
    - maximum-scale is a positive number between 1.0 and 10.0
    - minimum-scale is a positive number between 1.0 and 10.0
    - user-scalable is a yes or no

2 - Fullscreen Metatags
Apple-Specific Metatags
  - There are hundreds of platform specific tags
  - There is a cheet sheet available as part of the course
Example Syntax
  // Fullscreen
  <meta name="apple-mobile-web-app-capable" content="yes">
  // Black Status Bar
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  // Home Screen Title
  <meta name="apple-mobile-web-app-title" content="Home Screen">
  
3 - manifest.json
The manifest.json file display option has several different settings to choose from
  - fullscreen -- This is where are available area is used
  - standalone -- It looks and feels like a standalone app
  - minimal-ui -- "light-browser" ui, it does not have it's own window
  - browser -- This is a conventional app in a browser
    - This is the default setting

Not all versions of iOS or Android will read this app manifest
  - Older versions of Android for example used to use meta-tags but the trtend is towards an icon array
  
