                    Angular Pro
                    Course Notes


1 - Introduction
A very brief intro to the author
  - Also a quick run through of the course syllabus

2 - Content Projection
Content Projection essentially allows for the injection of content for one place into another
The example uses 2 identical forms
  - The idea is to have 1 form as a create user form and the other as a login form
  - You should be able to use content projection to change pieces of the form
Example Syntax
  // app.component.ts file
  @Component({
    selector: 'app-root',
    template: `
      <div>
        <auth-form (submitted)="createUser($event)">
          // This piece of content will be projected to the form
          <h3>Create Account<h3>
        </auth-form>
        <auth-form (submitted)="loginUser($event)">
          <h3>Login<h3>
        </auth-form>
      </div>
    `
  })
  
  export class AppComponent {
  // Both functions are callbacks  
    createUser(user: User){
      console.log('Create Account', user);
    }
    
    loginUser(user: User){
      console.log('''Login', user);
    }
  }
  
  // Auth form component
  @Component({
    selector: 'auth-form',
    template: `
      <div>
        <form>
          // The h3 elements are replaced by ng-content elements
          // This will be automatically projected into the form and will be seen in the dev tools panel as a H3
          <ng-content></ng-content>
        </form>
      </div>
    `
  })

3 - Projection Slots
Continuing the example from the previous video
  - What happens if there is a need to inject a different button depending on the form
Example Syntax
  // app.component.ts 
  // Adding the buttons initially adds them to the forms but does not remove the old buttons
  // this is where using ng-slot will be used
  @Component({
    selector: 'auth-root',
    template: `
      <div>
        <auth-form (submitted)="createUser($event)" >
          <h3>Create Account<h3>
          <button type="submit">
            Join Us
          </button>
        </auth-form>
        <auth-form (submitted)="loginUser($event)">
          <h3>Login<h3>
          <button type="submit">
            Login
          </button>
        </auth-form>
      </div>
    `
  })
  
  // Auth form component
  @Component({
    selector: 'auth-form',
    template: `
      <div>
        <form (ngSubmit)>
          <ng-content></ng-content>
          <label>
            Email Address 
            <input type="email" name="email" ngModel>
          </label>
          label>
            Password 
            <input type="password" name="password" ngModel>
          </label>
        </form>
      </div>
    `
  }) 

4 - Projecting Components

5 - Contentchild Aftercontentinit

6 - Contentchildren Querylists

7 - Viewchild Afterviewinit

8 - Viewchildren Querylists

9 - Viewchild Template Ref

10 - elementref nativeelement

11 - platform renderer

12 - dynamic components

13 - dynamic input data

14 - dynamic output subscriptions

15 - destroy dynamic

16 - reorder components

17 - template viewcontainerref

18 - template context

19 - ng template out let

Урок 20. ng template out let context
Урок 21. viewencapsulation
Урок 22. change detection strategy
Урок 23. attribute directives
Урок 24. host listeners
Урок 25. host binding
Урок 26. export as
Урок 27. custom structural directives
Урок 28. custom pipes
Урок 29. pipes providers
Урок 30. reactive setup
Урок 31. formcontrol formgroup
Урок 32. componentizing formgroups
Урок 33. binding formcontrols select
Урок 34. form array
Урок 35. form array add
Урок 36. form array remove
Урок 37. form builder
Урок 38. http service observables
Урок 39. valuechanges observable
Урок 40. reset update form controls
Урок 41. custom form component
Урок 42. control value accessor
Урок 43. keyboard events
Урок 44. validators object
Урок 45. custom control validator
Урок 46. custom formgroup validator
Урок 47. async custom validators
Урок 48. route tracing
Урок 49. router event subscriptions
Урок 50. router outlet events
Урок 51. routing resolves
Урок 52. auxiliary outlets
Урок 53. auxiliary routerlink navigation
Урок 54. auxiliary navigation api
Урок 55. destroying auxiliary outlets
Урок 56. esolving auxiliary outlets
Урок 57. lazy loading
Урок 58. preload all
Урок 59. custom preload
Урок 60. canload
Урок 61. canactivate
Урок 62. canactivatechild
Урок 63. candeactivate
Урок 64. testing-setup
Урок 65. testing isolate pipes
Урок 66. shallow testing pipes
Урок 67. testing services with dependencies
Урок 68. testing component methods
Урок 69. testing component inputs outputs
Урок 70. testing component templates
Урок 71. testing components async providers
Урок 72. no errors schema
Урок 73. testing attribute directives
Урок 74. providers usevalue
Урок 75. injection token
Урок 76. providers useclass
Урок 77. providers usefactory
Урок 78. providers useexisting
Урок 79. configurable ngmodules
Урок 80. ngzone
Урок 81. state management
Урок 82. observable store
Урок 83. containers
Урок 84. store services
Урок 85. composing streams
Урок 86. stateless component
Урок 87. outputs to service
Урок 88. api request store
Урок 89. FINAL PROJECT START --- setup install
Урок 90. firebase setup deploy
Урок 91. auth module setup
Урок 92. auth components
Урок 93. angular fire authentication
Урок 94. reactive store
Урок 95. app stateless components
Урок 96. health module
Урок 97. auth guards
Урок 98. meals component observable
Урок 99. creating new meals
Урок 100. meal reactive form
Урок 101. database list item rendering
Урок 102. remove meal stateless
Урок 103. params observable switchmap
Урок 104. reactive form async await
Урок 105. workouts transition
Урок 106. control value accessor
Урок 107. conditional workout types
Урок 108. custom pipes
Урок 109. schedule calendar

110 - schedule controls

111 - schedule days

112 - schedule section streams

113 - emitting data

114 - assigning items

115 - hooking into firebase

116 - Review Deploy
