                    Build a Twelve-Factor Node.js App with Docker
                    Course Notes


1 - Summary & Concepts of the Twelve-Factor App
The Twelve-Factor App is a development and deployment methodology
  - Is it for builing apps using modern concepts
  - There is much more detail available at the 12 factor website
    - https://12factor.net
  - The course lesssons will relate directly to each one of the factors

2 - Use Git Flow as a Reliable Version Control Model
There are notes on the Gitflow methodology available at
  - https://github.com/marb61a/Course-Notes/blob/master/General Development/Git/Using GitFlow

3 - Pin Down NPM Package Versions with Yarn.lock
By default npm is not 100% deterministic
  - Even using shrinkwrap there is not a 100% guarantee that npm install will install the exact same of differnt machines
  - This can be fixed by using the Yarn package manager
    - This was designed to be both deterministic and fast
    - New projects can get started by using -> yarn add follow by the package to be installed
      - yarn add react@^15.0 
      - This installs react version 15 within a range, the @ sign signifies a version and the ^ signifies a range
    - After the installation yarn will create a yarn.lock file
    - It also does file checks on matches to ensure 1 - 1 file downloads
    - Ensure that both the package.json and the yarn.lock file is added to the Git repository

4 - Manage Configuration Values with Environment Variables
Example Syntax
  // Create a new project named foo and change into the directory
  mkdir foo && cd $
  
  // Create a simple Node.js script that connects to a locally running MongoDB instance
  var MongoClient = require('mongodb').MongoClient;
  
  MongoClient.connect('mongodb://localhost:27017/foo', function(err, db){
    if(err){
      console.log("Cannot connect to MongoDB", err);
    } else {
      console.log("Connected to MongoDB");
    }
  });

5 - Proxy Requests for Local and Remote Service Parity
Setting up a proxy for the /images path in the sample application
  - This is a simple express app
  - It will route requests through a CDN depending on a specified URL
Example Syntax
  // index.js
  const path = require('path');
  const express = require('express');
  
  // Express middleware to proxy requests
  const proxy = require('express-http-proxy');
  
  // Setup base image name to an environmental variable
  const baseImageUrl = process.env.BASE_IMAGE_URL;
  
  // Checks to see if the base image url exists and which middleware to trigger depending on the outcome
  const proxyBaseImageUrl = 
    ? proxy(baseImageUrl, {
    
    })
    : express.static(path.join(__dirname, 'public/images'));
  
  const app = express();
  
  app.use(proxyBaseImageUrl);
  
  app.listen(8080);

6 - Build, Release and Run Containers with Docker Compose

7 - Run Stateless Docker Containers

8 - Export Services with Docker Port Binding

9 - Scale Docker Horizontally with Nginx Load Balancing

10 - Ensure Containers Run with High-Availability

11 - Run Consistent Dev, Stage & Prod Docker Environments

12 - Pipe Log Output to STDOUT with Docker

13 - Run One-Off Docker Containers
