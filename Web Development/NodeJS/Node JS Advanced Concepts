                    Node JS: Advanced Concepts
                    Course Notes

There is a complete set of notes for less advanced Node users at
  - https://github.com/marb61a/Course-Notes/blob/master/Web Development/NodeJS/Learn and Understand NodeJS


                    Section 1 - The Internals of Node
1 - How to Get Help
There are a few different ways of getting help from the instructor from the course
  - The recommended method is to use the discussion section on the course board

2 - Starting With Node Internals
The initials structure (which will be expanded as the course develops) of Node is
  - JavaScript code the we write 
    ↳ Node
      ↳ V8 or libuv   -- These are 2 of the most important internal parts of Node
      - Libuv is C++ based and gives access to the filesystem, networking etc
      - V8 is a browser engine for running code
The purpose of NodeJS is to save JS developers writing C++
  - It also provides wrappers and consistent API's which have libuv code

3 - Module Implementations

4 - Node Backed by C++!

5 - The Basics of Threads
When running a program on a computer a process is started

6 - The Node Event Loop
The Event loop is used by Node to handle Aync code
  - When NodeJS starts up it creates a single thread
  - Within this thread lies the Event Loop
  - It is a control structure which decides what Node processes at any given time
  - It is the core of every Node program that is ran
  - Every single Node program ran has one Event Loop
  - A good understanding of how the Event Loop works is needed
    - This is a very difficult subjact to understand
  - Many performance issues can be traced back to Event Loop behaviour
 Example Syntax
  // Creating some pseudocode to illustrate Node's Event Loop
  // loop.js, the code is entirely fake
  
  // node myFile.js
    myFile.runContents();
    
    // Helper function to see if while loop should be executed again
    function shouldContinue(){
    
    }
    
    // In the Event Loop each execution of the while loop is called a tick
    while(shouldContinue()){
    
    }
    
  // exit back to terminal  

7 - The Event Loop Implementation
Continuing with the pseudo example from above
Example Syntax


8 - Event Loop Ticks

9 - Is Node Single Threaded?

10 - Testing for Single Threads

11 - The Libuv Thread Pool

12 - Threadpools with Multithreading

13 - Changing Threadpool Size

14 - Common Threadpool Questions
There are a few common threadpool questions which need to be answered
  Q - Can the threadpool be used for our JS code or can only Node functions use it
  A - Custom JS that has been written can use the threadpool
  
  Q - What functions that are in the Node standard library use the threadpool
  A - This will depend in parts on the OS being used but in general all Filesystem (fs) functions & some crytpography functions
  
  Q - How does the threadpool fit in with the event loop
  A - Using the example code the threadpool tasks running are the pendingOperations 
  
15 - Explaining OS Operations

16 - Libuv OS Delegation

17 - OS/Async Common Questions
Async OS features are OS dependent
  - This means that you cannot depend on the OS running things as you would like
There are 2 questions and answers in the lesson
  Q1 - What functions in the Node std library use the OS's async features
    A1 - Almost everything around Networking for all OS, other stuff is OS dependent
  Q2 - How does the OS async stuff fit in to the event loop
    A2 - Tasks using the underlying OS are reflected in the pendingOSTasks array 

18 - Review
A quick breather and review of the material covered

19 - Crazy Node Behavior

20 - Unexpected Event Loop Events



                    Section 2 – Enhancing Node Performance
1 - Enhancing Performance
There are some large performance hits when doing a lot of work inside the Event Loop
  - There are some strategies available to mitigate these and improve performance
    - Run Node inside cluster mode
      - This will start up multiple copies of Node
      - By running multiple copies of Node there are multipl copies of the Event Loop
      - This is the recommended approach
    - Use worker threads
      - These will use the threadpool set up by libuv 
      - This is an experimental approach

2 - Express Setup
Example Syntax
  // Setting up a simple Express server

3 - Blocking the Event Loop

4 - Clustering in Theory

5 - Forking Children

6 - Clustering in Action

7 - Benchmarking Server Performance

8 - Benchmark Refactor

9 - Need More Children!

10 - PM2 Installation
PM2 is an advanced production process manager for Node.js
  - http://pm2.keymetrics.io
To install PM2
  - npm install pm2 -g 

11 - PM2 Configuration

12 - Webworker Threads

13 - Worker Threads in Action

14 - Benchmarking Workers



                    Section 3 – Project Setup
1 - The Next Phase
In order to move on to developing a production app for Node there will be a boilerplate app cloned
  - This will eliminate having to repeat previous sections
  - The instructor also has another course which addresses this situation

The project repository from this point can be found at
  - https://github.com/marb61a/advanced-node-blog

