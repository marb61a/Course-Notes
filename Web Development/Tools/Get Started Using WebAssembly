                    Get Started Using WebAssembly (wasm)
                    Course Notes


1 - Create and Run a Native WebAssembly Function
The lesson covers how to make a WebAssembly (wasm) function
It uses the WebAssembly Explorer for coding
  - https://mbebenita.github.io/WasmExplorer/
  - This allows for the writing of WebAssembley code in the browser
Example Syntax
  // Every wasm file starts with a module declaration
  (module
    // Then needs to be a creation of the function, in this case the square root function in the example
    // In the example the $sqrt is the function name
    (func $sqrt
      // This is where the function parameters are declared in this case a single parameter of type float32
      (param $num f32)
    )
  )

2 - Compile C Code into WebAssembly

3 - Call a JavaScript Function from WebAssembly

4 - Read WebAssembly Memory from JavaScript

5 - Write to WebAssembly Memory from JavaScript

6 - Allocate Dynamic Memory in WebAssembly with Malloc

7 - Create and Import a WebAssembly Memory

8 - Compiling CC++ to WebAssembly using LLVM, Binaryen and WABT

9 - Clone and Build LLVM with the Experimental WebAssembly Target

10 - Install Binaryen and the WebAssembly Binary Toolkit (WABT)

11 - Typed Arrays in High Performance JavaScript

12 - Step-by-Step JS to WebAssembly Conversion

13 - A First Comparison of the Performance between JS and WebAssembly

14 - A First Comparison of the Performance between JS and WebAssembly

15 - Surpass JS Performance with Optimized Collision Detection in WASM using a Linked List Grid
