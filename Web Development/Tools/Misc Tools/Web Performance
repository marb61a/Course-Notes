                    Web Performance
                    Course Notes


                    Section: 1 - Introduction
1 - Introduction to Web Performance
Introduction to the course and to the instructor
Applications should perform well
  - For people on high end and older equipment
  - Whether you are near or further from a data center
  - It should also do this over time
Performance will have trade offs

2 - Thinking About Performance
What does is meant by performance and why does it matter
  - 0.1 second is the time taken to load that makes users feel a system is instantaneous
  - About 1 second is the limit for users attention who will not feel the system is responsive
  - About 10 seconds is the limit for keeping users focused, for longer delays users will typically do other tasks
  - Slower pages will result in lower page views and conversions
  - It is harder to be fast as applications are getting bigger
  - Not all performance needs are the same
  - There are 3 main types of performance
    - Network Load Performance
    - JavaScript (Parsing, Compilation) Performance 
    - Rendering Performance
  - The importance of types of performance depends on the app
  - People's perception reaction times differ from one environment to another but the following are good for web apps
    - 0 - 100ms -- Instant Reaction
    - 100 - 300ms -- A slight perceptible delay
    - 300 - 1000ms -- Task Focus, perceptible delay
    - 1000+ ms -- Mental context switch
    - 10000+ ms -- The person will normally leave
  - RAIL is a set of benchmarks from Google
    - It is an acronym standing for Response Animation Idle Load
    - Response
      - Tap/Click to paint less than 100ms
    - Animation
      - Each frame completes in less than 16ms
      - Drag to paint in less than 16ms
    - Idle 
      - Use idle time to proactively schedule work
      - Complete that work in 50ms chunks
    - Load
      - Satisfy response goals during full load
      - Get first meaningful paint in less than 1000ms
 Improving performance is about getting progressively better
  - Know what is important in your app and what are pain-points

3 - The Importance of Measurement



                    Section 2 - JavaScript Performance
1 - The Cost of JavaScript

2 - Parsing

3 - Reducing Parsing Times Exercise

4 - Reducing Parsing Times Solution

5 - ASTs and Initial Execution

6 - The Optimizing Compiler

7 - Deoptimization, Deleting Properties

8 - Deleting, Feeding Objects Exercise

9 - Deleting, Feeding Objects Solution

10 - Monomorphism, Polymorphism, and Megamorphism

11 - Optimizing Objects

12 - Hidden Classes

13 - Scoping and Prototypes

14 - Function Inlining

15 - JavaScript Performance Takeaways



                    Section 3 - Rendering Performance
1 - How Web Pages Are Built

2 - JavaScript and the Render Pipeline

3 - Layouts and Reflows

4 - Layouts and Reflows Exercise

5 - Layouts and Reflows Solution

6 - Layout Thrashing

7 - Solving for Layout Trashing

8 - FastDOM

9 - FastDOM Exercise

10 - FastDOM Solution

11 - Frameworks and Layout Thrashing

12 - Painting

13 - The Compositor Thread

14 - Managing Layers

15 - will-change

16 - Applying will-change with JavaScript

17 - will-change Exercise

18 - will-change Solution



                    Section 4 - Load Performance
1 - Latency and Bandwidth

2 - Caching

3 - Service Workers

4 - Lazy Loading

5 - Lazy Loading Demonstrations

6 - Analyzing Bundle Sizes

7 - Slimming Dependencies

8 - Lazy Loading components with React-Loadable

9 - Component Lazy Loading Exercise

10 - Component Lazy Loading Solution

11 - HTTP/2
There are a full set of course notes on HTTP/2 available at
  - https://github.com/marb61a/Course-Notes/blob/master/DevOps/Tools/HTTP Fundamentals



                    Secton 5 - Tools
1 - Introduction to Using Build Tools

2 - Paying the Babal Tax

3 - Useful Babel Plugins

4 - Prepack



                    Section 6 - Wrapping Up
1 - Final Thoughts

2 - Q&A

