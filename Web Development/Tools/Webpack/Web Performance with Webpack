                    Web Performance with Webpack
                    Course Notes


                    Section 1 - Web Performance
1 - Top Performance Issues
The top 3 page load causes are
  - The amount of JavaScript for initial download
    - This is the No 1 factor as JS can be expensive for apps to load
  - The amount of CSS for initial download
  - The amount of initial network requests on initial download
    - Some of the issues can be resolved by using HTTP2
    - Some of this will still be the same size no matter how much optimisation of bundle size is done
In this case the instructor is not referring to the platform
  - It is items like codebase performance

2 - Performance Goals
There are some goals for students 
  - This should not intimidate students
  - These specs are tested in the real world
  - <= 200kb Uncompressed initial JavaScript total
  - <= 100kb Uncompressed initial CSS total
  - HTTP <= 6 initial network calls
    - Most browsers will have 6 - 8
  - HTTP2 <= 20 initial network calls
    - Depending on infrastructure this could be up to 50
  - 90% code coverage 
    - This means that 90% of shipped code is being used

3 - Code Coverage
A quick demonstration of how code coverage will be determined
The Chrome browser is the only one which shows code coverage
  - In the dev tools pallete, shift-ctrl-p and a search box will open
  - Search for coverage and a new box will open
  - The example uses a site based on Vue JS on the frontend and Laravel on the backend
  - The page being examined will need to be reloaded and will show how much code is being used
  - Full source code mapping is needed to be able to see which code is not being used
    - You may need to ship unminified code to properly examined otherwise
  - If there is a lot of unused code it may show where changes could be made to improve performance
    - Unused code should be between 10% and 20%

4 - Code Splitting
GWT - Google Web Toolkit are the pioneers of code splitting
  - GWT allows for unused code to be ran using the runAsync method
    - This stops code running until the needed event happens
Code Splitting is the No 1 learning to take away from the course
  - It is the process of splitting code into async chunks at build time
  - Other frameworks claim code splitting but is not the same



                    Section 2 - Code Splitting
1 - Types of Code Splitting
There are a few reasons why code splitting is important
  - The future of the web is mobile
  - The average mobile website takes 14 seconds to be interactive
  - Loading less code means quicker interaction
Example Syntax
  // Dynamic imports referrs to the following syntax
  // It is part of the whatwg/loader specification
  import();

2 - Code Splitting Demonstration

3 - Webpack Code Splitting Under the Hood

4 - Load a Heavy Module Asynchronously

5 - Code Splitting in Vue, React, & Frameworks

6 - Code Splitting Named Exports

7 - Vendor Bundles are an Anti Pattern

8 - Dynamic Code Splitting

9 - Dynamic Code Splitting Walkthrough



                    Section 3 - Module Methods & Magic Comments
1 - Introducing Magic Comments

2 - Webpack Modes

3 - Webpack Prefetch & Preload

4 - Wrapping Up Code Splitting

5 - Webpack Config Organization

6 - Building Your Library with Webpack

