                    Getting started with WebAssembly & Emscripten
                    Course Notes

The GitHub repo with sample code is available at
  - https://github.com/marb61a/wasm-emscripten


                    Section 1 - Overview
1 - Introduction 
Brief introduction to the course
WebAssembly is one of the most exciting web technologies of recent times
  - It allows for compiled languages to write browser code
  - This allows for very fast JS modules in raw binary format

2 - Prerequisites & Lesson Structure 
There are some prerequisites for the course
  - The course will use C as the basis along with Emscripten
  - As C syntax is sumilar to JS if you know JS you should be able to follow along
  - Knowing some C would be helpful
  - There is a need to know JS and use the latest version of Chrome
  - The course uses the Atom editor but others can be used
  - Knowing how to use the cli is very beneficial
  - There is also a quick example of how to set up a NodeJS server
    - This will use the yarn package manager but npm is okay too



                    Section 2 – WebAssembly Browser API
1 - Loading a WASM 
This section uses the WASM fiddle located at
  - https://wasdk.github.io/WasmFiddle/
  - This compiles the .wasm file needed which is then downloaded 
  - After download the file is added to the /public directory of the project
In the index.html there is a method which will download and instantiate the module in one go
  - instantiateStreaming()
  - This is a relatively new method
  - There are different ways of doing the same thing
  - This is best as it instantiates directly from the downloaded data stream
  - As a result it is much faster than other ways
When running the project
  - node server.js
  - There may be an error due to MIME types
    - It is only a requirement of using instantiateStreaming()
  - Versions of express.js above 4.16 should automatically correct this
  - Disable caching in the webtools to prevent the wasm being cached during development

2 - Exports: Calling C from JavaScript 
How to call main function (C) from the browser using JS
   - The index.html has a wasm object
   - In order for it to be available outside the scope of the closure it is assigned to the window object
   - The window object is a browser object
   - 

3 - Imports: Calling JavaScript from C 

4 - Memory Access: Reading Strings 

5 - Custom Memory Imports



                    Section 3 – Getting Started with Emscripten
1 - What is Emscripten? 
Emscripten is An LLVM-to-JavaScript Compiler
  - This also generates wasm modules
  - It started several years ago focused on compiling C to JS
  - It supports LLVM to support C & C++ compilation
  - It has a JS library called preamble.js to provide JS to C utilities
  - There is no other toolset as mature or feature rich at this moment

2 - Installing Emscripten Tools 
Emscripten has some dependencies
  - This can cause some dependency issues
  - The install process is well documented
  - Install Git to be able to get the latest version
  - A guide to install on Windows\Mac\Linux
    - https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html
  - Emscripten uses Python heavily
  - It uses Python 2.7 which is very different than v3
  - Cmake which builds Emscripten itself
    - https://cmake.org
  -

3 - Compiling your first WASM 

4 - Compilation Options 

5 - Exporting C functions to JavaScript 

6 - Calling JavaScript functions from C 

7 - Preamble Conversion Functions 

8 - Emscripten Module & Memory Buffer 

9 - Debugging 

10 - Runtime Initialisation 

11 - Emrun 



                    Section 4 – Practical WebAssembly
1 - Micro Benchmark: Prime Numbers 

2 - Canvas Project 1: Setup 

3 - Canvas Project 2: Data Structure 

4 - Canvas Project 3: Animation 

