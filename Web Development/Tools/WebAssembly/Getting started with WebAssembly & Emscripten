                    Getting started with WebAssembly & Emscripten
                    Course Notes

The GitHub repo with sample code is available at
  - https://github.com/marb61a/wasm-emscripten


                    Section 1 - Overview
1 - Introduction 
Brief introduction to the course
WebAssembly is one of the most exciting web technologies of recent times
  - It allows for compiled languages to write browser code
  - This allows for very fast JS modules in raw binary format

2 - Prerequisites & Lesson Structure 
There are some prerequisites for the course
  - The course will use C as the basis along with Emscripten
  - As C syntax is sumilar to JS if you know JS you should be able to follow along
  - Knowing some C would be helpful
  - There is a need to know JS and use the latest version of Chrome
  - The course uses the Atom editor but others can be used
  - Knowing how to use the cli is very beneficial
  - There is also a quick example of how to set up a NodeJS server
    - This will use the yarn package manager but npm is okay too



                    Section 2 – WebAssembly Browser API
1 - Loading a WASM 

2 - Exports: Calling C from JavaScript 

3 - Imports: Calling JavaScript from C 

4 - Memory Access: Reading Strings 

5 - Custom Memory Imports



                    Section 3 – Getting Started with Emscripten
1 - What is Emscripten? 

2 - Installing Emscripten Tools 

3 - Compiling your first WASM 

4 - Compilation Options 

5 - Exporting C functions to JavaScript 

6 - Calling JavaScript functions from C 

7 - Preamble Conversion Functions 

8 - Emscripten Module & Memory Buffer 

9 - Debugging 

10 - Runtime Initialisation 

11 - Emrun 



                    Section 4 – Practical WebAssembly
1 - Micro Benchmark: Prime Numbers 

2 - Canvas Project 1: Setup 

3 - Canvas Project 2: Data Structure 

4 - Canvas Project 3: Animation 



                    Section 5 – Outro
1 - Bonus Lecture: Feedback & Course Coupons 

