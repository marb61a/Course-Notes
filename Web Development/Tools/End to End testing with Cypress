  									End to End testing with Cypress
  									Course Notes


1 - Course Overview End to End Testing with Cypress
Brief introduction to the course and to the Cypress testing framework
  - https://www.cypress.io
Testing apps in a real browser is an incredibly valuable part of development
	- Tools for automating these tests have not been high quality historically
	- As apps become more complex these tests can be hard to control and become flaky
	- Testing ends up being manual which is time consuming and expensive

2 - Add Cypress to an Existing Application with npm
The course begins by using a sample Todo application with most of the functionality needed implemented
	- It is built using React and has a straightforward Webpack configuration
To add Cypress to the project
	- npm install --save-dev cypress
	- This adds it as a dev-dependency
Running the following command will open the Cypress UI
	- node_modules/.bin/cypress open
	- At first run Cypress will seed the porject with a sample folder and some sample files
	- There is also a cypress.json file added to the project root
To avoid having to run the long command to open Cypress it can be aliased in package.json
	- "scripts" : {
		"cypress": "cypress open"
	}
Example Syntax
	// Delete the exising spec file in the integration directory inside the Cypress directory
	// Then create a new file first.spec.js, running npm cypress will launch the UI, when the test is clicked
	// it will then launch the test runner GUI
	describe('Simple Test', () => {
		it('Works', () => {
			expect(true).to.equal(true);
		})
	})

3 - Visit a page with Cypress

4 - Find and Test Focused Input with Chrome’s DevTools in Cypress

5 - Test React’s Controlled Input with Cypress Selector Playground

6 - Reduce Code Duplication in Cypress Tests with beforeEach

7 - Stub Network Requests in a Cypress Test

8 - Load Data from Test Fixtures in Cypress

9 - Wait for XHR Responses in a Cypress Test

10 - Create a Single Custom Cypress Command from Multiple Commands

11 - Stub a Post Request for Successful Form Submission with Cypress

12 - Test XHR Failure Conditions with Cypress

13 - Interact with Hidden Elements in a Cypress Test

14 - Create Aliases for DOM Elements in Cypress Tests

15 - Test Variations of a Feature in Cypress with a data-driven Test

16 - Access step-by-step Logs with Chrome devTools and Cypress UI

17 - Create True end-to-end Tests with Cypress

18 - Run Cypress Tests without the UI 
