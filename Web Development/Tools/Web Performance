                    Web Performance
                    Course Notes


                    Section: 1 - Introduction
1 - Introduction to Web Performance
Introduction to the course and to the instructor
Applications should perform well
  - For people on high end and older equipment
  - Whether you are near or further from a data center
  - It should also do this over time
Performance will have trade offs

2 - Thinking About Performance
What does is meant by performance and why does it matter
  - 0.1 second is the time taken to load that makes users feel a system is instantaneous
  - About 1 second is the limit for users attention who will not feel the system is responsive
  - About 10 seconds is the limit for keeping users focused, for longer delays users will typically do other tasks
  - Slower pages will result in lower page views and conversions
  - It is harder to be fast as applications are getting bigger
  - Not all performance needs are the same
  - There are 3 main types of performance
    - Network Load Performance
    - JavaScript (Parsing, Compilation) Performance 
    - Rendering Performance
  - The importance of types of performance depends on the app
  - RAIL is a set of benchmarks from Google

3 - The Importance of Measurement



                    Section 2 - JavaScript Performance
1 - The Cost of JavaScript

2 - Parsing

3 - Reducing Parsing Times Exercise

4 - Reducing Parsing Times Solution

5 - ASTs and Initial Execution

6 - The Optimizing Compiler

7 - Deoptimization, Deleting Properties

8 - Deleting, Feeding Objects Exercise

9 - Deleting, Feeding Objects Solution

10 - Monomorphism, Polymorphism, and Megamorphism

11 - Optimizing Objects

12 - Hidden Classes

13 - Scoping and Prototypes

14 - Function Inlining

15 - JavaScript Performance Takeaways



                    Section 3 - Rendering Performance
1 - How Web Pages Are Built

2 - JavaScript and the Render Pipeline

3 - Layouts and Reflows

4 - Layouts and Reflows Exercise

5 - Layouts and Reflows Solution

6 - Layout Thrashing

7 - Solving for Layout Trashing

8 - FastDOM
02:40:21 - 02:42:53
FastDOM
FastDOM, a library for separating reading and writing to and from the DOM automatically, is a helpful abstraction that reduces the number of forced synchronized layouts. - https://github.com/wilsonpage/fastdom
FastDOM Exercise
02:42:54 - 02:43:32
FastDOM Exercise
In this exercise, students work with FastDOM.
FastDOM Solution
02:43:33 - 02:46:34
FastDOM Solution
Steve walks through the Solution to the FastDOM Exercise.
Frameworks and Layout Thrashing
02:46:35 - 02:54:18
Frameworks and Layout Thrashing
While frameworks are incredibly helpful for implementing performant patterns, they come with overhead that needs to be considered.
Painting
02:54:19 - 02:58:21
Painting
Once the page has been laid out, elements in the Render Tree must be turned into images that can be displayed on the screen. While not all changes will cause a reflow, but most will trigger a repaint.
The Compositor Thread
02:58:22 - 03:01:01
The Compositor Thread
The compositor thread is a thread in the browser that leverages the GPU to create the final version of the page seen on the screen.
Managing Layers
03:01:02 - 03:06:21
Managing Layers
The compositor thread manages layers. One can make our applications perform better by having the compositor thread take care of moving objects around as opposed to the main thread, which has many other responsibilities.
will-change
03:06:22 - 03:13:33
will-change
The will-change property is a hint to the browser that something might happen to an element soon, which would make it worthy of its layer. The browser can choose to take this hint and promote it to its thread in anticipation.
Applying will-change with JavaScript
03:13:34 - 03:15:34
Applying will-change with JavaScript
will-change indicates to the browser that a CSS property is likely to change in the near future. JavaScript is typically the change agent and can let the browser know beforehand that it's getting ready to change a property on an element.
will-change Exercise
03:15:35 - 03:19:00
will-change Exercise
In this exercise, students work on an element, which is currently the cause of a paint storm, and refactor it to use layers.
will-change Solution
03:19:01 - 03:26:36
will-change Solution
Steve walks through the Solution to the will-change Exercise. Steve takes questions from students.
Load Performance

Latency and Bandwidth
03:26:37 - 03:36:37
Latency and Bandwidth
Where assets are located can have an important impact on the time it takes for web pages to load. Using a CDN can solve this by distributing assets around the world. - http://cloudping.info
Caching
03:36:38 - 03:44:58
Caching
The browser will not ask for assets that it believes it already has recent versions of. Caching headers can be set in HTTP responses that let the browser know what it should and should not cache.
Service Workers
03:44:59 - 03:48:37
Service Workers
Service Worker is a new web technology that allows us to programmatically control caches and network requests without relying on HTTP headers. - https://frontendmasters.com/courses/progressive-web-apps/
Lazy Loading
03:48:38 - 03:51:49
Lazy Loading
Steve introduces Lazy Loading. Lazy Loading is a technique to delay initialization of an object until the point at which it is needed.
Lazy Loading Demonstrations
03:51:50 - 03:54:47
Lazy Loading Demonstrations
Steve takes a tour of a demonstration application called "Noted" and showcases how to optimize with lazy loading components as needed. - https://github.com/jamiebuilds/react-loadable
Analyzing Bundle Sizes
03:54:48 - 03:56:35
Analyzing Bundle Sizes
Webpack's bundle analyzer can be used for visualizing the size and contents of the bundles it produces.
Slimming Dependencies
03:56:36 - 04:02:03
Slimming Dependencies
Steve states that not every part of a library is needs to be included in applications. In some cases, picking out only the parts needed is possible. Steve selects the one method he needs from Lodash and then re-evaluates the size of the application's bundle.
Lazy Loading components with React-Loadable
04:02:04 - 04:14:01
Lazy Loading components with React-Loadable
React-Loadable is an abstraction that dynamically lazy-loads react components and renders a loading component. - https://github.com/jamiebuilds/react-loadable
Component Lazy Loading Exercise
04:14:02 - 04:15:05
Component Lazy Loading Exercise
In this exercise, students need to work on coding the markdown component to be loaded dynamicallyâ€”further reducing the size of the initial bundle.
Component Lazy Loading Solution
04:15:06 - 04:26:08
Component Lazy Loading Solution
Steve walks through the Solution to the Component Lazy-Loading Exercise.
HTTP/2
04:26:09 - 04:32:18
HTTP/2
HTTP/2 is a significant update to the transport protocol that gets web pages to browsers. It also invalidates some performance advice that was once standard in the industry.
Tools

Introduction to Using Build Tools
04:32:19 - 04:33:38
Introduction to Using Build Tools
Build tools can help automate best practices for delivering performant web applications.
Paying the Babal Tax
04:33:39 - 04:38:31
Paying the Babal Tax
Babel is an indispensable tool for most front-end engineers these days, but it can have some inverse effects on the size parse times of JavaScript bundles.
Useful Babel Plugins
04:38:32 - 04:47:21
Useful Babel Plugins
Steve reviews some Babel plugins that help implement some of the best practices with little to no additional work.
Prepack
04:47:22 - 04:49:12
Prepack
Prepack is an experimental library for reducing the computing needed to execute JavaScript.


Wrapping Up
1 - Final Thoughts

2 - Q&A
04:53:17 - 04:56:21
Q&A
Steve answers questions from the audience.
