                    Webpack: Transpiling and Bundling JavaScript
                    Course Notes


                    Section 1 - Course Overview
1 - Course Overview
A brief introduction to both the course and the instructor



                    Section 2 - What Is Webpack?
1 - Welcome
Webpack can be considered as both a compiled and a bundler
A quick introduction to the section 

2 - Interactive Coding with Hot Module Replacement
Webpack has many benefits, one of these is Hot Module Reload (HMR)
  - This is a much more interactive way of cding instead of code, compile, wait and reload
This example will be making use of the Vue.js framework
  - Sudents can follow along by using the vue-cli tool and following the instructions on the home page

3 - Seamless Compilation
There is a seamless ability to integrate other build tools
  - This means there is a seamless compilation of anything, code, images, styles etc
  - Tools that can be included are Babel, Typescript, CSS tools etc

4 - Consistent Tooling

5 - Modularity

6 - Benefit - Bundling for Performance

7 - Sophisticated Bundling

8 - npm Install, Import, Go!

9 - Help with Caching

10 - Source Maps Through Any Number of Transformations

11 - A Compiler Platform

12 - Course Series and Updates
This course is set to be part of a series, info is available on the GitHub repo
  - https://github.com/g0t4/optimizing-web-apps-webpack
  - The next parts of the series will deal with advanced toopics including optimising bundles



                    Section 3 - Bundling Code
1 - Cloning and Starting the Solitaire App

2 - The Legacy Solitaire App Structure

3 - Performance Problems in the Solitaire App

4 - Bundling app.js

5 - Inspecting and Using the App Bundle

6 - IIFEs Are No Longer Necessary

7 - Migrating a Second Module to the Bundle

8 - Webpack Polyfills Module Loading

9 - Webpack Polyfills Use Strict for Harmony Modules

10 - Learning from Webpack Source Code

11 - Generating an Interactive Graph of Modules

12 - Challenge



                    Section 4 - Accelerating Development
1 - Benefits of Watch and WDS

2 - Watch Mode

3 - Installing webpack-dev-server

4 - npm run-scripts for Documenting Webpack Commands

5 - Composing npm Scripts
There are extensive notes on composing and using npm scripts at
  - https://github.com/marb61a/Course-Notes/blob/master/Web Development/NodeJS/How To Use NPM Scripts As Your Build Tool

6 - Adding a webpack.config.js File

7 - devServer.contentBase - Set Location of Static Content on Disk

8 - devServer.publicPath - Set Base URL to Serve Webpack Output

9 - devServer.watchContentBase - Reload on Static File Changes

10 - Webpack Configuration Documentation

11 - Looking Under the Hood of the DevServer

12 - Hot Module Replacement Overview

13 - devServer.hot and the HotModuleReplacementPlugin

14 - Reload Fallback

15 - Automatic Restart After Changing webpack.config.js

16 - Disable Reload Fallback

17 - output.publicPath

18 - Identifying Modules by Name with the NamedModulesPlugin

19 - Hot Swapping Methods in a Live Application

20 - Hot Swapping Can Maintain State

21 - Inspecting Hot Updates

22 - Recap
A brief recap on what the section covered



                    Section 5 - Dev Isn't Prod
1 - Intro
Introduction to what will be covered in the forthcoming section

2 - HMR Plugin Bloats Production Builds

3 - Conditionally Adding Plugins with NODE_ENV Environment Variable

4 - cross-env and dotenv Help with Cross-platform Env Vars

5 - Using a CLI Argument to Set the Environment

6 - Environment Option Uses yargs
Multiple and Named Configurations2m 13s
Modularizing Config Files1m 38s
webpack-merge to Merge Configuration Objects2m 24s
Inspecting the Merged Configuration and Config Defaults2m 17s
Conditional Code with the DefinePlugin2m 24s
Careful to Quote String Constants1m 36s
Passing Env Options or Variables Through to Code Constants1m 48s
Touch-ups and Recap



                    Section 6 - Transpiling: Using the Future Now1h 5m
1 - Intro1m 23s
Installing Relevant Babel Packages2m 8s
Why @babel/preset-env3m 47s
Using ES6 Class Syntax1m 43s
Adding a babel-loader Rule2m 20s
webpack-dev-server Adds Modules to the Bundle1m 43s
Excluding node_modules from babel-loader2m 6s
Adding @babel/preset-env to Transform Classes1m 25s
Do Not Transform Harmony Imports and Exports2m 39s
devServer.overlay - Showing Compilation Errors in the Browser2m 27s
Understanding Browserslist Queries4m 8s
Extracting .babelrc.js3m 28s
babel-loader Works with .babelrc.js Too0m 32s
Disabling babel-loader in Development Builds3m 11s
How to Tell babel-loader to Ignore .babelrc
Polyfills2m 40s
Webpack Runtime Uses Promises That Might Need to Be Polyfilled1m 1s
devServer.host - Configuring External Access to WDS1m 19s
Enable Transpilation in Development as Needed0m 47s
Fix Polyfill Issues by Reproducing the Problem0m 50s
Webpack Makes Using npm Packages Facile3m 22s
Studying the Impact of @babel/polyfill
Testing the Promise Polyfill1m 13s
Reducing Polyfills with core-js3m 6s
Reducing Polyfills to Just Promise2m 31s
You Don't Need to Manually Triangulate Polyfills
useBuiltIns: 'entry' - Polyfill Based on Target Browsers2m 34s
Changing Browser Query Changes Polyfills1m 6s
useBuiltIns: 'usage' - Polyfill Based on Target Browsers and Usage2m 5s
Using the Promise Built-in Adds Another Polyfill for IE 11
Someday: @babel/plugintransform-runtime + @babel/preset-env2m 31s
Takeaways1m 28s



Understanding Loaders20m 42s
What Is a Loader?2m 0s
Designing a tee-loader1m 45s
Creating a tee-loader2m 24s
resolveLoader.alias to Resolve a Custom Loader1m 45s
Logging Request and Source per Module1m 16s
Collapsing Grouped Webpack Console Output with Chrome DevTools1m 35s
Debugging Webpack with Chrome DevTools0m 32s
Adding the Same Loader Twice0m 49s
Passing and Parsing Options in the tee-loader1m 45s
Legacy Option Passing via a Query String0m 32s
Inline Loaders Are Occasionally Useful3m 5s
Learn More by Building Loaders - Try a Pitching Cache Loader3m 14s
Running Build Tasks13m 2s
What About Build Tasks?1m 21s
Cleaning the Output Folder Before Bundling3m 44s
Not Just Build Tasks: npm-install-webpack-plugin4m 57s
Finding Plugins for Common Build Tasks3m 0s
Troubleshooting with Source Maps40m 42s
Bundling and Transpiling Make Troubleshooting Difficult1m 6s
Runtime Errors Aren't as Transparent as Compilation Errors3m 9s
Enabling Source Maps with devtool: "source-map"2m 6s
How devtool: "source-map" Works4m 49s
Fast, Inline, Partial Source Maps - devtool: "eval"5m 2s
High Quality Maps with Fast Incremental Rebuild - devtool: "eval-source-map"5m 21s
devtool: "hidden-source-map"3m 45s
Only Map Location and Filename, Not Source Code - devtool: "nosources-source-map"1m 34s
Resources3m 45s
devtool Is Just an Idiosyncratic, String Based Serialization of Plugin Options6m 53s
Add the SourceMapDevToolPlugin Directly for Flexibility Instead of Using devtool3m 12s
Generating Code19m 51s
Challenge: Building a codegen-loader to Capture Build Information6m 34s
Explanation of the Starting Point to My Solution4m 9s
My Solution8m 9s
The End0m 59s
Course info
