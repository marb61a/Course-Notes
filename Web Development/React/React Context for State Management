                    React Context for State Management
                    Course Notes


1 - Introduction to React Context for State Management
Quick intro to the course and manager
State management is tough and there are many options available
Redux maybe overkill for some projects
  - This is where Context comes in
  - Redux uses Context under the hood

2 - Avoid passing props deeply by using React Context
Using an example app
Example Syntax
  // The root component of the app index.js
  class Root extends React.Component{
    state = {
      currentUser: null
    }
    
    handleLogin = user => {
      this.setState({
        currentUser: user
      })
    }
    
    handleLogout = user => {
      this.setState({
        currentUser: null
      })
    }
    
    render(){
      return this.state.currentUser ? (
        <MainPage 
          currentUser = {this.state.currentUser}
          onLogout = {this.state.handleLogout}
        />
      ) : (
        <LoginPage 
          onLogin = {this.state.handleLogin}
        />
      )
    }
  }

3 - Pass Data With a Callback Through React Context

4 - Hide the Implementation Details of a Context Provider

5 - Use Multiple React Context Providers in the Same App

6 - Use a React Context Consumer Outside of the Matching Provider

7 - Use React Context to Display Notifications

8 - Use contextType to Consume Context in a React Class Without a Consumer

9 - Use the useContext Hook to Consume Context in Function Components

10 - Test a Component That Uses a React Context Consumer

11 - Test a Component That Uses a React Context Provider

12 - Performantly Render a Large List of Items with React Context
