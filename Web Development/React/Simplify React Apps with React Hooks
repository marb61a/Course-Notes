                    Simplify React Apps with React Hooks
                    Course Notes


1 - Introduction to Refactoring a React Application to React Hooks
Intro to the course and instructor
Suspense and Hooks are new features
The course will take an existing app and refactor it to use Hooks and Suspense
  - These are much better ways of sharing logic across components

2 - Refactor a Class Component with React hooks to a Function

3 - Ensure all React useEffect Effects Run Synchronously in Tests with react-testing-library

4 - Handle Deep Object Comparison in React's useEffect hook with the useRef Hook

5 - Safely setState on a Mounted React Component through the useEffect Hook

6 - Extract Generic React Hook Code into Custom React Hooks

7 - Track Values Over the Course of Renders with React useRef in a Custom usePrevious Hook

8 - Deeply Compare Inputs in a Custom React Hook for useEffect

9 - Refactor a React Class Component with useContext and useState Hooks

10 - Refactor a render Prop Component to a Custom React Hook

11 - Handle componentDidMount and componentWillUnmount in React Component Refactor to Hooks

12 - Dynamically Import React Components with React.lazy and Suspense

13 - Preload React Components with the useEffect Hook
