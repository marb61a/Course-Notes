                    Build a Server Rendered + Code Split App in React with React Universal Component
                    Course Notes
                    
                    
1 - Install the NPM Dependencies Needed for a Universal React App
There are some packages needed to get React Universal Component working
  - This example uses the yarn package manager
  - yarn add react-universal-component
    - This is the JS fronend library that exposes a high order component that can be used
  - yarn add webpack-flush-chunks
    - This will be used on server side to locate exact chunks to send on initial render
  - yarn add babel-plugin-universal-import
    - This is used to lessen the amount of boilerplate code being written
  - yarn add extract-css-chunks-webpack-plugin
    - This is the plugin which will chunk CSS by file
  - yarn add webpack-hot-server-middleware
    - This is used in development not production

2 - Configure Webpack to Work with React Universal Component
Getting Webpack setup properly to work with React Universal Component
  - The first step is to create a file for the server
    - You may be better creating a copy of the existing file and renaming it
    - In this example the client.dev.js file is duplicated and the duplicate renamed to server.dev.js
  - Each webpack config file should be given a name
    - This will be used by the webpack hot-server middleware
      - This middleware will be expecting 2 configs, one with the name client and one with the name server
    - name: 'client' in the client.dev.js file, name: 'server' in the server.dev.js file
  - The existing target of web is left alone and everything is still ran through babel
  - The CSS rules need to change
    - use 'css-loader' must change to use the CSS chunks loader plugin with the extract method called
    - use: ExtractCssChunks.extract({
        use: 'css-loader'
      })
    - Ensure that the necessary import is added at the top of the file
      - const ExtractCssChunks = require('extract-css-chunks-webpack-plugin');
  - Output will also need to be more specific
    - output: {
        // Webpack will need to be told that we wish filenames to follow a certain pattern
        filename: '[name].js',
        // The Chunk file names should follow the same pattern to ensure consistency
        chunkFileName: '[name].js', 
        // Choose a location to write output to
        resolve: ''
      }
  -

3 - Configure Express  React  Babel to Work with React Universal Component

4 - Configure hot module reloading to work with react-universal-component

5 - Code-Splitting Components with the Universal Higher-Order Component

6 - Dynamically Load a Code-Split Universal React Component via a Prop

7 - Configure a Custom Universal React Loading Component

8 - Animate a Universal React Loading Component using Delay Options and Component Hooks

9 - Set an Error Component in React Universal when a Component Fails to Load

10 - Preload a Universal Component On-Demand with the Preload Method

11 - Load a Universal React Named Exported Component with the Key Option

12 - Add Redux with Server-to-Client State Hydration To A React Universal Project

13 - Lazy Load Redux Reducers with Code-split Universal React Components Using onLoad                    
