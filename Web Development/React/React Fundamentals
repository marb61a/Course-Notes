                    React Fundamentals
                    Course Notes

The course project sourcecode is available at 
  - https://github.com/marb61a/github-battle
  
The live version of the side is available at
  - 

1 - Introduction to the React Ecosystem Video 
The 5 biggest benefits of using React are 
  - Composition, by this it refers to composition of components
    - A component is a small piece of an app functionality that has been wrapped up (encapsulated)
    - Some examples include <Router />, <Date />, <Map /> & <Icon />
    - The same thinking that is applied usually to functions can be applied to Components
    - Instagram app is used to demonstrate the boundaries between components
    - Traditionally application state would exist in the DOM
      - In the React Component model state is managed by each component
      - This approach helps manage complexity in an application
    - This means that the best way of building large applications in React is to build many small ones
    Example Syntax
    // Demonstration of component composition
    var ProfilePic = function(){
      return(
        <img src={'https://photo.fb.com' + this.props.username} />
      )
    }
    
    var ProfileLink = function(){
      return (
        <a href={'https://www.fb.com' + this.props.username}>
          {this.props.username}
        </a>
      )
    }
    
    var Avatar = function(){
      return (
        <div>
        <ProfilePic username={this.props.username} />
        <ProfileLink username={this.props.username} />
        </div>
      )
    }
    
    <Avatar username="Joe Bloggs" />
    
    - This is what makes React so powerful, separating complexity into components and composing them together 
  - Unidirectional Dataflow
    - The main difference between complex web apps and static sites is state
      - Sites like Facebook have a lot of state
      - Things like notifications etc are state Facebook has to manage
      - In React the UI is just a function of the state
        - As the state updates so does the UI
  - Declarative
    - React uses a declarative style of programming
      - Many do not know what this means
    - Imperative style of programming tells how to do something.
      - This has been the most common style of programming 
    - Using declarative has some advantages
      - Reducing the side effects that can occur
      - Mutability is minimised
      - Code is much more readable
      - There are also less bugs in the code
    - React for the most part is declaritive
      - This is because to update state the setState is called which is an imperative approach
  - Explicit Mutations
    - This ties in with calling setState() when updating state
    - This will cause a UI re-render
  - Just JavaScript
    - Getting better at React will make you better at Javascript
    - The React API is fairly small mostly relying on JavaScript
The course will cover several parts of the React ecosystem
  - React, React-Router, Webpack, Babel  and Axios
  - There is a quick explanation of why Webpack exists


2 - Video Babel, Webpack, and React 
React has the reputation of being overly complicated at times
  - This is something that the course instructor disagrees with
  - This is mainly because of needing to know tools like Webpack, Babel & NPM
  - Some of this is eliminated because of using the create-react-app tool
    - This is not used in the course project
  - It is important that you do have some understanding of Webpack & Babel
  - This particular video can be skipped if you have some knowledge of Webpack & Babel
  - There are extensive sets of notes available at 
    - https://github.com/marb61a/Course-Notes/tree/master/Web Development/Tools
  - Make a new directory for the course project
    - In this case it will be a github battle project so a name like github-battle is used
    - Run npm init to add the npm package manager
    - Use the npm package manager to install react and react-dom
      - npm install --save react react-dom
        - The --save is used to add the entry to the package.json file
  - You should not push the node_modules folder to GitHub
    - This does not affect a user who wishes to clone the repo as they will able to read needed packages from package.json
    - To stop the node_module folder being uploaded firstly create a .gitignore file
      - add node_modules and save
      - In this example the dist folder is also ignored
        - Webpack creates this when transpiling code but this has no need to be added to GitHub
  - Both react and react-dom are installed
    - react-dom essentially is the glue between React and the DOM
    - React works as a solution to other problems than the DOM which is why react-dom is not part of the react package
      - One example is React Native where React works well but there is no DOM
  - The example will create an example component prior to wiring it up to make it work
    - Create an app folder
      - Inside create a couple of files 
        - index.css is first created --> body {background: green;}
        - index.js is next and is where the component will live
          Example Syntax
            // Index.js file
            var React = require('react');
            var ReactDOM = require('react-dom');
            require('./index.css');
            
            // There are a few different ways to create a component, the original React.createClass is deprecated
            class App extends React.Component{
              // Nearly all components will have some UI interaction which happens using the render method
              render(){
              
              }
            }
  -

3 - Solution - Props 

4 - Solution - .map and .filter 

5 - Video Validating Components with PropTypes

6 - Pt1 Intro and Implicit Binding

7 - Pt2 Explicit binding with .call

8 - Pt3 The new and

9 - Managing and Updating Component State

10 - Stateless Functional Components

11 - Making Ajax Requests in React

12 - Adding React Router to our Application

13 - Forms and Encapsulation in React

14 - Dynamic Rendering + Query Params

15 - Axios, Promises, and the Github API

16 - Composition via props.children

17 - Building a Highly Reusable Component

18 - Video Building for Production + Hosting
 

