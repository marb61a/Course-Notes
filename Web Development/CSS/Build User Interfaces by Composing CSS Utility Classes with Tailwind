                    Build User Interfaces by Composing CSS Utility Classes with Tailwind
                    Course Notes


1 - Composing CSS Utility Classes with Tailwind Course Introduction
Quick introduction to the course
Tailwind is a CSS framework
  - https://tailwindcss.com 

2 - Compile Tailwind to CSS with gulp
The course starts off with a project containing only an index.html file
To add the Tailwind package to a project using the Yarn package manager
  - yarn add tailwindcss --dev
    - This adds it as a dev-dependency
The example also adds gulp
  - yarn add gulp gulp-postcss --dev

Example Syntax
  // Creating a gulp file
  // gulpfile.js
  const gulp = require("gulp");
  const postcss = require("gulp-postcss");
  const tailwindcss = require("tailwindcss");
  
  const PATHS = {
    css: "./src/styles.css",
    config: "./tailwind.js",
    dist: "./"
  }
  
  gulp.task('css', () => {
    return gulp.src(PATHS.css)
      .pipe(postcss([
        tailwindcss(PATHS.config),
        require('autoprefixer')
      ]))
  });
  
3 - Create Custom Utility Classes in Tailwind
Example Syntax
  // The example uses a simple paragraph section styled with Tailwind
  // The y in class means that padgin is applied vertically ot along the y-axis
  <section class="py-8 bg-purple-lightest">
    // In this case the padding is horizontal or along the x-axis
    <div class="container mx-auto px-6">
      <h2 class="text-purple-darker mt-0 mb-3 leading-light">
        Paragraph Title
      </h2>
      <p class="text-purple-darker">
        Lorem Ipsum text
      </p>
    </div>
  </section>
  
  // The tailwind.js config file
  padding: {
    px: "1px",
    "0": "0",
    "1": "0.25rem",
    "2": "0.5rem",
    "3": "0.75rem",
    "4": "1rem",
    "6": "1.5rem",
    "8": "2rem"
  }

4 - Apply mobile-first Responsive Classes in Tailwind

5 - Style Elements on hover and focus with Tailwind’s State Variants

6 - Change Styles on Multiple Elements with Tailwinds group-hover

7 - Control What Variations are Generated for Each Utility Class Module in Tailwind

8 - Keep Specificity in Check when Working with Tailwind

9 - Extending Tailwind with Responsive Custom Utility Classes

10 - Abstract Utility Classes to BEM Components in Tailwind

11 - Create a Responsive Card Component by Composing Tailwind's Utility Classes

12 - Customize Tailwind’s Naming Convention for Generated Utility Classes

13 - Removing Unused CSS in Tailwind with PurgeCSS
