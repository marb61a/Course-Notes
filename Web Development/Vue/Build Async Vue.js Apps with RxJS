                  Build Async Vue.js Apps with RxJS
                  Course Notes


1 - Configure Vue.js to Enable RxJS Streams
Create a new Vue project with the vue-cli
Install rxjs and vue-rx
  - npm install rxjs vue-rx
Example Syntax
  // main.js
  import Vue from 'vue'
  import App from './App.vue'
  import Rx from 'rxjs'
  import VueRx from 'vue-rx'
  
  Vue.use(VueRx, Rx)
  
  Vue.config.productionTip = false
  
  new Vue({
    render: h => h(App)
  }).$mount("#App")
  
  // App.vue
  <template>
    <section>
      <h1>Vue Rx Tutorials</h1>
    </section>
  </template>
  <script>
    import { Observable } from 'rxjs'
  
    export default {
      subscriptions: {
        // Dollar signs are a standard naming convention for naming streams
        interval$: 
      }
    }
  </script>

2 - Create RxJS Streams in the Vue.js Subscriptions Function
Example Syntax
  // Reusing code from the previous example
  // App.vue
  <template>
    <section>
      <h1 class="title">{{timesTwo$}}</h1>
      <h1 class="title">{{timesThree$}}</h1>
    </section>
  </template>
  <script>
    import { Observable } from 'rxjs'
  
    export default {
      // Rather than using a subscriptions object like in the previous example it is more common to use
      // a subscriptions function which returns an object with the streams on it
      subscriptions() {
        const interval$ = Observable.interval(1000);
        const timesTwo$ = interval$.map(i => 1 * 2);
        const timesThree$ = interval$.map(i => 1 * 3);
        
        return{
          timesTwo$,
          timesThree$,
        }
      }
    }
  </script>

3 - Access Events from Vue.js Templates as RxJS Streams with domStreams

4 - Stream an API using RxJS into a Vue.js Template

5 - Map Click Event Streams to Load Data with Vue.js and RxJS

6 - Split a Request into Data Stream and an Image Stream with RxJS and Vue.js

7 - Handle Image Loading Errors in Vue.js with RxJS and domStreams

8 - Switch to a Function which Creates Observables with Vue.js and Rxjs

9 - Catch Errors when Data Fails to Load with Vue.js and RxJS

10 - Share RxJS Streams to Avoid Multiple Requests in Vue.js

11 - Disable Buttons While Data is Loading with RxJS and Vue.js

12 - Pause Until Another Stream Completes with exhaustMap in RxJS and Vue.js

13 - Pass Template Data Through domStreams in Vue.js and RxJS

14 - Watch Vue.js v-models as Observable with $watchAsObservable and RxJS

15 - Sync Vue.js Components with Streaming Content using $watchAsObservable and RxJS

16 - Map Vue.js Components to Remote Data Streams with RxJS

17 - Use Promises with RxJS in Vue.js

18 - Cache Remote Data Requests with RxJS and Vue.js

19 - Optimize Bundle Size by Piping Operators with RxJS and Vue.js
