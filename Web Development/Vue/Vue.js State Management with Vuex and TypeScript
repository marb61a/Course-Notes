                    Vue.js State Management with Vuex and TypeScript
                    Course Notes


1 - Create a Vuex Store using TypeScript
Using an existing example that shows a list of todos
Example Syntax
  // App.vue
  <template>
    <div id="app">
      <ul>
        <li v-for="todo in todos">{{ todo.text }}</li>
      </ul>
    </div>
  </template>
  
  <script lang="ts">
    import Vue from 'vue'
    import { Component } from 'vue-property-decorator'
    
    @Component
    export default class App extends Component {
      todos = [{ text: "Buy Milk" }]
    }
  </script>

The locally stored todos will be moved to a store
  - Install Vuex --> npm install --save vuex vuex-class
Example Syntax
  // Create a store folder with an index.ts file

2 - Access State by using Vuex getter functions with TypeScript

3 - Modify State by using Vuex Mutations with TypeScript

4 - Use Vue Tools to Navigate Across the Vuex State

5 - Perform Async Updates using Vuex Actions with TypeScript

6 - Handle Forms Connected to a Vuex Store using TypeScript

7 - Split Vuex Store into Modules using TypeScript

8 - Lazy Load a Vuex Module at Runtime using TypeScript

9 - Access the Root State from a Vuex Module using TypeScript

10 - Use Namespaces in Vuex Stores using TypeScript

11 - Call a Root Vuex Mutation or Action from within a Module in TypeScript

12 - Write a Vuex Plugin using TypeScript

13 - Add options to a Vuex plugin using TypeScript
