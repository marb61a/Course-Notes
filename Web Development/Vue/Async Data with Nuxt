                    Async Data with Nuxt.js
                    Course Notes


1 - Introduction to Asynchronous Data with Nuxt.js
The course will teach working with asynchronous data in Nuxt.js
  - There will be a couple of different approaches used
  - Vuex is not used in the course
The JSONPlaceholder fake API for testing will be used
  - https://jsonplaceholder.typicode.com

Example Syntax
  // index.vue
  <template>
  
  </template>
  <script>
    import Logo from "~/components/Logo.vue"
    
    export default {
      components: {
        Logo
      },
      head() {
        return {
          title: 'Home Page',
          meta: [
            {name: 'twitter:title', content: this.post.title},
            {name: 'twitter:description', content: this.post.content},
            {name: 'twitter:image', content: 'image-url'},
            {name: 'twitter:card', content: 'summary-large-image'},
          ]
        }
      },
      data() {
        return {
          posts: []
        }
      },
      // This will get the posts when the component is mounted
      // It is a very common approach for fetching async data
      // Nuxt has extra feature that will make the process more organised
      mounted() {
        // Fetch is available by default in all modern browsers
        fetch('https://jsonplaceholder.typicode.com/posts')
          .then(response => {
            response.json()
              .then(posts => {
                this.posts = posts
              })
          })
      }
    }
  </script>
  
  <style scoped>
    .container {
      display: flex;
    }
  </style>

2 - Fetch Async Data with Axios

3 - The asyncData method and the context

4 - The Axios Module

5 - Configuring the Axios Module

6 - Global Authentication Headers

7 - Async Data in Vuex with Nuxt

