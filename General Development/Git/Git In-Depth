                    Git In-Depth
                    Course Notes


1 - 
Introduction to the course
There are some prerequisites for taking the course
  - Students need to have a command line which supports UNIX commands
  - Git version greater than 2.0
    - To check git version -- at the prompt type git --version
  - Students need to have HitHub accounts (If not then sign up for free)
  - Clone the class repo that has the slides and exercises
  - Mac users recommended to have Homebrew package manager installed
This is an advanced course so familiarity with Git basics is expected
Understanding what is going on under the hood will help with troubleshooting Github issues
There will be exercises at the end of each chapter
  - Some example code will be in Python
A quick run through of the course syllabus
It is important to use command line but why?
  - There are lots of graphcal tools but you will not understand under the hood
  - To fully understand Git it is needed to use a command line as it was intended
  
Git is a distributed version control system
  - At its heart it is a key value store
  - The value is equal to the data
  - The key is equal to a hash of the data
    - The key is a SHA1 cryptographic function
    - Given a piece of data is produces a 40 digit hexadecimal number
      - This is also called at times a content addressable system
        - This is because you can use the content to generate the key
    - The value should always be the same if the input is the same
  - You can use the key to retreive the content
  - Git stores items in Git Objects
    - One of the basic objects are called blobs
    - Git stores compressed data in a blob along with header metadata
      - The header includes, the identifier blob, the size of the content, \0 delimeter and content
      - Blobs are unique and collisions are highly unlikely
Example Syntax
  // Asking Git for the hash of an object
  git hash-object file\input
There are many tools available for generating SHA1 hashes and some are platform dependent
  - The course instructor uses openssl

Where Git stores its information
  - A git repository is usually stored in the .git directory
  - The blob misses some information eg filename or directory structures
  - Git stores other information in a tree
  - A tree contains
    - Pointers to other blobs
    - Pointers to other trees
    - This is because sub-directories can be nested
    - It also contains some metadata such as
      - The type of pointer (blod or tree), file or directory name, mode (symbolic link, executable link etc)
  - Git also only stores identical information once

Optimisations
  - Git has a number of optimisations
    - Git opjects are compressed
    - As files change their contents stay mostly the same
    - Git optimises this by compressing these files together into a Packfile
    - The Packfile stores the objects and the deltas
      - Deltas are the differences between file versions
    - Packfiles are generated when you have too many objects during garbage collection or during a remote push
 
Commits
  - A commit points to a tree
  - It contains metadata for a number of items
    - Author and committer, date, message, parent commit
  - The sha1 of the commit is the hash of all of this
Example Syntax
  // Git objects are compressed so just using cat will not work but git has its own command
  // -t will print the type, -p will print the contents
  git cat-file -t "commit-hash"
  git cat-file -p "commit-hash"
  - Commits cannot be changed, if any commit data is changed it will have a new SHA1 hash
  - The files themselves maynot change but the created date will

There is then an exercise for students to attempt
  - The solution is in the next section
  
2 -


3 -

4 -

5 -

6 -

7 -

8 -

9 -

10 - 
