                    BIND and DNS - Course Notes
                    
                    
                    Section 1 - Introduction
1 - Welcome
A very quick welcome and intro to the course
The internet as we know it would not exist without name servers
  
2 - What you should know
If a student wishes to follow along they should have
  - A domain name will full admin access
They should also know
  - DNS
  - Bash Shell


                    Section 2 - Installing BIND
1 - Installing BIND         
You will need elevated privileges to install Bind -- either root or sudo
Different distro will have diiferent packages
Red Hat\CentOS
  - yum install bin bind-utils
Debian\Ubuntu
  - apt-get install bind9 bind9utils bind9doc
Suse
  - Use the inbuilt Software Management tool
  - Install both DNS and DHCP

                    
                    
                    Section 3 - Types Of Name Servers
1 - Caching Name Server
A Caching Name Server is sometimes called a resolver
Its first task is to look things up
It remembers answers to queries 
It then answers them without looking up again
It is of benefit because takes longer to call remote server than a local cache
There maybe significant saving if the entire LAN doesn't have to look up the remote server but the local cache
On some servers this Caching Server is in the etc/resolve.conf file
One of the downsides of using a Caching Name Server is that it may return stale results
  - The TTL may affect how often caches are changed
  - Results may have already changed on the Authoritative Name Server and not made it to the cache
Caching is temporary
  - When a Caching Name Server has its files reloaded or is rebooted then the entire cache is cleared
Although technically a separate area recursive queries are often handled by a Caching Name Server
  - Recursive DNS queries occur often
  - A recursive query is when multiple intermittent queries are needed to provide a final result to a single query

Example named.conf file
  // This is needed to allow Bind to act as a Caching Name Server
  acl internals{172.16.72.0/24; 192.168.1.0/24; }; // Set this to your internal LAN
  
  //..
  // This allows for recursion and caching
  options{
    recursion yes;    // This is the default setting so is optional
    allow-recursion{internals};
  }
  //..
  zone "." IN{
    type hint;
    file "root.servers";
  };

2 - Forwarding Name Server
This is also sometimes called a Proxy Server
They are similar to but should not be confused with Caching Name Servers
  - They both cache results of DNS queries
  - The Forwarding Name Server conducts non-recursive queries
  - The Forwarding Name Server sends a single request a recieves a single reply
A common use case for using Forwarding Name Servers is
  - When you have outsourced your name servers to a this party
  - There are multiple public providers eg OpenDNS which has a free tier available
  - The Forwarding Name Server is setup to provide the benefit of caching while leaving the actual DNS
    querying to the Remote Name Servers provided by the third party
  - This also makes LAN configuration easier
There are both benefits and downside to using Forwarding Name Servers
  Benefits
    - Reduced External Network traffic
    - Adds a layer of abstraction
    - It will lighten the load on the name server
  Downsides
    - It is nearly the same as the Caching Name Server
    - It may return stale results
 Editing named.conf
  - set recursion to no
  - set forwarding only
  - forwarders { dns servers ip address we want to forward to}

3 - Authoritative Only Name Server
This is a name server with a sole purpose
  - To provide an official answer to a DNS query for a domain
Some characteristics
  - It does not cache
  - It will be either a Zone's master or slave
  - It can be for multiple zones or domains

4 - Mixed Configuration Name Server
This is a name server dedicated to anything other than a single purpose
There is no standard naming convention for anything other than a single purpose naming server
  - You may need to use different name servers configured in many different ways
There are various names used for deploying name servers in various manners
  - Stealth Server
  - Split Server
  - Shared Server
  - Separate Servers
  - DMZ Servers
Single Server - Exposes you to attack from hackers, it is very useful for practicing in a sandbox

                    
                    Section 4 - Zone Configuration File
1 - Zone Config Files
Zone files are plain text files 
They describe what is in a DNS zone
The chapter will be explaining each section of a zone file
  - There is a sample zone file included as part of the course

2 - TTL
The $TTL or Time To Live field is usually the first one in a zone file
It sets the default TTL for the zone
It can be overridden
The values in TTL are in seconds
  - The maximum value allowed works out at about 68 years
  - You should work with more reasonable values eg 2400000 equals about 4 weeks
  - A minimum should be 86400 which is 1 day
When the duration of a TTL has passed it is no longer considered valid
  - If you cannot get an answer after 4 weeks you should assume that the record is inaacurate
Syntax
  $TTL num_of_seconds eg $TTL 2400000
Bind V9 will not load a zone without a valid TTL
An example of when to use smaller values is when planning changes to a network
  - If you change an IP address it may take a long time to propogate with a larger TTL
  - If a change is imminent you may wish to put the change as low as 12 hours or $TTL 43200;
Overiding the values can be done and the specification for dooing so is in RFC2038
  - Bind has its own syntax that makes things much easier
    - It will accept durations other than seconds
      - m for minutes
      - h for hours
      - d for days
      - w for weeks
    - Instead of 86400 you can use 1d, 48h for 48 hours, you can combine 1h 30m for 90 minutes

3 - ORIGIN
$ORIGIN value
  - The value appended to names without a trailing dot
  - It is meant to clean up a zone file and make it easier to read
$ORIGIN example.com.
  - Any records in the lines following this without an ending dot will have example.com. appended to it
  - Therefore ftp IN CNAME server1 becomes
    - ftp.example.com. IN CNAME server1.example.com.
Entries that end in a dot are called Fully Qualified Domain Names (FQDN's)
  - ftp.example.org. is an FQDN but ftp.example.org is not

4 - SOA
SOA - Start Of Authority which is the most important entry in a zone file
  - This record can be quite complex and is often quite long
  - The @ sign is used as a substitute for the current $origin
The SOA will look like
  $86400                // Often not set as uses the previously set default
  $ORIGIN example.com.
  @ IN SOA nameserver.example.com . emailadmin.example.com. (
    // The serial number can be anything between 0 and over 4 billion
    // Convention dictates that you use yyyymmddss as the basis for your serial
    // The last 2 numbers can be incremented for version or revisions, you always start low and increment
              2015081703; serial 
              
              21600;                 // Refresh value which is set to 6 hours here, This is the time
                                     // Taken by the slave server to check with the master for zone modifications
              
              3600;                  // Retry interval which is the intervals which will be used by a slave if it is
                                     // unable to contact the master server to check for zone modification
                                     
              604800;                // The slave will continue trying to contact the master until the expiry time is 
                                     // reached, in this case a week, if this value is reached the slave will give up
                                     // and stop responding to queries
              
              86400                  // The negative response TTL value is used when a resolver requests to resolve a
                                     // host name but the name server cannot resolve it because it does not exist then
                                     // it will receive an NX domain error from the server, the resolver will then return
                                     // this value for the duration of the NX value which can be from 0 - 3 hours
  );

5 - NS
Second only to the previous in importance is the NS Resource Record
  - Its purpose is to define the authoritative name server(s)
  - They are defined in RFC1035
NS Resource Record Syntax
  name                              // Can be explicitly stated but is often taken from the SOA record, it is the zone record
  ttl                               // This is a standard ttl for this record should you override the zone default
  class                             // Almost always IN which defines it as the internet
  NS                                // 
  name                              // This is the name of the name server usually a FQDN

6 - MX

7 - A

8 - CNAME

9 - PTR

10 - Other Zone Files

                    
                    
                    Section 5 - Basic Name Server Setup
1 - Get Ready
Some information on the examples that will be used through the rest of the course
  - The examples will be used are fictitious and are put together in a sandbox
  - These are not examples that should be used on your company network
  - Understand that adminsistering a name server may not be a viable option for the company
    - You will need to ensure that there is full buy in from stakeholders
    - If there is a security team they will need to be involved heavily
  - Everything is a trade off
  - The examples used are as close to real world as possible
    - Being a part of an example is not an endorsement of any kind
    - In order for there to be examples there had to be some providers chosen
    - Always do your own search and research
  - In order to follow along with the lab there are a few prerequisites
    - You will need to have a registered domain name
      - You can make use of free domain names that are available on the internet for testing purposes
    - You will need a web hosting provider
      - There are many different choices available for this purpose
    - You will also need to have an e-mail hosting provider
      - Like the example above there are a wealth of choices available
      - You will need to choose one which allows you to use your domain and set your routings
    - You will also need to have a secondary DNS provider
      - You do not always want to run a slave server on-premises
    - You will also need shell access on an external computer
      - This will give the ability to test as if you were an outsider
      - For example querying your own name server from outside your network
  - There are a couple of things to be kept in mind when building the lab
    - Security, make sure that you perform a risk analysis
    - Security, discuss options with your security person
    - Security, do more research!!!!!!

2 - Create And Verify The Zone File

3 - Load And Test The Zone File

4 - Allow Queries From Localnets

5 - Reverse Zone File

6 - External Zone File

                    
                    
                    Section 6 - Advanced Name Server Setup
1 - Configure a Secondary Name Server  

2 - Register A Name Server

3 - Updating Zones

4 - Serve A Website

5 - Third Party Email Server Setup

6 - MX and SPF Records For Email
                    
                    
                    Section 7 - Security Concerns
1 - TSIG
Due to the nature of DNS information is usually sent in the clear
  - A man in the middle attack is possible
  - Hijacking of resources can occur
The solution to some of these problems is called TSIG
  - Transaction SIGnatures
    - TSIG ensures data integrity and authentication
    - It is lightweight and flexible for secure communications between name servers
    - Its standard can be found at RFC 2845
    - It uses a single shared secret key
    - Keys need to be securely distributed
    - Keys can be generated using a utility called dnssec-keygen
Example Key Generation 
  - mkdir var/named/keys
  - cd var/named/keys
  - dnssec-keygen -a hmac-md5 -b 128 -C -n host tinjaw.site
    - The -a is for the algoritm which is hmac-md5
    - The -b is for how big the key sizr, in the example 128 bits

2 - RNDC

3 - DNSSEC
                    
                    
                    Section 8 - Conclusion
1 - Next Steps
