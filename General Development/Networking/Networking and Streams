                    Networking and Streams
                    Course Notes


                    Section 1 - Networking, Servers, and Clients
1 - Networking and Packets
This can mean a lot of different things
  - In the context of the course it is client, server, TCP etc
Packets can be where the payload is broken up into smaller chunks
  - These can be delivered out of order which can cause issues

2 - Protocols and Ports

3 - Servers and Clients

4 - Netcat

5 - HTTP and Headers

6 - HTTP Post

7 - Curl

8 - Curl Headers

9 - SMTP

10 - IRC

11 - Q&A: IRC Nicknames

12 - Binary Protocols and Inspecting Protocols



                    Section 2 - Streams
1 - Introducing Streams

2 - Transform Data

3 - Introducing through2

4 - Q&A: Streams

5 - Using through2

6 - Introducing concat-stream

7 - Q&A: Buffering Streams



                    Section 3 - Stream Types
1 - Stream Types

2 - Writable Streams
01:20:29 - 01:22:48
Writable Streams
After examining the methods for creating writable streams, James demonstrates how to build one.
Readable Stream
01:22:49 - 01:27:43
Readable Stream
James looks at readable stream methods, which are used when supplying data. Readable streams can also be paused and resumed.
Transform and Duplex Stream
01:27:44 - 01:29:44
Transform and Duplex Stream
James reviews the transform stream, which is a particular kind of duplex stream used to operate on a stream in transit. Then James looks at duplex streams, which can accept and deliver content at the same time.
Duplex Streams
01:29:45 - 01:34:25
Duplex Streams
After taking questions from students about different types streams, James provides an example of a duplex stream. Then James takes questions from students.
Simple VPN
01:34:26 - 01:44:07
Simple VPN
Based on a question from a student, James builds a simple VPN using cryptographic core streams methods.
Object Streams
01:44:08 - 01:50:34
Object Streams
James introduces object streams with objectMode, which allows use of any kind of object except null into a stream.
Core Streams

Core Streams
01:50:35 - 01:54:00
Core Streams
James reviews the core streams that are available in node.
HTTP Core Streams
01:54:01 - 02:00:48
HTTP Core Streams
After reviewing HTTP Core Streams, James builds an server and client and have them talk to each other.
Crypto Streams
02:00:49 - 02:03:45
Crypto Streams
James discusses other cryptographic core methods and demonstrates how to incorporate a hash into a stream that can be used to securely identify unique information.
Zlib Core Streams
02:03:46 - 02:08:38
Zlib Core Streams
To use Gzip and Deflate/Inflate, James reviews the Zlib core methods.
split2
02:08:39 - 02:12:53
split2
James introduces split2, which breaks up a stream and reassemble that stream so that each line is a chunk.
Web Socket

Websocket Streams
02:12:54 - 02:22:00
Websocket Streams
James illustrates how to put streams in the browser with HTML5 websockets using node Streams API.
Websocket Node Client
02:22:01 - 02:23:32
Websocket Node Client
After setting up the websockets to work in the browser, James shows how to streams in node with a node websocket client.
Stream Modules

collect-stream, from2, and to2
02:23:33 - 02:27:31
collect-stream, from2, and to2
James reviews modules found to be useful in development: collect-stream for putting streams into an array and performing unit tests; from2 for ready stream with a pull function; and to2 for a writable stream with a write and flush function;
duplexify
02:27:32 - 02:32:32
duplexify
James introduces a duplexify, which creates a writeable and readable stream into a single streams2 duplex stream.
pump, pumpify, and end-of-stream
02:32:33 - 02:38:20
pump, pumpify, and end-of-stream
James discusses error propagation and how it leads to server crashes. To contribute to creating stronger streams, James uses the pump module that helps clean up streams to handle errors gracefully. The pumpify module does similar error handling as pump, but also provides a readable and writeable stream. James introduces end-of-stream, which is a node module that calls a callback when a readable/writable/duplex stream has completed or failed.
Remote Procedure Call and Multiplex

rpc-stream
02:38:21 - 02:42:17
rpc-stream
James introduces Remote Procedure Call (RPC), which is a protocol that one program can use to request a service from a program located on another computer on a network without having to understand the network's details. Then James shows how to set up a simple RPC system.
Multiplex
02:42:18 - 02:50:51
Multiplex
Due to limitations of the number of streams a browser can have at one time, James reviews how to use multiplex to send many streams over a single stream.
Wrapping Up

Q&A: WebRTC
02:50:52 - 03:02:48
Q&A: WebRTC
James takes questions from the audience about using WebRTC with webrtc-swarm.
Q&A: Tag Template Literal
03:02:49 - 03:06:32
Q&A: Tag Template Literal
James takes questions from the audience about tag template literal, the HTML parser, and application frameworks. - - https://www.npmjs.com/package/dom-morph - https://github.com/yoshuawuyts/choo
Q&A: WebAssembly
03:06:33 - 03:08:10
Q&A: WebAssembly
James talks about the future of JavaScript and WebAssembly.
